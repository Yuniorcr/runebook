<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="21f17fab175ddebdbe68388bfa305b2bb86e5acd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the server doesn't provide a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&quot;&gt;Content-Type&lt;/a&gt;&lt;/code&gt; header, &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; assumes that the MIME type is &lt;code&gt;&quot;text/xml&quot;&lt;/code&gt;. If the content isn't valid XML, an &quot;XML Parsing Error: not well-formed&quot; error occurs. You can avoid this by calling &lt;code&gt;overrideMimeType()&lt;/code&gt; to specify a different type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2cb9d0b58405f8094e896f87d9eabefd74d13a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the specified &lt;code&gt;selectors&lt;/code&gt; include a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements&quot;&gt;CSS pseudo-element&lt;/a&gt;, the returned list is always empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76f1a1fae4af4fcdfb0f3e3e3ccefd351a993bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the specified &lt;code&gt;selectors&lt;/code&gt; include a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements&quot;&gt;CSS pseudo-element&lt;/a&gt;, the returned value is always &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09b77ea0832ed82638a6c074fb4fd685e1c5aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the track has been disconnected, the value of this property can be changed, but has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbd9f71ef98f583d98e2c26b23d61f1cefd4baf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the user enters a value different from the value expected, this may return an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f41367cc0be5c9e682a254c753418376ee29bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you need to seek with precision, you should set &lt;a href=&quot;currenttime&quot;&gt;&lt;code&gt;HTMLMediaElement.currentTime&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c41c629e07d303956d2c2f74436c7ff72318f6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you specify a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; as the data to append to the &lt;code&gt;FormData&lt;/code&gt; object, the filename that will be reported to the server in the &quot;Content-Disposition&quot; header used to vary from browser to browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df8992f5c7c8ac403e44453f17aba2262469998" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you try out the example on Glitch, please note that any changes made to the code will immediately reset any connections. In addition, there is a short timeout period; the Glitch instance is for quick experiments and testing only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407dfbbb77db59b856c39718c84d73949f7a259e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you use &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIDOMWindowUtils#setCSSViewport()&quot;&gt;nsIDOMWindowUtils.setCSSViewport()&lt;/a&gt;&lt;/code&gt; to set the virtual window size for page layout purposes, the value returned by this property corresponds to the viewport width set using that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea2bbde56fe935602ae6594791112b1034ce459" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your renderings seem distorted, try specifying your &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes explicitly in the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; attributes, and not using CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26490242d0dbc05229d1d365ec0c094b5569fdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Image data can be painted onto a canvas using the &lt;a href=&quot;putimagedata&quot;&gt;&lt;code&gt;putImageData()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574b06bc4eabe2b8cb7093c495cfb1d01c0d0947" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Image data can be retrieved from a canvas using the &lt;a href=&quot;getimagedata&quot;&gt;&lt;code&gt;getImageData()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9572d8c2c3e4a6abd4735ff5f3e63e42b5c14f09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Chrome, visit chrome://inspect/#service-workers and click on the &quot;inspect&quot; link below the registered service worker to view logging statements for the various actions the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js&quot;&gt;service-worker.js&lt;/a&gt; script is performing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d7488cffd1f392ab851dad89bc083de517d8f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the &lt;code&gt;&lt;a href=&quot;http://www.w3.org/1999/xhtml&quot;&gt;http://www.w3.org/1999/xhtml&lt;/a&gt;&lt;/code&gt; namespace in both HTML and XML trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1546735137da36e16b7cdd8957ce6e43119d22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the &lt;code&gt;&lt;a href=&quot;https://www.w3.org/1999/xhtml/&quot;&gt;http://www.w3.org/1999/xhtml/&lt;/a&gt;&lt;/code&gt; namespace in both HTML and XML trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f218fa021074da9398b3324d82cbc262b4b4a03f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Firefox 3.5 and earlier, the property upper-cases the local name for HTML elements (but not XHTML elements). In later versions, this does not happen, so the property is in lower case for both HTML and XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6922c14db1bac0e5c3bbfad7dc3f860f12468f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Firefox, warnings have a small exclamation point icon next to them in the Web Console log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a330166accbb0158c290ea1ba4b4f37bc8b175" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Gecko 1.9.2 and earlier, the property returns the upper-cased version of the local name for HTML attributes in HTML DOMs (as opposed to XHTML attributes in XML DOMs). In later versions, in compliance with HTML5, the property returns in the case of the internal DOM storage, which is lower case for both HTML attributes in HTML DOMs and XHTML attributes in XML DOMs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47f3e89a6e9e5f8b352221cdf01c930f728a4b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Gecko 1.9.2 and earlier, the property returns the upper-cased version of the local name for HTML elements in HTML DOMs (as opposed to XHTML elements in XML DOMs). In later versions, in compliance with HTML5, the property returns in the case of the internal DOM storage, which is lower case for both HTML elements in HTML DOMs and XHTML elements in XML DOMs. The &lt;a href=&quot;../element/tagname&quot;&gt;&lt;code&gt;tagName&lt;/code&gt;&lt;/a&gt; property continues to return in the upper case for HTML elements in HTML DOMs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b46617124d2c4cb66ae2be1569b48a4c5d48a2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Gecko 1.9.2 and earlier, the property returns the upper-cased version of the local name for HTML elements in HTML DOMs (as opposed to XHTML elements in XML DOMs). In later versions, in compliance with HTML5, the property returns in the case of the internal DOM storage, which is lower case for both HTML elements in HTML DOMs and XHTML elements in XML DOMs. The &lt;a href=&quot;tagname&quot;&gt;&lt;code&gt;tagName&lt;/code&gt;&lt;/a&gt; property continues to return in the upper case for HTML elements in HTML DOMs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a20e2de23ae72c950809f544746aed8d33df09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) through Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the passed object is serialized using JSON. Starting in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), the object is serialized using &lt;a href=&quot;https://developer.mozilla.org/en/DOM/The_structured_clone_algorithm&quot;&gt;the structured clone algorithm&lt;/a&gt;. This allows a wider variety of objects to be safely passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40d5bb4f2191c5bbd09b8fb32ec535ee42889fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Gecko, this method didn't support any parameters prior to Gecko 8.0 (Firefox 8.0 / Thunderbird 8.0 / SeaMonkey 2.5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa336b0b09077db00851506f7118ca7640f328f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In SVG 1.1 this method returned an &lt;a href=&quot;svgpoint&quot;&gt;&lt;code&gt;SVGPoint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bf7aebaa7477263277ddb6051760eb919f8ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In SVG 2 the &lt;code&gt;getPathSegAtLength()&lt;/code&gt; and &lt;code&gt;createSVGPathSeg*&lt;/code&gt; methods were removed and the &lt;code&gt;pathLength&lt;/code&gt; property and the &lt;code&gt;getTotalLength()&lt;/code&gt; and &lt;code&gt;getPointAtLength()&lt;/code&gt; methods were moved to &lt;a href=&quot;svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed97ec7f770d668b1c14e35da27ad9138622ace4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In SVG 2 this method was moved to the &lt;a href=&quot;../svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt; interface, from which the &lt;a href=&quot;../svgpathelement&quot;&gt;&lt;code&gt;SVGPathElement&lt;/code&gt;&lt;/a&gt; inherits it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4f4f0275950d91e99c3c09d3be95b7153bdfe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In SVG 2 this method was moved to the &lt;a href=&quot;svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt; interface, from which this interface inherits it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd25accd72da8a461caf2fbe6ae2a5ebbc41226" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In SVG 2 this property was moved to the &lt;a href=&quot;svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt; interface, from which this interface inherits it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a428de2127018ddff4e739c50a5cf2b792bf7202" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In WebGL, unlike in other GL APIs, extensions are only available if explicitly requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9850c7fc103bb499f47946b53569b309cc95d94d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In a real-world scenario in which the two peers aren't running in the same context, the process is a bit more involved; each side provides, one at a time, a suggested way to connect (for example, UDP, UDP with a relay, TCP, etc.) by calling &lt;a href=&quot;../rtcpeerconnection/addicecandidate&quot;&gt;&lt;code&gt;RTCPeerConnection.addIceCandidate()&lt;/code&gt;&lt;/a&gt;, and they go back and forth until agreement is reached. But here, we just accept the first offer on each side, since there's no actual networking involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019a3e4e8fa6aaf46ad40aeababe2019bb604901" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In older versions of the specification, an empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt;, was used instead of &lt;code&gt;unknown&lt;/code&gt; to indicate a completion without a known result state. See the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debc372889e6244ab1f9a8928c53d388541f5e27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In reality, at this time browser requirements for access to the clipboard vary significantly. Please see the section &lt;a href=&quot;#Clipboard_availability&quot;&gt;Clipboard availability&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511a95ae5521897c64ca083fc5b27c10e8d5013c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In reality, despite the fact that the specification says this can't be done, some browsers, including Firefox, support multiple active payment requests at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cf26e2864c5590b3dbdece02f54006552d0c7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In technical terms, a BUNDLE lets all media flow between two peers flow across a single &lt;strong&gt;5-tuple&lt;/strong&gt;; that is, from the same IP and port on one peer to the same IP and port on the other peer, using the same transport protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0140f4b780910476bdf2b7adce10b00bb8300789" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the DOM4 specification (as implemented in Gecko 13.0 (Firefox 13 / Thunderbird 13 / SeaMonkey 2.10)), &lt;code&gt;deep&lt;/code&gt; is an optional argument. If omitted, the method acts as if the value of &lt;code&gt;deep&lt;/code&gt; was &lt;code&gt;true&lt;/code&gt;, defaulting to using deep cloning as the default behavior. To create a shallow clone, &lt;code&gt;deep&lt;/code&gt; must be set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ed3f333fa9da1d68df586c84eb7ae6c33cc3cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the DOM4 specification, &lt;var&gt;deep&lt;/var&gt; was an optional argument with a default value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af4b3d3dcf9bd0c1222f26c19eeb73dc6772431" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the real world, you should usually instead call &lt;a href=&quot;document/importnode&quot;&gt;&lt;code&gt;importNode()&lt;/code&gt;&lt;/a&gt; method to import the new node into the DOM, then call one of the following methods to add the node to the DOM tree:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ec6bf59adaae4cc9d638b3326ff85f27891672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Individual &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;s containing slices of the recorded media will not necessarily be individually playable. The media needs to be reassembled before playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cb7da11b74e65a00942088bfaddf07e9b6931a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Internet Explorer supports passing string URLs as a parameter to &lt;code&gt;go()&lt;/code&gt;; this is non-standard and not supported by Gecko.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c071ed4a78eb95d20e920feb44915980bf68b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It may be helpful to keep in mind that you receive the &lt;code&gt;track&lt;/code&gt; event when a new inbound track has been added to your connection, and you call &lt;a href=&quot;rtcpeerconnection/addtrack&quot;&gt;&lt;code&gt;addTrack()&lt;/code&gt;&lt;/a&gt; to add a track to the far end of the connection, thereby triggering a &lt;code&gt;track&lt;/code&gt; event on the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fef2c54a50fc8f3f4a3e11d2f34129f328a140" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to keep in mind that the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; event is &lt;strong&gt;not&lt;/strong&gt; sent when ICE candidates arrive from the other end of the call. Instead, they're sent by your own end of the call so that you can take on the job of transmitting the data over whatever channel you choose. This can be confusing when you're new to WebRTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7338eff4e084a213b4f5cb94432ebf4f2bfb9354" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to note that if you're using this to log the timing for network traffic, the timer will report the total time for the transaction, while the time listed in the network panel is just the amount of time required for the header. If you have response body logging enabled, the time listed for the response header and body combined should match what you see in the console output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7519121690b23a9ca3a7688dbef2c357d8e06f89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to note that in many cases, both pointer and mouse events get sent (in order to let non-pointer-specific code still interact with the user). If you use pointer events, you should call &lt;a href=&quot;event/preventdefault&quot;&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/a&gt; to keep the mouse event from being sent as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa809e9f0273784d05bbdb23067a216aa96b9df8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to note that the loading of textures follows &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;cross-domain rules&lt;/a&gt;; that is, you can only load textures from sites for which your content has CORS approval. See Cross-domain textures below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9dcbd3e965a580eb405a6d5038af705b8c79b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's possible for one of the configurations in the selected candidate pair to remain unchanged when a new pairing is chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ec408aace9b092edb56a2520f5687630836918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's possible for the returned promise to &lt;em&gt;neither&lt;/em&gt; resolve nor reject, as the user is not required to make a choice at all and may simply ignore the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b62a4869e004dd84404795f03dd30d78bb9801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's possible to build this polyfill putting two types of data as argument for &lt;code&gt;send()&lt;/code&gt;: an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;ui8Data.buffer&lt;/code&gt; &amp;ndash; the commented code) or an &lt;a href=&quot;../arraybufferview&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;ui8Data&lt;/code&gt;, which is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;typed array of 8-bit unsigned integers&lt;/a&gt; &amp;ndash; uncommented code). However, on Google Chrome, when you try to send an &lt;code&gt;ArrayBuffer&lt;/code&gt;, the following warning message will appear: &lt;code&gt;ArrayBuffer is deprecated in XMLHttpRequest.send(). Use ArrayBufferView instead.&lt;/code&gt; Another possible approach to send binary data is the &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;&lt;code&gt;StringView&lt;/code&gt;&lt;/a&gt;Non native typed arrays superclass in conjunction with the &lt;a href=&quot;#send()&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8854e57766f3681dcfc2d41e148a0e2e04ea278b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's possible to set several locks at the same time. So, if the lock is set for only one orientation, the screen orientation will never change until the screen orientation is unlocked. Otherwise, the screen orientation will change from an orientation to another as long as the orientations are amongst the orientations the device has been locked to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef66f259259a6641ec1ce281b0a38c9ed506750" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Keep in mind that this is part of the signaling process, the transport layer for which is an implementation detail that's entirely up to you. In this case, a &lt;a href=&quot;../websockets_api&quot;&gt;WebSocket&lt;/a&gt; connection is used to send a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt; message with a &lt;code&gt;type&lt;/code&gt; field with the value &quot;video-offer&quot; to the other peer. The contents of the object being passed to the &lt;code&gt;sendToServer()&lt;/code&gt; function, along with everything else in the promise fulfillment handler, depend entirely on your design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30971ed12734ff1b691a1fac8507e93bca63198" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Like with the &lt;code&gt;drawImage()&lt;/code&gt; method, you must make sure the image you use is loaded before calling this method or the pattern may be drawn incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79204ff0038a6ab51dbf603e8a7d61239322f471" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Manually firing an event does &lt;em&gt;not&lt;/em&gt; generate the default action associated with that event. For example, manually firing a key event does not cause that letter to appear in a focused text input. In the case of UI events, this is important for security reasons, as it prevents scripts from simulating user actions that interact with the browser itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453de2dc95233cd31f5099ea9a91679f5a662e2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Many of the properties' values are hardware-dependent; for example, if the device doesn't have a way to detect the amount of pressure placed on the surface, the &lt;code&gt;force&lt;/code&gt; value will always be 0. This may also be the case for &lt;code&gt;radiusX&lt;/code&gt; and &lt;code&gt;radiusY&lt;/code&gt;; if the hardware reports only a single point, these values will be 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eceb4e2212d4c72c08a555eefb2d406324a5884" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Messages sent to service worker contexts (e.g. as the event object of onmessage) are represented by &lt;a href=&quot;../messageevent&quot;&gt;&lt;code&gt;MessageEvent&lt;/code&gt;&lt;/a&gt; objects in modern browsers, for consistency with other web messaging features. (They used to be represented by &lt;a href=&quot;../serviceworkermessageevent&quot;&gt;&lt;code&gt;ServiceWorkerMessageEvent&lt;/code&gt;&lt;/a&gt; objects, which have now been deprecated.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59b8415273cd266138333817a87361b0d68a488" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Navigating to another page, changing tabs, or switching to another application using any application switcher (or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b8ccbdf18038f10de38df5005a923cd346660f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not all browsers support prerendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482740462cc5a94164ebad1bdc17b9e94f72e12c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not all browsers support the &lt;code&gt;unloaded&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c67569d194123bc34fd22ba4b36ac22e5cec10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Obviously, it would be more efficient to update the list by adding and removing individual users instead of rebuilding the whole list every time it changes, but this is good enough for the purposes of this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f786f4805794f2d0d57aedefcd93b33a860368" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Obviously, the API requires the device to have a proximity sensor, which are mostly available only on mobile devices. Devices without such a sensor may support those events but will never fire them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729b954956caaea894269747a143b7052b3e0f56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Older browsers may not return a value from &lt;code&gt;play()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e25c5f46a57b08bd2e8b96ddd44614d032ecc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On Firefox 24 and older versions, &lt;code&gt;&quot;geolocation&quot; in navigator&lt;/code&gt; always returned &lt;code&gt;true&lt;/code&gt; even if the API was disabled. This has been fixed with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/25/Site_Compatibility&quot;&gt;Firefox 25&lt;/a&gt; to comply with the spec. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=884921&quot;&gt;bug 884921&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fd4e33ce05d2c36c240426bb35aabde8d1ab66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On Macintosh keyboards, this is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19d49722267a20c92de95196b89ce6d3fb47c8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On Macintosh keyboards, this is the command key (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2744e253739a24730957adcd9a14b28ffabe45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On an &lt;a href=&quot;rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt;, the format-specific parameters come from the SDP sent by the remote peer, while for &lt;a href=&quot;rtcrtpsender&quot;&gt;&lt;code&gt;RTCRtpSender&lt;/code&gt;&lt;/a&gt;, they're provided by the local description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0d24cc7038f1d7d5f65cdce62a05d04ed2f5ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Once again, this process is not a real-world implementation; in normal usage, there's two chunks of code running on two machines, interacting and negotiating the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4480881e3496f9b37035a62ed4ebab872ce0fc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of the &lt;code&gt;candidate&lt;/code&gt; string is performed using the &lt;a href=&quot;https://w3c.github.io/webrtc-pc/#candidate-attribute-grammar&quot;&gt;candidate-attribute grammar&lt;/a&gt; from the WebRTC Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab134bf479cfd5b93cd95cd0c77e39e73ddee7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Previously &lt;code&gt;canPlayType('video/webm')&lt;/code&gt; returned &lt;code&gt;'probably'&lt;/code&gt;. Starting with Gecko 28 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 / Firefox OS 1.3), it returns &lt;code&gt;'maybe'&lt;/code&gt;. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=884275&quot;&gt;bug 884275&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00dbd91a4f101e2ec55c5dc4fdc30544a1d2e145" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Prior to Gecko 1.9.2, the input element only supported a single file being selected at a time, meaning that the FileList would contain only one file. Starting with Gecko 1.9.2, if the input element's multiple attribute is true, the FileList may contain multiple files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5db7ef4414d9d9adebed0020859255448732aa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Prior to Gecko 12.0 (Firefox 12.0 / Thunderbird 12.0 / SeaMonkey 2.9), this method accepted an optional fourth parameter (&lt;code&gt;entityReferenceExpansion&lt;/code&gt;) that is not part of the DOM4 specification, and has therefore been removed. This parameter indicated whether or not the children of entity reference nodes were visible to the iterator. Since such nodes were never created in browsers, this paramater had no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1186c751cd0efa954cbdb30ac4c0280c28af91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Prior to Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1), the &lt;code&gt;pseudoElt&lt;/code&gt; parameter was required. No other major browser required this parameter be specified if null. Gecko has been changed to match the behavior of other browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a109af5f8885ee4762577f9a2d3b7dcbd10232e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Prior to Gecko 6.0, paths with quotes were treated as if the quotes were part of the string, instead of as if they were delimiters surrounding the actual path string. This has been fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a58b10c06fe2a3d7e9246419ed3aaa76598d26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Prior to version 11, Firefox only supported sending data as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025fd31ceb3bc6b32f2aea4caa3b928f0688e128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Progress events are not available for the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4d6d19bb0e9f6ec97d3b5155246a3404c0aa79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Properties for which values were not specified contain empty strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecb3981939bfee21222fe2e0deac5a8e37c0c3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Removing a class that does not exist does NOT throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93a141a98e25921e9b16fa240662ef235198218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the compatibility table below if you need to know which browsers (and/or which versions of those browsers) implement this altered behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757f039c7c2093eee939e57ef7ac51ddf090174" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Shadows are only drawn for &lt;code&gt;source-over&lt;/code&gt;&lt;a href=&quot;compositing&quot;&gt;compositing operations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72ee0be7819d526abbe1ea9f14872ac60fd51aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Similarly, you can access a list of a form's component user input elements using the &lt;a href=&quot;../htmlformelement/elements&quot;&gt;&lt;code&gt;HTMLFormElement.elements&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73622619df6835a26be782cc21a70dddc9541474" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Similarly, you can get a list of all of the forms contained within a given document using the document's &lt;a href=&quot;../document/forms&quot;&gt;&lt;code&gt;forms&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa084ccb4e5ccb182a4372e8c37654fcb6a075" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Since &lt;code&gt;removeAttribute()&lt;/code&gt; doesn't return a value, you can't chain multiple calls together to remove multiple attributes at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffefe2948e9ce490c1a491b08e32b99edafc91e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Since there is ongoing fluidity in functionality and naming of API terms in WebRTC and supporting browsers, use of this adapter is generally recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97acc5502238d6ac99649ce509c33fd83bc1bc9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Since this property is deprecated, you can determine if full-screen mode is active on the document by checking to see if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement&quot;&gt;&lt;code&gt;Document.fullscreenElement&lt;/code&gt;&lt;/a&gt; is not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0095f9c8a3542d74219fad0527031c212f2de480" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be972541fb57e6eb0d7b5d3948eb846ffbbec8e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some browsers offer users the ability to override &lt;code&gt;autoplay&lt;/code&gt; in order to prevent disruptive audio or video from playing without permission or in the background. Do not rely on &lt;code&gt;autoplay&lt;/code&gt; actually starting playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd297acaf73ec22bf40b04f6ebaf275580c6db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some early implementations of the Web Audio API did not ensure this to be the case, causing unexpected results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce01e16f7f39d815edc5ec7a89109984a4e48d8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 1.9.1, users can let websites change the status text by enabling the &quot;Change status bar&quot; preference in the Advanced options panel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e0af9d3215971741000f2a8a055db3c910f3c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 5.0,the &lt;code&gt;SVGLengthList&lt;/code&gt; DOM interface is now indexable and can be accessed like arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e378da00d67cf520be188f39d9e5a6169c3d9ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 5.0,the &lt;code&gt;SVGNumberList&lt;/code&gt; DOM interface is now indexable and can be accessed like arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf39a459f2da71d00c161b06db8ab9cf345cee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 6.0,&lt;code&gt; document.height &lt;/code&gt;is no longer supported. Instead use &lt;code&gt;document.body.clientHeight&lt;/code&gt;. See &lt;a href=&quot;../element/clientheight&quot;&gt;&lt;code&gt;element.clientHeight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4042ef14edb6edc46fdc2f711646e7658a10f3b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 6.0,&lt;code&gt; document.width &lt;/code&gt;is no longer supported. Instead, use &lt;code&gt;document.body.clientWidth&lt;/code&gt;. See &lt;a href=&quot;../element/clientwidth&quot;&gt;&lt;code&gt;element.clientWidth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212c366782687d53c7252237039c1e76de86498f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 9.0, progress events can now be relied upon to come in for every chunk of data received, including the last chunk in cases in which the last packet is received and the connection closed before the progress event is fired. In this case, the progress event is automatically fired when the load event occurs for that packet. This lets you now reliably monitor progress by only watching the &quot;progress&quot; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f017342d521283f715dee306fbd508357b3990" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 9.0, you can now use the syntax &lt;code&gt;if (&quot;onabort&quot; in window)&lt;/code&gt; to determine whether or not a given event handler property exists. This is because event handler interfaces have been updated to be proper web IDL interfaces. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/DOM_event_handlers&quot;&gt;DOM event handlers&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba7401407565eea208d98ddfdaaa36e031dcbc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in Gecko 9.0,the &lt;code&gt;SVGTransformList&lt;/code&gt; DOM interface is now indexable and can be accessed like Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff1ebc98f42c91374f80dc51c43642e7db84683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting with Gecko 30.0 (Firefox 30.0 / Thunderbird 30.0 / SeaMonkey 2.27), Blink 39.0, and Edge 13, synchronous requests on the main thread have been deprecated due to the negative effects to the user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da580daab5580c9e5c490a5a03dd4a0e25e63d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting with Gecko 30.0 (Firefox 30.0 / Thunderbird 30.0 / SeaMonkey 2.27), synchronous requests on the main thread have been deprecated due to the negative effects to the user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d0d9acc805fda333c63bf1bb8352a9996bd648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Stopping the transceiver causes a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event to be sent to the transceiver's &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, so the connection can adapt to the change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8fc38eeaabf9ecab249cd5b4dbffccbd926d32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for &lt;code&gt;timeout&lt;/code&gt; was added in Gecko 12.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459b2bfe583679e8e3f9cdb8eba137510feef205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for this API varies somewhat across browsers, with many requiring vendor prefixes and/or not implementing the latest specification. See the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section below for details on support for this API. You may wish to consider using a library such as &lt;a href=&quot;https://github.com/rafrex/fscreen&quot;&gt;Fscreen&lt;/a&gt; for vendor agnostic access to the Fullscreen API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b6f0dde2c2f63789cc8f5dea8b2b817d89a08f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Synchronous requests on the main thread can be easily disruptive to the user experience and should be avoided; in fact, many browsers have deprecated synchronous XHR support on the main thread entirely. Synchronous requests are permitted in &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84aab91771586d4139b70e927236464a949337c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, the string returned by &lt;code&gt;createOffer()&lt;/code&gt; is an &lt;a href=&quot;https://tools.ietf.org/html/rfc3264&quot;&gt;RFC 3264&lt;/a&gt; offer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84ea3aa7cfffbb0f9fa9d2047e654ae7d0b829d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../filereader&quot;&gt;&lt;code&gt;FileReader()&lt;/code&gt;&lt;/a&gt; constructor was not supported by Internet Explorer for versions before 10. For a full compatibility code you can see our &lt;a href=&quot;https://mdn.mozillademos.org/files/3699/crossbrowser_image_preview.html&quot;&gt;crossbrowser possible solution for image preview&lt;/a&gt;. See also &lt;a href=&quot;https://mdn.mozillademos.org/files/3698/image_upload_preview.html&quot;&gt;this more powerful example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3ab55b7f7fac76a2005af39c0c9bb2d285afda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../nodelist&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt; returned by &lt;a href=&quot;../element/queryselectorall&quot;&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/a&gt; is not live, which means that changes in the DOM are not reflected in the collection. This is different from other DOM querying methods that return live node lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8709629945fedfdc0f3180d6a5f9d09d518fd1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt; referred to by this &lt;code&gt;RTCRtpReceiver&lt;/code&gt;'s &lt;a href=&quot;../rtcrtptransceiver/receiver&quot;&gt;&lt;code&gt;receiver&lt;/code&gt;&lt;/a&gt; property will always be the same as the &lt;a href=&quot;../rtctrackevent&quot;&gt;&lt;code&gt;RTCTrackEvent&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;receiver&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f54e42d84084e34f4e2b13d6c5478ec5fd7847" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../rtctrackevent/transceiver&quot;&gt;&lt;code&gt;transceiver&lt;/code&gt;&lt;/a&gt; includes its own &lt;a href=&quot;../rtcrtptransceiver/receiver&quot;&gt;&lt;code&gt;receiver&lt;/code&gt;&lt;/a&gt; property, which will always be the same &lt;a href=&quot;../rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt; as this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84146b0446e6445c8280c589467a091b0977fc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection-binarytype&quot;&gt;&lt;code&gt;binaryType&lt;/code&gt;&lt;/a&gt; attribute allows authors to control how binary data is exposed to scripts. By setting the attribute to &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15205fc8005dc78159edf73459c772b7c1acbd92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;transceiver&quot;&gt;&lt;code&gt;transceiver&lt;/code&gt;&lt;/a&gt; includes its own &lt;a href=&quot;../rtcrtptransceiver/receiver&quot;&gt;&lt;code&gt;receiver&lt;/code&gt;&lt;/a&gt; property, which will always be the same &lt;a href=&quot;../rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt; as this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742b45f550f727f55d8c11cec8feac92aa110200" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&quot;Accel&quot;&lt;/code&gt; virtual modifier has been effectively &lt;strong&gt;deprecated&lt;/strong&gt; in current drafts of the DOM3 Events specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e605e3354f6197a79522932b3a5885ed0a6635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;BlobBuilder&lt;/code&gt; interface has been deprecated in favor of the newly introduced &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e131ffd2524466ff38f8d26af53aac593175f16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;beforebegin&lt;/code&gt; and &lt;code&gt;afterend&lt;/code&gt; positions work only if the node is in a tree and has an element parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd6241724b7e51b23d2f36e0561dc34ba4dd6fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;name&lt;/code&gt; property doesn't exist for other elements; unlike &lt;a href=&quot;tagname&quot;&gt;&lt;code&gt;tagName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../node/nodename&quot;&gt;&lt;code&gt;nodeName&lt;/code&gt;&lt;/a&gt;, it is not a property of the &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add5c1db882eb89ec7572490b82e0fa0dccf734c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;pathLength&lt;/code&gt; property and the &lt;code&gt;getTotalLength()&lt;/code&gt; and &lt;code&gt;getPointAtLength()&lt;/code&gt; methods were originally part of the &lt;a href=&quot;svgpathelement&quot;&gt;&lt;code&gt;SVGPathElement&lt;/code&gt;&lt;/a&gt; interface. In SVG 2 they were moved to this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e4a1dc1eac423426ed196e8cd7d5805f3dee61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;play()&lt;/code&gt; method may cause the user to be asked to grant permission to play the media, resulting in a possible delay before the returned promise is resolved. Be sure your code doesn't expect an immediate response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e8c022956fbbfb30768ce7d9f603eda6dc3081" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;slice()&lt;/code&gt; method had initially taken &lt;code&gt;length&lt;/code&gt; as the second argument to indicate the number of bytes to copy into the new &lt;code&gt;Blob&lt;/code&gt;. If you specified values such that &lt;code&gt;start + length&lt;/code&gt; exceeded the size of the source &lt;code&gt;Blob&lt;/code&gt;, the returned &lt;code&gt;Blob&lt;/code&gt; contained data from the start index to the end of the source &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda7772783b8f9172984c10ff2d5316a534e71bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The WHATWG and W3C versions of the specification differ (as of August, 2018) as to whether this method returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; or nothing at all, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72be60ee23a956f0e38ffb6528a776c348b45a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The asynchronous Clipboard and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API&quot;&gt;Permissions APIs&lt;/a&gt; are still in the process of being integrated into most browsers, so they often deviate from the official rules for permissions and the like. Be sure to review the &lt;a href=&quot;#Browser_compatibility&quot;&gt;compatibility table&lt;/a&gt; before using these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940bc0ce83621ed4384b92d79b7f55156e146be3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The best way to know the URL of the media resource currently in active use in this element is to look at the value of the &lt;a href=&quot;currentsrc&quot;&gt;&lt;code&gt;currentSrc&lt;/code&gt;&lt;/a&gt; attribute, which also takes into account selection of a best or preferred media resource from a list provided in an &lt;a href=&quot;../htmlsourceelement&quot;&gt;&lt;code&gt;HTMLSourceElement&lt;/code&gt;&lt;/a&gt; (which represents a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/a&gt; element).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e634ce52f870c291049c1f63fce92b3b0718d26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The best way to send binary content is via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffers&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blobs&lt;/code&gt;&lt;/a&gt; in conjuncton with the &lt;a href=&quot;send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method and possibly the &lt;a href=&quot;../filereader/readasarraybuffer&quot;&gt;&lt;code&gt;readAsArrayBuffer()&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;FileReader&lt;/code&gt; API. But, since the aim of this script is to work with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;stringifiable&lt;/a&gt; raw data, we used the &lt;a href=&quot;sendasbinary&quot;&gt;&lt;code&gt;sendAsBinary()&lt;/code&gt;&lt;/a&gt; method in conjunction with the &lt;a href=&quot;../filereader/readasbinarystring&quot;&gt;&lt;code&gt;readAsBinaryString()&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;FileReader&lt;/code&gt; API. As such, the above script makes sense only when you are dealing with small files. If you do not intend to upload binary content, consider instead using the &lt;code&gt;FormData&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3bb927f0b8f78804416e900660d7e12ddff9a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The body type can only be a &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;buffersource&quot;&gt;&lt;code&gt;BufferSource&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;formdata&quot;&gt;&lt;code&gt;FormData&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt; type, so for adding a JSON object to the payload you need to stringify that object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db930ede679575b2938803139b8eab4fb0ed7d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The caching API doesn't honor HTTP caching headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d0aea520e3e4f7c3ac02007c33b7965ee048ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The comment line can be used to prevent connections from timing out; a server can send a comment periodically to keep the connection alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b5c6b29935111c97ac1d5daf010672fc5c1a17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The constructor function &lt;code&gt;XMLHttpRequest&lt;/code&gt; isn't limited to only XML documents. It starts with &lt;strong&gt;&quot;XML&quot;&lt;/strong&gt; because when it was created the main format that was originally used for Asynchronous Data Exchange were XML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a46b9c754cfa0f11fa3da501d7a5d7cfa139bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The default &lt;code&gt;this&lt;/code&gt; value of a &lt;code&gt;setTimeout&lt;/code&gt; callback will still be the &lt;code&gt;window&lt;/code&gt; object, and not &lt;code&gt;undefined&lt;/code&gt;, even in strict mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dd157a39b89b0fc4a8b75fe02dc3a0b6d54e8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The definition of this API was moved to the &lt;a href=&quot;../parentnode&quot;&gt;&lt;code&gt;ParentNode&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb722593b26bb7c806c5660425e5052f87f8fc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The effect, because of the use of the &lt;code&gt;Worker&lt;/code&gt;, is however asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec99421f4a034cef7aaaa9a26fc0ea98e7236cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/scripting-1.html#prepare-a-script&quot;&gt;These algorithms&lt;/a&gt; describe the core ideas, but they rely on the parsing rules for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/syntax.html#scriptTag&quot;&gt;start&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/syntax.html#scriptEndTag&quot;&gt;end&lt;/a&gt; tags in HTML, &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/syntax.html#scriptForeignEndTag&quot;&gt;in foreign content&lt;/a&gt;, and &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/the-xhtml-syntax.html#scriptTagXML&quot;&gt;in XML&lt;/a&gt;; the rules for the &lt;a href=&quot;document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; method; the handling of &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/webappapis.html#scripting&quot;&gt;scripting&lt;/a&gt;; and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92008836a326fc7855361d41935f5a5257cfb967" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The fields &quot;userfile&quot; and &quot;webmasterfile&quot; both contain a file. The number assigned to the field &quot;accountnum&quot; is immediately converted into a string by the &lt;a href=&quot;../formdata#append()&quot;&gt;&lt;code&gt;FormData.append()&lt;/code&gt;&lt;/a&gt; method (the field's value can be a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, or a string: &lt;strong&gt;if the value is neither a Blob nor a File, the value is converted to a string&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71677986723a8ac5fc99449211d1e0f1fe653673" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The file's &lt;a href=&quot;result&quot;&gt;&lt;code&gt;result&lt;/code&gt;&lt;/a&gt; results in a string that cannot be directly decoded as Base64. To retrieve only the Base64 encoded string, you must remove &lt;code&gt;data:*/*;base64,&lt;/code&gt; from the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662e4e1683f94969fad2fa6ce56f505912f4c64f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The handler's URL must use one of &quot;http&quot; or &quot;https&quot; as its scheme. This &lt;em&gt;should&lt;/em&gt; be an HTTPS URL, as some browsers may require this for security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110b8b31fe5ffa75300934fa0829bd4260b8b56f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The important thing to note is this: the only thing your code is responsible for during ICE negotiation is accepting outgoing candidates from the ICE layer and sending them across the signaling connection to the other peer when your &lt;a href=&quot;../rtcpeerconnection/onicecandidate&quot;&gt;&lt;code&gt;onicecandidate&lt;/code&gt;&lt;/a&gt; handler is executed, and receiving ICE candidate messages from the signaling server (when the &lt;code&gt;&quot;new-ice-candidate&quot;&lt;/code&gt; message is received) and delivering them to your ICE layer by calling &lt;a href=&quot;../rtcpeerconnection/addicecandidate&quot;&gt;&lt;code&gt;RTCPeerConnection.addIceCandidate()&lt;/code&gt;&lt;/a&gt;. That's it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78aae218a16c338e421b6afce667dc132df89a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The name &lt;code&gt;responseXML&lt;/code&gt; is an artifact of this property's history; it actually works for both HTML and XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012c583d867367167999a83327d5f64a361874dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The non-standard &lt;code&gt;sendAsBinary&lt;/code&gt; method is considered deprecated as of Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28) and will be removed soon. The standard &lt;code&gt;send(Blob data)&lt;/code&gt; method can be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d326174d43fb00f9435b90365f1b638ce8351c55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The non-standard &lt;code&gt;sendAsBinary&lt;/code&gt; method which was previously used in the example above is considered deprecated as of Gecko 31 (Firefox 31 / Thunderbird 31 / SeaMonkey 2.28); use the standard &lt;code&gt;send(Blob data)&lt;/code&gt; method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290688802bb4edd500fefb12ffc4a0a6d75405c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The order of the returned tracks is not defined by the specification and may, in fact, change from one call to &lt;code&gt;getAudioTracks()&lt;/code&gt; to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a26b50257f81121dbb5b2c949264b1ce44715d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The order of the tracks is not defined by the specification, and may not be the same from one call to &lt;code&gt;getVideoTracks()&lt;/code&gt; to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6c9163f4f02daa6cd12e9d2a7e8e2dabcefa86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The orientation media query actually applies based on the orientation of the browser window (or iframe) not the orientation of the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78eef5592f0e69502d2c9465450ff81fcfc9168d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The process of changing descriptions actually involves intermediary steps handled by the WebRTC layer to ensure that an active connection can be changed without losing the connection if the change does not succeed. See &lt;a href=&quot;../webrtc_api/connectivity#Pending_and_current_descriptions&quot;&gt;Pending and current descriptions&lt;/a&gt; in &lt;a href=&quot;../webrtc_api/connectivity&quot;&gt;WebRTC connectivity&lt;/a&gt; for more details on this process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27de27f33c27628adf4c9ad788373d12edc8c65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The queue of mutations which have occurred but not been delivered to your callback is left empty after calling &lt;code&gt;takeRecords()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d658f796a250d2e1546a625a0f731e18a1cf472" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The rate at which &lt;code&gt;touchmove&lt;/code&gt; events is sent is browser-specific, and may also vary depending on the capability of the user's hardware. You must not rely on a specific granularity of these events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50e37c24c02b101b9a90e13ec0090f4579e757c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The reason for this flipping of the z axis is that the clip space coordinate system is a left-handed coordinate system (z-axis points into the screen), while the convention in mathematics, physics and 3D modeling, as well as for the view/eye coordinate system in OpenGL, is to use a right-handed coordinate system (z-axis points out of the screen towards the viewer) . More on that in the relevant Wikipedia articles: &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_coordinate_system#Orientation_and_handedness&quot;&gt;Cartesian coordinate system&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Right-hand_rule&quot;&gt;Right-hand rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f15a1392b630c77b5597ebe1a11bea7ed4782fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The returned HTML or XML fragment is generated based on the current contents of the element, so the markup and formatting of the returned fragment is likely not to match the original page markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c44babdc3301334352ccf732656ce8171f00279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The search for the header name is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e437d1a304c7834943df2cb86b610f4456651a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The specification includes an example that generates values for &lt;code&gt;ssrc&lt;/code&gt; using MD5. While not part of the standard, exactly, it is a good mechanism that may be used by some browsers. &lt;em&gt;Do not&lt;/em&gt; rely upon these values meaning anything other than &quot;these objects are associated with the same source.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1399067c5697fd420d91c15c45c6e1ff03579f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The specification requires the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API&quot;&gt;Permissions API&lt;/a&gt; be used to obtain the &lt;code&gt;&quot;clipboardWrite&quot;&lt;/code&gt; permission before writing to the clipboard. However, exact requirements vary from browser to browser, since this is a new API. Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;compatibility table&lt;/a&gt; and &lt;a href=&quot;../clipboard#Clipboard_availability&quot;&gt;Clipboard availability&lt;/a&gt; in &lt;a href=&quot;../clipboard&quot;&gt;Clipboard&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de374c0ac28fd84ba0856c76fba2527bf25065c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The text below uses the term &quot;finger&quot; when describing the contact with the surface, but it could, of course, also be a stylus or other contact method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c299f65d2a62b80b7311ea1cf62aa23adfb4c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There is no API to obtain the ICE password, for what should be fairly obvious security reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adb06443b88cfaa8097e026e7c3409122658eb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These APIs will only work in Microsoft applications, and are not on a standards track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a9f3745b81a43c0547a58ffffed25fb4c77d91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These event handler properties are &lt;em&gt;not&lt;/em&gt; available as HTML content attributes. In other words, you cannot specify event handlers for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/fullscreenchange&quot;&gt;fullscreenchange&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/fullscreenerror&quot;&gt;fullscreenerror&lt;/a&gt;&lt;/code&gt; in the HTML content. They must be added by JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9378a0f0d74370c2504d18be672798d3fb7a2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This API is available only to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions&quot;&gt;WebExtensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab16330ef0133f1af737650f3e7f655bf698984f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This article will be added to over time. If you find a Fetch concept that you feel needs explaining better, let someone know on the &lt;a href=&quot;https://discourse.mozilla-community.org/c/mdn&quot;&gt;MDN discussion forum&lt;/a&gt;, or &lt;a href=&quot;https://wiki.mozilla.org/IRC&quot;&gt;Mozilla IRC&lt;/a&gt; (#mdn room.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16ca29d61aaa320106c5dd5a0f4d396127c4787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This attribute has &lt;em&gt;not&lt;/em&gt; been formally standardized. It is specified in the &lt;a href=&quot;https://w3c.github.io/touch-events/&quot;&gt;Touch Events &amp;ndash; Level 2&lt;/a&gt;Draft specification and not in &lt;a href=&quot;https://www.w3.org/TR/touch-events/&quot;&gt;Touch Events&lt;/a&gt;Recommendation. This attribute is not widely implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc2b8401c1c1c390d5fb62bd5e5e03cf11532f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This attribute's value is live; directly changing the &lt;code&gt;disabled&lt;/code&gt; attribute on style sheets will affect the value of this attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ddfadade5f1f9d7d62facb22012e64b1a96af3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This does not describe the locale of the data being entered. A user may be using one keyboard layout while typing text in a different language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bea7a64b713e6a9813db53d3c49fa4fd1995463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This example assumes that there is only one of each kind of track in the video, but this is not necessarily the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a702b61361cfebf1323840051ed50584ff7126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This example makes use of modern JavaScript features including &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async functions&lt;/a&gt; and the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&quot;&gt;await&lt;/a&gt;&lt;/code&gt; expression. This enormously simplifies and makes far more readable the code dealing with the promises returned by WebRTC methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9b1b9e0c4b334a49f6e4ff67016e77dacc4b27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This example requires a slightly larger canvas than the others on this page: 150 x 200 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7a8a0706c661e4e2a0185371b20c61df9b810d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature is &lt;em&gt;not&lt;/em&gt; available in &lt;a href=&quot;../service_worker_api&quot;&gt;Service Workers&lt;/a&gt; due to its potential to create memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e19e5a3da7bf192c134dbc049bef6883102e2a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature is &lt;strong&gt;not&lt;/strong&gt; available in &lt;a href=&quot;../sharedworker&quot;&gt;&lt;code&gt;SharedWorker&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1346038173631bde8926dd3648ae8c1757378b81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature is available in &lt;a href=&quot;../web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af81c01150bc2a2c2aeec239f97684667a75d34f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature is available in &lt;a href=&quot;web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f12fe9ebb6852614e0e87bee5646e7df8e6a504" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature is not available in &lt;a href=&quot;../web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2f4a0a3aa8ac33388a5e3e1b131c8f5e6aeae8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This framework uses the &lt;a href=&quot;../filereader&quot;&gt;&lt;code&gt;FileReader&lt;/code&gt;&lt;/a&gt; API to transmit file uploads. This is a recent API and is not implemented in IE9 or below. For this reason, the AJAX-only upload is considered &lt;strong&gt;an experimental technique&lt;/strong&gt;. If you do not need to upload binary files, this framework works fine in most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965823c019fa22dc4cced7ab0fbe9b7cac6fb56c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface has never been supported in Gecko, and has been removed from the DOM specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13e8b41e32e9613767ac8a9c20fe37f74a83d96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface is called &lt;code&gt;HTMLCollection&lt;/code&gt; for historical reasons (before the modern DOM, collections implementing this interface could only have HTML elements as their items).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9768eaccce5c03609ee387a17015f9ca47c095" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface is obsolete per the latest specification. Use the new DOM4 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMError&quot;&gt;&lt;code&gt;DOMError&lt;/code&gt;&lt;/a&gt; interface instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe09bd93f9869765640f3ebc4e269b5abc5208c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface was called &lt;code&gt;RTCRTPStreamStats&lt;/code&gt; until a specification update in the spring of 2017. Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; table to know if and when the name change was implemented in specific browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b375572f3cd345aae6829ad16092c77f9665cfbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface was introduced in SVG 2 and replaces the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGLocatable&quot;&gt;&lt;code&gt;SVGLocatable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;svgtransformable&quot;&gt;&lt;code&gt;SVGTransformable&lt;/code&gt;&lt;/a&gt; interfaces from SVG 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe195b8837535b07241b2ae1e2dd7892d09aa15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is currently only proposed, is not expected to become standard, and is only implemented by recent builds of Internet Explorer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcce1b411761156346ef4c14e8a55a336766c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is implemented as &lt;a href=&quot;../document/queryselector&quot;&gt;&lt;code&gt;Document.querySelector()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../documentfragment/queryselector&quot;&gt;&lt;code&gt;DocumentFragment.querySelector()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../element/queryselector&quot;&gt;&lt;code&gt;Element.querySelector()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e78b94ab53248685a89695b946b3bd46d53880" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is implemented as &lt;a href=&quot;../element/queryselectorall&quot;&gt;&lt;code&gt;Element.querySelectorAll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../document/queryselectorall&quot;&gt;&lt;code&gt;Document.querySelectorAll()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../documentfragment/queryselectorall&quot;&gt;&lt;code&gt;DocumentFragment.querySelectorAll()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9d9c98551717adf60d2c1cab8edbbfcd43ab5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is implemented based on the &lt;a href=&quot;../parentnode&quot;&gt;&lt;code&gt;ParentNode&lt;/code&gt;&lt;/a&gt; mixin's &lt;a href=&quot;../parentnode/queryselectorall&quot;&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a829195d7638f41b948f6ea505cb6884f359150" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is not available from service workers, due to issues with the &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; interface's life cycle and the potential for leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5fbd4f9ed1838b3997c503a156b95352b6f3bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method is obsolete. You should use the &lt;a href=&quot;../element/getboundingclientrect&quot;&gt;&lt;code&gt;element.getBoundingClientRect()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3248b99f38728507b6f2711e3f18db3c0b0700e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method must be called while responding to a user interaction or a device orientation change; otherwise it will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41f57261a0c4035f366fa46c54b1fcbee81b21e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method only works for installed Web apps or for Web pages in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Using_full_screen_mode&quot;&gt;full-screen mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c9edfb2a64c695678b811b25bfd570d3e83ab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method produces the same result for: a) a record that doesn't exist in the database and b) a record that has an undefined value. To tell these situations apart, call the &lt;code&gt;openCursor()&lt;/code&gt; method with the same key. That method provides a cursor if the record exists, and no cursor if it does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06be537e72b1a9175d3ff670317314d95566ea97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method was originally part of the &lt;a href=&quot;../svgpathelement&quot;&gt;&lt;code&gt;SVGPathElement&lt;/code&gt;&lt;/a&gt; interface. SVG 2 introduced the &lt;a href=&quot;../svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt; interface and moved the property to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e72405efd28b3f789051b865e846c4ddce6ab5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This never affects same-site requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dcb6b1b3ef6cb1a826a1ee93ce5e7c805bd4da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This page needs heavy rewriting for structural integrity and content completeness. Lots of info here is good but the organization is a mess since this is sort of a dumping ground right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a654bcb424d1bc37b442315bccd77842b86b42d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This property can be fragile, in that there may be situations in which the returned &lt;code&gt;Event&lt;/code&gt; is not the expected value. In addition, &lt;code&gt;Window.event&lt;/code&gt; is not accurate for events dispatched within &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/shadow_tree&quot;&gt;shadow trees&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c54fbc91009808b4d3520caef2abcef8d74bb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This property only works if the event system supports it for the particular event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6f71155a41f01c0fc527886d886a5da1a831c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This property was originally part of the &lt;a href=&quot;../svgpathelement&quot;&gt;&lt;code&gt;SVGPathElement&lt;/code&gt;&lt;/a&gt; interface. SVG 2 introduced the &lt;a href=&quot;../svggeometryelement&quot;&gt;&lt;code&gt;SVGGeometryElement&lt;/code&gt;&lt;/a&gt; interface and moved the property to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efca8547507e196a0ebf69f648a1cb9d7a78a6d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This property will round the value to an integer. If you need a fractional value, use &lt;a href=&quot;getboundingclientrect&quot;&gt;&lt;code&gt;element.getBoundingClientRect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf6d051c9af78ae2f6bb8d6de65e71d9ec261f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This property's value is determined once the local peer has called &lt;a href=&quot;setremotedescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setRemoteDescription()&lt;/code&gt;&lt;/a&gt;; the provided description is used by the ICE agent to determine whether or not the remote peer supports trickled ICE candidates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967ebd31400a75848093b8b18fac19ed6b6ff15e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This solution is very expensive for the interpreter. &lt;strong&gt;Use it only when it is really necessary&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7977f558d11c631d48fee802b19ca38d77ea42d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This takes advantage of the fact that the &lt;a href=&quot;../htmlvideoelement&quot;&gt;&lt;code&gt;HTMLVideoElement&lt;/code&gt;&lt;/a&gt; interface looks like an &lt;a href=&quot;../htmlimageelement&quot;&gt;&lt;code&gt;HTMLImageElement&lt;/code&gt;&lt;/a&gt; to any API that accepts an &lt;code&gt;HTMLImageElement&lt;/code&gt; as a parameter, with the video's current frame presented as the image's contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283a2f51c0cec81b1228fd4b16d2e31e7c4f1754" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value doesn't change when &lt;a href=&quot;enablestylesheetsforset&quot;&gt;&lt;code&gt;document.enableStyleSheetsForSet()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec59f4adc0a80fc42df3048d675478fa3c7031d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value is &lt;em&gt;not&lt;/em&gt; the same as the value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaStramTrack/id&quot;&gt;&lt;code&gt;MediaStramTrack.id&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f650335d1e984f6032d5b30344df683d7dc997d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value is only available for video media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d488583309fecebcda14f72c5ee3149241a276" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value is only available on the receiver, and only for video media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c35a4c4f5586058a4ffd3e932085c3014f6ea89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value is only available on the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dc7d5d8806ec35b6ca3c289883d46101d8dbdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value is sent by the sender to the receiver and is only present for video media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc8f744674db4abcb9bd204fc5d9c98f28b0ca8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value moved into the &lt;a href=&quot;#RTCPeerConnectionState_enum&quot;&gt;&lt;code&gt;RTCPeerConnectionState&lt;/code&gt; enum&lt;/a&gt; in the May 13, 2016 draft of the specification, as it reflects the state of the &lt;code&gt;RTCPeerConnection&lt;/code&gt;, not the signaling connection. You now detect a closed connection by checking for &lt;a href=&quot;connectionstate&quot;&gt;&lt;code&gt;connectionState&lt;/code&gt;&lt;/a&gt; to be &lt;code&gt;&quot;closed&quot;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f298cf013b1572cf6557d2030327d6efd0c7c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This value moved into the &lt;a href=&quot;#RTCPeerConnectionState_enum&quot;&gt;&lt;code&gt;RTCPeerConnectionState&lt;/code&gt; enum&lt;/a&gt; in the May 13, 2016 draft of the specification, as it reflects the state of the &lt;code&gt;RTCPeerConnection&lt;/code&gt;, not the signaling connection. You now detect a closed connection by checking for &lt;a href=&quot;rtcpeerconnection/connectionstate&quot;&gt;&lt;code&gt;connectionState&lt;/code&gt;&lt;/a&gt; to be &lt;code&gt;&quot;closed&quot;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005a36c9ab1ec1d2833bb547ec710b024c055da3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Though the &lt;code&gt;AudioParam&lt;/code&gt; returned is read-only, the value it represents is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f64df48ef75601c14414cc3fd72173ed64eb7c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To both create and render a rectangle in one step, use the &lt;a href=&quot;fillrect&quot;&gt;&lt;code&gt;fillRect()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;strokerect&quot;&gt;&lt;code&gt;strokeRect()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136bcc513903d3ee4586227cb103f013360238e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To combat unwanted pop-ups, some browsers don't display prompts created in &lt;code&gt;beforeunload&lt;/code&gt; event handlers unless the page has been interacted with; some don't display them at all. For a list of specific browsers, see the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0650d92d921fd471a505d5a51775b14ab1ba6c57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To create a new sub-path, i.e., one matching the current canvas state, you can use &lt;a href=&quot;moveto&quot;&gt;&lt;code&gt;CanvasRenderingContext2D.moveTo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c38c3ca66c4113e18673999fa6910a5c1c2dac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To learn more about the &lt;code&gt;arc()&lt;/code&gt; function, see the &lt;a href=&quot;#Arcs&quot;&gt;Arcs&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b79958f0d88abb6496408a52607b6070db8a2fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To return to using solid lines, set the line dash list to an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91ac55ec03dd5d507557e9ffbb8cb4de89d4791" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Until the Indexed Database API specification is finalized, this attribute should be accessed as &lt;code&gt;moz_indexedDBSync&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34159dc0157f682c141af01d71861444e823a7f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement&quot;&gt;&lt;code&gt;fullscreenElement&lt;/code&gt;&lt;/a&gt; property on the &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;shadowroot&quot;&gt;&lt;code&gt;ShadowRoot&lt;/code&gt;&lt;/a&gt; instead; if it's not &lt;code&gt;null&lt;/code&gt;, then it's an &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; currently being displayed in full-screen mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c4191149374056ed2843bff93b47f4207b912f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Want to draw a circle? The &lt;code&gt;arc()&lt;/code&gt; method is the best way. Simply specify a start angle of 0 radians (0&lt;strong&gt;&amp;deg;&lt;/strong&gt;) and an end angle of 2&amp;pi; radians (360&lt;strong&gt;&amp;deg;&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e178e9500f1f6bb4e41dc7870e0ee25cc9b2ed8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We could restrict the set of permitted media inputs to a specific device or set of devices by calling &lt;a href=&quot;../mediadevices/enumeratedevices&quot;&gt;&lt;code&gt;navigator.mediaDevices.enumerateDevices()&lt;/code&gt;&lt;/a&gt; to get a list of devices, filtering the resulting list based on our desired criteria, then using the selected devices' &lt;a href=&quot;../mediatrackconstraints/deviceid&quot;&gt;&lt;code&gt;deviceId&lt;/code&gt;&lt;/a&gt; values in the &lt;code&gt;deviceId&lt;/code&gt; field of the the &lt;code&gt;mediaConstraints&lt;/code&gt; object passed into &lt;code&gt;getUserMedia()&lt;/code&gt;. In practice, this is rarely if ever necessary, since most of that work is done for you by &lt;code&gt;getUserMedia()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7912c57a92c6df503049e0695c3bbfeac71cdeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Web Storage is not the same as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Storage&quot;&gt;mozStorage&lt;/a&gt; (Mozilla's XPCOM interfaces to SQLite) or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Session_store_API&quot;&gt;Session store API&lt;/a&gt; (an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPCOM&quot;&gt;XPCOM&lt;/a&gt; storage utility for use by extensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fc4cd156818cca96333b89608451c030b6d914" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Web sites may only register content handlers for themselves. For security reasons, it's not possible for an extension or web site to register content handlers targeting other sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217ab4d940b1415a3a429bd1ff67ff5f9e10c3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; WebKit returns the time string in UTC; Gecko and Internet Explorer return a time in the local timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac9e79c5aad85ead8ce5844314ed7ee9b6d3900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; WebRTC actually uses &lt;strong&gt;SRTP&lt;/strong&gt; (Secure Real-time Transport Protocol) to ensure that the exchanged data is secure and authenticated as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c7f48b324c5eb6f7be03f9f54c8745acc21e70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e701d2357bbf28b01e8c67662b3286f64ff553" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When implementing a mute/unmute feature, you should use the &lt;code&gt;enabled&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccef9418a8b3a16626a759dfbfb91394ec57b770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When inserted using the &lt;a href=&quot;document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; method, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; elements execute (typically synchronously), but when inserted using &lt;a href=&quot;element/innerhtml&quot;&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;element/outerhtml&quot;&gt;&lt;code&gt;outerHTML&lt;/code&gt;&lt;/a&gt;, they do not execute at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a881d4ed40ce8a384f3106687d91ac6883b92714" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the current path is empty, such as immediately after calling &lt;code&gt;beginPath()&lt;/code&gt;, or on a newly created canvas, the first path construction command is always treated as a &lt;code&gt;moveTo()&lt;/code&gt;, regardless of what it actually is. For that reason, you will almost always want to specifically set your starting position after resetting a path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0107dc247f6be017f5f74158d7ef671bbdf19fb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2&lt;/code&gt;&lt;/a&gt;, this method is available as &lt;a href=&quot;../webgl2renderingcontext/drawarraysinstanced&quot;&gt;&lt;code&gt;gl.drawArraysInstanced()&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231dd2a857cd52e36c9934fecb90345bd478ccc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2&lt;/code&gt;&lt;/a&gt;, this method is available as &lt;a href=&quot;../webgl2renderingcontext/drawbuffers&quot;&gt;&lt;code&gt;gl.drawBuffers()&lt;/code&gt;&lt;/a&gt; by default and the constants are named &lt;code&gt;gl.COLOR_ATTACHMENT1&lt;/code&gt; etc. without the &quot;WEBGL&quot; suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29fb8fc6e058d11740497b99c58d0e388661d3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2&lt;/code&gt;&lt;/a&gt;, this method is available as &lt;a href=&quot;../webgl2renderingcontext/drawelementsinstanced&quot;&gt;&lt;code&gt;gl.drawElementsInstanced()&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980be05c4438ed20e2b37841a0a32cc98360207b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2&lt;/code&gt;&lt;/a&gt;, this method is available as &lt;a href=&quot;../webgl2renderingcontext/vertexattribdivisor&quot;&gt;&lt;code&gt;gl.vertexAttribDivisor()&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7c34cc7c138f4cbba39a5cfe86abc2bb376d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;a href=&quot;../webglrenderingcontext&quot;&gt;WebGL 1&lt;/a&gt;, the &lt;a href=&quot;../angle_instanced_arrays&quot;&gt;&lt;code&gt;ANGLE_instanced_arrays&lt;/code&gt;&lt;/a&gt; extension can provide this method, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf1e6be1e307de8db3d86381bc8f5af732fd56d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using the &lt;code&gt;click&lt;/code&gt; event to trigger an action, also consider adding this same action to the &lt;code&gt;keydown&lt;/code&gt; event, to allow the use of that same action by people who don't use a mouse or a touch screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee0db523ed4324583f86da2d8248e7e49e3cf83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you call &lt;code&gt;fill()&lt;/code&gt;, any open shapes are closed automatically, so you don't have to call &lt;code&gt;closePath()&lt;/code&gt;. This is &lt;strong&gt;not&lt;/strong&gt; the case when you call &lt;code&gt;stroke()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf5423881a5fc08edd8d9bd26d5b74bf9dc2317" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you set the &lt;code&gt;strokeStyle&lt;/code&gt; and/or &lt;code&gt;fillStyle&lt;/code&gt; property, the new value becomes the default for all shapes being drawn from then on. For every shape you want in a different color, you will need to reassign the &lt;code&gt;fillStyle&lt;/code&gt; or &lt;code&gt;strokeStyle&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd1dea5b558bfe152adb7e29a9f4112a0b7d000" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While &lt;a href=&quot;globaleventhandlers/onblur&quot;&gt;&lt;code&gt;onblur&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;globaleventhandlers/onfocus&quot;&gt;&lt;code&gt;onfocus&lt;/code&gt;&lt;/a&gt; will tell you if the user switches windows, it doesn't necessarily mean it's hidden. Pages only become hidden when the user switches tabs or minimizes the browser window containing the tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e24d460d4cb18672c35d0ce9fb24f6798bd109c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While &lt;code&gt;returnValue&lt;/code&gt; has been adopted into the DOM standard, it is present primarily to support existing code. You should use &lt;a href=&quot;preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defaultprevented&quot;&gt;&lt;code&gt;defaultPrevented&lt;/code&gt;&lt;/a&gt; instead of this historical property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e480905e9bda1ff65b9d24584493531151ca9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While a WebSocket connection is functionally somewhat similar to standard Unix-style sockets, they are not related.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729adc748781745e19877b640472ff1f633bd5e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Whitespace forms part of a &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; node, meaning indentation and newlines form separate &lt;code&gt;Text&lt;/code&gt; between the &lt;code&gt;Element&lt;/code&gt; nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397b3adeafb8f0fda74d621de2e1b843584705c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can also add a handler for the &lt;code&gt;addtrack&lt;/code&gt; event using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457992cb7b31a710cfca31a35a75268de3bf3df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can also add a handler for the &lt;code&gt;change&lt;/code&gt; event using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0888c93914e4a8e89313a0760bc40e31015b2144" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can also add a handler for the &lt;code&gt;removetrack&lt;/code&gt; event using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d7da69113bb25e86fd283a7adaeedadf78e83d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can implement standard &quot;mute&quot; functionality by setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, and unmute the media by setting it back to &lt;code&gt;true&lt;/code&gt; again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab1587bd9ea3407862283d373bef13c9ec0c536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can implement standard &quot;mute&quot; functionality by setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;muted&lt;/code&gt; property refers to a condition in which there's no media because of a technical issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5511fbba211db912351960ad1037851459e7f25f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can use &lt;a href=&quot;geolocation/watchposition&quot;&gt;&lt;code&gt;watchPosition()&lt;/code&gt;&lt;/a&gt; without an initial &lt;a href=&quot;geolocation/getcurrentposition&quot;&gt;&lt;code&gt;getCurrentPosition()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e850a10cad148d7366b71a90d947439b7c839958" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You may not use a timeout for synchronous requests with an owning window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21275b40e1f90eb1744a1c14b5428680d1f33c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You need to add the event listeners before calling &lt;code&gt;open()&lt;/code&gt; on the request. Otherwise the &lt;code&gt;progress&lt;/code&gt; events will not fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e4ddb393c683c8ed8d42d2dd5093d8de6157b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You should always use STUN/TURN servers which you own, or which you have specific authorization to use. This example is using a known public STUN server but abusing these is bad form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66370037e83426b7a738f6b4bc5012fac3891e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You should use this instead of the non-standard, deprecated&lt;code&gt; getPreventDefault()&lt;/code&gt; method (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=691151&quot;&gt;bug 691151&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7095bf91e8335de81d4d46d5c9644380d421889" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You shouldn't use this legacy property. Instead, use &lt;a href=&quot;../rtcrtptransceiver&quot;&gt;&lt;code&gt;RTCRtpTransceiver&lt;/code&gt;&lt;/a&gt; to control whether or not to accept incoming audio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c21c35ab2310134c8a4213950fcbf4e9d007d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You shouldn't use this legacy property. Instead, use &lt;a href=&quot;../rtcrtptransceiver&quot;&gt;&lt;code&gt;RTCRtpTransceiver&lt;/code&gt;&lt;/a&gt; to control whether or not to accept incoming video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb667f822a083a797f45d65175a2f23932b51688" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Your callback routine must itself call &lt;code&gt;requestAnimationFrame()&lt;/code&gt; if you want to animate another frame at the next repaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d992d18435eedcc78a4ec68a68951ba5301b765c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;ok&lt;/code&gt; value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3577e1e93a9ce62d8332e4404a4a64f1c7f0e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if you have content blocking features enabled in your browser, the example may not work inline below. In that case, you can &lt;a href=&quot;https://mdn.mozillademos.org/en-US/docs/Web/API/AddressErrors%24samples/Complete_example?revision=1415254&quot;&gt;view the example on its own page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8bf674808ecddff3ae242f78eca42493929389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; it is not good practice to embed a script inside HTML. We do it here to keep the example concise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac1c12ea84dbf62f7eadc1cbfc6a5fdba19f8d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; though the &lt;code&gt;AudioParam&lt;/code&gt; returned is read-only, the value it represents is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a1b830111a984c5c6eaf357873582a5e2c8145" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; using &lt;a href=&quot;https://developer.mozilla.org/en/Server-sent_events/EventSource&quot;&gt;EventSource&lt;/a&gt;is not supported by all browsers. Please check out the &lt;a href=&quot;../eventsource#Browser_compatibility&quot;&gt;Browser compatibility section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79821492f0d8b5ddb3cce8e43300f8e049734c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/HTTP/Response_codes&quot;&gt;Regular HTTP status codes&lt;/a&gt; can only be used before the handshake. After the handshake succeeds, you have to use a different set of codes (defined in section 7.4 of the spec).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1e332f8f2339d16fdfbf9a205aa49ce15d3363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; can parse XML and HTML directly from a URL-addressable resource, returning a &lt;code&gt;Document&lt;/code&gt; in its &lt;a href=&quot;xmlhttprequest/response&quot;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a611cface7571dac5ba67be9d01e961d1bfc24d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;KeyboardEvent&lt;/code&gt; events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/input&quot;&gt;input&lt;/a&gt;&lt;/code&gt; event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d9a7de450949230715bc2dcc8dec499685f1f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt; and &lt;a href=&quot;rtcsessiondescription&quot;&gt;&lt;code&gt;RTCSessionDescription&lt;/code&gt;&lt;/a&gt; are currently prefixed in many browsers. It's strongly recommended you use a shim library such as the excellent and broadly supported &lt;a href=&quot;https://github.com/webrtcHacks/adapter&quot;&gt;Adapter.js&lt;/a&gt;, in order to ensure the broadest possible compatibility of your site or Web app. It's worth noting that &lt;a href=&quot;https://github.com/webrtcHacks/adapter&quot;&gt;Adapter.js&lt;/a&gt; goes beyond prefix handling, implementing shims to bridge compatibility gaps between browsers' implementations of WebRTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8ca4129287143af0cec4c90510a440b05b48cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt; can now interpret HTML for you using the &lt;a href=&quot;responsexml&quot;&gt;&lt;code&gt;responseXML&lt;/code&gt;&lt;/a&gt; property. Read the article about &lt;a href=&quot;html_in_xmlhttprequest&quot;&gt;HTML in XMLHttpRequest&lt;/a&gt; to learn how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581f73e02b765648ad25602d05aa2e391f134d15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt; responses from a different domain &lt;em&gt;cannot&lt;/em&gt; set cookie values for their own domain unless &lt;code&gt;withCredentials&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; before making the request, regardless of &lt;code&gt;Access-Control-&lt;/code&gt; header values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b761e9c4d2876ae17dccaa28d38ce37173bc904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;console.exception()&lt;/code&gt; is an alias for &lt;code&gt;console.error()&lt;/code&gt;; they are functionally identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d67d0a525da1d03f2d21771373109983877717" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;getAnimations()&lt;/code&gt; and &lt;code&gt;effect&lt;/code&gt; are not fully supported as of this writing, but the polyfill does support them today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d0ec419087212ef8c57f3f769a84960a950e13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;getCapabilities()&lt;/code&gt; hasn't been implemented yet by all major browsers. For the time being, you'll have to try to get what you need, and if you can't, decide what to do at that point. See Firefox &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1179084&quot;&gt;bug 1179084&lt;/a&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82aa2ab656e57c313451a174d14332b94949470" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;useCapture&lt;/code&gt; has not always been optional. Ideally, you should include it for the widest possible browser compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad8a81cf21f664a31446230e34f246d790cf5c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;strong&gt;document.writeln&lt;/strong&gt; (like &lt;strong&gt;document.write&lt;/strong&gt;) does not work in XHTML documents (you'll get a &quot;Operation is not supported&quot; (&lt;code&gt;NS_ERROR_DOM_NOT_SUPPORTED_ERR&lt;/code&gt;) error on the error console). This is the case if opening a local file with a .xhtml file extension or for any document served with an application/xhtml+xml MIME type. More information is available in the &lt;a href=&quot;http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite&quot;&gt;W3C XHTML FAQ&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd92687b99044b4eddf773d671c4667439b4622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="43340ecf23a756111f857102496e12c0d9fd47fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: 4 ms is &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers&quot;&gt;specified by the HTML5 spec&lt;/a&gt; and is consistent across browsers released in 2010 and onward. Prior to (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the minimum timeout value for nested timeouts was 10 ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57a1b056a7933f862e384b8fd6953ef969835bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;../indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt; can be used inside a service worker for data storage if you require it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b6a16b41626c30b2f2b3cd46c4662f813b8c12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;../speechrecognition/continuous&quot;&gt;&lt;code&gt;SpeechRecognition.continuous&lt;/code&gt;&lt;/a&gt; controls whether continuous results are captured, or just a single result each time recognition is started. It is commented out because currently it is not implemented in Gecko, so setting this was breaking the app. You can get a similar result by simply stopping the recognition after the first result is received, as you'll see later on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9be3ee81ddb617f771a9bbad4bcb803bd4ca88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;add&quot;&gt;&lt;code&gt;Cache.add&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;addall&quot;&gt;&lt;code&gt;Cache.addAll&lt;/code&gt;&lt;/a&gt; do not cache responses with &lt;code&gt;Response.status&lt;/code&gt; values that are not in the 200 range, whereas &lt;a href=&quot;put&quot;&gt;&lt;code&gt;Cache.put&lt;/code&gt;&lt;/a&gt; lets you store any request/response pair. As a result, &lt;a href=&quot;add&quot;&gt;&lt;code&gt;Cache.add&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;addall&quot;&gt;&lt;code&gt;Cache.addAll&lt;/code&gt;&lt;/a&gt; can't be used to store opaque responses, whereas &lt;a href=&quot;put&quot;&gt;&lt;code&gt;Cache.put&lt;/code&gt;&lt;/a&gt; can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff77bcfa5774a21c8f1278e6d0ce6f84a73f7c03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;cachestorage/match&quot;&gt;&lt;code&gt;CacheStorage.match()&lt;/code&gt;&lt;/a&gt; is a convenience method. Equivalent functionality to match a cache entry can be implemented by opening your cache with &lt;a href=&quot;cachestorage/open&quot;&gt;&lt;code&gt;CacheStorage.open()&lt;/code&gt;&lt;/a&gt;, returning the entries it contains with &lt;a href=&quot;cachestorage/keys&quot;&gt;&lt;code&gt;CacheStorage.keys()&lt;/code&gt;&lt;/a&gt;, and matching the one you want with &lt;a href=&quot;cachestorage/match&quot;&gt;&lt;code&gt;CacheStorage.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878658a8cd13e3cee832ef23c8d0c9e5755616ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;getall&quot;&gt;&lt;code&gt;Headers.getAll&lt;/code&gt;&lt;/a&gt; used to have this functionality, with &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Headers.get&lt;/code&gt;&lt;/a&gt; returning only the first value added to the &lt;code&gt;Headers&lt;/code&gt; object. The latest spec has removed &lt;code&gt;getAll()&lt;/code&gt;, and updated &lt;code&gt;get()&lt;/code&gt; to return all values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd4ffe34302adb006d1fb382019857a5477add1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage&quot;&gt;localStorage&lt;/a&gt; works in a similar way to service worker cache, but it is synchronous, so not allowed in service workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739a5678d8a0921467600e27c7373b8dc7f7ef39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;match&quot;&gt;&lt;code&gt;Cache.match()&lt;/code&gt;&lt;/a&gt; is basically identical to &lt;code&gt;Cache.matchAll()&lt;/code&gt;, except it resolves with &lt;code&gt;response[0]&lt;/code&gt; (i.e. the first matching response) instead of &lt;code&gt;response&lt;/code&gt; (all matching response in an array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039e8906951b7b6c0dcd2bc5fd7f845d33cfb26b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;match&quot;&gt;&lt;code&gt;caches.match()&lt;/code&gt;&lt;/a&gt; is a convenience method. Equivalent functionality is to call &lt;a href=&quot;../cache/match&quot;&gt;&lt;code&gt;cache.match()&lt;/code&gt;&lt;/a&gt; on each cache (in the order returned by &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;caches.keys()&lt;/code&gt;&lt;/a&gt;) until a &lt;a href=&quot;../response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c438bc655a14f4d3f07b42d0fe47d549d185e961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Cache.match()&lt;/code&gt; is basically identical to &lt;a href=&quot;matchall&quot;&gt;&lt;code&gt;Cache.matchAll()&lt;/code&gt;&lt;/a&gt;, except &lt;code&gt;Cache.match()&lt;/code&gt; resolves with &lt;code&gt;response[0]&lt;/code&gt; (the first matching response) instead of &lt;code&gt;response[]&lt;/code&gt; (all matching response in an array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c7fb7632c6d57362e6975b0dfe06124a1106cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;GlobalEventHandlers&lt;/code&gt; is a mixin and not an interface; you can't actually create an object of type &lt;code&gt;GlobalEventHandlers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7b3edc237af37acfb1ed6a59b84e4463dc7c72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;WindowEventHandlers&lt;/code&gt; is a mixin and not an interface; you can't actually create an object of type &lt;code&gt;WindowEventHandlers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd0d3c3cf1d3cb7364ac8f987c52fcaadd238ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;WindowOrWorkerGlobalScope&lt;/code&gt; is a mixin and not an interface; you can't actually create an object of type &lt;code&gt;WindowOrWorkerGlobalScope&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d95fd15448b8b0ff8020b57e5c253c7a4b13d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;add()&lt;/code&gt; will overwrite any key/value pair previously stored in the cache that matches the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a36dc831c184707ff708fa7916a3729d64e92ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;addAll()&lt;/code&gt; will overwrite any key/value pairs previously stored in the cache that match the request, but will fail if a resulting &lt;code&gt;put()&lt;/code&gt; operation would overwrite a previous cache entry created by the same &lt;code&gt;addAll()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4de13a02a78e797c39d545c95523db621d406ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;calc()&lt;/code&gt; has good support across modern browsers too, even going back to Internet Explorer 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39b8411eba3641ffe7301d77ca9f0d8e750ede3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;close()&lt;/code&gt; is part of the new custom stream, not the original stream we are discussing here. We&amp;rsquo;ll explain more about the custom stream in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2700bd899535f56a1ae42c054cc1e8b0c2f38004" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;createBuffer()&lt;/code&gt; used to be able to take compressed data and give back decoded samples, but this ability was removed from the spec, because all the decoding was done on the main thread, therefore &lt;code&gt;createBuffer()&lt;/code&gt; was blocking other code execution. The asynchronous method &lt;code&gt;decodeAudioData()&lt;/code&gt; does the same thing &amp;mdash; takes compressed audio, say, an MP3 file, and directly gives you back an &lt;a href=&quot;../audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt; that you can then set to play via in an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. For simple uses like playing an MP3, &lt;code&gt;decodeAudioData()&lt;/code&gt; is what you should be using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a1d56ea8ea2e34bc4d5361ea235b34d24f4d8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;document.write&lt;/code&gt; and &lt;code&gt;document.writeln&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Web/Writing_JavaScript_for_HTML&quot;&gt;do not work in XHTML documents&lt;/a&gt; (you'll get a &quot;Operation is not supported&quot; [&lt;code&gt;NS_ERROR_DOM_NOT_SUPPORTED_ERR&lt;/code&gt;] error in the error console). This happens when opening a local file with the .xhtml file extension or for any document served with an &lt;code&gt;application/xhtml+xml&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/MIME_type&quot;&gt;MIME type&lt;/a&gt;. More information is available in the &lt;a href=&quot;http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite&quot;&gt;W3C XHTML FAQ&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c26748fe4a3a7ffe5e64e3099f77301130b2722" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;document.write&lt;/code&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer&quot;&gt;deferred&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async&quot;&gt;asynchronous&lt;/a&gt; scripts will be ignored, and you'll get a message like &quot;A call to &lt;code&gt;document.write()&lt;/code&gt; from an asynchronously-loaded external script was ignored&quot; in the error console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9a94246f80109698cc135eb315995699713d08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;elapsedTime&lt;/code&gt; does not include time prior to the transition effect beginning; that means that the value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay&quot;&gt;&lt;code&gt;transition-delay&lt;/code&gt;&lt;/a&gt; doesn't affect the value of &lt;code&gt;elapsedTime&lt;/code&gt;, which is zero until the delay period ends and the animation begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3ed12b9888e2f92a4c8e4067da51a050d96b0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;offset&lt;/code&gt; values, if provided, must be between 0.0 and 1.0 (inclusive) and arranged in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d382fee1e93fcd9b136f02f879580f82f7307f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;postMessage()&lt;/code&gt; can only send a single object at once. As seen above, if you want to pass multiple values you can send an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c1b1022c6864466337fb5471e1dda11b18ae7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;put()&lt;/code&gt; will overwrite any key/value pair previously stored in the cache that matches the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9be97b8ddf1f113e66b4cb4b8f78821439d6fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;screenLeft&lt;/code&gt; is an alias of the older &lt;a href=&quot;screenx&quot;&gt;&lt;code&gt;Window.screenX&lt;/code&gt;&lt;/a&gt; property. &lt;code&gt;screenLeft&lt;/code&gt; was originally supported only in IE but was introduced everywhere due to popularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c7d3cd89c5d3a06578fe07b7c26fb1bbd214fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;screenTop&lt;/code&gt; is an alias of the older &lt;a href=&quot;screeny&quot;&gt;&lt;code&gt;Window.screenY&lt;/code&gt;&lt;/a&gt; property. &lt;code&gt;screenTop&lt;/code&gt; was originally supported only in IE but was introduced everywhere due to popularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b305d594ce3980ff2980b0a6ac9732dbff92422" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;window.indexedDB.open()&lt;/code&gt; is asynchronous; the method will finish running long before the &lt;code&gt;success&lt;/code&gt; event is fired. This means that a function (e.g. &lt;code&gt;openDb()&lt;/code&gt;) that calls &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;onsuccess&lt;/code&gt; will return before the &lt;code&gt;onsuccess&lt;/code&gt; handler has run. This issue is also true of other request methods such as &lt;code&gt;transaction()&lt;/code&gt; and &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689ec851728147c4555cdd9a3877711a7a108ca0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A document timeline that is associated with a non-active document is also considered to be &lt;strong&gt;inactive&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52266a38c0bcf1c3bd2dc2f1ed4a3dd3a7d53b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A value of 0.01 was used for the value to ramp down to in the last function rather than 0, as an &lt;em&gt;invalid or illegal string&lt;/em&gt; error is thrown if 0 is used &amp;mdash; the value needs to be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285615829c65e7ce383f9d721bff3e41c13c95f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Access to Web Storage from third-party IFrames is denied if the user has &lt;a href=&quot;https://support.mozilla.org/en-US/kb/disable-third-party-cookies&quot;&gt;disabled third-party cookies&lt;/a&gt; (Firefox implements this behaviour from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/43&quot;&gt;version 43&lt;/a&gt; onwards.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee89b70416239aa5611b5a3b48afa426b8c74242" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: After introducing &lt;a href=&quot;../storage_api&quot;&gt;Storage API&lt;/a&gt;, the &quot;permanent&quot; folder can be considered obsolete; the &quot;permanent&quot; folder only stores IndexedDB persistent-type databases. It doesn't matter if box mode is &quot;best-effort&quot; or &quot;persistent&quot; &amp;mdash; data is stored under &amp;lt;profile&amp;gt;/storage/default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f0bb25f6826e47c5be408950cac35cb0aaa615" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: All input elements have a 'name' attribute. It is necessary to be able to access their values later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad4a1ab6091745456c5cb5da447a8efd107f802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: All of the Headers methods will throw a &lt;code&gt;TypeError&lt;/code&gt; if you try to pass in a reference to a name that isn't a &lt;a href=&quot;https://fetch.spec.whatwg.org/#concept-header-name&quot;&gt;valid HTTP Header name&lt;/a&gt;. The mutation operations will throw a &lt;code&gt;TypeError&lt;/code&gt; if the header has an immutable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Guard&quot;&gt;Guard&lt;/a&gt;. In any other failure case they fail silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd5a76f0a544b8928e83671542e94046a935716" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: All of the code below is placed inside the &lt;code&gt;getUserMedia&lt;/code&gt; success callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078feb36fdf41a5b7b470d085324a2b53b46cea4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Alternatively, you can use &lt;code&gt;getAll()&lt;/code&gt; to handle this case (and &lt;code&gt;getAllKeys()&lt;/code&gt;) . The following code does precisely the same thing as above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e22d0bd780911c179242a1389555064311acbbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An &quot;error&quot; Response never really gets exposed to script: such a response to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt; would reject the promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e979f3f41807a46616176d1aa2be0faa1a7117" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An &lt;code&gt;AudioNode&lt;/code&gt; can be target of events, therefore it implements the &lt;a href=&quot;eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f9eae12b2a61a8874b4040b1c0220012109bd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An alias of &lt;code&gt;screenX&lt;/code&gt; was implemented across modern browsers in more recent times &amp;mdash; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenLeft&quot;&gt;&lt;code&gt;Window.screenLeft&lt;/code&gt;&lt;/a&gt;. This was originally supported only in IE but was introduced everywhere due to popularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbaabc879008868c76572334a304208c56e4530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An alias of &lt;code&gt;screenY&lt;/code&gt; was implemented across modern browsers in more recent times &amp;mdash; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenTop&quot;&gt;&lt;code&gt;Window.screenTop&lt;/code&gt;&lt;/a&gt;. This was originally supported only in IE but was introduced everywhere due to popularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87056f193ea434f3bd28b7bd7ee76f3605ff3858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An orientation of &lt;code&gt;{ x: 0, y: 0, z: 0, w: 1 }&lt;/code&gt; is considered to be &quot;forward&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd628f881179c4379ddb80b95e6da73fa242f7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Angles in the &lt;code&gt;arc&lt;/code&gt; function are measured in radians, not degrees. To convert degrees to radians you can use the following JavaScript expression: &lt;code&gt;radians = (Math.PI/180)*degrees&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb197dd6a768ddc0a0ea902a36615c0d04073be1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Any pixels outside the canvas are returned as transparent black in the resulting &lt;code&gt;ImageData&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9614ec5588f8bf86549e2b07cdd17994b5f3e768" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As a consequence of calling &lt;code&gt;createMediaElementSource()&lt;/code&gt;, audio playback from the &lt;a href=&quot;../htmlmediaelement&quot;&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt;&lt;/a&gt; will be re-routed into the processing graph of the AudioContext. So playing/pausing the media can still be done through the media element API and the player controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f6e6296a66b087bef35530a9c9330efca45f02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As a consequence of calling &lt;code&gt;createMediaElementSource()&lt;/code&gt;, audio playback from the &lt;a href=&quot;htmlmediaelement&quot;&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt;&lt;/a&gt; will be re-routed into the processing graph of the AudioContext. So playing/pausing the media can still be done through the media element API and the player controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea5c8acf37b5d5071d878ebd1a39f83fd70b862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As a consequence of calling &lt;code&gt;createMediaStreamSource()&lt;/code&gt;, audio playback from the media stream will be re-routed into the processing graph of the AudioContext. So playing/pausing the stream can still be done through the media element API and the player controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ebc30e2b2a4d2dffee00bc5bfacf367277a35a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112702&quot;&gt;bug 1112702&lt;/a&gt;.) Previously in a &lt;code&gt;readwrite&lt;/code&gt; transaction &lt;a href=&quot;../idbtransaction/oncomplete&quot;&gt;&lt;code&gt;IDBTransaction.oncomplete&lt;/code&gt;&lt;/a&gt; was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the &lt;code&gt;complete&lt;/code&gt; event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The &lt;code&gt;complete&lt;/code&gt; event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further. If you must ensure durability for some reason (e.g. you're storing critical data that cannot be recomputed later) you can force a transaction to flush to disk before delivering the &lt;code&gt;complete&lt;/code&gt; event by creating a transaction using the experimental (non-standard) &lt;code&gt;readwriteflush&lt;/code&gt; mode (see &lt;a href=&quot;../idbdatabase/transaction&quot;&gt;&lt;code&gt;IDBDatabase.transaction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97f66412a4e5a947bd3ef7450d5f9c784bfde10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of Firefox 44, the permissions for &lt;a href=&quot;../notifications_api&quot;&gt;Notifications&lt;/a&gt; and &lt;a href=&quot;../push_api&quot;&gt;Push&lt;/a&gt; have been merged. If permission is granted for notifications, push will also be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c994ef38afd68cf3c8925e157e84b4f860f30a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of Firefox 44, the permissions for Notifications and &lt;a href=&quot;push_api&quot;&gt;Push&lt;/a&gt; have been merged. If permission is granted for notifications, push will also be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ce2492e901e002cd4da1cc4dbd222a04e54cc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of Firefox 44, when &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache&quot;&gt;AppCache&lt;/a&gt; is used to provide offline support for a page a warning message is now displayed in the console advising developers to use &lt;a href=&quot;using_service_workers&quot;&gt;Service workers&lt;/a&gt; instead (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1204581&quot;&gt;bug 1204581&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ced9988073cc2c9bd2a07e5f953afcc947d37f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of Gecko 44, the allowed quota of push messages per application is not incremented when a new notification fires, when another is still visible, for a period of three seconds. This handles cases where a burst of Push messages is received, and not all generate a visible notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3ab0a77667c4e9c03279683ac06a017b7149aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by &lt;a href=&quot;../web_audio_api#Audio_Workers&quot;&gt;Audio Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301dc26c42be9a95479880b20fbaac3ffe7ef253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by &lt;a href=&quot;https://webaudio.github.io/web-audio-api/#audioworklet&quot;&gt;AudioWorklet&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4809a77b26a60e02b7a4ada9aa30f6ab99ce83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As per the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/workers.html#runtime-script-errors-2&quot;&gt;Web workers Spec&lt;/a&gt;, worker error events should not bubble (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1188141&quot;&gt;bug 1188141&lt;/a&gt;. This has been implemented in Firefox 42.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8ec9efa7cac5afaace3790a7e2164cc31cf3c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As well as viewing the example pages live using the above links, you can also &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/web-storage&quot;&gt;check out the source code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c08d1acb76468f530a73d64943a971186ab3ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Be aware that the clipping region is only constructed from shapes added to the path. It doesn't work with shape primitives drawn directly to the canvas, such as &lt;a href=&quot;fillrect&quot;&gt;&lt;code&gt;fillRect()&lt;/code&gt;&lt;/a&gt;. Instead, you'd have to use &lt;a href=&quot;rect&quot;&gt;&lt;code&gt;rect()&lt;/code&gt;&lt;/a&gt; to add a rectangular shape to the path before calling &lt;code&gt;clip()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c4d654562563ccca8b964b52bb8b80616770ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Because &lt;code&gt;oninstall&lt;/code&gt;/&lt;code&gt;onactivate&lt;/code&gt; could take a while to complete, the service worker spec provides a &lt;code&gt;waitUntil&lt;/code&gt; method, once this is called &lt;code&gt;oninstall&lt;/code&gt; or &lt;code&gt;onactivate&lt;/code&gt;, it passes a promise. Functional events are not dispatched to the service worker until the promise is successfully resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b34a1b6b0a03b1d3eb71c009ee27415a54edb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Because historically the errors were identified by a numeric value which corresponded with a named variable defined to have that value, some of the entries below indicate the legacy code value and constant name that were used in the past.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80955dbabb7893038a070425f342e44734f72682" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Browsers used to handle the &lt;code&gt;popstate&lt;/code&gt; event differently on page load, but now they behave the same. Firefox never emitted a popstate event on page load. Chrome did until version 34, while Safari did until version 10.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3208b1e351ad73475a616ada48b1ddb3f93cd62a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: By default, all positions are given as a sitting space position. Transforming this point with &lt;a href=&quot;../vrstageparameters/sittingtostandingtransform&quot;&gt;&lt;code&gt;VRStageParameters.sittingToStandingTransform&lt;/code&gt;&lt;/a&gt; &amp;mdash; when you are working with a room display for example &amp;mdash; converts this to a standing space position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9852cb79f5d20b90bc60e7fd1f5939176c90d70b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: CacheStorage always rejects with a &lt;code&gt;SecurityError&lt;/code&gt; on untrusted origins (i.e. those that aren't using HTTPS, although this definition will likely become more complex in the future.) When testing, you can get around this by checking the &quot;Enable Service Workers over HTTP (when toolbox is open)&quot; option in the Firefox Devtools options/gear menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edb562242bc1ace979c35f83ae73b0f6a43cacc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Chrome versions earlier than 52 require you to set up a project on &lt;a href=&quot;https://developers.google.com/cloud-messaging/&quot;&gt;Google Cloud Messaging&lt;/a&gt; to send push messages, and use the associated project number and API key when sending push notifications. It also requires an app manifest, with some special parameters to use this service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d3c13d80106f7470acc92e45d7b37ce7a209f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Code snippet taken from &lt;a href=&quot;https://github.com/toji/webvr.info/blob/master/samples/03-vr-presentation.html&quot;&gt;Google's VR Presentation demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0229faf8dc09614a287b7077fdde4d838ff68b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Computer-connected systems sometimes don't include a position sensor, but they usually do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dca1ff209032a86c531034b66e50d5e581eb4de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Consider using &lt;a href=&quot;onabort&quot;&gt;&lt;code&gt;IDBTransaction.onabort&lt;/code&gt;&lt;/a&gt; instead to handle non- successful completion of the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901a333337cddcb5249fe3280fc990b22fdf6f60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Consider using &lt;code&gt;IDBOpenDBRequest.onsuccess&lt;/code&gt; instead (see &lt;a href=&quot;../idbrequest/onsuccess&quot;&gt;&lt;code&gt;IDBRequest.onsuccess&lt;/code&gt;&lt;/a&gt;, where it is inherited from).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feff6c9629ee5023e3de22d6d4bf31466deebee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Constructors for autonomous custom elements must extend &lt;a href=&quot;../htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd95597c60eb44363b806554be0168c1b941a1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the W3C HTML 5.2 spec states that &lt;code&gt;rev&lt;/code&gt; is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4a08cb748581565dc957d4b909bfdd97b960f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Do not use this method for comparing arbitrary JavaScript values, because many JavaScript values are either not valid IndexedDB keys (booleans and objects, for example) or are treated as equivalent IndexedDB keys (for example, since IndexedDB ignores arrays with non-numeric properties and treats them as empty arrays, so any non-numeric arrays are treated as equivalent). This throws an exception if either of the values is not a valid key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f052634c40cd6a11d114150f6b4fe1da6d539d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: EMMA is defined in the specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b6f3c1e706c1ed3f1072997fabdfc7c289dfb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Everything you do in IndexedDB always happens in the context of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB/Basic_Concepts_Behind_IndexedDB#gloss_transaction&quot;&gt;transaction&lt;/a&gt;, representing interactions with data in the database. All objects in IndexedDB &amp;mdash; including object stores, indexes, and cursors &amp;mdash; are tied to a particular transaction. Thus, you cannot execute commands, access data, or open anything outside of a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9fae679b6804350f8fdcc69ad6df3fc26b0e6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Exponential ramps are considered more useful when changing frequencies or playback rates than linear ramps because of the way the human ear works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39efdbd1cf14665820fe8848b59a6f400edbcadd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Find out more about using the Fetch API features in &lt;a href=&quot;fetch_api/using_fetch&quot;&gt;Using Fetch&lt;/a&gt;, and study concepts in &lt;a href=&quot;fetch_api/basic_concepts&quot;&gt;Fetch basic concepts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2541a16aa43d2e580f98c8666a8ab93bece1ca27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Firefox has a bug with using &lt;code&gt;console.log&lt;/code&gt; inside shared/service workers (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1058644&quot;&gt;bug 1058644&lt;/a&gt;), which may return strange results, but this should be fixed soon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9388868bfa014879018368d3bea4e3522cba3c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Firefox used to accept &lt;code&gt;iso-2022-jp-2&lt;/code&gt; sequences silently when an &lt;code&gt;iso-2022-jp&lt;/code&gt; decoder was instantiated, however this was removed in version 56 to simplify the API, as no other browsers support it and no pages seem to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b69aec4c8351f617a556403dd54a431887ba7a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Firefox, Chrome and Opera used to have support for encoding types other than &lt;code&gt;utf-8&lt;/code&gt; (such as &lt;code&gt;utf-16&lt;/code&gt;, &lt;code&gt;iso-8859-2&lt;/code&gt;, &lt;code&gt;koi8&lt;/code&gt;, &lt;code&gt;cp1261&lt;/code&gt;, and &lt;code&gt;gbk&lt;/code&gt;). As of Firefox 48 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1257877&quot;&gt;bug 1257877&lt;/a&gt;), Chrome 54 (&lt;a href=&quot;https://www.chromestatus.com/feature/5630760492990464&quot;&gt;ticket&lt;/a&gt;) and Opera 41, no other encoding types are available other than &lt;code&gt;utf-8&lt;/code&gt;, in order to match the &lt;a href=&quot;https://www.w3.org/TR/encoding/#dom-textencoder&quot;&gt;spec&lt;/a&gt;. In all cases, passing in an encoding type to the constructor will be ignored and a utf-8 TextEncoder will be created (the &lt;a href=&quot;textdecoder&quot;&gt;&lt;code&gt;TextDecoder&lt;/code&gt;&lt;/a&gt; still allows for other decoding types).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cd0f4367e68c941ca20ea0d369a5cb3bc81ba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a complete list of functions available to workers, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Reference/Functions_and_classes_available_to_workers&quot;&gt;Functions and interfaces available to workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2950d0a67511994d92f4b162c6fb1651e3ede0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a full working example, see our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/script-processor-node/&quot;&gt;script-processor-node&lt;/a&gt; github repo (also view the &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/script-processor-node/index.html&quot;&gt;source code&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a602c798e13048fe9cb4e0f742ad38b9c85892" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a more complete example allowing you to experiment with key range, have a look at our &lt;a href=&quot;https://github.com/mdn/IDBKeyRange-example&quot;&gt;IDBKeyRange-example&lt;/a&gt; repo (&lt;a href=&quot;http://mdn.github.io/IDBKeyRange-example/&quot;&gt;view the example live too&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc49a505f143eca4c745e28765d53ce638de8fa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a more complete example allowing you to experiment with key range, have a look at our &lt;a href=&quot;https://github.com/mdn/indexeddb-examples/tree/master/idbkeyrange&quot;&gt;IDBKeyRange-example&lt;/a&gt; repo (&lt;a href=&quot;https://mdn.github.io/indexeddb-examples/idbkeyrange/&quot;&gt;view the example live too&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b5e87061d7789d8498abc3f177de4bac1fb76b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a more complete example allowing you to experiment with key range, have a look at our &lt;a href=&quot;https://github.com/mdn/indexeddb-examples/tree/master/idbkeyrange&quot;&gt;IDBKeyRange&lt;/a&gt; repo (&lt;a href=&quot;http://mdn.github.io/indexeddb-examples/idbkeyrange/&quot;&gt;view the example live too&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b310b29b4207d924a7ee257505fbaace7abb23a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a real world example, see our &lt;a href=&quot;https://mdn.github.io/dom-examples/web-storage/&quot;&gt;Web Storage Demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1b961c130e41bf067064cae27616adbbf674ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a working example, see our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/offline-audio-context-promise/&quot;&gt;offline-audio-context-promise&lt;/a&gt; Github repo (see the &lt;a href=&quot;https://github.com/mdn/webaudio-examples&quot;&gt;source code&lt;/a&gt; too.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d77c29ae97cb4c0e34af022f92141ce8addf99f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For a working example, see our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/offline-audio-context-promise/&quot;&gt;offline-audio-context-promise&lt;/a&gt; Github repo (see the &lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/offline-audio-context-promise&quot;&gt;source code&lt;/a&gt; too.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a470750d07ed19f8ff1b1ec8c230ed9b3b74cc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For an in-depth explanation of how audio buffers work, and what these parameters mean, read &lt;a href=&quot;../web_audio_api/basic_concepts_behind_web_audio_api#Audio_buffers.3A_frames.2C_samples_and_channels&quot;&gt;Audio buffers: frames, samples and channels&lt;/a&gt; from our Basic concepts guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca26c987b2c0fdc0b573ed1f59d91505000b63dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For backwards compatibility with previous versions of the &lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;Custom Elements specification&lt;/a&gt;, some browsers will allow you to pass a string here instead of an object, where the string's value is the custom element's tag name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9dd0cdaa2f1aee811c97b95c169b4cdf41b249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For browsers where this constructor is not supported, &lt;a href=&quot;../document/createcomment&quot;&gt;&lt;code&gt;Document.createComment()&lt;/code&gt;&lt;/a&gt; may be suitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9973072f740d23227f6bcc37c9a7302a2df72537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more information and ideas, the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/comms.html#ports-as-the-basis-of-an-object-capability-model-on-the-web&quot;&gt;Ports as the basis of an object-capability model on the Web&lt;/a&gt; section of the spec is a useful read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966d3e57a11534eaa25ec1ba91661ddbd75c6310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more information on the theory behind Linear Convolution, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;Convolution article on Wikipedia&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1362ad84120222e735db89406d20e71042dd7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more information on transferable objects, performance, and feature-detection for this method, read &lt;a href=&quot;http://updates.html5rocks.com/2011/12/Transferable-Objects-Lightning-Fast&quot;&gt;Transferable Objects: Lightning Fast!&lt;/a&gt; on HTML5 Rocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c7a32a8c20c29f43b3fa2e56076bd15e1bf59f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more information, see our &lt;a href=&quot;visualizations_with_web_audio_api&quot;&gt;Visualizations with Web Audio API&lt;/a&gt; article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0693c5b83c1e0c5fc3f92383d8a30d0a57762d22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more information, see our &lt;a href=&quot;web_audio_spatialization_basics&quot;&gt;Web audio spatialization basics&lt;/a&gt; article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e84e6bd1b211c319856be5ca9798450a447e48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For more on using this node, see the &lt;a href=&quot;../analysernode&quot;&gt;&lt;code&gt;AnalyserNode&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cd71882b8a17795ecbd38be326bae20fdd2545" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For some devices, it might be the default voice for the voice's language. The spec is not very clear on which it should be, so some implementations may differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5df81c2116118fa450b250776453b965badaaf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: From Firefox 45 onwards, when the browser crashes/restarts, the amount of data saved per origin is limited to 10MB. This has been done to avoid memory issues caused by excessive usage of web storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab6f60a06caf1d144ca8ba397775c13cb0843ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If &lt;code&gt;referrer&lt;/code&gt;'s value is &lt;code&gt;no-referrer&lt;/code&gt;, it returns an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f458beedee34d1f9ef3b0c26180436a1caf6c30d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If SharedWorker can be accessed from several browsing contexts, all those browsing contexts must share the exact same origin (same protocol, host, and port).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac40e48ed6bd55ef6732ed93e60367cf2d0c6b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If WebVR isn't working in your browser, you might need to make sure it is running through your graphics card. For example for NVIDIA cards, if you've got the NVIDIA control panel set up successfully, there will be a context menu option available &amp;mdash; right click on Firefox, then choose &lt;em&gt;Run with graphics processor &amp;gt; High-performance NVIDIA processor&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac4804b1d1348920f0df3354cca3ba449888a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If a value greater than &lt;code&gt;AnalyserNode.maxDecibels&lt;/code&gt; is set, an &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt; exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbf390a726242ac8a398288ff976b29912df502" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If a value less than or equal to &lt;code&gt;AnalyserNode.minDecibels&lt;/code&gt; is set, an &lt;code&gt;IndexSizeError&lt;/code&gt; exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6952b69e5061d6e3e88e57d0495a21cb3bc441" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If a value outside the range 0&amp;ndash;1 is set, an &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt; exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37964f46c2b60063a60aad88a51b03b964053bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If its value is not a power of 2, or it is outside the specified range, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the name &lt;code&gt;IndexSizeError&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b142bab9c06a4715586f05e05d19d6db9e21d96a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If presenting VR content would obscure other content on the device, this will return &lt;code&gt;false&lt;/code&gt;, in which case the application should not attempt to mirror VR content or update non-VR UI because that content will not be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d547b6df1053a7e99648eb5333347bc88e4eb0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the &lt;code&gt;focusNode&lt;/code&gt; appears before the &lt;code&gt;anchorNode&lt;/code&gt; in the source, the two effectively swap roles, so anchor becomes focus and focus becomes anchor. In addition, the direction is reversed in such cases &amp;mdash; the caret is placed at the beginning of the text rather the end, which matters for any keyboard command that might follow. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937849550d5ffac298f18c594f5e5e5aec5ed8fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the &lt;code&gt;src&lt;/code&gt; property is updated (along with any siblings), the parent &lt;a href=&quot;htmlmediaelement&quot;&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;load&lt;/code&gt; method should be called when done, since &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements are not re-scanned automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90011c7ce9bbaf3cb88ae91871efa21ddeab0d9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the browser is unable to start recording or continue recording, it&lt;em&gt; will&lt;/em&gt; raise a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMError&quot;&gt;&lt;code&gt;DOMError&lt;/code&gt;&lt;/a&gt; event, followed by a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/dataavailable&quot;&gt;&lt;code&gt;MediaRecorder.dataavailable&lt;/code&gt;&lt;/a&gt; event containing the Blob it has gathered, followed by the &lt;a href=&quot;stop&quot;&gt;&lt;code&gt;MediaRecorder.stop&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c034861b4654c6212926e45d2299a3cc4005b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the connection is already closed, the method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9632d7d3bb5d7288b2652ec166068951af632d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the group limit is exceeded, or if origin eviction couldn't free enough space, the browser will throw a &lt;code&gt;QuotaExceededError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6377e1e497604e646a4d60ba45b7c705b26c3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the hardware isn't capable of providing this information, this property returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4676d1925219d0822e34b285d4278087081df21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the keyframes cannot be processed or are malformed, the &lt;code&gt;KeyframeEffect&lt;/code&gt;'s keyframes are not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7acd43fcf922b40ffc5a632e0d1673427e66c9e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the reader is active, the &lt;code&gt;cancel()&lt;/code&gt; method behaves the same as that for the associated stream (&lt;a href=&quot;../readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9f13b3133886e6a15b8807b75d0c13f6d7e285" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the sound file you're loading is held on a different domain you will need to use the &lt;code&gt;crossorigin&lt;/code&gt; attribute; see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross Origin Resource Sharing (CORS)&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7dcf82645145d23b63a007ee26c1caad696870" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the specified &lt;a href=&quot;../cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; does not exist, a new cache is created with that &lt;code&gt;cacheName&lt;/code&gt; and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that resolves to this new &lt;a href=&quot;../cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7be62f6b10eb2b6b02bf9c602568b458efcc9b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are looking around in your Profile at the data stored, you might see a fourth folder: &lt;code&gt;persistent&lt;/code&gt;. Basically, the &lt;code&gt;persistent&lt;/code&gt; folder was renamed to &lt;code&gt;permanent&lt;/code&gt; a while ago to keep upgrades/migration simpler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8aeeb295a65a77d8dcfdbe10ab985713822f083" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are looking for information about readable streams, try &lt;a href=&quot;using_readable_streams&quot;&gt;Using readable streams&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcbebd1545739b8fe04a4d1ebd03a68ca89da03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are looking for information on writable streams try &lt;a href=&quot;using_writable_streams&quot;&gt;Using writable streams&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b37f87447344454c127bb7d761505f91cbc44d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are using a three-button mouse, you'll notice that the &lt;code&gt;onauxclick&lt;/code&gt; handler is run when either of the non-left mouse buttons are clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57920297688f61052ff48c8aca46e920b513cc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you just want to process audio data, for instance, buffer and stream it but not play it, you might want to look into creating an &lt;a href=&quot;../offlineaudiocontext&quot;&gt;&lt;code&gt;OfflineAudioContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7613dbef3f6b486c5988986b74aa73db5929ffb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you pass in a reference to the form the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot;&gt;request method&lt;/a&gt; specified in the form will be used over the method specified in the open() call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b617dfa1f92b2bfead663d798acdf2f8e2226f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Images can become blurry when scaling up or grainy if they're scaled down too much. Scaling is probably best not done if you've got some text in it which needs to remain legible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20b160ad0bc814ad531e3d7c64d7582c9ce3796" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_audio&quot;&gt;digital audio&lt;/a&gt;, &lt;strong&gt;44,100 &lt;a href=&quot;https://en.wikipedia.org/wiki/Hertz&quot;&gt;Hz&lt;/a&gt;&lt;/strong&gt; (alternately represented as &lt;strong&gt;44.1 kHz&lt;/strong&gt;) is a common &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_frequency&quot;&gt;sampling frequency&lt;/a&gt;. Why 44.1kHz?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bd83689c055710efb0ee45b5b019c9edfde290" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Chrome, logging statements are visible via the &quot;Inspect&quot; interface for the relevant service worker accessed via chrome://serviceworker-internals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b994461f1551acc5bd0af5c75588fe42df9fc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Edge only, calling &lt;code&gt;document.write&lt;/code&gt; more than once in an iframe causes the error SCRIPT70: Permission denied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d94f660aa1f0b8f755128d56911b35c6dd100b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Firefox, &lt;a href=&quot;../web_storage_api&quot;&gt;Web Storage&lt;/a&gt; will soon start to use the same storage management tools too, as described in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f3e51ae852d8d790a4337350570e862601b69f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Firefox, if you wish to ensure durability for some reason (e.g. you're storing critical data that cannot be recomputed later) you can force a transaction to flush to disk before delivering the &lt;code&gt;complete&lt;/code&gt; event by creating a transaction using the experimental (non-standard) &lt;code&gt;readwriteflush&lt;/code&gt; mode (see &lt;a href=&quot;../idbdatabase/transaction&quot;&gt;&lt;code&gt;IDBDatabase.transaction&lt;/code&gt;&lt;/a&gt;.) This is currently experimental, and can only be used if the &lt;code&gt;dom.indexedDB.experimental&lt;/code&gt; pref is set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;about:config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15f7b4fab74aec91d582f62a8235821bdc4242a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Firefox, if you wish to ensure durability for some reason (e.g. you're storing critical data that cannot be recomputed later) you can force a transaction to flush to disk before delivering the &lt;code&gt;complete&lt;/code&gt; event by creating a transaction using the experimental (non-standard) &lt;code&gt;readwriteflush&lt;/code&gt; mode (see &lt;a href=&quot;transaction&quot;&gt;&lt;code&gt;IDBDatabase.transaction&lt;/code&gt;&lt;/a&gt;.) This is currently experimental, and can only be used if the &lt;code&gt;dom.indexedDB.experimental&lt;/code&gt; pref is set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;about:config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c803d732b0bd11c5ad0bbcfbc37b7a8e32cbd49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Firefox, shared workers cannot be shared between documents loaded in private and non-private windows (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1177621&quot;&gt;bug 1177621&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7206ac9733ff2a7abf967862560d2f31c32b006" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Firefox, you can find your profile folder by entering &lt;code&gt;about:support&lt;/code&gt; in the URL bar, and pressing the &lt;em&gt;Show in...&lt;/em&gt; button (e.g., &lt;em&gt;Show in Finder&lt;/em&gt; on Mac OS X) next to the &lt;em&gt;Profile Folder&lt;/em&gt; title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4447eead4f232cae93f4ea4987882423a7dc60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In JavaScript matrix multiplication requires a custom function, while in the shader it is built into the language with the simple * operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35884cae813420c6de7ed697489aacfdd60e5f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL&quot;&gt;XUL&lt;/a&gt; document, it creates the specified XUL element. In other documents, it creates an element with a &lt;code&gt;null&lt;/code&gt; namespace URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eff957c74d29ccbaee75fb28f93fbc29790c9a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In modern browsers, the header names are returned in all lower case, as per the latest spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205564696f384a0b6024d5f8a1908e0b3f546f3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In older browsers, &lt;code&gt;replace()&lt;/code&gt; returns void.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a28846421b853ddcd0744977d66f55d3247045c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In our example the wavetable is held in a separate JavaScript file (&lt;code&gt;wavetable.js&lt;/code&gt;), because there are &lt;em&gt;so&lt;/em&gt; many values. It is taken from a &lt;a href=&quot;https://github.com/GoogleChromeLabs/web-audio-samples/tree/gh-pages/samples/audio/wave-tables&quot;&gt;repository of wavetables, &lt;/a&gt;which can be found in the &lt;a href=&quot;https://github.com/GoogleChromeLabs/web-audio-samples/&quot;&gt;Web Audio API examples from Google Chrome Labs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c606deacfb161ef12a282da42117a12654ea2d00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In private browsing mode, most data storage is not supported. Local storage data and cookies are still stored, but they are ephemeral &amp;mdash; the data is deleted when you close the last private browsing window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec2f65d2790280d1e42ceaf9855d45942dfb652" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In terms of working out what position values to apply to the listener and panner, to make the sound appropriate to what the visuals are doing on screen, there is quite a bit of math involved, but you will soon get used to it with a bit of experimentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d363d98faeddecd2a05de794372e9095ea957221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In this case we've had to specify a &lt;code&gt;readwrite&lt;/code&gt; transaction because we want to write to the database, not just read from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b621e0163a50b7a7b2e7e36c33824a26be2d5743" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: IndexedDB API is powerful, but may seem too complicated for simple cases. If you'd prefer a simple API, try libraries such as &lt;a href=&quot;https://localforage.github.io/localForage/&quot;&gt;localForage&lt;/a&gt;, &lt;a href=&quot;http://www.dexie.org/&quot;&gt;dexie.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/erikolson186/zangodb&quot;&gt;ZangoDB&lt;/a&gt;, &lt;a href=&quot;https://pouchdb.com/&quot;&gt;PouchDB&lt;/a&gt;, and &lt;a href=&quot;http://jsstore.net/&quot;&gt;JsStore&lt;/a&gt; that make IndexedDB more programmer-friendly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5591450e66c385b6c6b17a681b8d39dcd39ed23b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Initial Cache implementations (in both Blink and Gecko) resolve &lt;a href=&quot;add&quot;&gt;&lt;code&gt;Cache.add&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;addall&quot;&gt;&lt;code&gt;Cache.addAll&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;put&quot;&gt;&lt;code&gt;Cache.put&lt;/code&gt;&lt;/a&gt; promises when the response body is fully written to the disk. More recent spec versions state that the browser can resolve the promise as soon as the entry is recorded in the database even if the response body is still streaming in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e61487b59fd00f77892a7593869c66b055cb3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Initial Cache implementations (in both Blink and Gecko) resolve &lt;a href=&quot;cache/add&quot;&gt;&lt;code&gt;Cache.add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cache/addall&quot;&gt;&lt;code&gt;Cache.addAll()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;cache/put&quot;&gt;&lt;code&gt;Cache.put()&lt;/code&gt;&lt;/a&gt; promises when the response body is fully written to storage. More recent versions of the specification state that the browser can resolve the promise as soon as the entry is recorded in the database even if the response body is still streaming in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b689217a938265ca596bb46448e38cd2dcc72b2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It is invalid for both &lt;code&gt;numberOfInputChannels&lt;/code&gt; and &lt;code&gt;numberOfOutputChannels&lt;/code&gt; to be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f032cb19aa638ef4cf4709820c55d60282d2ae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It is unlikely that you'll have multiple VR displays connected to your computer, and this is just a simple demo, so this will do for now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4de9bbea310aacbf565fb92fde9151ac4889eec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It's recommended to use the Web Storage API (&lt;code&gt;setItem&lt;/code&gt;, &lt;code&gt;getItem&lt;/code&gt;, &lt;code&gt;removeItem&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;) to prevent the &lt;a href=&quot;http://www.2ality.com/2012/01/objects-as-maps.html&quot;&gt;pitfalls&lt;/a&gt; associated with using plain objects as key-value stores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44bc8bed56f4a467d0f24aa8a6b389d9b164ef4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: JavaScript 1.8.5 introduced the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;Function.prototype.bind()&lt;/a&gt;&lt;/code&gt; method to set the value of &lt;code&gt;this&lt;/code&gt; for all calls to a given function. This can avoid having to use a wrapper function to set the value of &lt;code&gt;this&lt;/code&gt; in a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b189ba27d813f5074f107215447cf4e79f6fe2bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Just calling &lt;code&gt;history.pushState()&lt;/code&gt; or &lt;code&gt;history.replaceState()&lt;/code&gt; won't trigger a &lt;code&gt;popstate&lt;/code&gt; event. The &lt;code&gt;popstate&lt;/code&gt; event is only triggered by doing a browser action such as a clicking on the back button (or calling &lt;code&gt;history.back()&lt;/code&gt; in JavaScript). And the event is only triggered when the user navigates between two history entries for the same document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45900cd4c535f037f4a9931175741fafa738882f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Like most web storage solutions, IndexedDB follows a &lt;a href=&quot;http://www.w3.org/Security/wiki/Same_Origin_Policy&quot;&gt;same-origin policy&lt;/a&gt;. So while you can access stored data within a domain, you cannot access data across different domains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50e95e5d3b0866ed74bfe27c94f5393190c4b72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Logging statements are visible in Google Chrome via the &quot;Inspect&quot; interface for the relevant service worker accessed via chrome://serviceworker-internals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca22c1c7717218da44e6c8bd2391fdc45d40da3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Messages sent to service worker contexts (e.g. as the event object of &lt;code&gt;onmessage&lt;/code&gt;) are represented by &lt;a href=&quot;../messageevent&quot;&gt;&lt;code&gt;MessageEvent&lt;/code&gt;&lt;/a&gt; objects in modern browsers, for consistency with other web messaging features. (They used to be represented by &lt;a href=&quot;../serviceworkermessageevent&quot;&gt;&lt;code&gt;ServiceWorkerMessageEvent&lt;/code&gt;&lt;/a&gt; objects, which have now been deprecated.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1810a8abe9cc4a209cc8f3b419abae93f0c21fd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Most browsers seem to ignore explicit ltr and rtl settings, and just go with the browser-wide setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a73551a586bce6dcbf5f14a2e93706bd3856e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Mozilla's implementation of &lt;code&gt;confidence&lt;/code&gt; is still being worked on &amp;mdash; at the moment, it always seems to return 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29162587515a44cd2219e983600172251888ab4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Named properties of &lt;a href=&quot;../mimetypearray&quot;&gt;&lt;code&gt;MimeTypeArray&lt;/code&gt;&lt;/a&gt; objects are no longer enumerable in the latest browser versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce749fff00899887bbc2f09eba6c19e9b82c852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Notice that &lt;code&gt;onmessage&lt;/code&gt; and &lt;code&gt;postMessage()&lt;/code&gt; need to be hung off the &lt;code&gt;Worker&lt;/code&gt; object when used in the main script thread, but not when used in the worker. This is because, inside the worker, the worker is effectively the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d07dac983acc252d57f0a0424e4c80a2976ec6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: On Chrome, using Speech Recognition on a web page involves a server-based recognition engine. Your audio is sent to a web service for recognition processing, so it won't work offline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf5fa6c30941ea9fc368ac45330490ab3fd0227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: One great thing about service workers is that if you use feature detection like we&amp;rsquo;ve shown above, browsers that don&amp;rsquo;t support service workers can just use your app online in the normal expected fashion. Furthermore, if you use AppCache and SW on a page, browsers that don&amp;rsquo;t support SW but do support AppCache will use that, and browsers that support both will ignore the AppCache and let SW take over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7867c2a6b22edd6402f88ead443a63ff62e881" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Only certain events can bubble. Events that do bubble have this property set to &lt;code&gt;true&lt;/code&gt;. You can use this property to check if an event is allowed to bubble or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bc10bd466a6c81f32189985c0578eac8118b94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Only returns &lt;code&gt;true&lt;/code&gt; if part of a user interaction. Don't try using the return value to verify browser support before calling a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996cc989c9f500dbd2ab8e01acc8959f5f80e903" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Only the top-level window has a visual viewport that's distinct from the layout viewport. Therefore, it's generally only the &lt;code&gt;VisualViewport&lt;/code&gt; object of the top-level window that's useful. For an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;, visual viewport metrics like &lt;a href=&quot;visualviewport/width&quot;&gt;&lt;code&gt;VisualViewport.width&lt;/code&gt;&lt;/a&gt; always correspond to layout viewport metrics like &lt;a href=&quot;element/clientwidth&quot;&gt;&lt;code&gt;document.documentElement.clientWidth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae6b9cd8cc47165f45bc91fdb99fbcd42e1a38f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Our &lt;a href=&quot;webvr_api/using_vr_controllers_with_webvr&quot;&gt;Using VR controllers with WebVR&lt;/a&gt; article explains the basics of how to use VR controllers with WebVR apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbaef793c6cafa590d0c49f9d4e31845ccf4b94f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Own properties of &lt;code&gt;Plugin&lt;/code&gt; objects are no longer enumerable in the latest browser versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e10901181ac8e0a7c68e9b9a731e201a6e1f839" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Own properties of &lt;code&gt;PluginArray&lt;/code&gt; objects are no longer enumerable in the latest browser versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5277acdab3d20bf1a067d04385e97aa03b60552e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Passing additional parameters to &lt;code&gt;setInterval()&lt;/code&gt; in the first syntax does not work in Internet Explorer 9 and earlier. If you want to enable this functionality on that browser, you must use a polyfill (see the &lt;a href=&quot;#Callback_arguments&quot;&gt;Callback arguments&lt;/a&gt; section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b630768e61b55f90229406cd76ca691f60a6772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Passing additional parameters to the function in the first syntax does not work in Internet Explorer 9 and below. If you want to enable this functionality on that browser, you must use a polyfill (see the &lt;a href=&quot;#Polyfill&quot;&gt;Polyfill&lt;/a&gt; section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaf3ec1a4c80cb8f3f8a4d33ed6bc140017b3a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Please refer to the &lt;a href=&quot;../web_storage_api/using_the_web_storage_api&quot;&gt;Using the Web Storage API&lt;/a&gt; article for a full example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744d00b3b84929951deb360532e8e61c8b987135" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Precision formatting doesn't work in Chrome</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9578d9efa9025b6d460541348c8a6266946333d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Prior to Firefox 48 and Chrome 53 an exception would be thrown for an unknown encoding type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f69c15d0e83c30753a1d277f8a9566680e99814" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Prior to Firefox 48 and Chrome 53, an encoding type label was accepted as a paramer to the &lt;code&gt;TextEncoder&lt;/code&gt; object, since then both browers have removed support for any encoder type other than &lt;code&gt;utf-8&lt;/code&gt;, to match the &lt;a href=&quot;https://www.w3.org/TR/encoding/#dom-textencoder&quot;&gt;spec&lt;/a&gt;. Any type label passed into the &lt;code&gt;TextEncoder&lt;/code&gt; constructor will now be ignored and a &lt;code&gt;utf-8&lt;/code&gt;&lt;code&gt;TextEncoder&lt;/code&gt; will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba06b92d2a838cf7b54e663b2bc2a458a6fcde30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Quite a few CSS properties are supported by this styling; you should experiment and see which ones prove useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486c235a5afd11ee31cc6024ed4c43baafa07334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Range inputs are a really handy input type for updating values on audio nodes. You can specify a range's values and use them directly with the audio node's parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe80ffc2dde2e1e5e606d8422e9b6e7e26acd07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Readers will still be able to read any previously-enqueued chunks from the stream, but once those are read, the stream will become closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc5ae990e35fc17c34a82023e2416e9d1909bb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Requests with duplicate URLs but different headers can be returned if their responses have the &lt;code&gt;VARY&lt;/code&gt; header set on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178c41418f74bfc6330e3d94e5ac7b35c7c1ebb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Scripts may be downloaded in any order, but will be executed in the order in which you pass the filenames into &lt;code&gt;importScripts()&lt;/code&gt; . This is done synchronously; &lt;code&gt;importScripts()&lt;/code&gt; does not return until all the scripts have been loaded and executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27b2321939d401b466288205f626b984f2cfe5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See &lt;a href=&quot;../web_workers_api&quot;&gt;The Web Workers API landing page&lt;/a&gt; for reference documentation on workers and additional guides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0361400f26173dff511efdfd75e56b996f2ec41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture&quot;&gt;Event bubbling and capture&lt;/a&gt; for more information on bubbling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5b7f0a259ad98a63a6222d6ec90e45ec662e83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API&quot;&gt;Using the Permissions API&lt;/a&gt; for further details about obtaining and managing permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a7c4d22b8c036a74b26d874a9c28ed891de7dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://github.com/mdn/webvr-tests/blob/gh-pages/positionsensorvrdevice/index.html&quot;&gt;positionsensorvrdevice demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b336ee73241b091a12e4b283d21d46996b3e7d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/check-user-can-make-payment.html&quot;&gt;Checking user can make payments before prices are known demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d13345bbcff54ca0ce963c2ad44815e7c6b900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/customize-button-can-make-payment.html&quot;&gt;Customizing the payment button demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b5746c0fb7da79df2566c17e397fcadab5d4c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/feature-detect-support.html&quot;&gt;Feature detect support demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e28329b59fa809a3f3644157bd8272923b7c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/pre-authorize-transaction.html&quot;&gt;Pre-authorizing transactions demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71425ef7d821674f078985c467fe058aa5850fb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/recommend-payment-app.html&quot;&gt;Recommending a payment app when user has no apps demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c9abbab9983dbdfa4ae1d84d9fba91c894c3d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See our &lt;a href=&quot;https://mdn.github.io/dom-examples/payment-request/show-additional-ui-after-payment.html&quot;&gt;Show additional user interface after successful payment demo&lt;/a&gt; for the full code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748d26ff9aa75c91444e2336997f92a201fb3abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See the guide &lt;a href=&quot;web_audio_api/visualizations_with_web_audio_api&quot;&gt;Visualizations with Web Audio API&lt;/a&gt; for more information on creating audio visualizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27f1a2ba4ef6ac439b0b4ddf44e26c0a820ab48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Service Workers win over previous attempts in this area such as; &lt;a href=&quot;http://alistapart.com/article/application-cache-is-a-douchebag&quot;&gt;AppCache&lt;/a&gt; because they don't make assumptions about what you are trying to do, and then break when those assumptions are not exactly right; you have granular control over everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f39e14de602b50ef4a5af4d89697a8b2005592d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Service workers make heavy use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;promises&lt;/a&gt;, as generally they will wait for responses to come through, after which they will respond with a success or failure action. The promises architecture is ideal for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d5fa55032f41a2e46ac19e233194e7b20f29ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Sigmoid functions are commonly used for distortion curves because of their natural properties. Their S-shape, for instance, helps create a smoother sounding result. We found the below distortion curve code on &lt;a href=&quot;http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion&quot;&gt;Stack Overflow&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c68d7058fb48c7a5ae117f98cea51a4f4a726a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Since this function treats each character as a byte of binary data, regardless of the number of bytes which actually make up the character, an &lt;code&gt;InvalidCharacterError&lt;/code&gt; exception is thrown if any character's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/code_point&quot;&gt;code point&lt;/a&gt; is outside the range 0x00 to 0xFF. See &lt;a href=&quot;#Unicode_strings&quot;&gt;Unicode strings&lt;/a&gt; for an example demonstrating how to encode strings with characters outside the 0x00 to 0xFF range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a774eb93e0eb5453170be3511b4cfb2a301c2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting in 55, Chrome will not execute &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements injected via &lt;code&gt;document.write()&lt;/code&gt; in case of an HTTP cache miss for users on a 2G connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a7a4c37556b6c7afbcb9ebbc4ac607ff59e17c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting with Chromium 58 this method only appears in Chromium browser consoles when level &quot;Verbose&quot; is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1727f033cabb9565e6c09a24156c2e82b03fc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting with Firefox 44, this feature can only be used with chrome privileges. If content attempts to toggle this feature, it will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc867a6c71479887dbba63669e4204e207adba7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting with Mozilla 1.2.1, this feature requires the &lt;code&gt;UniversalBrowserWrite&lt;/code&gt; privilege (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=180048&quot;&gt;bug 180048&lt;/a&gt;). Without this privilege, it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfb2acdf2985e599a1873ab62617a94f91664c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the &lt;code&gt;UniversalBrowserWrite&lt;/code&gt; privilege (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=244965&quot;&gt;bug 244965&lt;/a&gt;). Without this privilege, it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde443e7a3b8104b68b69cd59a3f51cf603221f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting with version 1.4, Mozilla-based browsers have a window resizing grippy at the right end of the status bar, this ensures that users can resize the browser window even if the web author requested this secondary window to be non-resizable. In such case, the maximize/restore icon in the window's titlebar will be disabled and the window's borders won't allow resizing but the window will still be resizable via that grippy in the status bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7500d3912819f8fafeec0b64d4cdc49426ee4411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;a href=&quot;body&quot;&gt;&lt;code&gt;Body&lt;/code&gt;&lt;/a&gt; functions can be run only once; subsequent calls will resolve with empty strings/ArrayBuffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cd480d6669dacb8344c52dc2ad3250ab3db70a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element above is represented in the DOM by an object of type &lt;a href=&quot;../htmlmediaelement&quot;&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt;&lt;/a&gt;, which comes with its own set of functionality. All of this has stayed intact; we are merely allowing the sound to be available to the Web Audio API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38605c6a1765779489c22135590273734aa8bf9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;CompositionEventInit&lt;/code&gt; dictionary inherits from the &lt;a href=&quot;../uievent/uievent&quot;&gt;&lt;code&gt;UIEventInit&lt;/code&gt;&lt;/a&gt; dictionary, so can also accept members defined on there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa66109d04a243df5954f7a326e9affb101b1a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;PointerEventInit&lt;/code&gt; dictionary also accepts fields from the &lt;a href=&quot;../mouseevent/mouseevent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../uievent/uievent&quot;&gt;&lt;code&gt;UIEventInit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../event/event&quot;&gt;&lt;code&gt;EventInit&lt;/code&gt;&lt;/a&gt; dictionaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d6f877930c4872b809496741b4fa436431625c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;canvasReference&lt;/code&gt; refers to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element itself, not the WebGL context associated with the canvas. The other two members are arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867f1728a0ac973801c84037ce2aca8867150aed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;delay&lt;/code&gt; parameter is converted to a signed 32-bit integer. This effectively limits &lt;code&gt;delay&lt;/code&gt; to 2147483647 ms, since it's specified as a signed integer in the IDL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fad99dd1f32803c61f824cbba5f4cfede30548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;fetch()&lt;/code&gt; method's parameters are identical to those of the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6a7f411515681bf16c0d6daf608ac8fe7e426d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;onnomatch&lt;/code&gt; handler does not yet work properly in Firefox &amp;mdash; the speech recognition system always returns a positive match, and then guesses at what item in the grammar it found. This is being worked on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cc54ab24ff88b0980bff22830a6f41bc0f327f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;resume()&lt;/code&gt; method is still available &amp;mdash; it is now defined on the &lt;a href=&quot;baseaudiocontext&quot;&gt;&lt;code&gt;BaseAudioContext&lt;/code&gt;&lt;/a&gt; interface (see &lt;a href=&quot;baseaudiocontext/resume&quot;&gt;&lt;code&gt;BaseAudioContext.resume()&lt;/code&gt;&lt;/a&gt;) and thus can be accessed by both the &lt;a href=&quot;audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;offlineaudiocontext&quot;&gt;&lt;code&gt;OfflineAudioContext&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1a722c66ffce3d879b129e57d7e5c9891bd8e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The API is available inside cross-origin &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; elements only if they have had the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest&quot;&gt;allowpaymentrequest&lt;/a&gt;&lt;/code&gt; attribute set on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdf33c9ee9ea7235855101425f13f74769b6f40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Body mixin also has similar methods to extract other types of body content; see the &lt;a href=&quot;#Body&quot;&gt;Body&lt;/a&gt; section for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b34b02a04e8c7f3be05a2b2e5dddcf607e2422" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Cache API is not supported in every browser. (See the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section for more information.) If you want to use this now, you could consider using a polyfill like the one available in &lt;a href=&quot;https://github.com/Polymer/topeka/blob/master/sw.js&quot;&gt;Google's Topeka demo&lt;/a&gt;, or perhaps store your assets in &lt;a href=&quot;../indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f366b2dd4f5a11b08a63e08b33b37f80e6fb3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Selection API methods may move focus only to an editing host, not to other focusable elements (e.g. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e757aeb406c07afb9a939c818ec3916e3bfc30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Web Audio API comes with two types of filter nodes: &lt;a href=&quot;../biquadfilternode&quot;&gt;&lt;code&gt;BiquadFilterNode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../iirfilternode&quot;&gt;&lt;code&gt;IIRFilterNode&lt;/code&gt;&lt;/a&gt;. For the most part a biquad filter will be good enough &amp;mdash; it comes with different types such as lowpass, highpass, and bandpass. If you're looking to do something more bespoke, however, the IIR filter might be a good option &amp;mdash; see &lt;a href=&quot;using_iir_filters&quot;&gt;Using IIR filters&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2e0b61696616cf8f09e62e84c820b7299c161f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Web Audio editor is not enabled by default. To display it, you need to go into the Firefox developer tools settings and check the &lt;em&gt;Web Audio&lt;/em&gt; checkbox in the &lt;em&gt;Default Developer Tools&lt;/em&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ecbaaf4d4927376046c16e032bbf6ccb56abd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The WebVR API's most stable version &amp;mdash; 1.1 &amp;mdash; has recently been implemented in Firefox 55 (Windows in release version, and Mac OS X on Nightly only) and is also available in Chrome when used with Google Daydream hardware. There is also a later evolution of the spec &amp;mdash; 2.0 &amp;mdash; but this is at an early stage right now. You can find information on the latest state of the specs at &lt;a href=&quot;https://w3c.github.io/webvr/&quot;&gt;WebVR Spec Version List&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b812eca599c113c151849068bbcfc4e9a7d760" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The array can be a &lt;code&gt;null&lt;/code&gt; value: in that case, no distortion is applied to the input signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554068376771c4c3a4dd764dc0a9396b428f8724" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The behaviour described in the above paragraph was fixed in Firefox 43 (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1189644&quot;&gt;bug 1189644&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e198402d9733392026c96b758afa8568cae2002c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The behaviour described in the above paragraph was fixed in Firefox 43 (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1189644&quot;&gt;bug 1189644&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b0114b80782707ab6579a2eb5e051706a5ac7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The code for each WebGLBox example is available in this &lt;a href=&quot;https://github.com/TatumCreative/mdn-model-view-projection/tree/master/lessons&quot;&gt;github repo&lt;/a&gt; and is organized by section. In addition there is a JSFiddle link at the bottom of each section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b77e6e56920606da062047b1c4576ed2fb07af0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The code snippets from this section are from our &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/payment-request/feature-detect-support.html&quot;&gt;Feature detect support demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cf897ce4d50ffb01af46f45ad3784c4f13d4d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The constructor method of creating nodes is not supported by all browsers at this time. The older factory methods are supported more widely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82afc0bcba4d4e0a3c9f8e71ecdac736bf511a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The entire bitmap is loaded regardless of what size is specified in the constructor. If any size is specified in the constructor it will be reflected through the properties &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width&quot;&gt;&lt;code&gt;HTMLImageElement.width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height&quot;&gt;&lt;code&gt;HTMLImageElement.height&lt;/code&gt;&lt;/a&gt; of the resulting instance. The intrinsic width and height of the image in CSS pixels is reflected through the properties &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth&quot;&gt;&lt;code&gt;HTMLImageElement.naturalWidth&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight&quot;&gt;&lt;code&gt;HTMLImageElement.naturalHeight&lt;/code&gt;&lt;/a&gt;. If no size is specified in the constructor both pairs of these properties will have the same values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5f85b4ea6cea5cab920a390202d577a9211d3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The examples listed in this article have shown usage of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData&quot;&gt;&lt;code&gt;AnalyserNode.getByteFrequencyData()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../analysernode/getbytetimedomaindata&quot;&gt;&lt;code&gt;AnalyserNode.getByteTimeDomainData()&lt;/code&gt;&lt;/a&gt;. For working examples showing &lt;a href=&quot;../analysernode/getfloatfrequencydata&quot;&gt;&lt;code&gt;AnalyserNode.getFloatFrequencyData()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData&quot;&gt;&lt;code&gt;AnalyserNode.getFloatTimeDomainData()&lt;/code&gt;&lt;/a&gt;, refer to our &lt;a href=&quot;http://mdn.github.io/voice-change-o-matic-float-data/&quot;&gt;Voice-change-O-matic-float-data&lt;/a&gt; demo (see the &lt;a href=&quot;https://github.com/mdn/voice-change-o-matic-float-data&quot;&gt;source code&lt;/a&gt; too) &amp;mdash; this is exactly the same as the original &lt;a href=&quot;http://mdn.github.io/voice-change-o-matic/&quot;&gt;Voice-change-O-matic&lt;/a&gt;, except that it uses Float data, not unsigned byte data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bd2f9066825aa6054b3e87c2d69c37db97c96c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The experience is much better if you use headphones, or have some kind of surround sound system to plug your computer into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675223d63ff2cdc01b97af51119ee6db079829f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The fragmented version is slightly larger than the original, due to additional metadata spread throughout the file. This is usually a file size increase of 1 percent or less.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9931370a1540c961eb7596da5e88281a831263a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The group limit can't be more than the global limit, despite the minimum group limit mentioned above. If you had a really low memory situation where the global limit was, say, 8 MB, then the group limit would also be 8 MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827d6715a075226489b657dccbe24699c5d75f45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The identifier &lt;code&gt;&quot;experimental-webgl&quot;&lt;/code&gt; is used in new implementations of WebGL. These implementations have either not reached test suite conformance, or the graphics drivers on the platform are not yet stable. The &lt;a href=&quot;https://www.khronos.org/&quot;&gt;Khronos Group&lt;/a&gt; certifies WebGL implementations under certain &lt;a href=&quot;https://www.khronos.org/registry/webgl/sdk/tests/CONFORMANCE_RULES.txt&quot;&gt;conformance rules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdaaeb054f013d92afea6c7216659efc6ca7bb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The information below should be fairly accurate for most modern browsers, but browser specifics are called out where known. Opera and Chrome should behave the same in all cases. &lt;a href=&quot;http://www.opera.com/mobile/mini&quot;&gt;Opera Mini&lt;/a&gt; (still presto-based, server-side rendering) doesn't store any data on the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7517d64b2d1b7803057ffac6bbadaf7847c38d8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The key matching algorithm depends on the &lt;a href=&quot;https://www.fastly.com/blog/best-practices-for-using-the-vary-header&quot;&gt;VARY header&lt;/a&gt; in the value. So matching a new key requires looking at both key and value for entries in the Cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd26febebee359b8607fd5b173d477ff0eeaacd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The matching is done using depth-first pre-order traversal of the document's nodes starting with the first element in the document's markup and iterating through sequential nodes by order of the number of child nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa45255791aab37cf3af2c5091c063dadaf7943d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The message payload is available in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; event's &lt;code&gt;data&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd7686776a2d5d2d71138e7de72270bfec0f715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The minimum delay, &lt;code&gt;DOM_MIN_TIMEOUT_VALUE&lt;/code&gt;, is 4 ms (stored in a preference in Firefox: &lt;code&gt;dom.min_timeout_value&lt;/code&gt;), with a &lt;code&gt;DOM_CLAMP_TIMEOUT_NESTING_LEVEL&lt;/code&gt; of 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313492ddbb64597ba77e154262f223fb54811a41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The new &lt;code&gt;ConstantSourceNode&lt;/code&gt; created by the constructor has a &lt;code&gt;&lt;a href=&quot;../audionode/channelcount&quot;&gt;channelCount&lt;/a&gt;&lt;/code&gt; of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c3e1e6771f87ccc7ba1fed28717d53bc40b758" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The parameter is &lt;em&gt;a-rate&lt;/em&gt; when used with a &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; whose &lt;a href=&quot;../pannernode/panningmodel&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; is set to equalpower, or &lt;em&gt;k-rate&lt;/em&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6890886f0cb2f812fb166668ecf3bb63915252c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The parameter is &lt;em&gt;a-rate&lt;/em&gt; when used with a &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; whose &lt;a href=&quot;../pannernode/panningmodel&quot;&gt;&lt;code&gt;panningModel&lt;/code&gt;&lt;/a&gt; is set to equalpower, or &lt;em&gt;k-rate&lt;/em&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eb3ee4e6ff339192289f852b1a5fa6390d2aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The promise will reject with a &lt;code&gt;TypeError&lt;/code&gt; if the URL scheme is not &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95205aada799bfc23d5902c060e7275c5f10f43f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The sound file was &lt;a href=&quot;http://soundbible.com/1573-DTMF-Tones.html&quot;&gt;sourced from soundbible.com&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a232bec9f5cecf6df28e8495c902812c98e68c64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The spec wrongly lists this method as returning as a &lt;code&gt;SpeechSynthesisVoiceList&lt;/code&gt; object, but this was in fact removed from the spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bb8023e13ec58494878a6dbc1add82a44e1b48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The static method &lt;a href=&quot;../response/error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt; simply returns an error response. Similarly, &lt;a href=&quot;../response/redirect&quot;&gt;&lt;code&gt;redirect()&lt;/code&gt;&lt;/a&gt; returns a response resulting in a redirect to a specified URL. These are also only relevant to Service Workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ffed44c9101064927b23b77b8ad35f3ab99afb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The user can potentially see all the way around them, which is a brand new concept for apps and games. Try to give people a reason to look around and see what's behind them &amp;mdash; make them reach out and find things that are not visible at the very beginning. Describe what's behind their backs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a20c04310309e8e2dfad85c9a8b7a29982be29f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The values of node objects (e.g. &lt;code&gt;GainNode.gain&lt;/code&gt;) are not simple values; they are actually objects of type &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; &amp;mdash; these called parameters. This is why we have to set &lt;code&gt;GainNode.gain&lt;/code&gt;'s &lt;code&gt;value&lt;/code&gt; property, rather than just setting the value on &lt;code&gt;gain&lt;/code&gt; directly. This enables them to be much more flexible, allowing for passing the parameter a specific set of values to change between over a set period of time, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a50910da83c0df2735fddec96bdcfcbece6830" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are slight differences in the way the audio spatialization sounds across different browsers. The panner node does some very involved maths under the hood; there are a &lt;a href=&quot;https://wpt.fyi/results/webaudio/the-audio-api/the-pannernode-interface?label=stable&amp;amp;aligned=true&quot;&gt;number of tests here&lt;/a&gt; so you can keep track of the status of the inner workings of this node across different platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c2b5dd693441f833e9e069e642901ce86e0a9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is a polyfill implementation to support all the legacy encodings in &lt;a href=&quot;https://github.com/inexorabletash/text-encoding&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15a265f16db650793b67ceefaed242ff654c3c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;a href=&quot;../request/clone&quot;&gt;&lt;code&gt;clone()&lt;/code&gt;&lt;/a&gt; method that creates a copy. Both methods of creating a copy will fail if the body of the original request or response has already been read, but reading the body of a cloned response or request will not cause it to be marked as read in the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58752c64aab29e0644dd1c78cfd5c317a43d7ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a way to stop the worker from the main thread: the &lt;a href=&quot;../worker/terminate&quot;&gt;&lt;code&gt;Worker.terminate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0deab8c02f61342394c0d165436f10d3ab9c0393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There's also a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt; designed to deal with the common use case of creating simple left and right stereo panning effects. This is much simpler to use, but obviously nowhere near as versatile. If you just want a simple stereo panning effect, our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) should give you everything you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4155003d43253c8eb0342775cfcf369e8a879011" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: These two replacements will also enable the HTML5 standard passage of arbitrary arguments to the callback functions of timers in IE. So they can be used as polyfills also. See the &lt;a href=&quot;#Callback_arguments&quot;&gt;Callback arguments&lt;/a&gt; paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f1ec172b69b42f2f63f7306d93076dcb4f8af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: These values are calculated based on the lowpass filter specified in the &lt;a href=&quot;https://webaudio.github.io/web-audio-api/#filters-characteristics&quot;&gt;filter characteristics of the Web Audio API specification&lt;/a&gt;. As this filter node gains more popularity we should be able to collate more coefficient values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4bbbede884c2a2e7a12c10e1bc0b7d6e3965c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Third party window content (e.g. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; content) can access the IndexedDB store for the origin it is embedded into, unless the browser is set to &lt;a href=&quot;https://support.mozilla.org/en-US/kb/disable-third-party-cookies&quot;&gt;never accept third party cookies&lt;/a&gt; (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1147821&quot;&gt;bug 1147821&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011f223881c094aa2381b27415899475adc27ce1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This API is currently implemented for &lt;a href=&quot;../webglrenderingcontext&quot;&gt;WebGL1&lt;/a&gt; and &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;WebGL2&lt;/a&gt; contexts only. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=801176&quot;&gt;bug 801176&lt;/a&gt; for &lt;a href=&quot;../canvas_api&quot;&gt;Canvas 2D API&lt;/a&gt; support from workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfd2ff0068f50fcff432bea316a01eb3c23639c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This article assumes that you understand the use cases of readable streams, and are aware of the high-level concepts. If not, we suggest that you first read the &lt;a href=&quot;../streams_api#Concepts_and_usage&quot;&gt;Streams concepts and usage overview&lt;/a&gt; and dedicated &lt;a href=&quot;concepts&quot;&gt;Streams API concepts&lt;/a&gt; article, then come back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97b1d6a24c45f690cc3e7bbdf5a8c36c0aaebc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This article assumes that you understand the use cases of writable streams, and are aware of the high-level concepts. If not, we suggest that you first read the &lt;a href=&quot;../streams_api#Concepts_and_usage&quot;&gt;Streams concepts and usage overview&lt;/a&gt; and dedicated &lt;a href=&quot;concepts&quot;&gt;Streams API concepts&lt;/a&gt; article, then come back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cea637552ee2fbdf4684516266e84c1696c078" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This article is also available as an &lt;a href=&quot;https://github.com/TatumCreative/mdn-model-view-projection&quot;&gt;MDN content kit&lt;/a&gt;. It also uses a collection of &lt;a href=&quot;https://github.com/TatumCreative/mdn-webgl&quot;&gt;utility functions&lt;/a&gt; available under the MDN global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0cb666624e24c9c747fadf7f0d26dbeaff84aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This can be set when the notification is first created by setting the &lt;code&gt;requireInteraction&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; in the options object of the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification.Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a43bee89792332ccb52678f9cd5ca3fd741e657" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This example is obviously somewhat contrived, since normally the two &lt;code&gt;RTCPeerConnection&lt;/code&gt; objects would exist on different devices, and signaling would be done over the network instead of it all being simply linked up inline as it is here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575978c41eeb4b774296a33d9be028dad52aae5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This feature has been deprecated, with its functionality replaced by &lt;a href=&quot;clientid&quot;&gt;&lt;code&gt;FetchEvent.clientId&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../clients/get&quot;&gt;&lt;code&gt;Clients.get()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;https://github.com/slightlyoff/ServiceWorker/issues/723#issuecomment-123516555&quot;&gt;this Github issue&lt;/a&gt; for discussion/background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bca170dae86ee16326396b86c296e8eb2116dc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This feature is available in &lt;a href=&quot;../web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f702239251e1cc0465c21a2694207d815ac06e24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This feature is available in &lt;a href=&quot;web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bf99077d95bae150208c0051f58d7fd86e3642" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This feature is currently hidden behind a flag &amp;mdash; to enable it and experiment, go to &lt;a&gt;about:config&lt;/a&gt; and enable &lt;code&gt;dom.indexedDB.experimental&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb21ea4b364de7498d9d41dfbaf81273cd55464" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This functionality isn't fully thought through yet, or available in many browsers. At some point the spec writers hope to add something like a &lt;code&gt;TransformStream&lt;/code&gt; class to make creating transform streams easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b82877a44518f8d0617a016357b5a5f479a54f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This instrument was not created to sound good, it was created to provide demonstration code and represents a &lt;em&gt;very&lt;/em&gt; simplified version of such an instrument. The sounds are based on a dial-up modem. If you are unaware of how one sounds you can &lt;a href=&quot;https://soundcloud.com/john-pemberton/modem-dialup&quot;&gt;listen to one here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f8f3a2d89872c487aab071c4641a11995da715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This interface is marked as deprecated; it is still supported for legacy reasons, but it will soon be superseded when the promise version of &lt;a href=&quot;offlineaudiocontext/startrendering&quot;&gt;&lt;code&gt;OfflineAudioContext.startRendering&lt;/code&gt;&lt;/a&gt; is supported in browsers, which will no longer need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd7fd342ff48cdf09eca06844eb30ecd39db55b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This interface is only available when the global scope is a &lt;a href=&quot;serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;. It is not available when it is a &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;, or the scope of another kind of worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ea873250166fb6ea7b632e7c1c4e19496b26b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This interface is specified in the &lt;a href=&quot;notifications_api&quot;&gt;Notifications API&lt;/a&gt;, but accessed through &lt;a href=&quot;serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731d3c242ab63feabe1541ed04b84ea078f95f83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This interface replaces functionality previously offered by the obsolete &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushRegistrationManager&quot;&gt;&lt;code&gt;PushRegistrationManager&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b9fe1ba968c0fd58d84827fd2f3fa7891b1db6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is a much stripped down version of &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/audio/scheduling/&quot;&gt;Chris Wilson's A Tale Of Two Clocks&lt;/a&gt; article, which goes into this method in much more detail. There's no point repeating it all here, but it's highly recommended to read this article and use this method. Much of the code here is taken from his &lt;a href=&quot;https://github.com/cwilso/metronome/blob/master/js/metronome.js&quot;&gt;metronome example&lt;/a&gt;, which he references in said article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4971da15e11b72478cc576860233fba9b94f9862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is mainly relevant to &lt;a href=&quot;../service_worker_api&quot;&gt;ServiceWorkers&lt;/a&gt;; the error method is used to return an error if you so wish it. An error response has its &lt;a href=&quot;type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf89706348a2643fa121498dff762013e13d56b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is mainly relevant to &lt;a href=&quot;../service_worker_api&quot;&gt;service workers&lt;/a&gt;. If a user submits a form and a service worker intercepts the request, you could for example call &lt;code&gt;formData()&lt;/code&gt; on it to obtain a key-value map, modify some fields, then send the form onwards to the server (or use it locally).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce78778696f328f54545aa2fe20b0cfccc8f317" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is mainly relevant to the &lt;a href=&quot;../service_worker_api&quot;&gt;ServiceWorker API&lt;/a&gt;. A controlling service worker could intercept a page's request and redirect it as desired. This will actually lead to a real redirect if a service worker sends it upstream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6918e6fc9f84106ce813fda4e7fb4b840e05ca78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This last usage is probably only useful in &lt;a href=&quot;../service_worker_api&quot;&gt;ServiceWorkers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053543bdc7bd9bd1ca6dff635dc02a0b6777c69f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method is available in &lt;a href=&quot;../web_workers_api&quot;&gt;Web Workers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5457ca6260980666faa2fa338007a28331af6e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This property is not currently supported in any browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac09a381dabfb5f2752175572e490b8e9d06450f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This property was formerly named &lt;code&gt;scoped&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e969d9d33deac8e9d72edc3e060d64d880ff6c94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Though the &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; returned is read-only, the value it represents is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598a5b2e294aa51291b8796c6acd94938644bf81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Though the &lt;code&gt;AudioParam&lt;/code&gt; returned is read-only, the value it represents is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4e8c1c93bc37cec61816689e1fd7bdfceb28b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To be clear, the difference between &lt;a href=&quot;headers/set&quot;&gt;&lt;code&gt;Headers.set()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;headers/append&quot;&gt;&lt;code&gt;Headers.append()&lt;/code&gt;&lt;/a&gt; is that if the specified header does already exist and does accept multiple values, &lt;a href=&quot;headers/set&quot;&gt;&lt;code&gt;Headers.set()&lt;/code&gt;&lt;/a&gt; will overwrite the existing value with the new one, whereas &lt;a href=&quot;headers/append&quot;&gt;&lt;code&gt;Headers.append()&lt;/code&gt;&lt;/a&gt; will append the new value onto the end of the set of values. See their dedicated pages for example code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae496a1f3287d612d177da50820058dacbcd4a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To find out more about basic JavaScript and WebGL, consult our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript&quot;&gt;JavaScript learning material&lt;/a&gt;, and our &lt;a href=&quot;../webgl_api/tutorial&quot;&gt;WebGL Tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80861242f31c33d4ef9e7d76fe2f371e4232397a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To find out more about using notifications in your own app, read &lt;a href=&quot;notifications_api/using_the_notifications_api&quot;&gt;Using the Notifications API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241ee15586a7a2a57910e56bf9968a01413e884e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To get a time in seconds from a frame count, simply divide the number of frames by the sample rate. To get a number of frames from a number of samples, simply divide by the channel count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2392f48b5d46117a47a9098a58116bc7815f0a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To see this running as a complete working example, see our &lt;a href=&quot;https://mdn.github.io/dom-examples/web-storage/&quot;&gt;Web Storage Demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ab89cf81d194400cb3a6d32ed66a771b86cf90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: To see this used within a real world example, see our &lt;a href=&quot;https://mdn.github.io/dom-examples/web-storage/&quot;&gt;Web Storage Demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af4d798ec17a0c0b4d7a65e78127d8c03cfce08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Trying to create a notification inside the &lt;a href=&quot;../serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../notification/notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef0a74daf9ca8c36c366a25971471727d5b07e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Use &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Headers.get&lt;/code&gt;&lt;/a&gt; to return only the first value added to the &lt;code&gt;Headers&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91152469eb61235b9b7100e571c40092927cb525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: User agents may provide emulated position values through techniques such as neck modeling; when doing so they should still report &lt;a href=&quot;../vrdisplaycapabilities/hasposition&quot;&gt;&lt;code&gt;VRDisplayCapabilities.hasPosition&lt;/code&gt;&lt;/a&gt; as false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1a23b16d2534cc9a8d4c384d02736bcac6b1e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: User interaction propagates to the Promise returned by both of these methods, allowing the callers to take actions that require user interaction without requiring a second click from the user. For example, a caller could open a pop-up window from the resolved Promise without triggering Firefox&amp;rsquo;s pop-up blocker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857ce39e2262688e4b56e8e2256878b3c4274a77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Users shouldn&amp;rsquo;t add their own directories or files under &lt;code&gt;&amp;lt;profile&amp;gt;/storage&lt;/code&gt;. This will cause storage initialization to fail; for example, &lt;a href=&quot;../idbfactory/open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; will fire an error event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffd16c78be757c5d024066cc3b925fdf8cbe002" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: We also don't have to use the default wave types for either of these oscillators we're creating &amp;mdash; we could use a wavetable and the periodic wave method as we did before. There is a multitude of possibilities with just a minimum of nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53182da966d1a9064b705501a7b318709afa2c5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: We can call &lt;code&gt;stop()&lt;/code&gt; on an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;, however, this will happen automatically when the sample has finished playing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b054fa4657a10b451a37ddf71b96111a947369" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: We need to take into account the new autoplay policy that modern browsers have, which calls for a user gesture before media can play (see Chrome's &lt;a href=&quot;https://developers.google.com/web/updates/2017/09/autoplay-policy-changes&quot;&gt;Autoplay Policy Changes&lt;/a&gt;, for example). This has been implemented because autoplaying media is really bad for many reasons &amp;mdash; it is annoying and intrusive at the very least, and also causes accessibility problems. This is accounted for by our play/pause button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ac5055e443ea9b1d8678d9e8d3c32d36aaab2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: We'll talk about the property &lt;a href=&quot;../baseaudiocontext/currenttime&quot;&gt;&lt;code&gt;BaseAudioContext.currentTime&lt;/code&gt;&lt;/a&gt; later, so don't worry if you're unsure of it for now. All you really need to know is that it returns the time we are at right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccdea9e206f6287c8da03a9c590eda88d594059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: What happens in the case of zero or negative desired size hasn&amp;rsquo;t really been defined in the spec so far. Patience is a virtue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9db78410fb6228283c00566cfc9b437fe5ef4b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When &lt;code&gt;abort()&lt;/code&gt; is called, the &lt;code&gt;fetch()&lt;/code&gt; promise rejects with an &lt;code&gt;AbortError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f27a6cb042da0e4a67cde2c0a1373254f3e5b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When Header values are iterated over, they are automatically sorted in lexicographical order, and values from duplicate header names are combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c82d973c3c886b217d87cd182c1a6734e62e5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When a message is passed between the main thread and worker, it is copied or &quot;transferred&quot; (moved), not shared. Read &lt;a href=&quot;#Transferring_data_to_and_from_workers_further_details&quot;&gt;Transferring data to and from workers: further details&lt;/a&gt; for a much more thorough explanation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0508e27368120e0237e08360c021db59c9b4333b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When testing, setting a weird/tiny field of view can really mess up your view. It is a good idea to grab the current field of view first (using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/currentFieldOfView&quot;&gt;&lt;code&gt;VREyeParameters.currentFieldOfView&lt;/code&gt;&lt;/a&gt;) before making any drastic changes, so you can reset it afterwards if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2553056ee9e7da60f0ce2dc3e673c4e7116741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When using the &lt;code&gt;start()&lt;/code&gt; method to open the port connection, it needs to be called from both the parent thread and the worker thread if two-way communication is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e229642a708cd3551f47909b69238e00bfafeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When you receive a &quot;close&quot; event, there is no guarantee that it's the user who closed the notification. This is in line with the specification, which states: &quot;When a notification is closed, either by the underlying notifications platform or by the user, the close steps for it must be run.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acc3bc8ce143ae5b07ab73938f9dd66dac4338f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: While the DTMF is not sent to the remote peer as audio, browsers may choose to play the corresponding tone to the local user as part of their user experience, since users are typically used to hearing their phone play the tones audibly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cbf492efa17d814bd10f5cf5dca0e6435e1ff6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Why -1 to 1? When outputting sound to a file or speakers we need to have a number to represent 0db full scale &amp;mdash; the numerical limit of the fixed point media or DAC. In floating point audio, 1 is a convenient number to map to &quot;full scale&quot; for mathematical operations on signals, so oscillators, noise generators and other sound sources typically output bipolar signals in the range -1 to 1. A browser will clamp values outside this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491ed96f29ce3c7db6c49fb95bbe38a193183c2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can &lt;a href=&quot;https://mdn.github.io/webaudio-examples/create-media-stream-destination/index.html&quot;&gt;view this example live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/create-media-stream-destination/index.html&quot;&gt;study the source code&lt;/a&gt;, on Github.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786bf78f043a04ce04daccf3f070bb1559e9d59b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can &lt;a href=&quot;https://mdn.github.io/webaudio-examples/decode-audio-data/&quot;&gt;run the example live&lt;/a&gt; (or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/decode-audio-data&quot;&gt;view the source&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33973e98000d1fbe15be8777224a8a8e8ea4b1ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also &lt;a href=&quot;http://mdn.github.io/webaudio-examples/media-source-buffer/&quot;&gt;view this example running live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/media-source-buffer&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1c9237c31bd8ce52e0750ff15b005230180659" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-buffer/&quot;&gt;run the code live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-buffer/index.html&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7265d34a7f7ed4b6981f138aee6dcff068392b72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also chain promise calls together, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347a380444b4bdda23a273b24d303f2e3baed984" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also specify a minimum and maximum power value for the fft data scaling range, using &lt;a href=&quot;../analysernode/mindecibels&quot;&gt;&lt;code&gt;AnalyserNode.minDecibels&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../analysernode/maxdecibels&quot;&gt;&lt;code&gt;AnalyserNode.maxDecibels&lt;/code&gt;&lt;/a&gt;, and different data averaging constants using &lt;a href=&quot;../analysernode/smoothingtimeconstant&quot;&gt;&lt;code&gt;AnalyserNode.smoothingTimeConstant&lt;/code&gt;&lt;/a&gt;. Read those pages to get more information on how to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbc590e26271d6440f6cb61059e853ce428f5cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can easily modify the above function to take an array of files and loop over them to load more than one sample. This would be very handy for more complex instruments, or gaming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c415c90d6b7d842d9f26557fdd60a86fd3cbf84b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find a full example on GitHub &amp;mdash; see &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/server-sent-events&quot;&gt;Simple SSE demo using PHP.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2bf54e6f69dce89a3d1b7e1ec805219b4afb58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find a full example that uses the code shown in this article on GitHub &amp;mdash; see &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/server-sent-events&quot;&gt;Simple SSE demo using PHP.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d918196f552b4a3684bb03dc287498f82ce3738" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find a lot more details about the theory and practice of streams in our articles &amp;mdash; &lt;a href=&quot;streams_api/concepts&quot;&gt;Streams API concepts&lt;/a&gt;, &lt;a href=&quot;streams_api/using_readable_streams&quot;&gt;Using readable streams&lt;/a&gt;, and &lt;a href=&quot;streams_api/using_writable_streams&quot;&gt;Using writable streams&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1f09133b9eac3b3b98c6b9215978cefc6d16a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find a lot more out about how the API works in our &lt;a href=&quot;webvr_api/using_the_webvr_api&quot;&gt;Using the WebVR API&lt;/a&gt; and &lt;a href=&quot;webvr_api/concepts&quot;&gt;WebVR Concepts&lt;/a&gt; articles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272510067308c7637f61bf5ff7d9756bd9dda1f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find a lot more out about promises by reading Jake Archibald&amp;rsquo;s excellent &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot;&gt;JavaScript Promises: there and back again&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68661dd078fb6f1f8182674f5e0389333ac8c97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find out more information on the different available storage types, and how Firefox handles client-side data storage, at &lt;a href=&quot;../indexeddb_api/browser_storage_limits_and_eviction_criteria&quot;&gt;Browser storage limits and eviction criteria&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa505fea5678dee59b9b935a715f8ebc0527d43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find the &lt;a href=&quot;https://github.com/mdn/webvr-tests/tree/master/raw-webgl-example&quot;&gt;source code of our demo&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webvr-tests/raw-webgl-example/&quot;&gt;view it live&lt;/a&gt; also.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c926a24e6c18cbd462985105319c42896c1bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find the source code on GitHub as &lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/step-sequencer&quot;&gt;step-sequencer&lt;/a&gt;; see the &lt;a href=&quot;https://mdn.github.io/webaudio-examples/step-sequencer/&quot;&gt;step-sequencer running live&lt;/a&gt; also.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8f94d8c0e5b401a57fac183961f4539f4097ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find this &lt;a href=&quot;https://github.com/chrisdavidmills/selection-api-examples/blob/master/setBaseAndExtent.html&quot;&gt;example on GitHub&lt;/a&gt; (&lt;a href=&quot;https://chrisdavidmills.github.io/selection-api-examples/setBaseAndExtent.html&quot;&gt;see it live also&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6815653b851abccb5d77f33b8f88f0478f1149" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find this example on GitHub (see the &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/mediaquerylist/index.html&quot;&gt;source code&lt;/a&gt;, and also see it &lt;a href=&quot;https://mdn.github.io/dom-examples/mediaquerylist/index.html&quot;&gt;running live&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c2f18cad98c5d68854b6d5e8b082fc9971cb2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find this example on GitHub as &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/htmldialogelement-basic/index.html&quot;&gt;htmldialogelement-basic&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/dom-examples/htmldialogelement-basic/&quot;&gt;see it live also&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffce39955034f96af19f698c1d650823bbc607c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can find working examples of all the code snippets in our &lt;a href=&quot;https://mdn.github.io/voice-change-o-matic/&quot;&gt;Voice-change-O-matic&lt;/a&gt; demo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1412937ad990c71bf34e46ba77b8073871b6a6a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can see this &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stream-source-buffer/&quot;&gt;example running live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stream-source-buffer&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d385f0ed5e38a2f784ebd49af29a2b6d05601169" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can see this complete code at &lt;a href=&quot;https://github.com/mdn/webvr-tests/blob/master/raw-webgl-example/webgl-demo.js&quot;&gt;raw-webgl-example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db55c3a3722d03ddf9c9e1a843c52c52c8f0f7f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can still use an existing &lt;a href=&quot;../url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object for the &lt;em&gt;base&lt;/em&gt;, which stringifies itself to the object's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMString/href&quot;&gt;&lt;code&gt;href&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2afbb4954967326f15f44bc3e415398dcc96d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You could also use &lt;a href=&quot;../storage/length&quot;&gt;&lt;code&gt;Storage.length&lt;/code&gt;&lt;/a&gt; to test whether the storage object is empty or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a678baed50599984fe7a7b355cf798fa2733ee18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You could define your own custom &lt;code&gt;queueingStrategy&lt;/code&gt;, or use an instance of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueueingStrategy&quot;&gt;&lt;code&gt;ByteLengthQueueingStrategy&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CountQueueingStrategy&quot;&gt;&lt;code&gt;CountQueueingStrategy&lt;/code&gt;&lt;/a&gt; for this object value. If no &lt;code&gt;queueingStrategy&lt;/code&gt; is supplied, the default used is the same as a &lt;code&gt;CountQueuingStrategy&lt;/code&gt; with a high water mark of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de54490fe4de4722029b3cb9557354f0399c5d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You could define your own custom &lt;code&gt;queuingStrategy&lt;/code&gt;, or use an instance of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueueingStrategy&quot;&gt;&lt;code&gt;ByteLengthQueueingStrategy&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CountQueueingStrategy&quot;&gt;&lt;code&gt;CountQueueingStrategy&lt;/code&gt;&lt;/a&gt; for this object value. If no &lt;code&gt;queuingStrategy&lt;/code&gt; is supplied, the default used is the same as a &lt;code&gt;CountQueuingStrategy&lt;/code&gt; with a high water mark of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea7bfe7a15988db91812394bde0051a2d0bedc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You generally wouldn't use this constructor manually; instead, you'd use the &lt;a href=&quot;../readablestream/getreader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bcde52e50598919d9917947cd0de6d4738dea0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You generally wouldn't use this constructor manually; instead, you'd use the &lt;a href=&quot;../writablestream/getwriter&quot;&gt;&lt;code&gt;WritableStream.getWriter()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff468ea97d85e06f900cdf009ab89877d0bf3a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You may not append or set a &lt;code&gt;request&lt;/code&gt; guarded Headers&amp;rsquo; &lt;code&gt;Content-Length&lt;/code&gt; header. Similarly, inserting &lt;code&gt;Set-Cookie&lt;/code&gt; into a response header is not allowed: ServiceWorkers are not allowed to set cookies via synthesized responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcd0c40cec79706380a08fe1e88511301738d79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You may serve your app from &lt;code&gt;http://localhost&lt;/code&gt; (e.g. using &lt;code&gt;me@localhost:/my/app$ &lt;strong&gt;python -m SimpleHTTPServer&lt;/strong&gt;&lt;/code&gt;) for local development. See &lt;a href=&quot;https://www.w3.org/TR/service-workers/#security-considerations&quot;&gt;Security considerations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb64d8f45cbc4a439a5398b30cec47409b586dc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You should typically call &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain&quot;&gt;&lt;code&gt;AudioContext.createGain()&lt;/code&gt;&lt;/a&gt; to create a gain node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632b18ef50c8826f5d5f657f242698351484bc48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You will need to find an impulse response to complete the example below. See this &lt;a href=&quot;https://codepen.io/DonKarlssonSan/pen/doVKRE&quot;&gt;Codepen&lt;/a&gt; for an applied example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e7488a24eb3ae70ba092c55c6a09b499fb93dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You wouldn't generally use the constructor manually. &lt;code&gt;OfflineAudioCompletionEvent&lt;/code&gt;s are despatched to &lt;a href=&quot;../offlineaudiocontext&quot;&gt;&lt;code&gt;OfflineAudioContext&lt;/code&gt;&lt;/a&gt; instances for legacy reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f2822b65249e05261f6d565861e20dff7f7458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You wouldn't use this constructor manually &amp;mdash; this is used during the construction of a &lt;a href=&quot;../readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cae09f8314bf74424f847d958f000aec382fe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You wouldn't use this constructor manually &amp;mdash; this is used during the construction of a &lt;a href=&quot;../writablestream&quot;&gt;&lt;code&gt;WritableStream&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8b3610e63c7d144190251665fb7c3e33822c24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll often get &lt;code&gt;NotSupportedError&lt;/code&gt;s thrown that seem like &lt;code&gt;define()&lt;/code&gt; is failing, but in actual fact it is a problem with &lt;a href=&quot;../element/attachshadow&quot;&gt;&lt;code&gt;Element.attachShadow()&lt;/code&gt;&lt;/a&gt;. Check that page too if you are coming up against problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b3e8962ca62bbc56036a907bbe232b805434d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Your service worker functions like a proxy server, allowing you to modify requests and responses, replace them with items from its own cache, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ba20e4b222e06d45f93ad2ef38a27fe52f531d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: as &lt;code&gt;document.write&lt;/code&gt; writes to the document &lt;strong&gt;stream&lt;/strong&gt;, calling &lt;code&gt;document.write&lt;/code&gt; on a closed (loaded) document automatically calls &lt;code&gt;document.open&lt;/code&gt;, &lt;a href=&quot;open#Notes&quot;&gt;which will clear the document&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72a411e1ffc686c38297b551685aaa2b2d58554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: audio resampling is very similar to image resizing. Say you've got a 16 x 16 image, but you want it to fill a 32x32 area. You resize (or resample) it. The result has less quality (it can be blurry or edgy, depending on the resizing algorithm), but it works, with the resized image taking up less space. Resampled audio is exactly the same: you save space, but in practice you will be unable to properly reproduce high frequency content, or treble sound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33bf23a37be3a55806f96f3dea4b39caaad6f0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: audio resampling is very similar to image resizing: say you've got a 16 x 16 image, but you want it to fill a 32x32 area: you resize (resample) it. the result has less quality (it can be blurry or edgy, depending on the resizing algorithm), but it works, and the resized image takes up less space. Resampled audio is exactly the same &amp;mdash; you save space, but in practice you will be unable to properly reproduce high frequency content (treble sound).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f229b8a42d443ee9f8033d5755d63cf67171a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: calling &lt;code&gt;history.pushState()&lt;/code&gt; or &lt;code&gt;history.replaceState()&lt;/code&gt; won't trigger a &lt;code&gt;popstate&lt;/code&gt; event. The &lt;code&gt;popstate&lt;/code&gt; event is only triggered by performing a browser action, such as clicking on the back button (or calling &lt;code&gt;history.back()&lt;/code&gt; in JavaScript), when navigating between two history entries for the same document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5311eca29c4313e6a8ff33a7b3a06992c617fee8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: for a full Web Audio example implementation, see one of our Web Audio Demos on the &lt;a href=&quot;https://github.com/mdn/&quot;&gt;MDN Github repo&lt;/a&gt;, like &lt;a href=&quot;https://github.com/mdn/panner-node&quot;&gt;panner-node&lt;/a&gt;. Try entering &lt;code&gt;audioCtx.sampleRate&lt;/code&gt; into your browser console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c60fa4806476e5ca755c3ba8d10501783d053b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: for a full Web Audio spatialization example, see our &lt;a href=&quot;https://github.com/mdn/panner-node&quot;&gt;panner-node&lt;/a&gt; demo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772da4581f76fdc27c15c9a1ae2541e211d266c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: for a full example implementation, see one of our Web Audio Demos on the &lt;a href=&quot;https://github.com/mdn/&quot;&gt;MDN Github repo&lt;/a&gt;, like &lt;a href=&quot;https://github.com/mdn/voice-change-o-matic&quot;&gt;voice-change-o-matic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367040297ac8a90acd01fab5c3c9efb0aaa45815" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: identifiers are case-sensitive, but you should avoid creating IDs that differ only in the capitalization (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Case_Sensitivity_in_class_and_id_Names&quot;&gt;Case sensitivity in class and id names&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909bb777b31eabea360b8783ea165fe17870a5bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: since titlebar is always rendered, then requesting outerHeight=100 will make the innerHeight of the browser window under the minimal 100 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18f25991757bcca81073d807ff7663f2e376786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: that there is a disagreement among browser manufacturers about whether a data URI is of the same origin or not. Though Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dbdf88ade346c0e2e23f65aab6b9153385014e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: there is disagreement among browser manufacturers about whether a data URI is of the same origin or not. Although Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7168fe2eb73bb0aa3dd4d53d27e6124fc8bc6e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: though the &lt;code&gt;AudioParam&lt;/code&gt; returned is read-only, the value it represents is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c829a5e9ce3f756b962ce23125f046f6da2ec786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: until Firefox 50 the above events were prefixed with &lt;code&gt;moz&lt;/code&gt; in Firefox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a60d2258f55716f204fd10169651e5765aff51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: we can't change the direction of travel of the cursor using the &lt;code&gt;direction&lt;/code&gt; property, as it is read-only. We specify the direction of travel using the 2nd argument of &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c612bc2b8a64355e1eed2229ae357f5d1b4559b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: you can find more out about the available headers by reading our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&quot;&gt;HTTP headers&lt;/a&gt; reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a095e97b3136fcfaad318e1c94547d9f12e227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: you don't need to connect the analyser's output to another node for it to work, as long as the input is connected to the source, either directly or via another node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d9e4961fdc6a1246e0c7dd7ca47479480fa68d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;&lt;strong&gt;: &lt;/strong&gt;This method is deprecated and &lt;code&gt;readAsArrayBuffer()&lt;/code&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c046643422587ad496c6ae71fe9fddc61ca52814" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes:&lt;/strong&gt; The Page Visibility API is especially useful for saving resources and improving performance by letting a page avoid performing unnecessary tasks when the document isn't visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c159dabd7e68e794b75907416cfc682c6bef92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Opera&lt;/strong&gt;: Go to &lt;code&gt;opera://flags&lt;/code&gt; and enable &lt;code&gt;Support for ServiceWorker&lt;/code&gt;; restart browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48467b598b2c1945dd4af36d67b62f0049171d06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Packed&lt;/strong&gt; - a generic attestation format that is commonly used by devices who's sole function is as a WebAuthn authenticator, such as security keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5b1e1071bed5a62c06dd06a51881f56620906e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance Timeline&lt;/strong&gt; extends the &lt;a href=&quot;../performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; object with three methods that provide different mechanisms to get a set of &lt;a href=&quot;../performanceentry&quot;&gt;&lt;code&gt;performance records (metrics)&lt;/code&gt;&lt;/a&gt;, depending on the specified filter criteria. The following example show the usage of these methods &lt;a href=&quot;../performance/getentries&quot;&gt;&lt;code&gt;getEntries()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../performance/getentriesbyname&quot;&gt;&lt;code&gt;getEntriesByName()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../performance/getentriesbytype&quot;&gt;&lt;code&gt;getEntriesByType()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc74405ae60db4c176270196eba787fbcaea0c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please note:&lt;/strong&gt; both create() and get() require a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts&quot;&gt;Secure Context&lt;/a&gt; (e.g. - the server is connected by https or is the localhost), and will not be available for use if the browser is not operating in a secure context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d78fd4ec0991cefa56695381296f247587812f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Point light&lt;/strong&gt; is light that is being emitted from a point, radiating in all directions. This is how many real-world light sources usually work. A light bulb emits light in all directions, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e053d8a79d935a0efba2a61ad410c64d8d563d25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pull sources&lt;/strong&gt; require you to explicitly request data from them once connected to. Examples include a file access operation via a &lt;a href=&quot;../fetch_api&quot;&gt;Fetch&lt;/a&gt; or &lt;a href=&quot;../xmlhttprequest/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6079ca283823fdfcc8fefb337f73778cdb8dfb64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Push sources&lt;/strong&gt; constantly push data at you when you&amp;rsquo;ve accessed them, and it is up to you to start, pause, or cancel access to the stream. Examples include video streams and TCP/&lt;a href=&quot;../websockets_api&quot;&gt;Web sockets&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42c204bc95f2d012e98a763c04282b5668b1f224" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reminder&lt;/strong&gt;: Angles are in radians, not degrees. To convert, we are using: &lt;code&gt;radians = (Math.PI/180)*degrees&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e4f43df546330a6a3fadb5fdbcc4263f01b5a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Required&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt; A string which is a member of the &lt;code&gt;RTCSdpType&lt;/code&gt; enum; it must have one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a9bc5b3818a8fe4010fd2f561602bbaab2172f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved and not used.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa249cef4b4b9a57bb1c78f67141b040f4b3a51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved for future use by the WebSocket standard.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5f411812682724f0a85198b4db25b3a49f999c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved for use by WebSocket extensions.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e075f575343fffd7c02e91e28b2f120937a5cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved.&lt;/strong&gt; A meaning might be defined in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08efb5d1bfc965f41f53bb35595d816a987f6d8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved.&lt;/strong&gt; Indicates that no status code was provided even though one was expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa3a276c50e695675a1e3423869e33435898b17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved.&lt;/strong&gt; Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850a5cb172b03057dc410f436d79962d06d6f028" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reserved.&lt;/strong&gt; Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156cce80eee693c7549e5451645299ae783bf3e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restore the canvas state&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3787deb5da5763d464103e157f13c6c55c0f8db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns/accepts&lt;/strong&gt; a &lt;a href=&quot;filelist&quot;&gt;&lt;code&gt;FileList&lt;/code&gt;&lt;/a&gt; object, which contains a list of &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects representing the files selected for upload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ee26d246544703d21b578ef806e7a4fa3757e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ruby tag&lt;/strong&gt; (&lt;code&gt;&amp;lt;ruby&amp;gt;&amp;lt;/ruby&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80be2105705e5e423c325ede4f0169419905ab77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ruby text tag&lt;/strong&gt; (&lt;code&gt;&amp;lt;rt&amp;gt;&amp;lt;/rt&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745b989865228b5e51841076805b97a2a109620d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Save the canvas state&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79452271f09c30a1afb6e3e3b7e7ae45bdd73e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Script-initiated windows will be displayed fully, with the Internet Explorer title bar and status bar.&lt;/strong&gt; (...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1a3248191db24df8c44592a829fa912362c833" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Secure context&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdc54f1f283c9b7a92d599ddb868d29e095dd5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server Sends Challenge, User Info, and Relying Party Info&lt;/strong&gt; - The server sends a challenge, user information, and relying party information to the JavaScript program. The protocol for communicating with the server is not specified and is outside of the scope of WebAuthn. Typically, server communications would be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/REST&quot;&gt;REST&lt;/a&gt; over https (probably using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/User:maybe/webidl_mdn/XMLHttpRequest_API&quot;&gt;XMLHttpRequest&lt;/a&gt; or &lt;a href=&quot;fetch_api&quot;&gt;Fetch&lt;/a&gt;), but they could also be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SOAP&quot;&gt;SOAP&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc2549&quot;&gt;RFC 2549&lt;/a&gt; or nearly any other protocol provided that the protocol is secure. The parameters received from the server will be passed to the &lt;a href=&quot;credentialscontainer/create&quot;&gt;create()&lt;/a&gt; call, typically with little or no modification and returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; that will resolve to a &lt;a href=&quot;publickeycredential&quot;&gt;&lt;code&gt;PublicKeyCredential&lt;/code&gt;&lt;/a&gt; containing an &lt;a href=&quot;authenticatorattestationresponse&quot;&gt;&lt;code&gt;AuthenticatorAttestationResponse&lt;/code&gt;&lt;/a&gt;. &lt;strong&gt;Note that it is absolutely critical that the challenge be a buffer of random information (at least 16 bytes) and it MUST be generated on the server in order to ensure the security of the registration process.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8106514f7090e43a5cc5435e6b6a5062f84efc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server Sends Challenge&lt;/strong&gt; - The server sends a challenge to the JavaScript program. The protocol for communicating with the server is not specified and is outside of the scope of WebAuthn. Typically, server communications would be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/REST&quot;&gt;REST&lt;/a&gt; over https (probably using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/User:maybe/webidl_mdn/XMLHttpRequest_API&quot;&gt;XMLHttpRequest&lt;/a&gt; or &lt;a href=&quot;fetch_api&quot;&gt;Fetch&lt;/a&gt;), but they could also be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SOAP&quot;&gt;SOAP&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc2549&quot;&gt;RFC 2549&lt;/a&gt; or nearly any other protocol provided that the protocol is secure. The parameters received from the server will be passed to the &lt;a href=&quot;credentialscontainer/get&quot;&gt;get()&lt;/a&gt; call, typically with little or no modification. &lt;strong&gt;Note that it is absolutely critical that the challenge be a buffer of random information (at least 16 bytes) and it MUST be generated on the server in order to ensure the security of the authentication process.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51c69eeaf05835c9934017ccf2861d9d0d55fc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server Validates and Finalizes Authentication&lt;/strong&gt; - Upon receiving the result of the authentication request, the server performs validation of the response such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0d58b064e2c8259bfb1e53e5439121bcbdedf2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server Validates and Finalizes Registration&lt;/strong&gt; - Finally, the server is required to perform a series of checks to ensure that the registration was complete and not tampered with. These include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b72b7426f551aab114c40c751fdb93eabe67c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server&lt;/strong&gt; - the WebAuthn API is intended to register new credentials on a server (also referred to as a service or a &lt;a href=&quot;https://en.wikipedia.org/wiki/Relying_party&quot;&gt;relying party&lt;/a&gt;) and later use those same credentials on that same server to authenticate a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50772e896681591579a59c57654fcb7f272b94bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specification&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Specification&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb85847c48e09ad18d7abcdd3064778e96a285e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Status&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Status&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0fe71e637270cac6a156a6434b09acd8cd5b99f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;StyleSheet.media&lt;/strong&gt; specifies the intended destination media for style information. It is a read-only array-like &lt;code&gt;MediaList&lt;/code&gt; object and can be removed with &lt;code&gt;deleteMedium()&lt;/code&gt; and added with &lt;code&gt;appendMedium()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57552505bbaf1203868ac7ee94a0bc41f69133fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Syntax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="207c5eaf67ef9030f0b6a0df20b1daae91a2d57b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TPM&lt;/strong&gt; - the Trusted Platform Module (TPM) is a set of specifications from the Trusted Platform Group (TPG). This attestation format is commonly found in desktop computers and is used by Windows Hello as its preferred attestation format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a357f1db99010b54023fbbb994bc4751e80585" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TextTrackCue&lt;/strong&gt;s represent a string of text that will be displayed for some duration of time on a &lt;a href=&quot;texttrack&quot;&gt;&lt;code&gt;TextTrack&lt;/code&gt;&lt;/a&gt;. This includes the start and end times that the cue will be displayed. A &lt;strong&gt;TextTrackCue&lt;/strong&gt; cannot be used directly, instead one of the derived types (e.g. &lt;a href=&quot;vttcue&quot;&gt;&lt;code&gt;VTTCue&lt;/code&gt;&lt;/a&gt;) must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d765fcc4f3ff32804595f1b140f6abf6c1e9a52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The IndexedDB API is mostly asynchronous.&lt;/strong&gt; The API doesn't give you data by returning values; instead, you have to pass a callback function. You don't &quot;store&quot; a value into the database, or &quot;retrieve&quot; a value out of the database through synchronous means. Instead, you &quot;request&quot; that a database operation happens. You get notified by a DOM event when the operation finishes, and the type of event you get lets you know if the operation succeeded or failed. This sounds a little complicated at first, but there are sanity measures baked in. It's not that different from the way that &lt;a href=&quot;../xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/a&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15f666be23702a0fbafca7759a64c6d656dd7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The constraints&lt;/strong&gt;: Only audio is to be captured for our dictaphone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d24ca6eb154edda1232a8c573f0b2ce96a65522" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The error/failure callback&lt;/strong&gt;: The code is run if the &lt;code&gt;getUserMedia&lt;/code&gt; call fails for whatever reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c1aa4d5f0897943b2394bcbf735517d7d9fd75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The success callback&lt;/strong&gt;: This code is run once the &lt;code&gt;getUserMedia&lt;/code&gt; call has been completed successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4553d99b5af66df6794033f055573bdacff6de02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22.&lt;/strong&gt; Please use &lt;a href=&quot;server-sent_events&quot;&gt;Server-Sent Events&lt;/a&gt;, &lt;a href=&quot;websockets_api&quot;&gt;Web Sockets&lt;/a&gt;, or &lt;code&gt;responseText&lt;/code&gt; from progress events instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9833331fd9a6aef6d0b22322f7e75ecf6f7892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;experimental technology&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eae1fbf857ec353dab3610efce041473155cd26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This section needs expansion. Please edit if you are equipped to do so.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22322cd7fc90326935ea9893279e6fbfb5a1f3e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timestamp tag&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d610ffc7d7fb62d167c499e14713778b05c962c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; All &lt;strong&gt;browsers&lt;/strong&gt; will send an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Origin&quot;&gt;&lt;code&gt;Origin&lt;/code&gt; header&lt;/a&gt;. You can use this header for security (checking for same origin, whitelisting/ blacklisting, etc.) and send a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/HTTP/Response_codes#403&quot;&gt;403 Forbidden&lt;/a&gt; if you don't like what you see. However, be warned that non-browser agents can just send a faked &lt;code&gt;Origin&lt;/code&gt;. Most applications will reject requests without this header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd8e8b1029b67c433946c37e30adbfc1ba0ae82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; The request-uri (&lt;code&gt;/chat&lt;/code&gt; here) has no defined meaning in the spec. So many people cleverly use it to let one server handle multiple WebSocket applications. For example, &lt;code&gt;example.com/chat&lt;/code&gt; could invoke a multiuser chat app, while &lt;code&gt;/game&lt;/code&gt; on the same server might invoke a multiplayer game.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab5344464e0f07683ca28091fdd33c125ec6e5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; To avoid name conflict, it's recommended to make your subprotocol name part of a domain string. If you are building a custom chat app that uses a proprietary format exclusive to Example Inc., then you might use this: &lt;code&gt;Sec-WebSocket-Protocol: chat.example.com&lt;/code&gt;. Note that this isn't required, it's just an optional convention, and you can use any string you wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2925e0971562724cd8de11197faddfcc9c069ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: For accessibility reasons, it is strongly encouraged to set this feature always on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e49e7a8c4853e3ef4bd1054bcb986b45065bdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: For accessibility reasons, it is strongly recommended to set this feature always on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f245aa0df166f22c039629930fefd056c8c8eaef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: If using the &lt;code&gt;strWindowFeatures&lt;/code&gt; parameter, only list the features to be enabled or rendered; the others (except &lt;code&gt;titlebar&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;) will be disabled or removed. Note that in some browsers, users can override the &lt;code&gt;strWindowFeatures&lt;/code&gt; settings and enable (or prevent the disabling of) features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f920cc3429a3ccbff60aea3f2f6826ed9056dc0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To-do list&lt;/strong&gt;: This is a simple to-do list app that stores data locally using &lt;a href=&quot;../indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt; and notifies users when tasks are due using system notifications. &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;Download the To-do list code&lt;/a&gt;, or &lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view the app running live&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a800b861ab1916bef23e6656cf43c1286d67d28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Type&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e204bc7406fceb5213cab1eb18a0e68dcd6aebcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; &amp;mdash; The new history entry's URL is given by this parameter. Note that the browser won't attempt to load this URL after a call to &lt;code&gt;pushState()&lt;/code&gt;, but it might attempt to load the URL later, for instance after the user restarts the browser. The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL. The new URL must be of the same origin as the current URL; otherwise, &lt;code&gt;pushState()&lt;/code&gt; will throw an exception. This parameter is optional; if it isn't specified, it's set to the document's current URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa5d7e084087f09eb6683a482d395c52a27f83a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Underline tag&lt;/strong&gt; (&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;/u&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5975042ce6eac446ba6fc35222e3125ecbd7cb31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Uniforms&lt;/strong&gt; are set by the JavaScript code and are available to both the vertex and fragment shaders. They're used to provide values that will be the same for everything drawn in the frame, such as lighting positions and magnitudes, global transformation and perspective details, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538a1a4026bcd194421bf1875570146ebd3ebcc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use idle callbacks for tasks which don't have high priority.&lt;/strong&gt; Because you don't know how many callbacks have been established, and you don't know how busy the user's system is, you don't know how often your callback will be run (unless you specify a &lt;code&gt;timeout&lt;/code&gt;. There's no guarantee that every pass through the event loop (or even every screen update cycle) will include any idle callbacks being executed; if the event loop uses all available time, you're out of luck (again, unless you've used a &lt;code&gt;timeout&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509fd66e4edf9571e8c94816fe17e38982680642" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use timeouts when you need to, but only when you need to.&lt;/strong&gt; Using timeouts can ensure that your code runs in a timely manner, but it can also allow you to cause lag or animation stutters by mandating that the browser call you when there's not enough time left for you to run without disrupting performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e12a2bfc83c6ca67802b00a7fc13d6a87aa4702" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Varyings&lt;/strong&gt; are variables that are declared by the vertex shader and used to pass data from the vertex shader to the fragment shader. This is commonly used to share a vertex's &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_(geometry)&quot;&gt;normal vector&lt;/a&gt; after it has been computed by the vertex shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da44cdf726ff924c0f085be83ad9b7db5b9bb91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Verify that the information provided by the user results in a valid transaction.&lt;/strong&gt; This results in the creation and returning of a payment method-specific object that contains the information needed to handle the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a972cb1eaee785bdb68006614d314d43091084" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Voice tag&lt;/strong&gt; (&lt;code&gt;&amp;lt;v&amp;gt;&amp;lt;/v&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba847e347088b75956742f58468d69a72e790bf2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Warning!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab172fedc978704b9405770cf4dcacaf5169b964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: &lt;/strong&gt; The latest specification does not include this interface anymore as the &lt;code&gt;IDBDatabase.setVersion()&lt;/code&gt; method has been removed. See the compatibility table for version details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e327e7c4ab2b2fce1456ee0125035660a6e0f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: &lt;/strong&gt;Older insecure hash functions, like &lt;code&gt;MD5&lt;/code&gt;, are not supported by this method. &lt;strong&gt;Even a supported method, &lt;code&gt;SHA-1&lt;/code&gt;, is &lt;a href=&quot;http://arstechnica.com/security/2012/10/sha1-crypto-algorithm-could-fall-by-2018/&quot;&gt;considered weak&lt;/a&gt;, &lt;a href=&quot;http://shattered.it/&quot;&gt;has been broken&lt;/a&gt; and should be avoided for cryptographic applications.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3566be6d595821b817a6662af6fa62616741c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: &lt;/strong&gt;Starting in Gecko 7.0 (Firefox 7.0 / Thunderbird 7.0 / SeaMonkey 2.4), the ones that are going to be removed output warning messages to the console. You should revise your code accordingly. See &lt;a href=&quot;#Deprecated_properties_and_methods&quot;&gt;Deprecated properties and methods&lt;/a&gt; for a complete list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520eb6b231a4d9c387ebe6c1395d9d57e735312b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Currently, Firefox and Chrome do not handle the coordinates the same way. Take care about this while using them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f3ef2513330c503c20cda80d3a1ac8d2de9ea5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If your project is one that will undergo any form of security review, using &lt;code&gt;innerHTML&lt;/code&gt; most likely will result in your code being rejected. For example, &lt;a href=&quot;https://wiki.mozilla.org/Add-ons/Reviewers/Guide/Reviewing#Step_2:_Automatic_validation&quot;&gt;if you use &lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt; in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions&quot;&gt;browser extension&lt;/a&gt; and submit the extension to &lt;a href=&quot;https://addons.mozilla.org/&quot;&gt;addons.mozilla.org&lt;/a&gt;, it will not pass the automated review process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d67c8937947b31e78cfe757aff505b198a9e5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The &lt;code&gt;storage&lt;/code&gt; attribute is deprecated and will soon be removed from Gecko. You should use &lt;a href=&quot;../storagemanager/persist&quot;&gt;&lt;code&gt;StorageManager.persist()&lt;/code&gt;&lt;/a&gt; to get persistent storage instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba68f351bc0641319fe796a7fd7d2a0aac24b96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The latest draft of the specification has dropped this method. Some not up-to-date browsers still implement this method. The new way is to define the version in the &lt;code&gt;IDBDatabase.open()&lt;/code&gt; method and create and delete object stores in the &lt;code&gt;onupgradeneeded&lt;/code&gt; event handler associated with the returned request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f03455980046d935ae3c6d2dbf16317491a41ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The server may listen on any port it chooses, but if it chooses any port other than 80 or 443, it may have problems with firewalls and/or proxies. Connections on port 443 tend to succeed more often but of course, that requires a secure connection (TLS/SSL). Also, note that most browsers (notably Firefox 8+) do not allow connections to insecure WebSocket servers from secure pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dd1fbce56e10e6c3ca626fb45665488d7c8cfa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This API is experimental and currently available on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS&quot;&gt;Firefox OS&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_for_Android&quot;&gt;Firefox for Android&lt;/a&gt; with a &lt;code&gt;moz&lt;/code&gt; prefix, and for Internet Explorer on Windows 8.1 and above with a &lt;code&gt;ms&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bc938f916fc9c246793884176944215ef6fa3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This attribute is deprecated; you should use &lt;a href=&quot;keyboardevent/key&quot;&gt;&lt;code&gt;KeyboardEvent.key&lt;/code&gt;&lt;/a&gt; instead, if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a98b2f99a67a31c1421fd97dc8fba655182c46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This ignores the user's keyboard layout, so that if the user presses the key at the &quot;Y&quot; position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return &quot;KeyY&quot;, even if the user has a QWERTZ keyboard (which would mean the user expects a &quot;Z&quot; and all the other properties would indicate a &quot;Z&quot;) or a Dvorak keyboard layout (where the user would expect an &quot;F&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76cb0711e073ab98e361dc9b02c321506e827f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This interface is no longer available in any mainstream browser. Do not use &lt;code&gt;LocalMediaStream&lt;/code&gt;; you need to update any code that does use it as soon as possible or your content or application will stop working. See &lt;a href=&quot;mediastreamtrack#Stopping_a_video_stream&quot;&gt;Stopping a video stream&lt;/a&gt; in &lt;a href=&quot;mediastreamtrack&quot;&gt;MediaStreamTrack&lt;/a&gt; to learn how. All other functionality is found in &lt;a href=&quot;mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a01033fc4f904a3df8c2dfc4d19417db0be077" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This interface never had much cross-browser support and you probably looking for &lt;a href=&quot;setpointercapture&quot;&gt;&lt;code&gt;element.setPointerCapture&lt;/code&gt;&lt;/a&gt; instead, from the Pointer Events API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad0357d0f2d6e33a0840a41e05eafac2175ddff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This method is obsolete and should not be used. You should instead simply use the &lt;code&gt;send()&lt;/code&gt; method, which now supports binary data in various forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1016ac2a068bf90d3f37b2a86759d5d2cc1f7af0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This method must &lt;em&gt;not&lt;/em&gt; be called from JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44675df0b011260529e1fe17fe292aa6859547f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This property has been removed from the specification and should no longer be used; the currency is now &lt;em&gt;always&lt;/em&gt; specified using ISO 4127.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88c37d6f5205491aa05ff743b4b22106acea22d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This should not be used with synchronous requests and must not be used from native code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd03968145dff97805dbe710c4bccbdbd57710d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;&lt;code&gt;cloneNode()&lt;/code&gt; may lead to duplicate element IDs in a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ca7846eece6714ddc5b6c7a49b807312fc786c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: While this property is still implemented in older browsers, the latest specification replaces it with the &lt;code&gt;oldVersion&lt;/code&gt; and &lt;code&gt;newVersion&lt;/code&gt; attributes. See the compatibility table to know what browsers support them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb7ab5c96ec1d658b141fc72b32e76b4a793e3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Web Video Text Tracks Format&lt;/strong&gt; (&lt;strong&gt;WebVTT&lt;/strong&gt;) is a format for displaying timed text tracks (such as subtitles or captions) using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track&quot;&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/a&gt; element. The primary purpose of WebVTT files is to add text overlays to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;. WebVTT is a text based format, which must be encoded using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/UTF-8&quot;&gt;UTF-8&lt;/a&gt;. Where you can use spaces you can also use tabs. There is also a small API available to represent and manage these tracks and the data needed to perform the playback of the text at the correct times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b34fc7229582e6b7cb5174e4c97c200502074a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Web Workers&lt;/strong&gt; makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481aef60503199cae9fc322dfb064ed4597d5cf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WebGL 1:&lt;/strong&gt; The &lt;a href=&quot;oes_vertex_array_object&quot;&gt;&lt;code&gt;OES_vertex_array_object&lt;/code&gt;&lt;/a&gt; extension allows you to use vertex array objects in a WebGL 1 context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f8ee7e4bf0ad3c79e6aa3be9700beaa751efac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WebRTC&lt;/strong&gt; (Web Real-Time Communications) is a technology which enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprises WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d328a7a303aaf5a8404dc8e5e89957eabd887107" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workers run in another global context, &lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;, different from the current window&lt;/strong&gt;. By default, methods and properties of &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; are not available to them, but &lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;Window&lt;/code&gt;, implements &lt;a href=&quot;../windoworworkerglobalscope&quot;&gt;&lt;code&gt;WindowTimers&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../windoworworkerglobalscope&quot;&gt;&lt;code&gt;WindowBase64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb575caaf75f11454d23bcf4e0e76954c5378596" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;aChild&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;aChild&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbf49e6e7eb578932bacef036cc416a85d758b0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;addRule&lt;/strong&gt;(&lt;var&gt;selector&lt;/var&gt;, &lt;var&gt;rule&lt;/var&gt; [, &lt;var&gt;index&lt;/var&gt;]); &amp;mdash; Example: &lt;code&gt;addRule('pre', 'font: 14px verdana'); // add rule at end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21af6fb3d621645fa1b45f1ae875a34e8d0f75b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;align&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;align&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="abf467e3b0478b4ecfc775297347d1c86c0ffa16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attestedCredentialData&lt;/strong&gt; (variable length) - The credential that was created. This is only present during a navigator.credentials.create() call. This is a sequence of bytes with the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2747b57de5cdb3d041a57b40cab7f0f236277aa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bitrate&lt;/strong&gt;: Number of bits used to encode one second of the audio file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bcccd8a58e7f65bf483a0ab13b1db92da4f2ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bitrate&lt;/strong&gt;: Number of bits used to encode one second of the video file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53114340f9b6b626b46a7f2d8818fecdcfea4081" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bitrate&lt;/strong&gt;: The number of bits used to encode one second of the audio file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e076230c5ee80ef3508c7284f4e99f3e6d8231b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bitrate&lt;/strong&gt;: The number of bits used to encode one second of the video file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33524cf969d17269c2a7ba982575b1b7655cda9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;channels&lt;/strong&gt;: Number of channels used by the audio track</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8840bdccd14146c89da8702bf52e24230001a251" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;channels&lt;/strong&gt;: the number of channels used by the audio track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2097c8c938ef9741c4ab840518341a58d98b0e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;clientDataJSON&lt;/strong&gt; - An ArrayBuffer that contains a JSON representation of what the browser saw when being asked to authenticate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8c99bb3fc276d90b26389fee9339f6223d3646" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;contentType&lt;/strong&gt;: A valid audio MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67714477464f6a201a4d05cd8d6b73493a55f6e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;contentType&lt;/strong&gt;: A valid audio MIME type, For examples, see the list of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats&quot;&gt;Media formats for HTML audio&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26a1fa19e316e52f018bf96f886f46c94ad2f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;contentType&lt;/strong&gt;: A valid video MIME type. For examples, see the list of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats&quot;&gt;Media formats for HTML video&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4977ae22332a4c9eebdc375233270ef5aa15814" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;contentType&lt;/strong&gt;: Valid video MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87068471522319641675a7d7dfde14058a53c133" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;credentialPublicKey&lt;/strong&gt; (variable length) -</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb4704ea67881d4463a0a5fc5291f25cfd9c8d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cssText&lt;/strong&gt; returns or sets the text of the element's &lt;strong&gt;inline&lt;/strong&gt; style declaration only. To be able to set a &lt;strong&gt;stylesheet&lt;/strong&gt; rule dynamically, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/Using_dynamic_styling_information&quot;&gt;Using dynamic styling information.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf286b288f15ac04ad2aa3533fa9bdc2c3c594c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cssText&lt;/strong&gt; returns the actual text of a &lt;a href=&quot;../cssstylesheet&quot;&gt;&lt;code&gt;CSSStyleSheet&lt;/code&gt;&lt;/a&gt; style-rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a547d556de906ad2bcea382cd38d10be2ef57c7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default value&lt;/strong&gt;: &lt;code&gt;gl.FUNC_ADD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5a511d7a42abc3e483669e26b693ecd38d0386" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;document.writeln&lt;/strong&gt; is the same as &lt;a href=&quot;write&quot;&gt;&lt;code&gt;document.write&lt;/code&gt;&lt;/a&gt; but adds a newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a075e86ee49073000cd47663749320d0e8da9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;example.html&lt;/strong&gt; (the main page):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d2a0ac7c169723eabeeadf58eaafb10cfd5d2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;example.html&lt;/strong&gt;: (the main page):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d277bd1e219d97f2befc878b2ba5a53445a80a3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extensions&lt;/strong&gt; (variable length) - An optional &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/&quot;&gt;CBOR&lt;/a&gt; map of extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1491715e45fb167029de2ada9188b0e13314e35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file&lt;/strong&gt;: For plain playback file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296ef4f1611785b978a852d9e80cd437fbd2fa7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flags&lt;/strong&gt; (1 bytes) - A bitfield that indicates various attributes that were asserted by the authenticator. The bits are as follows, where &quot;bit 0&quot; is the least significant bit and all bits not specifically mentioned below are &quot;reserved for future use&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89da4d3b4a15bcaef9012b54cc7ccb865e69930d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;framerate&lt;/strong&gt;: Number of frames making up one second of video playback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3fd8ad7513f81e4d82f8c397df27af9317c918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;framerate&lt;/strong&gt;: The number of frames making up one second of video playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5eb41176b73bcb08cc3b1c53169c8868fcebae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;height&lt;/strong&gt;: Height of the video</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57c4c7b9fe0dea4dbb77f7d8f5909867a2c1060" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;height&lt;/strong&gt;: The height of the video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046784d31f95c6a2c0dbecdb00ac9897814e8441" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;line&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;line&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11c71e94783c8755142b1d7353fdaff79470c1de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;media-source&lt;/strong&gt;: For &lt;a href=&quot;mediasource&quot;&gt;media source&lt;/a&gt; files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0538ebbc6a9115c8e6ed6e860c0859c4c6cb35ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;my_task.js&lt;/strong&gt; (the worker):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e8ef85ac1038e5046e2bb9a7fc09f0c53080d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;none&lt;/strong&gt; - browsers may prompt users whether they want a site to be allowed to see their attestation data and / or may remove attestation data from the authenticator's response if the `attestation` parameter in `navigator.credentials.create()` is set to `none`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9e119689f7222e0ba23a5fe76c16cc46216cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;normal vector:&lt;/strong&gt; We need to store the X, Y and Z components of the normal vector, but since precision is not that important, we use 8-bit signed integers. For better performance, we align the data to 32 bits by also storing a fourth zero-valued component, bringing the total size to 4 bytes. Also, we tell WebGL to normalize the values because our normals are always in range [-1, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bf23e52cae21b69e727d419ffc92ae8b3a3f1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onabort&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onabort&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2007f8c91eca65f6e18e762d5b356207a2c5c2f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onerror&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onerror&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f482d740a07492891d59eca26a6b9bea3adaa554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onload&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onload&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2aa4f0bf3ae7f5e94bcc82a18a6b5b219ae7779f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onresize&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onresize&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e240c32c46a5ec1fb88b8907cc4d0720b5309ac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onscroll&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onscroll&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a1127dae9f6459b8391b124ad5b2ccee4eb48f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onunload&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onunload&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f9e183f7fec4a7288b1d6012197255ad5a1e876" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;onzoom&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;onzoom&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8b91e2277f8ca8af28450d0481d238011192f12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ownerNode&lt;/strong&gt; returns the node that associates this style sheet with the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ba769b68685838b62dcd1c66bd640a8853a10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;parentStyleSheet&lt;/strong&gt; returns the stylesheet object in which the current rule is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dca865700b91ac09cd6200ccb899355a242b5a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;position:&lt;/strong&gt; We need to store the X, Y and Z coordinates. For highest precision, we use 32-bit floats; in total this uses 12 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d83c3d2dca802ba083d1468b19012e00256faf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;position&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b5ad085f09b062f2794a8a5a6469a879454f976" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;record&lt;/strong&gt;: For &lt;a href=&quot;mediarecorder&quot;&gt;recording media&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8884f7341a8f79d622874a6e4b952b8427ff88cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;removeRule&lt;/strong&gt;([&lt;em&gt;index&lt;/em&gt;]); -- Example:&lt;code&gt; removeRule(); // remove first rule&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727352099b35dd23c7de49fa39fc5cae7f4a9c12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rpIdHash&lt;/strong&gt; (32 bytes) - A SHA256 hash of the relying party ID (i.e. - domain) that was seen by the browser. The server will ensure that this hash matches a hash of its own origin in order to prevent phishing or other man-in-the-middle attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3b7f967b472e93fecabdd1848a708330c87d58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samplerate&lt;/strong&gt;: Number of audio samples making up one second of the audio file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00298c9e9456e0653076b93c4700c9d7a77c0f5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samplerate&lt;/strong&gt;: The number of audio samples making up one second of the audio file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068b200b795db0918c84133dc1e2eaadbd30ef39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;signCount&lt;/strong&gt; (4 bytes) - A signature count from the authenticator. The server will use this counter to detect authenticator cloning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcddd5e445c7d7e970d606cfec3d2f0de79bf00d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;signature&lt;/strong&gt; - a signature over the clientDataJSON and authenticatorData that can be verified with the public key that was created during registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9316b1ce55d53f059db61de8db551405a143603" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;size&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a01cbf919b4f426590be0bac53d0bf961e98a97f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;state object&lt;/strong&gt; &amp;mdash; The state object is a JavaScript object which is associated with the new history entry created by &lt;code&gt;pushState()&lt;/code&gt;. Whenever the user navigates to the new state, a &lt;code&gt;popstate&lt;/code&gt; event is fired, and the &lt;code&gt;state&lt;/code&gt; property of the event contains a copy of the history entry's state object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52c4347c0b43b085f5bddb23809074a46ad6ce1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;texture coordinate:&lt;/strong&gt; We need to store the U and V coordinates; for this 16-bit unsigned integers offer enough precision, the total size is 4 bytes. We also tell WebGL to normalize the values to [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e96e4619521b8e3c1aab9d5e768f15590f812a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;title&lt;/strong&gt; &amp;mdash; Firefox currently ignores this parameter, although it may use it in the future. Passing the empty string here should be safe against future changes to the method. Alternatively, you could pass a short title for the state to which you're moving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3950d48dd3c75d2e5ffa24c83a2d9bcdb26b1aec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transmission&lt;/strong&gt;: For media to be electronically transmitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2abaf3c6a36b2124b7e9d18df68d17b9ec12f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;userHandle&lt;/strong&gt; - Optional. (Nullable) A user identifier. This may be a username, or a hash of a username, etc. Used by a service to give a scope to credentials. Maximum length of 64 bytes. Older authenticators (U2F) do not support this output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4ca3cb072c3c5bbb15e01872d58fbcebb60eb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vertical&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;vertical&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="761691c4eeb7ffeef521ae5c1df5a69f67b27094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt;: The width of the video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55675be42a76797f8c04c902d305ca0a4de6183" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt;: Width of the video</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fb3f78334462ab5949ee0d9dcdb3590097d18d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;注意&lt;/strong&gt;：在Chrome上，在网页上使用语音识别涉及基于服务器的识别引擎。您的音频将发送到Web服务进行识别处理，因此无法脱机工作。</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：在Chrome上，在网页上使用语音识别涉及基于服务器的识别引擎。您的音频将发送到Web服务进行识别处理，因此无法脱机工作。</target>
        </trans-unit>
        <trans-unit id="21e61cd9e113b3f87c2fcd66ad8358e3915f51d0" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt;x.y refers to the version of the operating system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13de2ccb736e6bb6298bfc8ee25e17d5147ad303" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;&lt;strong&gt;try { await paymentRequest.retry(errorFields); } catch (DOMException err) { ... }&lt;/strong&gt;&lt;/u&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2328b1500bd0bd56551e45162569938b67108c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;After running this code, &lt;/var&gt;&lt;code&gt;&lt;var&gt;intElemScrollTop&lt;/var&gt;&lt;/code&gt; is an integer corresponding to the number of pixels that the &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;element&lt;/code&gt;&lt;/a&gt;'s content has been scrolled upwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153efdb43302ba4d153b8c8013b0ae7966ecc2c2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;P&lt;/var&gt;, a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-promise&quot;&gt;Promise&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b39a62c869b9f9d45581ba2ebe0cd7fa77af39" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;The &lt;code&gt;CustomEventInit&lt;/code&gt;&lt;/var&gt;&lt;var&gt; dictionary also accepts fields from the &lt;a href=&quot;../event/event&quot;&gt;&lt;code&gt;EventInit&lt;/code&gt;&lt;/a&gt; dictionary.&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d904ecc406269fc78880fb72229ede7820dd0cb1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;cName&lt;/var&gt; is a string variable representing the class or space-separated classes of the current element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963124c30182b2e8432e2ed394495eab36c7b63e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;data&lt;/var&gt; is a string containing the data to be put in the text node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7069f52cf0e222687920b2fa68d09ff04c974b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dirBar&lt;/var&gt; is an object of the type &lt;code&gt;BarProp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef246d097d165f85ecface3fd385e983b0ff417" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;elements&lt;/var&gt; is a live &lt;a href=&quot;../htmlcollection&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt; of found elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be15a3784fe4cf1423d58363eb5e1c93daf0fcd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;eventInit&lt;/var&gt;Optional</source>
          <target state="translated">&lt;var&gt;eventInit&lt;/var&gt;Optional</target>
        </trans-unit>
        <trans-unit id="74f95462491261fafe8097f2c4d9d76886dd6023" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;funcRef&lt;/var&gt; is a handler function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a2b862da887fa96612b6f9dfe4429bb2e1b3c4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;function&lt;/var&gt; is the name of a user-defined function, without the &lt;code&gt;()&lt;/code&gt; suffix or any parameters, or an anonymous function declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746a8e9c26f0e040441aa469ffc48d2e7ae657d4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;languageUsed&lt;/var&gt; is a string variable that gets the language in which the text of the current element is written. &lt;var&gt;NewLanguage&lt;/var&gt; is a string variable with its value setting the language in which the text of the current element is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2785d6743a4cb16646b17abb3eaeac5ef6031c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;names&lt;/var&gt; is a string representing the list of class names to match; class names are separated by whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55924d12a88ff615a0e60cfb83e9ea3cbd7fea01" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt;Optional</source>
          <target state="translated">&lt;var&gt;options&lt;/var&gt;Optional</target>
        </trans-unit>
        <trans-unit id="96c709e906385caad84d906011fa4c067c982c92" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;parentObj&lt;/var&gt; is an object reference to the element in which the current element is offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67ff978a5816fc58a74fcd40c8c0c5800639bc8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;presentationId&lt;/var&gt;, a valid &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-presentation-identifier&quot;&gt;presentation identifier&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00de6e0850e64cbfabd5321fa92a1f3014ce33a3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;presentationRequest&lt;/var&gt;, the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#idl-def-presentationrequest&quot;&gt;&lt;code&gt;PresentationRequest&lt;/code&gt;&lt;/a&gt; object that &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dom-presentationrequest-reconnect&quot;&gt;&lt;code&gt;reconnect&lt;/code&gt;&lt;/a&gt;()&lt;/code&gt; was called on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0883563509f791b19bd3cad28c7db55da3c139" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;presentationUrls&lt;/var&gt;, a list of &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-presentation-request-urls&quot;&gt;presentation request URLs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c13312ee3a32490e964f8b65ca19a8016631ef" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;sLeft&lt;/var&gt; is an integer representing the number of pixels that &lt;var&gt;element&lt;/var&gt; has been scrolled to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118313df5402ef5e4c65747efe8267da928c114d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;text&lt;/var&gt; is a Text node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308260cb0d01ebe7aaa95b1a71ba3c6f782cab31" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xScrollWidth&lt;/var&gt; is the width of the content of &lt;var&gt;element&lt;/var&gt; in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>
        </trans-unit>
        <trans-unit id="56618fea3c4cbb4d876cfda2b9b1110cd0c72d9a" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428a07d5068a246886fe05f5940375dc869e5690" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5ce893d2e457996950edcfe696085c9deb38ac" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 13</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4657655770a4eb54d5d7519e5ff6786bffdc5085" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 14</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be66c429c3c727cd324ae89b834ffe534a6d50d" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 15</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea5e65025326f627b9d61b6b28b883588f597bf" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 17</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fe31987a3c8840ccd0aab4449addc01192f8ac" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 18</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaf35d5c085e96275e89ac36b2b1859e07ef798" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 20</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4648e533fc809868be6e792a52b866e587a3c94a" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 22</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82f1fea71854823ac5a45043ef9e01d34082cfa" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 24</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6877ec90cbcecae5d9350120fe87958dd0d98905" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 28</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff540a8e54ccd573010da085f9f11c19391d72ed" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 29</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d23dd0c02f7ad409982782ec55f4d0a10f8140e" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 30</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5ecc5704d562a5beb3f1f7620fe29d6f579cc9" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696b0fb180c07033e59bc32a800f35720af94833" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 33</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0934314b6f753559472031f9da03abb30044a0" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 35</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a92f5c89d6c52b26c553f2cc929b8e591b43fe" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 37</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76720f98f7d421d753fcf68b52ba13b98ac1799" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 38</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb81bec7f71847c7e761059dd123437c740fc89" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 39</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee2f2e923265ecaf08485dc221b65e7a0d410c2" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 40</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326639a4def9cff34e739ee77ed511a5ee51cc66" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 41</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5da73fbf96f3f1fc98686e72eb30aa5535d6ebf" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 43</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f05179299ed12ee15a1fa0818f2887fbb1a8f4f" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 44</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a156a799e3fda76ecf07da5de074291baa6d4b" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 45</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501127407459d4f31006dcbdc0a20fab2894107e" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 46</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93d1d9bf541e9bbccd22509d4fa5b09ad4070bb" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 47</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6f4337303a59470023bfe0efcb52090c5c8faa" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 48</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c53d9d239f70fe2e216b047012c0a429c91b2e" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 49</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680b6b329dcee7f5611ec0ac50e620ed5294dc26" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 50</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66554deb15ff35e4fa40467f53fe3818ede71ba1" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 51</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bacbf5b6ae4984de973abad2f5c930289d018cc" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 53</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60b46a8aa3d68bcf4e10eb0294bbdcb6f9e837c" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 54</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380138d83b79acb6c3b3fbefa802b48f82b76934" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 55</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19980b0e1f95b5c710878232b8caa4948de6e9cc" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 56</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315496e464ca20029c041d9de7210cce9b7f902f" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 57</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f884343e8faba93325890fab58b4d7808ba39912" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 58</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dacc04ec4dc23cc5ea22d8122663f0cb0012680" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 59</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b0e1d816fe80fd14ae8344e9d20948e8391640" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d785c7c24efe33420326b4467e75c5b142b4b334" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 60</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cec7ce6c41a8df3b463575e820f8026feae9e0" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 61</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6bcc85e9b593f143910dd97a6ff06280a437b2" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 62</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6293fcbc8ae4f802da5fc21350c4b39f0b190ae2" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 66</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46e93c7f8b2f24bdcff6b3bf7127ac064bdae13" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4111ebde11ab3523a1ccb2b60862e9572fbe2f28" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 7.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98a00019d88037faae9cad68367d907f7fac409" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a94d96569888b4a0268ec890c51a2599b6f1530" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0741763c6759028ddfaf0e076862c00e3354a3" translate="yes" xml:space="preserve">
          <source>? (should be in &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/39&quot;&gt;39&lt;/a&gt; (39))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="e11b315b73a2c3ea9391b727148823ac5af349e6" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;character set&amp;rdquo; and a &amp;ldquo;character encoding&amp;rdquo; are related, but different. Despite the name of this property, it returns the &lt;em&gt;encoding&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ced0f242d5d403e0fca71ed474ce5e9dbffe6d" translate="yes" xml:space="preserve">
          <source>A &amp;lt;coordinate&amp;gt; is a length in the user coordinate system that is the given distance from the origin of the user coordinate system along the relevant axis (the x-axis for X coordinates, the y-axis for Y coordinates). Its syntax is the same as that for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SVG/Content_type#length&quot;&gt;&amp;lt;length&amp;gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3c47e3a3261872bc2493b0871f1de5206de826" translate="yes" xml:space="preserve">
          <source>A (possibly incomplete) list of ways a style sheet can be associated with a document follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ed587bb4ff443e0d4bda00f00a888d42207b58" translate="yes" xml:space="preserve">
          <source>A 16-bit number indicating the port number on the device at the address indicated by &lt;a href=&quot;ip&quot;&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/a&gt; at which the candidate's peer can be reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d40330d812ec349669210433d45edb7512d339f" translate="yes" xml:space="preserve">
          <source>A 16-element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; containing the components of a 4&amp;times;4 transform matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a1ebf3e3c9720f876998373e8e3ed3f0e6c711" translate="yes" xml:space="preserve">
          <source>A 32-bit integer uniquely identifying the source of the RTP packets whose statistics are covered by the &lt;a href=&quot;../rtcstatsreport&quot;&gt;&lt;code&gt;RTCStatsReport&lt;/code&gt;&lt;/a&gt; object of which this &lt;code&gt;RTCRtpStreamStats&lt;/code&gt; object is a component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c62c4cadd298829903cce2e3d6ec2cb1c1106ab" translate="yes" xml:space="preserve">
          <source>A 32-bit unsigned integer value specifying the CSRC identifier of the contributing source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f471a805758f3ca42e18b749a561d2de78dd71" translate="yes" xml:space="preserve">
          <source>A 4x4 matrix is suitable to describe any rotation and translation in 3D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7992767cb3712f9b6c5cb1175ae4de36ac8f4c" translate="yes" xml:space="preserve">
          <source>A 64-bit integer indicating how many bytes of data have been sent on the stream...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e20704c5bf8dd0b0e7106ba8ed02759f30389c9" translate="yes" xml:space="preserve">
          <source>A 64-bit unsigned integer indicating the size of the entry in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a7fe2b0cf2a33e706f81ec1e28be6a6c69c59c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../animationtimeline&quot;&gt;timeline object&lt;/a&gt; to use as the timing source for the animation, or &lt;code&gt;null&lt;/code&gt; to use the default, which is the &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;'s timeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484e09384c46827110b480cf1a5349e2fd75a38e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../attr&quot;&gt;&lt;code&gt;Attr&lt;/code&gt;&lt;/a&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4e8dd0f6b0952b1f4d9f863b0d0180bb79dd83" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../audioparam#k-rate&quot;&gt;k-rate&lt;/a&gt;&lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; whose value indicates the detuning of oscillation in &lt;a href=&quot;https://en.wikipedia.org/wiki/Cent_%28music%29&quot;&gt;cents&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec558a50fd16ef9d28ac48ef176c9053d4ed8d7f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../audiotracklist&quot;&gt;&lt;code&gt;AudioTrackList&lt;/code&gt;&lt;/a&gt; object representing the list of audio tracks included in the media element. The list of tracks can be accessed using array notation, or using the object's &lt;a href=&quot;../audiotracklist/gettrackbyid&quot;&gt;&lt;code&gt;getTrackById()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94505b14a25cbeb0baea1608920da39d6308012" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../baseaudiocontext&quot;&gt;&lt;code&gt;BaseAudioContext&lt;/code&gt;&lt;/a&gt; representing the audio context you want the node to be associated with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ee2b331b30da995f43551cef7e5c7e117a44fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../biquadfilternode&quot;&gt;&lt;code&gt;BiquadFilterNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b8af0ea8ab66086773c8e51e27f6ace4f1b3ee" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84012cf4f051340516a0cffe32efc9ca9bf3fbbd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../buffersource&quot;&gt;&lt;code&gt;BufferSource&lt;/code&gt;&lt;/a&gt; (that is, either an &lt;a href=&quot;../arraybufferview&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;) which contains the media segment data you want to add to the &lt;code&gt;SourceBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c5eab58be11cd5b90677c494bfc555b45258e7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt; indicating the method of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296a7e5b0685504ad79d3ff6f1a3d23c55ea15a2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt; indicating the name of the header you want to return the text value of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9a7c07cd2ef04e313453c59a9f601be52dc2cd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt; representing all of the response's headers (except those whose field name is &lt;code&gt;Set-Cookie&lt;/code&gt; or &lt;code&gt;Set-Cookie2&lt;/code&gt;) separated by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CRLF&quot;&gt;CRLF&lt;/a&gt;, or &lt;code&gt;null&lt;/code&gt; if no response has been received. If a network error happened, an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e904b8006aadc258ee3b64666a9c7098204383e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt; representing the header's text value, or &lt;code&gt;null&lt;/code&gt; if either the response has not yet been received or the header doesn't exist in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd5bdc1832a05623e423cdae62e80a4d52f4c39" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt; sequence representing the values of the retrieved header or &lt;code&gt;null&lt;/code&gt; if this header is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fa75b5718c974f79976a173788852863f05bd7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../bytestring&quot;&gt;&lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e85799b8d04f047d57cda31690b282358ee48e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../cachestorage&quot;&gt;&lt;code&gt;CacheStorage&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce62d5bc5e62f37615444d8f76b515e6d4b84414" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../canvasgradient&quot;&gt;&lt;code&gt;CanvasGradient&lt;/code&gt;&lt;/a&gt; object (a linear or radial gradient).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79f980ed89d3ae831843d33c354dad7087d784e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../canvasimagesource&quot;&gt;&lt;code&gt;CanvasImageSource&lt;/code&gt;&lt;/a&gt; to be used as the pattern's image. It can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace7b102caec5139ca42f0fa29236d1ef77aff6b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../canvaspattern&quot;&gt;&lt;code&gt;CanvasPattern&lt;/code&gt;&lt;/a&gt; object (a repeating image).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7031be57850b9f72a331ab73217249f210c1c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../caretposition&quot;&gt;&lt;code&gt;CaretPosition&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0e932d7aec8dd431e85b25128c7ce247fdd44b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../cdatasection&quot;&gt;&lt;code&gt;CDATASection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc56d8e7abceb1ca1c9a2f1f72611acbbd1dfcce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../channelmergernode&quot;&gt;&lt;code&gt;ChannelMergerNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9204fdde319ddcf10c9b3f6e80c7f21556e9980" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../channelsplitternode&quot;&gt;&lt;code&gt;ChannelSplitterNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cd5f79a5468e2c4d18c05961731afe83cf3d92" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed70b71a7e38d9e23a7259df0d91748dac437f6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../serviceworker&quot;&gt;&lt;code&gt;ServiceWorker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2aab3c31b08923c37332fe18f4c0edf238ff6d8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../comment&quot;&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/a&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949edac4ef563dabad724dd6aa7498e3603347b7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constantsourcenode&quot;&gt;&lt;code&gt;ConstantSourceNode&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0a5db7b5657a69d1f6aa64efb40c70bb4266ab" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; describing the acceptable or required value(s) for a video track's aspect ratio. The value is the width divided by the height and is rounded to ten decimal places. For example, the standard high-definition video aspect ratio of 16:9 can be computed as 1920/1080, or 1.7777777778.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361a51b9958703fe719b6dfae44454da6e5ca62" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; describing the acceptable or required value(s) for a video track's frame rate, in frames per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a92859ee2a97f0fad32b9140f3a0046217770e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; describing the acceptable or required value(s) for an audio track's latency, with values specified in seconds. In audio processing, latency is the time between the start of processing (when sound occurs in the real world, or is generated by a hardware device) and the data being made available to the next step in the audio input or output process. In most cases, low latency is desirable for performance and user experience purposes, but when power consumption is a concern, or delays are otherwise acceptable, higher latency might be acceptable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04f96edec16f8559ffd7528ad2c3d0677d16cd0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; describing the acceptable or required value(s) for an audio track's volume, on a linear scale where 0.0 means silence and 1.0 is the highest supported volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d790cf1c82dabc1c9a1a1eb89036289897c5cc0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../convolvernode&quot;&gt;&lt;code&gt;ConvolverNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad9896b900bac4886711eaf1d649e28178e7591" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../cssomstring&quot;&gt;&lt;code&gt;CSSOMString&lt;/code&gt;&lt;/a&gt; with one of the following values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9153775edb6b2f22ffff11a4d3e669f589c96786" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../cssstylevalue&quot;&gt;&lt;code&gt;CSSStyleValue&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae9e99e0f83f856027d0b4c40822dc13b7441f6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../cssvalue&quot;&gt;&lt;code&gt;CSSValue&lt;/code&gt;&lt;/a&gt; object at the &lt;code&gt;index&lt;/code&gt; position in the &lt;code&gt;CSSValueList&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if that is not a valid index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f51e1dded32b82f0333d3daa51c4ef03bd11dd2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../customelementregistry&quot;&gt;&lt;code&gt;CustomElementRegistry&lt;/code&gt;&lt;/a&gt; object instance representing the custom element registry for the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5eb6da6cbbaa9a7cd76c593145a37f2701fac1f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; object containing data to be written to the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af816717291251da044cd7c872e96062022092b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; object which contains the &lt;a href=&quot;../dragevent&quot;&gt;&lt;code&gt;drag event's data&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b9ac530ab1521e1fdaa2684fdc79da56623cd1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e08f6b5ba061a2e93a3ce23c1c7c590bdd50fc9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; containing the specified data. If the drag item couldn't be created (for example, if the associated &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; object has no data store), &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7028f391385dd6ed91532c56250431352b4afd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; object containing &lt;a href=&quot;../datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; objects representing the items being dragged in a drag operation, one list item for each object being dragged. If the drag operation had no data, the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9770debb972eb7b408a6963eb18041984e18d6b3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../delaynode&quot;&gt;&lt;code&gt;DelayNode&lt;/code&gt;&lt;/a&gt;. The default &lt;a href=&quot;../delaynode/delaytime&quot;&gt;&lt;code&gt;DelayNode.delayTime&lt;/code&gt;&lt;/a&gt; is 0 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aab07a2790c6d92e73bf8ed7599009e3ece353e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; containing the nodes resulting from parsing XML or HTML received using &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;null&lt;/code&gt; if no data has been received or the data is not of the correct type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab5a86f003696e62de66fb37255cae50a18cd30" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d04516960e11a4dd81044b188defa9919dd258" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, in which case it is serialized before being sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e1acb192fa04e04d21ae5147cb885e53ae8b01" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5006296e47ea8cd50816d8b99352b2891088f69d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../documenttimeline&quot;&gt;&lt;code&gt;DocumentTimeline&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e63a8c76e6c58bfc21f3c0438733db7c995d8f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../documenttype&quot;&gt;&lt;code&gt;DocumentType&lt;/code&gt;&lt;/a&gt; node e.g. &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; for HTML5 documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effd0222a9ac3b635e79509cceb1d5c4698c0012" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; describing the error represented by the event. The error's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMException/error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; property's value may be any exception that makes sense during the handling of media recording, including these specifically identified by the specification. The descriptions here are generic ones; you'll find more specific ones to various scenarios in which they may occur in the corresponding method references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ad500b4591fb7cee28d94be3b4dded65129541" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; that describes the error that occurred. This object's &lt;a href=&quot;../domexception/name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property should indicate the name of the error that occurred. The other fields may or may not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0346483d356016dc9b4bcc4ef85f62b560d3b09d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with a value of &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt; is thrown if the specified offset is negative or is greater than the number of 16-bit units in the node's text; a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with a value of &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt; is thrown if the node is read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9869c01ea20ca142afcffa2bf92c5ae9750c593b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the value &lt;code&gt;NO_MODIFICATION_ERR&lt;/code&gt; is thrown if one of the text nodes being replaced is read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ad76a03bff0866ab9725b75ebdfb30b7b30183" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd8a2d91637da4dcfcf54c0162d8a516f82ad05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domexception#exception-QuotaExceededError&quot;&gt;&lt;code&gt;QuotaExceededError&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; is thrown if the requested length is greater than 65536 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6de3007ec5e56a4c9c87db4a4f66136fab6265" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately after the browser receives the first byte of the response from the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def8cebdb719cebb0de087eca66e503fcd0563b0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960207b2c07dd1fc964b591eb1def91900ddc96b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately before the browser starts the domain name lookup for the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ad4fae167cbc359a3d3e8026a95a49bc715768" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately before the browser starts to establish the connection to the server to retrieve the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bda3b1c8b9208e7f0a61e379b027ddd3d0bae87" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately before the browser starts to fetch the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ee0ef692c22d424b1c5c017f70b92fe94cd33b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c187683e45ce1621487e71a91583ccead6bef8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the duration of the &lt;a href=&quot;../performanceentry&quot;&gt;&lt;code&gt;performance entry&lt;/code&gt;&lt;/a&gt;. If the duration concept doesn't apply for a particular performance metric, the browser may choose to return a duration of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc86337ae498ca92a68a6879ecbfae188a9ff25e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the first timestamp when the &lt;a href=&quot;../performanceentry&quot;&gt;&lt;code&gt;performance entry&lt;/code&gt;&lt;/a&gt; was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecdee0fedf7aaaa132e1ec65f1e41ffdc278b0e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the time after a connection is established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e5b1b95432f07afe1142413df9a3b813a0a1c7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the time immediately after the browser finishes the domain name lookup for the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c551679caa9ae16240dc394af90ac530c0898cdc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the time immediately before the bowser starts requesting the resource from the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbff7eb96921858f2a17b00162b500d43964315" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; representing the timestamp, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e80d9a3335b3ad603847706003d9faac05f3367" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; to be used in initializing the blob event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858db76fce132897fd1ed561d38593af29e82c03" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; value (which is a floating-point number) representing the number of milliseconds the user agent estimates are left in the current idle period. The value is ideally accurate to within about 5 microseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c3e84365d2b8c9ad97aa3175f2fd4a86f412f6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; value indicating the time at which the activity described by the statistics in this object was recorded, in milliseconds elapsed since the beginning of January 1, 1970, UTC. This should be accurate to within a few milliseconds but may not be entirely pricise, either because of hardware or operating system limitations or because of fingerprinting protection in the form of reduced clock precision or accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559c5a57382c96508328cb55675c978447238e05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; which indicates the time at which the &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; element experienced the intersection change described by the &lt;code&gt;IntersectionObserverEntry&lt;/code&gt;. The time is specified in milliseconds since the creation of the containing document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce224be456eacd6c074cc0ca2425eeff18b79df" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; which indicates the time at which the most recent RTP packet from the corresponding source was played out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b221567106ce02c0fb8c427f469003d46c755c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e87d2b5a3a80a970b33311d82a5b43fc4dad687" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; immediately after receiving the last byte of the response of the last redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc8eb12f54bb9a0ac2b3d0916279253e938d460" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing a time value equal to the time immediately after the user agent finishes the unload event of the previous document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c778780486bf4d7a8fa85ce121e0c5cd8d0bf6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing a time value equal to the time immediately before the load event of the current document is fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd19fa201932b95c09de3363e3b82ed5ed6275d6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing a time value equal to the time immediately before the user agent sets the current document readiness of the current document to &lt;em&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#the-end&quot;&gt;complete&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2495a8ed27fa885e723ce46cee89c7122ad6bf1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the start time of the fetch which initiates the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3bf524b24ccda8040067f6e0de71958c50b391" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the time value equal to the time immediately after the current document's &lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#the-end&quot;&gt;DOMContentLoaded&lt;/a&gt; event completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a7798030d32da9530c116de54783df96c60747" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the time value equal to the time immediately before the user agent fires the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#the-end&quot;&gt;DOMContentLoaded&lt;/a&gt; event at the current document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad07f728d4608a9b3fbdffb0ac8580fe552c1764" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to &lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#the-end&quot;&gt;interactive&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a907374ba02180cfcefeae2db8ca902a812fc4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cfb0bab30bcfdaa17fe40c2d1dfe09f3e824af" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; representing the time when the load event of the current document is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c92359b3ecee571a0f481a8b80f2ede4289a09f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dommatrix&quot;&gt;&lt;code&gt;DOMMatrix&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix&quot;&gt;&lt;code&gt;SVGMatrix&lt;/code&gt;&lt;/a&gt;  object to use as the current transformation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b82b9d35d98a0edb166bf919e4ff51f6f2571d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt; indicating the point at a given distance along the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcacd9c169397f776705fd2976f66f9b9f9e715" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt; interpreted as a point in the local coordiante system of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ecff0d0340c9c2af73cabd33acf189594fcb44" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt; interpreted as a point in the local coordinate system of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1d50059078579e67b10b4d87997dcf151e9412" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../dompointinit&quot;&gt;&lt;code&gt;DOMPointInit&lt;/code&gt;&lt;/a&gt;-compliant object, which includes both &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../dompointreadonly&quot;&gt;&lt;code&gt;DOMPointReadOnly&lt;/code&gt;&lt;/a&gt;, from which to take the values of the new point's properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3331474a622161bece07ba6328a2e3080da338dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domrect&quot;&gt;&lt;code&gt;DOMRect&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09620dc79454aebb93ea421c25c774faa59c36bc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domrectreadonly&quot;&gt;&lt;code&gt;DOMRectReadOnly&lt;/code&gt;&lt;/a&gt; which describes the part of the target element that's currently visible within the root's intersection rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b776441b0fbb7e8e7bca051aa706539525cee6a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domrectreadonly&quot;&gt;&lt;code&gt;DOMRectReadOnly&lt;/code&gt;&lt;/a&gt; which describes the root intersection rectangle. For roots which are the &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;'s viewport, this rectangle is the bounds rectangle of the entire document. Otherwise, it's the bounds of the root element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1636736862ad7aa044e1faad9fb5487ecd0cc7f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domrectreadonly&quot;&gt;&lt;code&gt;DOMRectReadOnly&lt;/code&gt;&lt;/a&gt; which describes the smallest rectangle that contains every part of the target element whose intersection change is being described. This value is obtained using the same algorithm as &lt;a href=&quot;../element/getboundingclientrect&quot;&gt;&lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;&lt;/a&gt;, so refer to that article for details on precisely what is done to obtain this rectangle and what is and is not included within its bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cc31a1d19c8058c4a4425a5cd9aac5c95e6daa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cc97898df1c1e1738f5f23c80a6db0391d0403" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; &amp;mdash; one of &lt;code&gt;audio&lt;/code&gt;, &lt;code&gt;video&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc226f50bf27983bc1d915cd0b44069609fcbc6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30ae4ea4505bbf570629ae3c2d75cabbe7e5a1f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a URL that can then be used as a document reference in HTML content, or an empty string if the URL can't be generated (such as if the file system implementation doesn't support &lt;code&gt;toURL()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df207c66e5e35cdd4a589b7690cba68ac644c951" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a comma-separated list of window features given with their corresponding values in the form &quot;name=value&quot;. These features include options such as the window's default size and position, whether or not to include scroll bars, and so forth. There must be no whitespace in the string. See &lt;a href=&quot;#Window_features&quot;&gt;Window features&lt;/a&gt; below for documentation of each of the features that can be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117d9dda825f29eeac0a53460a03c36cf4aad78f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style &amp;mdash; external resources causing a violation will not generate a sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ec0d6e7e6e76a874049be82f3a801d13500653" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a single DTMF tone character which has just begun to play, or an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) to indicate that the previous tone has stopped playing. See &lt;a href=&quot;#Tone_characters&quot;&gt;Tone characters&lt;/a&gt; for details on what characters are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce90e80ed71e52f0f41bfa1cca833eb30e6ce43d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing an error code. Possible codes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bb2ce99706cedbeffa47998653e5d1e13d354f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing an object URL that can be used to reference the contents of the specified source &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80c7b8a16c98aa3528bbcfe9c1d1c873c86a2a2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing more details about the error that was raised. Note that the spec does not define the exact wording of these messages &amp;mdash; this is up to the implementors to decide upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e2c1b64f6b39d903167cce355568f794891937" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing one or more class names to match on, separated by whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16b9082d8282c077a8c81384abe065da5dd9998" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing one or more selectors to match against. This string must be a valid &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selector&lt;/a&gt; string; if it's not, a &lt;code&gt;SyntaxError&lt;/code&gt; exception is thrown. See &lt;a href=&quot;../document_object_model/locating_dom_elements_using_selectors&quot;&gt;Locating DOM elements using selectors&lt;/a&gt; for more information about using selectors to identify elements. Multiple selectors may be specified by separating them using commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d97c40db3b2aca797d33e71a9477dbbd3c0e3da" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing one or more selectors to match against. This string must be a valid &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;compound selector list&lt;/a&gt; supported by the browser; if it's not, a &lt;code&gt;SyntaxError&lt;/code&gt; exception is thrown. See &lt;a href=&quot;../document_object_model/locating_dom_elements_using_selectors&quot;&gt;Locating DOM elements using selectors&lt;/a&gt; for more information about using selectors to identify elements. Multiple selectors may be specified by separating them using commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41b8bac0de134ad19682238247daf9681929a71" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a &lt;code&gt;SYNTAX_ERR&lt;/code&gt; exception is thrown. See &lt;a href=&quot;../document_object_model/locating_dom_elements_using_selectors&quot;&gt;Locating DOM elements using selectors&lt;/a&gt; for more about selectors and how to manage them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fba1800a678adc361d433af74e90c2818d8aa13" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the DTMF codes to be transmitted to the recipient. Specifying an empty string as the &lt;code&gt;tones&lt;/code&gt; parameter clears the tone buffer, aborting any currently queued tones. A &quot;,&quot; character inserts a two second delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da42c1237892f087b3d7343b47bcd85e85ffa2fc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the GLSL source code to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8d11f456477de8842fff76aba56e4819ead5d8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the HTML serialization of the element's descendants. Setting the value of &lt;code&gt;innerHTML&lt;/code&gt; removes all of the element's descendants and replaces them with nodes constructed by parsing the HTML given in the string &lt;var&gt;htmlString&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f3b0fc58cd4bef991c3d256103cbd4bb8710c1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the ID of the overall hardware unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e53a3260abea70cc09299441c3a62c3a24269a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the MIME type of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f20a8c12b5f5bd2bc9578a209aa2d81b2564b1d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the XML representation of the specified DOM tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70002053b5dd67e0513111c438fa6db8aec70b56" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the condition to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db8d31fe3c1cfc125c8bcf322047137e261cf50" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the container's &lt;code&gt;src&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ce9e287a95e07caefb41f53795358a3dd28343" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the container's type, one of &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;embed&lt;/code&gt;, or &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ef8b25428df706422d4612e1dd4149a8a3d752" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the containers &lt;code&gt;id&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1deba23b4cdb4ae7f8578767ac9ba65c6210fc16" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the credential's given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f21752befacf91898e1ba31e1b82a92f013687f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the human-readable name of the specific VR display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80597226a75428d207a418a2961120970e2c0373" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the CSS property to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7267962db24941667f7c035c89116d93edd698" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the connected database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c7185ac311448f4f1259a15bed8516ebdeca7b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the event. This is always &lt;code&gt;&quot;tonechange&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b843e96d75f0ea41c4b542b73f9c8c7dd6ac037" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the key you want to create/update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a99f5ac31cc00181b47b48b3ef5a7fffcfdcf61" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the key you want to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406e67fbc859a0f6e8ae211a0f6aa9c49b6093ba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the key you want to retrieve the value of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5596054e26b53d420706a943093edc13eb5d5aec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the name of the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48972c4228bc4d57266e61421c58910286a19a60" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the object store's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f8f40aa2a29377b50a8c5da84865153237e4e5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the password that corresponds to the transport's &lt;code&gt;usernameFragment&lt;/code&gt; string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803f827fc51fb9ea861896736593e8dc4c7bed4a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the payment method identifier for the payment handler being used. This is an empty string by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c3d3335638a943473daa3609c0be33c1a7ce2d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the prefix associated to this namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4896cff6b08d4677d9823d4e11a10288add4b785" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the requested &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs&quot;&gt;data URI&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b33db01e5d981e2c0074ee69833a5a834bf96a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the rule to be inserted. What the inserted rule must contain depends on its type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7c4c41768a5bc5383a3b7bbdd9a5a0656ec57a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the sorting code portion of the address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461d67708713b37a05f6c3babf7dbaf06c2b042b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the source code of the shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ace01ec708a3abef754f26f62c0060a6d96e0c9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the telephone number for the recipient of the shipment or of the responsible party for payment. If no phone number is available, this value is an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0f3726f9a4558cccdc66e55098bec83f6582cc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the text that will be synthesised when the utterance is spoken..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a9b6ca1097e7bd72e8ecef6d0a1f7b4d5ef816" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the token to query for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70960ff56642634ff60635375d7de8d4acfd385" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the username fragment (usually referred to in shorthand as &quot;ufrag&quot; or &quot;ice-ufrag&quot;) that, along with the ICE password (&quot;ice-pwd&quot;), uniquely identifies a single ongoing ICE interaction. The string may be up to 256 characters long, and has no default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e31a2557e3ca4a6ffbf01627f7764b274e26d6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the username fragment that, in tandem with the &lt;a href=&quot;password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt;, uniquely identify the ICE session being used by the transport. The string may be up to 256 characters long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa5e0ceaee1a1b7f04725177bdd2e7f7927ddd9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt; CSS property associated with the transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e817ca6d02a5b3bf26dddaaba8826d1e54eed6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt; CSS property associated with the transition. It defaults to &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6667e71ed86016475f56744417933a58002cbb05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value of the CSS property to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700aafb70ae0152850df9ba923a4a24ba71ecfa1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value of the key. If the key does not exist, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca927ab2e15462b2f580574abd981f64579f0ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b74245c03ac2bd412dd499a96d5795f3c9949b7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the value you want to give the key you are creating/updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08838fba2bdbda0eb3a882957056fcac157338bb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; contains a credential's given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca84c5676a5c8ad6a2c52163298bc60f9e55b837" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; defining the type of &lt;code&gt;PushEvent&lt;/code&gt;. This can be &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pushsubscriptionchange&quot;&gt;pushsubscriptionchange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a813afa35ed27dee568c27fe7fa0dd89ae43e161" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; describing the properties of the candidate, taken directly from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SDP&quot;&gt;SDP&lt;/a&gt; attribute &lt;code&gt;&quot;candidate&quot;&lt;/code&gt;. The candidate string specifies the network connectivity information for the candidate. If the &lt;code&gt;candidate&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the end of the candidate list has been reached; this candidate is known as the &quot;end-of-candidates marker.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9c561341060d76679f9b01bfa9546478f1d42a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; describing the type of event object you want to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6e2a8101a7853349e871e55e1cea455fc3a996" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; describing the type of the current selection. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2f00ee7e21e443303da41d55db120fdb84c1bb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; giving the name of the person receiving or paying for the purchase, or the name of a contact person in other contexts. If no name is available, this string is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebd6bd51fbbab32ee1508c86fffabaab91f410c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; identifying the algorithm to use in creating the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26867bf2be3d1d1a401f106432a20fabd6021050" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; identifying the key system. For example &lt;code&gt;com.example.somesystem&lt;/code&gt; or &lt;code&gt;org.w3.clearkey&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ad05b4d404110aa35ae587df21907a80df27ff" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; identifying the platform on which the browser is running, or an empty string if the browser declines to (or is unable to) identify the platform. &lt;code&gt;platform&lt;/code&gt; is a string that must be an empty string or a string representing the platform on which the browser is executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd9eac3e05c3d4e092d5ac1eba9ebfd9d9527e5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; identifying the specific type of animation event that occurred. The following values are allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199c2cc7fa344ead3ca4421bfdd922c2b5ac859a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating how to repeat the pattern's image. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfef679495f86b11584ae2fe9793eb29697d7a0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the ID of the track to locate within the track list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5814074c0f703f4eada5c911ed22917fca7ff1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the URL of the resource to be loaded. This can be a path or URL to an HTML page, image file, or any other resource which is supported by the browser. If the empty string (&quot;&quot;) is specified as &lt;code&gt;url&lt;/code&gt;, a blank page is opened into the targeted browsing context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e47748e85fded7075a8d6dce4581d1c58420e23" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the active uniform block name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ab0f514e28933b2e18995dbdeffe922143df93" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the city or town portion of the address described by the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b322072aafb4193ece10d3945e649b2dfd97bce1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the fill type to use in order to properly render an affected element when outside the animation's &lt;strong&gt;active interval&lt;/strong&gt; (that is, when it's not actively animating). The default is &lt;code&gt;&quot;auto&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee7ac92c0b254b1a0eb3889c389a285c447157a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the image format. The default format type is &lt;code&gt;image/png&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887bcba29a23315381f64f8b14b8efdf3aa4bba9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the image format. The default type is &lt;code&gt;image/png&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05c5b4eac51f7891e1bb05ef7edf0b98b4a487d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the numeric value of the payment. This must be a valid decimal number, with an optional leading minus sign (&quot;-&quot;), then one or more decimal digits 0 through 9, optionally with a decimal point (&quot;.&quot;) with at least one digit following it to represent fractional units. There must not be any leading or trailing whitespace in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f670fd18918e25bd6addccec74ad5fa69f14d93c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the one to three character alphanumeric code representing the region portion of the address. This should correspond to &lt;code&gt;region&lt;/code&gt;, but should be the ISO 3166--2 standard's region code. The string is empty if the region code couldn't be determined, isn't needed for the address's &lt;a href=&quot;country&quot;&gt;&lt;code&gt;country&lt;/code&gt;&lt;/a&gt;, or was not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830b5c848ab927848d4e63ee315a63b69efd9ee5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the state of the payment operation upon completion. It must be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5898106eea69e0253fd109188fbf6aae6d9aaef5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; indicating the sublocality portion of the address. This may be an empty string if no sublocality is available or required. It's used to provide disambiguation when a city may include areas that duplicate street names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9580288bb62329d87b2c34a171d180df71ba71" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; listing the tones to be played. If the string is empty, there are no tones pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ffa7cd4e6d72c9d2d37fad67b3edd396e2dcb7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; naming the type of error. The possible error types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814056ff9aa86d07f367299f643c954628b8a7a5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; object containing the URL of the text track data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e895a306b1504641860681972db978774e7ed7fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; object containing the absolute URL of the chosen media source; this may be an empty string if &lt;code&gt;networkState&lt;/code&gt; is &lt;code&gt;EMPTY&lt;/code&gt;; otherwise, it will be one of the resources listed by the &lt;a href=&quot;../htmlsourceelement&quot;&gt;&lt;code&gt;HTMLSourceElement&lt;/code&gt;&lt;/a&gt; contained within the media element, or the value or src if no &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/a&gt; element is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813f73f9a35ce86d5cc3e2223a6c1dfe19fcaac5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189d69b662b4d013383d534bb5a4e1e9b6387f3d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; parsed as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ef6078ecdcfb40cbce4232404bf61a7de75599" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; parsed as CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt; value. The default font is 10px sans-serif.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed57cd6f0c2526b8aca33bed3474b2f6535ff4d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; parsed as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt; value. The default value is fully-transparent black.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80434bafcec13e4671a392e76b4171b17dc70a3a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; providing a detailed, specific explanation of what went wrong and possibly how it might be fixed. This is &lt;em&gt;not&lt;/em&gt; simply a generic description of the &lt;a href=&quot;code&quot;&gt;&lt;code&gt;MediaError.code&lt;/code&gt;&lt;/a&gt; property's value, but instead goes deeper into the specifics of this particular error and its circumstances. If no specific details are available, this string is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808cec9665b4692098f54cfd3180f24431c88d1a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; providing a human-readable reason for the abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c73401a0b0fd067b755c5613f1d9bcf1d122c3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; providing a human-readable reason for the cancellation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08ddf7642fae9f72cc7f4cc833039b4030bcd63" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; providing the IP address from which the candidate comes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac1b5831987bf9b3fc7f1cbdde69527c44e4165" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; represenitng the text to the synthesised. The maximum length of the text that can be spoken in each utterance is 32,767 characters.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
