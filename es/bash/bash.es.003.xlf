<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="bash">
    <body>
      <group id="bash">
        <trans-unit id="e8e92a165d03aa131d9708cb7b1c7f471a2ab809" translate="yes" xml:space="preserve">
          <source>Re-execute the last keyboard macro defined, by making the characters in the macro appear as if typed at the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effb4933fa2e63251b68ec5d7c1e666532352f06" translate="yes" xml:space="preserve">
          <source>Read and execute commands from the &lt;var&gt;filename&lt;/var&gt; argument in the current shell context. If &lt;var&gt;filename&lt;/var&gt; does not contain a slash, the &lt;code&gt;PATH&lt;/code&gt; variable is used to find &lt;var&gt;filename&lt;/var&gt;. When Bash is not in &lt;small&gt;POSIX&lt;/small&gt; mode, the current directory is searched if &lt;var&gt;filename&lt;/var&gt; is not found in &lt;code&gt;$PATH&lt;/code&gt;. If any &lt;var&gt;arguments&lt;/var&gt; are supplied, they become the positional parameters when &lt;var&gt;filename&lt;/var&gt; is executed. Otherwise the positional parameters are unchanged. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eff02ab161dba3b794244a0b2a0bc9292837ec4" translate="yes" xml:space="preserve">
          <source>Read and execute commands from the first non-option argument &lt;var&gt;command_string&lt;/var&gt;, then exit. If there are arguments after the &lt;var&gt;command_string&lt;/var&gt;, the first argument is assigned to &lt;code&gt;$0&lt;/code&gt; and any remaining arguments are assigned to the positional parameters. The assignment to &lt;code&gt;$0&lt;/code&gt; sets the name of the shell, which is used in warning and error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064334f8adba9fdde25b49ab67f4bcb15b2119a9" translate="yes" xml:space="preserve">
          <source>Read commands but do not execute them. This may be used to check a script for syntax errors. This option is ignored by interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e73a2935bf6fb41cc58a84fc8cf51a963e7d201" translate="yes" xml:space="preserve">
          <source>Read enough characters to consume a multi-key sequence such as those defined for keys like Home and End. Such sequences begin with a Control Sequence Indicator (CSI), usually ESC-[. If this sequence is bound to &quot;\e[&quot;, keys producing such sequences will have no effect unless explicitly bound to a readline command, instead of inserting stray characters into the editing buffer. This is unbound by default, but usually bound to ESC-[.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34d335e5bc252cd69cecf72f39700bbaeb2dc41" translate="yes" xml:space="preserve">
          <source>Read in the contents of the &lt;var&gt;inputrc&lt;/var&gt; file, and incorporate any bindings or variable assignments found there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6081c7addda7dc2289b87dbc3e34e9c332c8561a" translate="yes" xml:space="preserve">
          <source>Read input from file descriptor &lt;var&gt;fd&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53dd130d1ca5c7f7d16fcfff718d3381664c95a2" translate="yes" xml:space="preserve">
          <source>Read key bindings from &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677d8e8943ea53986371b81b8f47e29921cf16bd" translate="yes" xml:space="preserve">
          <source>Read lines from file descriptor &lt;var&gt;fd&lt;/var&gt; instead of the standard input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2bcc27cab2e2e77b3992f61038ebbb6898f003" translate="yes" xml:space="preserve">
          <source>Read lines from the standard input into the indexed array variable &lt;var&gt;array&lt;/var&gt;, or from file descriptor &lt;var&gt;fd&lt;/var&gt; if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c476854ed7896dda238661313fba6c31a993cf" translate="yes" xml:space="preserve">
          <source>Read the history file and append its contents to the history list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cac7cbc61675da18b7360c1c19859cf8f5a1347" translate="yes" xml:space="preserve">
          <source>Readline (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;) is used to obtain the line. Readline uses the current (or default, if line editing was not previously active) editing settings, but uses Readline&amp;rsquo;s default filename completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9261d989954c7b7046d8d5da35a3d9f72189977" translate="yes" xml:space="preserve">
          <source>Readline (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;) is used to read commands from the user&amp;rsquo;s terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5256cf04581ccfb8e3e4bad7821c27f7a316efeb" translate="yes" xml:space="preserve">
          <source>Readline Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0701dc1691b7daac3ceb46b2c6261b38565130" translate="yes" xml:space="preserve">
          <source>Readline Bare Essentials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa539124a0b26985cf24459007eb176e1472b9ce" translate="yes" xml:space="preserve">
          <source>Readline Init File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eeafb8ffd3a28e649f315c515c556710224b974" translate="yes" xml:space="preserve">
          <source>Readline Init File Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4635fa3d81a11b04ec5366f497bc2cbc272a80" translate="yes" xml:space="preserve">
          <source>Readline Interaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45f73f8a5a1231bda11292c25f939251f409e63" translate="yes" xml:space="preserve">
          <source>Readline Killing Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e74a61d5c8b53ac10a08e8ad8f34d3d84624c96" translate="yes" xml:space="preserve">
          <source>Readline Movement Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb986ce2f2603aea51cd70ffa80dc262027988b" translate="yes" xml:space="preserve">
          <source>Readline implements a facility similar in spirit to the conditional compilation features of the C preprocessor which allows key bindings and variable settings to be performed as the result of tests. There are four parser directives used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ea0f277c4a16a18a17b56da2260a8684cbe982" translate="yes" xml:space="preserve">
          <source>Readline key binding names (see &lt;a href=&quot;bindable-readline-commands#Bindable-Readline-Commands&quot;&gt;Bindable Readline Commands&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbd615dfe7e04b424bd2e094a3fc6fe1a8238ed" translate="yes" xml:space="preserve">
          <source>Readline provides commands for searching through the command history (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;) for lines containing a specified string. There are two search modes: &lt;em&gt;incremental&lt;/em&gt; and &lt;em&gt;non-incremental&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de240eae3d73af3cde958b9f23e7a378c2e5841b" translate="yes" xml:space="preserve">
          <source>Readline remembers the last incremental search string. If two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f0bfef392ca730e68c1908956fddd731cb50a7" translate="yes" xml:space="preserve">
          <source>Readline vi Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3752072696d882155f26b4d67d9627d3bdf33693" translate="yes" xml:space="preserve">
          <source>Readline, how to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0399196285befb6961f97dc8e05d687771fd0e2" translate="yes" xml:space="preserve">
          <source>Reads its input from a file (see &lt;a href=&quot;shell-scripts#Shell-Scripts&quot;&gt;Shell Scripts&lt;/a&gt;), from a string supplied as an argument to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8751f53633e52277195e714b19451446ec5bc1" translate="yes" xml:space="preserve">
          <source>Redirecting output using the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4714516211847184828940ea5aa0b0281a73b459" translate="yes" xml:space="preserve">
          <source>Redirection errors encountered by shell builtins will not cause the shell to exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97abc05a1f8c3a95d64f1aa933a6ea087152d90" translate="yes" xml:space="preserve">
          <source>Redirection of input causes the file whose name results from the expansion of &lt;var&gt;word&lt;/var&gt; to be opened for reading on file descriptor &lt;code&gt;n&lt;/code&gt;, or the standard input (file descriptor 0) if &lt;code&gt;n&lt;/code&gt; is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1888da0c57abce25aae902bc7690d5fcfd42f9e1" translate="yes" xml:space="preserve">
          <source>Redirection of output causes the file whose name results from the expansion of &lt;var&gt;word&lt;/var&gt; to be opened for writing on file descriptor &lt;var&gt;n&lt;/var&gt;, or the standard output (file descriptor 1) if &lt;var&gt;n&lt;/var&gt; is not specified. If the file does not exist it is created; if it does exist it is truncated to zero size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70506ee7736a10f272144c7972d31203d933474f" translate="yes" xml:space="preserve">
          <source>Redirection of output in this fashion causes the file whose name results from the expansion of &lt;var&gt;word&lt;/var&gt; to be opened for appending on file descriptor &lt;var&gt;n&lt;/var&gt;, or the standard output (file descriptor 1) if &lt;var&gt;n&lt;/var&gt; is not specified. If the file does not exist it is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cd63f3529b2ec870e10b83e39ae7da2d214f2b" translate="yes" xml:space="preserve">
          <source>Redirection operators do not perform filename expansion on the word in the redirection unless the shell is interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f5cd3fdb8f3c1b9abaeb65984763e80aa7f7da" translate="yes" xml:space="preserve">
          <source>Redirection operators do not perform word splitting on the word in the redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb9caefdf646c7a0ccceccdf48dd3a42d43224b" translate="yes" xml:space="preserve">
          <source>Redirections</source>
          <target state="translated">Redirections</target>
        </trans-unit>
        <trans-unit id="4aa44ee6aeb72be5ddb71e07f126819a3878fd98" translate="yes" xml:space="preserve">
          <source>Redirections are performed as described above (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18100e01c567db13f752a8411fbfcc9aeebe693" translate="yes" xml:space="preserve">
          <source>Redirections using file descriptors greater than 9 should be used with care, as they may conflict with file descriptors the shell uses internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16003ddb633decec2e4971aa00d7a9af5ba2448" translate="yes" xml:space="preserve">
          <source>Refer to command line &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eb48619843d8706724f441e19a5095c0cc1b6a" translate="yes" xml:space="preserve">
          <source>Refer to the command &lt;var&gt;n&lt;/var&gt; lines back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa3616c6da8583a1f02d0d9ba47b165a77f526d" translate="yes" xml:space="preserve">
          <source>Refer to the most recent command preceding the current position in the history list containing &lt;var&gt;string&lt;/var&gt;. The trailing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16208c720f2db06422fdf9c5951c63032cad11a1" translate="yes" xml:space="preserve">
          <source>Refer to the most recent command preceding the current position in the history list starting with &lt;var&gt;string&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046dacff2c15b17795af0e5d04466d7bf47e6cda" translate="yes" xml:space="preserve">
          <source>Refer to the previous command. This is a synonym for &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1502e5f9fd5dcd73ddd5f922923085b3036407" translate="yes" xml:space="preserve">
          <source>Referencing an array variable without a subscript is equivalent to referencing with a subscript of 0. Any reference to a variable using a valid subscript is legal, and &lt;code&gt;bash&lt;/code&gt; will create an array if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c932b92f7806ab6d803bf39c56e47e37a994413" translate="yes" xml:space="preserve">
          <source>Refresh the current line. By default, this is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860c204be46c57a29c194bbb65ffdad59c1c581d" translate="yes" xml:space="preserve">
          <source>Remove a trailing &lt;var&gt;delim&lt;/var&gt; (default newline) from each line read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9478db503eeccf18f70a4a14b0996462ead0709" translate="yes" xml:space="preserve">
          <source>Remove a trailing pathname component, leaving only the head.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc955bb32973eef8359561e3d145c53e70c8c87b" translate="yes" xml:space="preserve">
          <source>Remove a trailing suffix of the form &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b70d0756c6980763db819cb7a052a3af2fadd8d" translate="yes" xml:space="preserve">
          <source>Remove all but the trailing suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da97f2000768b9dcaf83944cc4c3866a1548dfa" translate="yes" xml:space="preserve">
          <source>Remove all leading pathname components, leaving the tail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee72df8453df43c975dacbf691189f1b70579bb2" translate="yes" xml:space="preserve">
          <source>Remove any current binding for &lt;var&gt;keyseq&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbf3b66c3e4d65dc70c82ec371087b8bb8e9f2f" translate="yes" xml:space="preserve">
          <source>Remove each &lt;var&gt;name&lt;/var&gt; from the list of aliases. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee68761e723d44ae7a9fd53a286a1c2dce32369b" translate="yes" xml:space="preserve">
          <source>Remove each variable or function &lt;var&gt;name&lt;/var&gt;. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c8ed56a1ecd4f3ed5d202e9e22b0f8de3e53b0" translate="yes" xml:space="preserve">
          <source>Removes the &lt;var&gt;N&lt;/var&gt;th directory (counting from the left of the list printed by &lt;code&gt;dirs&lt;/code&gt;), starting with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f50017f0d792110983ddddb0ef627fd6522f225" translate="yes" xml:space="preserve">
          <source>Removes the &lt;var&gt;N&lt;/var&gt;th directory (counting from the right of the list printed by &lt;code&gt;dirs&lt;/code&gt;), starting with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d2c8acc1031935891dda3df6634f1f148128ed" translate="yes" xml:space="preserve">
          <source>Repeat the previous substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483cb6b1daaf74d912f74ee51792fd3c177c2af4" translate="yes" xml:space="preserve">
          <source>Reserved Word Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87a1cebc20c29e56cc868e0e0eb834f0c5e41d1" translate="yes" xml:space="preserve">
          <source>Reserved words appearing in a context where reserved words are recognized do not undergo alias expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4115b00edc8af2b3025a7285db77faa63020b194" translate="yes" xml:space="preserve">
          <source>Restricts the values of &lt;var&gt;optname&lt;/var&gt; to be those defined for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac46b11f6eb237f8c3706bbff228fe76426f1b07" translate="yes" xml:space="preserve">
          <source>Resume each suspended job &lt;var&gt;jobspec&lt;/var&gt; in the background, as if it had been started with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3046b872f8310fc13f53f5bf211b7a32c2b5f997" translate="yes" xml:space="preserve">
          <source>Resume the job &lt;var&gt;jobspec&lt;/var&gt; in the foreground and make it the current job. If &lt;var&gt;jobspec&lt;/var&gt; is not supplied, the current job is used. The return status is that of the command placed into the foreground, or non-zero if run when job control is disabled or, when run with job control enabled, &lt;var&gt;jobspec&lt;/var&gt; does not specify a valid job or &lt;var&gt;jobspec&lt;/var&gt; specifies a job that was started without job control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676adec87b4051fd49b759b211042980592fa78e" translate="yes" xml:space="preserve">
          <source>Resume the next iteration of an enclosing &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt; loop. If &lt;var&gt;n&lt;/var&gt; is supplied, the execution of the &lt;var&gt;n&lt;/var&gt;th enclosing loop is resumed. &lt;var&gt;n&lt;/var&gt; must be greater than or equal to 1. The return status is zero unless &lt;var&gt;n&lt;/var&gt; is not greater than or equal to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eef89ab48bc9bfe471b676f36b1e1244a457ab1" translate="yes" xml:space="preserve">
          <source>Return a status of 0 or 1 depending on the evaluation of the conditional expression &lt;var&gt;expression&lt;/var&gt;. Expressions are composed of the primaries described below in &lt;a href=&quot;bash-conditional-expressions#Bash-Conditional-Expressions&quot;&gt;Bash Conditional Expressions&lt;/a&gt;. Word splitting and filename expansion are not performed on the words between the &lt;code&gt;[[&lt;/code&gt; and &lt;code&gt;]]&lt;/code&gt;; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution, process substitution, and quote removal are performed. Conditional operators such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa88c2274c8dc26f3465f2bb4b15c16743bacc2" translate="yes" xml:space="preserve">
          <source>Returns the context of any active subroutine call (a shell function or a script executed with the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be51d39042db6bcb9d633e2e6f84cbf5123bada0" translate="yes" xml:space="preserve">
          <source>Returns the value of &lt;var&gt;expr&lt;/var&gt;. This may be used to override the normal precedence of operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810cbc33ccdb39eb9cc8a3cff984488980adbc63" translate="yes" xml:space="preserve">
          <source>Returns the value of &lt;var&gt;expression&lt;/var&gt;. This may be used to override the normal precedence of operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410dea9704c23780fcca673e74ac4a6dd4731199" translate="yes" xml:space="preserve">
          <source>Rotate the kill-ring, and yank the new top. You can only do this if the prior command is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58386e4dcc5ee51a6e6d3fbd5b21f1e20edcd769" translate="yes" xml:space="preserve">
          <source>Rotate the kill-ring, and yank the new top. You can only do this if the prior command is &lt;code&gt;yank&lt;/code&gt; or &lt;code&gt;yank-pop&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9024935a09a4d4bd92973f39af6b051bf96e60bc" translate="yes" xml:space="preserve">
          <source>Run a shell builtin, passing it &lt;var&gt;args&lt;/var&gt;, and return its exit status. This is useful when defining a shell function with the same name as a shell builtin, retaining the functionality of the builtin within the function. The return status is non-zero if &lt;var&gt;shell-builtin&lt;/var&gt; is not a shell builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca65886555cc0be1beb30a279c4d1f19a91313e" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;configure&lt;/code&gt; takes some time. While running, it prints messages telling which features it is checking for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5507775221e4c8b561f63d6cdbb40a52336b7272" translate="yes" xml:space="preserve">
          <source>Running commands in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21434a0bb117aa8f39475e4ca02569853a7e063f" translate="yes" xml:space="preserve">
          <source>Runs &lt;var&gt;command&lt;/var&gt; with &lt;var&gt;arguments&lt;/var&gt; ignoring any shell function named &lt;var&gt;command&lt;/var&gt;. Only shell builtin commands or commands found by searching the &lt;code&gt;PATH&lt;/code&gt; are executed. If there is a shell function named &lt;code&gt;ls&lt;/code&gt;, running &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="4b9079dcb3b5d1ef1e40482f9c01179073a53f17" translate="yes" xml:space="preserve">
          <source>SGML</source>
          <target state="translated">SGML</target>
        </trans-unit>
        <trans-unit id="a0d2ebea0767c4e8b2e83448e1dcf6419bde82a8" translate="yes" xml:space="preserve">
          <source>SIG</source>
          <target state="translated">SIG</target>
        </trans-unit>
        <trans-unit id="b3ab5acc6715019d9c52459321ac5f00d86ca1b8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd9f421ed9570ba368f14078658dbedd6dfc555" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0232a89a4b3851f4e0b354c82f58a4d95943a2d1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-E&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2049c4889e3333cef7e7109245f43f1a1d802877" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-H&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757972fa08fdc139d28c1a51467d4de06f96c00d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-P&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde9c7dd75e4ee090f37d665fd1fdca2661acf25" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b315111db2826cf2356ada0ba7961e18a19c815e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e560b23cc59f45a4682fa6b151603bb3d367f4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c37bed9a8ed5dab44b198cfc76e6ac656c62e77" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c58540557e76ce8260d1c51f33f659860f0f13" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26641d53e86431f10075c80818bd041945c4ec38" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e52b3a85a93d869920f19ea207a67316d34852b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-k&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738edda884bb4b94a224ad7b453757b45d605c9e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-m&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761d3a02fbd3a29330aca112651cad7cf08002da" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aac532927e50a060e3662ee8a8977f49b71ae40" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d84f86032a577dce55f1bab093d93252c582f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7850441383deedb684ab489f5083ae2fd2df590" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-u&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e11ac3a74a137de9fde7b45ae0edfd2e826c598" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-v&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b477a6eadf53257d7fef0d736d8021f4c2176cf7" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4548da94adeb1a7d6113196038156c166f3aae4" translate="yes" xml:space="preserve">
          <source>Sample Init File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888c4957ecb057292736a385608f1df8e8b90bbb" translate="yes" xml:space="preserve">
          <source>Save the current directory on the top of the directory stack and then &lt;code&gt;cd&lt;/code&gt; to &lt;var&gt;dir&lt;/var&gt;. With no arguments, &lt;code&gt;pushd&lt;/code&gt; exchanges the top two directories and makes the new top the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2966717ae5722f36e02c5c0e62baf8845b2f51e2" translate="yes" xml:space="preserve">
          <source>Saving and re-executing typed characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3556c32b02a75d63ea3da2f5d625217db6941ba" translate="yes" xml:space="preserve">
          <source>Search backward starting at the current line and moving &amp;lsquo;up&amp;rsquo; through the history as necessary using a non-incremental search for a string supplied by the user. The search string may match anywhere in a history line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117e75f683cb900c37e9ae76a96a2f8501b04e56" translate="yes" xml:space="preserve">
          <source>Search backward starting at the current line and moving &amp;lsquo;up&amp;rsquo; through the history as necessary. This is an incremental search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ce28fb2d502b0d327785c6f30402130753e8fa" translate="yes" xml:space="preserve">
          <source>Search backward through the history for the string of characters between the start of the current line and the point. The search string may match anywhere in a history line. This is a non-incremental search. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec9d621fe65e16d2bef7f0415702a3637234cae" translate="yes" xml:space="preserve">
          <source>Search backward through the history for the string of characters between the start of the current line and the point. The search string must match at the beginning of a history line. This is a non-incremental search. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ebb12ddc40ec59ceaf9ecb8d6717f9bec0816d" translate="yes" xml:space="preserve">
          <source>Search forward starting at the current line and moving &amp;lsquo;down&amp;rsquo; through the history as necessary using a non-incremental search for a string supplied by the user. The search string may match anywhere in a history line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f65d9472a1d1f7b69d8d9e5da57e1bda91bc29f" translate="yes" xml:space="preserve">
          <source>Search forward starting at the current line and moving &amp;lsquo;down&amp;rsquo; through the history as necessary. This is an incremental search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b441d650d985dfd99c3d02b61c908328eee98df2" translate="yes" xml:space="preserve">
          <source>Search forward through the history for the string of characters between the start of the current line and the point. The search string may match anywhere in a history line. This is a non-incremental search. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1911c5b41c13e6230f95afe0d1b7280bbfa8cde" translate="yes" xml:space="preserve">
          <source>Search forward through the history for the string of characters between the start of the current line and the point. The search string must match at the beginning of a history line. This is a non-incremental search. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="translated">Searching</target>
        </trans-unit>
        <trans-unit id="31ddec33c025f4ab1e3daab9a943baf4160525a6" translate="yes" xml:space="preserve">
          <source>Searching for Commands in the History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49384eb7f7095924fbccb6a68c9a90f7b31ef5d7" translate="yes" xml:space="preserve">
          <source>Searching through previous lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="translated">Section</target>
        </trans-unit>
        <trans-unit id="87cfa83506f3b68a4318453594eb5887e1ca439c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;, for a full description of the &lt;code&gt;let&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bc74822663d5560f560421a6f191d05df95ff3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;compiling-for-multiple-architectures#Compiling-For-Multiple-Architectures&quot;&gt;Compiling For Multiple Architectures&lt;/a&gt; for more information about building in a directory separate from the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0306acf5ea03fde6185f177668bb4080eeed40" translate="yes" xml:space="preserve">
          <source>See the description of &lt;code&gt;shopt&lt;/code&gt; in &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;, for a description of the &lt;code&gt;nocaseglob&lt;/code&gt;, &lt;code&gt;nullglob&lt;/code&gt;, &lt;code&gt;failglob&lt;/code&gt;, and &lt;code&gt;dotglob&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6142ee968e835bf0e6a4b4bc0768ee08a0e5da77" translate="yes" xml:space="preserve">
          <source>See the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213feed9a5539378750d4ed404b169c593d3075b" translate="yes" xml:space="preserve">
          <source>Send a signal specified by &lt;var&gt;sigspec&lt;/var&gt; or &lt;var&gt;signum&lt;/var&gt; to the process named by job specification &lt;var&gt;jobspec&lt;/var&gt; or process &lt;small&gt;ID&lt;/small&gt;&lt;var&gt;pid&lt;/var&gt;. &lt;var&gt;sigspec&lt;/var&gt; is either a case-insensitive signal name such as &lt;code&gt;SIGINT&lt;/code&gt; (with or without the &lt;code&gt;SIG&lt;/code&gt; prefix) or a signal number; &lt;var&gt;signum&lt;/var&gt; is a signal number. If &lt;var&gt;sigspec&lt;/var&gt; and &lt;var&gt;signum&lt;/var&gt; are not present, &lt;code&gt;SIGTERM&lt;/code&gt; is used. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ebc2337356f977470f1293ce806fbc27c820bd" translate="yes" xml:space="preserve">
          <source>Service names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4a6177f02a6837f4d19a306e1ef899aba4374e" translate="yes" xml:space="preserve">
          <source>Set the default value of the &lt;var&gt;extglob&lt;/var&gt; shell option described above under &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt; to be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5953a2a30aa9094635153f1d20167ff20f8f4849" translate="yes" xml:space="preserve">
          <source>Set the default value of the &lt;var&gt;globasciiranges&lt;/var&gt; shell option described above under &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt; to be enabled. This controls the behavior of character ranges when used in pattern matching bracket expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65764090fe51055dc669a69959887bb482289cf7" translate="yes" xml:space="preserve">
          <source>Set the mark to the point. If a numeric argument is supplied, the mark is set to that position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e74191c8c7903aff2770d9578ed971047a5e5e" translate="yes" xml:space="preserve">
          <source>Set the maximum number of history entries saved in the history list. If set to zero, any existing history entries are deleted and no new entries are saved. If set to a value less than zero, the number of history entries is not limited. By default, the number of history entries is not limited. If an attempt is made to set &lt;var&gt;history-size&lt;/var&gt; to a non-numeric value, the maximum number of history entries will be set to 500.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5975e0679cfa2d728932004cab0f48fefaa4f3" translate="yes" xml:space="preserve">
          <source>Set the number of exited child status values for the shell to remember. Bash will not allow this value to be decreased below a &lt;small&gt;POSIX&lt;/small&gt;-mandated minimum, and there is a maximum value (currently 8192) that this may not exceed. The minimum value is system-dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360fc5e6fe6d2343da6d35c3bd114dd8d892db85" translate="yes" xml:space="preserve">
          <source>Set the option corresponding to &lt;var&gt;option-name&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624a9ff66d2843464d7c52bb5534a1e3c2a4c038" translate="yes" xml:space="preserve">
          <source>Set the shell process&amp;rsquo;s file creation mask to &lt;var&gt;mode&lt;/var&gt;. If &lt;var&gt;mode&lt;/var&gt; begins with a digit, it is interpreted as an octal number; if not, it is interpreted as a symbolic mode mask similar to that accepted by the &lt;code&gt;chmod&lt;/code&gt; command. If &lt;var&gt;mode&lt;/var&gt; is omitted, the current value of the mask is printed. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb143a50004ce599167ea86df628e6282520c74" translate="yes" xml:space="preserve">
          <source>Set to an integer value corresponding to the type of completion attempted that caused a completion function to be called: &lt;var&gt;TAB&lt;/var&gt;, for normal completion, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93bfbd7235bc543f9714580197e9efae6cd8c8b" translate="yes" xml:space="preserve">
          <source>Sets Readline&amp;rsquo;s idea of the current keymap for key binding commands. Built-in &lt;code&gt;keymap&lt;/code&gt; names are &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;emacs-standard&lt;/code&gt;, &lt;code&gt;emacs-meta&lt;/code&gt;, &lt;code&gt;emacs-ctlx&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;vi-move&lt;/code&gt;, &lt;code&gt;vi-command&lt;/code&gt;, and &lt;code&gt;vi-insert&lt;/code&gt;. &lt;code&gt;vi&lt;/code&gt; is equivalent to &lt;code&gt;vi-command&lt;/code&gt; (&lt;code&gt;vi-move&lt;/code&gt; is also a synonym); &lt;code&gt;emacs&lt;/code&gt; is equivalent to &lt;code&gt;emacs-standard&lt;/code&gt;. Applications may add additional names. The default value is &lt;code&gt;emacs&lt;/code&gt;. The value of the &lt;code&gt;editing-mode&lt;/code&gt; variable also affects the default keymap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a49ccc2576232caa2dd95f8bdd38a2ca972c0d1" translate="yes" xml:space="preserve">
          <source>Setting or unsetting the values of the &lt;code&gt;SHELL&lt;/code&gt;, &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, or &lt;code&gt;BASH_ENV&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4feab33520e06128900166b2ea328a5a06d249a6" translate="yes" xml:space="preserve">
          <source>Several builtin commands are described in other chapters: builtin commands which provide the Bash interface to the job control facilities (see &lt;a href=&quot;job-control-builtins#Job-Control-Builtins&quot;&gt;Job Control Builtins&lt;/a&gt;), the directory stack (see &lt;a href=&quot;directory-stack-builtins#Directory-Stack-Builtins&quot;&gt;Directory Stack Builtins&lt;/a&gt;), the command history (see &lt;a href=&quot;bash-history-builtins#Bash-History-Builtins&quot;&gt;Bash History Builtins&lt;/a&gt;), and the programmable completion facilities (see &lt;a href=&quot;programmable-completion-builtins#Programmable-Completion-Builtins&quot;&gt;Programmable Completion Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f10c9851eb8c4895108b5f89c564b7586ae422f" translate="yes" xml:space="preserve">
          <source>Several shell options settable with the &lt;code&gt;shopt&lt;/code&gt; builtin (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;) may be used to tailor the behavior of history expansion. If the &lt;code&gt;histverify&lt;/code&gt; shell option is enabled, and Readline is being used, history substitutions are not immediately passed to the shell parser. Instead, the expanded line is reloaded into the Readline editing buffer for further modification. If Readline is being used, and the &lt;code&gt;histreedit&lt;/code&gt; shell option is enabled, a failed history expansion will be reloaded into the Readline editing buffer for correction. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d196d455c3fa9fd2a98bfab753b999179a09de" translate="yes" xml:space="preserve">
          <source>Sharing Defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ae113086eb582aa819b1629e571e4bac303741" translate="yes" xml:space="preserve">
          <source>Shell Arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3224c1f995277e3c5557a97bdc2386d6237e62c4" translate="yes" xml:space="preserve">
          <source>Shell Builtin Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d91c0e9c2e10b3624ca467a6cfec024511dd3e" translate="yes" xml:space="preserve">
          <source>Shell Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe15e4425ec82a0d5b21173bc91dfd0998f4cbd" translate="yes" xml:space="preserve">
          <source>Shell Expansions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee3b593f4af7c77fae3f3aa378ffe91031089fd" translate="yes" xml:space="preserve">
          <source>Shell Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69452b908f6302de0fb97a5d52497b5b2c1174e8" translate="yes" xml:space="preserve">
          <source>Shell Operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04402536b9c3739d5f7e3de00b61d4f8d562e461" translate="yes" xml:space="preserve">
          <source>Shell Parameter Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7a4b323b9101d60b9ab2b3abaf3e64499891d9" translate="yes" xml:space="preserve">
          <source>Shell Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa50f0db9287be939f20144d6840f9c4545e702e" translate="yes" xml:space="preserve">
          <source>Shell Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b79140b03b1947a70c3de9ec506cf7e3c5b954" translate="yes" xml:space="preserve">
          <source>Shell Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93162630dd0aff4c4e1939514e8d48e6a8c32d57" translate="yes" xml:space="preserve">
          <source>Shell Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3476c67124b4d34d36fc37118f2caf069faea78a" translate="yes" xml:space="preserve">
          <source>Shell commands for conditional execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b04a421bc8120876e6ffda28fbbc5b6264ff922" translate="yes" xml:space="preserve">
          <source>Shell commands for control flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae94644c817dfa4f668bdcc23cbcfe14256b26f2" translate="yes" xml:space="preserve">
          <source>Shell commands for iterative action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20426ce9c81cc681dd8f42b3df3e80340a6bbcd9" translate="yes" xml:space="preserve">
          <source>Shell functions are a way to group commands for later execution using a single name for the group. They are executed just like a &quot;regular&quot; command. When the name of a shell function is used as a simple command name, the list of commands associated with that function name is executed. Shell functions are executed in the current shell context; no new process is created to interpret them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f0f8dc63fc5e0d5dfae93ddd52b0f79445f1fc" translate="yes" xml:space="preserve">
          <source>Shell functions may be exported to children via the environment using &lt;code&gt;export -f&lt;/code&gt; (see &lt;a href=&quot;shell-functions#Shell-Functions&quot;&gt;Shell Functions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1a591344ef38c27c0c7dc56e92d5db90adbf72" translate="yes" xml:space="preserve">
          <source>Shell option names as accepted by the &lt;code&gt;shopt&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0781bf8a9c56e345f59cfe1818bdacc0bf126a89" translate="yes" xml:space="preserve">
          <source>Shell reserved words. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7ee07fe38a4b232bddcfd2444ad9556dc0b6c5" translate="yes" xml:space="preserve">
          <source>Shell variables are allowed as operands; parameter expansion is performed before the expression is evaluated. Within an expression, shell variables may also be referenced by name without using the parameter expansion syntax. A shell variable that is null or unset evaluates to 0 when referenced by name without using the parameter expansion syntax. The value of a variable is evaluated as an arithmetic expression when it is referenced, or when a variable which has been given the &lt;var&gt;integer&lt;/var&gt; attribute using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4c0d2e6f6557fb9359dc74d3bd7455c33e50d6" translate="yes" xml:space="preserve">
          <source>Shells also provide a small set of built-in commands (&lt;em&gt;builtins&lt;/em&gt;) implementing functionality impossible or inconvenient to obtain via separate utilities. For example, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;exec&lt;/code&gt; cannot be implemented outside of the shell because they directly manipulate the shell itself. The &lt;code&gt;history&lt;/code&gt;, &lt;code&gt;getopts&lt;/code&gt;, &lt;code&gt;kill&lt;/code&gt;, or &lt;code&gt;pwd&lt;/code&gt; builtins, among others, could be implemented in separate utilities, but they are more convenient to use as builtin commands. All of the shell builtins are described in subsequent sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a433a104039438ebe5b989ec494978c370eccb94" translate="yes" xml:space="preserve">
          <source>Shells may be used interactively or non-interactively. In interactive mode, they accept input typed from the keyboard. When executing non-interactively, shells execute commands read from a file.</source>
          <target state="translated">Las conchas pueden utilizarse de forma interactiva o no interactiva.En el modo interactivo,aceptan entradas escritas desde el teclado.Cuando se ejecutan de forma no interactiva,las conchas ejecutan comandos leídos de un archivo.</target>
        </trans-unit>
        <trans-unit id="9eb81eefcb76608f374cbcb2b07579d3e8b060c1" translate="yes" xml:space="preserve">
          <source>Shells offer features geared specifically for interactive use rather than to augment the programming language. These interactive features include job control, command line editing, command history and aliases. Each of these features is described in this manual.</source>
          <target state="translated">Las carcasas ofrecen características orientadas específicamente al uso interactivo en lugar de aumentar el lenguaje de programación.Estas características interactivas incluyen el control de trabajos,la edición de la línea de comandos,el historial de comandos y los alias.Cada una de estas características se describe en este manual.</target>
        </trans-unit>
        <trans-unit id="7ac8dead1aeafe4ea6bf7399a5dda03f74e006e5" translate="yes" xml:space="preserve">
          <source>Shift the positional parameters to the left by &lt;var&gt;n&lt;/var&gt;. The positional parameters from &lt;var&gt;n&lt;/var&gt;+1 &amp;hellip; &lt;code&gt;$#&lt;/code&gt; are renamed to &lt;code&gt;$1&lt;/code&gt; &amp;hellip; &lt;code&gt;$#&lt;/code&gt;-&lt;var&gt;n&lt;/var&gt;. Parameters represented by the numbers &lt;code&gt;$#&lt;/code&gt; to &lt;code&gt;$#&lt;/code&gt;-&lt;var&gt;n&lt;/var&gt;+1 are unset. &lt;var&gt;n&lt;/var&gt; must be a non-negative number less than or equal to &lt;code&gt;$#&lt;/code&gt;. If &lt;var&gt;n&lt;/var&gt; is zero or greater than &lt;code&gt;$#&lt;/code&gt;, the positional parameters are not changed. If &lt;var&gt;n&lt;/var&gt; is not supplied, it is assumed to be 1. The return status is zero unless &lt;var&gt;n&lt;/var&gt; is greater than &lt;code&gt;$#&lt;/code&gt; or less than zero, non-zero otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c822bc3bd77ace807b4d33002b28e7e24a820c4c" translate="yes" xml:space="preserve">
          <source>Show version information for this instance of Bash on the standard output and exit successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8326ef8c6a0e70f9e778423fc49c4cc27d863c" translate="yes" xml:space="preserve">
          <source>Signal names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3efc39c953e54d1c56df25af3905e60709e6ca2" translate="yes" xml:space="preserve">
          <source>Signal the end of options, cause all remaining &lt;var&gt;arguments&lt;/var&gt; to be assigned to the positional parameters. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="2fc184e8aaf7e52a21146d63435b11b1c0addca6" translate="yes" xml:space="preserve">
          <source>Signals ignored upon entry to the shell cannot be trapped or reset. Trapped signals that are not being ignored are reset to their original values in a subshell or subshell environment when one is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf57e58b2ac73a2a1b3bd6d9abbcbb52433e971" translate="yes" xml:space="preserve">
          <source>Silent mode. If input is coming from a terminal, characters are not echoed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827cbc5ae32bef8bfd180b3a0a6e2b45bc72ccfe" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;BASH_ENV&lt;/code&gt;; used when the shell is invoked in &lt;small&gt;POSIX&lt;/small&gt; Mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b21cfb73a5a6159cb20592afcfddec78da0d021" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;complete&lt;/code&gt;, but replaces the word to be completed with a single match from the list of possible completions. Repeated execution of &lt;code&gt;menu-complete&lt;/code&gt; steps through the list of possible completions, inserting each match in turn. At the end of the list of completions, the bell is rung (subject to the setting of &lt;code&gt;bell-style&lt;/code&gt;) and the original text is restored. An argument of &lt;var&gt;n&lt;/var&gt; moves &lt;var&gt;n&lt;/var&gt; positions forward in the list of matches; a negative argument may be used to move backward through the list. This command is intended to be bound to &lt;code&gt;TAB&lt;/code&gt;, but is unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3000175f72eb6a81cd8830b24f1026a1d89430a8" translate="yes" xml:space="preserve">
          <source>Similarly, the redirection operator</source>
          <target state="translated">De manera similar,el operador de redireccionamiento</target>
        </trans-unit>
        <trans-unit id="82afd67b5cde7618bc8aa8b2d1f2d648d44ad831" translate="yes" xml:space="preserve">
          <source>Simple Command Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9191ec290d05a1dc1998165d8ee7fc38f7fa3794" translate="yes" xml:space="preserve">
          <source>Simple Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e6f993a188b102cab4f8eaef586eb697aced4b" translate="yes" xml:space="preserve">
          <source>Simple spelling correction for directory arguments to the &lt;code&gt;cd&lt;/code&gt; builtin is enabled by default (see the description of the &lt;code&gt;cdspell&lt;/code&gt; option to the &lt;code&gt;shopt&lt;/code&gt; builtin in &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672df289de5efa46029d357bc59ba26f8c054eac" translate="yes" xml:space="preserve">
          <source>Simply naming a job can be used to bring it into the foreground: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70347df7e7ad67ef6a730c9cfd8ac885732b89de" translate="yes" xml:space="preserve">
          <source>Since Bash is a completely new implementation, it does not suffer from many of the limitations of the SVR4.2 shell. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b5a1f4cdfaad0dc2b531593f9148d474721fa5" translate="yes" xml:space="preserve">
          <source>Since the coprocess is created as an asynchronous command, the &lt;code&gt;coproc&lt;/code&gt; command always returns success. The return status of a coprocess is the exit status of &lt;var&gt;command&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b154d88740e8eb4c99d20b375f601490b0c626f" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;d like Bash and Readline to take care of some of the other details for us, we use several other options to tell Bash and Readline what to do. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4530f93a4bcf9d5873d117244d6fb7434ad7291d" translate="yes" xml:space="preserve">
          <source>Single Quotes</source>
          <target state="translated">Citas individuales</target>
        </trans-unit>
        <trans-unit id="4f71fcec716bd20f7ae00979dd112873b9d2c16e" translate="yes" xml:space="preserve">
          <source>So, typically, your</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd3761332b5cb397c5d157377cce62bdeeab667" translate="yes" xml:space="preserve">
          <source>Some Miscellaneous Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267255a4c12ab1f2e8f5254abfd3c1a6926bc3b9" translate="yes" xml:space="preserve">
          <source>Some definitions used in the rest of this manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716642fefc8eff532c604a56df422b943cbe20a8" translate="yes" xml:space="preserve">
          <source>Some systems require unusual options for compilation or linking that the &lt;code&gt;configure&lt;/code&gt; script does not know about. You can give &lt;code&gt;configure&lt;/code&gt; initial values for variables by setting them in the environment. Using a Bourne-compatible shell, you can do that on the command line like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5610d9d90508da204eed446c5792bcb2dab655d" translate="yes" xml:space="preserve">
          <source>Some systems use the message catalog selected by the &lt;code&gt;LC_MESSAGES&lt;/code&gt; shell variable. Others create the name of the message catalog from the value of the &lt;code&gt;TEXTDOMAIN&lt;/code&gt; shell variable, possibly adding a suffix of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc19e38022491397d40ea19863a5ab7f9c89402" translate="yes" xml:space="preserve">
          <source>Sometimes you may mistype a character, and not notice the error until you have typed several other characters. In that case, you can type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8dca75d136f56c64bea5f7cdbda0676f01bd06" translate="yes" xml:space="preserve">
          <source>Special Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2524eba27fcc9c2fa282010d1fdf784e31bdd6" translate="yes" xml:space="preserve">
          <source>Special Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4284bcd219d11a9324304d2338552970cf17fdf" translate="yes" xml:space="preserve">
          <source>Special builtins are found before shell functions during command lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23821f0285b46591429dc6a8cfaba4bb07cad8c4" translate="yes" xml:space="preserve">
          <source>Specifies the duration Readline will wait for a character when reading an ambiguous key sequence (one that can form a complete key sequence using the input read so far, or can take additional input to complete a longer key sequence). If no input is received within the timeout, Readline will use the shorter but complete key sequence. Readline uses this value to determine whether or not input is available on the current input source (&lt;code&gt;rl_instream&lt;/code&gt; by default). The value is specified in milliseconds, so a value of 1000 means that Readline will wait one second for additional input. If this variable is set to a value less than or equal to zero, or to a non-numeric value, Readline will wait until another key is pressed to decide which key sequence to complete. The default value is &lt;code&gt;500&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5222a18a9654c60789ddc0da9128a40060e89f2f" translate="yes" xml:space="preserve">
          <source>Specify how arguments to each &lt;var&gt;name&lt;/var&gt; should be completed. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c112a66ed12a55f4331917a809dd1767c302bf43" translate="yes" xml:space="preserve">
          <source>Specify the number of lines read between each call to &lt;var&gt;callback&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fa6d950b2d286308afe1a5c75d3e0f8691903d" translate="yes" xml:space="preserve">
          <source>Specifying Numeric Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0999f4fe5537ea61c523c861300c027d97cd8c" translate="yes" xml:space="preserve">
          <source>Specifying a filename containing a slash as an argument to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c26cd33355ad993229d0f3ea4e5d2347edeb06" translate="yes" xml:space="preserve">
          <source>Specifying a filename containing a slash as an argument to the &lt;code&gt;.&lt;/code&gt; builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7980bd6666882557454c12c082d31e19357b8d" translate="yes" xml:space="preserve">
          <source>Specifying command names containing slashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0614b1458f29370837997f3884f2f67eef6b3a2" translate="yes" xml:space="preserve">
          <source>Specifying numeric arguments, repeat counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee9cc1aa83bf2a8aaa7d549089eae697b9df2fe" translate="yes" xml:space="preserve">
          <source>Specifying the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd867e0b6c84b172f4591340d20683e753516a5" translate="yes" xml:space="preserve">
          <source>Specifying the System Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ddd6c68b69ac72e74b7c6dd880d33038a2c0fd9" translate="yes" xml:space="preserve">
          <source>Specifying which words are of interest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aeb0df67539cf0c420761a22a693cfaa12ff150" translate="yes" xml:space="preserve">
          <source>Start a history substitution, except when followed by a space, tab, the end of the line, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567c88b266168afafca473cddd7cbcbcb2b323e9" translate="yes" xml:space="preserve">
          <source>Starting Bash with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c034a3aae5a5676d844a90819757e63cb5a133" translate="yes" xml:space="preserve">
          <source>Startup files are read and executed as described in &lt;a href=&quot;bash-startup-files#Bash-Startup-Files&quot;&gt;Bash Startup Files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febcaae4d914201f022c687fa2f0ffb7282a9b2a" translate="yes" xml:space="preserve">
          <source>State on the Title page the name of the publisher of the Modified Version, as the publisher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd125f9995ef5b864e6f1a55c7cdd9d9fb571ec7" translate="yes" xml:space="preserve">
          <source>Stop saving the characters typed into the current keyboard macro and save the definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbdce06be5b0cd21c7f995d5df1c2cade5fc4fb" translate="yes" xml:space="preserve">
          <source>Store the text displayed by the &lt;code&gt;help&lt;/code&gt; builtin as a single string for each help topic. This aids in translating the text to different languages. You may need to disable this if your compiler cannot handle very long string literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c2392593f2a16bfab44fa86459133e28013fc5" translate="yes" xml:space="preserve">
          <source>Storing the regular expression in a shell variable is often a useful way to avoid problems with quoting characters that are special to the shell. It is sometimes difficult to specify a regular expression literally without using quotes, or to keep track of the quoting used by regular expressions while paying attention to the shell&amp;rsquo;s quote removal. Using a shell variable to store the pattern decreases these problems. For example, the following is equivalent to the above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b155d5700514743f0c7f7adc1a55dc38f1ba951" translate="yes" xml:space="preserve">
          <source>Subshells spawned to execute command substitutions inherit the value of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b23aa091715e507faf023e66179c120e087995" translate="yes" xml:space="preserve">
          <source>Substitute &lt;var&gt;new&lt;/var&gt; for the first occurrence of &lt;var&gt;old&lt;/var&gt; in the event line. Any delimiter may be used in place of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386957cc04a842e19b9a0a5cfba54b5a1d529693" translate="yes" xml:space="preserve">
          <source>Substituting one command for another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a08ebe654dec2de8af5a599fe1989fd48d21d08" translate="yes" xml:space="preserve">
          <source>Substring expansion applied to an associative array produces undefined results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467037fc7b3205138457b59ccf0f9883df1d6797" translate="yes" xml:space="preserve">
          <source>Substring indexing is zero-based unless the positional parameters are used, in which case the indexing starts at 1 by default. If &lt;var&gt;offset&lt;/var&gt; is 0, and the positional parameters are used, &lt;code&gt;$@&lt;/code&gt; is prefixed to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0fe992457159cf8f5e272dc0000e0e754ad9fd" translate="yes" xml:space="preserve">
          <source>Suppresses normal output; the return status indicates whether the &lt;var&gt;optname&lt;/var&gt; is set or unset. If multiple &lt;var&gt;optname&lt;/var&gt; arguments are given with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01a5b1fe63cc9365811d0495d3e40c1e73353ee" translate="yes" xml:space="preserve">
          <source>Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b17845f92bf55cf0cf988dc6770d9124a4f4f4c" translate="yes" xml:space="preserve">
          <source>Suppresses the normal change of directory when rotating or adding directories to the stack, so that only the stack is manipulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc48ae9442f6fae353775185195b5b1399d37158" translate="yes" xml:space="preserve">
          <source>Suspend the execution of this shell until it receives a &lt;code&gt;SIGCONT&lt;/code&gt; signal. A login shell cannot be suspended; the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb7520495f229a0ffbc71b6ad31860cc65abc60" translate="yes" xml:space="preserve">
          <source>Swap the point with the mark. The current cursor position is set to the saved position, and the old cursor position is saved as the mark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f544332c62b864dd7b6240ba9664e2648c85ba" translate="yes" xml:space="preserve">
          <source>Syntax for the commands in the inputrc file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="9f84fa056f6a083c24eaf10179bc22047265f97e" translate="yes" xml:space="preserve">
          <source>TERMINATION</source>
          <target state="translated">TERMINATION</target>
        </trans-unit>
        <trans-unit id="aff96a9ee1ea524018a0228411aa61f76f5c6271" translate="yes" xml:space="preserve">
          <source>TRANSLATION</source>
          <target state="translated">TRANSLATION</target>
        </trans-unit>
        <trans-unit id="6e9816a8e9d0388eecdb52866188c04e75e4b1b3" translate="yes" xml:space="preserve">
          <source>TYPE</source>
          <target state="translated">TYPE</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81564e07e400e4e597011d16dfe88e3b2bf43edf" translate="yes" xml:space="preserve">
          <source>Table of builtins specific to Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471c1d8144fc9eaa397efa454b398a2d8db71f60" translate="yes" xml:space="preserve">
          <source>Tell Readline not to append a space (the default) to words completed at the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2ce318d138529c8dc713b497f699dedc67e45b" translate="yes" xml:space="preserve">
          <source>Tell Readline not to quote the completed words if they are filenames (quoting filenames is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dda040673a42d26dadb05f865e2228a44f6cd7" translate="yes" xml:space="preserve">
          <source>Tell Readline not to sort the list of possible completions alphabetically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4869f39f9060d203e4cbaa1a98e21e6d178c0158" translate="yes" xml:space="preserve">
          <source>Tell Readline that the compspec generates filenames, so it can perform any filename-specific processing (like adding a slash to directory names, quoting special characters, or suppressing trailing spaces). This option is intended to be used with shell functions specified with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3f7375b4bf296ac0f885cd8b3c24c61985590e" translate="yes" xml:space="preserve">
          <source>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89eeee04d008f3b37ba348ef52a9ad774ba5589" translate="yes" xml:space="preserve">
          <source>That means values like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="1d9c6994ab0b74e2cfb2452521c9ea5fec830157" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Cover Texts&amp;rdquo; are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789ab3cde0b22bbf74ff6949fbb28bfb30926e1b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Invariant Sections&amp;rdquo; are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79523892138877b2ffe5a4fab07cfff7aeeb1cd" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Title Page&amp;rdquo; means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, &amp;ldquo;Title Page&amp;rdquo; means the text near the most prominent appearance of the work&amp;rsquo;s title, preceding the beginning of the body of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d149b60373c6d3ba54f2d3a637bcfc7248c9681" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;publisher&amp;rdquo; means any person or entity that distributes copies of the Document to the public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed4c9f9933dd9e4b8da3ca824145866c18f6a63" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2151d1d870a888c352ddb39e67b95151e100a7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$'&amp;hellip;'&lt;/code&gt; quoting syntax, which expands ANSI-C backslash-escaped characters in the text between the single quotes, is supported (see &lt;a href=&quot;ansi_002dc-quoting#ANSI_002dC-Quoting&quot;&gt;ANSI-C Quoting&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318b7357e94166d63b447fdc8e5ff79e62ef635d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$if&lt;/code&gt; construct allows bindings to be made based on the editing mode, the terminal being used, or the application using Readline. The text of the test, after any comparison operator, extends to the end of the line; unless otherwise noted, no characters are required to isolate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81222032b8591add75e57b7abb203d434ebf5f2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators do not evaluate &lt;var&gt;expression2&lt;/var&gt; if the value of &lt;var&gt;expression1&lt;/var&gt; is sufficient to determine the return value of the entire conditional expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe31a7cdd193d8b76017034e64a464eb64bc0cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; builtins do not search the current directory for the filename argument if it is not found by searching &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cafec1cb7fa980227fa5ce2bc2995563155c35c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0&lt;/code&gt;th word. For many applications, this is the command word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e63fd7beea76870a573e92fdcb443a2069a1947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FUNCNEST&lt;/code&gt; variable, if set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed the limit cause the entire command to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a25b3adaefea8cd99b5dfd6064cb103a0833644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GLOBIGNORE&lt;/code&gt; shell variable may be used to restrict the set of file names matching a pattern. If &lt;code&gt;GLOBIGNORE&lt;/code&gt; is set, each matching file name that also matches one of the patterns in &lt;code&gt;GLOBIGNORE&lt;/code&gt; is removed from the list of matches. If the &lt;code&gt;nocaseglob&lt;/code&gt; option is set, the matching against the patterns in &lt;code&gt;GLOBIGNORE&lt;/code&gt; is performed without regard to case. The filenames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0276161bd566005688dbc574abf6de66616b40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IFS&lt;/code&gt; variable is used to split only the results of expansion, not all words (see &lt;a href=&quot;word-splitting#Word-Splitting&quot;&gt;Word Splitting&lt;/a&gt;). This closes a longstanding shell security hole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445d09811150616e91ec749f82226d5fb7f15c8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bg&lt;/code&gt; builtin uses the required format to describe each job placed in the background, which does not include an indication of whether the job is the current or previous job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb7b384d494115dd83fc455d6726d7c50d65070" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&amp;nbsp;-V&lt;/code&gt; command lists the current Readline variable names and values. See &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805be08c5acd292bb95deafad8c931b8091ba6d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&amp;nbsp;-p&lt;/code&gt; command displays Readline function names and bindings in a format that can put directly into an initialization file. See &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4ebc4b6853938afb3e6f9a3d3d933c606fc6d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; builtins (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) may be used to control loop execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d150bd895a2175703486fddb6477b44bc9cd086" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;command&lt;/code&gt; builtin allows selective disabling of functions when command lookup is performed (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec54dd1e28cd56804463fd7a5d7e0f53a262a35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;command&lt;/code&gt; builtin does not prevent builtins that take assignment statements as arguments from expanding them as assignment statements; when not in &lt;small&gt;POSIX&lt;/small&gt; mode, assignment builtins lose their assignment statement expansion properties when preceded by &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7d033377a39f9c87a2d7ec0ee7e65df00c5412" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configure&lt;/code&gt; shell script attempts to guess correct values for various system-dependent variables used during compilation. It uses those values to create a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00f66e494fabde35dd4a8862e424396e9794a64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;declare&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, and &lt;code&gt;readonly&lt;/code&gt; builtins each accept a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2680ef721f951f99511fde4337291e0355e443f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disown&lt;/code&gt; builtin can remove a job from the internal shell job table (see &lt;a href=&quot;job-control-builtins#Job-Control-Builtins&quot;&gt;Job Control Builtins&lt;/a&gt;) or suppress the sending of &lt;code&gt;SIGHUP&lt;/code&gt; to a job when the shell exits as the result of a &lt;code&gt;SIGHUP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f23967f9d07b09ced14380eb4fe57d7706bf541" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;editing-mode&lt;/code&gt; variable controls which default set of key bindings is used. By default, Readline starts up in Emacs editing mode, where the keystrokes are most similar to Emacs. This variable can be set to either &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6d32818f3b1d2f5f2232a651e3ca70d24c6998" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt; builtin commands display their output in the format required by &lt;small&gt;POSIX&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41de6dcf35f30bb96146e4f54a60530e578609e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fc&lt;/code&gt; builtin checks &lt;code&gt;$EDITOR&lt;/code&gt; as a program to edit history entries if &lt;code&gt;FCEDIT&lt;/code&gt; is unset, rather than defaulting directly to &lt;code&gt;ed&lt;/code&gt;. &lt;code&gt;fc&lt;/code&gt; uses &lt;code&gt;ed&lt;/code&gt; if &lt;code&gt;EDITOR&lt;/code&gt; is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b31f152204e4ec71b0864ffc2d625d20f06364f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill&lt;/code&gt; builtin does not accept signal names with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a221ff533de5c2c42163aa08df69ba88bd590b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; builtin allows arithmetic to be performed on shell variables. Each &lt;var&gt;expression&lt;/var&gt; is evaluated according to the rules given below in &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;. If the last &lt;var&gt;expression&lt;/var&gt; evaluates to 0, &lt;code&gt;let&lt;/code&gt; returns 1; otherwise 0 is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccc0c33fd80bc03158c408477f545ccd528cd3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mkclone&lt;/code&gt; script requires Bash, so you must have already built Bash for at least one architecture before you can create build directories for other architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79186754fc861af86678e7e71417ba006dc66a6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode=&lt;/code&gt; form of the &lt;code&gt;$if&lt;/code&gt; directive is used to test whether Readline is in &lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;vi&lt;/code&gt; mode. This may be used in conjunction with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a5c495825e4ab9be3107dd1eb8144e2f27817e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;noclobber&lt;/code&gt; option is available to avoid overwriting existing files with output redirection (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71024e24201f40b668438cc9414469b6ac68a493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printf&lt;/code&gt; builtin is available to display formatted output (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61dd86bae1e8e40040881413babc94342a7b0b03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pwd&lt;/code&gt; builtin verifies that the value it prints is the same as the current directory, even if it is not asked to check the file system with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74c81aeacd11c0aac0772dfd6279123fef0e5a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; builtin may be interrupted by a signal for which a trap has been set. If Bash receives a trapped signal while executing &lt;code&gt;read&lt;/code&gt;, the trap handler executes and &lt;code&gt;read&lt;/code&gt; returns an exit status greater than 128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a939ead081da617261684b32e11698ddf0b302f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; builtin may be used to abort execution of scripts executed with the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83298a3607cb05d1448dc0cb7e8179483b47e74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; construct allows the easy generation of menus. It has almost the same syntax as the &lt;code&gt;for&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a109c32979a5a1982a1fca3d8dd1078f6fc87ca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;term=&lt;/code&gt; form may be used to include terminal-specific key bindings, perhaps to bind the key sequences output by the terminal&amp;rsquo;s function keys. The word on the right side of the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c20fa9908a74dde5b5deda1de799593d557c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; builtins evaluate conditional expressions using a set of rules based on the number of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7609c8398944d20d0b73184e68b20bd594e494c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) is slightly different, as it implements the &lt;small&gt;POSIX&lt;/small&gt; algorithm, which specifies the behavior based on the number of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b025dcd96c1d77974596085efac9e34c7171c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time&lt;/code&gt; reserved word may be used by itself as a command. When used in this way, it displays timing statistics for the shell and its completed children. The &lt;code&gt;TIMEFORMAT&lt;/code&gt; variable controls the format of the timing information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca11ce6dfccf18d7ae5455235edc8005c94707aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trap&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) allows a &lt;code&gt;DEBUG&lt;/code&gt; pseudo-signal specification, similar to &lt;code&gt;EXIT&lt;/code&gt;. Commands specified with a &lt;code&gt;DEBUG&lt;/code&gt; trap are executed before every simple command, &lt;code&gt;for&lt;/code&gt; command, &lt;code&gt;case&lt;/code&gt; command, &lt;code&gt;select&lt;/code&gt; command, every arithmetic &lt;code&gt;for&lt;/code&gt; command, and before the first command executes in a shell function. The &lt;code&gt;DEBUG&lt;/code&gt; trap is not inherited by shell functions unless the function has been given the &lt;code&gt;trace&lt;/code&gt; attribute or the &lt;code&gt;functrace&lt;/code&gt; option has been enabled using the &lt;code&gt;shopt&lt;/code&gt; builtin. The &lt;code&gt;extdebug&lt;/code&gt; shell option has additional effects on the &lt;code&gt;DEBUG&lt;/code&gt; trap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6ce37dbd1878ed225dec119b3b12f838688477" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trap&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) allows a &lt;code&gt;RETURN&lt;/code&gt; pseudo-signal specification, similar to &lt;code&gt;EXIT&lt;/code&gt; and &lt;code&gt;DEBUG&lt;/code&gt;. Commands specified with an &lt;code&gt;RETURN&lt;/code&gt; trap are executed before execution resumes after a shell function or a shell script executed with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; returns. The &lt;code&gt;RETURN&lt;/code&gt; trap is not inherited by shell functions unless the function has been given the &lt;code&gt;trace&lt;/code&gt; attribute or the &lt;code&gt;functrace&lt;/code&gt; option has been enabled using the &lt;code&gt;shopt&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdabd768ad127a391fc72e79dc320cecf2c0dfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trap&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) allows an &lt;code&gt;ERR&lt;/code&gt; pseudo-signal specification, similar to &lt;code&gt;EXIT&lt;/code&gt; and &lt;code&gt;DEBUG&lt;/code&gt;. Commands specified with an &lt;code&gt;ERR&lt;/code&gt; trap are executed after a simple command fails, with a few exceptions. The &lt;code&gt;ERR&lt;/code&gt; trap is not inherited by shell functions unless the &lt;code&gt;-o errtrace&lt;/code&gt; option to the &lt;code&gt;set&lt;/code&gt; builtin is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831b45af189787ceb18a9fd01008bdf4c959220e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trap&lt;/code&gt; builtin displays signal names without the leading &lt;code&gt;SIG&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec21f73f10dc0c33fb8fc0ed4b8a3ae27c1ef5c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trap&lt;/code&gt; builtin doesn&amp;rsquo;t check the first argument for a possible signal specification and revert the signal handling to the original disposition if it is, unless that argument consists solely of digits and is a valid signal number. If users want to reset the handler for a given signal to the original disposition, they should use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7cc09f1546ca9f5cf92492777f27e4b1a5ee7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;command&lt;/code&gt; builtins will not report a non-executable file as having been found, though the shell will attempt to execute such a file if it is the only so-named file found in &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0e6ce72d613f9309353713f7270dccf84960f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeset&lt;/code&gt; command is supplied for compatibility with the Korn shell. It is a synonym for the &lt;code&gt;declare&lt;/code&gt; builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9be17c095f6d632873df3847bdf9b08ba6bf9f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ulimit&lt;/code&gt; builtin uses a block size of 512 bytes for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968cfb042d33fc3e485a2e1f5aa8e0f8a9d24bf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unset&lt;/code&gt; builtin also acts using the same dynamic scope: if a variable is local to the current scope, &lt;code&gt;unset&lt;/code&gt; will unset it; otherwise the unset will refer to the variable found in any calling scope as described above. If a variable at the current local scope is unset, it will remain so until it is reset in that scope or until the function returns. Once the function returns, any instance of the variable at a previous scope will become visible. If the unset acts on a variable at a previous scope, any instance of a variable with that name that had been shadowed will become visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e245a89a701f9b3eb55eaa8fd7e1e476137a4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unset&lt;/code&gt; builtin is used to destroy arrays. &lt;code&gt;unset &lt;var&gt;name&lt;/var&gt;[&lt;var&gt;subscript&lt;/var&gt;]&lt;/code&gt; destroys the array element at index &lt;var&gt;subscript&lt;/var&gt;. Negative subscripts to indexed arrays are interpreted as described above. Unsetting the last element of an array variable does not unset the variable. &lt;code&gt;unset &lt;var&gt;name&lt;/var&gt;&lt;/code&gt;, where &lt;var&gt;name&lt;/var&gt; is an array, removes the entire array. A subscript of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480cdaa025b86102c4705881ab585ad9216d728b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; test may be used to perform comparisons against specific Readline versions. The &lt;code&gt;version&lt;/code&gt; expands to the current Readline version. The set of comparison operators includes &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b1d9d47459a4e083106d792ba76effe9e2b00c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vi&lt;/code&gt; editing mode will invoke the &lt;code&gt;vi&lt;/code&gt; editor directly when the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe1fcebdd17b99aca9e067d295a5e1c42538ce0" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;POSIX&lt;/small&gt; startup files are executed (&lt;code&gt;$ENV&lt;/code&gt;) rather than the normal Bash files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255367174b7a8740a41f05bdf2ba1953e1186831" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;POSIX&lt;/small&gt;&lt;code&gt;$()&lt;/code&gt; form of command substitution is implemented (see &lt;a href=&quot;command-substitution#Command-Substitution&quot;&gt;Command Substitution&lt;/a&gt;), and preferred to the Bourne shell&amp;rsquo;s &lt;code&gt;``&lt;/code&gt; (which is also implemented for backwards compatibility).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75dad2d7beea5fc3a3a1b5f45d608890f0cd459c" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;POSIX&lt;/small&gt;&lt;code&gt;PS1&lt;/code&gt; and &lt;code&gt;PS2&lt;/code&gt; expansions of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67d0f094fc3f04fab9a06d3dc2f965fac327bab" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;action&lt;/var&gt; may be one of the following to generate a list of possible completions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a003a6373d4273213b4025450dc71aa5388392" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;application&lt;/var&gt; construct is used to include application-specific settings. Each program using the Readline library sets the &lt;var&gt;application name&lt;/var&gt;, and you can test for a particular value. This could be used to bind key sequences to functions useful for a specific program. For instance, the following command adds a key sequence that quotes the current or previous word in Bash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88fbdc6e650a38683e16bcfad100b046ee4ee38" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;arg&lt;/var&gt;s are added to the end of the history list as a single entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec90f709e5f9c505b88251232d3a1c76288dd87" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;commands&lt;/var&gt; are executed after each selection until a &lt;code&gt;break&lt;/code&gt; command is executed, at which point the &lt;code&gt;select&lt;/code&gt; command completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48898c98eee784fb5f6ea18295358a30f4b7f905" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;comp-option&lt;/var&gt; controls several aspects of the compspec&amp;rsquo;s behavior beyond the simple generation of completions. &lt;var&gt;comp-option&lt;/var&gt; may be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181c58c500b060dc3f6a4c1f3074539c076322df" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;format&lt;/var&gt; is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences, which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive &lt;var&gt;argument&lt;/var&gt;. In addition to the standard &lt;code&gt;printf(1)&lt;/code&gt; formats, &lt;code&gt;printf&lt;/code&gt; interprets the following extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5630a0384e3462ded4442078517cde64969373c" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;format&lt;/var&gt; is passed to &lt;code&gt;strftime&lt;/code&gt;(3) and the result is inserted into the prompt string; an empty &lt;var&gt;format&lt;/var&gt; results in a locale-specific time representation. The braces are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d883678477e207f935094a81d886b1383d76fb" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;format&lt;/var&gt; is reused as necessary to consume all of the &lt;var&gt;arguments&lt;/var&gt;. If the &lt;var&gt;format&lt;/var&gt; requires more &lt;var&gt;arguments&lt;/var&gt; than are supplied, the extra format specifications behave as if a zero value or null string, as appropriate, had been supplied. The return value is zero on success, non-zero on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19eb0371bb44451127e86d4065067ea29a989db" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;n&lt;/var&gt;th word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68266abd43ed860a6e725494095fa23f51bfd85e" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;pattern&lt;/var&gt; is expanded to produce a pattern just as in filename expansion. &lt;var&gt;Parameter&lt;/var&gt; is expanded and the longest match of &lt;var&gt;pattern&lt;/var&gt; against its value is replaced with &lt;var&gt;string&lt;/var&gt;. The match is performed according to the rules described below (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;). If &lt;var&gt;pattern&lt;/var&gt; begins with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87155350f1ca968163aa9c46ea25ff13d667cec6" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;subscript&lt;/var&gt; is treated as an arithmetic expression that must evaluate to a number. To explicitly declare an array, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594378cbebeda6287d644d836547f914f6e8931f" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;test-commands&lt;/var&gt; list is executed, and if its return status is zero, the &lt;var&gt;consequent-commands&lt;/var&gt; list is executed. If &lt;var&gt;test-commands&lt;/var&gt; returns a non-zero status, each &lt;code&gt;elif&lt;/code&gt; list is executed in turn, and if its exit status is zero, the corresponding &lt;var&gt;more-consequents&lt;/var&gt; is executed and the command completes. If &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cdf4c83fe89d3f7c6ad4c0802efe2f974717b7" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;variable&lt;/var&gt; construct provides simple equality tests for Readline variables and values. The permitted comparison operators are &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e03f1d2cb21a846c6525ed5ee9d4ad6e035f30c" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;word&lt;/var&gt; is expanded to produce a pattern and matched according to the rules described below (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;). If the pattern matches a trailing portion of the expanded value of &lt;var&gt;parameter&lt;/var&gt;, then the result of the expansion is the value of &lt;var&gt;parameter&lt;/var&gt; with the shortest matching pattern (the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135d508445236cf079307a09a2a6c555b234eef9" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;word&lt;/var&gt; is expanded to produce a pattern and matched according to the rules described below (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;). If the pattern matches the beginning of the expanded value of &lt;var&gt;parameter&lt;/var&gt;, then the result of the expansion is the expanded value of &lt;var&gt;parameter&lt;/var&gt; with the shortest matching pattern (the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db7640dae201f17ece7a4ce378f29ac781e303c" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;word&lt;/var&gt; undergoes tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal. Pathname expansion and word splitting are not performed. The result is supplied as a single string, with a newline appended, to the command on its standard input (or file descriptor &lt;var&gt;n&lt;/var&gt; if &lt;var&gt;n&lt;/var&gt; is specified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd5a5d55c8f27dde11f3baeaa1f434c5c884f2a" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;wordlist&lt;/var&gt; is split using the characters in the &lt;code&gt;IFS&lt;/code&gt; special variable as delimiters, and each resultant word is expanded. The possible completions are the members of the resultant list which match the word being completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32dbbafffce1fc4e5112663803f67f698e0313b" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;pwd&lt;/code&gt; builtins (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) each take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a995895aaf4f7fd7c7fa7ac037a9f805e6b0cb2" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;configure&lt;/code&gt; has a number of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca648070e218ac90e898929bafc1ebebbc4dc3d" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;exec&lt;/code&gt; builtin takes additional options that allow users to control the contents of the environment passed to the executed command, and what the zeroth argument to the command is to be (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3e61e392870587087c878ec441b6110999e7a2" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, and &lt;code&gt;declare&lt;/code&gt; builtins can take a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84f3de2b05bb82f105adb422f91a0235e33ed21" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;hash&lt;/code&gt; builtin allows a name to be associated with an arbitrary filename, even when that filename cannot be found by searching the &lt;code&gt;$PATH&lt;/code&gt;, using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1a29c23ab47c096c80d29d1f28c871afdbf2f9" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;read&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;) will read a line ending in &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9560f04958ba9662309d7c9ca30a5452558e8734" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;type&lt;/code&gt; builtin is more extensive and gives more information about the names it finds (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011f68718a3bf7ddfcc10c8f4d4974853dd058fa" translate="yes" xml:space="preserve">
          <source>The Bash &lt;code&gt;umask&lt;/code&gt; builtin permits a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a134a32d506c251b6b9f4f2024b15b176c6d2c" translate="yes" xml:space="preserve">
          <source>The Bash builtin commands that manipulate the command history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfad86bb10df133daef7e9361ebf45d501606d4f" translate="yes" xml:space="preserve">
          <source>The Bash restricted mode is more useful (see &lt;a href=&quot;the-restricted-shell#The-Restricted-Shell&quot;&gt;The Restricted Shell&lt;/a&gt;); the SVR4.2 shell restricted mode is too limited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f350d3ce6f3b2d6288fc07ca3f4336ba164ab29c" translate="yes" xml:space="preserve">
          <source>The CPU percentage, computed as (%U + %S) / %R.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8101e8043dfcb405fba00536d729164e8202e22c" translate="yes" xml:space="preserve">
          <source>The Directory Stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44da4a00c73cebc1904bc729c930599744fcdb80" translate="yes" xml:space="preserve">
          <source>The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4e1b1f3573db339f8f310e945685b221d8f7f8" translate="yes" xml:space="preserve">
          <source>The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See &lt;a href=&quot;http://www.gnu.org/copyleft/&quot;&gt;http://www.gnu.org/copyleft/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa1d9aab0e3b835f4051ce83b125ccb3ca8221c" translate="yes" xml:space="preserve">
          <source>The GNU Bash Reference Manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3dcb60799ee16ce758c52d568981c6f3a3fed7" translate="yes" xml:space="preserve">
          <source>The History library provides a history expansion feature that is similar to the history expansion provided by &lt;code&gt;csh&lt;/code&gt;. This section describes the syntax used to manipulate the history information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ed7400ec115a9dfc3fddebdd8a40128c4ded56" translate="yes" xml:space="preserve">
          <source>The Restricted Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0221900f3cc15a1c298860102bf64524308b81de" translate="yes" xml:space="preserve">
          <source>The SVR4.2 &lt;code&gt;sh&lt;/code&gt; uses a &lt;code&gt;TIMEOUT&lt;/code&gt; variable like Bash uses &lt;code&gt;TMOUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86158c9c8608385c777b3354e666f7607899302" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell behaves differently when invoked as &lt;code&gt;jsh&lt;/code&gt; (it turns on job control).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dd1dec0e8631e54d29f98cee86e1486aa8c7c7" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell does not allow the &lt;code&gt;IFS&lt;/code&gt;, &lt;code&gt;MAILCHECK&lt;/code&gt;, &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;PS1&lt;/code&gt;, or &lt;code&gt;PS2&lt;/code&gt; variables to be unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc3e76e4a7a71a2c5c68736369778200d4a068b" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell does not allow users to trap &lt;code&gt;SIGSEGV&lt;/code&gt;, &lt;code&gt;SIGALRM&lt;/code&gt;, or &lt;code&gt;SIGCHLD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8cec60eaa81d287be6036d5b3330155d2aaee0" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell exits a script if any builtin fails; Bash exits a script only if one of the &lt;small&gt;POSIX&lt;/small&gt; special builtins fails, and only for certain failures, as enumerated in the &lt;small&gt;POSIX&lt;/small&gt; standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e65fac50588f06f337b446e689d06b9fa1fcdd" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell has two privilege-related builtins (&lt;code&gt;mldmode&lt;/code&gt; and &lt;code&gt;priv&lt;/code&gt;) not present in Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfe42a73378f192636c416081ee0ba75c921dbd" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell treats &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32da5124ce290e06f5df4021e5c9e58a2ec68fca" translate="yes" xml:space="preserve">
          <source>The SVR4.2 shell uses a baroque memory management scheme based on trapping &lt;code&gt;SIGSEGV&lt;/code&gt;. If the shell is started from a process with &lt;code&gt;SIGSEGV&lt;/code&gt; blocked (e.g., by using the &lt;code&gt;system()&lt;/code&gt; C library function call), it misbehaves badly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d078170d9ac1a24a65b855ed322285b43c4a1f9" translate="yes" xml:space="preserve">
          <source>The Set Builtin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a178a5fcf936f299e161d13787958b2688f0a3bd" translate="yes" xml:space="preserve">
          <source>The Shopt Builtin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44b3bbabdeb1666eb94cab66694e7ce4fb1c065" translate="yes" xml:space="preserve">
          <source>The above table describes the most basic keystrokes that you need in order to do editing of the input line. For your convenience, many other commands have been added in addition to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb30ed55cffda59921fb41c9a88599aba518ba6" translate="yes" xml:space="preserve">
          <source>The arguments are concatenated together into a single command, which is then read and executed, and its exit status returned as the exit status of &lt;code&gt;eval&lt;/code&gt;. If there are no arguments or only empty arguments, the return status is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f8ba932268350e49c3ab1b42a0ce68722c6824" translate="yes" xml:space="preserve">
          <source>The arguments to the interpreter consist of a single optional argument following the interpreter name on the first line of the script file, followed by the name of the script file, followed by the rest of the arguments. Bash will perform this action on operating systems that do not handle it themselves. Note that some older versions of Unix limit the interpreter name and argument to a maximum of 32 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544b33d9a56fea5e12b312c1fecdfd3f4e00c12c" translate="yes" xml:space="preserve">
          <source>The arithmetic &lt;var&gt;expression&lt;/var&gt; is evaluated according to the rules described below (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;). If the value of the expression is non-zero, the return status is 0; otherwise the return status is 1. This is exactly equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20a2ea71a62e80042fe4b221f62bbc7d9ad9534" translate="yes" xml:space="preserve">
          <source>The arrival of &lt;code&gt;SIGCHLD&lt;/code&gt; when a trap is set on &lt;code&gt;SIGCHLD&lt;/code&gt; does not interrupt the &lt;code&gt;wait&lt;/code&gt; builtin and cause it to return immediately. The trap command is run once for each child that exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c942f1235d6aa99590aadaf6d144fb8e66aa7a8" translate="yes" xml:space="preserve">
          <source>The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0719d70a53ccc4d8b1222bf02f06761ac07d2e30" translate="yes" xml:space="preserve">
          <source>The basename of &lt;code&gt;$PWD&lt;/code&gt;, with &lt;code&gt;$HOME&lt;/code&gt; abbreviated with a tilde.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3b8521e9991cf592635840f88cab8b001d472f" translate="yes" xml:space="preserve">
          <source>The basename of the shell&amp;rsquo;s terminal device name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b08de91689f1b108df56372625d3addb0d1e32" translate="yes" xml:space="preserve">
          <source>The basic form of parameter expansion is ${&lt;var&gt;parameter&lt;/var&gt;}. The value of &lt;var&gt;parameter&lt;/var&gt; is substituted. The &lt;var&gt;parameter&lt;/var&gt; is a shell parameter as described above (see &lt;a href=&quot;shell-parameters#Shell-Parameters&quot;&gt;Shell Parameters&lt;/a&gt;) or an array reference (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;). The braces are required when &lt;var&gt;parameter&lt;/var&gt; is a positional parameter with more than one digit, or when &lt;var&gt;parameter&lt;/var&gt; is followed by a character that is not to be interpreted as part of its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522497e12cce3a24573239f8f443b81d58f1c108" translate="yes" xml:space="preserve">
          <source>The basic operation of the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547b737e157ebce4950fd4c3ba0807ea7f813f59" translate="yes" xml:space="preserve">
          <source>The build version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1031c39f1533ef620fa929abb5b80eb7ef4e303" translate="yes" xml:space="preserve">
          <source>The builtin command &lt;code&gt;fc&lt;/code&gt; may be used to list or edit and re-execute a portion of the history list. The &lt;code&gt;history&lt;/code&gt; builtin may be used to display or modify the history list and manipulate the history file. When using command-line editing, search commands are available in each editing mode that provide access to the history list (see &lt;a href=&quot;commands-for-history#Commands-For-History&quot;&gt;Commands For History&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5681c7eb98f8f62f9691a67a1aa7dc98ddf16666" translate="yes" xml:space="preserve">
          <source>The character indicating end-of-file as set, for example, by &lt;code&gt;stty&lt;/code&gt;. If this character is read when there are no characters on the line, and point is at the beginning of the line, Readline interprets it as the end of input and returns &lt;small&gt;EOF&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f43e37d7e0145f9475ffaf82e4a308daf0898d" translate="yes" xml:space="preserve">
          <source>The character whose ASCII code is the octal value &lt;var&gt;nnn&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a7ee957bc5a71d3cbf9326e9008389a7ca4437" translate="yes" xml:space="preserve">
          <source>The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363f698c08628d02c4804195d4308c0880e37d96" translate="yes" xml:space="preserve">
          <source>The command argument to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db438ba0a9d98063be92c5c7fdf602e0c569af2c" translate="yes" xml:space="preserve">
          <source>The command currently being executed or about to be executed, unless the shell is executing a command as the result of a trap, in which case it is the command executing at the time of the trap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d298dac4bb7f8b8b84ac852a5deae9875edb6e39" translate="yes" xml:space="preserve">
          <source>The command number and the history number are usually different: the history number of a command is its position in the history list, which may include commands restored from the history file (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;), while the command number is the position in the sequence of commands executed during the current shell session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c083513e7077cde36063ca622b3fe84c369a12" translate="yes" xml:space="preserve">
          <source>The command number of this command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444edec36d62dad4eb01d33ce460ea3f967b5e7b" translate="yes" xml:space="preserve">
          <source>The commands in &lt;var&gt;arg&lt;/var&gt; are to be read and executed when the shell receives signal &lt;var&gt;sigspec&lt;/var&gt;. If &lt;var&gt;arg&lt;/var&gt; is absent (and there is a single &lt;var&gt;sigspec&lt;/var&gt;) or equal to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf7f9b1349e0e7e1616c5e20edba33e1e828af3" translate="yes" xml:space="preserve">
          <source>The compiler used to compile Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5c3e35ed67e42305d577a701f3bbae6dd338b1" translate="yes" xml:space="preserve">
          <source>The configuration process uses GCC to build Bash if it is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7411b2494a8d31cf91d750fc8ee6f3169c04af" translate="yes" xml:space="preserve">
          <source>The contents of the Readline line buffer, for use with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c45336942920b7170007cc831424a324196685a" translate="yes" xml:space="preserve">
          <source>The contents of the directory stack are also visible as the value of the &lt;code&gt;DIRSTACK&lt;/code&gt; shell variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272cfe39d051b3b6acdf30eb9e7ff41d5210caa6" translate="yes" xml:space="preserve">
          <source>The current command line. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b7d3b88d190b91804d29fb6c79b02596242b66" translate="yes" xml:space="preserve">
          <source>The current user&amp;rsquo;s home directory; the default for the &lt;code&gt;cd&lt;/code&gt; builtin command. The value of this variable is also used by tilde expansion (see &lt;a href=&quot;tilde-expansion#Tilde-Expansion&quot;&gt;Tilde Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756252819c489eccf2d6dfd7220af85cbf39741e" translate="yes" xml:space="preserve">
          <source>The current working directory as set by the &lt;code&gt;cd&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d977a91df3c6d96d531d4699803ccb23120defa" translate="yes" xml:space="preserve">
          <source>The current working directory, with &lt;code&gt;$HOME&lt;/code&gt; abbreviated with a tilde (uses the &lt;code&gt;$PROMPT_DIRTRIM&lt;/code&gt; variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e40e2943bfc29c4e8f571c2cc18658ade7b2675" translate="yes" xml:space="preserve">
          <source>The date, in &quot;Weekday Month Date&quot; format (e.g., &quot;Tue May 26&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cdb31f5e7b4f5eff9ab47dfb6bfbb2699ca5bd" translate="yes" xml:space="preserve">
          <source>The default editor used by &lt;code&gt;fc&lt;/code&gt; is &lt;code&gt;ed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83865772580a561b300828e97c67e2bb4129e60" translate="yes" xml:space="preserve">
          <source>The default history file is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2b50ab45069e3e4b7917ea14c9ab9c0c14b0e2" translate="yes" xml:space="preserve">
          <source>The default variable for the &lt;code&gt;read&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0422c738d422db971a344fd93c76843bfddb16dd" translate="yes" xml:space="preserve">
          <source>The directory stack is a list of recently-visited directories. The &lt;code&gt;pushd&lt;/code&gt; builtin adds directories to the stack as it changes the current directory, and the &lt;code&gt;popd&lt;/code&gt; builtin removes specified directories from the stack and changes the current directory to the directory removed. The &lt;code&gt;dirs&lt;/code&gt; builtin displays the contents of the directory stack. The current directory is always the &quot;top&quot; of the directory stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84fe1217141a60f1acea263424777b99143ff80" translate="yes" xml:space="preserve">
          <source>The editor used as a default by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8ac00d44812804b6698dc01288babfb57f1868" translate="yes" xml:space="preserve">
          <source>The elapsed time in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be6a1113e30606692a67477f4097f43bbe26e72" translate="yes" xml:space="preserve">
          <source>The entire command line typed so far.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004ef2973c3fe380792b41ec8640618bf36ae5ec" translate="yes" xml:space="preserve">
          <source>The environment for any simple command or function may be augmented temporarily by prefixing it with parameter assignments, as described in &lt;a href=&quot;shell-parameters#Shell-Parameters&quot;&gt;Shell Parameters&lt;/a&gt;. These assignment statements affect only the environment seen by that command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c806edb5a9a33cdfe28359bafdacfa8e20ef36ad" translate="yes" xml:space="preserve">
          <source>The environment given to a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c97a4fcc116c7260ddba34ab30efe6d48cd3904" translate="yes" xml:space="preserve">
          <source>The environment in which Bash executes commands that are not shell builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d48bf4fbf249bff3c7227d31993cd69d77fc772" translate="yes" xml:space="preserve">
          <source>The evaluation is performed according to the rules listed below (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;). If the expression is invalid, Bash prints a message indicating failure to the standard error and no substitution occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a3bcd8de06d432811148b511088b8c490fa8cc" translate="yes" xml:space="preserve">
          <source>The exit status is used by the Bash conditional commands (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;) and some of the list constructs (see &lt;a href=&quot;lists#Lists&quot;&gt;Lists&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde7e4cab4ce1918b0e4eaf2989a1e2a03f95939" translate="yes" xml:space="preserve">
          <source>The exit status of a function definition is zero unless a syntax error occurs or a readonly function with the same name already exists. When executed, the exit status of a function is the exit status of the last command executed in the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882874af5c1883e6795fc355502741713e443883" translate="yes" xml:space="preserve">
          <source>The exit status of a pipeline is the exit status of the last command in the pipeline, unless the &lt;code&gt;pipefail&lt;/code&gt; option is enabled (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). If &lt;code&gt;pipefail&lt;/code&gt; is enabled, the pipeline&amp;rsquo;s return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit successfully. If the reserved word &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93521ff5f845f7a673cd2da3229c4bb2d0df9a9a" translate="yes" xml:space="preserve">
          <source>The exit status of an executed command is the value returned by the &lt;var&gt;waitpid&lt;/var&gt; system call or equivalent function. Exit statuses fall between 0 and 255, though, as explained below, the shell may use values above 125 specially. Exit statuses from shell builtins and compound commands are also limited to this range. Under certain circumstances, the shell will use special values to indicate specific failure modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56e5df71600b99dbbc7e4e5772c796cf78e239d" translate="yes" xml:space="preserve">
          <source>The exit status of both of these constructs is the exit status of &lt;var&gt;list&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af302677a0ba24ac769ec8978131a3baa418945c" translate="yes" xml:space="preserve">
          <source>The expanded result is single-quoted, as if the dollar sign had not been present.</source>
          <target state="translated">El resultado ampliado se cita una sola vez,como si el signo del dólar no hubiera estado presente.</target>
        </trans-unit>
        <trans-unit id="4add03abbcaa883b33fdc2478513c8ec4d7883da" translate="yes" xml:space="preserve">
          <source>The expansion &lt;code&gt;${!&lt;var&gt;prefix&lt;/var&gt;*}&lt;/code&gt; expansion, which expands to the names of all shell variables whose names begin with &lt;var&gt;prefix&lt;/var&gt;, is available (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a18b5072df5f51be72b242a3328e3ffaff7861" translate="yes" xml:space="preserve">
          <source>The expansion &lt;code&gt;${#xx}&lt;/code&gt;, which returns the length of &lt;code&gt;${xx}&lt;/code&gt;, is supported (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f8b8e01f75d796ba1a1ef795676f19fc71a1e2" translate="yes" xml:space="preserve">
          <source>The expansion &lt;code&gt;${var/[/]&lt;/code&gt;&lt;var&gt;pattern&lt;/var&gt;&lt;code&gt;[/&lt;/code&gt;&lt;var&gt;replacement&lt;/var&gt;&lt;code&gt;]}&lt;/code&gt;, which matches &lt;var&gt;pattern&lt;/var&gt; and replaces it with &lt;var&gt;replacement&lt;/var&gt; in the value of &lt;code&gt;var&lt;/code&gt;, is available (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff195a9615788b7570de20653f069dfee0752945" translate="yes" xml:space="preserve">
          <source>The expansion &lt;code&gt;${var:&lt;/code&gt;&lt;var&gt;offset&lt;/var&gt;&lt;code&gt;[:&lt;/code&gt;&lt;var&gt;length&lt;/var&gt;&lt;code&gt;]}&lt;/code&gt;, which expands to the substring of &lt;code&gt;var&lt;/code&gt;&amp;rsquo;s value of length &lt;var&gt;length&lt;/var&gt;, beginning at &lt;var&gt;offset&lt;/var&gt;, is present (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42697b02e8d21ef0011f21334b20db388215922" translate="yes" xml:space="preserve">
          <source>The expansion is a string consisting of flag values representing &lt;var&gt;parameter&lt;/var&gt;&amp;rsquo;s attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afab0e853d9367c4e25802117ca6694fb42e958d" translate="yes" xml:space="preserve">
          <source>The expansion is a string in the form of an assignment statement or &lt;code&gt;declare&lt;/code&gt; command that, if evaluated, will recreate &lt;var&gt;parameter&lt;/var&gt; with its attributes and value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6be86a3848bcf91893ed7d3309235866c74397b" translate="yes" xml:space="preserve">
          <source>The expansion is a string that is the result of expanding the value of &lt;var&gt;parameter&lt;/var&gt; as if it were a prompt string (see &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718e5782e0ebb46109a132b8422a56fd0c862fe8" translate="yes" xml:space="preserve">
          <source>The expansion is a string that is the value of &lt;var&gt;parameter&lt;/var&gt; quoted in a format that can be reused as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49011b37d553b27a53f468c55ddd26aef836c36e" translate="yes" xml:space="preserve">
          <source>The expansion is a string that is the value of &lt;var&gt;parameter&lt;/var&gt; with backslash escape sequences expanded as with the &lt;code&gt;$'&amp;hellip;'&lt;/code&gt; quoting mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89719bd636e28ecb9ebeb938ed5ebd39231ef58f" translate="yes" xml:space="preserve">
          <source>The expansion is either a transformation of the value of &lt;var&gt;parameter&lt;/var&gt; or information about &lt;var&gt;parameter&lt;/var&gt; itself, depending on the value of &lt;var&gt;operator&lt;/var&gt;. Each &lt;var&gt;operator&lt;/var&gt; is a single letter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df069b9637dead763765488d713656a0c16cb85d" translate="yes" xml:space="preserve">
          <source>The expression is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917a28ba64b958eccd04b25a0853ab60f14fd25a" translate="yes" xml:space="preserve">
          <source>The expression is parsed and evaluated according to precedence using the rules listed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765283e36a1fd1dbb9b7969584d0849fec8d65c2" translate="yes" xml:space="preserve">
          <source>The expression is treated as if it were within double quotes, but a double quote inside the parentheses is not treated specially. All tokens in the expression undergo parameter and variable expansion, command substitution, and quote removal. The result is treated as the arithmetic expression to be evaluated. Arithmetic expansions may be nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5648f53f152d5e29fc3812849ec1b8d658e77938" translate="yes" xml:space="preserve">
          <source>The expression is true if, and only if, the argument is not null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fbc7508d5d457aedc840547581d13fb785d13c" translate="yes" xml:space="preserve">
          <source>The file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1f23a6e05b417744f95f7b69c2d488fda88b55" translate="yes" xml:space="preserve">
          <source>The filename expansion bracket expression code uses &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaacebebc80f60660c7ad0d231556561a01ad1ae" translate="yes" xml:space="preserve">
          <source>The filename expansion pattern &lt;var&gt;globpat&lt;/var&gt; is expanded to generate the possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edef30a2af12324677eae56bf83124a0130e459" translate="yes" xml:space="preserve">
          <source>The first argument; that is, word 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8dec4b71ba6807789b61a734fa23b8fd78022f" translate="yes" xml:space="preserve">
          <source>The first character of &lt;var&gt;delim&lt;/var&gt; is used to terminate each input line, rather than newline. If &lt;var&gt;delim&lt;/var&gt; is the empty string, &lt;code&gt;mapfile&lt;/code&gt; will terminate a line when it reads a NUL character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fedeb99a9947ee2d22eae659bc2114dd328c91" translate="yes" xml:space="preserve">
          <source>The first character of &lt;var&gt;delim&lt;/var&gt; is used to terminate the input line, rather than newline. If &lt;var&gt;delim&lt;/var&gt; is the empty string, &lt;code&gt;read&lt;/code&gt; will terminate a line when it reads a NUL character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acdf0f4c865ba4046fb45d377dc9d2cfc30f085" translate="yes" xml:space="preserve">
          <source>The first form lists the active jobs. The options have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c070d0f8863df81437dc35015ed66e6c8a423b39" translate="yes" xml:space="preserve">
          <source>The first form selects a range of commands from &lt;var&gt;first&lt;/var&gt; to &lt;var&gt;last&lt;/var&gt; from the history list and displays or edits and re-executes them. Both &lt;var&gt;first&lt;/var&gt; and &lt;var&gt;last&lt;/var&gt; may be specified as a string (to locate the most recent command beginning with that string) or as a number (an index into the history list, where a negative number is used as an offset from the current command number). If &lt;var&gt;last&lt;/var&gt; is not specified, it is set to &lt;var&gt;first&lt;/var&gt;. If &lt;var&gt;first&lt;/var&gt; is not specified, it is set to the previous command for editing and -16 for listing. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c2e770fa8a575b94054f403e628e1a41d9b2d7" translate="yes" xml:space="preserve">
          <source>The first two matches will succeed, but the second two will not, because in the second two the backslash will be part of the pattern to be matched. In the first two examples, the backslash removes the special meaning from &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653797fdb45594c050bc255e0eccba33ff16f76d" translate="yes" xml:space="preserve">
          <source>The first word of each simple command, if unquoted, is checked to see if it has an alias. If so, that word is replaced by the text of the alias. The characters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05f3215d7b20148c8c62f31469f98550a932678" translate="yes" xml:space="preserve">
          <source>The following &lt;small&gt;GNU&lt;/small&gt; Emacs style escape sequences are available when specifying key sequences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ddb0f7f45aa8e7da0193822322df7608a8a1de" translate="yes" xml:space="preserve">
          <source>The following conditions are applied in the order listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19be275d9d4da579c940b470f6bd0e28acdc4d18" translate="yes" xml:space="preserve">
          <source>The following examples illustrate substring expansion using positional parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3264a3c2fce96954f61e856f6cb6a203854296df" translate="yes" xml:space="preserve">
          <source>The following function provides completions for the &lt;code&gt;cd&lt;/code&gt; builtin. It is a reasonably good example of what shell functions must do when used for completion. This function uses the word passed as &lt;code&gt;$2&lt;/code&gt; to determine the directory name to complete. You can also use the &lt;code&gt;COMP_WORDS&lt;/code&gt; array variable; the current word is indexed by the &lt;code&gt;COMP_CWORD&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1973674b141605d49022a34798172dc015ebae3d" translate="yes" xml:space="preserve">
          <source>The following is a brief description of the shell&amp;rsquo;s operation when it reads and executes a command. Basically, the shell does the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e56424b5edaef5f8b22992ca94c1e28fccfbfb" translate="yes" xml:space="preserve">
          <source>The following list is what&amp;rsquo;s changed when &amp;lsquo;&lt;small&gt;POSIX&lt;/small&gt; mode&amp;rsquo; is in effect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0c3b0e34e323551707bf5e0633877075c8b092" translate="yes" xml:space="preserve">
          <source>The following options can be used to restrict output to variables with the specified attributes or to give variables attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e475c1ef3ba8861c03c9c0474a01c3785e4b8b69" translate="yes" xml:space="preserve">
          <source>The following paragraphs describe the notation used to represent keystrokes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf56dd8b6034696a2255946a3c1711fd0c0fdad5" translate="yes" xml:space="preserve">
          <source>The following script demonstrates this behavior. When executed, the script displays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fac25ff0d0f9207380149b6506832e8dd34742" translate="yes" xml:space="preserve">
          <source>The following shell builtin commands are inherited from the Bourne Shell. These commands are implemented as specified by the &lt;small&gt;POSIX&lt;/small&gt; standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe6bd1402238d50ca5f09a2bbfeddb70b66dbf0" translate="yes" xml:space="preserve">
          <source>The following table shows how Bash treats unquoted tilde-prefixes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824f8c58a50e27f3e689bc87d7807d7e4b1386ae" translate="yes" xml:space="preserve">
          <source>The format for a coprocess is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008bd0975bad329b905e1c1101a0523476226ee8" translate="yes" xml:space="preserve">
          <source>The format for a pipeline is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b3a48c9b9344fc8d6b2324781aac0f808840e9" translate="yes" xml:space="preserve">
          <source>The format for appending standard output and standard error is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5ed4051a7f541831398ffdbf9b3784483cda4e" translate="yes" xml:space="preserve">
          <source>The format of here-documents is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8888845c75667610ca68745649c9bc19049d0a19" translate="yes" xml:space="preserve">
          <source>The full pathname to the shell is kept in this environment variable. If it is not set when the shell starts, Bash assigns to it the full pathname of the current user&amp;rsquo;s login shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75aae69f918b3c92e6508a81e7d55526d6fc838f" translate="yes" xml:space="preserve">
          <source>The full pathname used to execute the current instance of Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f587f0d4243df9d4928e7ce1617551920b7c10" translate="yes" xml:space="preserve">
          <source>The function relies on the &lt;code&gt;complete&lt;/code&gt; and &lt;code&gt;compgen&lt;/code&gt; builtins to do much of the work, adding only the things that the Bash &lt;code&gt;cd&lt;/code&gt; does beyond accepting basic directory names: tilde expansion (see &lt;a href=&quot;tilde-expansion#Tilde-Expansion&quot;&gt;Tilde Expansion&lt;/a&gt;), searching directories in &lt;var&gt;$CDPATH&lt;/var&gt;, which is described above (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;), and basic support for the &lt;code&gt;cdable_vars&lt;/code&gt; shell option (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;). &lt;code&gt;_comp_cd&lt;/code&gt; modifies the value of &lt;var&gt;IFS&lt;/var&gt; so that it contains only a newline to accommodate file names containing spaces and tabs &amp;ndash; &lt;code&gt;compgen&lt;/code&gt; prints the possible completions it generates one per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13611c4c0ecb29cf7f14a3ed944a012d009ef2c3" translate="yes" xml:space="preserve">
          <source>The general format for appending output is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa6a9428796413da955f4cd2a055baf37da0878" translate="yes" xml:space="preserve">
          <source>The general format for redirecting input is:</source>
          <target state="translated">El formato general para redirigir la entrada es:</target>
        </trans-unit>
        <trans-unit id="c61d67487ed929fce6191ab3f2cecff60115cb2b" translate="yes" xml:space="preserve">
          <source>The general format for redirecting output is:</source>
          <target state="translated">El formato general para redirigir la salida es:</target>
        </trans-unit>
        <trans-unit id="a47fc4b4c39ae1e37cb5da5d7d7220e4cd957885" translate="yes" xml:space="preserve">
          <source>The general way to pass numeric arguments to a command is to type meta digits before the command. If the first &amp;lsquo;digit&amp;rsquo; typed is a minus sign (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b782a125111561adab68b848b80ff8b06af5cdea" translate="yes" xml:space="preserve">
          <source>The hardware and operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ed18f3234de7da5850c7fe21e8086c2e69760a" translate="yes" xml:space="preserve">
          <source>The history number of this command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65ee602f62d7df3888e4f9382eab7dbcb1dafb7" translate="yes" xml:space="preserve">
          <source>The history number, or index in the history list, of the current command. If &lt;code&gt;HISTCMD&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a95f3a85c30ffe4471233d330866926e2d5a35" translate="yes" xml:space="preserve">
          <source>The hostname, up to the first &amp;lsquo;.&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c751fdbb38c77c9e0a00c4631f7273f61e129b7" translate="yes" xml:space="preserve">
          <source>The hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6db584b78ec2e82b3cad14450e10249038b0f5c" translate="yes" xml:space="preserve">
          <source>The index of the current cursor position relative to the beginning of the current command. If the current cursor position is at the end of the current command, the value of this variable is equal to &lt;code&gt;${#COMP_LINE}&lt;/code&gt;. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473130ec203865ee4c843e203a83ba055936c269" translate="yes" xml:space="preserve">
          <source>The index of the last option argument processed by the &lt;code&gt;getopts&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2f60edca49496dae0d28870137a50af5de6b5a" translate="yes" xml:space="preserve">
          <source>The key (or final key of a key sequence) used to invoke the current completion function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686f59b319a273c3ab44e2c15cbea72c6654a855" translate="yes" xml:space="preserve">
          <source>The last argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15a79a13792b2daaecff6a8e0207b36bfaaae0e" translate="yes" xml:space="preserve">
          <source>The least you need to know about Readline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479bc0213f8e2c9635f1484f22020efc023ed13a" translate="yes" xml:space="preserve">
          <source>The length in characters of the common prefix of a list of possible completions that is displayed without modification. When set to a value greater than zero, common prefixes longer than this value are replaced with an ellipsis when displaying possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ae5c6e81e59d0e2b66f91f9368d1f88f1eb5c5" translate="yes" xml:space="preserve">
          <source>The length in characters of the expanded value of &lt;var&gt;parameter&lt;/var&gt; is substituted. If &lt;var&gt;parameter&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb11c557d4404e21d134d7ea32d161578e702837" translate="yes" xml:space="preserve">
          <source>The line number in the script or shell function currently executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cd279aec85f8f1f1b7130c687f985f6fa6efe6" translate="yes" xml:space="preserve">
          <source>The list of &lt;code&gt;shopt&lt;/code&gt; options is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65320a04aac95e184bf875acc72fa1b7f9897605" translate="yes" xml:space="preserve">
          <source>The list of expansions that would have been generated by &lt;code&gt;glob-expand-word&lt;/code&gt; is displayed, and the line is redrawn. If a numeric argument is supplied, a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2019a589f4c2bf28aba032c82e704730984150cd" translate="yes" xml:space="preserve">
          <source>The list of words following &lt;code&gt;in&lt;/code&gt; is expanded, generating a list of items. The set of expanded words is printed on the standard error output stream, each preceded by a number. If the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa39d9bca29b56b174fa694ebf1be4f907420565" translate="yes" xml:space="preserve">
          <source>The major version number (the &lt;var&gt;release&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad629efae3b908eab3fc335f7c6b1514e76455a0" translate="yes" xml:space="preserve">
          <source>The matches will be generated in the same way as if the programmable completion code had generated them directly from a completion specification with the same flags. If &lt;var&gt;word&lt;/var&gt; is specified, only those completions matching &lt;var&gt;word&lt;/var&gt; will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a37f69e87b146cfcdc4f0321e25da8ec8def7a7" translate="yes" xml:space="preserve">
          <source>The maximum amount of cpu time in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5acea89c45f6c1a1ee8563532e340fc0af5dff" translate="yes" xml:space="preserve">
          <source>The maximum amount of virtual memory available to the shell, and, on some systems, to its children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e612ee42927bf27d5122f8658f402d131625097b" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes in POSIX message queues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e2e72c62b84d4520681d3312ecc71d64ac18c1" translate="yes" xml:space="preserve">
          <source>The maximum number of commands to remember on the history list. If the value is 0, commands are not saved in the history list. Numeric values less than zero result in every command being saved on the history list (there is no limit). The shell sets the default value to 500 after reading any startup files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccb1f861be87bad932c6e08746f3c0f3321d602" translate="yes" xml:space="preserve">
          <source>The maximum number of file locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d2af9b6317e720f9864618927f092d866ec43a" translate="yes" xml:space="preserve">
          <source>The maximum number of kqueues that may be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e64b1e3b19576f52f300b05c74d81f04a457d5" translate="yes" xml:space="preserve">
          <source>The maximum number of lines contained in the history file. When this variable is assigned a value, the history file is truncated, if necessary, to contain no more than that number of lines by removing the oldest entries. The history file is also truncated to this size after writing it when a shell exits. If the value is 0, the history file is truncated to zero size. Non-numeric values and numeric values less than zero inhibit truncation. The shell sets the default value to the value of &lt;code&gt;HISTSIZE&lt;/code&gt; after reading any startup files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3213f5627b1c2c18181db54a40fc7d44020c89" translate="yes" xml:space="preserve">
          <source>The maximum number of open file descriptors (most systems do not allow this value to be set).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3371a6b70457453e618d4aa234c6805eb07e71" translate="yes" xml:space="preserve">
          <source>The maximum number of pending signals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb06ca1269dc6deb79b3d3dd22e2cf6959660122" translate="yes" xml:space="preserve">
          <source>The maximum number of processes available to a single user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021bd63455221bb20e66653acd17297499bc8ef3" translate="yes" xml:space="preserve">
          <source>The maximum number of pseudoterminals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491d1e5adda3b14899bb2173f42ad3472a20aeea" translate="yes" xml:space="preserve">
          <source>The maximum number of threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ba3c38db08c2bd096841949b0d0265a592bf92" translate="yes" xml:space="preserve">
          <source>The maximum real-time scheduling priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64acd82e9522cf0d0f4eee81f4c41b783ba89de" translate="yes" xml:space="preserve">
          <source>The maximum resident set size (many systems do not honor this limit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da354b3da817bda1f8e533def312ff9c1eb8fac" translate="yes" xml:space="preserve">
          <source>The maximum scheduling priority (&quot;nice&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271ec27888b79c99e459f384254c3c0335d491b9" translate="yes" xml:space="preserve">
          <source>The maximum size of a process&amp;rsquo;s data segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e56b4fe4f74677d789c73cbaaeb3c1edfc5fd45" translate="yes" xml:space="preserve">
          <source>The maximum size of core files created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce142917de9109aacebbfe4f26e2b49432d0d54" translate="yes" xml:space="preserve">
          <source>The maximum size of files written by the shell and its children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be670a1e4867c1cdff3b42c75d7c1065b739dc5f" translate="yes" xml:space="preserve">
          <source>The maximum size that may be locked into memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660d7cf7ea5978addf0941e67e0af36d68983daa" translate="yes" xml:space="preserve">
          <source>The maximum socket buffer size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16647a836b2f81787f8dcff2ae1a4fe51ee726d8" translate="yes" xml:space="preserve">
          <source>The maximum stack size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a867609caa0696ab2352f776f8abdb45b60a63e" translate="yes" xml:space="preserve">
          <source>The message printed by the job control code and builtins when a job exits with a non-zero status is &amp;lsquo;Done(status)&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dc135bf9c56dc46672123474c6b426e1cdd315" translate="yes" xml:space="preserve">
          <source>The message printed by the job control code and builtins when a job is stopped is &amp;lsquo;Stopped(&lt;var&gt;signame&lt;/var&gt;)&amp;rsquo;, where &lt;var&gt;signame&lt;/var&gt; is, for example, &lt;code&gt;SIGTSTP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0536298fd15b9d1ff52d797ef8c0e31c2062bfa1" translate="yes" xml:space="preserve">
          <source>The minimum set of commands for editing a line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfc35388c1d2def9ecf3524b014ac228ea40342" translate="yes" xml:space="preserve">
          <source>The minor version number (the &lt;var&gt;version&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6783142c35942058e1c609e274cfc80a41e75089" translate="yes" xml:space="preserve">
          <source>The most common type of command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138d9f5e08c2a06b2507bb7c4b82f8e1fe3734c8" translate="yes" xml:space="preserve">
          <source>The most common way to obtain additional completion functionality beyond the default actions &lt;code&gt;complete&lt;/code&gt; and &lt;code&gt;compgen&lt;/code&gt; provide is to use a shell function and bind it to a particular command using &lt;code&gt;complete -F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a2b765809e319a2304221eeb084e8e9cdfc39d" translate="yes" xml:space="preserve">
          <source>The name of the Readline initialization file, overriding the default of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb009d0232ac976858b27feed0246f646da7d244" translate="yes" xml:space="preserve">
          <source>The name of the current host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d01fa534ec35d1d9cf4793403b9ee6bc2445fc" translate="yes" xml:space="preserve">
          <source>The name of the file to which the command history is saved. The default value is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e58eb13b0f3d9ef8278b27b915cf92fb8fb2e65" translate="yes" xml:space="preserve">
          <source>The name of the shell, the basename of &lt;code&gt;$0&lt;/code&gt; (the portion following the final slash).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce55092ecb8d0e944542f108143836a76b13fbcc" translate="yes" xml:space="preserve">
          <source>The number of CPU seconds spent in system mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ab86da1c8fe970c41c94a163626bb9b036dfca" translate="yes" xml:space="preserve">
          <source>The number of CPU seconds spent in user mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7303a5b046e1771b35c3116551ce4956386bee5a" translate="yes" xml:space="preserve">
          <source>The number of jobs currently managed by the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46880f98e07dea2b5ce8b2895ddbfcd1d50aeb0e" translate="yes" xml:space="preserve">
          <source>The number of possible completions that determines when the user is asked whether the list of possibilities should be displayed. If the number of possible completions is greater than this value, Readline will ask the user whether or not he wishes to view them; otherwise, they are simply listed. This variable must be set to an integer value greater than or equal to 0. A negative value means Readline should never ask. The default limit is &lt;code&gt;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b4cb1b0a4beb8cd8b3ce13835f3d64ad580e27" translate="yes" xml:space="preserve">
          <source>The number of screen columns used to display possible matches when performing completion. The value is ignored if it is less than 0 or greater than the terminal screen width. A value of 0 will cause matches to be displayed one per line. The default value is -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5d823f152e786ac9b5aee994ab43d1a7bb51da" translate="yes" xml:space="preserve">
          <source>The numeric effective user id of the current user. This variable is readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbb696997781134cb812ad201a40047736b898f" translate="yes" xml:space="preserve">
          <source>The numeric real user id of the current user. This variable is readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d45cc307ddcc325aa8619a61638def1cc4192e" translate="yes" xml:space="preserve">
          <source>The operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a65e11a6dbbf1eca29abd652b467c14efe692f" translate="yes" xml:space="preserve">
          <source>The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a4caa554203fe5c2eee034e1659633a67b2e13" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;l&lt;/code&gt; specifies a longer format, including minutes, of the form &lt;var&gt;MM&lt;/var&gt;m&lt;var&gt;SS&lt;/var&gt;.&lt;var&gt;FF&lt;/var&gt;s. The value of &lt;var&gt;p&lt;/var&gt; determines whether or not the fraction is included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be00dbf7d289b2eb0bf4fce81bce6631920f3f4" translate="yes" xml:space="preserve">
          <source>The optional &lt;var&gt;p&lt;/var&gt; is a digit specifying the precision, the number of fractional digits after a decimal point. A value of 0 causes no decimal point or fraction to be output. At most three places after the decimal point may be specified; values of &lt;var&gt;p&lt;/var&gt; greater than 3 are changed to 3. If &lt;var&gt;p&lt;/var&gt; is not specified, the value 3 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f0bd933b7b9d8f84f5462c4298e97f7c296d19" translate="yes" xml:space="preserve">
          <source>The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d838a94b4bc043bd855b513349ceb7802c1610" translate="yes" xml:space="preserve">
          <source>The output of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2c151866f3b6bd5ce6fe6924ba9eb6adb99c4c" translate="yes" xml:space="preserve">
          <source>The output of each command in the pipeline is connected via a pipe to the input of the next command. That is, each command reads the previous command&amp;rsquo;s output. This connection is performed before any redirections specified by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa65e023b8ce44d4e8e7824b211da8ffeb1e7b50" translate="yes" xml:space="preserve">
          <source>The parser does not recognize &lt;code&gt;time&lt;/code&gt; as a reserved word if the next token begins with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bac09ccee4d705fea241688c64200c84c5f1ba" translate="yes" xml:space="preserve">
          <source>The patch level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82bcc4b7792df97617e5fd3e84922c7ba5bfbd72" translate="yes" xml:space="preserve">
          <source>The pipe buffer size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878cfb678aa1398c62c2c7bcababcbf34f64ba20" translate="yes" xml:space="preserve">
          <source>The position of the insertion point in the Readline line buffer, for use with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2ced6057af76085ad3486eb77baba77e87710a" translate="yes" xml:space="preserve">
          <source>The previous working directory as set by the &lt;code&gt;cd&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b9ceb8168c844e484377cfcb903e440bb39715" translate="yes" xml:space="preserve">
          <source>The primary prompt string. The default value is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b276991abb43db5060a47d03f39ac7bd61622bc" translate="yes" xml:space="preserve">
          <source>The process &lt;small&gt;ID&lt;/small&gt; of the shell&amp;rsquo;s parent process. This variable is readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d70ba186fbf6d79117746e61da83c9945506776" translate="yes" xml:space="preserve">
          <source>The process &lt;var&gt;list&lt;/var&gt; is run asynchronously, and its input or output appears as a filename. This filename is passed as an argument to the current command as the result of the expansion. If the &lt;code&gt;&amp;gt;(&lt;var&gt;list&lt;/var&gt;)&lt;/code&gt; form is used, writing to the file will provide input for &lt;var&gt;list&lt;/var&gt;. If the &lt;code&gt;&amp;lt;(&lt;var&gt;list&lt;/var&gt;)&lt;/code&gt; form is used, the file passed as an argument should be read to obtain the output of &lt;var&gt;list&lt;/var&gt;. Note that no space may appear between the &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; and the left parenthesis, otherwise the construct would be interpreted as a redirection. Process substitution is supported on systems that support named pipes (&lt;small&gt;FIFO&lt;/small&gt;s) or the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a476b7cbb60009ff5f1c82648823f099258ff9c3" translate="yes" xml:space="preserve">
          <source>The process ID of the shell spawned to execute the coprocess is available as the value of the variable &lt;code&gt;NAME&lt;/code&gt;_PID. The &lt;code&gt;wait&lt;/code&gt; builtin command may be used to wait for the coprocess to terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab6c26bdbf0356755b4a57ca47b4bd143ceea98" translate="yes" xml:space="preserve">
          <source>The process of applying these completion specifications when word completion is attempted is described above (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4716eb77c0dd878dd02c08b86405054f2b50e5af" translate="yes" xml:space="preserve">
          <source>The purpose of this License is to make a manual, textbook, or other functional and useful document &lt;em&gt;free&lt;/em&gt; in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8678459bfb33be477b57cf23b48d632857722d94" translate="yes" xml:space="preserve">
          <source>The redirection operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f8c2af21d6229f2c8dde6af4005922bca465da" translate="yes" xml:space="preserve">
          <source>The release of Bash, version + patchlevel (e.g., 2.00.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3d24986546d409613e59dd2c1b015c3ef7a627" translate="yes" xml:space="preserve">
          <source>The release status (e.g., &lt;var&gt;beta1&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5530f0669af8db7b780b20e4169689af02c4bf" translate="yes" xml:space="preserve">
          <source>The remaining N &lt;var&gt;arguments&lt;/var&gt; are positional parameters and are assigned, in order, to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &amp;hellip; &lt;code&gt;$N&lt;/code&gt;. The special parameter &lt;code&gt;#&lt;/code&gt; is set to N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c406d85fc6d1876c9ab35d2f29d5708542f39727" translate="yes" xml:space="preserve">
          <source>The reserved word &lt;code&gt;time&lt;/code&gt; causes timing statistics to be printed for the pipeline once it finishes. The statistics currently consist of elapsed (wall-clock) time and user and system time consumed by the command&amp;rsquo;s execution. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70377bc4bcdfe0357b29757b411a170e51fb3c0" translate="yes" xml:space="preserve">
          <source>The restricted shell mode is only one component of a useful restricted environment. It should be accompanied by setting &lt;code&gt;PATH&lt;/code&gt; to a value that allows execution of only a few verified commands (commands that allow shell escapes are particularly vulnerable), leaving the user in a non-writable directory other than his home directory after login, not allowing the restricted shell to execute shell scripts, and cleaning the environment of variables that cause some commands to modify their behavior (e.g., &lt;code&gt;VISUAL&lt;/code&gt; or &lt;code&gt;PAGER&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5788bd5b869c4f2f3b0a6a16acf04e0ef52e086" translate="yes" xml:space="preserve">
          <source>The result of the expansion is subject to word splitting and pathname expansion as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afc22fd875e16ab7009fb8b2656518be216471f" translate="yes" xml:space="preserve">
          <source>The return status (see &lt;a href=&quot;exit-status#Exit-Status&quot;&gt;Exit Status&lt;/a&gt;) of a simple command is its exit status as provided by the &lt;small&gt;POSIX&lt;/small&gt; 1003.1 &lt;code&gt;waitpid&lt;/code&gt; function, or 128+&lt;var&gt;n&lt;/var&gt; if the command was terminated by signal &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c16feae2ec17c1b766055b73ef372158cc5577" translate="yes" xml:space="preserve">
          <source>The return status is always zero unless an invalid option is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf5b2fc810067ae8bd5d1a116f1b988711b4726" translate="yes" xml:space="preserve">
          <source>The return status is the exit status of the last command that executes. If there are no items in the expansion of &lt;var&gt;words&lt;/var&gt;, no commands are executed, and the return status is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139ea59902aacb9b462b237611bb180dededca16" translate="yes" xml:space="preserve">
          <source>The return status is zero if all of the &lt;var&gt;names&lt;/var&gt; are found, non-zero if any are not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2e10afbf0eb8cd947b719e65752d296e25acdf" translate="yes" xml:space="preserve">
          <source>The return status is zero if no &lt;var&gt;pattern&lt;/var&gt; is matched. Otherwise, the return status is the exit status of the &lt;var&gt;command-list&lt;/var&gt; executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd37bef165d1c2b13e0b9c03f77edc8dca883363" translate="yes" xml:space="preserve">
          <source>The return status is zero if the directory is successfully changed, non-zero otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980ed86ff499fbca6bf880e390688e559e87fee4" translate="yes" xml:space="preserve">
          <source>The return status is zero unless a &lt;var&gt;name&lt;/var&gt; is not a shell builtin or there is an error loading a new builtin from a shared object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7361147afb0905e0d597ba8f358f5fa3e4789f7" translate="yes" xml:space="preserve">
          <source>The return status is zero unless a &lt;var&gt;sigspec&lt;/var&gt; does not specify a valid signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9520c176239454e40ab970a76500acf0a2a9708" translate="yes" xml:space="preserve">
          <source>The return status is zero unless an invalid option is encountered, an attempt is made to define a function using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d977247bb00ecbeefc2342eb94e26ab0b25dfde9" translate="yes" xml:space="preserve">
          <source>The return status is zero unless an invalid option is supplied or an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d84c34844e5928e34eb45fc62a6fa465da1eed8" translate="yes" xml:space="preserve">
          <source>The return status is zero unless an invalid option is supplied, one of the names is not a valid shell variable name, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9bb3db604d40c52d6a0ed4be85c8d7e3588d80" translate="yes" xml:space="preserve">
          <source>The return status is zero unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2412a1102b7277323c4cc092cbf40530c3672f" translate="yes" xml:space="preserve">
          <source>The return status is zero unless no command matches &lt;var&gt;pattern&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c05430accfd44314e843b73808550a84df168e" translate="yes" xml:space="preserve">
          <source>The return status of &lt;small&gt;AND&lt;/small&gt; and &lt;small&gt;OR&lt;/small&gt; lists is the exit status of the last command executed in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444c7ff858fdf7094cf753409e8f19e0840ab92b" translate="yes" xml:space="preserve">
          <source>The return status when listing options is zero if all &lt;var&gt;optnames&lt;/var&gt; are enabled, non-zero otherwise. When setting or unsetting options, the return status is zero unless an &lt;var&gt;optname&lt;/var&gt; is not a valid shell option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c786e126af22d614c9083278320ac7fc5eefe1" translate="yes" xml:space="preserve">
          <source>The return value is 0 unless the shell is not executing a subroutine call or &lt;var&gt;expr&lt;/var&gt; does not correspond to a valid position in the call stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86714d75d70f053c6711f08829d0c808f136b26" translate="yes" xml:space="preserve">
          <source>The return value is true unless an invalid option is supplied, an attempt is made to modify the options for a &lt;var&gt;name&lt;/var&gt; for which no completion specification exists, or an output error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c85924056c36528995c9b7ba4ed62a82614420" translate="yes" xml:space="preserve">
          <source>The return value is true unless an invalid option is supplied, an option other than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a822235281678e7fa50e449a6c26717df07938" translate="yes" xml:space="preserve">
          <source>The return value is true unless an invalid option is supplied, or no matches were generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc11c48cfe742a595ccb253defc457d792dc1ec9" translate="yes" xml:space="preserve">
          <source>The rules concerning the definition and use of aliases are somewhat confusing. Bash always reads at least one complete line of input, and all lines that make up a compound command, before executing any of the commands on that line or the compound command. Aliases are expanded when a command is read, not when it is executed. Therefore, an alias definition appearing on the same line as another command does not take effect until the next line of input is read. The commands following the alias definition on that line are not affected by the new alias. This behavior is also an issue when functions are executed. Aliases are expanded when a function definition is read, not when the function is executed, because a function definition is itself a command. As a consequence, aliases defined in a function are not available until after that function is executed. To be safe, always put alias definitions on a separate line, and do not use &lt;code&gt;alias&lt;/code&gt; in compound commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c69f91a4b82b2298fab3319d89e9bff24ee39ea" translate="yes" xml:space="preserve">
          <source>The secondary prompt string. The default value is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e658ab4121249a4adecc41b2997df149afa25c" translate="yes" xml:space="preserve">
          <source>The set of characters that the Readline library treats as word separators when performing word completion. If &lt;code&gt;COMP_WORDBREAKS&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9227631f6e16c78b2307840c22265ee938df1e2" translate="yes" xml:space="preserve">
          <source>The shell &quot;building blocks&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56b5b448656c7590aab2b5146242bdd0df94454" translate="yes" xml:space="preserve">
          <source>The shell allows arithmetic expressions to be evaluated, as one of the shell expansions or by using the &lt;code&gt;((&lt;/code&gt; compound command, the &lt;code&gt;let&lt;/code&gt; builtin, or the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6f5329a04c76e3eb0db5c92b0698630793acca" translate="yes" xml:space="preserve">
          <source>The shell allows control of the various characters used by the history expansion mechanism with the &lt;code&gt;histchars&lt;/code&gt; variable, as explained above (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;). The shell uses the history comment character to mark history timestamps when writing the history file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0362e466df6eb864c38d9b0e66a2024579878737" translate="yes" xml:space="preserve">
          <source>The shell allows control over which commands are saved on the history list. The &lt;code&gt;HISTCONTROL&lt;/code&gt; and &lt;code&gt;HISTIGNORE&lt;/code&gt; variables may be set to cause the shell to save only a subset of the commands entered. The &lt;code&gt;cmdhist&lt;/code&gt; shell option, if enabled, causes the shell to attempt to save each line of a multi-line command in the same history entry, adding semicolons where necessary to preserve syntactic correctness. The &lt;code&gt;lithist&lt;/code&gt; shell option causes the shell to save the command with embedded newlines instead of semicolons. The &lt;code&gt;shopt&lt;/code&gt; builtin is used to set these options. See &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;, for a description of &lt;code&gt;shopt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e2d6d8d979b9089bc7dbd323e0fcd7060ebed5" translate="yes" xml:space="preserve">
          <source>The shell associates a &lt;var&gt;job&lt;/var&gt; with each pipeline. It keeps a table of currently executing jobs, which may be listed with the &lt;code&gt;jobs&lt;/code&gt; command. When Bash starts a job asynchronously, it prints a line that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf7a6dea08a855c9acf206522d804a0254a3f0c" translate="yes" xml:space="preserve">
          <source>The shell exits by default upon receipt of a &lt;code&gt;SIGHUP&lt;/code&gt;. Before exiting, an interactive shell resends the &lt;code&gt;SIGHUP&lt;/code&gt; to all jobs, running or stopped. Stopped jobs are sent &lt;code&gt;SIGCONT&lt;/code&gt; to ensure that they receive the &lt;code&gt;SIGHUP&lt;/code&gt;. To prevent the shell from sending the &lt;code&gt;SIGHUP&lt;/code&gt; signal to a particular job, it should be removed from the jobs table with the &lt;code&gt;disown&lt;/code&gt; builtin (see &lt;a href=&quot;job-control-builtins#Job-Control-Builtins&quot;&gt;Job Control Builtins&lt;/a&gt;) or marked to not receive &lt;code&gt;SIGHUP&lt;/code&gt; using &lt;code&gt;disown -h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da304625649da7647ca4753c774c91abbcbb1aa" translate="yes" xml:space="preserve">
          <source>The shell function &lt;var&gt;function&lt;/var&gt; is executed in the current shell environment. When it is executed, $1 is the name of the command whose arguments are being completed, $2 is the word being completed, and $3 is the word preceding the word being completed, as described above (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;). When it finishes, the possible completions are retrieved from the value of the &lt;code&gt;COMPREPLY&lt;/code&gt; array variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9265d28258a9f15465eb26e5f672576598c224b2" translate="yes" xml:space="preserve">
          <source>The shell has an &lt;var&gt;execution environment&lt;/var&gt;, which consists of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc18292b655a353a6d0db19b5f5c669e2707cbcc" translate="yes" xml:space="preserve">
          <source>The shell learns immediately whenever a job changes state. Normally, Bash waits until it is about to print a prompt before reporting changes in a job&amp;rsquo;s status so as to not interrupt any other output. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b848180ca0000ad79ae324e1c3a900dedfdaa10a" translate="yes" xml:space="preserve">
          <source>The shell scans the results of parameter expansion, command substitution, and arithmetic expansion that did not occur within double quotes for word splitting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefc3401f6dd1bb6691c9bebf0d6d5fb898f599b" translate="yes" xml:space="preserve">
          <source>The shell sets this option if it is started as a login shell (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;). The value may not be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c0ca18fa53fc79a29905727290b49d2ebb6a65" translate="yes" xml:space="preserve">
          <source>The shell sets this option if it is started in restricted mode (see &lt;a href=&quot;the-restricted-shell#The-Restricted-Shell&quot;&gt;The Restricted Shell&lt;/a&gt;). The value may not be changed. This is not reset when the startup files are executed, allowing the startup files to discover whether or not a shell is restricted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d77b348c667c262a723d3137596851cfdbb00e0" translate="yes" xml:space="preserve">
          <source>The shell then parses these tokens into commands and other constructs, removes the special meaning of certain words or characters, expands others, redirects input and output as needed, executes the specified command, waits for the command&amp;rsquo;s exit status, and makes that exit status available for further inspection or processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba4037ea0906aeaaf517aff4e32cf5f4a49049a" translate="yes" xml:space="preserve">
          <source>The shell treats each character of &lt;code&gt;$IFS&lt;/code&gt; as a delimiter, and splits the results of the other expansions into words using these characters as field terminators. If &lt;code&gt;IFS&lt;/code&gt; is unset, or its value is exactly &lt;code&gt;&amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt;&lt;/code&gt;, the default, then sequences of &lt;code&gt; &amp;lt;space&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt; at the beginning and end of the results of the previous expansions are ignored, and any sequence of &lt;code&gt;IFS&lt;/code&gt; characters not at the beginning or end serves to delimit words. If &lt;code&gt;IFS&lt;/code&gt; has a value other than the default, then sequences of the whitespace characters &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;tab&lt;/code&gt;, and &lt;code&gt;newline&lt;/code&gt; are ignored at the beginning and end of the word, as long as the whitespace character is in the value of &lt;code&gt;IFS&lt;/code&gt; (an &lt;code&gt;IFS&lt;/code&gt; whitespace character). Any character in &lt;code&gt;IFS&lt;/code&gt; that is not &lt;code&gt;IFS&lt;/code&gt; whitespace, along with any adjacent &lt;code&gt;IFS&lt;/code&gt; whitespace characters, delimits a field. A sequence of &lt;code&gt;IFS&lt;/code&gt; whitespace characters is also treated as a delimiter. If the value of &lt;code&gt;IFS&lt;/code&gt; is null, no word splitting occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cc547bede40d0cae5e40f5f4a99569ccd0c4b4" translate="yes" xml:space="preserve">
          <source>The shell treats several parameters specially. These parameters may only be referenced; assignment to them is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2ad0c7d7487f4ea0379a55a58abfa1a4e0befb" translate="yes" xml:space="preserve">
          <source>The shell uses &lt;var&gt;dynamic scoping&lt;/var&gt; to control a variable&amp;rsquo;s visibility within functions. With dynamic scoping, visible variables and their values are a result of the sequence of function calls that caused execution to reach the current function. The value of a variable that a function sees depends on its value within its caller, if any, whether that caller is the &quot;global&quot; scope or another shell function. This is also the value that a local variable declaration &quot;shadows&quot;, and the value that is restored when the function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b20ce8aab434c014aaddb88f0788ead16beb6d" translate="yes" xml:space="preserve">
          <source>The shell will check the value of the &lt;code&gt;TMOUT&lt;/code&gt; variable and exit if a command is not read within the specified number of seconds after printing &lt;code&gt;$PS1&lt;/code&gt; (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d8f9c91b575ef17dfa7f7dbf1c624fb566f7b4" translate="yes" xml:space="preserve">
          <source>The shell will not exit on expansion errors caused by &lt;var&gt;var&lt;/var&gt; being unset or null in &lt;code&gt;${&lt;var&gt;var&lt;/var&gt;:?&lt;var&gt;word&lt;/var&gt;}&lt;/code&gt; expansions (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f85b03a392455895011cb39b0e69ae7d461f563" translate="yes" xml:space="preserve">
          <source>The shell will perform brace expansion (see &lt;a href=&quot;brace-expansion#Brace-Expansion&quot;&gt;Brace Expansion&lt;/a&gt;). This option is on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929e9d23bb121f55558c95f11d362127b9b29dfc" translate="yes" xml:space="preserve">
          <source>The shell&amp;rsquo;s command-line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaa3191638c3167e75792e2c32188b7558fa5c1" translate="yes" xml:space="preserve">
          <source>The simplest way to compile Bash is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d492ae475f3eb0b64cc0410b3e288c4efe8d31" translate="yes" xml:space="preserve">
          <source>The special parameters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ac93ea4c7d589a16f423e51aa82d328440771b" translate="yes" xml:space="preserve">
          <source>The special pattern characters have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab52fbd0480da10f00829294cf610456cf0473ff" translate="yes" xml:space="preserve">
          <source>The status returned by commands and how Bash interprets it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96d3826ce6fa7fa67cd9e6a57d44dbfee981c12" translate="yes" xml:space="preserve">
          <source>The string of characters that should terminate an incremental search without subsequently executing the character as a command (see &lt;a href=&quot;searching#Searching&quot;&gt;Searching&lt;/a&gt;). If this variable has not been given a value, the characters &lt;code&gt;ESC&lt;/code&gt; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651d0c97af7e902b9750faea2a0b1c833b2440b5" translate="yes" xml:space="preserve">
          <source>The string that would be displayed by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7776d244b6bbd7d504afa9689c3cb612100b5e61" translate="yes" xml:space="preserve">
          <source>The string to insert at the beginning of the line when the &lt;code&gt;insert-comment&lt;/code&gt; command is executed. The default value is &lt;code&gt;&quot;#&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557cad528fdbd6bd6acf00aaccdee22ebcbd8c35" translate="yes" xml:space="preserve">
          <source>The subdirectory &lt;code&gt;foo&lt;/code&gt; of the home directory of the user &lt;code&gt;fred&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f8b505ce05315e1a17e36787d4eec3e6ea7c76" translate="yes" xml:space="preserve">
          <source>The syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83864cb09377d92aa6ef6b10369692847d068dfa" translate="yes" xml:space="preserve">
          <source>The syntax for controlling key bindings in the init file is simple. First you need to find the name of the command that you want to change. The following sections contain tables of the command name, the default keybinding, if any, and a short description of what the command does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397e51c7f8e3aa386b3ed248ec72a1a9aefbb131" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;case&lt;/code&gt; command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89589fa0086f9e4f68229bce7a4fb55ef7e7312" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;for&lt;/code&gt; command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ec1dcd0351776c8525baf65f5936a95fd39414" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;if&lt;/code&gt; command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca84b4cf40aa870bc7a9434cdbbcf620bc46e31" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;until&lt;/code&gt; command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5997dd0fe5383486f475a01e977e6d7562319f43" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;while&lt;/code&gt; command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb5a4878d4824a6e3cc97693f13a3d7af45ba70" translate="yes" xml:space="preserve">
          <source>The text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2677043af3f5a768ae74d245381c283718fb041" translate="yes" xml:space="preserve">
          <source>The text after the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039ba39464b2a648b548e0b817d33ee8e5ee39a0" translate="yes" xml:space="preserve">
          <source>The time, in 12-hour HH:MM:SS format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2947cf4592e14132541d8fa3e6d64c9f4e395f81" translate="yes" xml:space="preserve">
          <source>The time, in 12-hour am/pm format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa95493f6e19849ab7227b92efebe0c1e71c5b9" translate="yes" xml:space="preserve">
          <source>The time, in 24-hour HH:MM format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d065f007cd9dd11288efaacb92822ea86c8464" translate="yes" xml:space="preserve">
          <source>The time, in 24-hour HH:MM:SS format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546c59017480fec7e5615dbe0528ae2a9afeb0a3" translate="yes" xml:space="preserve">
          <source>The types of commands you can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff955a1de3f03a21fca8ad8b7504d2f3da2a59f4" translate="yes" xml:space="preserve">
          <source>The username of the current user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f04f240cded95f75a32464630957f4300c35e8" translate="yes" xml:space="preserve">
          <source>The value is used to set the shell&amp;rsquo;s compatibility level. See &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;, for a description of the various compatibility levels and their effects. The value may be a decimal number (e.g., 4.2) or an integer (e.g., 42) corresponding to the desired compatibility level. If &lt;code&gt;BASH_COMPAT&lt;/code&gt; is unset or set to the empty string, the compatibility level is set to the default for the current version. If &lt;code&gt;BASH_COMPAT&lt;/code&gt; is set to a value that is not one of the valid compatibility levels, the shell prints an error message and sets the compatibility level to the default for the current version. The valid compatibility levels correspond to the compatibility options accepted by the &lt;code&gt;shopt&lt;/code&gt; builtin described above (for example, &lt;var&gt;compat42&lt;/var&gt; means that 4.2 and 42 are valid values). The current version is also a valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd85921f250378d8ae629c564190aa36eee3643f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$HOME&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f98eb18117382268ac2fdda01b7fb5e78dc5a17" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;MACHTYPE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bd6195d8ca24500579dfc5b25501a8dbcc48b7" translate="yes" xml:space="preserve">
          <source>The value of the last option argument processed by the &lt;code&gt;getopts&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c799dffdb48e568cebb24d89b06c4c19963f103" translate="yes" xml:space="preserve">
          <source>The value of the variable &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; is examined just before Bash prints each primary prompt. If &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; is set and has a non-null value, then the value is executed just as if it had been typed on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0402efd8dde69c4d2f33edcea256ddb23b3c45" translate="yes" xml:space="preserve">
          <source>The value of this parameter is expanded like &lt;var&gt;PS1&lt;/var&gt; and displayed by interactive shells after reading a command and before the command is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d045943c08d9fa184f14d59e811d5662ab8e94" translate="yes" xml:space="preserve">
          <source>The value of this parameter is expanded like &lt;var&gt;PS1&lt;/var&gt; and the expanded value is the prompt printed before the command line is echoed when the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2069a853e7e4c352256c651bc9711895ad4aea0" translate="yes" xml:space="preserve">
          <source>The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the &lt;code&gt;time&lt;/code&gt; reserved word should be displayed. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1c9f8bb4dfddf7179168d82d2de258443de2eb" translate="yes" xml:space="preserve">
          <source>The value of this variable is used as the prompt for the &lt;code&gt;select&lt;/code&gt; command. If this variable is not set, the &lt;code&gt;select&lt;/code&gt; command prompts with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d1661055dab5ddd2b22885205d0882c08bf298" translate="yes" xml:space="preserve">
          <source>The value returned by a command to its caller. The value is restricted to eight bits, so the maximum value is 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148bb77806c5b1ec4dfcfb34ad15d87996bd4d0d" translate="yes" xml:space="preserve">
          <source>The variable is to be treated as an integer; arithmetic evaluation (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;) is performed when the variable is assigned a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39bf8e1552fff49229a38ab03b9c35eb7c5fe33" translate="yes" xml:space="preserve">
          <source>The version number of Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11b6fbf8320b54f58c60bf5fbc2ab78318d291f" translate="yes" xml:space="preserve">
          <source>The version number of the current instance of Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30c7f23d4e6f3d476f2e127031ef6f4ed2a1b01" translate="yes" xml:space="preserve">
          <source>The version of Bash (e.g., 2.00)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027d950e271c78503f04d5e7dffcabc091968d50" translate="yes" xml:space="preserve">
          <source>The word before point is treated as a pattern for pathname expansion, and the list of matching file names is inserted, replacing the word. If a numeric argument is supplied, a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222c4b4554c8b6901e2325416221a577860ca250" translate="yes" xml:space="preserve">
          <source>The word before point is treated as a pattern for pathname expansion, with an asterisk implicitly appended. This pattern is used to generate a list of matching file names for possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c65ac33cabff828f2aa8f1e90a8750474ac6d6c" translate="yes" xml:space="preserve">
          <source>The word following the redirection operator in the following descriptions, unless otherwise noted, is subjected to brace expansion, tilde expansion, parameter expansion, command substitution, arithmetic expansion, quote removal, filename expansion, and word splitting. If it expands to more than one word, Bash reports an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346079daa02f2cb31ed65b06f1366a24cd782ecd" translate="yes" xml:space="preserve">
          <source>The word matched by the most recent &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e9087ca60e5e8a54425de161a2d02c0f440cfc" translate="yes" xml:space="preserve">
          <source>The words are assigned to sequential indices of the array variable &lt;var&gt;aname&lt;/var&gt;, starting at 0. All elements are removed from &lt;var&gt;aname&lt;/var&gt; before the assignment. Other &lt;var&gt;name&lt;/var&gt; arguments are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40868cb137c232e64b231908d1d301657c99868c" translate="yes" xml:space="preserve">
          <source>The words that are not variable assignments or redirections are expanded (see &lt;a href=&quot;shell-expansions#Shell-Expansions&quot;&gt;Shell Expansions&lt;/a&gt;). If any words remain after expansion, the first word is taken to be the name of the command and the remaining words are the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1115f35bbb1c2198812247bacb427d5941c313a5" translate="yes" xml:space="preserve">
          <source>The words that the parser has marked as variable assignments (those preceding the command name) and redirections are saved for later processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34835e8862f137b6b67b76e845cf0916c66a7d74" translate="yes" xml:space="preserve">
          <source>There are a number of ways to refer to a job in the shell. The character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5380837a8dc4b937f8c653fd992daf4e5508db28" translate="yes" xml:space="preserve">
          <source>There are only a few basic constructs allowed in the Readline init file. Blank lines are ignored. Lines beginning with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8422d6b3111c08b7087bda621a6b140c5d376882" translate="yes" xml:space="preserve">
          <source>There are several</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355ae59a61b832450204db67a5d845ba171bf393" translate="yes" xml:space="preserve">
          <source>There are several single-character options that may be supplied at invocation which are not available with the &lt;code&gt;set&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da410ea10b5c65b982eecff9f69deb78b7882c49" translate="yes" xml:space="preserve">
          <source>There are three quoting mechanisms: the &lt;var&gt;escape character&lt;/var&gt;, single quotes, and double quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dcc9600ee50cb4594d545bc4b2e3f3a34a4fa9" translate="yes" xml:space="preserve">
          <source>There are two formats for redirecting standard output and standard error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cc96780f245ab386ceb829f056c264700d3183" translate="yes" xml:space="preserve">
          <source>There are ways to run commands in parallel that are not built into Bash. GNU Parallel is a tool to do just that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5777c1669d42cb1acb2551be9d5476e2c723421" translate="yes" xml:space="preserve">
          <source>There is no mechanism for using arguments in the replacement text, as in &lt;code&gt;csh&lt;/code&gt;. If arguments are needed, a shell function should be used (see &lt;a href=&quot;shell-functions#Shell-Functions&quot;&gt;Shell Functions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f46df76fa16611d124197c9368dfd67cc3688c" translate="yes" xml:space="preserve">
          <source>There is other &lt;small&gt;POSIX&lt;/small&gt; behavior that Bash does not implement by default even when in &lt;small&gt;POSIX&lt;/small&gt; mode. Specifically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ac2201cee1badcd944531174bf1efb539f9461" translate="yes" xml:space="preserve">
          <source>There is some support for dynamically modifying completions. This is most useful when used in combination with a default completion specified with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be4ef90f6dd62a6f8fcf59741822b9b02eb595" translate="yes" xml:space="preserve">
          <source>There may be an arbitrary number of &lt;code&gt;case&lt;/code&gt; clauses, each terminated by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81c82a23500da34f5f3f9852232cef329cf49a0" translate="yes" xml:space="preserve">
          <source>There may be some features &lt;code&gt;configure&lt;/code&gt; can not figure out automatically, but need to determine by the type of host Bash will run on. Usually &lt;code&gt;configure&lt;/code&gt; can figure that out, but if it prints a message saying it can not guess the host type, give it the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9015989b924a2ac88a0ae4fbf68f6592b8c17a42" translate="yes" xml:space="preserve">
          <source>These are installation instructions for Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aedb4b233a7d36f1ed706bd4fe3eb06a42c78b4" translate="yes" xml:space="preserve">
          <source>These are the &lt;small&gt;POSIX&lt;/small&gt; special builtins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64944b0b14b546d025ea7cbc1a0ffafc5f3a745" translate="yes" xml:space="preserve">
          <source>These definitions are used throughout the remainder of this manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52445fd9af51159ab52902e33535ffe11eaa99ca" translate="yes" xml:space="preserve">
          <source>These examples show how you can use substring expansion with indexed arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d357d109541ac67ed9625400ae8662ccbda188" translate="yes" xml:space="preserve">
          <source>These restrictions are enforced after any startup files are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6cba66425428991d68cbdaa44f3c3bf5b58d81" translate="yes" xml:space="preserve">
          <source>These variables are set or used by Bash, but other shells do not normally treat them specially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1156fdd4019160ed61ec17c8bdc9f4ed741b6727" translate="yes" xml:space="preserve">
          <source>This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The &amp;ldquo;Document&amp;rdquo;, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as &amp;ldquo;you&amp;rdquo;. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7172d540090de5c8986abd8471f45ad42900b54" translate="yes" xml:space="preserve">
          <source>This License is a kind of &amp;ldquo;copyleft&amp;rdquo;, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9774638f742e8e76ad20a90b73b698f411ba8820" translate="yes" xml:space="preserve">
          <source>This alters the default behavior of the completion functions in a fashion similar to &lt;var&gt;show-all-if-ambiguous&lt;/var&gt;. If set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8332763d55887221896b817cdc3faab9f19c83f2" translate="yes" xml:space="preserve">
          <source>This alters the default behavior of the completion functions. If set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e34f2d1e6f278b2c604c84a983d396b66ab2ed0" translate="yes" xml:space="preserve">
          <source>This builds a Bash binary that produces profiling information to be processed by &lt;code&gt;gprof&lt;/code&gt; each time it is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cd4b02660da5e86fd9458a00db29bf6ba4c32f" translate="yes" xml:space="preserve">
          <source>This builtin allows you to change additional shell optional behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c09c163709e0806212e0c4d85c59c0e76dee4c" translate="yes" xml:space="preserve">
          <source>This builtin is so complicated that it deserves its own section. &lt;code&gt;set&lt;/code&gt; allows you to change the values of shell options and set the positional parameters, or to display the names and values of shell variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec1f6282f72efc73514af3bcef7701cafdc1347" translate="yes" xml:space="preserve">
          <source>This causes Bash to be linked statically, if &lt;code&gt;gcc&lt;/code&gt; is being used. This could be used to build a version to use as root&amp;rsquo;s shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b444cedd05507c2879b16fcc79445c70923c1a2" translate="yes" xml:space="preserve">
          <source>This chapter briefly summarizes the shell&amp;rsquo;s &amp;lsquo;building blocks&amp;rsquo;: commands, control structures, shell functions, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5550e13176089ed86a46ffd518b0119005cc3ed7" translate="yes" xml:space="preserve">
          <source>This chapter describes features unique to Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b26127352667f52293bc4f0daa266336d9c3761" translate="yes" xml:space="preserve">
          <source>This chapter describes how to use the &lt;small&gt;GNU&lt;/small&gt; History Library interactively, from a user&amp;rsquo;s standpoint. It should be considered a user&amp;rsquo;s guide. For information on using the &lt;small&gt;GNU&lt;/small&gt; History Library in other programs, see the &lt;small&gt;GNU&lt;/small&gt; Readline Library Manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de15b35f7c50f67a3ef7e4a47233594367c7e8b4" translate="yes" xml:space="preserve">
          <source>This chapter describes the basic features of the &lt;small&gt;GNU&lt;/small&gt; command line editing interface. Command line editing is provided by the Readline library, which is used by several different programs, including Bash. Command line editing is enabled by default when using an interactive shell, unless the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ef6306676cfcd40ae8b20738ea19d430016d4e" translate="yes" xml:space="preserve">
          <source>This chapter describes the shell variables that Bash uses. Bash automatically assigns default values to a number of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09354d1984a5765dc8136f0cec8a9d7bd70fd4d" translate="yes" xml:space="preserve">
          <source>This chapter discusses what job control is, how it works, and how Bash allows you to access its facilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e3b64c94896242bb0f5f8bf5c5ae3d1ee830d8" translate="yes" xml:space="preserve">
          <source>This chapter provides basic instructions for installing Bash on the various supported platforms. The distribution supports the &lt;small&gt;GNU&lt;/small&gt; operating systems, nearly every version of Unix, and several non-Unix systems such as BeOS and Interix. Other independent ports exist for &lt;small&gt;MS-DOS&lt;/small&gt;, &lt;small&gt;OS/2&lt;/small&gt;, and Windows platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e1d439d827302ed752f66204ca921eb96c58f6" translate="yes" xml:space="preserve">
          <source>This command, as seen in the previous example, terminates an &lt;code&gt;$if&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0f85630397c158a20c2fa4d3ef1c1973ec8dcb" translate="yes" xml:space="preserve">
          <source>This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be appended to the file whose name is the expansion of &lt;var&gt;word&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56799de86f1e6d6fa96e1e930b36c93db6384595" translate="yes" xml:space="preserve">
          <source>This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be redirected to the file whose name is the expansion of &lt;var&gt;word&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098091aa94ef2f9c52549d501cc96335db2b9a80" translate="yes" xml:space="preserve">
          <source>This construct is typically used as shorthand when the common prefix of the strings to be generated is longer than in the above example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904303c6dcba829a9fb6ebeeb4ed82e34d87e5b5" translate="yes" xml:space="preserve">
          <source>This creates a coprocess named &lt;var&gt;NAME&lt;/var&gt;. If &lt;var&gt;NAME&lt;/var&gt; is not supplied, the default name is &lt;var&gt;COPROC&lt;/var&gt;. &lt;var&gt;NAME&lt;/var&gt; must not be supplied if &lt;var&gt;command&lt;/var&gt; is a simple command (see &lt;a href=&quot;simple-commands#Simple-Commands&quot;&gt;Simple Commands&lt;/a&gt;); otherwise, it is interpreted as the first word of the simple command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a80e893b74901379cada236187c32722dce1a2" translate="yes" xml:space="preserve">
          <source>This defines a shell function named &lt;var&gt;name&lt;/var&gt;. The reserved word &lt;code&gt;function&lt;/code&gt; is optional. If the &lt;code&gt;function&lt;/code&gt; reserved word is supplied, the parentheses are optional. The &lt;var&gt;body&lt;/var&gt; of the function is the compound command &lt;var&gt;compound-command&lt;/var&gt; (see &lt;a href=&quot;compound-commands#Compound-Commands&quot;&gt;Compound Commands&lt;/a&gt;). That command is usually a &lt;var&gt;list&lt;/var&gt; enclosed between { and }, but may be any compound command listed above, with one exception: If the &lt;code&gt;function&lt;/code&gt; reserved word is used, but the parentheses are not supplied, the braces are required. &lt;var&gt;compound-command&lt;/var&gt; is executed whenever &lt;var&gt;name&lt;/var&gt; is specified as the name of a command. When the shell is in &lt;small&gt;POSIX&lt;/small&gt; mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;), &lt;var&gt;name&lt;/var&gt; may not be the same as one of the special builtins (see &lt;a href=&quot;special-builtins#Special-Builtins&quot;&gt;Special Builtins&lt;/a&gt;). Any redirections (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;) associated with the shell function are performed when the function is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f7f5b4da998ab8df0644c5d407c25a95acfdf5" translate="yes" xml:space="preserve">
          <source>This directive takes a single filename as an argument and reads commands and bindings from that file. For example, the following directive reads from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5118d015d00e4a360925cba156e434ce747bdac" translate="yes" xml:space="preserve">
          <source>This enables process substitution (see &lt;a href=&quot;process-substitution#Process-Substitution&quot;&gt;Process Substitution&lt;/a&gt;) if the operating system provides the necessary support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ec920a9b1ef0bd197e2d02cb16baed84fbb992" translate="yes" xml:space="preserve">
          <source>This enables support for multibyte characters if the operating system provides the necessary support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509f335377188e421365bec5bd4d4686ab18e530" translate="yes" xml:space="preserve">
          <source>This enables the job control features (see &lt;a href=&quot;job-control#Job-Control&quot;&gt;Job Control&lt;/a&gt;), if the operating system supports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69be3ac71af5df7545cc8a700149c2d3ee31783" translate="yes" xml:space="preserve">
          <source>This enables the special handling of filenames of the form &lt;code&gt;/dev/tcp/&lt;var&gt;host&lt;/var&gt;/&lt;var&gt;port&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;/dev/udp/&lt;var&gt;host&lt;/var&gt;/&lt;var&gt;port&lt;/var&gt;&lt;/code&gt; when used in redirections (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a07c8bd3f0229d20c7c2f39de9b4875eb9f8a8" translate="yes" xml:space="preserve">
          <source>This expansion modifies the case of alphabetic characters in &lt;var&gt;parameter&lt;/var&gt;. The &lt;var&gt;pattern&lt;/var&gt; is expanded to produce a pattern just as in filename expansion. Each character in the expanded value of &lt;var&gt;parameter&lt;/var&gt; is tested against &lt;var&gt;pattern&lt;/var&gt;, and, if it matches the pattern, its case is converted. The pattern should not attempt to match more than one character. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61b2efd68e98c23f7678f3c3ce3e351db3fa92a" translate="yes" xml:space="preserve">
          <source>This function is intended to be bound to the &quot;bracketed paste&quot; escape sequence sent by some terminals, and such a binding is assigned by default. It allows Readline to insert the pasted text as a single unit without treating each character as if it had been read from the keyboard. The characters are inserted as if each one was bound to &lt;code&gt;self-insert&lt;/code&gt; instead of executing any editing commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4672748e5ecd3cd3638310ccff2c686865681f" translate="yes" xml:space="preserve">
          <source>This is Edition 5.0, last updated 12 May 2019, of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a06df83bbef351306679950f41296c41140880a" translate="yes" xml:space="preserve">
          <source>This is another way to specify an argument. If this command is followed by one or more digits, optionally with a leading minus sign, those digits define the argument. If the command is followed by digits, executing &lt;code&gt;universal-argument&lt;/code&gt; again ends the numeric argument, but is otherwise ignored. As a special case, if this command is immediately followed by a character that is neither a digit nor minus sign, the argument count for the next command is multiplied by four. The argument count is initially one, so executing this function the first time makes the argument count four, a second time makes the argument count sixteen, and so on. By default, this is not bound to a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73605a5a3bbb20b86fcc0402bec934934a54ffb5" translate="yes" xml:space="preserve">
          <source>This is referred to as Substring Expansion. It expands to up to &lt;var&gt;length&lt;/var&gt; characters of the value of &lt;var&gt;parameter&lt;/var&gt; starting at the character specified by &lt;var&gt;offset&lt;/var&gt;. If &lt;var&gt;parameter&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151979d05e7240d88bf171daba8f2b58717bcf5a" translate="yes" xml:space="preserve">
          <source>This is semantically equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbd560b0b0395be077529e37601cdce32273f75" translate="yes" xml:space="preserve">
          <source>This manual is meant as a brief introduction to features found in Bash. The Bash manual page should be used as the definitive reference on shell behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c093e6825af417675783ce091d281a9a95a59153" translate="yes" xml:space="preserve">
          <source>This option applies to the shell environment and each subshell environment separately (see &lt;a href=&quot;command-execution-environment#Command-Execution-Environment&quot;&gt;Command Execution Environment&lt;/a&gt;), and may cause subshells to exit before executing all the commands in the subshell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42eafa62609fe5b37b24cded2464d5b80027b3dc" translate="yes" xml:space="preserve">
          <source>This produces a shell with minimal features, close to the historical Bourne shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7e79b98ec0db3f559f5c9043a8f3f79dc69673" translate="yes" xml:space="preserve">
          <source>This section briefly describes the builtins which Bash inherits from the Bourne Shell, as well as the builtin commands which are unique to or have been extended in Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d4766cf4327e831915497c7a2b7779015e37ea" translate="yes" xml:space="preserve">
          <source>This section describes Readline commands that may be bound to key sequences. You can list your key bindings by executing &lt;code&gt;bind&amp;nbsp;-P&lt;/code&gt; or, for a more terse format, suitable for an &lt;var&gt;inputrc&lt;/var&gt; file, &lt;code&gt;bind&amp;nbsp;-p&lt;/code&gt;. (See &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;.) Command names without an accompanying key sequence are unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c2933a9fb91b2574d1896fdb5a5d064ade83dc" translate="yes" xml:space="preserve">
          <source>This section describes builtin commands which are unique to or have been extended in Bash. Some of these commands are specified in the &lt;small&gt;POSIX&lt;/small&gt; standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021d6317bb52d7c98080712da2ab2b13bfecd196" translate="yes" xml:space="preserve">
          <source>This section describes how Bash executes its startup files. If any of the files exist but cannot be read, Bash reports an error. Tildes are expanded in filenames as described above under Tilde Expansion (see &lt;a href=&quot;tilde-expansion#Tilde-Expansion&quot;&gt;Tilde Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f151c5c21237c924798b84115f0053c53cfacfd" translate="yes" xml:space="preserve">
          <source>This syntax is also accepted by the &lt;code&gt;declare&lt;/code&gt; builtin. Individual array elements may be assigned to using the &lt;code&gt;&lt;var&gt;name&lt;/var&gt;[&lt;var&gt;subscript&lt;/var&gt;]=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; syntax introduced above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8200736ff62022947594a20000da454c1425bb2e" translate="yes" xml:space="preserve">
          <source>This text is a brief description of the features that are present in the Bash shell (version 5.0, 12 May 2019). The Bash home page is &lt;a href=&quot;http://www.gnu.org/software/bash/&quot;&gt;http://www.gnu.org/software/bash/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa36388e8270005983d3c3a89d175634cb9d6d6" translate="yes" xml:space="preserve">
          <source>This type of redirection instructs the shell to read input from the current source until a line containing only &lt;var&gt;word&lt;/var&gt; (with no trailing blanks) is seen. All of the lines read up to that point are then used as the standard input (or file descriptor &lt;var&gt;n&lt;/var&gt; if &lt;var&gt;n&lt;/var&gt; is specified) for a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f6e17e8da6cd0eb6bf7fce31b9c51712841200" translate="yes" xml:space="preserve">
          <source>This variable can be set to either &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b898e323bf42516d42d2884eb9c4d9d2c8ecc146" translate="yes" xml:space="preserve">
          <source>This variable can be used with &lt;code&gt;BASH_LINENO&lt;/code&gt; and &lt;code&gt;BASH_SOURCE&lt;/code&gt;. Each element of &lt;code&gt;FUNCNAME&lt;/code&gt; has corresponding elements in &lt;code&gt;BASH_LINENO&lt;/code&gt; and &lt;code&gt;BASH_SOURCE&lt;/code&gt; to describe the call stack. For instance, &lt;code&gt;${FUNCNAME[$i]}&lt;/code&gt; was called from the file &lt;code&gt;${BASH_SOURCE[$i+1]}&lt;/code&gt; at line number &lt;code&gt;${BASH_LINENO[$i]}&lt;/code&gt;. The &lt;code&gt;caller&lt;/code&gt; builtin displays the current call stack using this information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f621ed80bd0b1d46bf87d748900234c7ee9eaa0" translate="yes" xml:space="preserve">
          <source>This variable controls how the shell interacts with the user and job control. If this variable exists then single word simple commands without redirections are treated as candidates for resumption of an existing job. There is no ambiguity allowed; if there is more than one job beginning with the string typed, then the most recently accessed job will be selected. The name of a stopped job, in this context, is the command line used to start it. If this variable is set to the value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322c0f55723ec893e9cb7bfc5a0c27101a72d2f9" translate="yes" xml:space="preserve">
          <source>This variable determines the collation order used when sorting the results of filename expansion, and determines the behavior of range expressions, equivalence classes, and collating sequences within filename expansion and pattern matching (see &lt;a href=&quot;filename-expansion#Filename-Expansion&quot;&gt;Filename Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0ca062754111dbbfd7e5739986fb58b4a986cd" translate="yes" xml:space="preserve">
          <source>This variable determines the interpretation of characters and the behavior of character classes within filename expansion and pattern matching (see &lt;a href=&quot;filename-expansion#Filename-Expansion&quot;&gt;Filename Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbe98e6bd7b514b31e99a907e5f0b6515c9aab6" translate="yes" xml:space="preserve">
          <source>This variable determines the locale category used for data and time formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb0dafe7e2142258af9b9c7fdf74c8aebee47d7" translate="yes" xml:space="preserve">
          <source>This variable determines the locale category used for number formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a56010968910b59ed93e8bc10f374429422c2c" translate="yes" xml:space="preserve">
          <source>This variable determines the locale used to translate double-quoted strings preceded by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ab35dc0367a2aaa05d2986dc008b4f6d6c1c34" translate="yes" xml:space="preserve">
          <source>This variable expands to the number of seconds since the shell was started. Assignment to this variable resets the count to the value assigned, and the expanded value becomes the value assigned plus the number of seconds since the assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d0578e878088aefbfca4ced87f5d6f4c523b5a" translate="yes" xml:space="preserve">
          <source>This variable overrides the value of &lt;code&gt;LANG&lt;/code&gt; and any other &lt;code&gt;LC_&lt;/code&gt; variable specifying a locale category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c7c3129c1796756c2de28b0ac178af8b1d5551" translate="yes" xml:space="preserve">
          <source>This variable, when set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0a82cc0c0acb81621c0e8a8ea0c1b101cf2241" translate="yes" xml:space="preserve">
          <source>This will recompress all files in the current directory with names ending in .gz using bzip2, running one job per CPU (-j+0) in parallel. (We use &lt;code&gt;ls&lt;/code&gt; for brevity here; using &lt;code&gt;find&lt;/code&gt; as above is more robust in the face of filenames containing unexpected characters.) Parallel can take arguments from the command line; the above can also be written as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad4bbea3750b4693e3ab30e9e81cb36dd009c76" translate="yes" xml:space="preserve">
          <source>This will run as many &lt;code&gt;mv&lt;/code&gt; commands as there are files in the current directory. You can emulate a parallel &lt;code&gt;xargs&lt;/code&gt; by adding the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fa1b98e98d236ed8d9007a8b27f06db355f7c3" translate="yes" xml:space="preserve">
          <source>Three builtin commands are available to manipulate the programmable completion facilities: one to specify how the arguments to a particular command are to be completed, and two to modify the completion as it is happening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1f96e557614b0a690090f9dca6f209f6c0274d" translate="yes" xml:space="preserve">
          <source>Tilde Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a0154a26a0aa025c65e57ccd5615d5132587a5" translate="yes" xml:space="preserve">
          <source>Tilde expansion is only performed on assignments preceding a command name, rather than on all assignment statements on the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccacd4d99966dea93ed7cd2d116b2ebac5faf9f" translate="yes" xml:space="preserve">
          <source>To determine within a startup script whether or not Bash is running interactively, test the value of the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06441f5639bd713ff8f6ee1faf86ceaf5fadf3d" translate="yes" xml:space="preserve">
          <source>To facilitate the implementation of the user interface to job control, the operating system maintains the notion of a current terminal process group &lt;small&gt;ID&lt;/small&gt;. Members of this process group (processes whose process group &lt;small&gt;ID&lt;/small&gt; is equal to the current terminal process group &lt;small&gt;ID&lt;/small&gt;) receive keyboard-generated signals such as &lt;code&gt;SIGINT&lt;/code&gt;. These processes are said to be in the foreground. Background processes are those whose process group &lt;small&gt;ID&lt;/small&gt; differs from the terminal&amp;rsquo;s; such processes are immune to keyboard-generated signals. Only foreground processes are allowed to read from or, if the user so specifies with &lt;code&gt;stty tostop&lt;/code&gt;, write to the terminal. Background processes which attempt to read from (write to when &lt;code&gt;stty tostop&lt;/code&gt; is in effect) the terminal are sent a &lt;code&gt;SIGTTIN&lt;/code&gt; (&lt;code&gt;SIGTTOU&lt;/code&gt;) signal by the kernel&amp;rsquo;s terminal driver, which, unless caught, suspends the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7461bebceaba8e9786a438f43be22c208daad744" translate="yes" xml:space="preserve">
          <source>To find other matching entries in the history list, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30be0318ce7f5e48f6f8aebb72ff5f9a498e339c" translate="yes" xml:space="preserve">
          <source>To find out more about the options and arguments that the &lt;code&gt;configure&lt;/code&gt; script understands, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234871e08b6f492490e17c79f3e3c9f389f0019c" translate="yes" xml:space="preserve">
          <source>To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c79fb4cfb10162b75bfbf4f221b1bd3dea706fd" translate="yes" xml:space="preserve">
          <source>Toggle overwrite mode. With an explicit positive numeric argument, switches to overwrite mode. With an explicit non-positive numeric argument, switches to insert mode. This command affects only &lt;code&gt;emacs&lt;/code&gt; mode; &lt;code&gt;vi&lt;/code&gt; mode does overwrite differently. Each call to &lt;code&gt;readline()&lt;/code&gt; starts in insert mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64173d2188c9be0ec9ff6bb79881f697e1bff5ed" translate="yes" xml:space="preserve">
          <source>Toggle the values of settings controlling optional shell behavior. The settings can be either those listed below, or, if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db14d824e8eb47798dded3ebab911e7aba6462ac" translate="yes" xml:space="preserve">
          <source>Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b56e8610a80aa4c358553af9d469a2389a0d0b" translate="yes" xml:space="preserve">
          <source>Treat unset variables and parameters other than the special parameters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c576040022ef2d3ed4c5cfb729ef747257d3d0c6" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;expr&lt;/var&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e09b47a41f17423a47403dc34af583d967ced8" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;expression&lt;/var&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfe2b86c7856ed0672b49f8031ca7598cd2e53a" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file1&lt;/var&gt; and &lt;var&gt;file2&lt;/var&gt; refer to the same device and inode numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1931c6818bb80999d31b4895be8e1032a0090a5a" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file1&lt;/var&gt; is newer (according to modification date) than &lt;var&gt;file2&lt;/var&gt;, or if &lt;var&gt;file1&lt;/var&gt; exists and &lt;var&gt;file2&lt;/var&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32482cdb8a0a8c00990d2254409eb0064fa456e0" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file1&lt;/var&gt; is older than &lt;var&gt;file2&lt;/var&gt;, or if &lt;var&gt;file2&lt;/var&gt; exists and &lt;var&gt;file1&lt;/var&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f29d31c4b26c9c972f26d19960ae09b504edcc2" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and has a size greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58e629fec5bb0f7399ff14c07ac493c7af547e4" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and has been modified since it was last read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff555302ffe9977d7e774f403778a2b43ca9e6fb" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a block special file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785fff67e549edee63f87e13610d25e06e563134" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a character special file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32250a9f0fb33fa74e350624e933c3af0031a469" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672fc8348e4d811dca287144bf4afc66b5779262" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a named pipe (FIFO).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398d1fa760f00f29d01a407c21ca50fafe5950e2" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915744ff671beed3f722bd4d5fc6716b115eef67" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017980389fddb5aadceb3bc6336ea0d3b25f926b" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303e1abad6194c1fd1d818c1476426963f0229e4" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb2fca38caf968e64be89bc93da5ca5dbbab94c" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is owned by the effective group id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536aa1f6ed6018a92c953af3d3892c3285094b46" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is owned by the effective user id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d461baa0cc35b80042a133d8520dbb853cdc36" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aaebd5416f1b8c71b2067cff350417cc28cd41" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and is writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35727abb72a043fc58a69af5b10c3bdcdce008a" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and its &quot;sticky&quot; bit is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7401f1886dca5f7578d9880d8abf714b6e397264" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and its set-group-id bit is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cb08c3d3b10e3c1f58c6df08810878e2be1bac" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists and its set-user-id bit is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad8ede1f5901af4ead70e5e4f5ffea0dff96af3" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a694844e564143deec0005453edfce994f46f41f" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;string1&lt;/var&gt; sorts after &lt;var&gt;string2&lt;/var&gt; lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaf782c48f4f232fd972b24507c8090e33acfd0" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;string1&lt;/var&gt; sorts before &lt;var&gt;string2&lt;/var&gt; lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd0ae4f41de5a24984c76e4ec506bbf5ead35fe" translate="yes" xml:space="preserve">
          <source>True if both &lt;var&gt;expr1&lt;/var&gt; and &lt;var&gt;expr2&lt;/var&gt; are true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f65766fae75b0ca98aa32ef28e4297c6e10769f" translate="yes" xml:space="preserve">
          <source>True if both &lt;var&gt;expression1&lt;/var&gt; and &lt;var&gt;expression2&lt;/var&gt; are true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca4bbaac189fe4ef1c7494e1ad83de3cf6af5b6" translate="yes" xml:space="preserve">
          <source>True if either &lt;var&gt;expr1&lt;/var&gt; or &lt;var&gt;expr2&lt;/var&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db68e589c03d9400814cc445d96c1dc4310f307f" translate="yes" xml:space="preserve">
          <source>True if either &lt;var&gt;expression1&lt;/var&gt; or &lt;var&gt;expression2&lt;/var&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8258be0a5a3c372a9f45bc293f8b281921f601" translate="yes" xml:space="preserve">
          <source>True if file descriptor &lt;var&gt;fd&lt;/var&gt; is open and refers to a terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac97a4e44b66a08100ff32dd6db743cd8d30e14" translate="yes" xml:space="preserve">
          <source>True if the length of &lt;var&gt;string&lt;/var&gt; is non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f209d388a9f63e0cf9fc44924f1c6cc1fcf816a" translate="yes" xml:space="preserve">
          <source>True if the length of &lt;var&gt;string&lt;/var&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9755b366b236842b5acd5a1bb0f3c4e786f2da82" translate="yes" xml:space="preserve">
          <source>True if the shell option &lt;var&gt;optname&lt;/var&gt; is enabled. The list of options appears in the description of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095ba591e289192519c99cde5accd02885f7161e" translate="yes" xml:space="preserve">
          <source>True if the shell variable &lt;var&gt;varname&lt;/var&gt; is set (has been assigned a value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cfa3f65eadea23036a451a78c852c151c553c7" translate="yes" xml:space="preserve">
          <source>True if the shell variable &lt;var&gt;varname&lt;/var&gt; is set and is a name reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87550cc27a4d851c58589edab9351918b2c6e70e" translate="yes" xml:space="preserve">
          <source>True if the strings are equal. When used with the &lt;code&gt;[[&lt;/code&gt; command, this performs pattern matching as described above (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901d788cb9c954e0e3bc5acc54c4b07a8234d973" translate="yes" xml:space="preserve">
          <source>True if the strings are not equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba597c4ba706a33ba89181ef140d5de6ce00b1f" translate="yes" xml:space="preserve">
          <source>Turn on privileged mode. In this mode, the &lt;code&gt;$BASH_ENV&lt;/code&gt; and &lt;code&gt;$ENV&lt;/code&gt; files are not processed, shell functions are not inherited from the environment, and the &lt;code&gt;SHELLOPTS&lt;/code&gt;, &lt;code&gt;BASHOPTS&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt; and &lt;code&gt;GLOBIGNORE&lt;/code&gt; variables, if they appear in the environment, are ignored. If the shell is started with the effective user (group) id not equal to the real user (group) id, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529cc456a0b2e03b61877af15a727605fcc2878b" translate="yes" xml:space="preserve">
          <source>Turn on the interpretation of a number of backslash-escaped characters in the &lt;code&gt;$PS0&lt;/code&gt;, &lt;code&gt;$PS1&lt;/code&gt;, &lt;code&gt;$PS2&lt;/code&gt;, and &lt;code&gt;$PS4&lt;/code&gt; prompt strings. See &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;, for a complete list of prompt string escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3795902d765dfd462c8684fb196a720749ac4df0" translate="yes" xml:space="preserve">
          <source>Turning off restricted mode with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d93843f852e85798d20eeb3cdc905a4fa50479" translate="yes" xml:space="preserve">
          <source>Two-way communication between commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4d91bc73387f9d4d807d8dd6507627174593ea" translate="yes" xml:space="preserve">
          <source>Type &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="d3ec7720c14cebb138c6a1ef57a0eb2ea1e40a65" translate="yes" xml:space="preserve">
          <source>Unbind all keys bound to the named &lt;var&gt;function&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09912a5a17af809447f38efa5d4c0b6c0ec7c06" translate="yes" xml:space="preserve">
          <source>Undo all changes made to this line. This is like executing the &lt;code&gt;undo&lt;/code&gt; command enough times to get back to the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6012c0f2d0e2bd7f7010ec2b337685770c24679e" translate="yes" xml:space="preserve">
          <source>Undo the last editing command. You can undo all the way back to an empty line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7021edb2aa70f462455b960f49f5a5410323a4" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, each builtin command documented as accepting options preceded by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d754bbd613ae92596fbe8c352f9060939b1fa5db" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, the &lt;code&gt;shopt&lt;/code&gt; options are disabled (off) by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9ca0e57a5feba07a2f16b1b29d2a12e00b69b2" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified, primaries that operate on files follow symbolic links and operate on the target of the link, rather than the link itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5bef4f6cefc24fd54a3710a491f1aee7ad8db0" translate="yes" xml:space="preserve">
          <source>Up to three characters which control history expansion, quick substitution, and tokenization (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;). The first character is the &lt;var&gt;history expansion&lt;/var&gt; character, that is, the character which signifies the start of a history expansion, normally &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1467b55bf83d8f146d9cbd0dbde2ea1dffe5d0ca" translate="yes" xml:space="preserve">
          <source>Uppercase the current (or following) word. With a negative argument, uppercase the previous word, but do not move the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5d9a89497ab86de574d743d1c130d84137f4f1" translate="yes" xml:space="preserve">
          <source>Use &lt;var&gt;keymap&lt;/var&gt; as the keymap to be affected by the subsequent bindings. Acceptable &lt;var&gt;keymap&lt;/var&gt; names are &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;emacs-standard&lt;/code&gt;, &lt;code&gt;emacs-meta&lt;/code&gt;, &lt;code&gt;emacs-ctlx&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;vi-move&lt;/code&gt;, &lt;code&gt;vi-command&lt;/code&gt;, and &lt;code&gt;vi-insert&lt;/code&gt;. &lt;code&gt;vi&lt;/code&gt; is equivalent to &lt;code&gt;vi-command&lt;/code&gt; (&lt;code&gt;vi-move&lt;/code&gt; is also a synonym); &lt;code&gt;emacs&lt;/code&gt; is equivalent to &lt;code&gt;emacs-standard&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e07f77c9239bf54a759e369906e3a404f76bbe3" translate="yes" xml:space="preserve">
          <source>Use Readline&amp;rsquo;s default filename completion if the compspec generates no matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13efcca92d8c2088b064f9a0d824489242298ce" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;vi&lt;/code&gt;-style line editing interface. This also affects the editing interface used for &lt;code&gt;read -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd846b5b9947fcf59f1ab1e64ccb1efb4c70bfd" translate="yes" xml:space="preserve">
          <source>Use an &lt;code&gt;emacs&lt;/code&gt;-style line editing interface (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;). This also affects the editing interface used for &lt;code&gt;read -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e0786d5f5bb4e3503ea612859fa534484cfee9" translate="yes" xml:space="preserve">
          <source>Use and save the results of the tests in &lt;var&gt;file&lt;/var&gt; instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086fc1b30c6b83fd872491602730a60589b516d8" translate="yes" xml:space="preserve">
          <source>Use external files for the documentation displayed by the &lt;code&gt;help&lt;/code&gt; builtin instead of storing the text internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b03b9d40d67e9e1aca335ea3a530a2b06427e8" translate="yes" xml:space="preserve">
          <source>Use function names only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3939cfddf95079bf3c70d7f2c89621e7c5e8cb7d" translate="yes" xml:space="preserve">
          <source>Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64a382a8d8334301f5273038636975edc03ca65" translate="yes" xml:space="preserve">
          <source>Use the Bash version of &lt;code&gt;malloc&lt;/code&gt; in the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1791f137f37d4095496337401553258787738e6" translate="yes" xml:space="preserve">
          <source>Use the curses library instead of the termcap library. This should be supplied if your system has an inadequate or incomplete termcap database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5c8fd73ad894a813ccaad7a4925ed0c52f8123" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;select&lt;/code&gt; command to determine the column length for printing selection lists. Automatically set if the &lt;code&gt;checkwinsize&lt;/code&gt; option is enabled (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), or in an interactive shell upon receipt of a &lt;code&gt;SIGWINCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c569bca6c6eea434c09da3f820b58ed45456a1" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;select&lt;/code&gt; command to determine the terminal width when printing selection lists. Automatically set if the &lt;code&gt;checkwinsize&lt;/code&gt; option is enabled (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), or in an interactive shell upon receipt of a &lt;code&gt;SIGWINCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fdd5093c6c050a6b063cf37a4191fb09c2631e" translate="yes" xml:space="preserve">
          <source>Used to determine the locale category for any category not specifically selected with a variable starting with &lt;code&gt;LC_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0b7ad9a5bfd4d63654d75f68eb17698307be01" translate="yes" xml:space="preserve">
          <source>User names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3138cc282360a8600ef75867abc1b680f535c7" translate="yes" xml:space="preserve">
          <source>Using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eae4c33c5f87493e2b1cc3498d3d490ac90534" translate="yes" xml:space="preserve">
          <source>Using History Interactively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7ccfcc8a9a926b0b1350dc297a1e2c7cda35d9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;enable&lt;/code&gt; builtin command to enable disabled shell builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b9ca37ed1619de24a56f058a1fe56ab343e43b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;exec&lt;/code&gt; builtin to replace the shell with another command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6ac30a861e1619cd84db145124298ba539ad1f" translate="yes" xml:space="preserve">
          <source>Using the output of a command as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="a3984eeedbd717d8d0ec28ed3e564994273bb19d" translate="yes" xml:space="preserve">
          <source>VERBATIM COPYING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078318c4267a2eb76a7671446bb3b6cb23544b8c" translate="yes" xml:space="preserve">
          <source>Valid arguments for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd56c936990b710865dc57bc3ae92376b9660a0" translate="yes" xml:space="preserve">
          <source>Variable Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e9eab118c299f006f827a6c037c20d995dac29" translate="yes" xml:space="preserve">
          <source>Variable Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e276969864d32d41ccd66d053703a5cafa514c3" translate="yes" xml:space="preserve">
          <source>Variable assignments preceding commands affect only that command, even builtins and functions (see &lt;a href=&quot;environment#Environment&quot;&gt;Environment&lt;/a&gt;). In &lt;code&gt;sh&lt;/code&gt;, all variable assignments preceding commands are global unless the command is executed from the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f507187d0a5a4031dcd2315875af72542c33c5" translate="yes" xml:space="preserve">
          <source>Variable names and values, where appropriate, are recognized without regard to case. Unrecognized variable names are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8044f944dffdadb90c7080fe842ff08f4fe443ca" translate="yes" xml:space="preserve">
          <source>Variables Bash uses to customize job control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf032cb2a8460171d364812c7ddfd295003fca8" translate="yes" xml:space="preserve">
          <source>Variables local to the function may be declared with the &lt;code&gt;local&lt;/code&gt; builtin. These variables are visible only to the function and the commands it invokes. This is particularly important when a shell function calls other functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430be416ee1a6bde3f265a913e16640caf6ace5a" translate="yes" xml:space="preserve">
          <source>Variables present in the shell&amp;rsquo;s initial environment are automatically exported to child processes. The Bourne shell does not normally do this unless the variables are explicitly marked using the &lt;code&gt;export&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b841eae11bf9319d8d92ec0331d39213387a9de3" translate="yes" xml:space="preserve">
          <source>Variables used or set by Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c2d85fcc8296c85c27d685fb685a43e5518049" translate="yes" xml:space="preserve">
          <source>Variables which Bash uses in the same way as the Bourne Shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10056db9d3e6245371ac5fd190b495d652b6fc2" translate="yes" xml:space="preserve">
          <source>Various indexes for this manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850a1309ea27542661d46dd46aedeab66fe7f368" translate="yes" xml:space="preserve">
          <source>Version 1.3, 3 November 2008</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="0a5b141eb4ada1d94bec5095e760c2e909d3a511" translate="yes" xml:space="preserve">
          <source>Wait until the child process specified by each process &lt;small&gt;ID&lt;/small&gt;&lt;var&gt;pid&lt;/var&gt; or job specification &lt;var&gt;jobspec&lt;/var&gt; exits and return the exit status of the last command waited for. If a job spec is given, all processes in the job are waited for. If no arguments are given, all currently active child processes are waited for, and the return status is zero. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b90f212f669732e5904ca7248796b2889df8819" translate="yes" xml:space="preserve">
          <source>Ways to group commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852d4faf737a59961ad578b84ea1222167e054b1" translate="yes" xml:space="preserve">
          <source>We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29091257776e242dd78eb6e74a92f65c4271204f" translate="yes" xml:space="preserve">
          <source>We install the completion function using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0b496aead232019c2e10fd95a82098e897c42d" translate="yes" xml:space="preserve">
          <source>What an interactive shell is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1d5198de366563da43601f5c69be678890beff" translate="yes" xml:space="preserve">
          <source>What changes in a interactive shell?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd12fe3d72f2be333642d248e003627799a52910" translate="yes" xml:space="preserve">
          <source>What determines whether a shell is Interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b792b93ede4848c41e5ef18bf5b05c6f2202b7" translate="yes" xml:space="preserve">
          <source>What happens when Bash or a command it runs receives a signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc61a16a9f07eba1d18f3025bdb8bae3ec152b43" translate="yes" xml:space="preserve">
          <source>What happens when you run a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39753cb75cb0c5b74594822c0841eb7267bb71f1" translate="yes" xml:space="preserve">
          <source>What is Bash?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d69a46587495539e22be234f38996aeb0a37a8" translate="yes" xml:space="preserve">
          <source>What is a shell?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b879b4c80058832d18ae19e85070d872239273ac" translate="yes" xml:space="preserve">
          <source>What is an Interactive Shell?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fae4b61a51c5003ef635ba37d077edfd5a02985" translate="yes" xml:space="preserve">
          <source>What it feels like using History as a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8718a1b15e428da49ae66e23ad7a8d7458d79675" translate="yes" xml:space="preserve">
          <source>What job control is and how Bash allows you to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32696e6dfe2c38566b0745c6133dc7f5f2f730e" translate="yes" xml:space="preserve">
          <source>What your input means to the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="939eb0fb342f62f76ac14f8030ccea8867055342" translate="yes" xml:space="preserve">
          <source>When Bash invokes an external command, the variable &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0890f61347bbf1ac979377a2c90aa96f3d70fe3f" translate="yes" xml:space="preserve">
          <source>When Bash is interactive, in the absence of any traps, it ignores &lt;code&gt;SIGTERM&lt;/code&gt; (so that &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343e2279b1b41bc9544bf20f1acd36ea8c90f0ca" translate="yes" xml:space="preserve">
          <source>When Bash is invoked as an interactive login shell, or as a non-interactive shell with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9c71060dccd3fa7de0b7ad1f41d0d3299654e9" translate="yes" xml:space="preserve">
          <source>When Bash is not executing in &lt;small&gt;POSIX&lt;/small&gt; mode, these builtins behave no differently than the rest of the Bash builtin commands. The Bash &lt;small&gt;POSIX&lt;/small&gt; mode is described in &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bbe73ce70477a17845633ac0643ee9f742681a" translate="yes" xml:space="preserve">
          <source>When Bash is started in &lt;small&gt;POSIX&lt;/small&gt; mode, as with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635f7b7cfca984f782445c48ff197663304bc7a7" translate="yes" xml:space="preserve">
          <source>When Bash is started non-interactively, to run a shell script, for example, it looks for the variable &lt;code&gt;BASH_ENV&lt;/code&gt; in the environment, expands its value if it appears there, and uses the expanded value as the name of a file to read and execute. Bash behaves as if the following command were executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe565d734cceecb3fe936c7e6c90c5086f2c931" translate="yes" xml:space="preserve">
          <source>When Bash runs a shell script, it sets the special parameter &lt;code&gt;0&lt;/code&gt; to the name of the file, rather than the name of the shell, and the positional parameters are set to the remaining arguments, if any are given. If no additional arguments are supplied, the positional parameters are unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e58abd297c6a4133cd5d738bac34e27741aabae" translate="yes" xml:space="preserve">
          <source>When a command in the hash table no longer exists, Bash will re-search &lt;code&gt;$PATH&lt;/code&gt; to find the new location. This is also available with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57adcc6112f09b93153336f00fc3a43b19f963c4" translate="yes" xml:space="preserve">
          <source>When a command that is found to be a shell script is executed (see &lt;a href=&quot;shell-scripts#Shell-Scripts&quot;&gt;Shell Scripts&lt;/a&gt;), &lt;code&gt;rbash&lt;/code&gt; turns off any restrictions in the shell spawned to execute the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8875efd01dda7b5b4b30097c6e56268320958f" translate="yes" xml:space="preserve">
          <source>When a compspec indicates that directory name completion is desired, the programmable completion functions force Readline to append a slash to completed names which are symbolic links to directories, subject to the value of the &lt;var&gt;mark-directories&lt;/var&gt; Readline variable, regardless of the setting of the &lt;var&gt;mark-symlinked-directories&lt;/var&gt; Readline variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12530caddaa309fd835ff8499a285072c87b11d" translate="yes" xml:space="preserve">
          <source>When a function is executed, the arguments to the function become the positional parameters during its execution (see &lt;a href=&quot;positional-parameters#Positional-Parameters&quot;&gt;Positional Parameters&lt;/a&gt;). The special parameter &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37f53584df0fca3f86fc274012236330d7d58b4" translate="yes" xml:space="preserve">
          <source>When a pattern is used for filename expansion, the character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b62095a08bd7b0216aa1ae612e33d7154823e0" translate="yes" xml:space="preserve">
          <source>When a positional parameter consisting of more than a single digit is expanded, it must be enclosed in braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4f52edd6f757831ec88733a19fa50ef12a0318" translate="yes" xml:space="preserve">
          <source>When a program is invoked it is given an array of strings called the &lt;var&gt;environment&lt;/var&gt;. This is a list of name-value pairs, of the form &lt;code&gt;name=value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bda9944164cf112452d8f8b52615725cfd5de8c" translate="yes" xml:space="preserve">
          <source>When a program which uses the Readline library starts up, the init file is read, and the key bindings are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a80ca567de1dd1b14b3ed0a6268811838e44d22" translate="yes" xml:space="preserve">
          <source>When a simple command is executed, the shell performs the following expansions, assignments, and redirections, from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232e66604a9df4ec85b78e97b1ef5290dc8d67f1" translate="yes" xml:space="preserve">
          <source>When a simple command other than a builtin or shell function is to be executed, it is invoked in a separate execution environment that consists of the following. Unless otherwise noted, the values are inherited from the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdb235821ba3486822d12a838408ae1ed87a59e" translate="yes" xml:space="preserve">
          <source>When an interactive login shell exits, or a non-interactive login shell executes the &lt;code&gt;exit&lt;/code&gt; builtin command, Bash reads and executes commands from the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007b34e03af0dd54d201a22183121ea255813af1" translate="yes" xml:space="preserve">
          <source>When an interactive shell that is not a login shell is started, Bash reads and executes commands from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6fb1716bf550e6d2fd9e84ef26357c744a0df8" translate="yes" xml:space="preserve">
          <source>When and how Bash executes scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be03dfe6149d22e64c1dcd3fbf25bf1461e8f4c" translate="yes" xml:space="preserve">
          <source>When any of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7f4665380351078a4b92b8f13ce1c59aee44b4" translate="yes" xml:space="preserve">
          <source>When assigning to an associative array, the subscript is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde5b5c589a1e1bd4e9b27320e42bdff38c97b2f" translate="yes" xml:space="preserve">
          <source>When assigning to an indexed array, if &lt;var&gt;name&lt;/var&gt; is subscripted by a negative number, that number is interpreted as relative to one greater than the maximum index of &lt;var&gt;name&lt;/var&gt;, so negative indices count back from the end of the array, and an index of -1 references the last element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3d6c790567d2b34fc873d9fa4fe748f8ccf81a" translate="yes" xml:space="preserve">
          <source>When available, process substitution is performed simultaneously with parameter and variable expansion, command substitution, and arithmetic expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538a71ef848f2a6c380b3706ed7f7e699e1a41b2" translate="yes" xml:space="preserve">
          <source>When braces are used, the matching ending brace is the first &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c096d63a7ffed613b88cf6e90a5e52589593c53" translate="yes" xml:space="preserve">
          <source>When entering the text of a macro, single or double quotes must be used to indicate a macro definition. Unquoted text is assumed to be a function name. In the macro body, the backslash escapes described above are expanded. Backslash will quote any other character in the macro text, including &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd112b30cf6c4d2c65ca00e38b79431df23dbb8" translate="yes" xml:space="preserve">
          <source>When expanding the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bb4f6e6938705bf7fc6b9c00d3541469a830b9" translate="yes" xml:space="preserve">
          <source>When invoked as &lt;code&gt;sh&lt;/code&gt;, Bash enters &lt;small&gt;POSIX&lt;/small&gt; mode after reading the startup files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add21ed4442cf9a2dd8325bddafd1fb2bfefad0a" translate="yes" xml:space="preserve">
          <source>When invoked as &lt;code&gt;sh&lt;/code&gt;, Bash enters &lt;small&gt;POSIX&lt;/small&gt; mode after the startup files are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8a7270151e34910804cc9c116cd8f1097bd0d4" translate="yes" xml:space="preserve">
          <source>When invoked as an interactive login shell, or as a non-interactive shell with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7953fce75850b2edb7b98ee9a7e7bfd7be5cbdf7" translate="yes" xml:space="preserve">
          <source>When job control is not active, the &lt;code&gt;kill&lt;/code&gt; and &lt;code&gt;wait&lt;/code&gt; builtins do not accept &lt;var&gt;jobspec&lt;/var&gt; arguments. They must be supplied process &lt;small&gt;ID&lt;/small&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a281c916b9b7bd87cb943e319b56cec58fcf88e" translate="yes" xml:space="preserve">
          <source>When listing the history, the &lt;code&gt;fc&lt;/code&gt; builtin does not include an indication of whether or not a history entry has been modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ce90571990e51b3a376a35bfbe9d5d0aab248f" translate="yes" xml:space="preserve">
          <source>When matching a filename, the slash character must always be matched explicitly by a slash in the pattern, but in other matching contexts it can be matched by a special pattern character as described below (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94526a55da849b0bce77ccd1dca347592dcac65f" translate="yes" xml:space="preserve">
          <source>When no arguments are given, &lt;code&gt;popd&lt;/code&gt; removes the top directory from the stack and performs a &lt;code&gt;cd&lt;/code&gt; to the new top directory. The elements are numbered from 0 starting at the first directory listed with &lt;code&gt;dirs&lt;/code&gt;; that is, &lt;code&gt;popd&lt;/code&gt; is equivalent to &lt;code&gt;popd +0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35704d27cbab8942f6e0f842f935547c255c02b" translate="yes" xml:space="preserve">
          <source>When not performing substring expansion, using the form described below (e.g., &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e33c9da97e268b5d63a9391a2bce0492152a19" translate="yes" xml:space="preserve">
          <source>When options are supplied, they set or unset shell attributes. Options, if specified, have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6580a4e014bfeccd6ef9a819a5f70cd8425c69c" translate="yes" xml:space="preserve">
          <source>When parsing and expanding a ${&amp;hellip;} expansion that appears within double quotes, single quotes are no longer special and cannot be used to quote a closing brace or other special character, unless the operator is one of those defined to perform pattern removal. In this case, they do not have to appear as matched pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6971c57a17fffc05a32d0d3f7c561163f04ec7c2" translate="yes" xml:space="preserve">
          <source>When printing shell function definitions (e.g., by &lt;code&gt;type&lt;/code&gt;), Bash does not print the &lt;code&gt;function&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150c68ccee034162950161be62a4f805a5ef9435" translate="yes" xml:space="preserve">
          <source>When referenced, this variable expands to the name of the shell or shell script (identical to &lt;code&gt;$0&lt;/code&gt;; See &lt;a href=&quot;special-parameters#Special-Parameters&quot;&gt;Special Parameters&lt;/a&gt;, for the description of special parameter 0). Assignment to &lt;code&gt;BASH_ARGV0&lt;/code&gt; causes the value assigned to also be assigned to &lt;code&gt;$0&lt;/code&gt;. If &lt;code&gt;BASH_ARGV0&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086cf6906dc04f0765087bbc691ace44014c43a1" translate="yes" xml:space="preserve">
          <source>When running in &lt;small&gt;POSIX&lt;/small&gt; mode, a special builtin returning an error status will not cause the shell to exit (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8317d3aa6cbfb795fe137ca454414725d9ebe3" translate="yes" xml:space="preserve">
          <source>When set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f3e3f1e06a97818ce0ffb33865599309fb29ae" translate="yes" xml:space="preserve">
          <source>When the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6f6132d172440c1347341297e43687516fbe0f" translate="yes" xml:space="preserve">
          <source>When the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753d257bf6ee3cd6f44fec11ebbaeca478a30867" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;[&lt;/code&gt; form is used, the last argument to the command must be a &lt;code&gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8fbc4c3ab7b1cc80a0533e910af5b054950285" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;alias&lt;/code&gt; builtin displays alias definitions, it does not display them with a leading &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede03a75a00c40b7521d02f5b9c764a1fc9ff744" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;cd&lt;/code&gt; builtin cannot change a directory because the length of the pathname constructed from &lt;code&gt;$PWD&lt;/code&gt; and the directory name supplied as an argument exceeds &lt;var&gt;PATH_MAX&lt;/var&gt; when all symbolic links are expanded, &lt;code&gt;cd&lt;/code&gt; will fail instead of attempting to use only the supplied directory name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03d0b8eac300db42ea692af51322d2345246227" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;cd&lt;/code&gt; builtin is invoked in &lt;var&gt;logical&lt;/var&gt; mode, and the pathname constructed from &lt;code&gt;$PWD&lt;/code&gt; and the directory name supplied as an argument does not refer to an existing directory, &lt;code&gt;cd&lt;/code&gt; will fail instead of falling back to &lt;var&gt;physical&lt;/var&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b34d9bc91438d8df4f544558ff765251e270cf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;set&lt;/code&gt; builtin is invoked without options, it displays variable values without quotes, unless they contain shell metacharacters, even if the result contains nonprinting characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b23cbca44922a690aeaf426ca126c4c99bf9c1" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;set&lt;/code&gt; builtin is invoked without options, it does not display shell function names and definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d27a57c44a0c7b3e09cf75676ad49580258f1e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;xpg_echo&lt;/code&gt; option is enabled, Bash does not attempt to interpret any arguments to &lt;code&gt;echo&lt;/code&gt; as options. Each argument is displayed, after escape characters are converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199243eb479e5f8d4ee5c53671c20467621f2580" translate="yes" xml:space="preserve">
          <source>When the coprocess is executed, the shell creates an array variable (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;) named &lt;code&gt;NAME&lt;/code&gt; in the context of the executing shell. The standard output of &lt;var&gt;command&lt;/var&gt; is connected via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to &lt;code&gt;NAME&lt;/code&gt;[0]. The standard input of &lt;var&gt;command&lt;/var&gt; is connected via a pipe to a file descriptor in the executing shell, and that file descriptor is assigned to &lt;code&gt;NAME&lt;/code&gt;[1]. This pipe is established before any redirections specified by the command (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;). The file descriptors can be utilized as arguments to shell commands and redirections using standard word expansions. Other than those created to execute command and process substitutions, the file descriptors are not available in subshells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272fd40115d9a135d8797ba275f3cd6b25337922" translate="yes" xml:space="preserve">
          <source>When the end of options is encountered, &lt;code&gt;getopts&lt;/code&gt; exits with a return value greater than zero. &lt;code&gt;OPTIND&lt;/code&gt; is set to the index of the first non-option argument, and &lt;var&gt;name&lt;/var&gt; is set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ed536c18161a096582f70b1168f7b1216c7832" translate="yes" xml:space="preserve">
          <source>When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a9041d224ded50f6d61046286100832281d2e7" translate="yes" xml:space="preserve">
          <source>When the shell is in &lt;small&gt;POSIX&lt;/small&gt; mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;), &lt;code&gt;time&lt;/code&gt; may be followed by a newline. In this case, the shell displays the total user and system time consumed by the shell and its children. The &lt;code&gt;TIMEFORMAT&lt;/code&gt; variable may be used to specify the format of the time information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ec193a539c22ac5eca91a72f81d7adf6025612" translate="yes" xml:space="preserve">
          <source>When the shell is running interactively, it changes its behavior in several ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42b85a148a076bbc7a895300855a32abf142653" translate="yes" xml:space="preserve">
          <source>When the shell is waiting for a job or process using the &lt;code&gt;wait&lt;/code&gt; builtin, and job control is enabled, &lt;code&gt;wait&lt;/code&gt; will return when the job changes state. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfddd034699ddbb19853b5cffd539e5eaa98dc8" translate="yes" xml:space="preserve">
          <source>When the shell reads input, it proceeds through a sequence of operations. If the input indicates the beginning of a comment, the shell ignores the comment symbol (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef506d9dc11fa9109da8ad65cf883d89c9449053" translate="yes" xml:space="preserve">
          <source>When the shell starts up, the history is initialized from the file named by the &lt;code&gt;HISTFILE&lt;/code&gt; variable (default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a6e1e727c8b8d46a90e5211c2564f5b4e07e74" translate="yes" xml:space="preserve">
          <source>When the variable is assigned a value, all lower-case characters are converted to upper-case. The lower-case attribute is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b92815e90e22bfc43ea3604f269b538b0461773" translate="yes" xml:space="preserve">
          <source>When the variable is assigned a value, all upper-case characters are converted to lower-case. The upper-case attribute is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c63a351bbb0b692e0a20f094808827f822d8d96" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;[[&lt;/code&gt;, the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea37a64e15d28ed7a20c1b6d5cdabe5ba6012c12" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;test&lt;/code&gt; or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ee732871c7b8b43fe2973d514b7807acd539cd" translate="yes" xml:space="preserve">
          <source>When using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61dcfadd37db50e68e58cb8326397e6ca93fc37" translate="yes" xml:space="preserve">
          <source>When using a variable name with a subscript as an argument to a command, such as with &lt;code&gt;unset&lt;/code&gt;, without using the word expansion syntax described above, the argument is subject to the shell&amp;rsquo;s filename expansion. If filename expansion is not desired, the argument should be quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81da930d4106f4d1e85e5be34715b2306e8ddcdf" translate="yes" xml:space="preserve">
          <source>When using the second form, &lt;var&gt;word&lt;/var&gt; may not expand to a number or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668069609747d6c224ed20a0f608411c874e3e6a" translate="yes" xml:space="preserve">
          <source>When using the shell, only &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56abe9ecf09f2b7691653e7729606d38408ddd54" translate="yes" xml:space="preserve">
          <source>When word completion is attempted for an argument to a command for which a completion specification (a &lt;var&gt;compspec&lt;/var&gt;) has been defined using the &lt;code&gt;complete&lt;/code&gt; builtin (see &lt;a href=&quot;programmable-completion-builtins#Programmable-Completion-Builtins&quot;&gt;Programmable Completion Builtins&lt;/a&gt;), the programmable completion facilities are invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e6cf49bb0a8ee6e58a3e620a573fc3ad9d522f" translate="yes" xml:space="preserve">
          <source>When you add text in the middle of a line, you will notice that characters to the right of the cursor are &amp;lsquo;pushed over&amp;rsquo; to make room for the text that you have inserted. Likewise, when you delete text behind the cursor, characters to the right of the cursor are &amp;lsquo;pulled back&amp;rsquo; to fill in the blank space created by the removal of the text. A list of the bare essentials for editing the text of an input line follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec74b15fc6bfefba022a119fb96c3cec23af155" translate="yes" xml:space="preserve">
          <source>When you enter a line in &lt;code&gt;vi&lt;/code&gt; mode, you are already placed in &amp;lsquo;insertion&amp;rsquo; mode, as if you had typed an &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bab91fb8c5856e90231b9523fc1c7ec513fdd3" translate="yes" xml:space="preserve">
          <source>When you use a kill command, the text is saved in a &lt;em&gt;kill-ring&lt;/em&gt;. Any number of consecutive kills save all of the killed text together, so that when you yank it back, you get it all. The kill ring is not line specific; the text that you killed on a previously typed line is available to be yanked back later, when you are typing another line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255774c5e880fecd728cc58e02263e9d32d2416a" translate="yes" xml:space="preserve">
          <source>While executing commands is essential, most of the power (and complexity) of shells is due to their embedded programming languages. Like any high-level language, the shell provides variables, flow control constructs, quoting, and functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9180ec4d813a7436e99939ed2d81f4dcd696a248" translate="yes" xml:space="preserve">
          <source>While the &lt;small&gt;GNU&lt;/small&gt; operating system provides other shells, including a version of &lt;code&gt;csh&lt;/code&gt;, Bash is the default shell. Like other &lt;small&gt;GNU&lt;/small&gt; software, Bash is quite portable. It currently runs on nearly every version of Unix and a few other operating systems - independently-supported ports exist for &lt;small&gt;MS-DOS&lt;/small&gt;, &lt;small&gt;OS/2&lt;/small&gt;, and Windows platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d296b77a725bd6de00e8492f649e38826354e5c" translate="yes" xml:space="preserve">
          <source>While the Readline library does not have a full set of &lt;code&gt;vi&lt;/code&gt; editing functions, it does contain enough to allow simple editing of the line. The Readline &lt;code&gt;vi&lt;/code&gt; mode behaves as specified in the &lt;small&gt;POSIX&lt;/small&gt; standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9612b10a6e0a4d6d0c625743851547327018b8f1" translate="yes" xml:space="preserve">
          <source>While variable indirection is available, it may not be applied to the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19351b493bff1c5e2ef8080582e54b0ee55dac4" translate="yes" xml:space="preserve">
          <source>With no options, display the history list with line numbers. Lines prefixed with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ad82d118f5a65694a7b6a3104ba8e1f5d0dc63" translate="yes" xml:space="preserve">
          <source>Within &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655cc82cd533f06957e505ed15d00ab247320e6c" translate="yes" xml:space="preserve">
          <source>Without &lt;var&gt;expr&lt;/var&gt;, &lt;code&gt;caller&lt;/code&gt; displays the line number and source filename of the current subroutine call. If a non-negative integer is supplied as &lt;var&gt;expr&lt;/var&gt;, &lt;code&gt;caller&lt;/code&gt; displays the line number, subroutine name, and source file corresponding to that position in the current execution call stack. This extra information may be used, for example, to print a stack trace. The current frame is frame 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bccb568d2083ce3cc3fd5d484aeb7a4fa665e1" translate="yes" xml:space="preserve">
          <source>Without a numeric argument, the value of the &lt;code&gt;comment-begin&lt;/code&gt; variable is inserted at the beginning of the current line. If a numeric argument is supplied, this command acts as a toggle: if the characters at the beginning of the line do not match the value of &lt;code&gt;comment-begin&lt;/code&gt;, the value is inserted, otherwise the characters in &lt;code&gt;comment-begin&lt;/code&gt; are deleted from the beginning of the line. In either case, the line is accepted as if a newline had been typed. The default value of &lt;code&gt;comment-begin&lt;/code&gt; causes this command to make the current line a shell comment. If a numeric argument causes the comment character to be removed, the line will be executed by the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653ebf73bebeedbc12797f58a606efdf49f60d81" translate="yes" xml:space="preserve">
          <source>Without arguments or with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96926cabf14560d2972e553541566c921210f5d0" translate="yes" xml:space="preserve">
          <source>Without options, remove each &lt;var&gt;jobspec&lt;/var&gt; from the table of active jobs. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c759d7dc3468dfe86f9cbaed5a1c36016677768d" translate="yes" xml:space="preserve">
          <source>Word Designators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1b902933d8ac04cec7026f7cceaa9d893a7476" translate="yes" xml:space="preserve">
          <source>Word Splitting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2778c7e426e39bc29879fdf4ac05b63428e4861" translate="yes" xml:space="preserve">
          <source>Word designators are used to select desired words from the event. A &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848f48edf34a4bd78eb9d02f18c5a46103ddc968" translate="yes" xml:space="preserve">
          <source>Words of the form &lt;code&gt;$'&lt;var&gt;string&lt;/var&gt;'&lt;/code&gt; are treated specially. The word expands to &lt;var&gt;string&lt;/var&gt;, with backslash-escaped characters replaced as specified by the ANSI C standard. Backslash escape sequences, if present, are decoded as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c51356b071f1d521a4f1f299fba8c8301acb7a" translate="yes" xml:space="preserve">
          <source>Write out the current history list to the history file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9842f6fa4c1dbb866338c2ef7fc96fca552c238e" translate="yes" xml:space="preserve">
          <source>Write the formatted &lt;var&gt;arguments&lt;/var&gt; to the standard output under the control of the &lt;var&gt;format&lt;/var&gt;. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ce36eaf7d15e3950e3e94f7e814a43c3aff0ef" translate="yes" xml:space="preserve">
          <source>XCF</source>
          <target state="translated">XCF</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="c6522577101d4c974000a04d4aa197b0b181fc24" translate="yes" xml:space="preserve">
          <source>Yank the most recently killed text back into the buffer at the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677dc7bd7602fa2437c898d54e1ab14378d52ff9" translate="yes" xml:space="preserve">
          <source>Yank the top of the kill ring into the buffer at point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c737fe9782668677465bb13c81366f7005ee3e" translate="yes" xml:space="preserve">
          <source>You can compile Bash for more than one kind of computer at the same time, by placing the object files for each architecture in their own directory. To do this, you must use a version of &lt;code&gt;make&lt;/code&gt; that supports the &lt;code&gt;VPATH&lt;/code&gt; variable, such as GNU &lt;code&gt;make&lt;/code&gt;. &lt;code&gt;cd&lt;/code&gt; to the directory where you want the object files and executables to go and run the &lt;code&gt;configure&lt;/code&gt; script from the source directory (see &lt;a href=&quot;basic-installation#Basic-Installation&quot;&gt;Basic Installation&lt;/a&gt;). You may need to supply the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966292c34949d5d341081c06091f7aeabaaf5055" translate="yes" xml:space="preserve">
          <source>You can modify the run-time behavior of Readline by altering the values of variables in Readline using the &lt;code&gt;set&lt;/code&gt; command within the init file. The syntax is simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7bf613e3295ed9f0a8fb5ca0672b3c5eab07e1" translate="yes" xml:space="preserve">
          <source>You can pass numeric arguments to Readline commands. Sometimes the argument acts as a repeat count, other times it is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be9cf180a0c9b7e18ecc3038ece719ad6ce745a" translate="yes" xml:space="preserve">
          <source>You can remove the program binaries and object files from the source code directory by typing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8809b83e96c416d37503bf077e1953492b50d356" translate="yes" xml:space="preserve">
          <source>You can specify separate installation prefixes for architecture-specific files and architecture-independent files. If you give &lt;code&gt;configure&lt;/code&gt; the option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d549afa7c81de4bec2647a208873a198d6763c6" translate="yes" xml:space="preserve">
          <source>You can use Parallel to move files from the current directory when the number of files is too large to process with one &lt;code&gt;mv&lt;/code&gt; invocation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1274999d5897a967880e9602c53686869c7832" translate="yes" xml:space="preserve">
          <source>You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e661e3a96416898648db44bb6ce0eb56887ee1c9" translate="yes" xml:space="preserve">
          <source>You may add a section Entitled &amp;ldquo;Endorsements&amp;rdquo;, provided it contains nothing but endorsements of your Modified Version by various parties&amp;mdash;for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282bb9dfed04c9fa638e3ac9a73c1f5ecd474d79" translate="yes" xml:space="preserve">
          <source>You may also lend copies, under the same conditions stated above, and you may publicly display copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6f537b19345a1f28e1581319a0a7d12ff3a575" translate="yes" xml:space="preserve">
          <source>You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412203d0de70d3e44d37e7ecda18aa73505e5c31" translate="yes" xml:space="preserve">
          <source>You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30168039ed590d15bcce8ea918cbf6e6bb07cae" translate="yes" xml:space="preserve">
          <source>You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e62f961ec3ed13a2f798469affbc27b69bd976" translate="yes" xml:space="preserve">
          <source>You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8e1827e6f8675e9dd0669377a6e4bd993e83f2" translate="yes" xml:space="preserve">
          <source>You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d02e802fce41287d4c0388192a7d2945190088" translate="yes" xml:space="preserve">
          <source>You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d224d8bd579e022a3152adc3ac6ec5ffac7b3367" translate="yes" xml:space="preserve">
          <source>[ ]*</source>
          <target state="translated">[ ]*</target>
        </trans-unit>
        <trans-unit id="edd74dd5fd077a5baf2dd832b6fcd2516c38db54" translate="yes" xml:space="preserve">
          <source>[a-dx-z]</source>
          <target state="translated">[a-dx-z]</target>
        </trans-unit>
        <trans-unit id="e9f16a01f274397b0c8315286f1929d05b06c0ef" translate="yes" xml:space="preserve">
          <source>[aBbCcDdxXyYz]</source>
          <target state="translated">[aBbCcDdxXyYz]</target>
        </trans-unit>
        <trans-unit id="fadabc351d4f25299435d015d6cfd06136703b5e" translate="yes" xml:space="preserve">
          <source>[abcdxyz]</source>
          <target state="translated">[abcdxyz]</target>
        </trans-unit>
        <trans-unit id="41899536e2ac4b7391727782d5a1adbdf3f35125" translate="yes" xml:space="preserve">
          <source>[n]&amp;gt;&amp;amp;&lt;var&gt;word&lt;/var&gt;</source>
          <target state="translated">[n]&amp;gt;&amp;amp;&lt;var&gt;word&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="780fa0ff9e751654e40fe8a1a68d0f2a62d159e8" translate="yes" xml:space="preserve">
          <source>[n]&amp;lt;&amp;amp;&lt;var&gt;word&lt;/var&gt;</source>
          <target state="translated">[n]&amp;lt;&amp;amp;&lt;var&gt;word&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="08534f33c201a45017b502e90a800f1b708ebcb3" translate="yes" xml:space="preserve">
          <source>\</source>
          <target state="translated">\</target>
        </trans-unit>
        <trans-unit id="2de673b7fa2e0a0e52326460a59d3f726ea66d02" translate="yes" xml:space="preserve">
          <source>\1</source>
          <target state="translated">\1</target>
        </trans-unit>
        <trans-unit id="c016fb3c2d71f02e58827dbbb11225ca77cbae92" translate="yes" xml:space="preserve">
          <source>\2</source>
          <target state="translated">\2</target>
        </trans-unit>
        <trans-unit id="d2e4c64b58fc62c43b5d838f83539aed0c4da1a8" translate="yes" xml:space="preserve">
          <source>\s-\v\$</source>
          <target state="translated">\s-\v\$</target>
        </trans-unit>
        <trans-unit id="5bc50612646fc47ce021d3fa7fba6af78c0a8cca" translate="yes" xml:space="preserve">
          <source>^Y</source>
          <target state="translated">^Y</target>
        </trans-unit>
        <trans-unit id="702bf963d5f4436227c3776678b3e175902e762a" translate="yes" xml:space="preserve">
          <source>^Z</source>
          <target state="translated">^Z</target>
        </trans-unit>
        <trans-unit id="7e15bb5c01e7dd56499e37c634cf791d3a519aee" translate="yes" xml:space="preserve">
          <source>`</source>
          <target state="translated">`</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="90c73bacbd21841707ae60d5bcc1160e5dc4e4c3" translate="yes" xml:space="preserve">
          <source>a control-&lt;var&gt;x&lt;/var&gt; character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d536b1baf37bf343aa892b44bcab569176c3a795" translate="yes" xml:space="preserve">
          <source>aaaaaab</source>
          <target state="translated">aaaaaab</target>
        </trans-unit>
        <trans-unit id="40b904fd8852297daeaeb426b1bca46fd2454aa3" translate="yes" xml:space="preserve">
          <source>aab</source>
          <target state="translated">aab</target>
        </trans-unit>
        <trans-unit id="9118866496dfbc2e597505390a41e74349ab5152" translate="yes" xml:space="preserve">
          <source>addition, subtraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f3659ec271eee920b5269f5364d0ab8433728c" translate="yes" xml:space="preserve">
          <source>after (or before) any login-specific initializations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50433605f8f400a57a74b70284fb69b0627cf01" translate="yes" xml:space="preserve">
          <source>alert (bell)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="c81ac90ad154e582701af8147aa7541b041f5a84" translate="yes" xml:space="preserve">
          <source>alias expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7208b011d04e4840597133487f3e0cdb3e7339a6" translate="yes" xml:space="preserve">
          <source>an escape character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12e6046a92734bfd31cc6d381fc395fb569cedf" translate="yes" xml:space="preserve">
          <source>an escape character (not ANSI C)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="f9585e116f42fc80bfcc117654868617655b8df3" translate="yes" xml:space="preserve">
          <source>and its successor,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee01b359832af6797c78f83ce4d97efd54f80c3" translate="yes" xml:space="preserve">
          <source>and the compound assignment syntax to create array variables, additional attributes do not take effect until subsequent assignments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d82c662f6eac816c0e3353d7ed4a723e965282" translate="yes" xml:space="preserve">
          <source>and the current working directory cannot be successfully determined after a successful directory change, &lt;code&gt;cd&lt;/code&gt; will return an unsuccessful status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69b217d0e88de30853dbce706c9849430de03f5" translate="yes" xml:space="preserve">
          <source>and/or processing tools are not generally available, and the machine-generated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1268a4c533db781c38527c7c5f444ef72884fba8" translate="yes" xml:space="preserve">
          <source>are always ignored when &lt;code&gt;GLOBIGNORE&lt;/code&gt; is set and not null. However, setting &lt;code&gt;GLOBIGNORE&lt;/code&gt; to a non-null value has the effect of enabling the &lt;code&gt;dotglob&lt;/code&gt; shell option, so all other filenames beginning with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e268dbb80edc51c8246863d7e7bac755c465aec" translate="yes" xml:space="preserve">
          <source>are supplied, any other &lt;var&gt;name&lt;/var&gt; arguments are ignored; these completions only apply to the case specified by the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3ecd9e4f4771afd3546fe76a43487532ad61af" translate="yes" xml:space="preserve">
          <source>argument to tell &lt;code&gt;configure&lt;/code&gt; where the source files are. &lt;code&gt;configure&lt;/code&gt; automatically checks for the source code in the directory that &lt;code&gt;configure&lt;/code&gt; is in and in &amp;lsquo;..&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c684d3782e2decbf824cf0a5a0eacdf61c00566" translate="yes" xml:space="preserve">
          <source>arithmetic evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7839f4094eb3f2bf8846547e825bee4d667fbf" translate="yes" xml:space="preserve">
          <source>arithmetic expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afe4fda2816bf2d3746dfe1513abfccf9d8c133" translate="yes" xml:space="preserve">
          <source>arithmetic, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc9016d1aa6a646348df69e14d31e955d51da60" translate="yes" xml:space="preserve">
          <source>arrays</source>
          <target state="translated">arrays</target>
        </trans-unit>
        <trans-unit id="e43188efd03e628b87dcc57a46a0003265638044" translate="yes" xml:space="preserve">
          <source>as alluded to above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce69e0a4b543276e16b7547ba7f8363b2db902c8" translate="yes" xml:space="preserve">
          <source>as appropriate. This will search backward or forward in the history for the next entry matching the search string typed so far. Any other key sequence bound to a Readline command will terminate the search and execute that command. For instance, a &lt;code&gt;RET&lt;/code&gt; will terminate the search and accept the line, thereby executing the command from the history list. A movement command will terminate the search, make the last line found the current line, and begin editing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b697dfce9fa378f19687d2d74caa1b51c0c89796" translate="yes" xml:space="preserve">
          <source>as signifying the end of options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26b63d628c9b5679c54e6f8f5ee244932da2d7d" translate="yes" xml:space="preserve">
          <source>assignment</source>
          <target state="translated">assignment</target>
        </trans-unit>
        <trans-unit id="117f1628e507334ac1452a1400e6522fce67256c" translate="yes" xml:space="preserve">
          <source>at the Bash prompt in your Bash source directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee36e383db46fe87f1937cbbd00df8ef37bd94a1" translate="yes" xml:space="preserve">
          <source>attribute itself, are performed on the variable referenced by &lt;var&gt;name&lt;/var&gt;&amp;rsquo;s value. The nameref attribute cannot be applied to array variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9072eb987d0905a72c46fd2f6e922e36e93c239" translate="yes" xml:space="preserve">
          <source>audible</source>
          <target state="translated">audible</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="248a20b62efba8f4303c75830c83230f1b088f1e" translate="yes" xml:space="preserve">
          <source>background</source>
          <target state="translated">background</target>
        </trans-unit>
        <trans-unit id="3853072116a861ff4c871d3e96a9cac7da78b7d2" translate="yes" xml:space="preserve">
          <source>backslash</source>
          <target state="translated">backslash</target>
        </trans-unit>
        <trans-unit id="4930eb3f60df3a6a61e8d44178feb2b8f820a153" translate="yes" xml:space="preserve">
          <source>backspace</source>
          <target state="translated">backspace</target>
        </trans-unit>
        <trans-unit id="ab28712d143d8f15faca7745bd40669636f4c2a4" translate="yes" xml:space="preserve">
          <source>bash-malloc</source>
          <target state="translated">bash-malloc</target>
        </trans-unit>
        <trans-unit id="4e859a10308ef3e53cba4c29d868095126753fa8" translate="yes" xml:space="preserve">
          <source>because the word boundaries differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f415ec1d9821f06dedec21eea5790ab8d8e21305" translate="yes" xml:space="preserve">
          <source>bg %1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602e9530b4ae1beff22d544afefc90f5d036efa6" translate="yes" xml:space="preserve">
          <source>bind -x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba5b46e332d373dfdfa248036598eb70f831d32" translate="yes" xml:space="preserve">
          <source>bitwise AND</source>
          <target state="translated">poco inteligente y</target>
        </trans-unit>
        <trans-unit id="7d5bb4d1e43ddd2b7554d5d7d0b44fa8e15c9b68" translate="yes" xml:space="preserve">
          <source>bitwise OR</source>
          <target state="translated">Bitácora O</target>
        </trans-unit>
        <trans-unit id="5f0f8466323f4b1566846afa9c8d4b65fab80825" translate="yes" xml:space="preserve">
          <source>bitwise exclusive OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc1df04ede4371bf68283b29ac654f74bc5bb92" translate="yes" xml:space="preserve">
          <source>brace expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="fccae45c20eb86351df553c5112826c1e2b0dde7" translate="yes" xml:space="preserve">
          <source>builtin xxx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1dc6f71297c711fd62c63df1bdbc3f49918cb3" translate="yes" xml:space="preserve">
          <source>builtins</source>
          <target state="translated">builtins</target>
        </trans-unit>
        <trans-unit id="67088e8d86fead569a6b737f9775499b48ae14a4" translate="yes" xml:space="preserve">
          <source>but the value of the &lt;code&gt;PATH&lt;/code&gt; variable is not used to search for the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b135c91c22da20c5bf6a8140fd6629d0393e898" translate="yes" xml:space="preserve">
          <source>by giving &lt;code&gt;configure&lt;/code&gt; the option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9f192b79a14968d26f70ab1aa8e21b65e3df64" translate="yes" xml:space="preserve">
          <source>carriage return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3597e3ba40838313efca5d16876aec7434a322f" translate="yes" xml:space="preserve">
          <source>cat file | bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c98830b8e294055184b1eb485a9ad71bd5052c" translate="yes" xml:space="preserve">
          <source>causes the file whose name is the expansion of &lt;var&gt;word&lt;/var&gt; to be opened for both reading and writing on file descriptor &lt;var&gt;n&lt;/var&gt;, or on file descriptor 0 if &lt;var&gt;n&lt;/var&gt; is not specified. If the file does not exist, it is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b452d6b23b3c28f85872fffd99bdaf90ce0ad44a" translate="yes" xml:space="preserve">
          <source>ce</source>
          <target state="translated">ce</target>
        </trans-unit>
        <trans-unit id="dc89efc56b3571e3abc91cb195241a7489437a83" translate="yes" xml:space="preserve">
          <source>characters will terminate an incremental search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6806f9cdb5c86b97d792597c92a2fbb73aad545c" translate="yes" xml:space="preserve">
          <source>comma</source>
          <target state="translated">comma</target>
        </trans-unit>
        <trans-unit id="077c890397bea2056341829848e85570a1fe69d1" translate="yes" xml:space="preserve">
          <source>command an argument of 10, you could type &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eed55da1f298f022a2075483e35465f5e08f841" translate="yes" xml:space="preserve">
          <source>command editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402ed957b23d3eaa92467b21cec4500025aa15aa" translate="yes" xml:space="preserve">
          <source>command execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454756230d5364d24466bddafd2da935b6419e25" translate="yes" xml:space="preserve">
          <source>command expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1d77e25cd35356cde10ef63fc85f8a802d39fc" translate="yes" xml:space="preserve">
          <source>command history</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05e1cd716adf3f3e010054dd33cbc26546ba5cb" translate="yes" xml:space="preserve">
          <source>command line option, it follows the &lt;small&gt;POSIX&lt;/small&gt; standard for startup files. In this mode, interactive shells expand the &lt;code&gt;ENV&lt;/code&gt; variable and commands are read and executed from the file whose name is the expanded value. No other startup files are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4be2d3930670c6d53b12e2f7d099be05b3eaca" translate="yes" xml:space="preserve">
          <source>command ls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428ab79c2b21a0ed2b6307161ddb8954b3df4542" translate="yes" xml:space="preserve">
          <source>command search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccd7eb1cd01381dd3073d46f1920ad418c69933" translate="yes" xml:space="preserve">
          <source>command substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02c684aed3888815022d9330c1e1941a5a41dc9" translate="yes" xml:space="preserve">
          <source>command timing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f7bb7a173d6082e979e94516f77977dd9559c9" translate="yes" xml:space="preserve">
          <source>command-line option or executing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b27cc7e22d1843c0482b877a83b3267c5ae7f2c" translate="yes" xml:space="preserve">
          <source>commands, compound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06600b23932bc3e5e48fb2a1bde1b3811a68a80f" translate="yes" xml:space="preserve">
          <source>commands, conditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07245602a4027800213f178c6efe3048d5a286a5" translate="yes" xml:space="preserve">
          <source>commands, grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964f17fac13390aa0191140375d2c0ae486dc079" translate="yes" xml:space="preserve">
          <source>commands, lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750b18cc74949c31c4817ce883fb1832a12cc61c" translate="yes" xml:space="preserve">
          <source>commands, looping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4858f65bbe715a3d4278901c913f7941a4f4e24" translate="yes" xml:space="preserve">
          <source>commands, pipelines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991cb53bce6bfb337958a683762ecaf7304a4cf8" translate="yes" xml:space="preserve">
          <source>commands, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e324281b3847e22c6cfc4a3621a0441c9125ab8" translate="yes" xml:space="preserve">
          <source>commands, simple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843e2d09948add183056420948ba9afa2b24674c" translate="yes" xml:space="preserve">
          <source>comments, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b8d8f62e216ac25f3e5a24c05cd51dabb64e7d" translate="yes" xml:space="preserve">
          <source>commonly is, see above for the effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d04521b659a980378ebb5bda98bc5d6300c89c8" translate="yes" xml:space="preserve">
          <source>comparison</source>
          <target state="translated">comparison</target>
        </trans-unit>
        <trans-unit id="a94ce5f6178f8dd5bd9b17199af4e12fcc69e9ce" translate="yes" xml:space="preserve">
          <source>completion builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb996269eff67c0452e0538cc0f31775fb604799" translate="yes" xml:space="preserve">
          <source>conditional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa221629d4166f269241614e022eba93f564a0c6" translate="yes" xml:space="preserve">
          <source>config-top.h</source>
          <target state="translated">config-top.h</target>
        </trans-unit>
        <trans-unit id="dd609cee42b96ae5a3197f92c6518ac41d9daf9d" translate="yes" xml:space="preserve">
          <source>config.cache</source>
          <target state="translated">config.cache</target>
        </trans-unit>
        <trans-unit id="03461db87a24c8a99f7e61a96ba5df4ef9e79d47" translate="yes" xml:space="preserve">
          <source>config.h</source>
          <target state="translated">config.h</target>
        </trans-unit>
        <trans-unit id="0a382cdcbcea7fc88d5b1dc00bbdad14a0624e14" translate="yes" xml:space="preserve">
          <source>config.log</source>
          <target state="translated">config.log</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="c4a709fa17ee62ed5b65e54177f2236a55318e5f" translate="yes" xml:space="preserve">
          <source>configure --help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87db583be5c13c1f7b3c958b10e03d67b6a2ca06" translate="yes" xml:space="preserve">
          <source>configure.ac</source>
          <target state="translated">configure.ac</target>
        </trans-unit>
        <trans-unit id="e79b46b13be5b5b4cb85f6ba62a192b4ac7a974c" translate="yes" xml:space="preserve">
          <source>containing compiler output (useful mainly for debugging &lt;code&gt;configure&lt;/code&gt;). If at some point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f9c6ce275bbea9bac06ee3e4d1ed05a515d5f1" translate="yes" xml:space="preserve">
          <source>contains C Preprocessor &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a298c0466afc46788b8c481fc945c74dc4e89bc7" translate="yes" xml:space="preserve">
          <source>contains a list of shell commands, one per line,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa1161684a7ffad5a5a9d245155a916a5f65324" translate="yes" xml:space="preserve">
          <source>contains results you don&amp;rsquo;t want to keep, you may remove or edit it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d69ec69f2661f0723d3eeba3e9d09b5fc1a7e4" translate="yes" xml:space="preserve">
          <source>contains the line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbd49312e540274d99e98a86f39b6e2059f247c" translate="yes" xml:space="preserve">
          <source>control operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bc848cd0de71c656b6e4faea36ba73e368f27b" translate="yes" xml:space="preserve">
          <source>control prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9132a9fdf23af1213879350ff511bbd1d538895" translate="yes" xml:space="preserve">
          <source>coprocess</source>
          <target state="translated">coprocess</target>
        </trans-unit>
        <trans-unit id="9145a3ad32249e3a113e52d2384b4bf1bb0f3b0f" translate="yes" xml:space="preserve">
          <source>csh</source>
          <target state="translated">csh</target>
        </trans-unit>
        <trans-unit id="75d4b00a1049122ad067c62b8a1d12b1fc774726" translate="yes" xml:space="preserve">
          <source>current traps set by &lt;code&gt;trap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935418780523b8666627e7503dffbdca3152b785" translate="yes" xml:space="preserve">
          <source>declare -i</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d581e7e3785c1029634135fed966140a7767e034" translate="yes" xml:space="preserve">
          <source>declare -x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="04ede91cc7b184ec1d5c9237f2a5e61141d8fc63" translate="yes" xml:space="preserve">
          <source>designates the last argument of the preceding command. This may be shortened to &lt;code&gt;!$&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b612cb76c7d2ce13fca9100dbed308987d47df3" translate="yes" xml:space="preserve">
          <source>designates the preceding command. When you type this, the preceding command is repeated in toto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50051d6d9aefc6de1b14b7d66f7bc3faf424831f" translate="yes" xml:space="preserve">
          <source>designates the second argument of the most recent command starting with the letters &lt;code&gt;fi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4918151e941e8e1cdd88f2fec4cd995c9b7fbfe0" translate="yes" xml:space="preserve">
          <source>designed for human modification. Examples of transparent image formats include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4559b9a75a27e2112213399116a91ccc02b2b8d1" translate="yes" xml:space="preserve">
          <source>directories, each directory under</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d18221870155650a2a5df22f1db22d18fbd895" translate="yes" xml:space="preserve">
          <source>directory stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832a6c915c30481f1aecc9b9ec5600f7288a555e" translate="yes" xml:space="preserve">
          <source>directs both standard output (file descriptor 1) and standard error (file descriptor 2) to the file &lt;var&gt;dirlist&lt;/var&gt;, while the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382d3f7938d955f423af4f34a33261241e45c9b2" translate="yes" xml:space="preserve">
          <source>directs only the standard output to file &lt;var&gt;dirlist&lt;/var&gt;, because the standard error was made a copy of the standard output before the standard output was redirected to &lt;var&gt;dirlist&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3904c3fa5235bded78ba13f24e0690a907f04e90" translate="yes" xml:space="preserve">
          <source>direxpand-default</source>
          <target state="translated">direxpand-default</target>
        </trans-unit>
        <trans-unit id="fbab444ca8de7b9af1966fe25bbfd9b1ffd1efdb" translate="yes" xml:space="preserve">
          <source>dirs +&lt;var&gt;N&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf2faf360544bc3c530d7005a5e750d4ded5738" translate="yes" xml:space="preserve">
          <source>dirs -&lt;var&gt;N&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0f44a9c56f780e55732c15d00549586d34d7b8" translate="yes" xml:space="preserve">
          <source>disabled-builtins</source>
          <target state="translated">disabled-builtins</target>
        </trans-unit>
        <trans-unit id="f7f029ecb98abe979074a3ab45b74dbd9af02d42" translate="yes" xml:space="preserve">
          <source>doc</source>
          <target state="translated">doc</target>
        </trans-unit>
        <trans-unit id="5554bff0e540b930596ca569f631433f1f953645" translate="yes" xml:space="preserve">
          <source>double quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e6b3a414a1e090dfc6029add0f3555ccba127f" translate="yes" xml:space="preserve">
          <source>e</source>
          <target state="translated">e</target>
        </trans-unit>
        <trans-unit id="a4820ba31c47bcf6ac4b6d5af46eba5ffc4fe15b" translate="yes" xml:space="preserve">
          <source>editing command lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802c59623ae48a66b2de310fa2d5a01babe1b993" translate="yes" xml:space="preserve">
          <source>else &lt;var&gt;alternate-consequents&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb0566de8ca4848075d64ca6dd14fea11761eb1" translate="yes" xml:space="preserve">
          <source>emacs</source>
          <target state="translated">emacs</target>
        </trans-unit>
        <trans-unit id="8f0986a2abfcb06779c186c5be49d67461de0fa6" translate="yes" xml:space="preserve">
          <source>enable -n test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec2b5965becfeec0ac8e7c5fb835124ad73557d" translate="yes" xml:space="preserve">
          <source>enable -n xxx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fdd0b8498d29a0f29849648fbaa394f44ad7d2" translate="yes" xml:space="preserve">
          <source>enable-&lt;var&gt;feature&lt;/var&gt;</source>
          <target state="translated">enable-&lt;var&gt;feature&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c6e454d960df4845f9d69eb11377c8b23882715b" translate="yes" xml:space="preserve">
          <source>environment</source>
          <target state="translated">environment</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
