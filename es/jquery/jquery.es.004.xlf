<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="jquery">
    <body>
      <group id="jquery">
        <trans-unit id="c47ebe06b994778f04553202da80384f93ec7ae5" translate="yes" xml:space="preserve">
          <source>Retrieve the DOM elements matched by the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e479bed7e5542e5175525608c0a44b2c1fcf5d7" translate="yes" xml:space="preserve">
          <source>Retrieve the latest version of an HTML page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0155f7262e902273c19d5e538a1316f003b2cec2" translate="yes" xml:space="preserve">
          <source>Return a Deferred&amp;rsquo;s Promise object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a487186e39ba43192e25c2d07c2ba9113b48b3a" translate="yes" xml:space="preserve">
          <source>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7824bc1b97268a438f40660068804ec96b80b110" translate="yes" xml:space="preserve">
          <source>Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9398e7ff5752487f63c609b69a5765a1fe72a74" translate="yes" xml:space="preserve">
          <source>Return a number representing the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3464e4fd44ebfd6076f392976403b0abe1c38fff" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f6da53395f5dc902c90077711039058fa4bf40" translate="yes" xml:space="preserve">
          <source>Return the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3356d67954770e949ba2366aec0fa96e10d6e04" translate="yes" xml:space="preserve">
          <source>Return true if the current useragent is some version of Microsoft's Internet Explorer. &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f50100a0f1fca09b3a792dbaaaa792f960f542e" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from a handler is equivalent to calling both &lt;code&gt;.preventDefault()&lt;/code&gt; and &lt;code&gt;.stopPropagation()&lt;/code&gt; on the event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacb5cbc3c9a29defe5998a16b32ad3376994a2c" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from an event handler will automatically call &lt;code&gt;event.stopPropagation()&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt;. A &lt;code&gt;false&lt;/code&gt; value can also be passed for the &lt;code&gt;handler&lt;/code&gt; as a shorthand for &lt;code&gt;function(){ return false; }&lt;/code&gt;. So, &lt;code&gt;$( &quot;a.disabled&quot; ).on( &quot;click&quot;, false );&lt;/code&gt; attaches an event handler to all links with class &quot;disabled&quot; that prevents them from being followed when they are clicked and also stops the event from bubbling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5459c5e9a6bfcaa998770b0962a3243e0f3e2492" translate="yes" xml:space="preserve">
          <source>Returning an Empty Set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359ee285db1ab3497383b24058b385819a29afb7" translate="yes" xml:space="preserve">
          <source>Returns -1, as there is no element with ID foobar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24601238c8e49ca9e38cd6023c2beef68041e041" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the rejected state, meaning that either &lt;a href=&quot;https://api.jquery.com/h/deferred.reject/&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the failCallbacks have been called (or are in the process of being called).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dedf983f3b1620c2ac4eee00b8ab8ef38a14955" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the resolved state, meaning that either &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;deferred.resolve()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;deferred.resolveWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the doneCallbacks have been called (or are in the process of being called).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e66d7a2f48c78a417819b8c659a7fcf4b7bec23" translate="yes" xml:space="preserve">
          <source>Returns a boolean value (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) that indicates whether or not the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ad30f7b515023713d6bc9f31009a6f3048d871" translate="yes" xml:space="preserve">
          <source>Returns an object containing the properties &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21a8e38cb37e60f58b7163fc87dcac1a82a39dd" translate="yes" xml:space="preserve">
          <source>Returns false, because the parent of the input is a p element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2be479c7c43a070dda61fc193794309f667f58" translate="yes" xml:space="preserve">
          <source>Returns the height of the element, including top and bottom padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb06190361244e70900f5938f0e2cd4070df363" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to all &amp;lt;li&amp;gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29dc2ed2dd9462cb6949e7b4789acfe0862cff6" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to its siblings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ebfc0e4de6cfe7d96bc5e85c508d46356efb50" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb8639b984c5a451bd2d2390409acfd9250e304" translate="yes" xml:space="preserve">
          <source>Returns the index for the first item in the jQuery collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b393ec4b75484f575ba14d5e0739f81c6524f060" translate="yes" xml:space="preserve">
          <source>Returns the width of the element, including left and right padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ad448c0457fa47085de3d60015cdbdafb46dd4" translate="yes" xml:space="preserve">
          <source>Returns true, because the parent of the input is a form element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c048a48626665bb693a24abc82365df59c00522" translate="yes" xml:space="preserve">
          <source>Returns whether event.preventDefault() was ever called on this event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0095bf521db1230ef8902af7b50cd23331098004" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopImmediatePropagation() was ever called on this event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46408a9586a191033969c174efbd68f66d5fd561" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopPropagation() was ever called on this event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0074c61ba5de3729c365c438f4ab6d87823e2ac4" translate="yes" xml:space="preserve">
          <source>Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1559488e7282166b90ea314062f1988b483f6a31" translate="yes" xml:space="preserve">
          <source>Rewriting the &lt;code&gt;.live()&lt;/code&gt; method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa2379f312caadc948aa7a9d8a823935a9b92fe" translate="yes" xml:space="preserve">
          <source>Right click to toggle background color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8d2fa5b636bb50d3b782f2addcd9107ff85896" translate="yes" xml:space="preserve">
          <source>Run a function when the page is fully loaded including graphics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660eab7cf7994345058c6792c429efba21c440ff" translate="yes" xml:space="preserve">
          <source>Safari/Webkit: 312.8, 418.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b481f8b8e77e092a5a1b352b75b3cfd0447e1ee8" translate="yes" xml:space="preserve">
          <source>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b49cbd8336bc28d30035edac48de5804dc67f0" translate="yes" xml:space="preserve">
          <source>Sample return values of $.isNumeric with various inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abcd8e11817cf7c75bccd6c0aefcb91a6a3cf65" translate="yes" xml:space="preserve">
          <source>Save some data to the server and notify the user once it's complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b39d4a46acdaf195c97b325431ddaef25894ae" translate="yes" xml:space="preserve">
          <source>Script Execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202dac1e22c03c214a8f5fffd9f44b1b2cb618ae" translate="yes" xml:space="preserve">
          <source>Script and JSONP requests are not subject to the same origin policy restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf964fefbb3826fdff4af7269ed955c203ad06cc" translate="yes" xml:space="preserve">
          <source>Scripts are included and run by referencing the file name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04c0f959a533f174ee286d4e56b7848c0439cfb" translate="yes" xml:space="preserve">
          <source>Search for a given element from among the matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8f35ce561245fefe97e75ccbff02e4aa1d777d" translate="yes" xml:space="preserve">
          <source>Search for a specified value within an array and return its index (or -1 if not found).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3874eae2f04a120390034d50dccc5a447635329f" translate="yes" xml:space="preserve">
          <source>Second handler for .toggle() called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba92a10db1bf37a49ca690a32bfa35980a52d5b7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;ready&quot;&gt;ready()&lt;/a&gt;&lt;/code&gt;, which makes use of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee12851f210aec736c2971ffe71428d322573012" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;.trigger()&lt;/code&gt; method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515509590fc48d1dfc5e4f8b29143dbb8193f498" translate="yes" xml:space="preserve">
          <source>See the discussions for &lt;code&gt;&lt;a href=&quot;mouseenter&quot;&gt;.mouseenter()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mouseleave&quot;&gt;.mouseleave()&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782b628d4d91647edbbce286bebc3f11f6b99ff5" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e24ae5dde661b4bad6278b284056442f482322b" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe0d297ed30bdc4c075085c5b9677952e2bd8b1" translate="yes" xml:space="preserve">
          <source>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7855e410bbda7d87687eb82cfb4112e06544d1a0" translate="yes" xml:space="preserve">
          <source>Select all elements at an index greater than index within the matched set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebb6b46e90078f144ce6f483dfb711b165e3784" translate="yes" xml:space="preserve">
          <source>Select all elements at an index less than index within the matched set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a16c88e4d2edf25e57b22ad8845aa0937c94c4e" translate="yes" xml:space="preserve">
          <source>Select all elements that are in the progress of an animation at the time the selector is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0cff81da7ea1b148eaa387d47ad1b088d95c5d" translate="yes" xml:space="preserve">
          <source>Select all elements that contain the specified text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e332684bab3aa1a45286a9f9d226898372975c7" translate="yes" xml:space="preserve">
          <source>Select all elements that have at least one child node (either an element or text).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078d5d9e1ff6edf0eba91a609de0c95367226ef3" translate="yes" xml:space="preserve">
          <source>Select all elements that have no children (including text nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed11e68f046d8dabef9e45adfed2a810b3f9160b" translate="yes" xml:space="preserve">
          <source>Select all the elements having a class name of &lt;code&gt;.box&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed3b7be96f2dbb88cd55ce061c434ce96bdeed1" translate="yes" xml:space="preserve">
          <source>Select elements that either don&amp;rsquo;t have the specified attribute, or do have the specified attribute but not with a certain value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6f1aa373c70e29d01f0f02d129effcd00f3046" translate="yes" xml:space="preserve">
          <source>Select the element at index n within the matched set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0aec192d97708ea18466b753f9630549839da5e" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myDiv&quot; and give it a red border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184e3b053c117cadb8f38a32ba7ea866723de909" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myID.entry[1]&quot; and give it a red border. Note how certain characters must be escaped with backslashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc01c4deea127c5fcc07581ab0c87fd938aefa0" translate="yes" xml:space="preserve">
          <source>Selected elements are in the order of their appearance in the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a011a21a85c92351b0a96fb4148afac97921c94e" translate="yes" xml:space="preserve">
          <source>Selector Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63116277109d7d97ce78872faa8c5b4a7e78c9ad" translate="yes" xml:space="preserve">
          <source>Selects a single element with the given id attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482db93da8e164b9b15b7851fb58f4b7485ddf00" translate="yes" xml:space="preserve">
          <source>Selects all button elements and elements of type button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9f66e97b3951a19308af594b4428e8f3fd8c91" translate="yes" xml:space="preserve">
          <source>Selects all direct child elements specified by &amp;ldquo;child&amp;rdquo; of elements specified by &amp;ldquo;parent&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef672f0c3a28f7f033a7dcbc0a7617c7eb5fd4d2" translate="yes" xml:space="preserve">
          <source>Selects all elements of the specified language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685a95b7c8b8e8075d10bae8c93c1e49b86d0916" translate="yes" xml:space="preserve">
          <source>Selects all elements of type checkbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729ba3926411637f6f92f2c5a8b1914bc62c7ed5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f79e80dac38c8c301c8991025d4d361d7a906e" translate="yes" xml:space="preserve">
          <source>Selects all elements of type image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34fd4cfbc0399e6b2df0f37aace806c64a4aff7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192e0aacd3796ba9c13cfe7c6bcd3f583a2319e5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type radio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea966d1699da730e5da44991d47a4dad2469c8a" translate="yes" xml:space="preserve">
          <source>Selects all elements of type reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987673eb93dba4606dfa7dcb9aa307074d61d7f7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type submit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46fc94979eabceeefefadcb7eb1c9fefdf76622" translate="yes" xml:space="preserve">
          <source>Selects all elements that are descendants of a given ancestor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2f603851e201c12f75a1069d11f1cb3d8cfc13" translate="yes" xml:space="preserve">
          <source>Selects all elements that are disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081277be0ebc8652f793ffddd406046bc39328e7" translate="yes" xml:space="preserve">
          <source>Selects all elements that are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e5ee2ab29fb97bf2d880192e4ba13d80f49fe2" translate="yes" xml:space="preserve">
          <source>Selects all elements that are headers, like h1, h2, h3 and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e6c5d52d7420f51b1c55caf7b42dc914aed0ba" translate="yes" xml:space="preserve">
          <source>Selects all elements that are hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40bee64ad5f728527b96e701535aebabf850663" translate="yes" xml:space="preserve">
          <source>Selects all elements that are selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b12630f2059e80cfc555f557f369d2665cf95e8" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first among siblings of the same element name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8f6ff10437a0d5ca2c23bc1b677e18d4ca7759" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first child of their parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ba5db42bd0a7552cba89a906e47a3099d8e085" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last among siblings of the same element name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45549a1c55d46c0024d955d6df5a947b2244e626" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last child of their parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5613b91eb8e4a91b0b62860da066a6409a5da41f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth child of their parent in relation to siblings with the same element name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d0cf76044daf07017ffbe5139c0b5be66be6e3" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent, counting from the last element to the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a62951da436f74e1779c00a0d2636092fcd06f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b756624b2efc7b2d985cec25dbd9d959cbf5542" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the only child of their parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33f0d3cfa91120c35c1a70d896db8fa10fa5cfa" translate="yes" xml:space="preserve">
          <source>Selects all elements that are visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d4c24b60721feb1dd9d648286569d67c6decf2" translate="yes" xml:space="preserve">
          <source>Selects all elements that do not match the given selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cffcf142b731498a68da13d990cb3881c08f3a7" translate="yes" xml:space="preserve">
          <source>Selects all elements that have no siblings with the same element name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db68910a7f845b35cad42db773fd76e022bbe51e" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735daee6abc2bc6517bec931773efa945ec5f209" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given tag name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f12468efd2facd408d097c678258691580c27ac" translate="yes" xml:space="preserve">
          <source>Selects all elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dd09ad2abd8bb82a9497a60d0c74bead91f016" translate="yes" xml:space="preserve">
          <source>Selects all input elements of type text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a140314a46ae08098b1cf57a72cd5e5b79dbf8" translate="yes" xml:space="preserve">
          <source>Selects all input, textarea, select and button elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98be8e688a58a0d9de44bd93af5f4d660a54186" translate="yes" xml:space="preserve">
          <source>Selects all next elements matching &amp;ldquo;next&amp;rdquo; that are immediately preceded by a sibling &amp;ldquo;prev&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babcc76f8a2eaf292d41e9909b833b8237f646ae" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a bold tag around each of its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36835c1acf647c040ba63700c2b735fd5c7fc17" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a jQuery object around each of its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4bed91efb6f9a5909cee1551b5f05d2ea34bcc" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e93b210ae8a95c62b43b6793d537e7f57acf9b4" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first and second element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40adcf5a3954c3a02b0e9920716d96f0495862a7" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec45fca921a8472039aed007f1489458e13f5e14" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second and third element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73e8e58454342c473503c63ec8b67e25eff53a9" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7f2a84a50d64036622e9ea7f84c18196201fcb" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the third element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfd21f77934c962c426762b941607d856ccd3d9" translate="yes" xml:space="preserve">
          <source>Selects all sibling elements that follow after the &amp;ldquo;prev&amp;rdquo; element, have the same parent, and match the filtering &amp;ldquo;siblings&amp;rdquo; selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1df6d8eebdb436cfb94e26403dd9dd4e367a2a1" translate="yes" xml:space="preserve">
          <source>Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312ea0332b53f2d1c1ca581f055d2ebc1e2ffad0" translate="yes" xml:space="preserve">
          <source>Selects element if it is currently focused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7db4b62b14c64c2e4cda50f4bf4783bb8620fd" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value beginning exactly with a given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63e53805e9ae87e087a6c4a2e272a6ba8b049f4" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given substring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fec2cdb00e09613c374738870cc066ab8656d06" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79509ca2d65ee7fcb7c2f017f07b922c6fba591c" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d140cea9061a89351adf37936c907030724897b" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf83f200cc3513db41d467baef2dc38b33ece19" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value exactly equal to a certain value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85f9af968eff1005189e62ff883be9f5f43b779" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute, with any value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd58b1254b6b26c9b64245aa8dc2848547a1b12" translate="yes" xml:space="preserve">
          <source>Selects elements which contain at least one element that matches the specified selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1685294709e1c314ca9794952e46def1ccffc8" translate="yes" xml:space="preserve">
          <source>Selects even elements, zero-indexed. See also odd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46aa50381d2d25466bef54d53815431b627d34bc" translate="yes" xml:space="preserve">
          <source>Selects odd elements, zero-indexed. See also even.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5622e64ee47169c9d0b5c6a2d78bb2292d00e373" translate="yes" xml:space="preserve">
          <source>Selects the combined results of all the specified selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4230b70ef603ecf99fe4ec7887bd23aebeedc064" translate="yes" xml:space="preserve">
          <source>Selects the element that is the root of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fed8752aaf1e141ae7f7d82020c77946dd72e7" translate="yes" xml:space="preserve">
          <source>Selects the first matched DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c838dc34a573624d02bead0b7f78130d08b37fb" translate="yes" xml:space="preserve">
          <source>Selects the last matched element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2d74b9291de2f58c0821fcefd52a614afff7c7" translate="yes" xml:space="preserve">
          <source>Selects the target element indicated by the fragment identifier of the document&amp;rsquo;s URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2122d88e2a64d624031df153ff3972e8b9ccc281" translate="yes" xml:space="preserve">
          <source>Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8658ae1466bf527e3dd6d98e514ecee8b2407051" translate="yes" xml:space="preserve">
          <source>Send an xml document as data to the server. By setting the processData option to &lt;code&gt;false&lt;/code&gt;, the automatic conversion of data to strings is prevented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fef2b9897872624f0e3c46dd2f2183fdfe4a41" translate="yes" xml:space="preserve">
          <source>Send form data using Ajax requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8b3341b920b4556b27849ea3923b035e535304" translate="yes" xml:space="preserve">
          <source>Sending Data to the Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a144807841a866abac7a53c6a9b994f2e222cbcd" translate="yes" xml:space="preserve">
          <source>Serialize a few complex objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ed5c2f8e78737fd1b3ff7eb6e1b49ee3fd6932" translate="yes" xml:space="preserve">
          <source>Serialize a form to a query string that could be sent to a server in an Ajax request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4043fe2f1e4cc1ee5d8c65c313d48f13fbe5266c" translate="yes" xml:space="preserve">
          <source>Serialize a key/value object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2850b89694c0db105340f97fab4f4f0df4f4daae" translate="yes" xml:space="preserve">
          <source>Set a data store for 2 names then remove one of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d5f0b576f04613a8af8da1221bad86abac9bb8" translate="yes" xml:space="preserve">
          <source>Set a numeric property on a paragraph and then remove it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415e9fa442913c0ff5bb0b2da457a3e5aa4630ea" translate="yes" xml:space="preserve">
          <source>Set a queue array to delete the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fda2b6f88cc560db78cdb5721b1d4bf9e5ab95" translate="yes" xml:space="preserve">
          <source>Set a single select, a multiple select, checkboxes and a radio button .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd7e7e02ddf83e40cbae07a5022ad13b4ff3295" translate="yes" xml:space="preserve">
          <source>Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with &lt;a href=&quot;jquery.ajaxsetup&quot;&gt;$.ajaxSetup()&lt;/a&gt;. The timeout period starts at the point the &lt;code&gt;$.ajax&lt;/code&gt; call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. &lt;strong&gt;In jQuery 1.4.x and below,&lt;/strong&gt; the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. &lt;strong&gt;In Firefox 3.0+ only,&lt;/strong&gt; script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75045c3e7e4e41869961e4536a201841a37d8d4" translate="yes" xml:space="preserve">
          <source>Set a timer to delay execution of subsequent items in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bc597e05b5611f7a75e1d0062b8b589d81d71d" translate="yes" xml:space="preserve">
          <source>Set data on an element and see the results of hasData.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df763c8781cee89c94fb1655e6b6f2638cf5b8b" translate="yes" xml:space="preserve">
          <source>Set default values for future Ajax requests. Its use is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8efd5c0d5323f84aaea2833f9663ce507ef5110" translate="yes" xml:space="preserve">
          <source>Set some attributes for all &amp;lt;img&amp;gt;s in the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097a25d652bf055f7a137ff2a570d4f0be2804f8" translate="yes" xml:space="preserve">
          <source>Set the background color of the page to black.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee26402c1121939de683a5e3c569d8b6b4059083" translate="yes" xml:space="preserve">
          <source>Set the id for divs based on the position in the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b434d70d1b6398f4a48de9838e66013be0964e4" translate="yes" xml:space="preserve">
          <source>Set the offset of the second paragraph:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fab112a16558193a664503706e6bdc9b834ddb3" translate="yes" xml:space="preserve">
          <source>Set the scrollLeft of a div.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80de7325e36ebaf59890fde0787ee0978812d6fd" translate="yes" xml:space="preserve">
          <source>Set the scrollTop of a div.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501160f93f7aac197ef0a4afa5136de4c99128c1" translate="yes" xml:space="preserve">
          <source>Set the src attribute from title attribute on the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb0fd641752abcc5ef3043a7964e10a309c836b" translate="yes" xml:space="preserve">
          <source>Set the value of an input box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c430c240166834ea88c0ed7281d7fd5e5999f98" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; if you wish to use the traditional style of &lt;a href=&quot;jquery.param&quot;&gt;param serialization&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc8d2b9d04536e217f8d6ee7a88a0bafbd2135d" translate="yes" xml:space="preserve">
          <source>Sets the defaults for Ajax requests to the url &quot;/xmlhttp/&quot;, disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc9506ed518c2ffaaeed5c77bcc37e4fff485f4" translate="yes" xml:space="preserve">
          <source>Setting a simple attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d2152c54739da04de91aee4b49440f02938b01" translate="yes" xml:space="preserve">
          <source>Setting several attributes at once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47415531e62ab24a4bb2deca300877b6fef2b92e" translate="yes" xml:space="preserve">
          <source>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f123ee7203e5bbd228a25c42679e0e53bd4cc4" translate="yes" xml:space="preserve">
          <source>Setting values using this method (or using the native &lt;code&gt;value&lt;/code&gt; property) does not cause the dispatch of the &lt;code&gt;change&lt;/code&gt; event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; after setting the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469d5b183fdc0d59e41a51e61529cdd95274ba7c" translate="yes" xml:space="preserve">
          <source>Shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6af5aa39d7397cfe1ad95f101c0b53b8393168" translate="yes" xml:space="preserve">
          <source>Shorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than &quot;auto&quot; must be set in advance. Or, if you want to animate font size, you would use &lt;code&gt;fontSize&lt;/code&gt; or the CSS equivalent &lt;code&gt;'font-size'&lt;/code&gt; rather than simply &lt;code&gt;'font'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ce66dde31804d78c943c988b0dbf4d57737048" translate="yes" xml:space="preserve">
          <source>Should &lt;code&gt;.trigger( &quot;eventName&quot; )&lt;/code&gt; be used, it will search for an &quot;eventName&quot; property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, &lt;code&gt;.triggerHandler( &quot;eventName&quot; )&lt;/code&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22b139c05e4b38773ef90bc8904de0d27d90c20" translate="yes" xml:space="preserve">
          <source>Show a loading message whenever an Ajax request starts (and none is already active).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f252669f882d844dde09972cc0a4a1f2df2cda9" translate="yes" xml:space="preserve">
          <source>Show a message before an Ajax request is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b476ab773e940c40b6948b21c71c228f1f11a21b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b41f7448fb41b38cd17cdcae79d3950abdd5520" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05933287608489a9d52cfaf3e1830e781ba4aa9b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519514a8001648e93ee443893ab4b92b963bc312" translate="yes" xml:space="preserve">
          <source>Show all span and input elements with an animation. Change the text once the animation is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984335580fdfb879f6e3f885677f9f166cd1427f" translate="yes" xml:space="preserve">
          <source>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae17c6ac132af952cc810c0dcc914e28fa26861" translate="yes" xml:space="preserve">
          <source>Show number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3625594e77ad218412dfedbe46982302913ad5ac" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39761be7b983dab5e329662e5feed6f9934622b4" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16df6b0062351304bd84b3a27580952641a99624" translate="yes" xml:space="preserve">
          <source>Show texts when mouseenter and mouseout event triggering. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22e04704b0222408ca3a60fd105ab1256854512" translate="yes" xml:space="preserve">
          <source>Show texts when mouseup and mousedown event triggering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b08505c4f67fcfe1818b9165cd3486bbdbc8c6c" translate="yes" xml:space="preserve">
          <source>Show the browser info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad19f5bdd2ca5c41c2e37f9cba8cb903d27e3050" translate="yes" xml:space="preserve">
          <source>Show the event object for the keydown handler when a key is pressed in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93161b14d70830e3bea85c83d58f3562adbd85e" translate="yes" xml:space="preserve">
          <source>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa869efebfddd7c6615aaf04bfabcb5e6772b61b" translate="yes" xml:space="preserve">
          <source>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object's output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9896f8a3339a0df5ff5e1ecb5209d4930eb8f02" translate="yes" xml:space="preserve">
          <source>Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6557600916e731608ebca494d2d50dcc744408" translate="yes" xml:space="preserve">
          <source>Show the length of the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b544befbd2f388b14fd260171b1cca0a42ebef79" translate="yes" xml:space="preserve">
          <source>Show the mouse coordinates when the mouse is moved over the yellow div. Coordinates are relative to the window, which in this case is the iframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f44bacb640a60b4ce5f71dd59e0939296ec35a" translate="yes" xml:space="preserve">
          <source>Show the mouse position relative to the left and top edges of the document (within this iframe).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f8b628a56746aed654aec7b07b6ed34563e493" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of the child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404a7c06b436d2f84162fadbf19e223dca32ae52" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseover and mouseenter events are triggered. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090aa960971137d74c0e2c71583ff9a73df44c91" translate="yes" xml:space="preserve">
          <source>Show the order in the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a35cb28a1beadceaa3c6e2209e0fec267e3777" translate="yes" xml:space="preserve">
          <source>Show various heights. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9473936f01cbca6d69f1dece6d43856b6724edb6" translate="yes" xml:space="preserve">
          <source>Show various widths. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33e45b32872d9e6db475a6df01ad1c0aa074865" translate="yes" xml:space="preserve">
          <source>Shows a few ways is() can be used inside an event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f80a91d7a7e65cd7176b7698d0ff5aa4efc6c25" translate="yes" xml:space="preserve">
          <source>Shows all hidden divs and counts hidden inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f883856a4edafeed47bb6a4844925a9fdd3ac1" translate="yes" xml:space="preserve">
          <source>Shows all paragraphs, then hides them all, back and forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a32e745a60f4a870e675d1abfd69e6874c3fdb2" translate="yes" xml:space="preserve">
          <source>Shows the parent of each element as (parent &amp;gt; child). Check the View Source to see the raw html.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc96ba5e16ff60d54045222bd716907b909f13a1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;empty&quot;&gt;.empty()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;.remove()&lt;/code&gt; method takes elements out of the DOM. Use &lt;code&gt;.remove()&lt;/code&gt; when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use &lt;code&gt;&lt;a href=&quot;detach&quot;&gt;.detach()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3d4b313a79ee01993258bfb62f9d7410a27b2f" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.prepend()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b7b3cb192f9f19b267d26bdb4a4b8da9505760" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006392ad7e2187f99a07cd2030ba9a75d427ec4d" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.after()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df29cb0d48d7733d0bca93bbd664bfcac55e3e87" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.append()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e7ddc0a9479bf30d1a0ff5889e2b9da87c3b03" translate="yes" xml:space="preserve">
          <source>Similarly, a handler can call &lt;code&gt;event.preventDefault()&lt;/code&gt; to cancel any default action that the browser may have for this event; for example, the default action on a &lt;code&gt;click&lt;/code&gt; event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-types-list&quot;&gt;W3C Events Specification&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc5cf9bc9bce46f452c1b0c6151b92830a99ee3" translate="yes" xml:space="preserve">
          <source>Similarly, an element may also be passed to find:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9284b14e12238f3e08110b72509fd3a3bf2c689" translate="yes" xml:space="preserve">
          <source>Similarly, if we retrieve a jQuery object consisting of one of the three list items, &lt;code&gt;.index()&lt;/code&gt; will search for that list item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3ab504fe94703d8bc8d32f7b6369c311849311" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.after()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().after( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on the elements that are collected in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9baad5e5717759e600d8fa39a59f53a3545d1b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.append()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$('body').append( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3866949d83d1435a9a87376fd01b8109f97bbae5" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.before()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().before( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff88230d8cf6f6e9a4f26e921ba3235226053a6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.prepend()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;body&quot; ).prepend( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b1ff6e137cf5a7674c0a4b1dd9506e55d3f239" translate="yes" xml:space="preserve">
          <source>Since all &lt;code&gt;.live()&lt;/code&gt; events are attached at the &lt;code&gt;document&lt;/code&gt; element, events take the longest and slowest possible path before they are handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d61f94fedb8dacf1f14cb572f293f702d3042" translate="yes" xml:space="preserve">
          <source>Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94a3fdcc7bc381130af142791076c03992641c6" translate="yes" xml:space="preserve">
          <source>Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1ebd8b88fa1cbf6d066706d6ca6582244e64cf" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get()&lt;/code&gt;&lt;/a&gt; method returns a &lt;code&gt;jqXHR&lt;/code&gt; object, which is derived from a Deferred object, we can attach a callback for both success and error using the &lt;code&gt;deferred.always()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6342a4abce39c6640aa7cef5fb2c053d726fdd04" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the &lt;code&gt;.done()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5872a8250fa5893d3546adab12605b8ec365deb7" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the &lt;code&gt;.then&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3c5742ce47f98262f8e52369b1aa15badf1bea" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the &lt;code&gt;.catch&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa98b5bcb4e82764aa5222d51deca0844c19898" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the &lt;code&gt;deferred.done()&lt;/code&gt; and &lt;code&gt;deferred.fail()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92de5e75bfc3177db7ca895588568fbf9cbffb1" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by &lt;code&gt;&lt;a href=&quot;delegate&quot;&gt;.delegate()&lt;/a&gt;&lt;/code&gt; will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling &lt;code&gt;&lt;a href=&quot;event.stoppropagation&quot;&gt;event.stopPropagation()&lt;/a&gt;&lt;/code&gt; or returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1edc5381b6091a7fd6e1829f259f5037f6e15dd" translate="yes" xml:space="preserve">
          <source>Since the index is zero-based, the first list item is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6e24162c86dfba7b0b421fd47f8c5bb8ef4d79" translate="yes" xml:space="preserve">
          <source>Size: 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982e22c2ba6646fbc5724d9dc05eadc3a19d3774" translate="yes" xml:space="preserve">
          <source>Slide the next sibling LI up or down on hover, and toggle a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb05309b161291336bae053029c5099275a0941b" translate="yes" xml:space="preserve">
          <source>Some callbacks are required to return something, others make that return value optional. To prevent a form submission, a submit event handler can return false:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1f13e9615a3bbabc778ec7b0f33c9cc3e91448" translate="yes" xml:space="preserve">
          <source>Some of jQuery's Ajax functions return the native XMLHttpRequest (XHR) object, or pass it as an argument to success/error/complete handlers, so that you can do additional processing or monitoring on the request. Note that Ajax functions only return or pass an XHR object when an XHR object is actually used in the request. For example, JSONP requests and cross-domain GET requests use a script element rather than an XHR object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8753ea1e13ebfbe5d422e4686ba9011ca9055869" translate="yes" xml:space="preserve">
          <source>Some properties of DOM elements are quite consistent among browsers. Consider this example of a simple onblur validation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a933f97d99788e859754f51523140619cddcd601" translate="yes" xml:space="preserve">
          <source>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d60b8f0ed0d594ef1727e3a6784cb278df97bd" translate="yes" xml:space="preserve">
          <source>Special units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596f7c7958bae7b06d20d1b95c9768562dff1f23" translate="yes" xml:space="preserve">
          <source>Specify a function to execute when the DOM is fully loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff20a26a0c1ef838133366e7344c5ab557dc3c37" translate="yes" xml:space="preserve">
          <source>Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. &lt;strong&gt;As of jQuery 1.5&lt;/strong&gt;, you can also use a function for this setting, in which case the value of &lt;code&gt;jsonpCallback&lt;/code&gt; is set to the return value of that function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b0e61bc82307628e84bf51482e5ca8c38a3aac" translate="yes" xml:space="preserve">
          <source>Spoon!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8484e4b12cca197bb4c6288ecc229761a2d3c7" translate="yes" xml:space="preserve">
          <source>Starting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a166f7dad49a1f78c7503ac2a3ec46b214bd857" translate="yes" xml:space="preserve">
          <source>Starts with all paragraphs and searches for descendant span elements, same as &lt;code&gt;$( &quot;p span&quot; )&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f596ed584d759c21adfacff6072003d6d499e20" translate="yes" xml:space="preserve">
          <source>States if the current page, in the user&amp;rsquo;s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a2be80024194ba9e55c77f622b84ab99f358e4" translate="yes" xml:space="preserve">
          <source>Step Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad40990b1f5eb15fcc653c23d700e8b744907126" translate="yes" xml:space="preserve">
          <source>Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76e371f4f22da824fc0475cfa42848c80bb7458" translate="yes" xml:space="preserve">
          <source>Stop submit events from bubbling without preventing form submit, using &lt;code&gt;.stopPropagation()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c9f5be9829724db34567272dd0a87d7c6ea276" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation on the matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360d71d11120f40efdbddef5715b200bb25b3684" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730b19e05abb84da614a729159208dbad5760180" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dc887795a3e079473d37947acd076182b16d12" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the specified element and/or return the value that was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664d4a46b20ef3413abe6dbdc69b1b8e5fa252f8" translate="yes" xml:space="preserve">
          <source>Store then retrieve a value from the div element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817372deb37d508cf48353c2e5bf45228819ce79" translate="yes" xml:space="preserve">
          <source>Success Callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a6e449ed284b809fa46d3ad6117b4a8d99830e" translate="yes" xml:space="preserve">
          <source>Supported Flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f2d5c8838556785eaa3ee02d811f2678905e69" translate="yes" xml:space="preserve">
          <source>Suppose we have a couple short lists on a page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dda79ad5c100cb272fb6d078c82f63541c7299" translate="yes" xml:space="preserve">
          <source>Suppose we perform a search for &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements starting at item A:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94ae9bded1ae99e5c7bcd4f4a8811d18c8089e8" translate="yes" xml:space="preserve">
          <source>Suppose we search for an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f888854fd1f1dae92293cac076227ad8552aa0" translate="yes" xml:space="preserve">
          <source>Suppose you have a list, with two of its items containing a child element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de394c66954399a5ac3332ca39eb0a52c9cc3a47" translate="yes" xml:space="preserve">
          <source>Suppose you have a simple unordered list on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5023b4b6d640dff78ca47b85acb6ff85da25aa61" translate="yes" xml:space="preserve">
          <source>Tags that cannot contain elements may be quick-closed or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff582d4a993e914f70aa1f884c48404bf23cf695" translate="yes" xml:space="preserve">
          <source>Takes a function and returns a new one that will always have a particular context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b315f328325b2a0bd0f452ff3b9e918b0b280b19" translate="yes" xml:space="preserve">
          <source>Takes a string and throws an exception containing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e25174b34707da0ca85747ead62e6979587ad7" translate="yes" xml:space="preserve">
          <source>Takes a well-formed JSON string and returns the resulting JavaScript value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1321935cf4ff7f35cc8aa281970434f1a46233a9" translate="yes" xml:space="preserve">
          <source>Test a few parameter examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2959942028f362a86c6adc899a4d28fb0893b838" translate="yes" xml:space="preserve">
          <source>Text is a node of the Document Object Model (DOM) that represents the textual content of an &lt;a href=&quot;#Element&quot;&gt;element&lt;/a&gt; or an attribute. Consider the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88fca4b677e265570d1591da41082afd6bd654a" translate="yes" xml:space="preserve">
          <source>That line of code will replace everything inside &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecaa7688dde754c54b4ca5ee2f1ea5f31249d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.Callbacks()&lt;/code&gt; function is internally used to provide the base functionality behind the jQuery &lt;code&gt;$.ajax()&lt;/code&gt; and &lt;code&gt;$.Deferred()&lt;/code&gt; components. It can be used as a similar base to define functionality for new components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa0d6b0d0bf85d2143bf56d29a81b4ad34efa9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function returns the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the &lt;code&gt;xhr&lt;/code&gt; option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling &lt;code&gt;.abort()&lt;/code&gt; on the object will halt the request before it completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e806a32c04f5dde13a7018da32db82f1e28ca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; are available and are easier to use. If less common options are required, though, &lt;code&gt;$.ajax()&lt;/code&gt; can be used more flexibly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f47b93498ccbc5b58c88ddb2f471b1580524b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajaxPrefilter()&lt;/code&gt; method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as &quot;script&quot; if the URL has some specific properties defined in a custom &lt;code&gt;isActuallyScript()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280a781cf37dc5a0c87a93c392263fe532ae9059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.browser&lt;/code&gt; property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76431104c95bae4a44864ebbfd713ef401ebe1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns &lt;code&gt;false&lt;/code&gt;. Only &lt;em&gt;element&lt;/em&gt; nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09588521748ac438e7c26cbe3f00a85e140fd816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.cssHooks&lt;/code&gt; object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4337150a1d2bb6fc88e8b469d5a24912766d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.each()&lt;/code&gt; function is not the same as &lt;a href=&quot;each&quot;&gt;$(selector).each()&lt;/a&gt;, which is used to iterate, exclusively, over a jQuery object. The &lt;code&gt;$.each()&lt;/code&gt; function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the &lt;code&gt;this&lt;/code&gt; keyword, but Javascript will always wrap the &lt;code&gt;this&lt;/code&gt; value as an &lt;code&gt;Object&lt;/code&gt; even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976cdb1065014cb534e388a99a8c84685e8767eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.grep()&lt;/code&gt; method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18acd609107b58ff2cf0d3332965bdfb5cabf43b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.holdReady()&lt;/code&gt; method allows the caller to delay jQuery's ready event. This &lt;em&gt;advanced feature&lt;/em&gt; would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335a19e8e8e4eb5696bfd5f99305e44eff1fcc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.inArray()&lt;/code&gt; method is similar to JavaScript's native &lt;code&gt;.indexOf()&lt;/code&gt; method in that it returns -1 when it doesn't find a match. If the first element within the array matches &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;$.inArray()&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c6ed7fef66d2169b4d3861ee6d20f7f3defb90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.isNumeric()&lt;/code&gt; method checks whether its argument represents a numeric value. If so, it returns &lt;code&gt;true&lt;/code&gt;. Otherwise it returns &lt;code&gt;false&lt;/code&gt;. The argument can be of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d054908ceec703f2328081f3828c696c4e4831cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.map()&lt;/code&gt; method applies a function to each item in an array or object and maps the results into a new array. &lt;strong&gt;Prior to jQuery 1.6&lt;/strong&gt;, &lt;code&gt;$.map()&lt;/code&gt; supports traversing &lt;em&gt;arrays only&lt;/em&gt;. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt; it also traverses objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d04e01527feacc55c26314c81ca0af5fa41181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.merge()&lt;/code&gt; operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The &lt;code&gt;$.merge()&lt;/code&gt; function is destructive. It alters the &lt;code&gt;length&lt;/code&gt; and numeric index properties of the first object to include items from the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9302d36417008fe5659ed352ae46a989c038b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.now()&lt;/code&gt; method is a shorthand for the number returned by the expression &lt;code&gt;(new Date).getTime()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7808931143ef016b797914190e650d2a76779e1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.speed()&lt;/code&gt; method provides a way to define properties, such as &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;easing&lt;/code&gt;, and &lt;code&gt;queue&lt;/code&gt;, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ec78e912c92bddbb313103bfc5523271e0edff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.trim()&lt;/code&gt; function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d204e0e76dbbb80f76478ab9fdc37eb8914624" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.unique()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbf462da578ffa3e663692abb85559bd63a2923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.uniqueSort()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a26b22ac15e6d3725fb5a622feda2d98b93c1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.addBack()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.addBack()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$(&quot;div.after-addback&quot;)&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5d402fb11b41c1beb7b79978b5307c1e688a67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.after()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertafter&quot;&gt;.insertAfter()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).after(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the &lt;code&gt;.insertAfter()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertAfter(target)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6002f37ecb223258bee7d949314a826effed37b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.andSelf()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.andSelf()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$( &quot;div.after-andself&quot; )&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919f011c3d3d39bb6a99b068c83bfc2e73be152d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.animate()&lt;/code&gt; method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the &lt;code&gt;.css()&lt;/code&gt; method, except that the range of properties is more restrictive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0edc3a5b47cab439d4809dfee1aeae2a37c618" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;appendto&quot;&gt;.appendTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a671ee3f926faffbc1079125031f1101d1a675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the &lt;em&gt;first&lt;/em&gt; child, use &lt;a href=&quot;prepend&quot;&gt;&lt;code&gt;.prepend()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7ad01b2fc895e8f2f372219f519cf23a25f27a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method gets the attribute value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56a8d18e9615760f255a389b1a9ee37f18e2f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method is a convenient way to set the value of attributes&amp;mdash;especially when setting multiple attributes or using values returned by a function. Consider the following image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf579ddc9930a5a97c07867bb06cdff64125acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.before()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertbefore&quot;&gt;.insertBefore()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).before(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the &lt;code&gt;.insertBefore()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertBefore(target)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8b87f3a7319468a08ed6667b0d2ac2a11055e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.children()&lt;/code&gt; method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376670c6b2301c9502291bf8dd969cf1f3352e2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.clone()&lt;/code&gt; method performs a &lt;em&gt;deep&lt;/em&gt; copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9a721c048b18a223ef22271dcee5ef1ddb0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.contents()&lt;/code&gt; method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4478d31ecdf490a0aad5d0fa3bac7b611658e869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.context&lt;/code&gt; property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a781319ab4b7c2a3038a7d5f82a3aaa7431f7df3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.css()&lt;/code&gt; method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the &lt;code&gt;getComputedStyle()&lt;/code&gt; method in standards-based browsers versus the &lt;code&gt;currentStyle&lt;/code&gt; and &lt;code&gt;runtimeStyle&lt;/code&gt; properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the &lt;code&gt;float&lt;/code&gt; property as &lt;code&gt;styleFloat&lt;/code&gt;, while W3C standards-compliant browsers refer to it as &lt;code&gt;cssFloat&lt;/code&gt;. For consistency, you can simply use &lt;code&gt;&quot;float&quot;&lt;/code&gt;, and jQuery will translate it to the correct value for each browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e63aa8b4e036e090afb474846ea3fe671048a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520ce59174f569a4f598506fbd2fd9742a88c3a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158ffc844ccad87b3e96192f16f798b3f3d7c3fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.detach()&lt;/code&gt; method is the same as &lt;code&gt;&lt;a href=&quot;remove&quot;&gt;.remove()&lt;/a&gt;&lt;/code&gt;, except that &lt;code&gt;.detach()&lt;/code&gt; keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fa97b3a1074cefe09d0e33804e73171753c7ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.each()&lt;/code&gt; method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword &lt;code&gt;this&lt;/code&gt; refers to the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ecbb426b5bd923098b84c44b225e3011c46509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeIn()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadeto&quot;&gt;.fadeTo()&lt;/a&gt;&lt;/code&gt; method but that method does not unhide the element and can specify the final opacity level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062775b18ef73fe8687369620f45e3672d9a3cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeOut()&lt;/code&gt; method animates the opacity of the matched elements. Once the opacity reaches 0, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt;, so the element no longer affects the layout of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b666255a099fb53345e3339662753b6bc22c363" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeTo()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadein&quot;&gt;.fadeIn()&lt;/a&gt;&lt;/code&gt; method but that method unhides the element and always fades to 100% opacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87aefadc97e63343a3f198143ffa44473891ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeToggle()&lt;/code&gt; method animates the opacity of the matched elements. When called on a visible element, the element's &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; once the opacity reaches 0, so the element no longer affects the layout of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e81e00b99900cc2b7acf2d3e6518a653013144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.finish()&lt;/code&gt; method is similar to &lt;code&gt;.stop(true, true)&lt;/code&gt; in that it clears the queue and the current animation jumps to its end value. It differs, however, in that &lt;code&gt;.finish()&lt;/code&gt; also causes the CSS property of all &lt;em&gt;queued&lt;/em&gt; animations to jump to their end values, as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7004a34e94299568cb1b51c71e5fac930bc66ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.get()&lt;/code&gt; method grants access to the DOM nodes underlying each jQuery object. If the value of &lt;code&gt;index&lt;/code&gt; is out of bounds &amp;mdash; less than the negative number of elements or equal to or greater than the number of elements &amp;mdash; it returns &lt;code&gt;undefined&lt;/code&gt;. Consider a simple unordered list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12b1ce92b56f787255c4845c73032ecb78d6a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hasClass()&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9dc0cc34c77e937afc19320e0d5f30f2869953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method binds handlers for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. You can use it to simply apply behavior to an element during the time the mouse is within the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7352679d5961ada2dc857d5b790b2d2e8264e63d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method, when passed a single function, will execute that handler for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the &lt;code&gt;event.type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34735eda31f0d0c8a8865a97a386f992d2171c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.html()&lt;/code&gt; method is not available in XML documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c9b7c19cf9c9bec38c117b9596dfa64b3f5ec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.jquery&lt;/code&gt; property is assigned to the jQuery prototype, commonly referred to by its alias &lt;code&gt;$.fn&lt;/code&gt;. It is a string containing the version number of &lt;code&gt;jQuery&lt;/code&gt;, such as &quot;1.5.0&quot; or &quot;1.4.4&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a617625fc09fff48a482b47a3b9afcbd0fd42a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method for binding event handlers uses this property to determine the root element to use for its event delegation needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ea412065b77012ef071db4ab1032df2d1e8056" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method interacts with other event methods in ways that can be surprising, e.g., &lt;code&gt;$( document ).off( &quot;click&quot; )&lt;/code&gt; removes all click handlers attached by any call to &lt;code&gt;.live()&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c7cdb110bb60a90c982c7bb988effecba4e9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.load()&lt;/code&gt; method, unlike &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt;, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the &lt;code&gt;url&lt;/code&gt; parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3944fabbd1d606011ac39735a016c7231097a28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.map()&lt;/code&gt; method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc25be925e63e21a2f6b44a5ddf92f0365ce360" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.off()&lt;/code&gt; method removes event handlers that were attached with &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;. See the discussion of delegated and directly bound events on that page for more information. Calling &lt;code&gt;.off()&lt;/code&gt; with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. &lt;strong&gt;When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7e0e81a50ab84b4a804b6e7954e6386c082532" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its border box, which excludes margins) &lt;em&gt;relative to the document&lt;/em&gt;. Contrast this with &lt;code&gt;&lt;a href=&quot;position&quot;&gt;.position()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the offset parent&lt;/em&gt;. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), &lt;code&gt;.offset()&lt;/code&gt; is more useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa7f613fb65aa1a55422d29979d55d20abbd326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; setter method allows us to reposition an element. The element's border-box position is specified &lt;em&gt;relative to the document&lt;/em&gt;. If the element's &lt;code&gt;position&lt;/code&gt; style property is currently &lt;code&gt;static&lt;/code&gt;, it will be set to &lt;code&gt;relative&lt;/code&gt; to allow for this repositioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a272de06ce611fd779824d215b629102bca4911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.on()&lt;/code&gt; method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the &lt;code&gt;.on()&lt;/code&gt; method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt;. To remove events bound with &lt;code&gt;.on()&lt;/code&gt;, see &lt;a href=&quot;off&quot;&gt;&lt;code&gt;.off()&lt;/code&gt;&lt;/a&gt;. To attach an event that runs only once and then removes itself, see &lt;a href=&quot;one&quot;&gt;&lt;code&gt;.one()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645c8dceaecbd4770000aadcc5a20e7cb42f53d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.one()&lt;/code&gt; method is identical to &lt;code&gt;.on()&lt;/code&gt;, except that the handler for a given element and event type is unbound after its first invocation. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af016528e5751912d56884465cbb7aa740006e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.parents()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; methods are similar, except that the latter only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7c33fd18c0e46b128a7901820184b28d907678" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.position()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its margin box) &lt;em&gt;relative to the offset parent&lt;/em&gt; (specifically its padding box, which excludes margins and borders). Contrast this with &lt;code&gt;&lt;a href=&quot;offset&quot;&gt;.offset()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the document&lt;/em&gt;. When positioning a new element near another one and within the same containing DOM element, &lt;code&gt;.position()&lt;/code&gt; is the more useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8581f6ba7ae84ecb35718c5084ae03b7a5fc4b47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prependto&quot;&gt;.prependTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74db4525f13cab0cc77a631b7d354c0f8fd76bbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the &lt;em&gt;last&lt;/em&gt; child, use &lt;a href=&quot;append&quot;&gt;&lt;code&gt;.append()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70ed94081943cfae731624da44c4d5273576eb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.promise()&lt;/code&gt; method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b29321ce1c92f36cde79cbab565855893c1edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method gets the property value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. It returns &lt;code&gt;undefined&lt;/code&gt; for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ce095d5bd4f19cf6db1858763e51b5719d8d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method is a convenient way to set the value of properties&amp;mdash;especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting &lt;code&gt;selectedIndex&lt;/code&gt;, &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;nodeType&lt;/code&gt;, &lt;code&gt;ownerDocument&lt;/code&gt;, &lt;code&gt;defaultChecked&lt;/code&gt;, or &lt;code&gt;defaultSelected&lt;/code&gt;. Since jQuery 1.6, these properties can no longer be set with the &lt;code&gt;.attr()&lt;/code&gt; method. They do not have corresponding attributes and are only properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658e85773a055f5e1058e298fe6314a906006e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue. The callback function is executed once for each element in the jQuery set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab809c02c354d248b0ee32610b33f65bc9c6ae1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method is typically used with an anonymous function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077d4bdc956042f2c88566c31db4cbfcc7363fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes safe to manipulate. This will often be a good time to perform tasks that are needed before the user views or interacts with the page, for example to add event handlers and initialize plugins. When multiple functions are added via successive calls to this method, they run when the DOM is ready in the order in which they are added. As of jQuery 3.0, jQuery ensures that an exception occuring in one handler does not prevent subsequently added handlers from executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bc8e03b021237c11339ba2a1efc2f21d15a5a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeAttr()&lt;/code&gt; method uses the JavaScript &lt;code&gt;removeAttribute()&lt;/code&gt; function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3731546a94484849d0ac8ab85a3029dde61c5913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;.data()&lt;/code&gt;. When called with the name of a key, &lt;code&gt;.removeData()&lt;/code&gt; deletes that particular value. When called with no arguments, &lt;code&gt;.removeData()&lt;/code&gt; removes all values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2034be3fd4582b7028a473df6aabe0dd58c049f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeProp()&lt;/code&gt; method removes properties set by the &lt;code&gt;&lt;a href=&quot;prop&quot;&gt;.prop()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8addddb62dca0b107eb80169f537d932677c13c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method is similar to &lt;code&gt;&lt;a href=&quot;replacewith&quot;&gt;.replaceWith()&lt;/a&gt;&lt;/code&gt;, but with the source and target reversed. Consider this DOM structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f749be45eb195fd4c23e0fd4ed8e7e1d2c9d7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d74a5b31c932d95002c9ef2ae934fdb08a8e01d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d7d4021234873cff115fe91b4361994144140c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e203e0994b587501030c97a751910f0eeeecbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the &lt;em&gt;original&lt;/em&gt; jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e5651b768633d3d3742f6a64de99c1edc2dd27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.selector&lt;/code&gt; property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a &quot;foo&quot; plugin could be written as &lt;code&gt;$.fn.foo = function( selector, options ) { /* plugin code goes here */ };&lt;/code&gt;, and the person using the plugin would write &lt;code&gt;$( &quot;div.bar&quot; ).foo( &quot;div.bar&quot;, {dog: &quot;bark&quot;} );&lt;/code&gt; with the &lt;code&gt;&quot;div.bar&quot;&lt;/code&gt; selector repeated as the first argument of &lt;code&gt;.foo()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aca0ee1f61701b4ea28fd1ea3827f8989fb0741" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serialize()&lt;/code&gt; method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;: &lt;code&gt;$( &quot;input, textarea, select&quot; ).serialize();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c89836855332a6cd11a6570684abc77c3f88f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of &lt;code&gt;form&lt;/code&gt;s and/or form controls. The controls can be of several types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d35856dae819af217e994ad9f9e6d66e144968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method uses the standard W3C rules for &lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.2&quot;&gt;successful controls&lt;/a&gt; to determine which elements it should include; in particular the element cannot be disabled and must contain a &lt;code&gt;name&lt;/code&gt; attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized. Elements that do not contain a &lt;code&gt;value&lt;/code&gt; attribute are represented with the empty string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac90bebcd3635f8d3d17695f20532374d17e9175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is deprecated as of jQuery 1.8. Use the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d316944601f50f903569a2ae656e583d6d4f184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is functionally equivalent to the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property; however, &lt;strong&gt;the &lt;code&gt;.length&lt;/code&gt; property is preferred&lt;/strong&gt; because it does not have the overhead of a function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08740b8268cec8430f152df38cca53f9dd3c62e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideDown()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f562dad9679f841eef5960aed9a626d4d79d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideToggle()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;. When the height reaches 0 after a hiding animation, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc8f9d9ce642c6b3a7c575f52b12ea99866b757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideUp()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2302549a8460d5f9c3f7051fcf5cb7a1fa33464" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on form inputs or scripts. To set or get the text value of &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;textarea&lt;/code&gt; elements, use the &lt;a href=&quot;val&quot;&gt;&lt;code&gt;.val()&lt;/code&gt;&lt;/a&gt; method. To get the value of a script element, use the &lt;a href=&quot;html&quot;&gt;&lt;code&gt;.html()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373c283f538765ec436d67f9a9ff14adda880de8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on input elements. For input field text, use the &lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccc2c954d25672295c216fd9075878da0e75407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method binds a handler for the &lt;code&gt;click&lt;/code&gt; event, so the rules outlined for the triggering of &lt;code&gt;click&lt;/code&gt; apply here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0b52985915a620941211a673b54e69d2ce481d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into &lt;code&gt;.toggle()&lt;/code&gt; prove limiting. For example, &lt;code&gt;.toggle()&lt;/code&gt; is not guaranteed to work correctly if applied twice to the same element. Since &lt;code&gt;.toggle()&lt;/code&gt; internally uses a &lt;code&gt;click&lt;/code&gt; handler to do its work, we must unbind &lt;code&gt;click&lt;/code&gt; to remove a behavior attached with &lt;code&gt;.toggle()&lt;/code&gt;, so other &lt;code&gt;click&lt;/code&gt; handlers can be caught in the crossfire. The implementation also calls &lt;code&gt;.preventDefault()&lt;/code&gt; on the event, so links will not be followed and buttons will not be clicked if &lt;code&gt;.toggle()&lt;/code&gt; has been called on the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ee2012c0d37e1e2b88250be3147655498ac6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.trigger()&lt;/code&gt; method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub/sub mechanism; any event handlers bound to the object will be called when the event is triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6727df07ba1a485ab1da0e62516370226a50a0bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.triggerHandler( &quot;event&quot; )&lt;/code&gt; method will not call &lt;code&gt;.event()&lt;/code&gt; on the element it is triggered on. This means &lt;code&gt;.triggerHandler( &quot;submit&quot; )&lt;/code&gt; on a form will not call &lt;code&gt;.submit()&lt;/code&gt; on the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513e4d6bf3e0be052f40008f5f347b3a0c913660" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.undelegate()&lt;/code&gt; method is a way of removing event handlers that have been bound using &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fd5f8e1da6cc53759c1a5d55129187c9c1669f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.unwrap()&lt;/code&gt; method removes the element's parent and returns the unwrapped content. This is effectively the inverse of the &lt;code&gt;&lt;a href=&quot;wrap&quot;&gt;.wrap()&lt;/a&gt;&lt;/code&gt; method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7b1e44db9c19e73004f470a5e8f0469e24649d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method allows setting the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3df7ef8e6c5a1177e85f411ef7f33f49a0b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method is primarily used to get the values of form elements such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. When called on an empty collection, it returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322722376da12ca684717a51b25a7d113bdaa84e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrap()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c812721d970da9b645aa759ae959ba0db5b2e0e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapAll()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db4368770ad651d5dbec7c44cd8ba2db7319e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapInner()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139d56bcf1b91aaa8dba4392f3eb16d4d9147cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:checked&lt;/code&gt; selector works for checkboxes, radio buttons, and options of &lt;code&gt;select&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01193d1507c1b5d6b5823171619bb4c82354b9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:disabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2395e6feb0bbee4323652fc74ae8a9cbd24453a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b08c2cbeff939b37697982eb1a485029c814d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first-of-type&lt;/code&gt; selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d835832f63623fec68d9fdda05e2be7c6beae9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first&lt;/code&gt; pseudo-class is equivalent to &lt;code&gt;:eq( 0 )&lt;/code&gt;. It could also be written as &lt;code&gt;:lt( 1 )&lt;/code&gt;. While this matches only a single element, &lt;a href=&quot;first-child-selector&quot;&gt;:first-child&lt;/a&gt; can match more than one: One for each parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd319e0ed30f65f1bf56aa4209ee68a5c743e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:input&lt;/code&gt; selector basically selects all form controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e719eb72a2f787d59782d8fc9ac950f9c0950994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:lang()&lt;/code&gt; selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by &quot;-&quot;. For example, the selector &lt;code&gt;$(&quot;div:lang(en)&quot;)&lt;/code&gt;will match &lt;code&gt;&amp;lt;div lang=&quot;en&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div lang=&quot;en-us&quot;&amp;gt;&lt;/code&gt; (and any of their descendant &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s), but not &lt;code&gt;&amp;lt;div lang=&quot;fr&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ebbf72ab8f006b6be875c86864d5808bf70755" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:last-of-type&lt;/code&gt; selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f222c15bce05c9c3271710690a4e94281f26e1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class is easily confused with &lt;code&gt;:eq(n)&lt;/code&gt;, even though the two can result in dramatically different matched elements. With &lt;code&gt;:nth-child(n)&lt;/code&gt;, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With &lt;code&gt;:eq(n)&lt;/code&gt; only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480990aae62b645f5c757db08b5d22e7fc118d3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:selected&lt;/code&gt; selector works for &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements. It does not work for checkboxes or radio inputs; use &lt;code&gt;:checked&lt;/code&gt; for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977650852f199848327084d347571ad1e5aaab2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:submit&lt;/code&gt; selector typically applies to button or input elements. Note that some browsers treat &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element as &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a &lt;code&gt;type&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62ffe6286350b3c8dba0fe6ec0674cc784f5054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertAfter()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the selector expression preceding the method is the container after which the content is inserted. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd94168e712338f385a4b6a33602f5a25787172f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.appendTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe43ace986ca75204f321e277ad9e4407e4e3b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertBefore()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the selector expression preceding the method is the container before which the content is inserted. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0b532a701ca8991b6d6cf5aa6767e6a60d3c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;not&quot;&gt;.not()&lt;/a&gt;&lt;/code&gt; method will end up providing you with more readable selections than pushing complex selectors or variables into a &lt;code&gt;:not()&lt;/code&gt; selector filter. In most cases, it is a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8de57099bebd411d7e3efca254b07f646e05d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.prependTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9d80e6d688dcee931bd76e1d9f5e5cca4795e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeSend&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;dataFilter&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; options all accept callback functions that are invoked at the appropriate times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc09994630bedb3f56bf21fb50b2ce7b0ebf957c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;blur&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;blur&lt;/code&gt; to the &lt;code&gt;focusout&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190cbfc6dbdd3abf5df2269ad19e423de3c772bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e3d342f9e34d87560a2e848d913dcdb9acca7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;change&lt;/code&gt; event is sent to an element when its value changes. This event is limited to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f256e3f7b3303084dd382deff803de56cd554cfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;click&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f9be7a8b000b85c91775d5ddce88ef554fea7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option can contain either a query string of the form &lt;code&gt;key1=value1&amp;amp;key2=value2&lt;/code&gt;, or an object of the form &lt;code&gt;{key1: 'value1', key2: 'value2'}&lt;/code&gt;. If the latter form is used, the data is converted into a query string using &lt;code&gt;&lt;a href=&quot;jquery.param&quot;&gt;jQuery.param()&lt;/a&gt;&lt;/code&gt; before it is sent. This processing can be circumvented by setting &lt;code&gt;processData&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the &lt;code&gt;contentType&lt;/code&gt; option from &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; to a more appropriate MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45ea61e4be6c2fa09624cd140b6a4afcfcdff80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dblclick&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ae013fda7979634bb7b5a9d1a1604d6bed835c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.done()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.done()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;.done()&lt;/code&gt; methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda5172606f19b9b736efbd893772823314bb31d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.fail()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.fail()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;deferred.fail()&lt;/code&gt; methods. The failCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00213c3f3db0a9c85f8d3be62e0af641fa058062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.pipe()&lt;/code&gt; method returns a new promise that filters the status and values of a deferred through a function. The &lt;code&gt;doneFilter&lt;/code&gt; and &lt;code&gt;failFilter&lt;/code&gt; functions filter the original deferred's resolved / rejected status and values. &lt;strong&gt;As of jQuery 1.7&lt;/strong&gt;, the method also accepts a &lt;code&gt;progressFilter&lt;/code&gt; function to filter any calls to the original deferred's &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt; methods. These filter functions can return a new value to be passed along to the piped promise's &lt;code&gt;done()&lt;/code&gt; or &lt;code&gt;fail()&lt;/code&gt; callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is &lt;code&gt;null&lt;/code&gt;, or not specified, the piped promise will be resolved or rejected with the same values as the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f826199bcf49ca10b7a337c0b395fa9f9f67956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.progress()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt;, the &lt;code&gt;progressCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.progress()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any &lt;code&gt;progressCallbacks&lt;/code&gt; added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the &lt;code&gt;.notify()&lt;/code&gt; or &lt;code&gt;notifyWith()&lt;/code&gt; call. For more information, see the documentation for &lt;a href=&quot;jquery.deferred&quot;&gt;jQuery.Deferred()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797e3639f7aa73f48cd934bfb5beac1e7f53211a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.promise()&lt;/code&gt; method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (&lt;code&gt;then&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, &lt;code&gt;fail&lt;/code&gt;, &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;pipe&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;promise&lt;/code&gt;), but not ones that change the state (&lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt;, &lt;code&gt;resolveWith&lt;/code&gt;, &lt;code&gt;rejectWith&lt;/code&gt;, and &lt;code&gt;notifyWith&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aada72a5a29999d21c048cef40f1e43a1a9a189" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end()&lt;/code&gt; method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With &lt;code&gt;end()&lt;/code&gt;, though, we can string all the method calls together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74954130e96878d0570d2001ccdea54fe745acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de04198e0282785992a572f3b0294e98a6eb007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event on the &lt;code&gt;window&lt;/code&gt; object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the &lt;code&gt;window.onerror&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a15e6d0c25cd827f5df958e1162a9271cec778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;event.which&lt;/code&gt; property normalizes &lt;code&gt;event.keyCode&lt;/code&gt; and &lt;code&gt;event.charCode&lt;/code&gt;. It is recommended to watch &lt;code&gt;event.which&lt;/code&gt; for keyboard key input. For more detail, read about &lt;a href=&quot;https://developer.mozilla.org/en/DOM/event.charCode#Notes&quot;&gt;event.charCode on the MDN&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f120b8a959a3219847450a8ee53b66f4187d6db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; argument can either be a space-separated list of event type names and optional namespaces, or an object of event name strings and handlers. The &lt;code&gt;data&lt;/code&gt; argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975ef46efd18ee6d2e52c114a4f50c14f32efd22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an optional argument to &lt;code&gt;$.Callbacks()&lt;/code&gt;, structured as a list of space-separated strings that change how the callback list behaves (eg. &lt;code&gt;$.Callbacks( &quot;unique stopOnFalse&quot; )&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b181f01d34d240ec62554a3ea8b0f44ba029e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events are specified by the W3C to not bubble, but jQuery defines cross-browser &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; events that do bubble. When &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; are used to attach delegated event handlers, jQuery maps the names and delivers them as &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; respectively. For consistency and clarity, use the bubbling event type names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12d3d94af57d7b957f2a43b6a6ef3e7b3826720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;focus&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;focus&lt;/code&gt; to the &lt;code&gt;focusin&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc328d40a9d1978cbe1cf3f383e8ff007361446e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as form elements (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, etc.) and links (&lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's &lt;code&gt;tabindex&lt;/code&gt; property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce407117100e5ba30e2542a045398a2d4fbe17b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusin&lt;/code&gt; event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the &lt;a href=&quot;focus&quot;&gt;focus&lt;/a&gt; event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce041c1230d97a8531ab94f0775a4789a0e64f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusout&lt;/code&gt; event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the &lt;a href=&quot;blur&quot;&gt;blur&lt;/a&gt; event in that it supports detecting the loss of focus on descendant elements (in other words, it supports event bubbling).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce50aa35bcab51ace26d4577f16d8f766ee983d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; option prevents handlers registered using &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ajaxerror&quot;&gt;.ajaxError()&lt;/a&gt;&lt;/code&gt;, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to &lt;code&gt;false&lt;/code&gt;. See the descriptions of these methods below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcc994cdebafa6dd62c6557f6c92b4296d2b215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; argument is a function (or the value &lt;code&gt;false&lt;/code&gt;, see below), and is required unless you pass an object for the &lt;code&gt;events&lt;/code&gt; argument. You can provide an anonymous handler function at the point of the &lt;code&gt;.on()&lt;/code&gt; call, as the examples have done above, or declare a named function and pass its name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e0e1d782c5ee3726542833629d15debaa0990f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebaa4915cec07238cc3400080215cbb6913448d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; parameter takes a callback function, as shown above. Within the handler, the keyword &lt;code&gt;this&lt;/code&gt; refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal &lt;code&gt;$()&lt;/code&gt; function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665f1a800666ebe5c19cf6aa8ac859d59065c260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Callbacks()&lt;/code&gt; function, introduced in version 1.7, returns a multi-purpose object that provides a powerful way to manage callback lists. It supports adding, removing, firing, and disabling callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8185fa0ab452f17f753c1df65484ea8db044e929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred()&lt;/code&gt; factory creates a new &lt;code&gt;deferred&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604bbb8f562ce63abc8a4a830e579583ea19fc8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred&lt;/code&gt; method can be passed an optional function, which is called just before the method returns and is passed the new &lt;code&gt;deferred&lt;/code&gt; object as both the &lt;code&gt;this&lt;/code&gt; object and as the first argument to the function. The called function can attach callbacks using &lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;deferred.then()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b6745cb85fcef2edb81c76d1dd1ad2e0bd4c9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Event&lt;/code&gt; constructor is exposed and can be used when calling &lt;a href=&quot;../../trigger&quot;&gt;trigger&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; operator is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d3ca3d9389710007ac5e28b23209bd2827c184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3168126bd9faa615301fd22885baff874f9cdaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58ce5b2421f175cccfc55bc89b8f9326b398cd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.fn.extend()&lt;/code&gt; method extends the jQuery prototype (&lt;code&gt;$.fn&lt;/code&gt;) object to provide new methods that can be chained to the &lt;code&gt;jQuery()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e2c149d29e3c58427eec1ddf67ea5a978e0da6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.hasData()&lt;/code&gt; method provides a way to determine if an element currently has any values that were set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. If there is no data object associated with an element, the method returns &lt;code&gt;false&lt;/code&gt;; otherwise it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da77c2aa73568361092bac2691ed27915c57df8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;jQuery.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565a34b4e9f84c0d318e6c4a9c06da64b809bbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. When called with the name of a key, &lt;code&gt;jQuery.removeData()&lt;/code&gt; deletes that particular value; when called with no arguments, all values are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7bc28f086c399e4c9e321c7a440e482efc3b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jqXHR.success()&lt;/code&gt;, &lt;code&gt;jqXHR.error()&lt;/code&gt;, and &lt;code&gt;jqXHR.complete()&lt;/code&gt; callback methods are &lt;strong&gt;removed as of jQuery 3.0&lt;/strong&gt;. You can use &lt;code&gt;jqXHR.done()&lt;/code&gt;, &lt;code&gt;jqXHR.fail()&lt;/code&gt;, and &lt;code&gt;jqXHR.always()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92be4fe000ad94fa5b76d5ae4cbd149a16e9eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keydown&lt;/code&gt; event is sent to an element when the user presses a key on the keyboard. If the key is kept pressed, the event is sent every time the operating system repeats the key. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ff7dffe7efbc0b47c01cc769130f1179525ab3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keypress&lt;/code&gt; event is sent to an element when the browser registers keyboard input. This is similar to the &lt;code&gt;keydown&lt;/code&gt; event, except that modifier and non-printing keys such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2403eb27d497bc275c8f7c7d1d0a83914e9d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyup&lt;/code&gt; event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce285026d9f78e3b806cc2e447eb91d6f20c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;load&lt;/code&gt; event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298347bd7f87fce8c617d4517cfd4c5ce65d731f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9c501cecef8d644812a3b72346bce59b94d9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's &lt;code&gt;which&lt;/code&gt; property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of &lt;code&gt;which&lt;/code&gt; will be 1 for the left button, 2 for the middle button, or 3 for the right button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37761ced6fd4810808c7ebb873311465526bbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c57d8a811fc1f9c33a1dffeaf841a6e2c80c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; event differs from &lt;code&gt;mouseover&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseover&lt;/code&gt; were used in this example, then when the mouse pointer moved over the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e998fa63a6373ae919ad037b49d4f728dd6bf05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8164273b96e3740f431d9d5f3df765b4ec5c68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; event differs from &lt;code&gt;mouseout&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseout&lt;/code&gt; were used in this example, then when the mouse pointer moved out of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c983abec8d4a818cd465daf3f2d4afd6e71c9966" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousemove&lt;/code&gt; event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e082ba9c1250e9f802e30f0ec6097895f8b88e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseout&lt;/code&gt; event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9106e2ddd472a53e0cf775e02b396b8ff0b95fa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseover&lt;/code&gt; event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e153372308071c715ee065406cb301d099f4f6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseup&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26532a19220a35f1ea5c85fbd74d757625d7aed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;null&lt;/code&gt; keyword is a JavaScript literal that is commonly used to express the absence of an intentional value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392d2c36d94605ced68188b8ac59e9e5f6c1f8ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opacity&lt;/code&gt; of the image is already at its target value, so this property is not animated by the second click. Since the target value for &lt;code&gt;left&lt;/code&gt; is a relative value, the image moves even farther to the right during this second animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb964c5f56361acfa5ea28adb7c907dbc7f1504" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resize&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the size of the browser window changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffc347e3cd115a86996e548a12634ae46a7dcc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scriptCharset&lt;/code&gt; allows the character set to be explicitly specified for requests that use a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (that is, a type of &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;jsonp&lt;/code&gt;). This is useful if the script and host page have differing character sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ccb6b9fab4201ed4391a6f6c072bb61ffc6663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event handler can be bound to this element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929f11cae458a443ec78fc803403671cdd96dc1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event is sent to an element when the user scrolls to a different place in the element. It applies to &lt;code&gt;window&lt;/code&gt; objects, but also to scrollable frames and elements with the &lt;code&gt;overflow &lt;/code&gt;CSS property set to &lt;code&gt;scroll&lt;/code&gt; (or &lt;code&gt;auto&lt;/code&gt; when the element's explicit height or width is less than the height or width of its contents).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5205a7fdd64edbe6625ef6cf64ce3deb0f9870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; event is sent to an element when the user makes a text selection inside it. This event is limited to &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; fields and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9113961f76be0bff850b1a78ab9fcf515e957ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;submit&lt;/code&gt; event is sent to an element when the user is attempting to submit a form. It can only be attached to &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements. Forms can be submitted either by clicking an explicit &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, or by pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfac108ca3a7f225da06d364c594943ffbf4277" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14c3da3cd5f7d01c1aa5b508e80ef7ea3f16bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccddae9e6ea73cc88cf2256dce7c4e9e74fac18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the &lt;code&gt;&lt;a href=&quot;jquery.parsejson&quot;&gt;$.parseJSON()&lt;/a&gt;&lt;/code&gt; method. It is also passed the text status of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83c22f4983d0e50a0571d7102879050f1da052c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; property can be the element that registered for the event or a descendant of it. It is often useful to compare &lt;code&gt;event.target&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt; in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8d3506026b92f86a8e616813798c3b44dc5159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; reference within all callbacks is the object in the &lt;code&gt;context&lt;/code&gt; option passed to &lt;code&gt;$.ajax&lt;/code&gt; in the settings; if &lt;code&gt;context&lt;/code&gt; is not specified, &lt;code&gt;this&lt;/code&gt; is a reference to the Ajax settings themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcc51686054e999eac9f0a4254231a3d071aafe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unload&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an &lt;code&gt;unload&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09b0e7e80a1ed1f473f9537c4e4ed4c3ee2fdd4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Anything&lt;/strong&gt; virtual type is used in jQuery documentation to indicate that any type can be used or should be expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ba7d519f5da361502187fb64363f84401d28a3" translate="yes" xml:space="preserve">
          <source>The Ajax module also has a method named &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt;. Which one is fired depends on the set of arguments passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7648d06183b24c5934f6b9dd7232c3b3d4b750f" translate="yes" xml:space="preserve">
          <source>The Array of DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed686e6db6ada7c500787b23e3925a96af3fbc7" translate="yes" xml:space="preserve">
          <source>The Array to translate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a94de58ebbebbaecd9d5009b890ff094e401547" translate="yes" xml:space="preserve">
          <source>The CSS specification allows elements to be identified by their attributes. While not supported by some older browsers for the purpose of styling documents, jQuery allows you to employ them regardless of the browser being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344c01e9b699ec2972a3002d539ac1f765367d65" translate="yes" xml:space="preserve">
          <source>The DOM element or first element within the jQuery object to look for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5ebae3f36ac0af15138db92d7110d8347bb9aa" translate="yes" xml:space="preserve">
          <source>The DOM element that initiated the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab99c0095d7aec3d1b00060ff7c1b6aec862144" translate="yes" xml:space="preserve">
          <source>The DOM element that may be contained by (a descendant of) the other element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cec87eb51b7b37174f1c29a76ae13e9889ebe48" translate="yes" xml:space="preserve">
          <source>The DOM element that may contain the other element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6bef9476a7d79e0d7dff8416213cf39b5ca1e3" translate="yes" xml:space="preserve">
          <source>The DOM element to associate with the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc030c4a2d267f040181927d43fe4935e74d89fc" translate="yes" xml:space="preserve">
          <source>The DOM element to query for the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6133b7dddf9fc4e773853a4b4b07d451a10ef9" translate="yes" xml:space="preserve">
          <source>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ab8cdf2d8dfb86443e633f5408b3f7803e0bfe" translate="yes" xml:space="preserve">
          <source>The DOM node that will be checked to see if it's in an XML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ceb340e65dd24c78ae93f5cd9af71b1fafda62" translate="yes" xml:space="preserve">
          <source>The Date type is a JavaScript object that represents a single moment in time. Date objects are instantiated using their constructor function, which by default creates an object that represents the current date and time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3000f310db76967f2f07fdbcf374ac00504b3972" translate="yes" xml:space="preserve">
          <source>The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1f8379a7498e59eef9c2b47244cc00919a3dbb" translate="yes" xml:space="preserve">
          <source>The Deferred object, introduced in jQuery 1.5, is a chainable utility object created by calling the &lt;a href=&quot;../jquery.deferred&quot;&gt;&lt;code&gt;jQuery.Deferred()&lt;/code&gt;&lt;/a&gt; method. It can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff66dca29c062490170f940b0d40f27697ff8621" translate="yes" xml:space="preserve">
          <source>The Event object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092a65cd15982d517c7cf3d19af043054e48e494" translate="yes" xml:space="preserve">
          <source>The HTML string on which to operate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e4c07493ef60e5d01175f31e8dbda3949ad8bc" translate="yes" xml:space="preserve">
          <source>The HTTP method to use for the request (e.g. &lt;code&gt;&quot;POST&quot;&lt;/code&gt;, &lt;code&gt;&quot;GET&quot;&lt;/code&gt;, &lt;code&gt;&quot;PUT&quot;&lt;/code&gt;). (version added: &lt;a href=&quot;https://api.jquery.com/category/version/1.9.0/&quot;&gt;1.9.0&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dc39f05895e187594bdff8c739099cd3ef44f2" translate="yes" xml:space="preserve">
          <source>The JSON standard does not permit &quot;control characters&quot; such as a tab or newline. An example like &lt;code&gt;$.parseJSON( '{ &quot;testing&quot;:&quot;1\t2\n3&quot; }' )&lt;/code&gt; will throw an error in most implementations because the JavaScript parser converts the string's tab and newline escapes into literal tab and newline; doubling the backslashes like &lt;code&gt;&quot;1\\t2\\n3&quot;&lt;/code&gt; yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0309d3fb6068e328dd40b93aceba5a1d021334b9" translate="yes" xml:space="preserve">
          <source>The JSON string to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd29258fca513f46146772577c2b30f5e2a0f96" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;submit&lt;/code&gt; event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the &lt;code&gt;submit&lt;/code&gt; event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724d8c6764e0316ac4c41ba0c0b56449243a6c38" translate="yes" xml:space="preserve">
          <source>The JavaScript code to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2129b20519ddffea0fe7ceea74d5ff0a115896" translate="yes" xml:space="preserve">
          <source>The Object to translate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d98bc8f048d9c824aebc49e11225ff08a91d77" translate="yes" xml:space="preserve">
          <source>The POST method is used if data is provided as an object; otherwise, GET is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2640e06e6701b966e29a283e9bd75f2d73784d4b" translate="yes" xml:space="preserve">
          <source>The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an &lt;code&gt;Object&lt;/code&gt; object. It is designated &quot;plain&quot; in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, &lt;code&gt;null&lt;/code&gt;, user-defined arrays, and host objects such as &lt;code&gt;document&lt;/code&gt;, all of which have a &lt;code&gt;typeof&lt;/code&gt; value of &quot;object.&quot; The &lt;code&gt;&lt;a href=&quot;jquery.isplainobject&quot;&gt;jQuery.isPlainObject()&lt;/a&gt;&lt;/code&gt; method identifies whether the passed argument is a plain object or not, as demonstrated below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587e7d693373dd183bdd6d7b252b02ad4cbc6584" translate="yes" xml:space="preserve">
          <source>The Promise interface also allows jQuery's Ajax methods, including &lt;code&gt;$.get()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.fail()&lt;/code&gt;, and &lt;code&gt;.always()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e52de5068bb1e070f3ee42e34c03fc0ec345d8" translate="yes" xml:space="preserve">
          <source>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including &lt;code&gt;$.getJSON()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.always()&lt;/code&gt;, and &lt;code&gt;.fail()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6eb2e2c386b7b7095dc892d50af68ceac7a6ab8" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;http://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;). Some other elements, on the other hand, are empty (i.e. have no children) by definition:&lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e19a093a3b453869f5a9e45b3b4c2922a34b749" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see https://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &amp;lt;input&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;br&amp;gt;, and &amp;lt;hr&amp;gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070d3bba3be689c7dcc9db2cb7e1c2b999bc4b84" translate="yes" xml:space="preserve">
          <source>The above code will generate two different alerts when the button is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f62fe5d402e31a15da9defb30b12c9f45a3306a" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If no data at all was set on that element, &lt;code&gt;undefined&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dbc42eb0079a96f335996e2465e83a8699102f" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If nothing was set on that element, an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae634c1a9899fb5e22d8b13e7563287e4cef7e7" translate="yes" xml:space="preserve">
          <source>The above now allows passing from &lt;code&gt;text&lt;/code&gt; to &lt;code&gt;mycustomtype&lt;/code&gt; and then &lt;code&gt;mycustomtype&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b32e570dfd596419701353365115bdabacf94c4" translate="yes" xml:space="preserve">
          <source>The above wraps its code in a function to hide the &quot;proxied&quot;-variable. It saves jQuery's setArray-method in a closure and overwrites it. The proxy then logs all calls to the method and delegates the call to the original. Using apply(this, arguments) guarantees that the caller won't be able to notice the difference between the original and the proxied method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6610ea50c945318d3ab7693d709bd53977c14242" translate="yes" xml:space="preserve">
          <source>The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the &lt;code&gt;alwaysCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.always()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional &lt;code&gt;.always()&lt;/code&gt; methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;rejectWith&lt;/code&gt;&lt;/a&gt; method calls. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4b7d3a4511e33399069ffc13d4bc8def0f503b" translate="yes" xml:space="preserve">
          <source>The argument or list of arguments to pass back to the callback list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953b3138188e0f4497437947cd8a29321abeb58c" translate="yes" xml:space="preserve">
          <source>The arguments object also has a callee property, which refers to the function you're inside of. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1aa336f96c29c99dc1ba1bdef4fa0b9f4fb846" translate="yes" xml:space="preserve">
          <source>The arguments that were passed in to the jQuery method (for serialization).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fe9863cb30f7b0bcc0e1d8d4a68a046910e081" translate="yes" xml:space="preserve">
          <source>The array or array-like object to iterate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc6aedd808a2761d036a171b890dbe3969ca47d" translate="yes" xml:space="preserve">
          <source>The array-like object to search through.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92d8a0b1c47a77890394dcce7884f2dd51b73ca" translate="yes" xml:space="preserve">
          <source>The available data types are &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;jsonp&lt;/code&gt;, and &lt;code&gt;script&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f474111176dbe4b72c85bfbcfa1c612929642144" translate="yes" xml:space="preserve">
          <source>The callback hooks provided by &lt;code&gt;$.ajax()&lt;/code&gt; are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48456f9d8ed08fb80093cafa81da3b3750f4a2ec" translate="yes" xml:space="preserve">
          <source>The callback is fired once the script has been loaded but not necessarily executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a150dbeefa27a6fdaddf5d4cbf61e79e3e341a3" translate="yes" xml:space="preserve">
          <source>The callback to search for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9e0b41d52d14d06d6f59d74c2f23e7bb7aacd6" translate="yes" xml:space="preserve">
          <source>The child combinator (E &lt;strong&gt;&amp;gt;&lt;/strong&gt; F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0131d897f9ebfd2e8528f7451f2bd70eaf19197" translate="yes" xml:space="preserve">
          <source>The class name to search for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c76c95474ded1c83df62e9659deaf1e78a2557e" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text( &quot;&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;&quot; );&lt;/code&gt; will produce the following DOM output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee09ededc986c4fde55112bb27792c5ab11f4d64" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text()&lt;/code&gt; would produce the following result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff3e41c1bb8be78905878d3080804c616d66cc8" translate="yes" xml:space="preserve">
          <source>The comparison between values is strict. The following will return &lt;code&gt;-1&lt;/code&gt; (not found) because a number is being searched in an array of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63934f4de86321cfe3280de8cd4a6928e795771b" translate="yes" xml:space="preserve">
          <source>The complementary operation to &lt;code&gt;.get()&lt;/code&gt;, which accepts an index and returns a DOM node, &lt;code&gt;.index()&lt;/code&gt; can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f4668e4368f2a79f73dba514f8e60e41c8e365" translate="yes" xml:space="preserve">
          <source>The content of &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; can be set like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9bb9d21c71526c772e1cdf35a9a991a7064a75" translate="yes" xml:space="preserve">
          <source>The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1584a1b9999c4d1def5c45e27ab44e4599a0d8" translate="yes" xml:space="preserve">
          <source>The current DOM element within the event bubbling phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46824c34fb82db130a2df5609dafd2545fdc3db2" translate="yes" xml:space="preserve">
          <source>The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8b1c908f3b2c347bd0eeb6d735aa8ab48d1652" translate="yes" xml:space="preserve">
          <source>The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b4a3dc9d992a9171395774e152136eb0aa3384" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css( &quot;height&quot; )&lt;/code&gt; and &lt;code&gt;.height()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.height()&lt;/code&gt; method is recommended when an element's height needs to be used in a mathematical calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50a600af0ee02848ff5326868c4753647ab9366" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css(width)&lt;/code&gt; and &lt;code&gt;.width()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.width()&lt;/code&gt; method is recommended when an element's width needs to be used in a mathematical calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37202ea5ad20c3706e31a8627329e1cc35a19b29" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.attr()&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b8341db17aad3ed60ff6d25f09507ac30ab22b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d00606c5e46f31f2f98e11c01c5572475bedf2" translate="yes" xml:space="preserve">
          <source>The difference in milliseconds between the time the browser created the event and January 1, 1970.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad811ab657cc27a74651a8411a156528a0df130" translate="yes" xml:space="preserve">
          <source>The drawback is that the callback is called in the context of each value and you therefore lose the context of your own object if applicable. More on this below at Functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9037c831467c9eaa41d28fe7bf4126374f23fbbf" translate="yes" xml:space="preserve">
          <source>The effect of this on &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; (when it does not initially have the &quot;entered&quot; class) is to add the &quot;entered&quot; class when the mouse enters the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and remove the class when the mouse leaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abaa5fa0e138e2677c0408917eeeb5af975fe5df" translate="yes" xml:space="preserve">
          <source>The element where the currently-called jQuery event handler was attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33d88a15dc715eabf21b992b42c443d395d3276" translate="yes" xml:space="preserve">
          <source>The end parameter allows us to limit the selected range even further. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c816a005a96322be853cb13839915a982aa35e3" translate="yes" xml:space="preserve">
          <source>The event handler &lt;em&gt;must&lt;/em&gt; be attached before the browser fires the &lt;code&gt;error&lt;/code&gt; event, which is why the example sets the &lt;code&gt;src&lt;/code&gt; attribute after attaching the handler. Also, the &lt;code&gt;error&lt;/code&gt; event may not be correctly fired when the page is served locally; &lt;code&gt;error&lt;/code&gt; relies on HTTP status codes and will generally not be triggered if the URL uses the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6592b71414facc03b08e92d3c61ae4a7c6e48089" translate="yes" xml:space="preserve">
          <source>The event handler and its environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3eaa89182d66deb143ff4b5e21401f0e6abded1" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c8521075173da7ee615c1ec3531d4b5d09418a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c77560ec7292139b9e6f566baee76ddf960569a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2e5765f810648c6904605842ced0e04a09f0e3" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the first input field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541d65895736107ef3f16d5231f478c377077d12" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b2f9b415c772375ce1094bf5af80a249e679b0" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59db2f3ed37d22060fab94786bd9bfe98aa672b8" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the input field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c302c60ef5ad634affc166ae8ba6a179c97813a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the target:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7089e39a05558f599138c92d69408f4e931882a9" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input and the select box:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ceb3bdf027007c75defc080e05b2850e2e15f7" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a968461088fc48b890360da98e8a2917f0c0ec22" translate="yes" xml:space="preserve">
          <source>The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04cbf7c5545cd035665c33569633ce74b31c81a" translate="yes" xml:space="preserve">
          <source>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. &lt;a href=&quot;category/events/event-object&quot;&gt;View the full Event Object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5610a350c3ccf39411d452e988cd760b00e727" translate="yes" xml:space="preserve">
          <source>The exact handling of the &lt;code&gt;unload&lt;/code&gt; event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers and contrasted with the similar &lt;code&gt;beforeunload&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47720c0de238c3c29d705238cb0f84e408d6262" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;$( &quot;div:has(p)&quot; )&lt;/code&gt; matches a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; if a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; exists anywhere among its descendants, not just as a direct child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec95bd57664e6187875684bcae2f43b3499034" translate="yes" xml:space="preserve">
          <source>The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8c78269da9a7a144139698b6264cc95a56365a" translate="yes" xml:space="preserve">
          <source>The first array-like object to merge, the elements of second added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca6f939db67fb58379c0c2238b53604a16dbd93" translate="yes" xml:space="preserve">
          <source>The first button shows how an unqueued animation works. It expands the div out to 90% width &lt;strong&gt;while&lt;/strong&gt; the font-size is increasing. Once the font-size change is complete, the border animation will begin. The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe3394cf354aa01c5c119c6f9df4de1d6557809" translate="yes" xml:space="preserve">
          <source>The first letter in Ajax stands for &quot;asynchronous,&quot; meaning that the operation occurs in parallel and the order of completion is not guaranteed. The &lt;code&gt;async&lt;/code&gt; option to &lt;code&gt;$.ajax()&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;, indicating that code execution can continue after the request is made. Setting this option to &lt;code&gt;false&lt;/code&gt; (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd4ad641c60ce993a319482b87b6fff7be020a1" translate="yes" xml:space="preserve">
          <source>The first signature for the &lt;code&gt;.find()&lt;/code&gt;method accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. The elements will be filtered by testing whether they match this selector. The expressions allowed include selectors like &lt;code&gt;&amp;gt; p&lt;/code&gt; which will find all the paragraphs that are children of the elements in the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd5cdf1aaec5d99e649d109e9218e1768db80d9" translate="yes" xml:space="preserve">
          <source>The first time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, we get the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021404d539fa30f7bd9a809d18e784457069d717" translate="yes" xml:space="preserve">
          <source>The following are two sample methods named &lt;code&gt;fn1&lt;/code&gt; and &lt;code&gt;fn2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc071c8397609381bbd9504310c1ba41353890a3" translate="yes" xml:space="preserve">
          <source>The following example shows how a minimal image transport could be implemented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb3689a802e901601920b2b12ca783b0318c8c6" translate="yes" xml:space="preserve">
          <source>The following properties are also copied to the event object, though some of their values may be undefined depending on the event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec858fec45670eb0dcd1906c0e4f2fc17caf072" translate="yes" xml:space="preserve">
          <source>The following selectors are based on the Cascading Style Sheet 1 specification, as outlined by the W3C. For more information about the specifications, visit &lt;a href=&quot;https://www.w3.org/Style/CSS/#specs&quot;&gt;https://www.w3.org/Style/CSS/#specs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc8ca2023c763ab424e309905ae785bfc9fcdc1" translate="yes" xml:space="preserve">
          <source>The following will &lt;em&gt;not&lt;/em&gt; save the added elements, because the &lt;code&gt;.add()&lt;/code&gt; method creates a new set and leaves the original set in pdiv unchanged:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f51f371b8da8dc1313314e38b6c779c426e42e6" translate="yes" xml:space="preserve">
          <source>The function can return:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e37153bc1a8e1ad3a9f12be343e9728f9a20217" translate="yes" xml:space="preserve">
          <source>The function that is no longer to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e0e646f0de4166549307945db05657dc0f40f2" translate="yes" xml:space="preserve">
          <source>The function that is to be no longer executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7180b46bfb05a111cd04bc1cb12e5540f1eb2375" translate="yes" xml:space="preserve">
          <source>The function that will be executed on every value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3de917bcd36c99d1259f320a3f7d5ffbc730acf" translate="yes" xml:space="preserve">
          <source>The function to be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f804edca989e0ac4a94b9c06aefacd24370d29f" translate="yes" xml:space="preserve">
          <source>The function to execute when the DOM is ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528266b758f50455c24b724fbb39bccc1e8838e7" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2497be69d4d28d0015898947249c2dfe61e4276d" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value. &lt;code&gt;this&lt;/code&gt; will be the global window object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed78ed460dba43418960b9867533924d5b82946f" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the value; the second argument is the key of the object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7f01ed75b8f184641d80cb2808bde2c28779d5" translate="yes" xml:space="preserve">
          <source>The function whose context will be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44671f971a36a5853ba3aa8c82cb9c2627ced934" translate="yes" xml:space="preserve">
          <source>The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96908f5f2e8c272b018f7fc547920ba259a9f935" translate="yes" xml:space="preserve">
          <source>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for &lt;code&gt;.unbind()&lt;/code&gt; to know which handler to remove. This example is also an illustration of a closure. Since the handler refers to the &lt;code&gt;timesClicked&lt;/code&gt; variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a017672927edcddb38cf218fbb12b8313df4cc6" translate="yes" xml:space="preserve">
          <source>The handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won't take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;. This behavior goes against the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener&quot;&gt;W3C events specification&lt;/a&gt;. To better understand this case, consider the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068354fa5d5791c1d48dccb2e852071a0eec58aa" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollLeft&lt;/code&gt; positions the horizontal scroll of each matched element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef722341357678071415deb8d758a8d628e8e77" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18c308cc9003dd517b04c883ca4c11f2901568f" translate="yes" xml:space="preserve">
          <source>The index of the array at which to begin the search. The default is 0, which will search the whole array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fbf232995bee433ace36fdc322edb615edc6af" translate="yes" xml:space="preserve">
          <source>The index-related selector expressions (including this &quot;greater than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce2345a99b016ade0050c9c9e058771ff484eb6" translate="yes" xml:space="preserve">
          <source>The index-related selectors (&lt;code&gt;:eq()&lt;/code&gt;, &lt;code&gt;:lt()&lt;/code&gt;, &lt;code&gt;:gt()&lt;/code&gt;, &lt;code&gt;:even&lt;/code&gt;, &lt;code&gt;:odd&lt;/code&gt;) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;3&lt;/code&gt; for the purposes of these selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba134bef640122a89e8d25ae63500999badb7aed" translate="yes" xml:space="preserve">
          <source>The index-related selectors (including this &quot;less than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e288c80fa39dc156186e654513b5fc57fb3fddd" translate="yes" xml:space="preserve">
          <source>The jQuery &lt;code&gt;.slice()&lt;/code&gt; method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514aa5055f00f797e80751f12544ed3ca726fe25" translate="yes" xml:space="preserve">
          <source>The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6808edbc627612119a19ef098b25e718fe0d28c4" translate="yes" xml:space="preserve">
          <source>The jQuery XMLHttpRequest (jqXHR) object returned by &lt;code&gt;$.ajax()&lt;/code&gt;&lt;strong&gt;as of jQuery 1.5&lt;/strong&gt; is a superset of the browser's native XMLHttpRequest object. For example, it contains &lt;code&gt;responseText&lt;/code&gt; and &lt;code&gt;responseXML&lt;/code&gt; properties, as well as a &lt;code&gt;getResponseHeader()&lt;/code&gt; method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the &lt;code&gt;jqXHR&lt;/code&gt; object simulates native XHR functionality where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6329bb11d7dcdb2e64db5216d41be8f97344e159" translate="yes" xml:space="preserve">
          <source>The jQuery library has a full suite of Ajax capabilities. The functions and methods therein allow us to load data from the server without a browser page refresh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bf20b00460b915cf997aa1998852c28ee31339" translate="yes" xml:space="preserve">
          <source>The jQuery library provides several techniques for adding animation to a web page. These include simple, standard animations that are frequently used, and the ability to craft sophisticated custom effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10ed5864ed562309d6eb5544f97085abf741a3c" translate="yes" xml:space="preserve">
          <source>The jQuery object itself behaves much like an array; it has a &lt;code&gt;length&lt;/code&gt; property and the elements in the object can be accessed by their numeric indices &lt;code&gt;[0]&lt;/code&gt; to &lt;code&gt;[length-1]&lt;/code&gt;. Note that a jQuery object is not actually a Javascript Array object, so it does not have all the methods of a true Array object such as &lt;code&gt;join()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adc43edd25fe471ec1647fe8c39dc7a5af1b244" translate="yes" xml:space="preserve">
          <source>The jqXHR Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31de3d3efc0743154a00d75c22c5127d0f3e1c79" translate="yes" xml:space="preserve">
          <source>The jqXHR objects returned by &lt;code&gt;$.ajax()&lt;/code&gt; as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt; for more information). These methods take one or more function arguments that are called when the &lt;code&gt;$.ajax()&lt;/code&gt; request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a9d8acdf4a10af6785836e5bd16312f63736d6" translate="yes" xml:space="preserve">
          <source>The keys of the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object are camel-cased and the values are all set to &lt;code&gt;true&lt;/code&gt;. If you want to prevent the &lt;a href=&quot;css&quot;&gt;&lt;code&gt;.css()&lt;/code&gt;&lt;/a&gt; method from automatically adding the &lt;code&gt;px&lt;/code&gt; unit for a specific CSS property, you can add an extra property to the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8a74ca684f546365d11151b876bb5ef5d248e1" translate="yes" xml:space="preserve">
          <source>The last &lt;code&gt;end()&lt;/code&gt; is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the &lt;code&gt;end()&lt;/code&gt; provides visual symmetry and a sense of completion &amp;mdash;making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efe7e2c92ffe13a861e60a5a71908950a6e6f96" translate="yes" xml:space="preserve">
          <source>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b0302cdc98e914c921d10ae80c2282a00fe827" translate="yes" xml:space="preserve">
          <source>The length property can also be used to add elements to the end of an array. That is equivalent to using the push-method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076292172fb49811fbaacb886eb7c1bb1c8ecc8a" translate="yes" xml:space="preserve">
          <source>The majority of browser events &lt;em&gt;bubble&lt;/em&gt;, or &lt;em&gt;propagate&lt;/em&gt;, from the deepest, innermost element (the &lt;strong&gt;event target&lt;/strong&gt;) in the document where they occur all the way up to the body and the &lt;code&gt;document&lt;/code&gt; element. In Internet Explorer 8 and lower, a few events such as &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;submit&lt;/code&gt; do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0824e824d0098d6239873a84448d410eecdf43c6" translate="yes" xml:space="preserve">
          <source>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;none&quot; )&lt;/code&gt;, except that the value of the &lt;code&gt;display&lt;/code&gt; property is saved in jQuery's data cache so that &lt;code&gt;display&lt;/code&gt; can later be restored to its initial value. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt; and is hidden then shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f4fb72769ec86f58468699c9160d1615df38e7" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;block&quot; )&lt;/code&gt;, except that the &lt;code&gt;display&lt;/code&gt; property is restored to whatever it was initially. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db2c262258f59451cfcd14f30a965494fdb7a8c" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS &lt;code&gt;display&lt;/code&gt; property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7ec0c7e986ccedf73b9e0eb11f7ca9d71e877a" translate="yes" xml:space="preserve">
          <source>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of &lt;code&gt;:contains()&lt;/code&gt; can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8dada95be7fb335e0f7f1320405d5fbedd5c7c" translate="yes" xml:space="preserve">
          <source>The merge performed by &lt;code&gt;$.extend()&lt;/code&gt; is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second or subsequent object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing &lt;code&gt;true&lt;/code&gt; for the first function argument, objects will be recursively merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c80fedd44d738243eba338965b1bbbb2d7430fc" translate="yes" xml:space="preserve">
          <source>The message to send out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43a2a342b89cf38eab310c6b2bdcbbe99661c6e" translate="yes" xml:space="preserve">
          <source>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b34d3ff4f09696376c290b5d4b739841fed2fd" translate="yes" xml:space="preserve">
          <source>The method is essentially a shim for the &lt;a href=&quot;https://drafts.csswg.org/cssom/#the-css.escape()-method&quot;&gt;CSS Working Group's CSS.escape() method&lt;/a&gt;. The main difference is that &lt;code&gt;$.escapeSelector()&lt;/code&gt; can be reliably used in all of jQuery's supported browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0ac576955e6ed525104494cccefc79c0ffaa02" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4b38eca31ac6773d02424670d957ba8068df2a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that can be passed to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e347b38d077dd75b669a2a45800a2e68ea6ad65" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c55f0e439cd154cac85e4979f9c4e7e9575eb8a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6305564df7b2b4e272ed467fba354bfdae8565ff" translate="yes" xml:space="preserve">
          <source>The methods of &lt;code&gt;$.Callbacks&lt;/code&gt; can also be detached, should there be a need to define short-hand versions for convenience:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafefab1095fabbdb39dfb2063d2b3e5df760f86" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576cd8b97d955c1f863447a2e77d26323ba6546c" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed while the pointer is inside the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1db620e4cdeba5d3d324554abd72a643b595ecf" translate="yes" xml:space="preserve">
          <source>The mouse button is released while the pointer is inside the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2263bd52a19e370eee7fef7d2360445c3d9c5f06" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the left edge of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12339186c582f7ed442e4c1b7e3883792f2709f5" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the top edge of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2033823b3dadb8c11098d4f039ae3c154ce90a6c" translate="yes" xml:space="preserve">
          <source>The name &lt;code&gt;&quot;class&quot;&lt;/code&gt; must be quoted in the object since it is a JavaScript reserved word, and &lt;code&gt;&quot;className&quot;&lt;/code&gt; cannot be used since it refers to the DOM property, not the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be23a63086ebda18e8b5ba2e3920d1ac2b75c2d" translate="yes" xml:space="preserve">
          <source>The name of a jQuery method that generated the array of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4296958589618bb6ad56c790eff779ad5d423877" translate="yes" xml:space="preserve">
          <source>The name of the attribute to get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd0cc3752c40397ded39a708c242e4c4268ad6a" translate="yes" xml:space="preserve">
          <source>The name of the attribute to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46c06096b68a311eebedcb4711d03a49036de4a" translate="yes" xml:space="preserve">
          <source>The name of the function whose context will be changed (should be a property of the &lt;code&gt;context&lt;/code&gt; object).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e22159b8af57c29d0edb7193b221eb98a0ca996" translate="yes" xml:space="preserve">
          <source>The name of the property to get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a258d2d705073bc54bce7ce496f383cbeade4f" translate="yes" xml:space="preserve">
          <source>The name of the property to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c14f88a65230d7c15efb3a3d43e7bba43ad5af" translate="yes" xml:space="preserve">
          <source>The name of the property to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd4253c3db5e6f71db9e3f316f1013ed1b182b2" translate="yes" xml:space="preserve">
          <source>The name of the queue in which to stop animations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec510aca48291402a1eb466d7b9bbe2a80c30c14" translate="yes" xml:space="preserve">
          <source>The namespace specified when the event was triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e042ae48213e41f3c7dccddac1887f13741ea2e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around all matched elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d83db634f8310cdc17fa4dcfc3eccbf02665e0f" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around each matched element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b58a65b4c9866f2d71d3277e6db6f3e6f3a7760" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around the content of each matched element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c84130d9d5f31038adef11e326eb07e0a7ceaf" translate="yes" xml:space="preserve">
          <source>The new data value; this can be any Javascript type except &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f9d09d2b9aa882752be29e4d95646605648024" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue, with a function to call that will dequeue the next item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c162ae394e32228352d0721ceb63d31e08368c1" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0eafdfc57124a623a8018c422334d4b9398c2dc" translate="yes" xml:space="preserve">
          <source>The notable difference between (&lt;code&gt;prev + next&lt;/code&gt;) and (&lt;code&gt;prev ~ siblings&lt;/code&gt;) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c92283828b72633f848b9fc54352c975e1c308" translate="yes" xml:space="preserve">
          <source>The number of elements currently matched. The .&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt; method will return the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d7ae7bde39033c3e928ca063c9efe18c0ee88b" translate="yes" xml:space="preserve">
          <source>The number of elements in the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6016b690bdcda756024030e31e339dec9953dc6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.height()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e1719c954b51432abdfa681d9c3f47f176fad6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa21e56b5c6a4a1242bcbb02b0eb0a6d7535a8d" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8d1ed18f88fb30e931c4dd179fa50e5f3d80b0" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.offset()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc7307ad7e4bd4a5e469f56fb8abf4483d5d27c" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bf3025deac19407f8af0203fdb55e479bb25a2" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5493f0ce296d72e79d89a3d60ed5606b5223e979" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.position()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c15f4d2fb291886be6e0579952d0630802ecbb" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.width()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7159b370dec0b4c77b9794448f968d021591451c" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's a plain object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0ff630dca657003b8459aa56ecf0e2c77c82ea" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec3b49d6eb40059902496e5b347b2f0250d6d64" translate="yes" xml:space="preserve">
          <source>The object to extend. It will receive the new properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3ea496874fb4613c3a9be9c6a176f4f24c9e54" translate="yes" xml:space="preserve">
          <source>The object to iterate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0f686882a210293bfb4c1039dba53491f90039" translate="yes" xml:space="preserve">
          <source>The object to which the context (&lt;code&gt;this&lt;/code&gt;) of the function should be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9e825e08e2e24867189da3596374f800696e05" translate="yes" xml:space="preserve">
          <source>The object to which the context of the function should be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a8b16b79d7f4fee1588777ab5b8dddb1929eab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;eventData&lt;/code&gt; parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1dddeb4e713a5f321f1b20a92fef9ccfbfa2bf" translate="yes" xml:space="preserve">
          <source>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree. However, if the original collection contains more than one element, they might be mutual siblings and will both be found. If you need an exclusive list of siblings, use &lt;code&gt;$collection.siblings().not($collection)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19df398a82ac5760aa053d006893448666db417e" translate="yes" xml:space="preserve">
          <source>The other DOM element involved in the event, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42d3730919bd78afe5cc24beda85a4371f8e442" translate="yes" xml:space="preserve">
          <source>The particular use cases of this method can be best described through some examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12be8f32109db553edeba7bd125861dccf618584" translate="yes" xml:space="preserve">
          <source>The pattern allows you to create objects with methods that operate on data that isn't visible to the outside&amp;mdash;the very basis of object-oriented programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c46afeb0966601574b297f1353d3cc0f47df196" translate="yes" xml:space="preserve">
          <source>The point in the document at which the selector should begin matching; similar to the context argument of the &lt;code&gt;$(selector, context)&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0db3d81595eb495dfe775005f5118fba49529a" translate="yes" xml:space="preserve">
          <source>The primary advantage of &lt;code&gt;jQuery.hasData(element)&lt;/code&gt; is that it does not create and associate a data object with the element if none currently exists. In contrast, &lt;code&gt;jQuery.data(element)&lt;/code&gt; always returns a data object to the caller, creating one if no data object previously existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdb90577bf3f6aada029f8710eb364c8c78a2a9" translate="yes" xml:space="preserve">
          <source>The rate (in milliseconds) at which animations fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb10dad645475696bea64c8a19075d461c6a4dfa" translate="yes" xml:space="preserve">
          <source>The remaining parameter of &lt;code&gt;.animate()&lt;/code&gt; is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e06470e3fa05cf5cc0dafb0b2ea20bf565f4ed" translate="yes" xml:space="preserve">
          <source>The result of the following code is a red background behind items 3, 4 and 5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f17d80c2fe57707960ab0ce62ea8411233be366" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind all four elements. Using an HTML snippet as the &lt;code&gt;.add()&lt;/code&gt; method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5306f5e1616f9fad7b62559297b520b0e13420d" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fe25b8e98dc2a880ab00b6091306129b22d2b1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdd09e46848eac38bfa76febcbadcd077bcfffd" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803dcb57e7c93f3e463b7c42ff56d2c06449aae1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43225fe6ce7a5b0e7693b20ab46719a0f4b3f89" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed9f4feb04438548de3b013137694e77d57632b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5d9de3fcbdb18a4bc188bea62cba2e34e884d1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 2, as it is the only &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that has a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; among its descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89615ef14d3fbd60d050d9155e47ebd4ba8656f" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1805e37c0ac93512567135d69322d80bf04492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that &lt;code&gt;:even&lt;/code&gt; and &lt;code&gt;:odd&lt;/code&gt; use 0-based indexing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008bfcb10c48746c779c107b0cd2e4012a84d492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa883f229b6f69a81b08da92e713eb4a1caff5f9" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1517b2e444023a7127a38d5c51bcdff691e73b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the final item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facf65b81d3f8a612a59fa241dcd3b82f9307f27" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the first item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385666a4367c3ceaa277ae989ffa6d62efba1ee5" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aacd8c82ea9af8e8daf6e3c4d83d62f3a11bb2" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759e58f5af381c9ae58e15d8327b13ec00b52925" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8542609c7db1f3303873f6a2002911ee15c9ea8e" translate="yes" xml:space="preserve">
          <source>The result of this call is the string, &lt;code&gt;&quot;two,four,six,eight&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485440b7c20f82cfee29dc2091cb4a9c40a2f99a" translate="yes" xml:space="preserve">
          <source>The result of this call would be a red background on item 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271ba0250ab50aa59f8fc29f25ec5ee041c7dddd" translate="yes" xml:space="preserve">
          <source>The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e630df4612cdefc2e2262290e72aa29c13c7a13" translate="yes" xml:space="preserve">
          <source>The result would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cf4e5bb5314a409449a88f58bf0d0b43b88262" translate="yes" xml:space="preserve">
          <source>The resulting DOM structure would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141af9b6cff1007634750533839c59d6c52a9d14" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ad1547f50f7c20a1cd7579032c984beb61889d" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or one element for each element in the original set, in document order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fe1e1f1407019a7bb0e31dc8b4968b82567270" translate="yes" xml:space="preserve">
          <source>The same is true for other dynamic attributes, such as &lt;code&gt;selected&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c475723db5a18006828a3888cc67bbf8c09867" translate="yes" xml:space="preserve">
          <source>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cfc35df62d2b3a52dae65a48561a4349497359" translate="yes" xml:space="preserve">
          <source>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09640a2d2f7e5680918d2964d2624ebb2a3d2a31" translate="yes" xml:space="preserve">
          <source>The second array-like object to merge into the first, unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc6e7d14914bf71bafefa2bfaf2aaad9add698b" translate="yes" xml:space="preserve">
          <source>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt; (or a &quot;truthy&quot; value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb5168b1f0fd8e8dcac15e31943b6a43f6f6d0d" translate="yes" xml:space="preserve">
          <source>The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;.is()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; as well. For example, given a somewhat more involved HTML snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a154816850f6de6770577387c99f209db6b6ece" translate="yes" xml:space="preserve">
          <source>The second inner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; could be replaced with the specified HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e3344300bcc1acfb7bb30ab9c54d31a312c9e1" translate="yes" xml:space="preserve">
          <source>The second statement of the code above correctly refers to the &lt;code&gt;data-last-value&lt;/code&gt; attribute of the element. In case no data is stored with the passed key, jQuery searches among the attributes of the element, converting a camel-cased string into a dashed string and then prepending &lt;code&gt;data-&lt;/code&gt; to the result. So, the string &lt;code&gt;lastValue&lt;/code&gt; is converted to &lt;code&gt;data-last-value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c42dd9df1106a653c3e574c2ee9fc8431d825de" translate="yes" xml:space="preserve">
          <source>The second time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; class is returned to the single &lt;code&gt;tumble&lt;/code&gt; value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665befe924907801a3530bb57b4cbf891ba537dd" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.animate()&lt;/code&gt; provides a &lt;code&gt;step&lt;/code&gt; option &amp;mdash; a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (&lt;code&gt;now&lt;/code&gt; and &lt;code&gt;fx&lt;/code&gt;), and &lt;code&gt;this&lt;/code&gt; is set to the DOM element being animated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae52fd7621257d963ead7e4f0853cac0c5348a5" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.toggleClass()&lt;/code&gt; uses the second parameter for determining whether the class should be added or removed. If this parameter's value is &lt;code&gt;true&lt;/code&gt;, then the class is added; if &lt;code&gt;false&lt;/code&gt;, the class is removed. In essence, the statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaf7d0124b927367a9b0ae3fed5a220228eea05" translate="yes" xml:space="preserve">
          <source>The second version of the &lt;code&gt;.not()&lt;/code&gt; method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db488502c779e5855624bcb94b0d9eac6e51fef3" translate="yes" xml:space="preserve">
          <source>The second version of the method accepts a Boolean parameter. If this parameter is &lt;code&gt;true&lt;/code&gt;, then the matched elements are shown; if &lt;code&gt;false&lt;/code&gt;, the elements are hidden. In essence, the statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14129c4f8fda0ecb933fddabaa46bdf397f7bc5b" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50749b1d27f953b40a33c2be2b260d7a6793cd44" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f395dc88a156a3c3c8af5ffcd5884c85b81cc391" translate="yes" xml:space="preserve">
          <source>The selectors are a composition of CSS and custom additions. All selectors available in jQuery are documented on the &lt;a href=&quot;category/selectors&quot;&gt;Selectors API page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113d83a724dd060af5c92489a395d6836663109a" translate="yes" xml:space="preserve">
          <source>The standard events in the Document Object Model are: &lt;code&gt;blur&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scroll&lt;/code&gt;, &lt;code&gt;unload&lt;/code&gt;, &lt;code&gt;beforeunload&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;dblclick&lt;/code&gt;, &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseover&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keypress,&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dc41bbfc0d4e44cab83fd01605e79bb3468eef" translate="yes" xml:space="preserve">
          <source>The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a2664d68de74010dd9b594714895a2e4e5ee52" translate="yes" xml:space="preserve">
          <source>The string to trim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a92059af11477af58d65e98372ed264b36cef5" translate="yes" xml:space="preserve">
          <source>The style definition is present to make the target element small enough to be scrollable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5deae09e7c61eea99ec8ef3ea6e54e9cb20eaf6c" translate="yes" xml:space="preserve">
          <source>The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5b15e66531244890cf5d811d8f2c84ea4027f2" translate="yes" xml:space="preserve">
          <source>The third form of the &lt;code&gt;.unbind()&lt;/code&gt; method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c28ffbb3cc7d012a98f2607f053d7e64eaa8d79" translate="yes" xml:space="preserve">
          <source>The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258e9a1f5851882139fe20ce70223b4486206779" translate="yes" xml:space="preserve">
          <source>The type of a function is &quot;function&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250061ae6c3eaba58f68c8b0705fa5283b17f50a" translate="yes" xml:space="preserve">
          <source>The type of a number is &quot;number&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d86a1b42215eee2fd5f10b41fcbfe8d78a85728" translate="yes" xml:space="preserve">
          <source>The type of a string is &quot;string&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7be4ab84b82bbdfbeec8971b1864a663638bfd" translate="yes" xml:space="preserve">
          <source>The type of an array is &quot;object&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18897493ed6d8b67961ab81a7e1840ec5872f8e" translate="yes" xml:space="preserve">
          <source>The type of an object is &quot;object&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb813a8f15ca076b4aeffe26fb2a446d33302d2" translate="yes" xml:space="preserve">
          <source>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b1a1be3665cab47e929452b9514cab452f93f3" translate="yes" xml:space="preserve">
          <source>The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4f1e6bc7e33b940ea0ca5958d289d963ae06e7" translate="yes" xml:space="preserve">
          <source>The type of queue that needs to be observed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac03d521d35e958a333e1be1023588d7bb5c2990" translate="yes" xml:space="preserve">
          <source>The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4b9ca98fca80215d567f08acc1e010086fbd76" translate="yes" xml:space="preserve">
          <source>The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc333f2557363d5ea2debb3f8b7027ef58060e4" translate="yes" xml:space="preserve">
          <source>The usefulness of the &lt;code&gt;.stop()&lt;/code&gt; method is evident when we need to animate an element on &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddb3ecf6925c2baa005d5f8268928b76546a56a" translate="yes" xml:space="preserve">
          <source>The value of this property is typically equal to &lt;code&gt;document&lt;/code&gt;, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; or XML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d165304e00442e2fdb141efe014b25a469d208d2" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.height()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.height()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0af6f379e115697c7e674c117df786f0e63a85" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8991a4ea8bbeb4de8eb903eec32a3d76ab3261d6" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91533a4f81b4096f3edfca19014a9026436ec64" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd3d5a9284c46e459ea9e01e158794d00a13f65" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae90c5e2d8c736238c1834e07b1b20df9da99b3" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.width()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.width()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df08275a2c09a868605d7342becb61e11202ec4a" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;recursiveEncoded&lt;/code&gt; and &lt;code&gt;recursiveDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e0e1cb47a895c4adce508484a0fbdad4d1c662" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;shallowEncoded&lt;/code&gt; and &lt;code&gt;shallowDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a99608838cb4e83a0ff0bacdd7885d4ca584ef" translate="yes" xml:space="preserve">
          <source>The variation you choose is generally a matter of style or convenience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b4a5d36b3f75dae7b5b98ef86f8721c4b2115f" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502041741bb29d2d0ce2d7cb3f9f058410872bd0" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollTop&lt;/code&gt; positions the vertical scroll of each matched element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68009f554546520daab11a31781a53314e2258bf" translate="yes" xml:space="preserve">
          <source>Their width and height are explicitly set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a6b9ab62274f73e087c9eaa4c7881cd846e98d" translate="yes" xml:space="preserve">
          <source>Thenable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba170ab9f1988f7e0b5177b2872e6c65a73fd8b" translate="yes" xml:space="preserve">
          <source>There are lot of plugins that leverage jQuery's selectors in other ways. The validation plugin accepts a selector to specify a dependency, whether an input is required or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce0d5f676018adf414ee9fb049b9a0ccdf3b569" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6fda1d75631a26b3fa9aabdbc4d04428691220" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some standard browser events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63711a0adcaf5fcd03bba3c3b147f0181be2820" translate="yes" xml:space="preserve">
          <source>There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92882ffa32ba59639260af20d453135f132e2a1" translate="yes" xml:space="preserve">
          <source>There are two types of events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d166c8f570311888ce1e4d2c5d8012b91e58818d" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;$(document).on( &quot;ready&quot;, handler )&lt;/code&gt;, &lt;em&gt;deprecated as of jQuery 1.8 and removed in jQuery 3.0&lt;/em&gt;. Note that if the DOM becomes ready before this event is attached, the handler &lt;em&gt;will not be executed&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2adf959188684f5fb25abf351d01408eb8540a8" translate="yes" xml:space="preserve">
          <source>These are callbacks that you can subscribe to within the Ajax request object, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb9908eefdc7f5d52352839085856ff586bef42" translate="yes" xml:space="preserve">
          <source>These can be added as callbacks to a &lt;code&gt;$.Callbacks&lt;/code&gt; list and invoked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3045922e3813d89836a97e9e2f7086202e8607c" translate="yes" xml:space="preserve">
          <source>These events are triggered on the &lt;code&gt;document&lt;/code&gt;, calling any handlers which may be listening. You can listen for these events like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e88bd0cd93766cee13f54b1e8fa0d73ba477db4" translate="yes" xml:space="preserve">
          <source>These functions assist with common idioms encountered when performing Ajax tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe40564276f220415e365fe124b886a4b1abcfa" translate="yes" xml:space="preserve">
          <source>These methods adjust the opacity of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5dceab1cd6454e730b2a57d9f7b0169f076d3c5" translate="yes" xml:space="preserve">
          <source>These methods allow us to associate arbitrary data with specific DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4066f49a0950cecd91b201b26d1de51efbe9229a" translate="yes" xml:space="preserve">
          <source>These methods allow us to delete elements from the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83101d88ab9c3dabba90bc0af8ad464da3b6ec6d" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content inside an existing element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f267e40060626a06189c0c1eee775807f476e368" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content outside an existing element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29086c3aa4bd1a27da2e9e184fe031e4bfd5a02" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content surrounding existing content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc604750ce03230768923f16f804981342c1e94d" translate="yes" xml:space="preserve">
          <source>These methods allow you to create effects that are not provided &quot;out of the box&quot; by jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0625f6d74b36be39a6d19f27d45b0219d041a46" translate="yes" xml:space="preserve">
          <source>These methods and event handlers handle forms and their various elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b8674db3e233679cba9aa8c56ce17e71105fda" translate="yes" xml:space="preserve">
          <source>These methods are used to get and set the CSS dimensions for the various properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d116605cbd8c6c5ab76a3a490e960c52c3b187" translate="yes" xml:space="preserve">
          <source>These methods are used to register behaviors to take effect when the user interacts with the browser, and to further manipulate those registered behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e156b975a013e00c555b91859d1720dc0cebe05" translate="yes" xml:space="preserve">
          <source>These methods are used to remove content from the DOM and replace it with new content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76059f80300cb0ffdcfcb66416bfc17f849566e5" translate="yes" xml:space="preserve">
          <source>These methods can be used to make arbitrary Ajax requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1001d40d2d517229663551d85a88e9dba991d4" translate="yes" xml:space="preserve">
          <source>These methods get and set CSS-related properties of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1b0bb6f70a2eb3ccb85e1859247cdd66807aa2" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b24afb95d5db312e3e6e541dcda0c7a8cbc8e06" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c704e4ccc42f4db139bb3dcca8c837ee5ce4c92" translate="yes" xml:space="preserve">
          <source>These methods inspect and manipulate the CSS classes assigned to elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af509504d5f4d97c437b425452c5adcf074987f" translate="yes" xml:space="preserve">
          <source>These methods perform the more common types of Ajax requests in less code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152784201cd6ea8db24c609aade9c011ad0e3811" translate="yes" xml:space="preserve">
          <source>These methods register handlers to be called when certain events, such as initialization or completion, take place for any Ajax request on the page. The global events are fired on each Ajax request if the &lt;code&gt;global&lt;/code&gt; property in &lt;a href=&quot;../../jquery.ajaxsetup&quot;&gt;&lt;code&gt;jQuery.ajaxSetup()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;, which it is by default. &lt;em&gt;Note: Global events are never fired for cross-domain script or JSONP requests, regardless of the value of &lt;code&gt;global&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e286a3fadf3605299e908d967349e6755901ddd" translate="yes" xml:space="preserve">
          <source>These properties are associated with the global jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646e8206dbfc5befa834843d4e6c16f08a90de6b" translate="yes" xml:space="preserve">
          <source>They are form elements with &lt;code&gt;type=&quot;hidden&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3a2f20c508cd89d045ae0802bb6d4d4855106f" translate="yes" xml:space="preserve">
          <source>They have a CSS &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e00a420ece6eeb2a7c52a9b7fe06713897dd16" translate="yes" xml:space="preserve">
          <source>This API is &lt;code&gt;deprecated&lt;/code&gt; as of jQuery 1.7 and &lt;code&gt;removed&lt;/code&gt; as of jQuery 1.8; please use &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;deferred.state()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f1d9eeba8b49c650019ed75b666fd267d8086c" translate="yes" xml:space="preserve">
          <source>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (&lt;code&gt;%&lt;/code&gt;) to select every item with an &lt;code&gt;index&lt;/code&gt; value that, when divided by 3, has a remainder of &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51b3db33fc47e6a544f2294c10f27126554ddf1" translate="yes" xml:space="preserve">
          <source>This behavior is expected. &lt;strong&gt;As of jQuery 1.9.0&lt;/strong&gt; (and unless using the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate plugin&lt;/a&gt;), &lt;code&gt;jQuery()&lt;/code&gt; requires the HTML string to start with a &lt;code&gt;&amp;lt;&lt;/code&gt; (i.e text nodes cannot appear at the front of the HTML string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4724d0febf83f4df758178179a0cf1d84270ce5e" translate="yes" xml:space="preserve">
          <source>This can then be used by parts of your application to publish and subscribe to events of interest quite easily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759df6494bc16039dfa401cc721d60dc40be0bc2" translate="yes" xml:space="preserve">
          <source>This causes all of them to be replaced:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9b72538af379ba557b38c88c4d6e1965c43267" translate="yes" xml:space="preserve">
          <source>This chain searches for items with the class &lt;code&gt;foo&lt;/code&gt; within the first list only and turns their backgrounds red. Then &lt;code&gt;end()&lt;/code&gt; returns the object to its state before the call to &lt;code&gt;find()&lt;/code&gt;, so the second &lt;code&gt;find()&lt;/code&gt; looks for '.bar' inside &lt;code&gt;&amp;lt;ul class=&quot;first&quot;&amp;gt;&lt;/code&gt;, not just inside that list's &lt;code&gt;&amp;lt;li class=&quot;foo&quot;&amp;gt;&lt;/code&gt;, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5434cf43bec6b10cb2d62ec811119dfe5ec76fc" translate="yes" xml:space="preserve">
          <source>This code first retrieves the contents of &lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the &lt;a href=&quot;https://developer.mozilla.org/docs/en/DOM/Node.nodeType&quot;&gt;&lt;code&gt;.nodeType&lt;/code&gt; property&lt;/a&gt; of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; elements, and these elements are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d36dce5d277ad627544d533e1ccbe9b3be2c55" translate="yes" xml:space="preserve">
          <source>This code will alter the first list item only, as it contains exactly one &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. Within the filter function, &lt;code&gt;this&lt;/code&gt; refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f659be994ef4d8b978b3f4fb6ebf487ff90758" translate="yes" xml:space="preserve">
          <source>This code will cause the element with an ID of &lt;code&gt;foo&lt;/code&gt; to respond to the &lt;code&gt;click&lt;/code&gt; event. When a user clicks inside this element thereafter, the alert will be shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9779a0bbf174d5713472f1da50aba3ef40e7aa3a" translate="yes" xml:space="preserve">
          <source>This difference in behavior between &lt;code&gt;$( &quot;:text&quot; )&lt;/code&gt; and &lt;code&gt;$( &quot;[type=text]&quot; )&lt;/code&gt;, can be seen below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad2fb9697b7b6107b3b4e5ec78fe97d5dd681be" translate="yes" xml:space="preserve">
          <source>This event behaves the same as the complete event and will be triggered every time an Ajax request finishes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b7a0fb40d5a08c286f9ff0d205c5d4c063ac8a" translate="yes" xml:space="preserve">
          <source>This event is also only called if the request was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4ad8a56d7bcd30bea7ca58205cb27a97657804" translate="yes" xml:space="preserve">
          <source>This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the &lt;code&gt;unload&lt;/code&gt; event with &lt;code&gt;.preventDefault()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bef78d980d6837983d17a683822d89d8fd86d9" translate="yes" xml:space="preserve">
          <source>This event is called regardless of if the request was successful, or not. You will always receive a complete callback, even for synchronous requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5a1a9dcb7987f22cab7aa53e522431522d89c3" translate="yes" xml:space="preserve">
          <source>This event is only called if an error occurred with the request (you can never have both an error and a success callback with a request).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afae7d93c59f37ce631ca4f57c312d014cc82583" translate="yes" xml:space="preserve">
          <source>This event is only called if the request was successful (no errors from the server, no errors with the data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bbba3ab6f8d076f052cc031a6e20283275fed7" translate="yes" xml:space="preserve">
          <source>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683d1abf76fd5c3a88d0f22a26284cfa337c9fee" translate="yes" xml:space="preserve">
          <source>This event is triggered if an Ajax request is started and no other Ajax requests are currently running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac253698b4acfcb5905a2aa79e449ffacacdffda" translate="yes" xml:space="preserve">
          <source>This event method is described in the &lt;a href=&quot;https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped&quot;&gt;W3C DOM Level 3 specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69465beb0b30a5a3694e6ad878fdce06864dca13" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db381105282fc06aa6e1dc99496275fd5171657d" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4d6bfc67551f643882201c85a8addaea0b978f" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusin&quot;&gt;focusin&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f361a07dcfc38de754ec576d34637ea20d8dd245" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusout&quot;&gt;focusout&lt;/a&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b981a320ef7be0421529dedac14943e840100a6a" translate="yes" xml:space="preserve">
          <source>This event, which is triggered before an Ajax request is started, allows you to modify the XMLHttpRequest object (setting additional headers, if need be.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649a216d21a666f54f90151e9ba0e11a69914df4" translate="yes" xml:space="preserve">
          <source>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the &lt;code&gt;this&lt;/code&gt; keyword as a bare DOM element, the element must be passed to the &lt;code&gt;$()&lt;/code&gt; function before applying jQuery methods to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fd0c4dc67ac419ff430abce7fa9695943e63d3" translate="yes" xml:space="preserve">
          <source>This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bb26e5bf5293094a86ba3a3d38220ddafd7b42" translate="yes" xml:space="preserve">
          <source>This example fetches the requested HTML snippet and inserts it on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e966acc2b9894ee5016653b5a8190f3e9cb6a381" translate="yes" xml:space="preserve">
          <source>This example inserts a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; after each paragraph, with each new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing the class name(s) of its preceding paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1031242a2fd44b0cc801511ac728f2d8b61935d3" translate="yes" xml:space="preserve">
          <source>This example removes leading and trailing whitespace from the values of text inputs with a &quot;tags&quot; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebd20fb5abf5bd7afa36f2ff3c0dfa8a59e2351" translate="yes" xml:space="preserve">
          <source>This example removes the class name of the penultimate &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; from the last &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c27e778fa0bccd68397de1040064cb8b4a36924" translate="yes" xml:space="preserve">
          <source>This example sets the widths of the matched elements to incrementally larger values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da29dc6937adf3fba6bebcf394120d5ad06ad979" translate="yes" xml:space="preserve">
          <source>This example will toggle the &lt;code&gt;happy&lt;/code&gt; class for &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; elements if their parent element has a class of &lt;code&gt;bar&lt;/code&gt;; otherwise, it will toggle the &lt;code&gt;sad&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c3c9f7cf4f3c5da5a6ac47e18ae304f904858d" translate="yes" xml:space="preserve">
          <source>This example, of course, relies on the structure of the JSON file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c772a7fd8f0bccb3ffa2b41a260d712d32edc5" translate="yes" xml:space="preserve">
          <source>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad7424a11380e496109bffc09072049878d17ef" translate="yes" xml:space="preserve">
          <source>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c0eb7eb7be94f02195c75311b38633e1e5f915" translate="yes" xml:space="preserve">
          <source>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7aff5a0e4a3efea14d5040037b7f596cdecddc" translate="yes" xml:space="preserve">
          <source>This function behaves just like &lt;code&gt;$( document ).ready()&lt;/code&gt;, in that it should be used to wrap other &lt;code&gt;$()&lt;/code&gt; operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46b4646df466700b53a938d86b6af892cceff75" translate="yes" xml:space="preserve">
          <source>This function can also be overwritten in order to bypass certain edge case issues. The default &lt;code&gt;htmlPrefilter&lt;/code&gt; function in jQuery will greedily ensure that all tags are XHTML-compliant. This includes anything that looks like an HTML tag, but is actually within a string (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4ef947f6f8032dee19f1cbd99e7e0445c77b07" translate="yes" xml:space="preserve">
          <source>This function is used internally to convert form element values into a serialized string representation (See &lt;a href=&quot;serialize&quot;&gt;.serialize()&lt;/a&gt; for more information).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f453c13c3e0328f2dfba47020639f6aaa2044325" translate="yes" xml:space="preserve">
          <source>This global event behaves the same as the local error event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d93efb8c0c02bc751d2f0c9c622fbf4ecc7ac0" translate="yes" xml:space="preserve">
          <source>This global event is also triggered before the request is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655d42a2d71779ddaf2a047b8bc2718ffee0c8b2" translate="yes" xml:space="preserve">
          <source>This global event is triggered if there are no more Ajax requests being processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4d3cd0607d268ab25fdd9533e70fde597ea7b3" translate="yes" xml:space="preserve">
          <source>This indicates that the method doesn't only expect an array as the argument, but also specifies the expected type. The notation is borrowed from Java 5's generics notation (or C++ templates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690aa83531b52434d818b32c2f03950ce6592a66" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82bfa1ac349f897daa07f3e0c0d021d6694748b9" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings. Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be73f0898db1025d1eedc1b55421499324460238" translate="yes" xml:space="preserve">
          <source>This is a shorthand Ajax function, which is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e864657858a9303070a1658a53bf25dbea41192a" translate="yes" xml:space="preserve">
          <source>This is the full list of Ajax events, and in the order in which they are triggered. The indented events are triggered for each and every Ajax request (unless a global option has been set). The ajaxStart and ajaxStop events are events that relate to all Ajax requests together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a40fffbd7637ae6cad737c5a222f44e502a6d4" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:empty&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afd13e46be54f353d75a53266cc19dfc2f2a79e" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:parent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a24b37da84f50293523975f12e3e02b00fdf99" translate="yes" xml:space="preserve">
          <source>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=&quot;word&quot;]), which is more appropriate in many cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9da68639be63e4e887067e82cda70e44e59b905" translate="yes" xml:space="preserve">
          <source>This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08b6ce82deda11c3f60b7deafa153420ae2161b" translate="yes" xml:space="preserve">
          <source>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like &lt;code&gt;jQuery.noop&lt;/code&gt; could execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d812d14581ba0c1674dc38a60217df13c4f84f" translate="yes" xml:space="preserve">
          <source>This is usually the desired sequence before taking an action. If this is not required, the &lt;code&gt;mousedown&lt;/code&gt; or &lt;code&gt;mouseup&lt;/code&gt; event may be more suitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3d57f2d941e7b5d42230477fec9cf8433d9503" translate="yes" xml:space="preserve">
          <source>This method behaves differently from using a normal JavaScript &lt;code&gt;eval()&lt;/code&gt; in that it's executed within the global context (which is important for loading external scripts dynamically).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7055b8d61d1b481dd833dfd2669a99e44ee927e0" translate="yes" xml:space="preserve">
          <source>This method can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, it is typically easier to select the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element itself for serialization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b38d3c48bdcbca3659c53e58607a9cf7dccaf8c" translate="yes" xml:space="preserve">
          <source>This method does not accept any arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb451eae6e159d41053c63c7ab0de01084ab951" translate="yes" xml:space="preserve">
          <source>This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062bd2d7d515033788955331f2b4e1a92f7c2a23" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;blur&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;blur&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346692c9809684c46a877bfaa5170a427dd16e78" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;change&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0650bd2ed2e304aeb035f14a80cc4104b12697c" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;click&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;click&quot; )&lt;/code&gt; in the third. The &lt;code&gt;click&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db2428740ed667f182f8512b88eb604bda1c58a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;contextmenu&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;contextmenu&quot; )&lt;/code&gt; in the third. The &lt;code&gt;contextmenu&lt;/code&gt; event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the &lt;code&gt;html&lt;/code&gt; element or the currently focused element. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e874b85d8b87e616d9b2b3e78468b8b1469b0d74" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;dblclick&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;dblclick&quot; )&lt;/code&gt; in the third. The &lt;code&gt;dblclick&lt;/code&gt; event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13a26a73fa8a32f0b6c96afe45e01dbb8b531da" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;error&quot;, handler )&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55194cb606a3bf92352bb24a102c067fe1a4f76f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focus&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;focus&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78fa95a3c99515fe9ba77f8210bf088d3ad80ab" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusin&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;focusin&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f404e361904d188974da0d867762f2b8f5bbf1a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusout&quot;, handler )&lt;/code&gt; when passed arguments, and &lt;code&gt;.trigger( &quot;focusout&quot; )&lt;/code&gt; when no arguments are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f8feb54d90484574c64e3baf7695ac56d76f6a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keydown&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;keydown&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea90d8a612eae07733cb9a953095aece3559d80" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keypress&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keypress&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4829b0add7a93cf88eb293c411bb411f3ef1e117" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keyup&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keyup&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f33dc4654f9529dd8f001a910b09881e9c49b82" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;load&quot;, handler )&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6a5b08c80b8fd5752389522a110b3d911a2b5b" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousedown&quot;, handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;mousedown&quot; )&lt;/code&gt; in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b00c787b7cc1a27054d6f09f61eb7db1b27df3" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseenter&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseenter&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69e7b7e84c1d679e65f225b8bbcf922a7b63987" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousemove&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mousemove&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b06641034cabafc7c3a89771b3bfb178535b20" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseout&quot;, handler )&lt;/code&gt; in the first two variation, and &lt;code&gt;.trigger( &quot;mouseout&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c031239c05a4d2d7c8f7763e0c4dce22389771b5" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseover&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseover&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6154672016dd082ac86d67cedc849e56ba90b30" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;scroll&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;scroll&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e74519010db55b24d2b383da7d044d1a8289229" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;select&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;select&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d345de59a7eaf1933e66da1db69440e5868a3db" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;submit&quot;, handler )&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;submit&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb9dc7288639e70f49bacd03cacbfa56ac32283" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;unload&quot;, handler )&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ff3678157c22780a9cfc21b02b92dddc40ff36" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseleave', handler)&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger('mouseleave')&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26ac53ee675f9addb362831a5d3f4fa59caa27a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseup', handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger('mouseup')&lt;/code&gt; in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c808514b87bd343496959e8c779b341d866fc82f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('resize', handler)&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;resize&quot; )&lt;/code&gt; in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bb24f782fa2a4858de19ce93437e137aa3340c" translate="yes" xml:space="preserve">
          <source>This method is also able to find the height of the window and document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2607253a7033781c403606df4eebe156180a466" translate="yes" xml:space="preserve">
          <source>This method is also able to find the width of the window and document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec9291828724747376d950545c6d540d08e366c" translate="yes" xml:space="preserve">
          <source>This method is fired when an error is thrown synchronously in a function wrapped in &lt;code&gt;jQuery()&lt;/code&gt; or &lt;code&gt;jQuery( document ).ready()&lt;/code&gt;, or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to &lt;code&gt;window.onerror&lt;/code&gt; instead of being swallowed. Overwrite this method if you want to handle such errors differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0161551cba801aedb18b05604b3021306dc4d081" translate="yes" xml:space="preserve">
          <source>This method is meant for plugin developers who are creating new animation methods. Letting &lt;code&gt;$.speed()&lt;/code&gt; do all the parameter hockey and normalization for you, rather than duplicating the logic yourself, makes your work simpler. An example of use can be found in the animated form of &lt;code&gt;.addClass()&lt;/code&gt; of jQuery UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be28d98cd2c7a67e6865551fa4b367a0630987b0" translate="yes" xml:space="preserve">
          <source>This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from &lt;code&gt;jQuery.proxy()&lt;/code&gt; it will still unbind the correct function if passed the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792159b794709664077d97cb3536c3cd14904a0d" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef15703808f5f2d053665850bfca24d04d1a2e24" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerHeight()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829556cbe373a45b949053668c7a8cfa83ebe1b2" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba117f4e1229732c120748b2aca40b446fd60fb4" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerWidth()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b303eebf0f43b27153ed68f23c0854debc8a5aa7" translate="yes" xml:space="preserve">
          <source>This method is not available on XML documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02843289c06dc2a11b69cb325ed07cd3b9ece06f" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.addClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a5be0658971b62f855cbbcb5c4bc8dcf2d8b61" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.removeClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33c880bf752394d0bef47af6df6b9420072d808" translate="yes" xml:space="preserve">
          <source>This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6158f3be944f5323b063daabea46f186e081a8f5" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;parents&quot;&gt;&lt;code&gt;.parents()&lt;/code&gt;&lt;/a&gt;, except &lt;code&gt;.parent()&lt;/code&gt; only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f212f682efcc36782acb359a7b6a9498a049d716" translate="yes" xml:space="preserve">
          <source>This method is the simplest way to fetch data from the server. It is roughly equivalent to &lt;code&gt;$.get(url, data, success)&lt;/code&gt; except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when &lt;code&gt;textStatus&lt;/code&gt; is &quot;success&quot; or &quot;notmodified&quot;), &lt;code&gt;.load()&lt;/code&gt; sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a293e72757673a33b710d1c8020b662670351f" translate="yes" xml:space="preserve">
          <source>This method is typically used to set the values of form fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b041aaa9a6860bdfc4ee2d9736df50aacf1367d7" translate="yes" xml:space="preserve">
          <source>This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244806d817f0a7d369a67cd7d7c93c5a39756ca3" translate="yes" xml:space="preserve">
          <source>This method provides a means to attach delegated event handlers to the &lt;code&gt;document&lt;/code&gt; element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt; method for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd2a5591a30ca6ff308b7643859a6536be39441" translate="yes" xml:space="preserve">
          <source>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing &lt;a href=&quot;category/manipulation&quot;&gt;jQuery manipulation methods&lt;/a&gt;. For instance, to remove all &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; tags from incoming HTML strings, do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bd8de971947848a1bbc3dd30bdfc905828a2cc" translate="yes" xml:space="preserve">
          <source>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6511822632c27fce0c859034fc93723aeb40d5" translate="yes" xml:space="preserve">
          <source>This method returns the Callbacks object onto which it is attached (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db22403d5e9f887b88f057e719d07941784e3daa" translate="yes" xml:space="preserve">
          <source>This method returns the height of the element, including top and bottom padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46751de65f82b868a8d805a118d0472c10ab2eb4" translate="yes" xml:space="preserve">
          <source>This method returns the width of the element, including left and right padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346db25be5af8ef6c0901a77a68e78712521680d" translate="yes" xml:space="preserve">
          <source>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply &lt;code&gt;.toggleClass()&lt;/code&gt; to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715fb2b06c008009d1fe416597cf8a202325a3d1" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all &lt;code&gt;href&lt;/code&gt; properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate &lt;a href=&quot;https://code.google.com/p/html5shiv/&quot;&gt;compatibility layer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150d540b15cca9563d10ff4107f8ef56ab70336e" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e0fd7b6508a3fd582b43249cfe77d08ec202a6" translate="yes" xml:space="preserve">
          <source>This method works for custom events triggered with &lt;a href=&quot;trigger&quot;&gt;trigger()&lt;/a&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d7b57e32048f9435bc9def6a654077e7bbd4e6" translate="yes" xml:space="preserve">
          <source>This object provides a subset of the methods of the &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred&lt;/a&gt; object (&lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;then&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.done&quot;&gt;&lt;code&gt;done&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.fail&quot;&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.always&quot;&gt;&lt;code&gt;always&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.pipe&quot;&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.progress&quot;&gt;&lt;code&gt;progress&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;state&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;deferred.promise&quot;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;) to prevent users from changing the state of the Deferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b34e7f3b9e24382935439639824b6cd3a1daafd" translate="yes" xml:space="preserve">
          <source>This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (&lt;code&gt;$.ajaxSettings&lt;/code&gt; merged with the settings passed to &lt;code&gt;$.ajax&lt;/code&gt;). For example, specifying a DOM element as the context will make that the context for the &lt;code&gt;complete&lt;/code&gt; callback of a request, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cbfc92f8ea1f8d27355869ff32de50ce680892" translate="yes" xml:space="preserve">
          <source>This page documents data types appearing in jQuery function signatures, whether defined by JavaScript itself or further restricted by jQuery. Unless explicitly stated otherwise, jQuery functions require primitive values where applicable, and do not accept their Object-wrapped forms. If you want to study these concepts in depth, take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56203e63040b71fce3654bce970b8a4d69bf07fb" translate="yes" xml:space="preserve">
          <source>This produces the following data structure (provided that the browser supports &lt;code&gt;console.log&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2441e4626bbaa933d91f94581ef965a8c98747" translate="yes" xml:space="preserve">
          <source>This produces two messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3c947e063813842196c7d7043a6f71bdfe405d" translate="yes" xml:space="preserve">
          <source>This property can be useful for getting previous return values of custom events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6af58b84f3fd5422adf8be75663d1cdcaec458" translate="yes" xml:space="preserve">
          <source>This property can be useful for profiling event performance by getting the &lt;code&gt;event.timeStamp&lt;/code&gt; value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use &lt;code&gt;(new Date).getTime()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32854e587e24ee920ce451c5ed1f67d727e051d7" translate="yes" xml:space="preserve">
          <source>This property is available immediately. It is therefore safe to use it to determine whether or not to call &lt;code&gt;$(document).ready()&lt;/code&gt;. The &lt;code&gt;$.browser&lt;/code&gt; property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb47618e4f09b9437b6d3e0140b679d5c2ebfe6" translate="yes" xml:space="preserve">
          <source>This property is deprecated as of version 3.0, and has no effect in browsers that support the &lt;a href=&quot;https://caniuse.com/#feat=requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b9c04a0a37a88e51468f13a1b96e7dc499d1cf" translate="yes" xml:space="preserve">
          <source>This property is most often useful in delegated events attached by &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;, where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5242b856f2e8af25d2fe18fd4c6247bb987e210a" translate="yes" xml:space="preserve">
          <source>This property was introduced in &lt;a href=&quot;https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped&quot;&gt;DOM level 3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5624080d6e56e0b5af625d523f2fcfcdbbad692f" translate="yes" xml:space="preserve">
          <source>This property will typically be equal to the &lt;code&gt;this&lt;/code&gt; of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de398b115e8ac4d3b07baf9ed497787bdfbc62f" translate="yes" xml:space="preserve">
          <source>This results in the DOM structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3c511251892c96fdc482ea356fa92b79ae9eba" translate="yes" xml:space="preserve">
          <source>This results in the structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f4d3fdf074258f85fde4229aa90949580dc628" translate="yes" xml:space="preserve">
          <source>This results in two alerts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2238853884687136f37826653802e89b4ec755" translate="yes" xml:space="preserve">
          <source>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542c4fe2ce4fad40e426004d25711efcc3fa66b4" translate="yes" xml:space="preserve">
          <source>This selector is equivalent to &lt;code&gt;:not([attr='value'])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db2a826908ba8d7cc8b0f271e54dfa57adba710" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;hidden-selector&quot;&gt;&lt;code&gt;:hidden&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:visible&lt;/code&gt; isn't selected by &lt;code&gt;:hidden&lt;/code&gt; and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e74fa4479166ae1158a0c6329853a1894417dc8" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;visible-selector&quot;&gt;&lt;code&gt;:visible&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:hidden&lt;/code&gt; isn't selected by &lt;code&gt;:visible&lt;/code&gt; and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a2d5e9b02d76f676ebf7a40f5475bdf5d72525" translate="yes" xml:space="preserve">
          <source>This selector matches the test string against each word in the attribute value, where a &quot;word&quot; is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aacd81dd9108d85703a0183ce334c9f00b22a92" translate="yes" xml:space="preserve">
          <source>This selector was introduced into the CSS specification to handle language attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157e09ed59bcd27e64a54f0808685dfbd88c2ba5" translate="yes" xml:space="preserve">
          <source>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3f15321a53dc582b1d5e1967292d0bc3fdf9eb" translate="yes" xml:space="preserve">
          <source>This signature does not accept any arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e54623d8fe421971d23883eb405d33fe0f0049" translate="yes" xml:space="preserve">
          <source>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641e0b0e743e0f9db8cc5b5032d87f59f062fa73" translate="yes" xml:space="preserve">
          <source>This technique is especially effective in conjunction with the &lt;code&gt;.ready()&lt;/code&gt; method's ability to alias the jQuery object, as within callback passed to &lt;code&gt;.ready()&lt;/code&gt; you can use &lt;code&gt;$&lt;/code&gt; if you wish without fear of conflicts later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9920d4ff0249fafafc91db9d9e4e8c4396132d" translate="yes" xml:space="preserve">
          <source>This time list item 4 is turned red, since it is two from the end of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb54eb060df63805863b2cc09662a50e679af5ab" translate="yes" xml:space="preserve">
          <source>This time only list item 4 is turned red, since it is the only item in the range between two from the end (&lt;code&gt;-2&lt;/code&gt;) and one from the end (&lt;code&gt;-1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1b0702c2347c741838ffed942588981600a704" translate="yes" xml:space="preserve">
          <source>This time the variable is not referred to directly within the handlers; instead, the variable is passed in &lt;em&gt;by value&lt;/em&gt; through &lt;code&gt;eventData&lt;/code&gt;, which fixes the value at the time the event is bound. The first handler will now display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e92c4d32c144b41a463b2a72bc99e0d9ed77bf" translate="yes" xml:space="preserve">
          <source>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e99a4c6ae445c81aefa522c507c0b74a3289ec" translate="yes" xml:space="preserve">
          <source>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8f494293589fde5d66a9f0fd3de5d8ce4c6042" translate="yes" xml:space="preserve">
          <source>This will cause each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to have a class corresponding to the text it wraps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9118b4fa1f3e8e18281acd7053ecc4ebd98b4f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item A. The &lt;code&gt;.closest()&lt;/code&gt; method begins its search &lt;em&gt;with the element itself&lt;/em&gt; before progressing up the DOM tree, and stops when item A matches the selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e650ca3a960ce5e1c69a20a7735fd10a84f51f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item II, which is positioned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6445328f9b2e260ef2fd3767cecdd73168ad2247" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, because it is both the first &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, however, because it is not a descendant of list item II.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30761f176591a578865ba51b9704b1d8e4292dab" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, since it is the first encountered when traveling up the DOM tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da12335e31823528963ade8757b1f95116d49939" translate="yes" xml:space="preserve">
          <source>This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a466e8090dcdd96843ee2332573bed8a724b31" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element deleted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3089e0a92b12a862e14834e3811b822b252ec9" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;Hello&lt;/code&gt; text deleted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f51918357cfd5fb539009a6a575f4d17e914b38" translate="yes" xml:space="preserve">
          <source>This will return a jQuery collection which contains only the list elements that are descendants of item II.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a785e36f45f4fa401ad8eec7085865affc99528" translate="yes" xml:space="preserve">
          <source>This would ensure not only that the request is considered &quot;script&quot; but also that all the prefilters specifically attached to the script dataType would be applied to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165aa8fc44c4ce9053215d0b3f1cce72febf22cb" translate="yes" xml:space="preserve">
          <source>This would make a checkbox with name &quot;emailrules&quot; required only if the user entered an email address in the email field, selected via its id, filtered via a custom selector &quot;:filled&quot; that the validation plugin provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eeeb75b1478adca8e3dd409784eaad5e7ebb68" translate="yes" xml:space="preserve">
          <source>This would produce:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f27f8de98384e7a24ee350812b97f396f6bee4" translate="yes" xml:space="preserve">
          <source>This would result in the same DOM structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58baabe21ab01d691d64e9475e33f36ed9e069d3" translate="yes" xml:space="preserve">
          <source>Those properties are all documented, and accompanied by examples, on the &lt;a href=&quot;category/events/event-object&quot;&gt;Event object&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5378beb7bead698442b7125ac4a3040e6356baa7" translate="yes" xml:space="preserve">
          <source>Tie a one-time click to each div.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7d7a6fa56a41cd21f370adf9a86dbeb8e90fc5" translate="yes" xml:space="preserve">
          <source>To access a jQuery object instead of the regular DOM element, use &lt;code&gt;$( this )&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff62a5e64e88e9315771fff26382b54aad3738a6" translate="yes" xml:space="preserve">
          <source>To access event properties not listed above, use the &lt;code&gt;event.originalEvent&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9baa8489b9460d55a6b81a71e1e5043c1c31b0c" translate="yes" xml:space="preserve">
          <source>To add a special style to list items that are being hovered over, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5586cbfe258488d82d06183228e5bfa3a4aef3ca" translate="yes" xml:space="preserve">
          <source>To add a special style to table cells that are being hovered over, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bef93e03999aa535196f90c6420510e9a78de7" translate="yes" xml:space="preserve">
          <source>To add a validity test to all text input elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6158d515c8bec7a6e2a3ca7a89c86f2eeb7a4bfb" translate="yes" xml:space="preserve">
          <source>To animate any element, such as a simple image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e98d9c7ba0a6aaa06b5a9b169226fcfdbccffa" translate="yes" xml:space="preserve">
          <source>To animate the opacity, left offset, and height of the image simultaneously:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870ddba9fa1574c5d3ba29b5bd8b54396a997347" translate="yes" xml:space="preserve">
          <source>To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87859dde61830e287cb34b8c09158618c58b7d4" translate="yes" xml:space="preserve">
          <source>To bind a &quot;Hello World!&quot; alert box to the dblclick event on every paragraph on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4886d24e08e102255ad5c707ff9534eac54b30f7" translate="yes" xml:space="preserve">
          <source>To cancel a default action and prevent it from bubbling up, return false:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d1ceb83703896d875e43a7a47cb7bc94938b78" translate="yes" xml:space="preserve">
          <source>To cancel only the default action by using the preventDefault method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b801f53e61f286d48b39f2032dbc04f7dfd2b4ac" translate="yes" xml:space="preserve">
          <source>To change the &lt;code&gt;alt&lt;/code&gt; attribute and add the &lt;code&gt;title&lt;/code&gt; attribute at the same time, pass both sets of names and values into the method at once using a plain JavaScript object. Each key-value pair in the object adds or modifies an attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124e871b6b5ddff1deb550201b39dd84fa906a88" translate="yes" xml:space="preserve">
          <source>To change the &lt;code&gt;alt&lt;/code&gt; attribute, simply pass the name of the attribute and its new value to the &lt;code&gt;.attr()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a5d1c630b8ca8eefd4508b04962987185adc54" translate="yes" xml:space="preserve">
          <source>To convert from a supported type (e.g &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;) to a custom data type and back again, use another pass-through converter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04eb2319064561b3e6ecb71055e3f49234d4c841" translate="yes" xml:space="preserve">
          <source>To create a Date object for an alternative date and time, pass numeric arguments in the following order: year, month, day, hour, minute, second, millisecond &amp;mdash; although note that the month is zero-based, whereas the other arguments are one-based. The following creates a Date object representing January 1st, 2014, at 8:15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a1671c9b286e26128c92cd57d0e764c86f7443" translate="yes" xml:space="preserve">
          <source>To define a complete css hook, combine the support test with a filled-out version of the skeleton template provided in the first example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d451547c99946ff6380544df148c396d035164" translate="yes" xml:space="preserve">
          <source>To delay the ready event, first call &lt;code&gt;$.holdReady( true )&lt;/code&gt;. When the ready event should be released to execute, call &lt;code&gt;$.holdReady( false )&lt;/code&gt;. Note that multiple holds can be put on the ready event, one for each &lt;code&gt;$.holdReady( true )&lt;/code&gt; call. The ready event will not actually fire until all holds have been released with a corresponding number of &lt;code&gt;$.holdReady( false )&lt;/code&gt; calls &lt;em&gt;and&lt;/em&gt; the normal document ready conditions are met. (See &lt;a href=&quot;ready&quot;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt; for more information.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd5ec4f4419285015a9199dd95b700c112debb1" translate="yes" xml:space="preserve">
          <source>To demonstrate the component-creation capabilities of &lt;code&gt;$.Callbacks()&lt;/code&gt;, it's possible to implement a Pub/Sub system using only callback lists. Using &lt;code&gt;$.Callbacks&lt;/code&gt; as a topics queue, a system for publishing and subscribing to topics can be implemented as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696dd277cb472f0b3644c84d4fc8d2e417651232" translate="yes" xml:space="preserve">
          <source>To determine which character was entered, examine the &lt;code&gt;event&lt;/code&gt; object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the &lt;code&gt;.which&lt;/code&gt; property so you can reliably use it to retrieve the character code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c0e1ee27c310b4f873665404cde2f741ada3e3" translate="yes" xml:space="preserve">
          <source>To determine which key was pressed, examine the &lt;a href=&quot;category/events/event-object&quot;&gt;event object&lt;/a&gt; that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the &lt;code&gt;.which&lt;/code&gt; property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, &lt;code&gt;.keypress()&lt;/code&gt; may be a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c26bce51fe356d38175b244bd379eadf79d5db" translate="yes" xml:space="preserve">
          <source>To determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the &lt;code&gt;.which&lt;/code&gt; property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, &lt;code&gt;.keypress()&lt;/code&gt; may be a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d90b4b6d8e899fb717f6f4c44a7ead300acf1e" translate="yes" xml:space="preserve">
          <source>To display an alert when a page is unloaded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d16ea1ba067795722306f398384fd29ed663994" translate="yes" xml:space="preserve">
          <source>To display each paragraph's text in an alert box whenever it is clicked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca3fff73c10eb45183570629eca52a512e24a93" translate="yes" xml:space="preserve">
          <source>To display the text of all paragraphs in an alert box the first time each of them is clicked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be12975d910380cad14650ec5d819299a7c1a05a" translate="yes" xml:space="preserve">
          <source>To do something when text in input boxes is selected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b40bd6320c2f4163400a98285b78d42ebe8c5a" translate="yes" xml:space="preserve">
          <source>To do something when your page is scrolled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde47d903a5375cefdb998d948214894b9f3c8c8" translate="yes" xml:space="preserve">
          <source>To emulate the behavior of &lt;code&gt;$.param()&lt;/code&gt; prior to jQuery 1.4, we can set the &lt;code&gt;traditional&lt;/code&gt; argument to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b889d0033aeff751c56d35c49ee15616852a0" translate="yes" xml:space="preserve">
          <source>To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75fc39daf515e8a24a76bbf0b9d454bc631b397" translate="yes" xml:space="preserve">
          <source>To focus on a login input box with id 'login' on page startup, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6e991523bbe3881b2ad4cfa49bfbf69cd76438" translate="yes" xml:space="preserve">
          <source>To get a comma-separated list of checkbox &lt;code&gt;ID&lt;/code&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fe94fe335dd7c68f769ffc3e51a71d91be961f" translate="yes" xml:space="preserve">
          <source>To keep the examples short, the invert (&quot;not&quot;) operator and double-negation are used to show a boolean context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d224c0627c0a71621179323dc71cea5e11305d" translate="yes" xml:space="preserve">
          <source>To observe this method in action, set up a basic Ajax load request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8004ff400782d5635183d44e5a2162352d2239a6" translate="yes" xml:space="preserve">
          <source>To observe this method in action, set up a basic Ajax load request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bf20e687453364eb63fa7b3a5e15401982e20c" translate="yes" xml:space="preserve">
          <source>To obtain the parents or ancestors of an existing jQuery set, see the &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;parents&quot;&gt;.parents()&lt;/a&gt;&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b738bc7d7f71b2b038a9e4ebf3f0196344cf0679" translate="yes" xml:space="preserve">
          <source>To pass arbitrary data through an event object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c26650a79e78750538e990ab4f141406f8bfd4c" translate="yes" xml:space="preserve">
          <source>To pass arbitrary data to an event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec75f07465044a217f535c66775e30418ac596cf" translate="yes" xml:space="preserve">
          <source>To prevent this and instead create a copy of the element, you could write the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623848a04c29e00d9829a13b07b187171d3b62fb" translate="yes" xml:space="preserve">
          <source>To remove events attached with &lt;code&gt;delegate()&lt;/code&gt;, see the &lt;a href=&quot;undelegate&quot;&gt;.undelegate()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab84476fe9737291d9eb80f09633f2272dcdb14e" translate="yes" xml:space="preserve">
          <source>To remove specific delegated event handlers, provide a &lt;code&gt;selector&lt;/code&gt; argument. The selector string must exactly match the one passed to &lt;code&gt;.on()&lt;/code&gt; when the event handler was attached. To remove all delegated events from an element without removing non-delegated events, use the special value &lt;code&gt;&quot;**&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007204969a533709524895b8a34a0d2de877514e" translate="yes" xml:space="preserve">
          <source>To replace all existing classes with another class, we can use &lt;code&gt;.attr( &quot;class&quot;, &quot;newClass&quot; )&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e610a0c44903b38749fa3b30961c7e7e89b2121e" translate="yes" xml:space="preserve">
          <source>To replace all the missing images with another, you can update the &lt;code&gt;src&lt;/code&gt; attribute inside the callback passed to &lt;code&gt;.error()&lt;/code&gt;. Be sure that the replacement image exists; otherwise the &lt;code&gt;error&lt;/code&gt; event will be triggered indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684d8984845f32ef75f367540381584495a4c1c5" translate="yes" xml:space="preserve">
          <source>To retrieve only the selected options of &lt;code&gt;select&lt;/code&gt; elements, use the &lt;a href=&quot;selected-selector&quot;&gt;&lt;code&gt;:selected&lt;/code&gt;&lt;/a&gt; selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e827276d04f451ece5a26d021372f744e21b9196" translate="yes" xml:space="preserve">
          <source>To retrieve the value's attribute as a string without any attempt to convert it, use the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;attr()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eae2d127a51d7ffd1ca7f66e6218e458a057ea" translate="yes" xml:space="preserve">
          <source>To see the window width while (or after) it is resized, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2756ef09b34a66495762c1e289aac18eedf673" translate="yes" xml:space="preserve">
          <source>To select &lt;em&gt;all&lt;/em&gt; preceding sibling elements, rather than just the preceding &lt;em&gt;adjacent&lt;/em&gt; sibling, use the &lt;a href=&quot;prevall&quot;&gt;.prevAll()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac117f86da9078f25c240d61af117f20d6757558" translate="yes" xml:space="preserve">
          <source>To select a set of associated radio buttons, you might use: &lt;code&gt;$( &quot;input[name=gender]:radio&quot; )&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba973cd23741a5461a132e8174808803f1dd0312" translate="yes" xml:space="preserve">
          <source>To select the element that comes immediately before item three:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa79ae8c09c3ca8d765a890112568eaf15ee91d" translate="yes" xml:space="preserve">
          <source>To set the content of a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, which does not contain HTML, use the &lt;a href=&quot;text&quot;&gt;&lt;code&gt;.text()&lt;/code&gt;&lt;/a&gt; method and not &lt;code&gt;.html()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b762bd84558616700e82a91f3562ab4b7867dde" translate="yes" xml:space="preserve">
          <source>To set the height of each div on click to 30px plus a color change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f5ecdc78647ed732622c9cc7c0d4fafe9366f6" translate="yes" xml:space="preserve">
          <source>To show a &quot;Hello World!&quot; alert box when the contextmenu event is triggered on a paragraph on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e4c4e9d63773a49dba48649bcf41e401e706fe" translate="yes" xml:space="preserve">
          <source>To stop people from writing in text input boxes, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54f82c218bee1398bfcb282cfb0d4252f90ca9f" translate="yes" xml:space="preserve">
          <source>To submit the first form without using the submit() function, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58aab69788ed3d0225f03fb4a910625eb3fe0aa4" translate="yes" xml:space="preserve">
          <source>To trigger handlers bound via jQuery without also triggering the native event, use &lt;a href=&quot;triggerhandler&quot;&gt;&lt;code&gt;.triggerHandler()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179e10b9814eed01b8247fe20213e9225a017c9c" translate="yes" xml:space="preserve">
          <source>To trigger the blur event on all paragraphs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3438bca3bf92f5ba3a58ba700faaa492aa226927" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, apply &lt;code&gt;.keydown()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af1b0737a0248b81612c18adf7b6aebd9566578" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, apply &lt;code&gt;.keypress()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effe41aacce7b3fc35cfe286ec997e67e6e1439b" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, apply &lt;code&gt;.keyup()&lt;/code&gt; without arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76ab7c19c74dbfb9b3de5a3df64dd3a86c041f9" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, apply &lt;code&gt;.mousemove()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0525d6fed0c553f9c06240ea37566089162eca6" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, apply &lt;code&gt;.scroll()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fbf4e00bd9045cc3ddc2dfc5b2310bf0426974" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, call &lt;code&gt;.contextmenu()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8c9240be7d4e9b6d4fa97d07a55ae234f03e9c" translate="yes" xml:space="preserve">
          <source>To trigger the event manually, call &lt;code&gt;.dblclick()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e019d2d95095cf8ee27a11c85957675819c534" translate="yes" xml:space="preserve">
          <source>To trigger the event programmatically, apply &lt;code&gt;.blur()&lt;/code&gt; without an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de393add9b53cf419ca7e13728d22d2253420695" translate="yes" xml:space="preserve">
          <source>To trigger the select event on all input elements, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506c5bff6ece56afc69742d58eee9907d35a3afc" translate="yes" xml:space="preserve">
          <source>To trigger the submit event on the first form on the page, try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2477436aba7ff1d3030b47428758103988f822a5" translate="yes" xml:space="preserve">
          <source>To unbind all click events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9654c89f87971ab5b053781525cc6d0e7141fb97" translate="yes" xml:space="preserve">
          <source>To unbind all delegated click events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb81588b243fd25eb926b96fb7bdfed439fe40f" translate="yes" xml:space="preserve">
          <source>To unbind all delegated events by their namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18736db49569d919cc939ecba4da876f9e3b49a" translate="yes" xml:space="preserve">
          <source>To unbind all delegated events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76558080369ec1b5ab347cfd628ddb74cea25b96" translate="yes" xml:space="preserve">
          <source>To unbind all events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21c7ade5521979699d6e412ec054a6d67277523" translate="yes" xml:space="preserve">
          <source>To unbind all live click events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532f519176b052034cc4e745c9d1fdab0d0cbe06" translate="yes" xml:space="preserve">
          <source>To unbind all live events from all paragraphs, write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4555058896eb747251f4e1dbd716736c708142" translate="yes" xml:space="preserve">
          <source>To unbind just one previously bound handler, pass the function in as the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8686b21527672ad5c0b602062abc575ce9815051" translate="yes" xml:space="preserve">
          <source>To unbind the above example use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6568eea494ab6014da5699f35454b138092f8b3" translate="yes" xml:space="preserve">
          <source>To undelegate just one previously bound handler, pass the function in as the third argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd067801d956080a5db233dc907bdd6bd9b878ef" translate="yes" xml:space="preserve">
          <source>To use any of the meta-characters ( such as &lt;code&gt; !&quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@[\]^`{|}~&lt;/code&gt; ) as a literal part of a name, it must be escaped with with two backslashes: &lt;code&gt;\\&lt;/code&gt;. For example, an element with &lt;code&gt;id=&quot;foo.bar&quot;&lt;/code&gt;, can use the selector &lt;code&gt;$(&quot;#foo\\.bar&quot;)&lt;/code&gt;. The W3C CSS specification contains the &lt;a href=&quot;https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier&quot;&gt;complete set of rules regarding valid CSS selectors&lt;/a&gt;. Also useful is the blog entry by Mathias Bynens on &lt;a href=&quot;https://mathiasbynens.be/notes/css-escapes&quot;&gt;CSS character escape sequences for identifiers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00559ba86a30e9f78c299ed1e9279631b5b0d54" translate="yes" xml:space="preserve">
          <source>Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fe02b9669afd372c57c437e70116f8a99ca994" translate="yes" xml:space="preserve">
          <source>Toggle animation on and off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586280f480d780e973ce2ca6c36c73f1806d9a95" translate="yes" xml:space="preserve">
          <source>Toggle the class 'highlight' when a paragraph is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba553b74e6bfa6e1b4d354a8a87f067287ad7925" translate="yes" xml:space="preserve">
          <source>Toggle the class name(s) indicated on the buttons for each div.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44da5f6c9286c63674db857b6cb1e9bf2c3edfad" translate="yes" xml:space="preserve">
          <source>Toggles all paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cea112b3370b0016297ac399ee8f894bba8ab27" translate="yes" xml:space="preserve">
          <source>Toggling Animations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a7b9c17bf04b73afb2c2331435d05d93950ed1" translate="yes" xml:space="preserve">
          <source>Translate all items in an array or object to new array of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2e4da4425c9e844c0dcfad68ce5bc5a56b247a" translate="yes" xml:space="preserve">
          <source>Transports factories are registered using &lt;code&gt;$.ajaxTransport()&lt;/code&gt;. A typical registration looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9082604e651a26900ac25d56c55915c87cb5f6d" translate="yes" xml:space="preserve">
          <source>Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556c3d94a55aed111b5267e1e1bad7521290fcdd" translate="yes" xml:space="preserve">
          <source>Travels up the DOM tree until it finds a match for the supplied selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ffd6275eb7e6db7a5aa37c560db9fe2b0e7ed8" translate="yes" xml:space="preserve">
          <source>Traversing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c4b2d390e65ace5514a0ec36315fe7e70b06e8" translate="yes" xml:space="preserve">
          <source>Trigger the click event on all of the paragraphs on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d7bbee8eb2354f7a73d65d10b481f0e5741888" translate="yes" xml:space="preserve">
          <source>Trigger the handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948f90ebf75136ce734ee5b1fc1037e8f7b2e138" translate="yes" xml:space="preserve">
          <source>Turn a collection of HTMLElements into an Array of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a112246f0b06808cd185d95056cc0f90f6ecdee" translate="yes" xml:space="preserve">
          <source>Turn a jQuery object into an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d8c55bbd933894313871e1f1a196a9a18ab4cd" translate="yes" xml:space="preserve">
          <source>Turn the div with index 2 blue by adding an appropriate class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780b7f3df1d8abacbea5fba704e581c1f6648f9c" translate="yes" xml:space="preserve">
          <source>Turns divs yellow based on a random slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d327825d7266e159173ac875c45a7e80c660655f" translate="yes" xml:space="preserve">
          <source>Two specific methods were being used above: &lt;code&gt;.add()&lt;/code&gt; and &lt;code&gt;.fire()&lt;/code&gt;. The &lt;code&gt;.add()&lt;/code&gt; method supports adding new callbacks to the callback list, while the &lt;code&gt;.fire()&lt;/code&gt; method executes the added functions and provides a way to pass arguments to be processed by the callbacks in the same list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90c42522a375c7e1f28545ea428cefa3a9748a0" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;../types#Element&quot;&gt;Element&lt;/a&gt; or &lt;a href=&quot;../types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76f45c245feff50514113a069a72b2ba264d286" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;../types#Selector&quot;&gt;Selector&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2b12d4c717f9482d668a9cee61805a5e419c99" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Anything&quot;&gt;Anything&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa363c7f6d0183673d8e7531aaf775eaab559997" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Array&quot;&gt;Array&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c33a79ec115d6183c8226ae4e4ae596d38047c4" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Array&quot;&gt;Array&lt;/a&gt; or &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ac54524ef25ec62f18c3c267c468e9a58c3356" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Array&quot;&gt;Array&lt;/a&gt; or &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; or &lt;a href=&quot;types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307c29a1eb7b06b8838d2b5399bb8ac4645ced5b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Array&quot;&gt;Array&lt;/a&gt; or &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33225ebe56f9a67cda9377ccbbd9ba4e87bce7f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#ArrayLikeObject&quot;&gt;ArrayLikeObject&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227ca912431141d538de822f1dd2bde74b2d6153" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Boolean&quot;&gt;Boolean&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f29189df3e369fb0e04a451ac2e9f00e4d6245" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Boolean&quot;&gt;Boolean&lt;/a&gt; or &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0734c2e1939052b77e29518be93f847cb0a42e22" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Deferred&quot;&gt;Deferred&lt;/a&gt; or &lt;a href=&quot;types#Promise&quot;&gt;Promise&lt;/a&gt; or &lt;a href=&quot;types#Thenable&quot;&gt;Thenable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23fe46ee3ce467013dce92bb9e9b02f9ae3ebe8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdb1e323fc8c5b384037e6ec9a551abe7a74d4e" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; or &lt;a href=&quot;types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1065c6ddcbaaf49d068527143121849ee4451a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Error&quot;&gt;Error&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6615660cda4beb81302fbbb6123765c1a78c3526" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ede5b6f4ad3e5fae25d1dc1ce8f6d8831bf115" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Anything&quot;&gt;Anything&lt;/a&gt; data, &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; textStatus, &lt;a href=&quot;types#jqXHR&quot;&gt;jqXHR&lt;/a&gt; jqXHR )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b24c72ae1efe14c8bd8d5b5b4c695a118c6c100" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Deferred&quot;&gt;Deferred&lt;/a&gt; deferred )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa6f722e8a72f2b56cbe106713dc09ebc84f578" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt; event, &lt;a href=&quot;types#jqXHR&quot;&gt;jqXHR&lt;/a&gt; jqXHR, &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; ajaxOptions )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168430cbaba1722f134d1cab12c9d67385350d90" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt; event, &lt;a href=&quot;types#jqXHR&quot;&gt;jqXHR&lt;/a&gt; jqXHR, &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; ajaxOptions, &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; data )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2876cc1821a1d8b7f978a8b51e03843c7ee3510b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt; event, &lt;a href=&quot;types#jqXHR&quot;&gt;jqXHR&lt;/a&gt; jqXHR, &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; ajaxSettings, &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; thrownError )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f24c9c3972b4ecf684e54d709eee79f58633c8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt; eventObject )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b277cc5c74af5fcc236b5dc87acbecfa69d26704" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Event&quot;&gt;Event&lt;/a&gt; eventObject [, &lt;a href=&quot;types#Anything&quot;&gt;Anything&lt;/a&gt; extraParameter ] [, ... ] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a7ab6c572578e4c53b80a2838172dc356aeb35" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt; next() )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ae959cb37af811895c652eec33706fe5c2a0f1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; elementOfArray, &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; html ) =&amp;gt; &lt;a href=&quot;types#htmlString&quot;&gt;htmlString&lt;/a&gt; or &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; or &lt;a href=&quot;types#Text&quot;&gt;Text&lt;/a&gt; or &lt;a href=&quot;types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df359828598b38b0dc4d1619ebe23d863f412a38" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81de626c8557442b0a412253cc3104e4b32c477f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf979d2b2c7185830b5b98daaaf7917d46e25e57" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index ) =&amp;gt; &lt;a href=&quot;types#htmlString&quot;&gt;htmlString&lt;/a&gt; or &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; or &lt;a href=&quot;types#Text&quot;&gt;Text&lt;/a&gt; or &lt;a href=&quot;types#jQuery&quot;&gt;jQuery&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dc78faea1dc5d9340b229d11830d6f2ee2fae9" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Anything&quot;&gt;Anything&lt;/a&gt; oldPropertyValue ) =&amp;gt; &lt;a href=&quot;types#Anything&quot;&gt;Anything&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ead12c84e093dec3dd5b772e75af424e4bad9d" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; domElement ) =&amp;gt; &lt;a href=&quot;types#Object&quot;&gt;Object&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a41fc0912107dd5323776429bac0f973e9fe622" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; element )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c647680613911bd6fe14e576303a559898a433" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Element&quot;&gt;Element&lt;/a&gt; element ) =&amp;gt; &lt;a href=&quot;types#Boolean&quot;&gt;Boolean&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7a74dc5c2bfc9f2e35f2c4e4890e3cb3b278f8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; height ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179163b2cea5ce9e55a8cdd4789a74f2de70e6a9" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; value ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae6351d2aa74bf890c1256c3bd3f60de4ff79c1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt; height ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17128c14782fa0ee75c8ec80fca8f33e5d96d027" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt; width ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7daffd31aa06910af38faed76133345d1a93af3" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt; coords ) =&amp;gt; &lt;a href=&quot;types#PlainObject&quot;&gt;PlainObject&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f76739e4ca9f7addf95f72a7d581eb33355a13" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;types#Function&quot;&gt;Function&lt;/a&gt;( &lt;a href=&quot;types#Integer&quot;&gt;Integer&lt;/a&gt; index, &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; attr ) =&amp;gt; &lt;a href=&quot;types#String&quot;&gt;String&lt;/a&gt; or &lt;a href=&quot;types#Number&quot;&gt;Number&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
