<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="mongoose">
    <body>
      <group id="mongoose">
        <trans-unit id="184bf8bf871a9820625409b7f205b8b9655f8e3b" translate="yes" xml:space="preserve">
          <source>See a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding&quot;&gt;full list of affected characters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b030ee159836a57470d6c1cb00022af42598f4fc" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.ensureIndexes&quot;&gt;Model#ensureIndexes&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe76959fdd18c000946c5cf42559df8d25475cc8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.mongodb.org/manual/reference/connection-string/&quot;&gt;mongodb connection string spec&lt;/a&gt; for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c70d4fbcf03e943a919a2be2d67f6978c66fe7e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes&quot;&gt;introductory blog post&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cdcf3ab547985be095a3520945b7b3fe649d55" translate="yes" xml:space="preserve">
          <source>See the chapter on &lt;a href=&quot;queries&quot;&gt;queries&lt;/a&gt; for more details on how to use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query-js&quot;&gt;Query&lt;/a&gt; api.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c14522d818cb0de14b9b700c9e311fa9211ea9" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;createIndex&lt;/code&gt; commands to mongo for each index declared in the schema. The &lt;code&gt;createIndex&lt;/code&gt; commands are sent in series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f62d9be279ebc2d9e6f9e01a2156c7453cc4200" translate="yes" xml:space="preserve">
          <source>Sends a replaceOne command with this document &lt;code&gt;_id&lt;/code&gt; as the query selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c4a75b6214dac3f0279670d35b435aa2251b42" translate="yes" xml:space="preserve">
          <source>Sends an update command with this document &lt;code&gt;_id&lt;/code&gt; as the query selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dde543f5b43d28df31fdd8e89569ba69b341b90" translate="yes" xml:space="preserve">
          <source>Sends an updateOne command with this document &lt;code&gt;_id&lt;/code&gt; as the query selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88075cf41cbd3f2c7a0225f6daf97b3fcda6c2f0" translate="yes" xml:space="preserve">
          <source>Sends multiple &lt;code&gt;insertOne&lt;/code&gt;, &lt;code&gt;updateOne&lt;/code&gt;, &lt;code&gt;updateMany&lt;/code&gt;, &lt;code&gt;replaceOne&lt;/code&gt;, &lt;code&gt;deleteOne&lt;/code&gt;, and/or &lt;code&gt;deleteMany&lt;/code&gt; operations to the MongoDB server in one command. This is faster than sending multiple independent operations (like) if you use &lt;code&gt;create()&lt;/code&gt;) because with &lt;code&gt;bulkWrite()&lt;/code&gt; there is only one round trip to MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372d9668b046d623991d0fa2b31d4989ee667989" translate="yes" xml:space="preserve">
          <source>Server Selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b99ee6b3f95d33b36b43df9cce5cd4db11c869" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;storeSubdocValidationError&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on the child schema to make Mongoose only report the parent error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c705e629b233c312037676068745ce6d6897ff" translate="yes" xml:space="preserve">
          <source>Set the model that this path refers to. This is the option that &lt;a href=&quot;../populate&quot;&gt;populate&lt;/a&gt; looks at to determine the foreign collection it should query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003c43bf35778557b632b97731aeb86c76ab1da9" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if this path should always be included in the results, &lt;code&gt;false&lt;/code&gt; if it should be excluded by default. This setting can be overridden at the query level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b30280a514661a5791518860cc9f6efb2de27b" translate="yes" xml:space="preserve">
          <source>Sets a default &lt;a href=&quot;https://docs.mongodb.com/manual/reference/collation/&quot;&gt;collation&lt;/a&gt; for every query and aggregation. &lt;a href=&quot;http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations&quot;&gt;Here's a beginner-friendly overview of collations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da46b2db33635642a2ff866abd9a3bf7a2b5f98" translate="yes" xml:space="preserve">
          <source>Sets a default value for this SchemaType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd62ff80162d6a42e9b179ae0c15334474f48449" translate="yes" xml:space="preserve">
          <source>Sets a path (if arity 2) Gets a path (if arity 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a94dae1105ac4d561a11fc57f750459a794da1" translate="yes" xml:space="preserve">
          <source>Sets an option on this aggregation. This function will be deprecated in a future release. Use the &lt;a href=&quot;api#aggregate_Aggregate-cursor&quot;&gt;&lt;code&gt;cursor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api#aggregate_Aggregate-collation&quot;&gt;&lt;code&gt;collation()&lt;/code&gt;&lt;/a&gt;, etc. helpers to set individual options, or access &lt;code&gt;agg.options&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ec2190825c3245a03f471cca659cc082da0aa2" translate="yes" xml:space="preserve">
          <source>Sets default &lt;code&gt;select()&lt;/code&gt; behavior for this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cc82d2224f858d1f7712673cd21d35bb97a061" translate="yes" xml:space="preserve">
          <source>Sets mongoose options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614de46244ebfc59a6a237e262559dd6bcf501a2" translate="yes" xml:space="preserve">
          <source>Sets query hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c4c9b3ed6d8fea188b8b1bb029c18e9416fc75" translate="yes" xml:space="preserve">
          <source>Sets query options. Some options only make sense for certain operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ae247a0d5d03af593c36355370f1c082d51ffc" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.explain/&quot;&gt;&lt;code&gt;explain&lt;/code&gt; option&lt;/a&gt;, which makes this query return detailed execution stats instead of the actual query result. This method is useful for determining what index your queries use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bdc3dd74cf89ac0617c911fdb714f168ca82dc" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/&quot;&gt;maxTimeMS&lt;/a&gt; option. This will tell the MongoDB server to abort if the query or write op has been running for more than &lt;code&gt;ms&lt;/code&gt; milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55299548090d38183925df82b396532f5e7cc09c" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/server-sessions/&quot;&gt;MongoDB session&lt;/a&gt; associated with this query. Sessions are how you mark a query as part of a &lt;a href=&quot;../transactions&quot;&gt;transaction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83f884d7b64ccd95957fcb8267de2ad0c13beb3" translate="yes" xml:space="preserve">
          <source>Sets the allowDiskUse option for the aggregation query (ignored for &amp;lt; 2.6.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23d208a203abaff418868b259c0cde81c6aa290" translate="yes" xml:space="preserve">
          <source>Sets the casted &lt;code&gt;val&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt; and marks the array modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdba9fda1bc88117a520ec4b9d160b07c99f3be" translate="yes" xml:space="preserve">
          <source>Sets the current update operation to new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c080c85e6e5e0f67ece6061632673cef5489c0" translate="yes" xml:space="preserve">
          <source>Sets the cursor option option for the aggregation query (ignored for &amp;lt; 2.6.0). Note the different syntax below: .exec() returns a cursor object, and no callback is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7166625202ad58c200d600ccba17fb626cc1ee" translate="yes" xml:space="preserve">
          <source>Sets the hint option for the aggregation query (ignored for &amp;lt; 3.6.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26047350c389dc95556604c10773960bd3f06d37" translate="yes" xml:space="preserve">
          <source>Sets the lean option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada00c4e02dc1bedf2998e704cbbb2c9f4236687" translate="yes" xml:space="preserve">
          <source>Sets the query conditions to the provided JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e09fc891bec82a66b6a48715f6019a4234e845e" translate="yes" xml:space="preserve">
          <source>Sets the readConcern level for the aggregation query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f64ebb593696001860249e3839e67bceb74fc0f" translate="yes" xml:space="preserve">
          <source>Sets the readConcern option for the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19083a4a1b60cfe93902e96c4509fa0ddbbb7c8" translate="yes" xml:space="preserve">
          <source>Sets the readPreference option for the aggregation query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00c0ca35e198f2d39c893c62a6e73623b194eb2" translate="yes" xml:space="preserve">
          <source>Sets the session for this aggregation. Useful for &lt;a href=&quot;../transactions&quot;&gt;transactions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd00920c65fd096015d3df6cd9f13797b6e135f" translate="yes" xml:space="preserve">
          <source>Sets the sort order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635fef9f7ea549570c6d7a835f6e2af1f3cd528a" translate="yes" xml:space="preserve">
          <source>Sets the specified number of &lt;code&gt;mongod&lt;/code&gt; servers, or tag set of &lt;code&gt;mongod&lt;/code&gt; servers, that must acknowledge this write before this write is considered successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a836a83dcb3e46f0995210f8dc18de58a743924" translate="yes" xml:space="preserve">
          <source>Sets the tailable option (for use with capped collections).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408d2a571f2696dc5a93e67ad1f68588f3964590" translate="yes" xml:space="preserve">
          <source>Sets the value of a path, or many paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600db84e10bf2e4a01146dd462e8226dce08c4ac" translate="yes" xml:space="preserve">
          <source>Sets the value of the option &lt;code&gt;key&lt;/code&gt;. Equivalent to &lt;code&gt;conn.options[key] = val&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ddf461fc0add968ebc433bc5a7df6fbf9f8e37" translate="yes" xml:space="preserve">
          <source>Sets/gets a schema option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9461687d6ed2a293d72a1250e76956e07e62fbe1" translate="yes" xml:space="preserve">
          <source>Setter Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a57ff5fd34c53aa02935c137725d57e985fbf2e" translate="yes" xml:space="preserve">
          <source>Setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdc7d42a66b8064dd46aad264961eccf5a193b2" translate="yes" xml:space="preserve">
          <source>Setters allow you to transform the data before it gets to the raw mongodb document or query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5713b1457b31eb145fa6eee482de3323c4b92935" translate="yes" xml:space="preserve">
          <source>Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4962bf22a046332d2a240040278c6dab8fac28d" translate="yes" xml:space="preserve">
          <source>Setters now run on queries by default, and the old &lt;code&gt;runSettersOnQuery&lt;/code&gt; option has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf37a74e62513bc14f67ec0383d11b3bd0eb7c8" translate="yes" xml:space="preserve">
          <source>Setters run in reverse order in 4.x:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee96302bca3914cfd8377e73958b0a19a2a86b54" translate="yes" xml:space="preserve">
          <source>Setting Populated Fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90e1b4e4f7168be55e5742665d5885f1178f33f" translate="yes" xml:space="preserve">
          <source>Shortcut for creating a new Document from existing raw data, pre-saved in the DB. The document returned has no paths marked as modified initially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8bc7de6eb4978fa2cd158939d03131adeaf8cb" translate="yes" xml:space="preserve">
          <source>Shortcut for saving one or more documents to the database. &lt;code&gt;MyModel.create(docs)&lt;/code&gt; does &lt;code&gt;new MyModel(doc).save()&lt;/code&gt; for every doc in docs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75a5e6cc731636eb83059289858d816a2a0516e" translate="yes" xml:space="preserve">
          <source>Shortcut for validating an array of documents and inserting them into MongoDB if they're all valid. This function is faster than &lt;code&gt;.create()&lt;/code&gt; because it only sends one operation to the server, rather than one for each document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9863be47431ac05f5f987539e17d0cd1f963532" translate="yes" xml:space="preserve">
          <source>Signal that we desire an increment of this documents version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea85fb149d1732308cda7ec154faa6cf9da3c35" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ensureIndexes()&lt;/code&gt;, except for it uses the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#createIndex&quot;&gt;&lt;code&gt;createIndex&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df7252a38d10e4cb4802a66c2c8043ab71b8c55" translate="yes" xml:space="preserve">
          <source>Similarly, single subdocuments also have a shorthand whereby you can omit wrapping the schema with an instance of Schema. However, for historical reasons, this alternate declaration must be enabled via an option (either on the parent schema instantiation or on the mongoose instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2384afc8d8b0fb06c68ee44c107e9482596b0db" translate="yes" xml:space="preserve">
          <source>Since Mixed is a schema-less type, you can change the value to anything else you like, but Mongoose loses the ability to auto detect and save those changes. To tell Mongoose that the value of a Mixed type has changed, you need to call &lt;code&gt;doc.markModified(path)&lt;/code&gt;, passing the path to the Mixed type you just changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b42170fb4017777728cfb3dbf69cb99e21c1761" translate="yes" xml:space="preserve">
          <source>Since the Query class also supports &lt;code&gt;where&lt;/code&gt; you can continue chaining</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ea672db6b45dda41435c699de215842936f99f" translate="yes" xml:space="preserve">
          <source>Single nested discriminators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49c3248b23487c3a99cd9f8be6fa63feb889d9b" translate="yes" xml:space="preserve">
          <source>Single nested subdocument SchemaType constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d257fbebbb26ad856db057e29bd63e9d11315f8" translate="yes" xml:space="preserve">
          <source>SingleNestedPath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a638c3e0fc4d84d7ec508cbe0a26de5c35f9b4f" translate="yes" xml:space="preserve">
          <source>SingleNestedPath()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ea594913005301752ddbe59716796c059e5e3f" translate="yes" xml:space="preserve">
          <source>SingleNestedPath.prototype.discriminator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c75501ee318a161a132e200087b850f9491a9ad" translate="yes" xml:space="preserve">
          <source>So far so good. We've got a schema with one property, &lt;code&gt;name&lt;/code&gt;, which will be a &lt;code&gt;String&lt;/code&gt;. The next step is compiling our schema into a &lt;a href=&quot;models&quot;&gt;Model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56137a45fbd48efc402025824dcf8149734523aa" translate="yes" xml:space="preserve">
          <source>So far we haven't done anything much different. We've merely created a &lt;code&gt;Person&lt;/code&gt; and a &lt;code&gt;Story&lt;/code&gt;. Now let's take a look at populating our story's &lt;code&gt;author&lt;/code&gt; using the query builder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca3b9f52b6ea58ed0d85e27d0507dc91e03992a" translate="yes" xml:space="preserve">
          <source>So far we've created two &lt;a href=&quot;models&quot;&gt;Models&lt;/a&gt;. Our &lt;code&gt;Person&lt;/code&gt; model has its &lt;code&gt;stories&lt;/code&gt; field set to an array of &lt;code&gt;ObjectId&lt;/code&gt;s. The &lt;code&gt;ref&lt;/code&gt; option is what tells Mongoose which model to use during population, in our case the &lt;code&gt;Story&lt;/code&gt; model. All &lt;code&gt;_id&lt;/code&gt;s we store here must be document &lt;code&gt;_id&lt;/code&gt;s from the &lt;code&gt;Story&lt;/code&gt; model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a94cf8a5a76930e51f2ecabd50cc26431843e14" translate="yes" xml:space="preserve">
          <source>So far we've seen how to connect to MongoDB using Mongoose's default connection. At times we may need multiple connections open to Mongo, each with different read/write settings, or maybe just to different databases for example. In these cases we can utilize &lt;code&gt;mongoose.createConnection()&lt;/code&gt; which accepts all the arguments already discussed and returns a fresh connection for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb8b990c2dd9991483752535e05bdac9f095871" translate="yes" xml:space="preserve">
          <source>So far you've only populated based on the &lt;code&gt;_id&lt;/code&gt; field. However, that's sometimes not the right choice. In particular, &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/&quot;&gt;arrays that grow without bound are a MongoDB anti-pattern&lt;/a&gt;. Using mongoose virtuals, you can define more sophisticated relationships between documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986e8183535b80bbbfba94ac629b8611654e0ea5" translate="yes" xml:space="preserve">
          <source>Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via &lt;code&gt;find({ $where: javascript })&lt;/code&gt;, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247f76e25352927bc38b27aebc30da18d40b6196" translate="yes" xml:space="preserve">
          <source>Sometimes, you need to get the parent of a subdoc. You can access the parent using the &lt;code&gt;parent()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f99d8b938af46e9b948397ecff2835882748420" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$box&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285a5b6f0c8064ca65028c81224032153121f497" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$center&lt;/code&gt; or &lt;code&gt;$centerSphere&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fe429d9789c6b1bc9f2b7d409686d5406f6963" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$geometry&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615e9cb5228b5803d2c8d3b4a8a416028699d29a" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$gt&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d7bf0cc1e2a0fd0377b37142af9b3eb4e53464" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$gte&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391ff9efa294e6d731a16c33ee96d4c6c2497b2e" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$lt&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77481fa019f0d162ad932537cd9b075f3785fe2" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$lte&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4b3493bdb6201f3958af910ea6dca2e2f95c1c" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$mod&lt;/code&gt; condition, filters documents for documents whose &lt;code&gt;path&lt;/code&gt; property is a number that is equal to &lt;code&gt;remainder&lt;/code&gt; modulo &lt;code&gt;divisor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da8cafeb3f00fc61e15dde6442d3371b5862fc6" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$ne&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb012d91ec23ebca4f227828845a365c8fc38cc0" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$near&lt;/code&gt; or &lt;code&gt;$nearSphere&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683ae1cf07f36748afe0c0f66589965f93033210" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$polygon&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dba4565709e475ed94471eb1edac7dded486ca" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$regex&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78471c1e3318c5ec175f5cee53649945ad89d0b3" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$size&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1fad742ac977d7106e98495ebd7c8d12dfc286" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;$slice&lt;/code&gt; projection for an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ea029c323fccd73d53b6e5be97cb924ceee467" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;maxDistance&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4f2a0f39fa746205f142df7ba75d140bd91bb1" translate="yes" xml:space="preserve">
          <source>Specifies a &lt;code&gt;path&lt;/code&gt; for use with chaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceb6becddecc76677b299abf3721bcdb89926d4" translate="yes" xml:space="preserve">
          <source>Specifies a javascript function or expression to pass to MongoDBs query system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decc01ba97656d637a06ff50f57b71ce7aee2e45" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;code&gt;$all&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce6f324e42b23e5b8b65febd5bb87c02db9aeb8" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;code&gt;$elemMatch&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cac680633d218944db7478e954896675890829" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;code&gt;$exists&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ec47e229998258f5a7758e5a1a2ebae7d95a24" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;code&gt;$in&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228f2105551507f1813336538cd6b576fe8b61da" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;code&gt;$nin&lt;/code&gt; query condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4329472a485f11bfb70977890068e734d8f748" translate="yes" xml:space="preserve">
          <source>Specifies arguments for a &lt;code&gt;$and&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922c342d2e1c2234d81e582620517a1453c80007" translate="yes" xml:space="preserve">
          <source>Specifies arguments for a &lt;code&gt;$nor&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fade7a4f51f943f5f7f885f541a725bece0dbafb" translate="yes" xml:space="preserve">
          <source>Specifies arguments for an &lt;code&gt;$or&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d00f91431686f297b58ef3f0c5bd7eb60f7e18c" translate="yes" xml:space="preserve">
          <source>Specifies paths which should be populated with other documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2156f5f99c570a28a2280c6d4835fc5a6071962" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;code&gt;comment&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce4cdfcf68e8df13367c9ac59ac56cc22e63906" translate="yes" xml:space="preserve">
          <source>Specifies the batchSize option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc467f9a141ff571010f20c0cb14c4efa3b6644f" translate="yes" xml:space="preserve">
          <source>Specifies the complementary comparison value for paths specified with &lt;code&gt;where()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe6276272bf1e7a5ae813efe85fad108afe22cf" translate="yes" xml:space="preserve">
          <source>Specifies the maxScan option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27a0e5805801657a617c2a53ba61264da651350" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of documents the query will return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0355a5120f998d53d7cae896c27ba9f38d453d79" translate="yes" xml:space="preserve">
          <source>Specifies the number of documents to skip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bc9ce7ee57f2459015668ce09fa4921357b3c8" translate="yes" xml:space="preserve">
          <source>Specifies this query as a &lt;code&gt;count&lt;/code&gt; query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ec5815c51766c8bdd0cc2b69f10c7857226b91" translate="yes" xml:space="preserve">
          <source>Specifies this query as a &lt;code&gt;countDocuments()&lt;/code&gt; query. Behaves like &lt;code&gt;count()&lt;/code&gt;, except it always does a full collection scan when passed an empty filter &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56733f8020ea0ba5791e01af251f78134c3836be" translate="yes" xml:space="preserve">
          <source>Specifies this query as a &lt;code&gt;estimatedDocumentCount()&lt;/code&gt; query. Faster than using &lt;code&gt;countDocuments()&lt;/code&gt; for large collections because &lt;code&gt;estimatedDocumentCount()&lt;/code&gt; uses collection metadata rather than scanning the entire collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d53106d7da4f559a92222a8b249e2fde67a1c7" translate="yes" xml:space="preserve">
          <source>Specifies this query as a &lt;code&gt;snapshot&lt;/code&gt; query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3c90992a3612839eacbaeed52c11dbfc292a80" translate="yes" xml:space="preserve">
          <source>Specifies which document fields to include or exclude (also known as the query &quot;projection&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d3b53a14400e11799552feffd005df3063a117" translate="yes" xml:space="preserve">
          <source>Statics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57d568c127bd563c550032a6d57585538b22941" translate="yes" xml:space="preserve">
          <source>Storage layer for mongoose promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8325521df6e6903ede77955f9bf1a333363aed" translate="yes" xml:space="preserve">
          <source>Streaming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b0451f3dec15f35992bd1d1b8e7e7c66403eb1" translate="yes" xml:space="preserve">
          <source>SubDocument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb9c846cc1ff2b06241985b73b7d00088b30a75" translate="yes" xml:space="preserve">
          <source>Subdocs may also be created without adding them to the array by using the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.create&quot;&gt;create&lt;/a&gt; method of MongooseArrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf74bd647d0f2e5fe362a409eb850c102a263ca3" translate="yes" xml:space="preserve">
          <source>SubdocsArray SchemaType constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ee250a6d9726c4e852deb1f8b015abd5aeb13d" translate="yes" xml:space="preserve">
          <source>Subdocuments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1775c398a58cee65920fa5e47eb082d0ad1f916" translate="yes" xml:space="preserve">
          <source>Subdocuments are documents embedded in other documents. In Mongoose, this means you can nest schemas in other schemas. Mongoose has two distinct notions of subdocuments: arrays of subdocuments and single nested subdocuments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d2007b5f68e5d2669fa48dc0a3bb4758c7d9ee" translate="yes" xml:space="preserve">
          <source>Subdocuments are similar to normal documents. Nested schemas can have &lt;a href=&quot;middleware&quot;&gt;middleware&lt;/a&gt;, &lt;a href=&quot;validation&quot;&gt;custom validation logic&lt;/a&gt;, virtuals, and any other feature top-level schemas can use. The major difference is that subdocuments are not saved individually, they are saved whenever their top-level parent document is saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a9fc48856f042068cc5247db145a8692183f24" translate="yes" xml:space="preserve">
          <source>Subdocuments have &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt;&lt;a href=&quot;middleware&quot;&gt;middleware&lt;/a&gt; just like top-level documents. Calling &lt;code&gt;save()&lt;/code&gt; on the parent document triggers the &lt;code&gt;save()&lt;/code&gt; middleware for all its subdocuments, and the same for &lt;code&gt;validate()&lt;/code&gt; middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2881617a56186fa3938f875297a2b782e7cdef38" translate="yes" xml:space="preserve">
          <source>Subdocuments' &lt;code&gt;pre('save')&lt;/code&gt; and &lt;code&gt;pre('validate')&lt;/code&gt; middleware execute &lt;strong&gt;before&lt;/strong&gt; the top-level document's &lt;code&gt;pre('save')&lt;/code&gt; but &lt;strong&gt;after&lt;/strong&gt; the top-level document's &lt;code&gt;pre('validate')&lt;/code&gt; middleware. This is because validating before &lt;code&gt;save()&lt;/code&gt; is actually a piece of built-in middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24fcf6bf262b7acfc14b9e23c3a31d6f3223640" translate="yes" xml:space="preserve">
          <source>Supported options are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1161a88ae1b055549ca052a0bf3f66d354ce06f4" translate="yes" xml:space="preserve">
          <source>Supported options include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0118fb60f0cb02661a9ab0c5203f4444f535c7e" translate="yes" xml:space="preserve">
          <source>Suppose you are implementing user registration for a website. Users provide an email and password, which gets saved to mongodb. The email is a string that you will want to normalize to lower case, in order to avoid one email having more than one account -- e.g., otherwise, &lt;a href=&quot;mailto:avenue@q.com&quot;&gt;avenue@q.com&lt;/a&gt; can be registered for 2 accounts via &lt;a href=&quot;mailto:avenue@q.com&quot;&gt;avenue@q.com&lt;/a&gt; and &lt;a href=&quot;mailto:AvEnUe@Q.CoM&quot;&gt;AvEnUe@Q.CoM&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4332696fde183542483d0ac911bea2312d3b003" translate="yes" xml:space="preserve">
          <source>Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebbf4b41c829b2f3ee8158696c38bce6cfeaae1" translate="yes" xml:space="preserve">
          <source>Suppose you created another discriminator to track events where a new user registered. These &lt;code&gt;SignedUpEvent&lt;/code&gt; instances will be stored in the same collection as generic events and &lt;code&gt;ClickedLinkEvent&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d99ac7176b9512d9f3a05f3efd4be4b4010185b" translate="yes" xml:space="preserve">
          <source>Suppose you have a &lt;code&gt;User&lt;/code&gt; collection and you want to obfuscate user emails to protect your users' privacy. Below is a basic &lt;code&gt;userSchema&lt;/code&gt; that obfuscates the user's email address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6775e821edae02d31d7f527f8ab808c039b4dc01" translate="yes" xml:space="preserve">
          <source>Suppose you have a &lt;code&gt;User&lt;/code&gt; model. Every user has an &lt;code&gt;email&lt;/code&gt;, but you also want the email's domain. For example, the domain portion of 'test@gmail.com' is 'gmail.com'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edcf4e765acf17a433248e1c4f2fe8d8d546d7c" translate="yes" xml:space="preserve">
          <source>Suppose you want to make sure all user emails in your database are lowercased to make it easy to search without worrying about case. Below is an example &lt;code&gt;userSchema&lt;/code&gt; that ensures emails are lowercased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636c613b1878d7caf78bb915c47e035267b9d047" translate="yes" xml:space="preserve">
          <source>Suppose you want to print out the person's full name. You could do it yourself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809771c548fe16207499ca6b4fa81052592261b2" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to track different types of events in a single collection. Every event will have a timestamp, but events that represent clicked links should have a URL. You can achieve this using the &lt;code&gt;model.discriminator()&lt;/code&gt; function. This function takes 3 parameters, a model name, a discriminator schema and an optional key (defaults to the model name). It returns a model whose schema is the union of the base schema and the discriminator schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ae3500a335eb3fb5e26e6ecc955383f12ede30" translate="yes" xml:space="preserve">
          <source>Switches to a different database using the same connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ace028a73f08152429272cbed03f777702890c" translate="yes" xml:space="preserve">
          <source>Synchronous Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f744a328b572de6b9800e354b4f257e527a1caa" translate="yes" xml:space="preserve">
          <source>Takes a populated field and returns it to its unpopulated state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047e4406e91e39be4936e34821dea68bfba66d3c" translate="yes" xml:space="preserve">
          <source>That is because gridfs-stream relies on a &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/GridStore.html&quot;&gt;deprecated MongoDB driver class&lt;/a&gt;. You should instead use the &lt;a href=&quot;https://thecodebarbarian.com/mongodb-gridfs-stream&quot;&gt;MongoDB driver's own streaming API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0747a1456eafd071c3c70419a714ee4fae701c37" translate="yes" xml:space="preserve">
          <source>That's because mongoose buffers model function calls internally. This buffering is convenient, but also a common source of confusion. Mongoose will &lt;em&gt;not&lt;/em&gt; throw any errors by default if you use a model without connecting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bda9646308400c0a8625a486fab312d75e4bfca" translate="yes" xml:space="preserve">
          <source>That's because, in order to avoid executing a separate query for each document, Mongoose instead queries for fans using &lt;code&gt;numDocuments * limit&lt;/code&gt; as the limit. As a workaround, you should populate each document individually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2d38b1680d308dd653c16f1f97cd96ddc45d4b" translate="yes" xml:space="preserve">
          <source>That's the end of our quick start. We created a schema, added a custom document method, saved and queried kittens in MongoDB using Mongoose. Head over to the &lt;a href=&quot;guide&quot;&gt;guide&lt;/a&gt;, or &lt;a href=&quot;https://mongoosejs.com/docs/api.html&quot;&gt;API docs&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb05f0076e080d995a96c0d7674f5f6042045bb" translate="yes" xml:space="preserve">
          <source>The &amp;laquo;String|RegExp&amp;raquo; method name or regular expression to match method name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823540110fff3b8dd3256c7ccd0193fafefe16fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#error_MongooseError&quot;&gt;MongooseError&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978341993168022f314d2755a1d2687899b5c87f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://mongoosejs.com/docs/4.x/docs/connections.html#use-mongo-client&quot;&gt;&lt;code&gt;useMongoClient&lt;/code&gt; option&lt;/a&gt; was removed in Mongoose 5, it is now always &lt;code&gt;true&lt;/code&gt;. As a consequence, Mongoose 5 no longer supports several function signatures for &lt;code&gt;mongoose.connect()&lt;/code&gt; that worked in Mongoose 4.x if the &lt;code&gt;useMongoClient&lt;/code&gt; option was off. Below are some examples of &lt;code&gt;mongoose.connect()&lt;/code&gt; calls that do &lt;strong&gt;not&lt;/strong&gt; work in Mongoose 5.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c5a437ddbcc8dd4ee541b09c177d843815a89c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite&quot;&gt;supported operations&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f58b810095680be02cffddef94a8ac3b19851b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/aheckmann/mquery&quot;&gt;mquery&lt;/a&gt; query builder Mongoose uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1ee0477f58b2d8c9cea7cbee7db50f29296cba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot;&gt;node-mongodb-native&lt;/a&gt; driver Mongoose uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513fcb03a6fa73bd8dc276231ebd752d4f6e08f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#aggregate_Aggregate-pipeline&quot;&gt;&lt;code&gt;Aggregate#pipeline()&lt;/code&gt; function&lt;/a&gt; lets you access the MongoDB aggregation pipeline that Mongoose will send to the MongoDB server. It is useful for adding stages to the beginning of the pipeline from middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dfff5aa971b4a14a22d53b25a8773edd994fdd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model&quot;&gt;API docs&lt;/a&gt; cover many additional methods available like &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.count&quot;&gt;count&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.mapReduce&quot;&gt;mapReduce&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.aggregate&quot;&gt;aggregate&lt;/a&gt;, and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOneAndRemove&quot;&gt;more&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a0c952f4c9bad39c9ec9d98a21b98c6eb92b3d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; function is generally the right way to update a document with Mongoose. With &lt;code&gt;save()&lt;/code&gt;, you get full &lt;a href=&quot;validation&quot;&gt;validation&lt;/a&gt; and &lt;a href=&quot;middleware&quot;&gt;middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92042480f295f15a1c50ac74fd04d6eaac4bcc4e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;lean option&lt;/a&gt; tells Mongoose to skip &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.hydrate&quot;&gt;hydrating&lt;/a&gt; the result documents. This makes queries faster and less memory intensive, but the result documents are plain old JavaScript objects (POJOs), &lt;strong&gt;not&lt;/strong&gt;&lt;a href=&quot;../documents&quot;&gt;Mongoose documents&lt;/a&gt;. In this tutorial, you'll learn more about the tradeoffs of using &lt;code&gt;lean()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81f9f69fa1d8840b5048ff215cccb941e1569f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$pushAll&lt;/code&gt; Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1465719f4454d5fb569ae7214f0f14b9a09dcc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.cursor()&lt;/code&gt; function triggers pre find hooks, but &lt;strong&gt;not&lt;/strong&gt; post find hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b35efc4d52ce941667d54c10b501c99d0f3417" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Model.aggregate()&lt;/code&gt; function also supports transactions. Mongoose aggregations have a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#aggregate_Aggregate-session&quot;&gt;&lt;code&gt;session()&lt;/code&gt; helper&lt;/a&gt; that sets the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#aggregate_Aggregate-option&quot;&gt;&lt;code&gt;session&lt;/code&gt; option&lt;/a&gt;. Below is an example of executing an aggregation within a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b765eeca8dbd99e43f6d140fb8b8fed5aff720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Schema#virtual()&lt;/code&gt; function returns a &lt;a href=&quot;../api/virtualtype&quot;&gt;&lt;code&gt;VirtualType&lt;/code&gt; object&lt;/a&gt;. Unlike normal document properties, virtuals do not have any underlying value and Mongoose does not do any type coercion on virtuals. However, virtuals do have &lt;a href=&quot;getters-setters&quot;&gt;getters and setters&lt;/a&gt;, which make them ideal for computed properties, like the &lt;code&gt;domain&lt;/code&gt; example above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c70ead4a0c9eb1c7ad44f7fccf0f99eeaa708c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoIndex&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt; by default. You can change this default by setting &lt;a href=&quot;api/mongoose#mongoose_Mongoose-set&quot;&gt;&lt;code&gt;mongoose.set('autoIndex', false);&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cce98b0c3ddaf0f5ecaa1209af2883ec5539b84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function receives &lt;code&gt;(err, rawResponse)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe10459687783a36d81c4fb30fef6dcff5f23461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;capped&lt;/code&gt; option may also be set to an object if you want to pass additional options like &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-max&quot;&gt;max&lt;/a&gt; or &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-autoIndexId&quot;&gt;autoIndexId&lt;/a&gt;. In this case you must explicitly pass the &lt;code&gt;size&lt;/code&gt; option, which is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181e41d22383a9264dd22613ca4366d2fa746a3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;conditions&lt;/code&gt; are cast to their respective SchemaTypes before the command is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ab27ccdd0e30e4a1b770b3908d4f7fdaa87933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect()&lt;/code&gt; function also accepts a callback parameter and returns a &lt;a href=&quot;promises&quot;&gt;promise&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4b749dbe557ef57b9fe9fa5418ef436d9a2fff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect&lt;/code&gt; method also accepts an &lt;code&gt;options&lt;/code&gt; object which will be passed on to the underlying MongoDB driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f8d4db3e1061a9828bccd318ebc55adad43729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28919cdaa7b537dfa9725a7a7004ba95b0a9081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; option lets you set the value of &lt;code&gt;this&lt;/code&gt; in update validators to the underlying query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c505e24ce7a22763c3514772511d798fb73822e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countDocuments()&lt;/code&gt; function is similar to &lt;code&gt;count()&lt;/code&gt;, but there are a &lt;a href=&quot;https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments&quot;&gt;few operators that &lt;code&gt;countDocuments()&lt;/code&gt; does not support&lt;/a&gt;. Below are the operators that &lt;code&gt;count()&lt;/code&gt; supports but &lt;code&gt;countDocuments()&lt;/code&gt; does not, and the suggested replacement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5d615a32bbb718c0b80c9a63b5b09608843e36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorMsg&lt;/code&gt; argument will become the message of the &lt;code&gt;ValidationError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2524701ad2693ee0801033ae0ea8883437c7a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; are cast to their respective SchemaTypes before the command is sent. See our &lt;a href=&quot;../tutorials/query_casting&quot;&gt;query casting tutorial&lt;/a&gt; for more information on how Mongoose casts &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26735e30728655a91f546bc1fe742e3aefc9c2fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; is cast based on the Schema before sending the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6229d648e2d051646896749e5072915c795d2eb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localField&lt;/code&gt; and &lt;code&gt;foreignField&lt;/code&gt; options. Mongoose will populate documents from the model in &lt;code&gt;ref&lt;/code&gt; whose &lt;code&gt;foreignField&lt;/code&gt; matches this document's &lt;code&gt;localField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cd9c9ebb066abc7eb46c7585b6bac502062402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lowercase&lt;/code&gt; option only works for strings. There are certain options which apply for all schema types, and some that apply for specific schema types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4145fbc9515e031335e07089dd05b5efcd654b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;model.discriminator()&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33a73b595f2fc09b4c35391b031d3539ae8c426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;object&lt;/code&gt; argument must contain &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;coordinates&lt;/code&gt; properties. - type {String} - coordinates {Array}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d982a4137b34f5f3d0fa8e09e766b6b99a03a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter to &lt;code&gt;toObject()&lt;/code&gt; and &lt;code&gt;toJSON()&lt;/code&gt; merge defaults rather than overwriting them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0beaa15a20759f5bcb08fd3b6f89257d49d6ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; passed in to the &lt;code&gt;QueryCursor&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2db084008e9516a796caa7abcea0a2d1872b17a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ref&lt;/code&gt; option, which tells Mongoose which model to populate documents from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b8f9df41a109c0814d752eb54d7ee91da962f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refPath&lt;/code&gt; option is a more sophisticated alternative to &lt;code&gt;ref&lt;/code&gt;. If &lt;code&gt;ref&lt;/code&gt; is just a string, Mongoose will always query the same model to find the populated subdocs. With &lt;code&gt;refPath&lt;/code&gt;, you can configure what model Mongoose uses for each document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6b49fef7e8da5ecdd93a0de2fa68cdda241911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;retainKeyOrder&lt;/code&gt; option was removed, mongoose will now always retain the same key position when cloning objects. If you have queries or indexes that rely on reverse key order, you will have to change them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bac83d306854f75530f371b9ea56a7b1b0e8d9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; function triggers &lt;code&gt;validate()&lt;/code&gt; hooks, because mongoose has a built-in &lt;code&gt;pre('save')&lt;/code&gt; hook that calls &lt;code&gt;validate()&lt;/code&gt;. This means that all &lt;code&gt;pre('validate')&lt;/code&gt; and &lt;code&gt;post('validate')&lt;/code&gt; hooks get called &lt;strong&gt;before&lt;/strong&gt; any &lt;code&gt;pre('save')&lt;/code&gt; hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faaf8af9aea9c1682bfddcd6bb0c2f97ade9326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;saveErrorIfNotFound&lt;/code&gt; option was removed, mongoose will now always error out from &lt;code&gt;save()&lt;/code&gt; if the underlying document was not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcad6c763da283eead9b253fc4ce5f4f2294683" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schema.path()&lt;/code&gt; Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcf2b2bde399e251aae1b778ead6f1525c80156" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schema.path()&lt;/code&gt; function returns the instantiated schema type for a given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a653771415c34ad9c79d7d3505c5f9cd0af2a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setDefaultsOnInsert&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aec76678201bca71a346432db385f109c1c16d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setDefaultsOnInsert&lt;/code&gt; option relies on the &lt;a href=&quot;https://docs.mongodb.org/manual/reference/operator/update/setOnInsert/&quot;&gt;MongoDB &lt;code&gt;$setOnInsert&lt;/code&gt; operator&lt;/a&gt;. The &lt;code&gt;$setOnInsert&lt;/code&gt; operator was introduced in MongoDB 2.4. If you're using MongoDB server &amp;lt; 2.4.0, do &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;setDefaultsOnInsert&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8876420175f1b8de44da07329664cc335d729f60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shardKey&lt;/code&gt; option is used when we have a &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Sharding+Introduction&quot;&gt;sharded MongoDB architecture&lt;/a&gt;. Each sharded collection is given a shard key which must be present in all insert/update operations. We just need to set this schema option to the same shard key and we&amp;rsquo;ll be all set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d628bb082479d46b6c438a5702106c04596010" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt; option does apply to updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f140686906c42ee63d2587021c0500806ffb6c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strict&lt;/code&gt; option may also be set to &lt;code&gt;&quot;throw&quot;&lt;/code&gt; which will cause errors to be produced instead of dropping the bad data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b613e1121235052f44967c79c2129816f740bd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strictQuery&lt;/code&gt; Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7b56f0cd4465dedaf06ac93702c83784dd5bae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0073e645b1741b0b654d0bbfd44accede43838fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unique&lt;/code&gt; Option is Not a Validator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7221c601ef8a6a44862b42894d2f9a25a1e426f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useMongooseAggCursor&lt;/code&gt; option from 4.x is now always on. This is the new syntax for aggregation cursors in mongoose 5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597b7efb10a0c7d8b2c23f42d06e2c06583bc2e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useNewUrlParser&lt;/code&gt; Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2ebd8b269ab7509a660ba66bd091146bcbc186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useUnifiedTopology&lt;/code&gt; option removes support for several &lt;a href=&quot;connections#options&quot;&gt;connection options&lt;/a&gt; that are no longer relevant with the new topology engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61249646720f4785173e6eb8ddfacfbd119b795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; argument (if passed) will be available through the &lt;code&gt;ValidationError.value&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46aa34cccc0ecc2d8a41e96db97bbaf32dd49407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;versionKey&lt;/code&gt; is a property set on each document when first created by Mongoose. This keys value contains the internal &lt;a href=&quot;http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning&quot;&gt;revision&lt;/a&gt; of the document. The &lt;code&gt;versionKey&lt;/code&gt; option is a string that represents the path to use for versioning. The default is &lt;code&gt;__v&lt;/code&gt;. If this conflicts with your application you can configure as such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0157809afad8d998cf060417cf918a03caad96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;withTransaction()&lt;/code&gt; Helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d670c60333947fdbbb4243b5b1e5720e7b0adb" translate="yes" xml:space="preserve">
          <source>The ChangeStream object is an event emitter that emits the following events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8754e719fb924eb03935341fe2023bfc8be1b46" translate="yes" xml:space="preserve">
          <source>The MongoDB Node.js driver rewrote the tool it uses to parse &lt;a href=&quot;https://docs.mongodb.com/manual/reference/connection-string/&quot;&gt;MongoDB connection strings&lt;/a&gt;. Because this is such a big change, they put the new connection string parser behind a flag. To turn on this option, pass the &lt;code&gt;useNewUrlParser&lt;/code&gt; option to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-connect&quot;&gt;&lt;code&gt;mongoose.connect()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-createConnection&quot;&gt;&lt;code&gt;mongoose.createConnection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0ac32cb769c45c3f6f1fb5a22f4200e178d543" translate="yes" xml:space="preserve">
          <source>The MongoDB docs have a full list of &lt;a href=&quot;https://docs.mongodb.com/manual/reference/connection-string/&quot;&gt;supported connection string options&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720bb31dcc45bbd8e4bbc2f6e692ab373bb2a68d" translate="yes" xml:space="preserve">
          <source>The MongoDB driver's &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt; function&lt;/a&gt; is deprecated in favor of &lt;code&gt;deleteOne()&lt;/code&gt; and &lt;code&gt;deleteMany()&lt;/code&gt;. This is to comply with the &lt;a href=&quot;https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst&quot;&gt;MongoDB CRUD specification&lt;/a&gt;, which aims to provide a consistent API for CRUD operations across all MongoDB drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de9dae52af28930827ea043104a411039c34059" translate="yes" xml:space="preserve">
          <source>The MongoDB server has deprecated the &lt;code&gt;count()&lt;/code&gt; function in favor of two separate functions, &lt;a href=&quot;#query_Query-countDocuments&quot;&gt;&lt;code&gt;countDocuments()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#query_Query-estimatedDocumentCount&quot;&gt;&lt;code&gt;estimatedDocumentCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97cf6b439cdcda57eedcb307b020e10091b63113" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#connection_Connection&quot;&gt;Connection&lt;/a&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfcf591eb6330d7d0953b00b581672e53136fa1" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#document-js&quot;&gt;Document&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dcb26250c5a072cf24fbba8afe963494efc13a" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#model_Model&quot;&gt;Model&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28594d5965e73ed545e784e4c4968c0e7db17971" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#promise_Promise&quot;&gt;Promise&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25645ef36abf330b3e4e521d871abc3d4ac3e906" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#query_Query&quot;&gt;Query&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c887870f9be6e98e4a4d3c8f0f1a87da2d0654" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#schema_Schema&quot;&gt;Schema&lt;/a&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ef895f4284fa674e1acc08e23308bf122c3ada" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#schematype_SchemaType&quot;&gt;SchemaType&lt;/a&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860c2fd04205c922f55bd08fd4fb387afc10baaa" translate="yes" xml:space="preserve">
          <source>The Mongoose &lt;a href=&quot;#virtualtype_VirtualType&quot;&gt;VirtualType&lt;/a&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0231e142edb149e492688f6eead8f9ff32b4a3" translate="yes" xml:space="preserve">
          <source>The Mongoose Aggregate constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41f54945a1479fc6e5bade01fa6a00933e2d074" translate="yes" xml:space="preserve">
          <source>The Mongoose CastError constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73ed00fd9c9b864b109d4125d822c75d3adc040" translate="yes" xml:space="preserve">
          <source>The Mongoose Collection constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b207722419d928bc7b7ce4e1782184dd68e9d4" translate="yes" xml:space="preserve">
          <source>The Mongoose Decimal128 &lt;a href=&quot;../schematypes&quot;&gt;SchemaType&lt;/a&gt;. Used for declaring paths in your schema that should be &lt;a href=&quot;http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html&quot;&gt;128-bit decimal floating points&lt;/a&gt;. Do not use this to create a new Decimal128 instance, use &lt;code&gt;mongoose.Types.Decimal128&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c3b50c882ed794a6acf8b133f3d350416ad1f9" translate="yes" xml:space="preserve">
          <source>The Mongoose DocumentProvider constructor. Mongoose users should not have to use this directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa12cad925d0c8cbe396f138b52410b733e5a01" translate="yes" xml:space="preserve">
          <source>The Mongoose Mixed &lt;a href=&quot;../schematypes&quot;&gt;SchemaType&lt;/a&gt;. Used for declaring paths in your schema that Mongoose's change tracking, casting, and validation should ignore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb450189ab54653d3b9eda12aceb550fce93018" translate="yes" xml:space="preserve">
          <source>The Mongoose Number &lt;a href=&quot;../schematypes&quot;&gt;SchemaType&lt;/a&gt;. Used for declaring paths in your schema that Mongoose should cast to numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8124b27af9f7a96bcbc73113092473f4fb05a65" translate="yes" xml:space="preserve">
          <source>The Mongoose ObjectId &lt;a href=&quot;../schematypes&quot;&gt;SchemaType&lt;/a&gt;. Used for declaring paths in your schema that should be &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/ObjectId/&quot;&gt;MongoDB ObjectIds&lt;/a&gt;. Do not use this to create a new ObjectId instance, use &lt;code&gt;mongoose.Types.ObjectId&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09314d939f0fba8ae75c303c3db3b513c0c719e" translate="yes" xml:space="preserve">
          <source>The Mongoose constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad93459ab98768c8c558454b1b751ef4bce80cd" translate="yes" xml:space="preserve">
          <source>The Mongoose module's default connection. Equivalent to &lt;code&gt;mongoose.connections[0]&lt;/code&gt;, see &lt;a href=&quot;#mongoose_Mongoose-connections&quot;&gt;&lt;code&gt;connections&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6b01646ccb89f7b75c875f94e42e6962cd8af9" translate="yes" xml:space="preserve">
          <source>The Mongoose team maintains several plugins that add cool new features to Mongoose. Here's a couple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca487d3e31fda13902a4cc9aafe7eae0b6e01df" translate="yes" xml:space="preserve">
          <source>The Mongoose version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521796996be8c1abac78e700da8e9cd3e3e5055e" translate="yes" xml:space="preserve">
          <source>The `$pushAll` Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b210db4e9a71616fa1fd53022087f17cc8b7b7d" translate="yes" xml:space="preserve">
          <source>The `schema.path()` Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e89bfbc38cbd2324686869c79573a3ecdbdc729" translate="yes" xml:space="preserve">
          <source>The `type` Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27377772e22c68d29e5add5b1612b24d2367cb44" translate="yes" xml:space="preserve">
          <source>The above code does &lt;strong&gt;not&lt;/strong&gt; work in 5.x, you &lt;strong&gt;must&lt;/strong&gt; wrap the &lt;code&gt;$match&lt;/code&gt; and &lt;code&gt;$skip&lt;/code&gt; stages in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c50fd485a9ff9f0910c42b37e7379403b3af3a" translate="yes" xml:space="preserve">
          <source>The above example doesn't explicitly declare &lt;code&gt;github&lt;/code&gt; or &lt;code&gt;twitter&lt;/code&gt; as paths, but, since &lt;code&gt;socialMediaHandles&lt;/code&gt; is a map, you can store arbitrary key/value pairs. However, since &lt;code&gt;socialMediaHandles&lt;/code&gt; is a map, you &lt;strong&gt;must&lt;/strong&gt; use &lt;code&gt;.get()&lt;/code&gt; to get the value of a key and &lt;code&gt;.set()&lt;/code&gt; to set the value of a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360baaba362e16370dd125dc874ecfcf76329ed6" translate="yes" xml:space="preserve">
          <source>The alias of each pref is also permitted so instead of having to type out 'secondaryPreferred' and getting the spelling wrong, we can simply pass 'sp'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8007e368eac978e0e90cda4ded92aebeb14209" translate="yes" xml:space="preserve">
          <source>The allowed index types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b47468a46ee343186a82c5170fed665ad6edcf3" translate="yes" xml:space="preserve">
          <source>The argument is assigned to the most recent path passed to &lt;code&gt;where()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0029afbdad941df56c982190045be6def3faea6e" translate="yes" xml:space="preserve">
          <source>The callback is passed the pathname and the schemaType instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68694ba06491ddc2d6637f9d2bb44f53651ea227" translate="yes" xml:space="preserve">
          <source>The callback will receive two parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688b3b4a4aae4e7bb06708b2aad0c776883ac0f8" translate="yes" xml:space="preserve">
          <source>The constructor used for schematype options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5d823fe490e53d71324a9c65d1c3d54c7f14ed" translate="yes" xml:space="preserve">
          <source>The default built-in validator error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca469478a7cf92daee15c15d290344b85826330" translate="yes" xml:space="preserve">
          <source>The default value for this path. If a function, Mongoose executes the function and uses the return value as the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facfdf6d5718973cdc6b3d5630b009d759ba745e" translate="yes" xml:space="preserve">
          <source>The difference between the two is &lt;code&gt;countDocuments()&lt;/code&gt; can accept a filter parameter like &lt;a href=&quot;#query_Query-find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;estimatedDocumentCount()&lt;/code&gt; function is faster, but can only tell you the total number of documents in a collection. You cannot pass a &lt;code&gt;filter&lt;/code&gt; to &lt;code&gt;estimatedDocumentCount()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902f48c1aab060e8395f5deab7a7ecf313288fe9" translate="yes" xml:space="preserve">
          <source>The disadvantage of putting options in the query string is that query string options are harder to read. The advantage is that you only need a single configuration option, the URI, rather than separate options for &lt;code&gt;socketTimeoutMS&lt;/code&gt;, &lt;code&gt;connectTimeoutMS&lt;/code&gt;, etc. Best practice is to put options that likely differ between development and production, like &lt;code&gt;replicaSet&lt;/code&gt; or &lt;code&gt;ssl&lt;/code&gt;, in the connection string, and options that should remain constant, like &lt;code&gt;connectTimeoutMS&lt;/code&gt; or &lt;code&gt;poolSize&lt;/code&gt;, in the options object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97adad9a9095d61cfb54800b029c0b6d2951f1a" translate="yes" xml:space="preserve">
          <source>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66035ed300902a8c4652712cc264b9c13c028569" translate="yes" xml:space="preserve">
          <source>The documents returned from &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-populate&quot;&gt;query population&lt;/a&gt; become fully functional, &lt;code&gt;remove&lt;/code&gt;able, &lt;code&gt;save&lt;/code&gt;able documents unless the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;lean&lt;/a&gt; option is specified. Do not confuse them with &lt;a href=&quot;subdocs&quot;&gt;sub docs&lt;/a&gt;. Take caution when calling its remove method because you'll be removing it from the database, not just the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae07d2ca61fd108aea888ed0156cbbb385a8d638" translate="yes" xml:space="preserve">
          <source>The documents schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfa9982b168a4f24647de31dcaba72d73f6c3d4" translate="yes" xml:space="preserve">
          <source>The downside of enabling &lt;code&gt;lean&lt;/code&gt; is that lean docs don't have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98ebbd20caf342c636b2b78f8bc5d43eae6ef2a" translate="yes" xml:space="preserve">
          <source>The error message argument is optional. If not passed, the &lt;a href=&quot;#error_messages_MongooseError-messages&quot;&gt;default generic error message template&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada6056e41b7a078c83a291015fe509f244b5df1" translate="yes" xml:space="preserve">
          <source>The example above uses the &lt;code&gt;Schema.methods&lt;/code&gt; object directly to save an instance method. You can also use the &lt;code&gt;Schema.method()&lt;/code&gt; helper as described &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-method&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b114088126c9e3d7ed778de095e0bd9bf70c45" translate="yes" xml:space="preserve">
          <source>The exports object of the &lt;code&gt;mongoose&lt;/code&gt; module is an instance of this class. Most apps will only use this one instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23f00089d4dccdbd380c168a3d7130adad37a68" translate="yes" xml:space="preserve">
          <source>The exports of the mongoose module is an instance of this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127f62f61cd994c7b9e248af6d04d3b79d23c115" translate="yes" xml:space="preserve">
          <source>The first argument is the &lt;em&gt;singular&lt;/em&gt; name of the collection your model is for. ** Mongoose automatically looks for the plural, lowercased version of your model name. ** Thus, for the example above, the model Tank is for the &lt;strong&gt;tanks&lt;/strong&gt; collection in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4c9346d4d5790a4650f2ee871a0183dfe59f1b" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.find&quot;&gt;&lt;code&gt;Model.find()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-find&quot;&gt;&lt;code&gt;Query#find()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOne&quot;&gt;&lt;code&gt;Model.findOne()&lt;/code&gt;&lt;/a&gt;, etc. is called &lt;code&gt;filter&lt;/code&gt;. In older content this parameter is sometimes called &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;conditions&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00c640c142857a55fa5a1531467ac5d033fdb73" translate="yes" xml:space="preserve">
          <source>The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5401c39b5bd5a66a079f8880008d62033725b4c3" translate="yes" xml:space="preserve">
          <source>The following are all the valid SchemaTypes in Mongoose. Mongoose plugins can also add custom SchemaTypes like &lt;a href=&quot;http://plugins.mongoosejs.io/plugins/int32&quot;&gt;int32&lt;/a&gt;. Check out &lt;a href=&quot;http://plugins.mongoosejs.io&quot;&gt;Mongoose's plugins search&lt;/a&gt; to find plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88880b94d2defd8cee94454ad8709644900bd7a" translate="yes" xml:space="preserve">
          <source>The following options are for &lt;code&gt;findOneAndUpdate()&lt;/code&gt; and &lt;code&gt;findOneAndRemove()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2990c38a6f9c5154f406402680655c4995b4db8" translate="yes" xml:space="preserve">
          <source>The following options are for all operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a681479d8239731eb6093999c5b9b783d9e57db3" translate="yes" xml:space="preserve">
          <source>The following options are important for tuning Mongoose only if you are running &lt;strong&gt;without&lt;/strong&gt;&lt;a href=&quot;deprecations#useunifiedtopology&quot;&gt;the &lt;code&gt;useUnifiedTopology&lt;/code&gt; option&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a996cf485f54ccce54b6d85c0aea4c483bcc2eb8" translate="yes" xml:space="preserve">
          <source>The following options are only for &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;findOne()&lt;/code&gt;, &lt;code&gt;findById()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, and &lt;code&gt;findByIdAndUpdate()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651f1fbf5cdd7dd19a248eea515b8dcdcfaeaf51" translate="yes" xml:space="preserve">
          <source>The following options are only for &lt;code&gt;find()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0eff50a356bd93ec67f50a236df352caa9fa6d" translate="yes" xml:space="preserve">
          <source>The following options are only for all operations &lt;strong&gt;except&lt;/strong&gt;&lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;deleteOne()&lt;/code&gt;, and &lt;code&gt;deleteMany()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1215b50e59f1131a19f1c5cd3b815db04470780" translate="yes" xml:space="preserve">
          <source>The following options are only for write operations: &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, &lt;code&gt;replaceOne()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, and &lt;code&gt;findByIdAndUpdate()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efb9fa31a8e1b00bb55433842f53ba0a23414ec" translate="yes" xml:space="preserve">
          <source>The function above is safe to use whether the existing string is already encoded or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e96242523e086ea0bab03cd5535994b161f8012" translate="yes" xml:space="preserve">
          <source>The host name portion of the URI. If multiple hosts, such as a replica set, this will contain the first host name in the URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0751f1bebd1f02b5902051010508fd76416a4640" translate="yes" xml:space="preserve">
          <source>The model that &lt;code&gt;populate()&lt;/code&gt; should use if populating this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ddcfd032cf9c9919fcbf00e0f57b079d18ad5b" translate="yes" xml:space="preserve">
          <source>The mongodb.Db instance, set when the connection is opened</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb8165b4fbea7e12cf8eda8f6b86365f129f781" translate="yes" xml:space="preserve">
          <source>The most important feature of transactions is the ability to roll back &lt;em&gt;all&lt;/em&gt; operations in the transaction using the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/Session.abortTransaction/&quot;&gt;&lt;code&gt;abortTransaction()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947c36d3863add1dfa4c7305f837bed1bcc16b09" translate="yes" xml:space="preserve">
          <source>The name of the database this connection points to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ef6010dc7e54a4ccb760cc57494fd8e1b60c9" translate="yes" xml:space="preserve">
          <source>The name of the error. The name uniquely identifies this Mongoose error. The possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9300052a49dd5a3c2397132f962be7ca814acec9" translate="yes" xml:space="preserve">
          <source>The name of the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c78be9d97a30c776549365085f231d3a5281bd7" translate="yes" xml:space="preserve">
          <source>The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the &lt;code&gt;exec()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cbf2fa313130c9e8de0d6297df3296f8ef2aad" translate="yes" xml:space="preserve">
          <source>The options defined on a schematype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92726739f742e69321ab332ebd33b3966a96800" translate="yes" xml:space="preserve">
          <source>The original object passed to the schema constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d3e9ed738ad6769ee33dd73aac6bbcd06ab09c" translate="yes" xml:space="preserve">
          <source>The other key difference that update validators only run on the paths specified in the update. For instance, in the below example, because 'name' is not specified in the update operation, update validation will succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba87bbaefd531a422147c9e43790301837d8e36" translate="yes" xml:space="preserve">
          <source>The other way is to use &lt;a href=&quot;api/model#model_Model.replaceOne&quot;&gt;&lt;code&gt;Model.replaceOne()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb08c411af21b654a420360f5f7aaf14fd3e5e3" translate="yes" xml:space="preserve">
          <source>The output from the above &lt;a href=&quot;http://thecodebarbarian.com/80-20-guide-to-async-await-in-node.js.html&quot;&gt;async function&lt;/a&gt; will look like what you see below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689f361594ed1d4c78e81735b62fbf93497a8d49" translate="yes" xml:space="preserve">
          <source>The password specified in the URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d10310ba20fd58327f20c484eeba4be3151d88e" translate="yes" xml:space="preserve">
          <source>The paths defined on this schema. The keys are the top-level paths in this schema, and the values are instances of the SchemaType class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a123c7194a45ce632febf82de85c7467c49934c7" translate="yes" xml:space="preserve">
          <source>The permitted SchemaTypes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62283553c59f71c78c4410e0ff64689952d2b548" translate="yes" xml:space="preserve">
          <source>The plugins that will be applied to all models created on this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417b6627352823b18df3848759bac2edc1cbcb7a" translate="yes" xml:space="preserve">
          <source>The port portion of the URI. If multiple hosts, such as a replica set, this will contain the port from the first host name in the URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbcb9d8855fb98e92d87bf4e6525ef92a360e8bd" translate="yes" xml:space="preserve">
          <source>The previous examples explicitly create a transaction and commits it. In practice, you'll want to use the &lt;a href=&quot;https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html#withTransaction&quot;&gt;&lt;code&gt;session.withTransaction()&lt;/code&gt; helper&lt;/a&gt; instead. The &lt;code&gt;session.withTransaction()&lt;/code&gt; helper handles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bba3ff0fe8a2bfacf236b3d8184f2922ce23d7" translate="yes" xml:space="preserve">
          <source>The read option also allows us to specify &lt;em&gt;tag sets&lt;/em&gt;. These tell the &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native/&quot;&gt;driver&lt;/a&gt; from which members of the replica-set it should attempt to read. Read more about tag sets &lt;a href=&quot;http://docs.mongodb.org/manual/applications/replication/#tag-sets&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ff7cfed58e272fad4a763aeb927e6105d435ab" translate="yes" xml:space="preserve">
          <source>The required validator uses the SchemaType's &lt;code&gt;checkRequired&lt;/code&gt; function to determine whether a given value satisfies the required validator. By default, a value satisfies the required validator if &lt;code&gt;val != null&lt;/code&gt; (that is, if the value is not null nor undefined). However, most built-in mongoose schema types override the default &lt;code&gt;checkRequired&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c454dab0e9a6cc8d02aa45b4eb7996bb87c0ac" translate="yes" xml:space="preserve">
          <source>The return value of this method is used in calls to JSON.stringify(doc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270d1710da43a81d23e6eafd5a8439f6ac561567" translate="yes" xml:space="preserve">
          <source>The returned promise resolves to a list of the dropped indexes' names as an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efe07db9b195bc8da84c5aac18935cbe97988e3" translate="yes" xml:space="preserve">
          <source>The schema &lt;code&gt;bufferCommands&lt;/code&gt; option overrides the global &lt;code&gt;bufferCommands&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e2aa46603886213ddf29182e6e462695ceccf4" translate="yes" xml:space="preserve">
          <source>The strict option, (enabled by default), ensures that values passed to our model constructor that were not specified in our schema do not get saved to the db.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be6ec40cbac2813a93dec49c36ad070d484a4f6" translate="yes" xml:space="preserve">
          <source>The string version of this documents _id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a1c74fdd82e0294b08a374d4ca491fa9c92b9e" translate="yes" xml:space="preserve">
          <source>The type to cast this path to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74efba3f482c6c77951e195a0c6b08a24b03fb63" translate="yes" xml:space="preserve">
          <source>The underlying driver this Mongoose instance uses to communicate with the database. A driver is a Mongoose-specific interface that defines functions like &lt;code&gt;find()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e6a41a58db43df72eac42417f11ea782fba8ad" translate="yes" xml:space="preserve">
          <source>The username specified in the URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1488fa6e3c7ace647cb404eaae7c81bf49a2ec3d" translate="yes" xml:space="preserve">
          <source>The values &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are not cast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4936ffe0364de63842cdc775db808c283ba2a5" translate="yes" xml:space="preserve">
          <source>The various Mongoose SchemaTypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac5aebace01bd23c7d1f1a470b3a532a87e5c47" translate="yes" xml:space="preserve">
          <source>The various Mongoose Types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f43db144a24994b58a9f1266075e541309f24c" translate="yes" xml:space="preserve">
          <source>The various built-in Mongoose Schema Types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa400d64917284840e761d5b3122ee471491cd9" translate="yes" xml:space="preserve">
          <source>The way mongoose tells the difference between the different discriminator models is by the 'discriminator key', which is &lt;code&gt;__t&lt;/code&gt; by default. Mongoose adds a String path called &lt;code&gt;__t&lt;/code&gt; to your schemas that it uses to track which discriminator this document is an instance of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2dbf2cdc3d752ba9afae187e99e742568235c3b" translate="yes" xml:space="preserve">
          <source>There are 2 different ways to overwrite a document (replacing all keys in the document). One way is to use the &lt;a href=&quot;api/document#document_Document-overwrite&quot;&gt;&lt;code&gt;Document#overwrite()&lt;/code&gt; function&lt;/a&gt; followed by &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ac39efdc9e6e8bfb36e688bf2c28d13cbc2c47" translate="yes" xml:space="preserve">
          <source>There are a couple of key differences between update validators and document validators. In the color validation function above, &lt;code&gt;this&lt;/code&gt; refers to the document being validated when using document validation. However, when running update validators, the document being updated may not be in the server's memory, so by default the value of &lt;code&gt;this&lt;/code&gt; is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4830a47bec2f35db4ccc2f420a16c359019560a" translate="yes" xml:space="preserve">
          <source>There are also minor differences in how &lt;code&gt;countDocuments()&lt;/code&gt; handles &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments&quot;&gt;&lt;code&gt;$where&lt;/code&gt; and a couple geospatial operators&lt;/a&gt;. versus &lt;code&gt;count()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2896df6966e65ea17dad1f7d3bca34831c7ee307" translate="yes" xml:space="preserve">
          <source>There are no intentional backwards breaking changes with the &lt;code&gt;useCreateIndex&lt;/code&gt; option, so you should be able to turn this option on without any code changes. If you discover any issues, please &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/new&quot;&gt;open an issue on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c62e050dc814672336d4c39a3a8e37bd2a9e69" translate="yes" xml:space="preserve">
          <source>There are no joins in MongoDB but sometimes we still want references to documents in other collections. This is where &lt;a href=&quot;populate&quot;&gt;population&lt;/a&gt; comes in. Read more about how to include documents from other collections in your query results &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-populate&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f851fa6db1d3d1d8a5e82ce18af74621d0af60e5" translate="yes" xml:space="preserve">
          <source>There are several &lt;a href=&quot;https://github.com/Automattic/mongoose/blob/master/History.md&quot;&gt;backwards-breaking changes&lt;/a&gt; you should be aware of when migrating from Mongoose 4.x to Mongoose 5.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c527be22199a3614076b474e0129cb67f40c5fc6" translate="yes" xml:space="preserve">
          <source>There are several deprecations in the &lt;a href=&quot;http://npmjs.com/package/mongodb&quot;&gt;MongoDB Node.js driver&lt;/a&gt; that Mongoose users should be aware of. Mongoose provides options to work around these deprecation warnings, but you need to test whether these options cause any problems for your application. Please &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/new&quot;&gt;report any issues on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bed25f053e430f656049fd0a5775dd15bb019ad" translate="yes" xml:space="preserve">
          <source>There are several types of values that will be successfully cast to a Number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8372d4a4936f2ff451d92a613fa2836bf8ed6b69" translate="yes" xml:space="preserve">
          <source>There are two classes of errors that can occur with a Mongoose connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eb4a9c97a78671e72e082e17f038ad13c16ade" translate="yes" xml:space="preserve">
          <source>There are two perspectives here. First, you may want the &lt;code&gt;author&lt;/code&gt; know which stories are theirs. Usually, your schema should resolve one-to-many relationships by having a parent pointer in the 'many' side. But, if you have a good reason to want an array of child pointers, you can &lt;code&gt;push()&lt;/code&gt; documents onto the array as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78eeb87bd814c21394d45be7d2298a800dff53d9" translate="yes" xml:space="preserve">
          <source>These operators return documents sorted by distance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b3e943f47ee7e8199f861267aa426da488e0c4" translate="yes" xml:space="preserve">
          <source>Think about &lt;a href=&quot;https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html#transactions-with-mongoose&quot;&gt;modeling a bank account in Mongoose&lt;/a&gt;. To transfer money from account &lt;code&gt;A&lt;/code&gt; to account &lt;code&gt;B&lt;/code&gt;, you would decrement &lt;code&gt;A&lt;/code&gt;'s balance and increment &lt;code&gt;B&lt;/code&gt;'s balance. However, if &lt;code&gt;A&lt;/code&gt; only has a balance of $5 and you try to transfer $10, you want to abort the transaction and undo incrementing &lt;code&gt;B&lt;/code&gt;'s balance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2774fea97dd90ccd409d294fec8d19694ddacb03" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://mongoosejs.com/docs/api.html#connection_Connection&quot;&gt;connection&lt;/a&gt; object is then used to create and retrieve &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model&quot;&gt;models&lt;/a&gt;. Models are &lt;strong&gt;always&lt;/strong&gt; scoped to a single connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab38f8c7b6c70190ec77845894bec17a3997da08" translate="yes" xml:space="preserve">
          <source>This allows us to perform a &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; combo:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a2f2dccec13fc1324b15e05b7c171947ad49b7" translate="yes" xml:space="preserve">
          <source>This also affects the use of &lt;code&gt;doc.set()&lt;/code&gt; to set a property value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4d0f865fe6af836aca0e50d60974fbd670f254" translate="yes" xml:space="preserve">
          <source>This behavior can be overridden by setting &lt;code&gt;minimize&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. It will then store empty objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30e3ff964f5538b57389086ac6ae6d8c5cbefba" translate="yes" xml:space="preserve">
          <source>This function calls the MongoDB driver's &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany&quot;&gt;&lt;code&gt;Collection#deleteMany()&lt;/code&gt; function&lt;/a&gt;. The returned &lt;a href=&quot;../queries&quot;&gt;promise&lt;/a&gt; resolves to an object that contains 3 properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58863114fe1b1aa4250bd1a28a12aadac0cf5ad5" translate="yes" xml:space="preserve">
          <source>This function calls the MongoDB driver's &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne&quot;&gt;&lt;code&gt;Collection#deleteOne()&lt;/code&gt; function&lt;/a&gt;. The returned &lt;a href=&quot;../queries&quot;&gt;promise&lt;/a&gt; resolves to an object that contains 3 properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db41e388efb5283a2e3dbece2464c711a5b48347" translate="yes" xml:space="preserve">
          <source>This function calls the MongoDB driver's &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove&quot;&gt;&lt;code&gt;Collection#remove()&lt;/code&gt; function&lt;/a&gt;. The returned &lt;a href=&quot;../queries&quot;&gt;promise&lt;/a&gt; resolves to an object that contains 3 properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b11ed8b5c7a836b4d99d9edce7e429441d1ffd" translate="yes" xml:space="preserve">
          <source>This function differs slightly from &lt;code&gt;Model.findOneAndRemove()&lt;/code&gt; in that &lt;code&gt;findOneAndRemove()&lt;/code&gt; becomes a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/&quot;&gt;MongoDB &lt;code&gt;findAndModify()&lt;/code&gt; command&lt;/a&gt;, as opposed to a &lt;code&gt;findOneAndDelete()&lt;/code&gt; command. For most mongoose use cases, this distinction is purely pedantic. You should use &lt;code&gt;findOneAndDelete()&lt;/code&gt; unless you have a good reason not to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4d56a4ee258f795e66fdfd1d93978f08571d18" translate="yes" xml:space="preserve">
          <source>This function does &lt;strong&gt;not&lt;/strong&gt; trigger any middleware, not &lt;code&gt;save()&lt;/code&gt; nor &lt;code&gt;update()&lt;/code&gt;. If you need to trigger &lt;code&gt;save()&lt;/code&gt; middleware for every document use &lt;a href=&quot;http://mongoosejs.com/docs/api.html#model_Model.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839d2c7460a74a5345a524c346c45c48198a0d9f" translate="yes" xml:space="preserve">
          <source>This function does &lt;strong&gt;not&lt;/strong&gt; trigger any middleware. In particular, it does &lt;strong&gt;not&lt;/strong&gt; trigger aggregate middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fdd40c5422161e50085bc8a0aed8b92b2b92ae" translate="yes" xml:space="preserve">
          <source>This function does &lt;strong&gt;not&lt;/strong&gt; trigger save middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e383871528ff8b5026286c7a3a25f3dac90ff2" translate="yes" xml:space="preserve">
          <source>This function does not trigger any middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343b3b80e8ccacfc65b894df39e0d70a5251a49a" translate="yes" xml:space="preserve">
          <source>This function does not trigger any middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a474e2d95c489bae2e23dfd7d21d3152a8a35a" translate="yes" xml:space="preserve">
          <source>This function is responsible for building &lt;a href=&quot;https://docs.mongodb.com/manual/indexes/&quot;&gt;indexes&lt;/a&gt;, unless &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#autoIndex&quot;&gt;&lt;code&gt;autoIndex&lt;/code&gt;&lt;/a&gt; is turned off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d78849fdb8eabf54e40d250389dc35cfe04772" translate="yes" xml:space="preserve">
          <source>This function is useful for writing &lt;a href=&quot;../middleware&quot;&gt;query middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffed7a650d05883d11986073abfc831789290c4f" translate="yes" xml:space="preserve">
          <source>This function triggers &lt;code&gt;init&lt;/code&gt;&lt;a href=&quot;../middleware&quot;&gt;middleware&lt;/a&gt;. Note that &lt;code&gt;init&lt;/code&gt; hooks are &lt;a href=&quot;../middleware#synchronous&quot;&gt;synchronous&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3901f95e6a5d55a4bc9cdea7a6aea481438c667f" translate="yes" xml:space="preserve">
          <source>This function triggers the following middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9153e3119336c1823a2a498bed25fc148f5da8" translate="yes" xml:space="preserve">
          <source>This function triggers the following query middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaad747021ce563a1cd10d4581a7999163180ad" translate="yes" xml:space="preserve">
          <source>This getter exists on all documents by default. The getter can be disabled by setting the &lt;code&gt;id&lt;/code&gt;&lt;a href=&quot;../guide#id&quot;&gt;option&lt;/a&gt; of its &lt;code&gt;Schema&lt;/code&gt; to false at construction time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da75ad7c2233168e0710ede0fd906a600cb4c996" translate="yes" xml:space="preserve">
          <source>This helps prevent accidentally overwriting all documents in your collection with &lt;code&gt;{ name: 'jason bourne' }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa572228fc715a2efa6eb6a0b683bc65e2c56d01" translate="yes" xml:space="preserve">
          <source>This helps prevent accidentally overwriting your document with &lt;code&gt;{ name: 'jason bourne' }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4505cdddcc97c0a6185629efb22ff59968e7e34b" translate="yes" xml:space="preserve">
          <source>This is known as a &quot;cross-database populate,&quot; because it enables you to populate across MongoDB databases and even across MongoDB instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d13861979b4b1e4e009ec3807259b50c1b0fe4e" translate="yes" xml:space="preserve">
          <source>This is the connection used by default for every model created using &lt;a href=&quot;#index_Mongoose-model&quot;&gt;mongoose.model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db5d15f7224c157ac9ca13e99c22755e88efab8" translate="yes" xml:space="preserve">
          <source>This is the minimum needed to connect the &lt;code&gt;myapp&lt;/code&gt; database running locally on the default port (27017). If connecting fails on your machine, try using &lt;code&gt;127.0.0.1&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea684bf9b99c4a5887978812e118d1b961a9775" translate="yes" xml:space="preserve">
          <source>This is what mongoose uses to define virtual attributes via &lt;code&gt;Schema.prototype.virtual&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ade25590da3b2686e2276a91c78aca76cfc2cb" translate="yes" xml:space="preserve">
          <source>This means that you must add all middleware and &lt;a href=&quot;plugins&quot;&gt;plugins&lt;/a&gt;&lt;strong&gt;before&lt;/strong&gt; calling &lt;a href=&quot;api/mongoose#mongoose_Mongoose-model&quot;&gt;`mongoose.model()&lt;/a&gt;. The below script will print out &quot;Hello from pre save&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45d8d20bc42850ff504fb9d83ec50d67281972b" translate="yes" xml:space="preserve">
          <source>This method accepts the same options as &lt;a href=&quot;#document_Document-toObject&quot;&gt;Document#toObject&lt;/a&gt;. To apply the options to every document of your schema by default, set your &lt;a href=&quot;#schema_Schema&quot;&gt;schemas&lt;/a&gt;&lt;code&gt;toJSON&lt;/code&gt; option to the same argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aae80214acc3496732a61b6afbd2ae5bcd2466" translate="yes" xml:space="preserve">
          <source>This method is analagous to &lt;a href=&quot;https://lodash.com/docs/4.17.15#pick&quot;&gt;Lodash's &lt;code&gt;pick()&lt;/code&gt; function&lt;/a&gt; for Mongoose schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02438091674aa234cc7479a6babf4151ef1afb94" translate="yes" xml:space="preserve">
          <source>This method is called &lt;code&gt;pre&lt;/code&gt; save and if a validation rule is violated, &lt;a href=&quot;#model_Model-save&quot;&gt;save&lt;/a&gt; is aborted and the error is returned to your &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8485d66a649b5c9238e3e84031904b216443085" translate="yes" xml:space="preserve">
          <source>This method is deprecated. If you want to count the number of documents in a collection, e.g. &lt;code&gt;count({})&lt;/code&gt;, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.estimatedDocumentCount&quot;&gt;&lt;code&gt;estimatedDocumentCount()&lt;/code&gt; function&lt;/a&gt; instead. Otherwise, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.countDocuments&quot;&gt;&lt;code&gt;countDocuments()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7cf4b5016412321101452fc2a89e6a6c2140df" translate="yes" xml:space="preserve">
          <source>This method is deprecated. If you want to count the number of documents in a collection, e.g. &lt;code&gt;count({})&lt;/code&gt;, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-estimatedDocumentCount&quot;&gt;&lt;code&gt;estimatedDocumentCount()&lt;/code&gt; function&lt;/a&gt; instead. Otherwise, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-countDocuments&quot;&gt;&lt;code&gt;countDocuments()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40115da61549deeb637e7679b25ea468c104dd83" translate="yes" xml:space="preserve">
          <source>This method is useful if you need synchronous validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872a06e7bb531beed25cd242d06f639f5d835e5b" translate="yes" xml:space="preserve">
          <source>This method sends a remove command directly to MongoDB, no Mongoose documents are involved. Because no Mongoose documents are involved, Mongoose does not execute &lt;a href=&quot;../middleware#types-of-middleware&quot;&gt;document middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29961f40c3782260023af7810c123ca5e2bd3dd5" translate="yes" xml:space="preserve">
          <source>This option affects the following model and query functions. There are no intentional backwards breaking changes, so you should be able to turn this option on without any code changes. If you discover any issues, please &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/new&quot;&gt;open an issue on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cfa77b86431430e7367a1ac7727b97c1c10f65" translate="yes" xml:space="preserve">
          <source>This option is only valid for operations that write to the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4202cb2d9b6d900a88398fb721d05d34f2fd72f6" translate="yes" xml:space="preserve">
          <source>This performs a search for all documents with a name property that begins with &quot;Fluff&quot; and returns the result as an array of kittens to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e668400c4ba624d590881aa5359f370389f84aee" translate="yes" xml:space="preserve">
          <source>This property is read-only. Modifying this property is a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8063a6648b6c98a3c9b71c6fa1a8fd6ad9ce80" translate="yes" xml:space="preserve">
          <source>This property is typically only useful for plugin authors and advanced users. You do not need to interact with this property at all to use mongoose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61893363ee35c36ba497d31ddb19d2d44574dae" translate="yes" xml:space="preserve">
          <source>This schema type's name, to defend against minifiers that mangle function names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e7df7ab0c8c3f544de045d21e6623b258f40ae" translate="yes" xml:space="preserve">
          <source>This value can be overridden at the model instance level by passing a second boolean argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e564390c3807db384ec558cae06cf77d3a6404e" translate="yes" xml:space="preserve">
          <source>Thrown when a model with the given name was already registered on the connection. See &lt;a href=&quot;https://mongoosejs.com/docs/faq.html#overwrite-model-error&quot;&gt;the FAQ about &lt;code&gt;OverwriteModelError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae59c207c2cee0b19322d994ed5c415cbd7f76f0" translate="yes" xml:space="preserve">
          <source>Thrown when you try to access a model that has not been registered yet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113751998fc1bbfef523746b41311a6165ea6e7d" translate="yes" xml:space="preserve">
          <source>Thrown when your try to pass values to model contrtuctor that were not specified in schema or change immutable properties when &lt;code&gt;strict&lt;/code&gt; mode is &lt;code&gt;&quot;throw&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01f293943f4cc292c75269523345626cb9c6df4" translate="yes" xml:space="preserve">
          <source>To apply these options to every document of your schema by default, set your &lt;a href=&quot;#schema_Schema&quot;&gt;schemas&lt;/a&gt;&lt;code&gt;toObject&lt;/code&gt; option to the same argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f113b6041ddd052ed5fdd75568c63ffb5bc1c42d" translate="yes" xml:space="preserve">
          <source>To avoid these side-effects, a &lt;a href=&quot;subdocs&quot;&gt;Subdocument&lt;/a&gt; path may be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052af526cc4c16093ce4e143d4ea3c8680399947" translate="yes" xml:space="preserve">
          <source>To bypass Mongoose's error messages and just copy the error message that the validator throws, do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84d7839ac5dd39bd21270f93f20883f5aa58230" translate="yes" xml:space="preserve">
          <source>To check whether an object is empty, you can use the &lt;code&gt;$isEmpty()&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dac5914bcc34f541d80c882a2edcb35c0b12ef" translate="yes" xml:space="preserve">
          <source>To connect to a replica set you pass a comma delimited list of hosts to connect to rather than a single host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0172e6a99fbcd82b87f340f3971df5d07dab29c7" translate="yes" xml:space="preserve">
          <source>To connect to a single node replica set, specify the &lt;code&gt;replicaSet&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332fcc7443f8a2393880451fee744ed15cf62660" translate="yes" xml:space="preserve">
          <source>To create a new connection, use &lt;a href=&quot;#mongoose_Mongoose-createConnection&quot;&gt;&lt;code&gt;createConnection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a3bebb914e97da27500e71fc5719f019eee96d" translate="yes" xml:space="preserve">
          <source>To declare a path as a Buffer, you may use either the &lt;code&gt;Buffer&lt;/code&gt; global constructor or the string &lt;code&gt;'Buffer'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b1a3b0cd118fe9dfd04165913d7a3415ab2b72" translate="yes" xml:space="preserve">
          <source>To declare a path as a number, you may use either the &lt;code&gt;Number&lt;/code&gt; global constructor or the string &lt;code&gt;'Number'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf97a81bd41e9a897c1550f16263734d53e999b" translate="yes" xml:space="preserve">
          <source>To declare a path as a string, you may use either the &lt;code&gt;String&lt;/code&gt; global constructor or the string &lt;code&gt;'String'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc47522572472fdfd47148df036fa84dc03d2a30" translate="yes" xml:space="preserve">
          <source>To disable buffering, turn off the &lt;a href=&quot;guide#bufferCommands&quot;&gt;&lt;code&gt;bufferCommands&lt;/code&gt; option on your schema&lt;/a&gt;. If you have &lt;code&gt;bufferCommands&lt;/code&gt; on and your connection is hanging, try turning &lt;code&gt;bufferCommands&lt;/code&gt; off to see if you haven't opened a connection properly. You can also disable &lt;code&gt;bufferCommands&lt;/code&gt; globally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2878f06baa91df1287eaedfe74ddf1e0f72fd632" translate="yes" xml:space="preserve">
          <source>To disable running getters when converting a document to JSON, set the &lt;a href=&quot;../guide#toJSON&quot;&gt;&lt;code&gt;toJSON.getters&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; in your schema&lt;/a&gt; as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e73688801207b5ae948d4f2917746b1b20ea6a3" translate="yes" xml:space="preserve">
          <source>To fix all deprecation warnings, follow the below steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f4d2cc411323846d61e83783cc2f70d9679cba" translate="yes" xml:space="preserve">
          <source>To get the most out of MongoDB, you need to learn the basics of MongoDB schema design. SQL schema design (third normal form) was designed to &lt;a href=&quot;https://en.wikipedia.org/wiki/Third_normal_form&quot;&gt;minimize storage costs&lt;/a&gt;, whereas MongoDB schema design is about making common queries as fast as possible. The &lt;a href=&quot;https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1&quot;&gt;&lt;em&gt;6 Rules of Thumb for MongoDB Schema Design&lt;/em&gt; blog series&lt;/a&gt; is an excellent resource for learning the basic rules for making your queries fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcdb91ac0de7bb24bebae0e022b287754c958098" translate="yes" xml:space="preserve">
          <source>To get/set the session associated with a given document, use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-%24session&quot;&gt;&lt;code&gt;doc.$session()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a1e70b63b52a229fa8d7465663e0e7977d21d6" translate="yes" xml:space="preserve">
          <source>To handle errors after initial connection was established, you should listen for error events on the connection. However, you still need to handle initial connection errors as shown above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcb8e5fa9bb636408c2e73b9e62cf7c375efa75" translate="yes" xml:space="preserve">
          <source>To handle initial connection errors, you should use &lt;code&gt;.catch()&lt;/code&gt; or &lt;code&gt;try/catch&lt;/code&gt; with async/await.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9d440c928aac9d2a1821126a9f1d23b88e27a3" translate="yes" xml:space="preserve">
          <source>To have all virtuals show up in your &lt;code&gt;console.log&lt;/code&gt; output, set the &lt;code&gt;toObject&lt;/code&gt; option to &lt;code&gt;{ getters: true }&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a27d5a468e2f83ebb9ebca77c875336eedb9ff8" translate="yes" xml:space="preserve">
          <source>To include virtuals in &lt;code&gt;res.json()&lt;/code&gt;, you need to set the &lt;a href=&quot;../guide#toJSON&quot;&gt;&lt;code&gt;toJSON&lt;/code&gt; schema option&lt;/a&gt; to &lt;code&gt;{ virtuals: true }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e598ba71277fa907fa1b629cbcced5b66871e7b2" translate="yes" xml:space="preserve">
          <source>To make Mongoose throw an error if your &lt;code&gt;filter&lt;/code&gt; has a property that isn't in the schema, set &lt;code&gt;strictQuery&lt;/code&gt; to &lt;code&gt;'throw'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809d1cc7cac1cc211b0797240c6c26a1d24ebaf6" translate="yes" xml:space="preserve">
          <source>To migrate, replace &lt;code&gt;count()&lt;/code&gt; with &lt;code&gt;countDocuments()&lt;/code&gt;&lt;em&gt;unless&lt;/em&gt; you do not pass any arguments to &lt;code&gt;count()&lt;/code&gt;. If you use &lt;code&gt;count()&lt;/code&gt; to count all documents in a collection as opposed to counting documents that match a query, use &lt;code&gt;estimatedDocumentCount()&lt;/code&gt; instead of &lt;code&gt;countDocuments()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b54c43fd8c888a1d44d36c0b77b22eb16ce4591" translate="yes" xml:space="preserve">
          <source>To opt in to using the new topology engine, use the below line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3397a1d17c5f8625b5a9f1953a91db4dbce09271" translate="yes" xml:space="preserve">
          <source>To opt out of selecting populated fields by default, set &lt;code&gt;selectPopulatedPaths&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ce16ebda0a7a2f8ff2e04f3400bbe07243d5a3" translate="yes" xml:space="preserve">
          <source>To overwrite this default, you need to set the default value to &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a6bffc681a9e49ef88a4df27dff03110875dd1" translate="yes" xml:space="preserve">
          <source>To remove a document from a subdocument array we may pass an object with a matching &lt;code&gt;_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b206aa34cf11893218412c231d6f621b732bfb81" translate="yes" xml:space="preserve">
          <source>To remove this deprecation warning, replace any usage of &lt;code&gt;remove()&lt;/code&gt; with &lt;code&gt;deleteMany()&lt;/code&gt;, &lt;em&gt;unless&lt;/em&gt; you specify the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.remove&quot;&gt;&lt;code&gt;single&lt;/code&gt; option to &lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;single&lt;/code&gt; option limited &lt;code&gt;remove()&lt;/code&gt; to deleting at most one document, so you should replace &lt;code&gt;remove(filter, { single: true })&lt;/code&gt; with &lt;code&gt;deleteOne(filter)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b92b2bcfbc9c2368392aea5e3235416d54827a0" translate="yes" xml:space="preserve">
          <source>To report an error in an init hook, you must throw a &lt;strong&gt;synchronous&lt;/strong&gt; error. Unlike all other middleware, init middleware does &lt;strong&gt;not&lt;/strong&gt; handle promise rejections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca1388200037612c54d5fda2b148b08991012d5" translate="yes" xml:space="preserve">
          <source>To see all available &lt;code&gt;toJSON/toObject&lt;/code&gt; options, read &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;this&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea51bf6b67555cc56f4e1d2e96dd8b1fac67cb6" translate="yes" xml:space="preserve">
          <source>To see all available &lt;code&gt;toObject&lt;/code&gt; options, read &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;this&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936b69dfe42dfaf73bdeccbc74a3a77bc01526ce" translate="yes" xml:space="preserve">
          <source>To skip getters on a one-off basis, use &lt;a href=&quot;../api/document#document_Document-get&quot;&gt;&lt;code&gt;user.get()&lt;/code&gt; with the &lt;code&gt;getters&lt;/code&gt; option set to &lt;code&gt;false&lt;/code&gt;&lt;/a&gt; as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d977df13d00f522ba6977206c9f94ba7abcf7276" translate="yes" xml:space="preserve">
          <source>To specify a type of ObjectId, use &lt;code&gt;Schema.Types.ObjectId&lt;/code&gt; in your declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a359a019005fcad390929cce06ceda6a4d6bc3c4" translate="yes" xml:space="preserve">
          <source>To test your app with &lt;code&gt;{ useNewUrlParser: true }&lt;/code&gt;, you only need to check whether your app successfully connects. Once Mongoose has successfully connected, the URL parser is no longer important. If you can't connect with &lt;code&gt;{ useNewUrlParser: true }&lt;/code&gt;, please &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/new&quot;&gt;open an issue on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ba82b776eb16d519dba6b0ef85765ec9591a74" translate="yes" xml:space="preserve">
          <source>To turn on update validators, set the &lt;code&gt;runValidators&lt;/code&gt; option for &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, or &lt;code&gt;findOneAndUpdate()&lt;/code&gt;. Be careful: update validators are off by default because they have several caveats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2573edd3c492b4a15104150a4f2afe3d563f1937" translate="yes" xml:space="preserve">
          <source>To use our schema definition, we need to convert our &lt;code&gt;blogSchema&lt;/code&gt; into a &lt;a href=&quot;models&quot;&gt;Model&lt;/a&gt; we can work with. To do so, we pass it into &lt;code&gt;mongoose.model(modelName, schema)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb6976397a5eaebe09dcd536f28428f12e9e44a" translate="yes" xml:space="preserve">
          <source>To use transactions with Mongoose, you should use Mongoose &lt;code&gt;&amp;gt;= 5.2.0&lt;/code&gt;. To check your current version of Mongoose, run &lt;code&gt;npm list | grep &quot;mongoose&quot;&lt;/code&gt; or check the &lt;a href=&quot;http://mongoosejs.com/docs/api.html#mongoose_Mongoose-version&quot;&gt;&lt;code&gt;mongoose.version&lt;/code&gt; property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f317a99ee120dd54a1d67c05597617f83f16f70" translate="yes" xml:space="preserve">
          <source>Transactions are built on &lt;a href=&quot;https://docs.mongodb.com/manual/reference/server-sessions/&quot;&gt;MongoDB sessions&lt;/a&gt;. To start a transaction, you first need to call &lt;a href=&quot;https://mongoosejs.com/docs/api.html#startsession_startSession&quot;&gt;&lt;code&gt;startSession()&lt;/code&gt;&lt;/a&gt; and then call the session's &lt;code&gt;startTransaction()&lt;/code&gt; function. To execute an operation in a transaction, you need to pass the &lt;code&gt;session&lt;/code&gt; as an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37cd8811830ee25b283b35d48ab42c4352b906e" translate="yes" xml:space="preserve">
          <source>Transactions in Mongoose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes" xml:space="preserve">
          <source>Transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a418b410b86c514d1d07f113c6c43d1b10966b97" translate="yes" xml:space="preserve">
          <source>Transform functions receive three arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75dbe2ac7ac3b40e7f67bd0bfead0594b6c3fd48" translate="yes" xml:space="preserve">
          <source>Transformations may also be applied inline, overridding any transform set in the options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22611e06d42f8df5d5fa668bb464d1c5c3306f9" translate="yes" xml:space="preserve">
          <source>Transforms, like all of these options, are also available for &lt;code&gt;toJSON&lt;/code&gt;. See &lt;a href=&quot;https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html&quot;&gt;this guide to &lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; to learn why &lt;code&gt;toJSON()&lt;/code&gt; and &lt;code&gt;toObject()&lt;/code&gt; are separate functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33d75090c9e345b7e0473bd80fbd3e57ff5adb1" translate="yes" xml:space="preserve">
          <source>Translate any aliases fields/conditions so the final query or document object is pure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f872258569d2bca294ff7592d0b9210146eb9f9" translate="yes" xml:space="preserve">
          <source>Types of Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c02047b4473ab1d57fc7225f4164216e6bcfaf2" translate="yes" xml:space="preserve">
          <source>Types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b56e80d042241991053a18ae184feef7acd408" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;code&gt;MyModel.exists({ answer: 42 })&lt;/code&gt; is equivalent to &lt;code&gt;MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean().then(doc =&amp;gt; !!doc)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f958d35ca1a419d82c51cf6484ae06a35741ed40" translate="yes" xml:space="preserve">
          <source>Under the hood, after executing a query, Mongoose converts the query results from POJOs to Mongoose documents. If you turn on the &lt;code&gt;lean&lt;/code&gt; option, Mongoose skips this step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc76074b55c7203e97ce652c1ad739534ba47d2" translate="yes" xml:space="preserve">
          <source>Understanding Virtuals in Mongoose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68e9910fc08e953c2132ac9290a454cdc92ae3c" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;createCollection()&lt;/code&gt; cannot change an existing collection. For example, if you add &lt;code&gt;capped: 1024&lt;/code&gt; to your schema and the existing collection is not capped, &lt;code&gt;createCollection()&lt;/code&gt; will throw an error. Generally, &lt;code&gt;autoCreate&lt;/code&gt; should be &lt;code&gt;false&lt;/code&gt; for production environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f3a0b327709bca66129149ce80d7bec11710ee" translate="yes" xml:space="preserve">
          <source>Unless it is running on a query with &lt;code&gt;setDefaultsOnInsert&lt;/code&gt;, a default function's &lt;code&gt;this&lt;/code&gt; refers to the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48d59e925049c5ed0dcb4ab6c04ab78b083cfd2" translate="yes" xml:space="preserve">
          <source>Unless you're an advanced user, do &lt;strong&gt;not&lt;/strong&gt; instantiate this class directly. Use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#aggregate_Aggregate-cursor&quot;&gt;&lt;code&gt;Aggregate#cursor()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bcadf4e9401a7b0f67a086e8e877ff855006e5" translate="yes" xml:space="preserve">
          <source>Unless you're an advanced user, do &lt;strong&gt;not&lt;/strong&gt; instantiate this class directly. Use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-cursor&quot;&gt;&lt;code&gt;Query#cursor()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f498ce9757c3b16a87602a27135788e6cf50e3c5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;autoIndex&lt;/code&gt;, &lt;code&gt;autoCreate&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; by default. You can change this default by setting &lt;a href=&quot;api/mongoose#mongoose_Mongoose-set&quot;&gt;&lt;code&gt;mongoose.set('autoCreate', true);&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a8c8e71d21cb23734cc0784e37c3c67cd35cb1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;projection()&lt;/code&gt;, the &lt;code&gt;select()&lt;/code&gt; function modifies the current projection in place. This function overwrites the existing projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe29553f68fac1e044365bdff0d8e31717e0bfb4" translate="yes" xml:space="preserve">
          <source>Update Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919c276760d64d0ec5eb6527cb7c4375352399bf" translate="yes" xml:space="preserve">
          <source>Update Validators Only Run For Some Operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe1423888f5b1c21393f01a1161cfe6111d8357" translate="yes" xml:space="preserve">
          <source>Update Validators Only Run On Updated Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91235b030982be308d620f905018cff43cd731e1" translate="yes" xml:space="preserve">
          <source>Update Validators and &lt;code&gt;this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d4071cc605da1abb2adfa96ff1d84a75ee8326" translate="yes" xml:space="preserve">
          <source>Updates one document in the database without returning it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fa3772a0220aadfec7971e2d5ace2a583bf7dd" translate="yes" xml:space="preserve">
          <source>Upper &amp;laquo;[Array]&amp;raquo; Right Coords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf370c8be14aec5bf067a647eb5d59e529d78b53" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;replaceOne()&lt;/code&gt; if you want to overwrite an entire document rather than using &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern&quot;&gt;atomic&lt;/a&gt; operators like &lt;code&gt;$set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7468b2b7e432f5b2e4f37f4d0c55b08b3d7656b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;replaceOne()&lt;/code&gt; if you want to overwrite an entire document rather than using atomic operators like &lt;code&gt;$set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c0671a0be6041e5f1d3866fb7667e4202e512d" translate="yes" xml:space="preserve">
          <source>Use Cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac0f7588844d4da651d1086bf632657dc209615" translate="yes" xml:space="preserve">
          <source>Users looking to master MongoDB schema design in Node.js should look into &lt;a href=&quot;http://bit.ly/mongodb-schema-design&quot;&gt;&lt;em&gt;The Little MongoDB Schema Design Book&lt;/em&gt;&lt;/a&gt; by Christian Kvalheim, the original author of the &lt;a href=&quot;http://npmjs.com/package/mongodb&quot;&gt;MongoDB Node.js driver&lt;/a&gt;. This book shows you how to implement performant schemas for a laundry list of use cases, including ecommerce, wikis, and appointment bookings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cce20dae96abbe9087ae2d931cecc06aca92c38" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lean()&lt;/code&gt; bypasses all Mongoose features, including &lt;a href=&quot;virtuals&quot;&gt;virtuals&lt;/a&gt;, &lt;a href=&quot;getters-setters&quot;&gt;getters/setters&lt;/a&gt;, and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-default&quot;&gt;defaults&lt;/a&gt;. If you want to use these features with &lt;code&gt;lean()&lt;/code&gt;, you need to use the corresponding plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cb247f00072e3c5aaaff1b90c697f3651c45fb" translate="yes" xml:space="preserve">
          <source>Using Lean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b311d23dd9b58e7fa6da00429aabb2946648cc" translate="yes" xml:space="preserve">
          <source>Using discriminators with &lt;code&gt;Model.create()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb011281310a8377986514d2a678438ed864612e" translate="yes" xml:space="preserve">
          <source>Using this exposed access to the &lt;code&gt;Mixed&lt;/code&gt; SchemaType, we can use them in our schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107b78f65b4ad3113b241f9fece47478eb30950d" translate="yes" xml:space="preserve">
          <source>Using this exposed access to the &lt;code&gt;ObjectId&lt;/code&gt; type, we can construct ids on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e07bf1a08c6238fcea3aef0b467a87a7c35029" translate="yes" xml:space="preserve">
          <source>Valid options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850c962c3f063b586578621ee12bbb84d6f38bb7" translate="yes" xml:space="preserve">
          <source>Valid options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61e59d62b7eeb5e38a0d9a680e088c1afbb6f1f" translate="yes" xml:space="preserve">
          <source>Validating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e01fb19ea64886f4d64d5a6d8f7601d4d3b1b7" translate="yes" xml:space="preserve">
          <source>Validation Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16759be08d55e55382dc52d7900468ce5c715ff7" translate="yes" xml:space="preserve">
          <source>Validation is &lt;a href=&quot;middleware&quot;&gt;middleware&lt;/a&gt;. Mongoose registers validation as a &lt;code&gt;pre('save')&lt;/code&gt; hook on every schema by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4b29cf3e49405bb734572c4492e00be54bd5f8" translate="yes" xml:space="preserve">
          <source>Validation is asynchronously recursive; when you call &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-save&quot;&gt;Model#save&lt;/a&gt;, sub-document validation is executed as well. If an error occurs, your &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-save&quot;&gt;Model#save&lt;/a&gt; callback receives it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6f3056e69408a4557ed6188d986eb9fd974fb6" translate="yes" xml:space="preserve">
          <source>Validation is customizable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f9fa48e6114a46e7b68868fdd2230765e4afc1" translate="yes" xml:space="preserve">
          <source>Validation is defined in the &lt;a href=&quot;schematypes&quot;&gt;SchemaType&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7bf7d460707439b5db653d8388dd40fa4bd0fd" translate="yes" xml:space="preserve">
          <source>Validation occurs &lt;code&gt;pre('save')&lt;/code&gt; or whenever you manually execute &lt;a href=&quot;#document_Document-validate&quot;&gt;document#validate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be38b272d29b2d69a9cec2a73673ca128a2e1b59" translate="yes" xml:space="preserve">
          <source>Validators always receive the value to validate as their first argument and must return &lt;code&gt;Boolean&lt;/code&gt;. Returning &lt;code&gt;false&lt;/code&gt; or throwing an error means validation failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb18438fb4b13d70314e85b1df697311f2ec4c22" translate="yes" xml:space="preserve">
          <source>Validators are not run on undefined values. The only exception is the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-required&quot;&gt;&lt;code&gt;required&lt;/code&gt; validator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572df22101374201e99260f1be21b4a44a8039c3" translate="yes" xml:space="preserve">
          <source>Values are cast to their appropriate types when using the findAndModify helpers. However, the below are not executed by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d369480ef0f22b857ab064743290d4ceefa1a2f0" translate="yes" xml:space="preserve">
          <source>Version Requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f764dd6eac3ff8df0c9db4cade29426f8437f2" translate="yes" xml:space="preserve">
          <source>Virtual Setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d8d66b7276e0c56d83ab3f0b77e81cf4f5c461" translate="yes" xml:space="preserve">
          <source>Virtual property setters are applied before other validation. So the example above would still work even if the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; name fields were required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adcd98f848658b51e083c4df470415a71eb8de7" translate="yes" xml:space="preserve">
          <source>VirtualType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab996c8a324b46008870fd5e708d6cb38862b11" translate="yes" xml:space="preserve">
          <source>VirtualType constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a45986286f301b870eb427fb80c94cb37af984" translate="yes" xml:space="preserve">
          <source>VirtualType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebd6521d66dd553423b34f897a6ce8e6b4eb066" translate="yes" xml:space="preserve">
          <source>VirtualType, &amp;laquo;Function(Any|&amp;raquo; Document)} fn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b1c8cb7dcc8269fcc59d0c38e88b7e76f4b572" translate="yes" xml:space="preserve">
          <source>VirtualType.prototype.applyGetters()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7d4c66d75f763a52b3bc2968cb03567a15d5e5" translate="yes" xml:space="preserve">
          <source>VirtualType.prototype.applySetters()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15542fbc500e2b30049a7629cffdc3ec6fc4e3ed" translate="yes" xml:space="preserve">
          <source>VirtualType.prototype.get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78a12c09d460d927a67f5d8733d87e71c676e14" translate="yes" xml:space="preserve">
          <source>VirtualType.prototype.set()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd99de80f5684605609488cb06f7441d56c9c1a" translate="yes" xml:space="preserve">
          <source>Virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652f55f62acf130a0e4c59cf55f93f9a0b954359" translate="yes" xml:space="preserve">
          <source>Virtuals are properties on Mongoose documents. If you use the &lt;a href=&quot;lean&quot;&gt;lean option&lt;/a&gt;, that means your queries return POJOs rather than full Mongoose documents. That means no virtuals if you use &lt;a href=&quot;../api/query#query_Query-lean&quot;&gt;&lt;code&gt;lean()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177a2737f397e7e152f9650ce782783a385808a1" translate="yes" xml:space="preserve">
          <source>Virtuals in JSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d505ccf3768856eb209dd4fc09403370ed70db" translate="yes" xml:space="preserve">
          <source>Virtuals in Mongoose Schemas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6290a79065f5bc9c4f396a47f358f71df9044e59" translate="yes" xml:space="preserve">
          <source>Virtuals with Lean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf74ab239a3c2e474e039f805d170fa16556a2d" translate="yes" xml:space="preserve">
          <source>Virtualtype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ebb6bb4e39c19e28483d39ded52467ae138f86" translate="yes" xml:space="preserve">
          <source>Want to learn how to check whether your favorite npm modules work with async/await without cobbling together contradictory answers from Google and Stack Overflow? Chapter 4 of Mastering Async/Await explains the basic principles for determining whether frameworks like React and Mongoose support async/await. &lt;a href=&quot;http://asyncawait.net/?utm_source=mongoosejs&amp;amp;utm_campaign=promises&quot;&gt;Get your copy!&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1006170cba9af896712d2ef66b255393906716d6" translate="yes" xml:space="preserve">
          <source>Want to register a plugin for all schemas? The mongoose singleton has a &lt;code&gt;.plugin()&lt;/code&gt; function that registers a plugin for every schema. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619b47f13cd1b3c39ba4ad14f2685ef7774d3ba9" translate="yes" xml:space="preserve">
          <source>We have a pending connection to the test database running on localhost. We now need to get notified if we connect successfully or if a connection error occurs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf367b581e27b8df47f8b2d1308c522b0c58abeb" translate="yes" xml:space="preserve">
          <source>We have talking kittens! But we still haven't saved anything to MongoDB. Each document can be saved to the database by calling its &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-save&quot;&gt;save&lt;/a&gt; method. The first argument to the callback will be an error if any occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e6b5e265d60bce5cb476a1d2897fdb521b20cf" translate="yes" xml:space="preserve">
          <source>We just added last-modified behavior to both our &lt;code&gt;Game&lt;/code&gt; and &lt;code&gt;Player&lt;/code&gt; schemas and declared an index on the &lt;code&gt;lastMod&lt;/code&gt; path of our Games to boot. Not bad for a few lines of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212417e22893a228e20c575a17d210436169b802" translate="yes" xml:space="preserve">
          <source>We just logged all of the kittens in our db to the console. If we want to filter our kittens by name, Mongoose supports MongoDBs rich &lt;a href=&quot;queries&quot;&gt;querying&lt;/a&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f9bff32b562d5ee3873953d1e8e9bbf0d1657d" translate="yes" xml:space="preserve">
          <source>We may find however, if we use the &lt;code&gt;author&lt;/code&gt; object, we are unable to get a list of the stories. This is because no &lt;code&gt;story&lt;/code&gt; objects were ever 'pushed' onto &lt;code&gt;author.stories&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925cfa7a8c1834ebaa27192ca5b206e3f34dc513" translate="yes" xml:space="preserve">
          <source>We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional &lt;code&gt;transform&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bca032db12a6aa87716df081ec4b68b678e2f38" translate="yes" xml:space="preserve">
          <source>We no longer have a pre-compiled version of mongoose for the browser. If you want to use mongoose schemas in the browser, you need to build your own bundle with browserify/webpack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811e095c5174ddeb5e27c108fa370a8684e94d5e" translate="yes" xml:space="preserve">
          <source>What If There's No Foreign Document?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098da26c7424264656fca48d304bd0fc645e3485" translate="yes" xml:space="preserve">
          <source>What if we only want a few specific fields returned for the populated documents? This can be accomplished by passing the usual &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-select&quot;&gt;field name syntax&lt;/a&gt; as the second argument to the populate method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cad2223707bc15e56ae52ead49d25a991a74495" translate="yes" xml:space="preserve">
          <source>What if we wanted to populate multiple paths at the same time?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aad4f908677c3961387545372f642a9cf1a8aa5" translate="yes" xml:space="preserve">
          <source>What if we wanted to populate our fans array based on their age and select just their names?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fbe6043738a30f2e0ade69176d437db2bb1c98" translate="yes" xml:space="preserve">
          <source>What is a SchemaType?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c265206f825ceddca490bf2edb38b96ddcda4807" translate="yes" xml:space="preserve">
          <source>What is a Subdocument?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af5c9cc9c4a891b199092c55e34d1acccfd46d7" translate="yes" xml:space="preserve">
          <source>When a Query is passed, conditions, field selection and options are merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b286afd79d82387fed828ac3a9938b4697ac1a" translate="yes" xml:space="preserve">
          <source>When called with one argument, the most recent path passed to &lt;code&gt;where()&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35de850a28a00849504093027a7db7a259f541c9" translate="yes" xml:space="preserve">
          <source>When executing a query with a &lt;code&gt;callback&lt;/code&gt; function, you specify your query as a JSON document. The JSON document's syntax is the same as the &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/query-documents/&quot;&gt;MongoDB shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b048cbc12ba06299dddf761ea21fcfabdecbb091" translate="yes" xml:space="preserve">
          <source>When to Use Lean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f808f7a96ba0df2cfff7083d9147827689f5f9c4" translate="yes" xml:space="preserve">
          <source>When using string syntax, prefixing a path with &lt;code&gt;-&lt;/code&gt; will flag that path as excluded. When a path does not have the &lt;code&gt;-&lt;/code&gt; prefix, it is included. Lastly, if a path is prefixed with &lt;code&gt;+&lt;/code&gt;, it forces inclusion of the path, which is useful for paths excluded at the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-select&quot;&gt;schema level&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7504c55747dd65991a388293fae8eb2b654b7cd2" translate="yes" xml:space="preserve">
          <source>When using update validators, &lt;code&gt;required&lt;/code&gt; validators &lt;strong&gt;only&lt;/strong&gt; fail when you try to explicitly &lt;code&gt;$unset&lt;/code&gt; the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843a11d7cd845d3a33f79c37e3463a840286ae75" translate="yes" xml:space="preserve">
          <source>When you call &lt;code&gt;mongoose.model()&lt;/code&gt; on a schema, Mongoose &lt;em&gt;compiles&lt;/em&gt; a model for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f739475357323d20db6c8b466c7db1a461d7f24e" translate="yes" xml:space="preserve">
          <source>When you enable &lt;code&gt;useUnifiedTopology&lt;/code&gt;, please remove those options from your &lt;a href=&quot;api/mongoose#mongoose_Mongoose-connect&quot;&gt;&lt;code&gt;mongoose.connect()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api/mongoose#mongoose_Mongoose-createConnection&quot;&gt;&lt;code&gt;createConnection()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161c3775ea1434d4730085826b653a04d6e2f5b1" translate="yes" xml:space="preserve">
          <source>When you execute the query using &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-exec&quot;&gt;&lt;code&gt;Query#exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-then&quot;&gt;&lt;code&gt;Query#then()&lt;/code&gt;&lt;/a&gt;, Mongoose &lt;em&gt;casts&lt;/em&gt; the filter to match your schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46bfa36d1f227ba926cb507213be35fc0864eae" translate="yes" xml:space="preserve">
          <source>When you load documents from MongoDB using model functions like &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOne&quot;&gt;&lt;code&gt;findOne()&lt;/code&gt;&lt;/a&gt;, you get a Mongoose document back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ef74e3587640e676f5650ec286bc16df4757c3" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;Model.create()&lt;/code&gt;, mongoose will pull the correct type from the discriminator key for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df7053e1e8f80e95850100fb1e3418616aa607e" translate="yes" xml:space="preserve">
          <source>When your application starts up, Mongoose automatically calls &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex&quot;&gt;&lt;code&gt;createIndex&lt;/code&gt;&lt;/a&gt; for each defined index in your schema. Mongoose will call &lt;code&gt;createIndex&lt;/code&gt; for each index sequentially, and emit an 'index' event on the model when all the &lt;code&gt;createIndex&lt;/code&gt; calls succeeded or when there was an error. While nice for development, it is recommended this behavior be disabled in production since index creation can cause a &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-creation/#index-build-impact-on-database-performance&quot;&gt;significant performance impact&lt;/a&gt;. Disable the behavior by setting the &lt;code&gt;autoIndex&lt;/code&gt; option of your schema to &lt;code&gt;false&lt;/code&gt;, or globally on the connection by setting the option &lt;code&gt;autoIndex&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7063ba415d912749d63590e5eaca2e3f392ca9" translate="yes" xml:space="preserve">
          <source>Whether to include or exclude this path by default when loading documents using &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;findOne()&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cadc50c41cb616407a7f453a5588a0ff2e4747" translate="yes" xml:space="preserve">
          <source>With Mongoose Documents and &lt;code&gt;save()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ef6fa71a51c71865d6dbaad3d0129a3585ba71" translate="yes" xml:space="preserve">
          <source>With Mongoose, everything is derived from a &lt;a href=&quot;guide&quot;&gt;Schema&lt;/a&gt;. Let's get a reference to it and define our kittens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635beaea38823de52fe377e65d5aa366b34c40c0" translate="yes" xml:space="preserve">
          <source>With the Aggregation Framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf0912215c8eae2fe2e2f14fbf664356b1cd023" translate="yes" xml:space="preserve">
          <source>With transformations we can do a lot more than remove properties. We can even return completely new customized objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223e719046b7b7fd5730d36e83d8efc28ad995c5" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop&quot;&gt;&lt;code&gt;Array#pop&lt;/code&gt;&lt;/a&gt; with proper change tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f05b60989655081f776fae881204fdd9edcd921" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push&quot;&gt;&lt;code&gt;Array#push&lt;/code&gt;&lt;/a&gt; with proper change tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530cc76906b1f03637421b8a98c61c8ff30af31d" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;&lt;code&gt;Array#sort&lt;/code&gt;&lt;/a&gt; with proper change tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e830477a9490dca27f3f55d817d59bc6087fdcb" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;Array#splice&lt;/code&gt;&lt;/a&gt; with proper change tracking and casting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3c469ae9cf1b84af090e629c35851abb00a865" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift&quot;&gt;&lt;code&gt;Array#shift&lt;/code&gt;&lt;/a&gt; with proper change tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4baaa7e489ceaa4f33ebb94e4efe046fae76844" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift&quot;&gt;&lt;code&gt;Array#unshift&lt;/code&gt;&lt;/a&gt; with proper change tracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507d52e5b1af82c3da610e59d0f321e8e7455d5e" translate="yes" xml:space="preserve">
          <source>Write operations like &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, and &lt;code&gt;findOneAndUpdate()&lt;/code&gt; only check the top-level schema's strict mode setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677938555b04b8e4ca8c36d0ad58aba2990a5796" translate="yes" xml:space="preserve">
          <source>Yet more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a7089aa98a67767ba29a8bcb1f2b139f896a39" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;cannot&lt;/strong&gt; access the document being updated in &lt;code&gt;pre('updateOne')&lt;/code&gt; or &lt;code&gt;pre('findOneAndUpdate')&lt;/code&gt; middleware. If you need to access the document that will be updated, you need to execute an explicit query for the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133369435434a35434d0d8bbf2164629187cc013" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;http://nodejs.org/api/stream.html&quot;&gt;stream&lt;/a&gt; query results from MongoDB. You need to call the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-cursor&quot;&gt;Query#cursor()&lt;/a&gt; function to return an instance of &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-cursor&quot;&gt;QueryCursor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb71f3bf0518f2569c6569617fd37e218319aaa1" translate="yes" xml:space="preserve">
          <source>You can &lt;strong&gt;only&lt;/strong&gt; use this option on subdocuments. Mongoose can't save a document without knowing its id, so you will get an error if you try to save a document without an &lt;code&gt;_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814ad22931c8ccfaa6ffb1fcb07f1e6163a1d77a" translate="yes" xml:space="preserve">
          <source>You can add any property you want to your SchemaType options. Many plugins rely on custom SchemaType options. For example, the &lt;a href=&quot;http://plugins.mongoosejs.io/plugins/autopopulate&quot;&gt;mongoose-autopopulate&lt;/a&gt; plugin automatically populates paths if you set &lt;code&gt;autopopulate: true&lt;/code&gt; in your SchemaType options. Mongoose comes with support for several built-in SchemaType options, like &lt;code&gt;lowercase&lt;/code&gt; in the above example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59945f70abd4bbef0dfe94b26b03312a6854ec7d" translate="yes" xml:space="preserve">
          <source>You can also &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-set&quot;&gt;set the global &lt;code&gt;useNewUrlParser&lt;/code&gt; option&lt;/a&gt; to turn on &lt;code&gt;useNewUrlParser&lt;/code&gt; for every connection by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05218a5fc2bfb2c85a3e0db20306cb5b3a09f49d" translate="yes" xml:space="preserve">
          <source>You can also add a custom setter to your virtual that will let you set both first name and last name via the &lt;code&gt;fullName&lt;/code&gt; virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cddf4fe06a82d737e8bb107681f2b671f765f57" translate="yes" xml:space="preserve">
          <source>You can also add query helper functions, which are like instance methods but for mongoose queries. Query helper methods let you extend mongoose's &lt;a href=&quot;queries&quot;&gt;chainable query builder API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a40d3fd38d810aae1503e5f7bcce2502c9e48a5" translate="yes" xml:space="preserve">
          <source>You can also add static functions to your model. There are 2 equivalent ways to add a static:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af5bb500c462ba3430b9ebe906c377b63de0285" translate="yes" xml:space="preserve">
          <source>You can also configure &lt;code&gt;useCreateIndex&lt;/code&gt; by passing it through the connection options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa996846aead711e57017895fd468904ba7d6c4" translate="yes" xml:space="preserve">
          <source>You can also configure &lt;code&gt;useFindAndModify&lt;/code&gt; by passing it through the connection options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1165fbf652d857f74f5aa318608b64c283d79d7c" translate="yes" xml:space="preserve">
          <source>You can also connect to multiple &lt;a href=&quot;https://docs.mongodb.com/manual/reference/program/mongos/&quot;&gt;mongos&lt;/a&gt; instances for high availability in a sharded cluster. You do &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/tutorials/connect/#connect-to-sharded-cluster&quot;&gt;not need to pass any special options to connect to multiple mongos&lt;/a&gt; in mongoose 5.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c66b8927edef04cde75a6523bcc5190175cf14d" translate="yes" xml:space="preserve">
          <source>You can also declare aliases on nested paths. It is easier to use nested schemas and &lt;a href=&quot;subdocs&quot;&gt;subdocuments&lt;/a&gt;, but you can also declare nested path aliases inline as long as you use the full nested path &lt;code&gt;nested.myProp&lt;/code&gt; as the alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a9e22d25e58ab45a809050bf3ca33aceb46cc2" translate="yes" xml:space="preserve">
          <source>You can also define &lt;a href=&quot;https://docs.mongodb.com/manual/indexes/&quot;&gt;MongoDB indexes&lt;/a&gt; using schema type options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9d3e1a1db73d34e42f8e4976c3cecf4cff2030" translate="yes" xml:space="preserve">
          <source>You can also define discriminators on embedded document arrays. Embedded discriminators are different because the different discriminator types are stored in the same document array (within a document) rather than the same collection. In other words, embedded discriminators let you store subdocuments matching different schemas in the same array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8f51d45bd98b72503a952b4c320b8a53736a5d" translate="yes" xml:space="preserve">
          <source>You can also define discriminators on single nested subdocuments, similar to how you can define discriminators on arrays of subdocuments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106e7bd1167ae148a496bb8c218c3e4a4e8c69ae" translate="yes" xml:space="preserve">
          <source>You can also define embedded discriminators on embedded discriminators. In the below example, &lt;code&gt;sub_events&lt;/code&gt; is an embedded discriminator, and for &lt;code&gt;sub_event&lt;/code&gt; keys with value 'SubEvent', &lt;code&gt;sub_events.events&lt;/code&gt; is an embedded discriminator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81832d7715c155f36e4f5ab554ed8572ddc107a9" translate="yes" xml:space="preserve">
          <source>You can also define hooks for the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.aggregate&quot;&gt;&lt;code&gt;Model.aggregate()&lt;/code&gt; function&lt;/a&gt;. In aggregation middleware functions, &lt;code&gt;this&lt;/code&gt; refers to the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#Aggregate&quot;&gt;Mongoose &lt;code&gt;Aggregate&lt;/code&gt; object&lt;/a&gt;. For example, suppose you're implementing soft deletes on a &lt;code&gt;Customer&lt;/code&gt; model by adding an &lt;code&gt;isDeleted&lt;/code&gt; property. To make sure &lt;code&gt;aggregate()&lt;/code&gt; calls only look at customers that aren't soft deleted, you can use the below middleware to add a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#aggregate_Aggregate-match&quot;&gt;&lt;code&gt;$match&lt;/code&gt; stage&lt;/a&gt; to the beginning of each &lt;a href=&quot;https://docs.mongodb.com/manual/core/aggregation-pipeline/&quot;&gt;aggregation pipeline&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4137390c695052ea652849b549ab67863a2958" translate="yes" xml:space="preserve">
          <source>You can also set the &lt;code&gt;default&lt;/code&gt; schema option to a function. Mongoose will execute that function and use the return value as the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9022f13a6f503c4413f69212c8306384f17bda69" translate="yes" xml:space="preserve">
          <source>You can also specify driver options in your connection string as &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;&gt;parameters in the query string&lt;/a&gt; portion of the URI. This only applies to options passed to the MongoDB driver. You &lt;strong&gt;can't&lt;/strong&gt; set Mongoose-specific options like &lt;code&gt;bufferCommands&lt;/code&gt; in the query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee6977dab310db5a73bfd5253dfc6df67599a08" translate="yes" xml:space="preserve">
          <source>You can also specify several more parameters in the &lt;code&gt;uri&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7581bd26fc4ae0a240bd17c076ed28331c642135" translate="yes" xml:space="preserve">
          <source>You can also use setters to modify other properties on the document. If you're setting a property &lt;code&gt;name&lt;/code&gt; on a document, the setter will run with &lt;code&gt;this&lt;/code&gt; as the document. Be careful, in mongoose 5 setters will also run when querying by &lt;code&gt;name&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; as the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848391d4927d9caedb90764611d10a7b8c6d311a" translate="yes" xml:space="preserve">
          <source>You can also use virtuals to set multiple properties at once as an alternative to &lt;a href=&quot;getters-setters#setters&quot;&gt;custom setters on normal properties&lt;/a&gt;. For example, suppose you have two string properties: &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;. You can create a virtual property &lt;code&gt;fullName&lt;/code&gt; that lets you set both of these properties at once. The key detail is that, in virtual getters and setters, &lt;code&gt;this&lt;/code&gt; refers to the document the virtual is attached to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee26095b11cc461de7330ec5d79dbeb7704ff79" translate="yes" xml:space="preserve">
          <source>You can configure the timeout using the &lt;code&gt;serverSelectionTimeoutMS&lt;/code&gt; option to &lt;code&gt;mongoose.connect()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298d6ad64f09ce565504ed404149bf300bb33639" translate="yes" xml:space="preserve">
          <source>You can configure this behavior using the &lt;a href=&quot;../guide#strictQuery&quot;&gt;&lt;code&gt;strictQuery&lt;/code&gt; option for schemas&lt;/a&gt;. This option is analagous to the &lt;a href=&quot;../guide#strict&quot;&gt;&lt;code&gt;strict&lt;/code&gt; option&lt;/a&gt;. Setting &lt;code&gt;strictQuery&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; removes non-schema properties from the filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257ddde84c3cdf504f1a5e235ed20d6cddccaff9" translate="yes" xml:space="preserve">
          <source>You can connect to MongoDB with the &lt;code&gt;mongoose.connect()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a673dfb8730ff3be899e3cdbe2796965cfcb24f" translate="yes" xml:space="preserve">
          <source>You can declare a schema type using the type directly, or an object with a &lt;code&gt;type&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ffe46bea9a5c4e0cdbe0b02b4c89a9523c0c45" translate="yes" xml:space="preserve">
          <source>You can find a full list of officially supported plugins on &lt;a href=&quot;https://plugins.mongoosejs.io/&quot;&gt;Mongoose's plugins search site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439dd88de705a969af1eb5802383dd3f4483227c" translate="yes" xml:space="preserve">
          <source>You can find the return type of specific operations &lt;a href=&quot;https://mongoosejs.com/docs/api.html&quot;&gt;in the api docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0dcc89a053e021d04f0463178d015ccbd6f2ab" translate="yes" xml:space="preserve">
          <source>You can manually populate a property by setting it to a document. The document must be an instance of the model your &lt;code&gt;ref&lt;/code&gt; property refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d260b8d6c030751f1c6399dc8dccf73962c53f" translate="yes" xml:space="preserve">
          <source>You can manually run validation using &lt;code&gt;doc.validate(callback)&lt;/code&gt; or &lt;code&gt;doc.validateSync()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b910ec69c8262a394f354a35137f24abc7f8ea" translate="yes" xml:space="preserve">
          <source>You can pass options to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-pre&quot;&gt;&lt;code&gt;Schema.pre()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-post&quot;&gt;&lt;code&gt;Schema.post()&lt;/code&gt;&lt;/a&gt; to switch whether Mongoose calls your &lt;code&gt;remove()&lt;/code&gt; hook for &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-remove&quot;&gt;&lt;code&gt;Document.remove()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.remove&quot;&gt;&lt;code&gt;Model.remove()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e588e2222001af4cc908f8532d4a7bb06290d4b" translate="yes" xml:space="preserve">
          <source>You can populate in either pre or post &lt;a href=&quot;http://mongoosejs.com/docs/middleware.html&quot;&gt;hooks&lt;/a&gt;. If you want to always populate a certain field, check out the &lt;a href=&quot;http://npmjs.com/package/mongoose-autopopulate&quot;&gt;mongoose-autopopulate plugin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db155297bc18321888cd97e8de2e54d00be1cf1" translate="yes" xml:space="preserve">
          <source>You can read more about &lt;a href=&quot;http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-change-streams.html#change-streams-in-mongoose&quot;&gt;change streams in mongoose in this blog post&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c75571a6d2034382cf4071ae48747b6abdb302d" translate="yes" xml:space="preserve">
          <source>You can set up email lower case normalization easily via a Mongoose setter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ad8fb9c43f1f9166c8e668e03264faef5535cf" translate="yes" xml:space="preserve">
          <source>You can think of a Mongoose schema as the configuration object for a Mongoose model. A SchemaType is then a configuration object for an individual property. A SchemaType says what type a given path should have, whether it has any getters/setters, and what values are valid for that path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59475415e465215dc01e6b75c4f19f2b1a715e7f" translate="yes" xml:space="preserve">
          <source>You can use this function to inspect the schema type for a given path, including what validators it has and what the type is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a6ecd3eefeaa255d5b7c0f1dcda481378250da" translate="yes" xml:space="preserve">
          <source>You can work around this by setting the &lt;code&gt;_id&lt;/code&gt; option to false in the discriminator schema as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88de49f6e989cbaed3fb6dafafc3cac346fe07e" translate="yes" xml:space="preserve">
          <source>You cannot pass parameters to the next pre middleware in the chain using &lt;code&gt;next()&lt;/code&gt; in mongoose 5.x. In mongoose 4, &lt;code&gt;next('Test')&lt;/code&gt; in pre middleware would call the next middleware with 'Test' as a parameter. Mongoose 5.x has removed support for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cdea880df70eaf9e67d56a694ef15faa32c88a" translate="yes" xml:space="preserve">
          <source>You may see the following deprecation warning if upgrading from 4.x to 5.x and you didn't use the &lt;code&gt;useMongoClient&lt;/code&gt; option in 4.x:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21cbafaf753e3b9811cd0b7f05b4867cbd00f89" translate="yes" xml:space="preserve">
          <source>You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c69f8457a66437de5233a149574cb170620290a" translate="yes" xml:space="preserve">
          <source>You should use &lt;code&gt;getFilter()&lt;/code&gt; instead of &lt;code&gt;getQuery()&lt;/code&gt; where possible. &lt;code&gt;getQuery()&lt;/code&gt; will likely be deprecated in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8504b5dd2dfe9b695ede90239657a3b08d71dff" translate="yes" xml:space="preserve">
          <source>Your First Transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b41f41ddb4eea87802dd522d2ab82f398c1fbc" translate="yes" xml:space="preserve">
          <source>Your First Virtual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a6fa2bccbaf65bd33cac259b8bafe4f6f33bba" translate="yes" xml:space="preserve">
          <source>Your schemas can define default values for certain paths. If you create a new document without that path set, the default will kick in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b9e7b7b44147a1a38cbed5c87ef69debb4bd3" translate="yes" xml:space="preserve">
          <source>[arg] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80972ea9bf268cc047942360ba5e2381c1e9a89" translate="yes" xml:space="preserve">
          <source>[callback(err,doc)] &amp;laquo;Function&amp;raquo; Optional callback, executed upon completion. Receives &lt;code&gt;err&lt;/code&gt; and the &lt;code&gt;doc(s)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980db659d24d0bc3d12001bc058a09d08fcb8559" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80634227e9ff3cc3b7cb665e87d7b049ebc1bde" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; When passed, population is invoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8e30f430cadd3464e5ff2d204952ab76a481a8" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac1848ed0d4fe4033fb05b64c8f11d7ea111783" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; callback &lt;code&gt;function(error, bulkWriteOpResult) {}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543c8cda05a65c5557128326b173fb66948bf083" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; called after all connection close, or when first error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330fc72ae6285c61ebe009b775313f68949a679f" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; executed when all docs have been processed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c7df95beed24e455c86523c05f8b223e52de47" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9a1691fc56809de92079949c44dedc27007dcb" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac95758e51265dd1c3bab552c9bbd65d2ab61d3b" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional callback called after validation completes, passing an error if one occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c31cacc6f15cf907061f24a228b3eac7b30ec8" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional callback. If specified, a promise will &lt;strong&gt;not&lt;/strong&gt; be returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2665be6af34b63865b4dd09cbd5d82df566a6b0" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params are (error, arr)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c064c5cfb327b3cebd43b694ca1c40c8f6f60c7b" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params are (error, count)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96b1b3b80cae27fb2931d6dad9e9c6caa532029" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params are (error, doc), &lt;em&gt;unless&lt;/em&gt;&lt;code&gt;rawResult&lt;/code&gt; is used, in which case params are (error, writeOpResult)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81379fd7ee2b7721f679ff335d390339cfbb3f4" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params are (error, document)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623388470f80b1fc6f49f84e2106c0f4c928748b" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params are (error, mongooseDeleteResult)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e063a63257d7b825ee200472c75c3bded32ab2a3" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; optional params depend on the function being called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f764cbfc3d551d29b347aa09cac2d5dd0cbf8e0" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo; params are (error, writeOpResult)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2624beda2f4acb4da7eee25345e42ebf87770d" translate="yes" xml:space="preserve">
          <source>[callback] &amp;laquo;Function&amp;raquo;&lt;code&gt;function(error, res) {}&lt;/code&gt; where &lt;code&gt;res&lt;/code&gt; has 3 properties: &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;nModified&lt;/code&gt;, &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8c5bc47153a3d88dd68e8f3110668f1378f511" translate="yes" xml:space="preserve">
          <source>[cb] &amp;laquo;Function&amp;raquo; optional callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444d9c60cbaa317767b19924809282828a1648b3" translate="yes" xml:space="preserve">
          <source>[collection] &amp;laquo;Object&amp;raquo; Mongoose collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbc780737aa17ceeb2cad88c9b84abcb18c4485" translate="yes" xml:space="preserve">
          <source>[collection] &amp;laquo;String&amp;raquo; name (optional, inferred from model name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf31816d3a8def64709153d6a6707f3894fa89d7" translate="yes" xml:space="preserve">
          <source>[collection] &amp;laquo;String&amp;raquo; name of mongodb collection (optional) if not given it will be induced from model name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2442c5b80a600c7cd61545584daeddcfc952f3f8" translate="yes" xml:space="preserve">
          <source>[conditions] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf4b96ffc04dbc095f10510dc1e79727b239fa2" translate="yes" xml:space="preserve">
          <source>[conditions] &amp;laquo;Object&amp;raquo; optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae803cb6d1ab8fc1de367821780f65bc64b1c9c" translate="yes" xml:space="preserve">
          <source>[context] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5d5d1703f07640643ab88a5e89734ea67fe5e3" translate="yes" xml:space="preserve">
          <source>[coordinatePairs...] &amp;laquo;Array|Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc5004bddf8c3897cb8e2fcb3bd6b804fc87206" translate="yes" xml:space="preserve">
          <source>[definition] &amp;laquo;Object|Schema|Array&amp;raquo; Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f29897e3522f2936d57aca711fabe7964ae37a" translate="yes" xml:space="preserve">
          <source>[doc] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191e83004340ebe7eeb380525495665cbf706174" translate="yes" xml:space="preserve">
          <source>[doc] &amp;laquo;Object&amp;raquo; the update command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21f139a89aba0956a4702432026d066e926bd14" translate="yes" xml:space="preserve">
          <source>[elseExpr] &amp;laquo;String|Object&amp;raquo; false case for the condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8a056757ffb5b1789450621a0e3e7c4c1b1533" translate="yes" xml:space="preserve">
          <source>[err] &amp;laquo;Function|Error&amp;raquo; optional error to throw if no docs match &lt;code&gt;filter&lt;/code&gt;. If not specified, &lt;code&gt;orFail()&lt;/code&gt; will throw a &lt;code&gt;DocumentNotFoundError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f858670ae73ca484cb1fd05c7bb8251f6bf572c" translate="yes" xml:space="preserve">
          <source>[errorMsg] &amp;laquo;String|Function&amp;raquo; optional error message. If function, should return the error message as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c1410a7110a131b48dbc09f6d474a93f334e31" translate="yes" xml:space="preserve">
          <source>[field] &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7655d93a8ecb34f5877046fae3a33208f580cf" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466b7ffea362e97a91f4272f6e64fa638ec7170a" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object&amp;raquo; count documents that match this object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6433f244007171529ace68ddddedbfa7af539d41" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object&amp;raquo; mongodb selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec4627766e2ba1e6303bb660133c3313ee74be4" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object|ObjectId&amp;raquo; mongodb selector. If not specified, returns all documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a976e67f99c4eaf65e1f9676b939c8ec4535eb" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object|Query&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa1654a356d372736fb7ff70e82844ad520fe33" translate="yes" xml:space="preserve">
          <source>[filter] &amp;laquo;Object|Query&amp;raquo; mongodb selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34cb7983195bd837cf708948a79b8a88950acd9" translate="yes" xml:space="preserve">
          <source>[fn] &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554da23f0bdd3df4472d2ba4b64bd1ce33afddba" translate="yes" xml:space="preserve">
          <source>[fn] &amp;laquo;Function&amp;raquo; optional callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e3cb3dc9c274a39fd6994f90d42294564a14f8" translate="yes" xml:space="preserve">
          <source>[fn] &amp;laquo;Function|null&amp;raquo; overwrites the function used to pluralize collection names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7f17a99d225c14209ab9ec165734138376fba3" translate="yes" xml:space="preserve">
          <source>[fn] &amp;laquo;function(err|product)&amp;raquo; optional callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f390fd025bef29b84c334cd92204181e853b0d" translate="yes" xml:space="preserve">
          <source>[force] &amp;laquo;Boolean&amp;raquo; optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993680d4601819bc97b14804913e11a529d1af6b" translate="yes" xml:space="preserve">
          <source>[instance] &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a6204b219600a35613f3110091df794b12f82b" translate="yes" xml:space="preserve">
          <source>[kind] &amp;laquo;String&amp;raquo; optional &lt;code&gt;kind&lt;/code&gt; property for the error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11b253db1a57005a5eb42d0f5f67e6f9b943c3b" translate="yes" xml:space="preserve">
          <source>[match] &amp;laquo;Object&amp;raquo; Conditions for the population query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544aeb3ba8576f2e8b527044ab99288c4d3b358f" translate="yes" xml:space="preserve">
          <source>[message] &amp;laquo;String&amp;raquo; optional custom error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaa032d520feec43f0ceeddc79366c481ee742e" translate="yes" xml:space="preserve">
          <source>[model] &amp;laquo;Model&amp;raquo; The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's &lt;code&gt;ref&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91a068c56bc5ad8d9bfd549a5d3c195b55daa7f" translate="yes" xml:space="preserve">
          <source>[model] &amp;laquo;Model&amp;raquo; the model to cast to. If not set, defaults to &lt;code&gt;this.model&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cabefa954e4297edd0aa9954dfe41a02870c47d" translate="yes" xml:space="preserve">
          <source>[model] &amp;laquo;Model&amp;raquo; the model to which the aggregate is to be bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4610e3d902238c64e08937330d1e7013e6ef79" translate="yes" xml:space="preserve">
          <source>[model] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee8b5e0f0bfa6e6b0dcef8361550f9de5c2bc1c" translate="yes" xml:space="preserve">
          <source>[ms] &amp;laquo;Number&amp;raquo; The number of milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6e5ca0f2c19d6d57fbdca70cfd982d72f7aa33" translate="yes" xml:space="preserve">
          <source>[obj.message] &amp;laquo;String|Function&amp;raquo; optional error message. If function, should return the error message as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4946e005d22b32add675fc205eef1b2f6466ce2c" translate="yes" xml:space="preserve">
          <source>[obj.propsParameter=false] &amp;laquo;Boolean&amp;raquo; If true, Mongoose will pass the validator properties object (with the &lt;code&gt;validator&lt;/code&gt; function, &lt;code&gt;message&lt;/code&gt;, etc.) as the 2nd arg to the validator function. This is disabled by default because many validators &lt;a href=&quot;https://github.com/chriso/validator.js#validators&quot;&gt;rely on positional args&lt;/a&gt;, so turning this on may cause unpredictable behavior in external validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67d5b3674b147dccd5477f1777691c1bd9662d5" translate="yes" xml:space="preserve">
          <source>[obj.validator] &amp;laquo;Function&amp;raquo; validator function. If the validator function returns &lt;code&gt;undefined&lt;/code&gt; or a truthy value, validation succeeds. If it returns &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/falsy&quot;&gt;falsy&lt;/a&gt; (except &lt;code&gt;undefined&lt;/code&gt;) or throws an error, validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dee350dece0a04d855dbff419eaf2a7a5e0f572" translate="yes" xml:space="preserve">
          <source>[obj] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e4c2435626e73866320aa5f1fbe55893480b05" translate="yes" xml:space="preserve">
          <source>[operation] &amp;laquo;String|Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb7d835c2545449b20a454e39bf43a049bfd4dc" translate="yes" xml:space="preserve">
          <source>[ops.insertOne.document] &amp;laquo;Object&amp;raquo; The document to insert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4131924b915a6f9393a0af21f04e863bc018970e" translate="yes" xml:space="preserve">
          <source>[options.ErrorConstructor] &amp;laquo;Function&amp;raquo; custom error constructor. The constructor receives 1 parameter, an object containing the validator properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0765840ced39839a6068d45dadc03ebf730f5d61" translate="yes" xml:space="preserve">
          <source>[options.aliases=true] &amp;laquo;Boolean&amp;raquo; if &lt;code&gt;options.virtuals = true&lt;/code&gt;, you can set &lt;code&gt;options.aliases = false&lt;/code&gt; to skip applying aliases. This option is a no-op if &lt;code&gt;options.virtuals = false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08d8f00c04373c45a82cdf4e6f3205651011706" translate="yes" xml:space="preserve">
          <source>[options.autoIndex=true] &amp;laquo;Boolean&amp;raquo; Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12a6f7f857ffeccc626eb58d8e57d4fefe1b2a0" translate="yes" xml:space="preserve">
          <source>[options.bufferCommands=true] &amp;laquo;Boolean&amp;raquo; Mongoose specific option. Set to false to &lt;a href=&quot;http://mongoosejs.com/docs/faq.html#callback_never_executes&quot;&gt;disable buffering&lt;/a&gt; on all models associated with this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953cb3d8db0c89054271207c5519d90e6f56d091" translate="yes" xml:space="preserve">
          <source>[options.bufferMaxEntries] &amp;laquo;Number&amp;raquo; The MongoDB driver also has its own buffering mechanism that kicks in when the driver is disconnected. Set this option to 0 and set &lt;code&gt;bufferCommands&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on your schemas if you want your database operations to fail immediately when the driver is not connected, as opposed to waiting for reconnection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52262753c9060867792da9f09267726669dca503" translate="yes" xml:space="preserve">
          <source>[options.bypassDocumentValidation=false] &amp;laquo;Boolean&amp;raquo; If true, disable &lt;a href=&quot;https://docs.mongodb.com/manual/core/schema-validation/&quot;&gt;MongoDB server-side schema validation&lt;/a&gt; for all writes in this bulk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49c97b4f0cbda59c2be81c587d58562b8308dbb" translate="yes" xml:space="preserve">
          <source>[options.causalConsistency=true] &amp;laquo;Boolean&amp;raquo; set to false to disable causal consistency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd841bc8add2b64659eb9e9d06b0dc9f983aab7" translate="yes" xml:space="preserve">
          <source>[options.checkKeys=true] &amp;laquo;Boolean&amp;raquo; the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to &lt;code&gt;false&lt;/code&gt; to skip that check. See &lt;a href=&quot;https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names&quot;&gt;restrictions on field names&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65a28da0d536ccc093b1e995b1ed45766c3d303" translate="yes" xml:space="preserve">
          <source>[options.clone=false] &amp;laquo;boolean&amp;raquo; When you do &lt;code&gt;BlogPost.find().populate('author')&lt;/code&gt;, blog posts with the same author will share 1 copy of an &lt;code&gt;author&lt;/code&gt; doc. Enable this option to make Mongoose clone populated docs before assigning them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ff3388b53c8eaba26441e8a7e479aed99895ae" translate="yes" xml:space="preserve">
          <source>[options.connectTimeoutMS=30000] &amp;laquo;Number&amp;raquo; How long the MongoDB driver will wait before killing a socket due to inactivity &lt;em&gt;during initial connection&lt;/em&gt;. Defaults to 30000. This option is passed transparently to &lt;a href=&quot;https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback&quot;&gt;Node.js' &lt;code&gt;socket#setTimeout()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362e591a0a3b17acc35f7df1ead34ecb04bf60e1" translate="yes" xml:space="preserve">
          <source>[options.count=false] &amp;laquo;Boolean&amp;raquo; Only works with populate virtuals. If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, this populate virtual will contain the number of documents rather than the documents themselves when you &lt;code&gt;populate()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c575920b08e5ebc36ef03cb389a5947f137bad15" translate="yes" xml:space="preserve">
          <source>[options.count=false] &amp;laquo;boolean&amp;raquo; if you set this to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;populate()&lt;/code&gt; will set this virtual to the number of populated documents, as opposed to the documents themselves, using &lt;a href=&quot;api#query_Query-countDocuments&quot;&gt;&lt;code&gt;Query#countDocuments()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7846cf49ea8190e2cea5a2e259c4648cb4056c0c" translate="yes" xml:space="preserve">
          <source>[options.dbName] &amp;laquo;String&amp;raquo; The name of the database we want to use. If not provided, use database name from connection string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd74986c597251073dfc9ffffde98e147a25f93c" translate="yes" xml:space="preserve">
          <source>[options.depopulate=false] &amp;laquo;Boolean&amp;raquo; if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104cda9b48b1a839642f8e97ae00361392fd70a4" translate="yes" xml:space="preserve">
          <source>[options.document] &amp;laquo;Boolean&amp;raquo; If &lt;code&gt;name&lt;/code&gt; is a hook for both document and query middleware, set to &lt;code&gt;true&lt;/code&gt; to run on document middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bdace7c6fafa8ad9b85e93c5fe66e6371c96c5" translate="yes" xml:space="preserve">
          <source>[options.expires=null] &amp;laquo;String&amp;raquo; Mongoose-specific syntactic sugar, uses &lt;a href=&quot;https://www.npmjs.com/package/ms&quot;&gt;ms&lt;/a&gt; to convert &lt;code&gt;expires&lt;/code&gt; option into seconds for the &lt;code&gt;expireAfterSeconds&lt;/code&gt; in the above link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbe742804e0f45d223bc582f71bd0f7a8f7306" translate="yes" xml:space="preserve">
          <source>[options.family=0] &amp;laquo;Number&amp;raquo; Passed transparently to &lt;a href=&quot;https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback&quot;&gt;Node.js' &lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function. May be either &lt;code&gt;0,&lt;/code&gt;4&lt;code&gt;, or&lt;/code&gt;6&lt;code&gt;.&lt;/code&gt;4&lt;code&gt;means use IPv4 only,&lt;/code&gt;6&lt;code&gt;means use IPv6 only,&lt;/code&gt;0` means try both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e6b58a687e9d3af575bbd25701815541e4fe52" translate="yes" xml:space="preserve">
          <source>[options.flattenMaps=false] &amp;laquo;Boolean&amp;raquo; if true, convert Maps to POJOs. Useful if you want to &lt;code&gt;JSON.stringify()&lt;/code&gt; the result of &lt;code&gt;toObject()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdea2ec38f53ea010c68d6f5f9b553be2505848c" translate="yes" xml:space="preserve">
          <source>[options.foreignField] &amp;laquo;String|Function&amp;raquo; Required for populate virtuals. See &lt;a href=&quot;populate#populate-virtuals&quot;&gt;populate virtual docs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5670ed70f1a5264b0179f02d9cfe6bad8212393" translate="yes" xml:space="preserve">
          <source>[options.foreignField] &amp;laquo;string|function&amp;raquo; the foreign field to populate on if this is a populated virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801bb4f3924e3fd2524c0c889dc223e326d749a0" translate="yes" xml:space="preserve">
          <source>[options.getters=false] &amp;laquo;Boolean&amp;raquo; if true, apply all getters, including virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87675bb258d464bbcb9e91daa0ddb9611a772f29" translate="yes" xml:space="preserve">
          <source>[options.getters=false] &amp;laquo;boolean&amp;raquo; if true, Mongoose will call any getters defined on the &lt;code&gt;localField&lt;/code&gt;. By default, Mongoose gets the raw value of &lt;code&gt;localField&lt;/code&gt;. For example, you would need to set this option to &lt;code&gt;true&lt;/code&gt; if you wanted to &lt;a href=&quot;../schematypes#schematype-options&quot;&gt;add a &lt;code&gt;lowercase&lt;/code&gt; getter to your &lt;code&gt;localField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a079e28e69030f7f16e7d2a85b0a41ce525a6d" translate="yes" xml:space="preserve">
          <source>[options.getters=false] &amp;laquo;boolean&amp;raquo; if you set this to &lt;code&gt;true&lt;/code&gt;, Mongoose will call any custom getters you defined on this virtual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e52a50ca825bf4b0c8968b4061e46a4d4fabc36" translate="yes" xml:space="preserve">
          <source>[options.getters=true] &amp;laquo;Boolean&amp;raquo; If false, skip applying getters and just get the raw value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ce64ce9f9330e7d1c64bb91d8b62356de021bc" translate="yes" xml:space="preserve">
          <source>[options.includeChildren=false] &amp;laquo;Boolean&amp;raquo; if true, returns children of modified paths as well. For example, if false, the list of modified paths for &lt;code&gt;doc.colors = { primary: 'blue' };&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; contain &lt;code&gt;colors.primary&lt;/code&gt;. If true, &lt;code&gt;modifiedPaths()&lt;/code&gt; will return an array that contains &lt;code&gt;colors.primary&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66e03e5fd129e0984676cbb2c072c93daf5d0c0" translate="yes" xml:space="preserve">
          <source>[options.isRequired] &amp;laquo;Boolean|Function&amp;raquo; enable/disable the validator, or function that returns required boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f8dd3787a23e33be98881259a85462aa4f76aa" translate="yes" xml:space="preserve">
          <source>[options.j=true] &amp;laquo;Boolean&amp;raquo; If false, disable &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#j-option&quot;&gt;journal acknowledgement&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419122b42bb3f4ce6510497a26864a501dfbcd85" translate="yes" xml:space="preserve">
          <source>[options.j] &amp;laquo;Boolean&amp;raquo; set to true for MongoDB to wait until this &lt;code&gt;save()&lt;/code&gt; has been &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#j-option&quot;&gt;journaled before resolving the returned promise&lt;/a&gt;. Overrides the &lt;a href=&quot;../guide#writeConcern&quot;&gt;schema-level &lt;code&gt;writeConcern&lt;/code&gt; option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29acb623740b6029f2c07f3077f525c80cec2301" translate="yes" xml:space="preserve">
          <source>[options.justOne=false] &amp;laquo;Boolean|Function&amp;raquo; Only works with populate virtuals. If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, will be a single doc or &lt;code&gt;null&lt;/code&gt;. Otherwise, the populate virtual will be an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d1ba0d9efbab70824bd49492f1b64ac5a487fa" translate="yes" xml:space="preserve">
          <source>[options.justOne=false] &amp;laquo;boolean&amp;raquo; by default, a populated virtual is an array. If you set &lt;code&gt;justOne&lt;/code&gt;, the populated virtual will be a single doc or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba2f015362cb9279b6ad39917b29bc098cf9d03" translate="yes" xml:space="preserve">
          <source>[options.lean] &amp;laquo;Object&amp;raquo; if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See &lt;a href=&quot;http://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;Query.lean()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1b265594854df2017513f11c26b8ffb064f3ed" translate="yes" xml:space="preserve">
          <source>[options.lean] &amp;laquo;Object&amp;raquo; if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;Query.lean()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../tutorials/lean&quot;&gt;the Mongoose lean tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39e02ede3b3af6ce10dafaf71c04bd75c4ee698" translate="yes" xml:space="preserve">
          <source>[options.lean] &amp;laquo;Object&amp;raquo; if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;Query.lean()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../tutorials/lean&quot;&gt;Mongoose lean tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3272158030996c196c33fb4181d1a129dff124" translate="yes" xml:space="preserve">
          <source>[options.lean] &amp;laquo;Object|Boolean&amp;raquo; if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;Query.lean()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../tutorials/lean&quot;&gt;Mongoose lean tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb5d1582c8c89b53256b4c00c893658995d3e47" translate="yes" xml:space="preserve">
          <source>[options.localField] &amp;laquo;String|Function&amp;raquo; Required for populate virtuals. See &lt;a href=&quot;populate#populate-virtuals&quot;&gt;populate virtual docs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a84f2b1231ec1737eb16242244196c3a9113b3" translate="yes" xml:space="preserve">
          <source>[options.localField] &amp;laquo;string|function&amp;raquo; the local field to populate on if this is a populated virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503deaf8a482b8e5e0cd7bb5e70d9e43da6cc7f5" translate="yes" xml:space="preserve">
          <source>[options.match=null] &amp;laquo;Object|Function&amp;raquo; Add an additional filter to the populate query. Can be a filter object containing &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/query-documents/&quot;&gt;MongoDB query syntax&lt;/a&gt;, or a function that returns a filter object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a765e00bb913065ae729f195a899529de79bb639" translate="yes" xml:space="preserve">
          <source>[options.minimize=true] &amp;laquo;Boolean&amp;raquo; if true, omit any empty objects from the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d97c3900a8464cb1bc42c3ad46ee5a4c5c3aeae" translate="yes" xml:space="preserve">
          <source>[options.multi=false] &amp;laquo;Boolean&amp;raquo; whether multiple documents should be updated or just the first one that matches &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e6b6fbecd3f85480fb1e4ff3e422f4842ed4f2" translate="yes" xml:space="preserve">
          <source>[options.multipleCastError] &amp;laquo;Boolean&amp;raquo; by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa049e6830be5c56ea50aab282b7a80349de37e" translate="yes" xml:space="preserve">
          <source>[options.omitUndefined=false] &amp;laquo;Boolean&amp;raquo; If true, delete any properties whose value is &lt;code&gt;undefined&lt;/code&gt; when casting an update. In other words, if this is set, Mongoose will delete &lt;code&gt;baz&lt;/code&gt; from the update in &lt;code&gt;Model.updateOne({}, { foo: 'bar', baz: undefined })&lt;/code&gt; before sending the update to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970f0ac06979d25692f892aa2c62a704079475ec" translate="yes" xml:space="preserve">
          <source>[options.options=null] &amp;laquo;Object&amp;raquo; Additional options like &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;lean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daaad032d34c1a16ae9014ddaf8b5a0c93543534" translate="yes" xml:space="preserve">
          <source>[options.ordered &amp;laquo;Boolean&amp;raquo; = true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An &lt;code&gt;insertMany()&lt;/code&gt; with &lt;code&gt;ordered = false&lt;/code&gt; is called an &quot;unordered&quot; &lt;code&gt;insertMany()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d3f221122ee631f94f0e7dd8081536824547b3" translate="yes" xml:space="preserve">
          <source>[options.ordered=true] &amp;laquo;Boolean&amp;raquo; If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667ed323ee6615935f60e61c470e01711b0cb50e" translate="yes" xml:space="preserve">
          <source>[options.overwrite=false] &amp;laquo;Boolean&amp;raquo; By default, if you don't include any &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;update operators&lt;/a&gt; in &lt;code&gt;doc&lt;/code&gt;, Mongoose will wrap &lt;code&gt;doc&lt;/code&gt; in &lt;code&gt;$set&lt;/code&gt; for you. This prevents you from accidentally overwriting the document. This option tells Mongoose to skip adding &lt;code&gt;$set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdb265146b38041c4e622f88fe104e21e813f88" translate="yes" xml:space="preserve">
          <source>[options.parallel] &amp;laquo;Number&amp;raquo; the number of promises to execute in parallel. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5d1489f6d49193d4930f20a8d35fefddaf37c4" translate="yes" xml:space="preserve">
          <source>[options.pass] &amp;laquo;String&amp;raquo; password for authentication, equivalent to &lt;code&gt;options.auth.password&lt;/code&gt;. Maintained for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94337e924e59a608b467da3d89a6f25ae18deadd" translate="yes" xml:space="preserve">
          <source>[options.path=null] &amp;laquo;String&amp;raquo; The path to populate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef20be50ca7a0daf2da20457b3554c87110c2bf6" translate="yes" xml:space="preserve">
          <source>[options.poolSize=5] &amp;laquo;Number&amp;raquo; The maximum number of sockets the MongoDB driver will keep open for this connection. By default, &lt;code&gt;poolSize&lt;/code&gt; is 5. Keep in mind that, as of MongoDB 3.4, MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See &lt;a href=&quot;http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs&quot;&gt;Slow Trains in MongoDB and Node.js&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b3a97fe93297ce5a95a7965260039411678b2f" translate="yes" xml:space="preserve">
          <source>[options.promiseLibrary] &amp;laquo;Class&amp;raquo; Sets the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html&quot;&gt;underlying driver's promise library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318492de8d5d4663dd657cb90792c4d027a7f5ee" translate="yes" xml:space="preserve">
          <source>[options.query] &amp;laquo;Boolean&amp;raquo; If &lt;code&gt;name&lt;/code&gt; is a hook for both document and query middleware, set to &lt;code&gt;true&lt;/code&gt; to run on query middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9852a99c91b66d22a7b1e90eb8496bbe05a0361e" translate="yes" xml:space="preserve">
          <source>[options.rawResult &amp;laquo;Boolean&amp;raquo; = false] if false, the returned promise resolves to the documents that passed mongoose document validation. If &lt;code&gt;true&lt;/code&gt;, will return the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~insertWriteOpCallback&quot;&gt;raw result from the MongoDB driver&lt;/a&gt; with a &lt;code&gt;mongoose&lt;/code&gt; property that contains &lt;code&gt;validationErrors&lt;/code&gt; if this is an unordered &lt;code&gt;insertMany&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15182e22f0abc3e3402a9ad0e43d14a86c6820a0" translate="yes" xml:space="preserve">
          <source>[options.rawResult] &amp;laquo;Boolean&amp;raquo; if true, returns the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify&quot;&gt;raw result from the MongoDB driver&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bd671b6b5e49baae44ad89b48ef1b464c31a9b" translate="yes" xml:space="preserve">
          <source>[options.reconnectInterval=1000] &amp;laquo;Number&amp;raquo; See &lt;code&gt;reconnectTries&lt;/code&gt; option above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b476df71f3cf1174c747ca934a3e8863646352" translate="yes" xml:space="preserve">
          <source>[options.reconnectTries=30] &amp;laquo;Number&amp;raquo; If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every &lt;code&gt;reconnectInterval&lt;/code&gt; milliseconds for &lt;code&gt;reconnectTries&lt;/code&gt; times, and give up afterward. When the driver gives up, the mongoose connection emits a &lt;code&gt;reconnectFailed&lt;/code&gt; event. This option does nothing for replica set connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09532addc04cb998e0659f920d78edb09cfc486" translate="yes" xml:space="preserve">
          <source>[options.ref] &amp;laquo;String|Model&amp;raquo; model name or model instance. Marks this as a &lt;a href=&quot;populate#populate-virtuals&quot;&gt;populate virtual&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ef2370da3a372d782bc9b367b9ff1ad960dbd4" translate="yes" xml:space="preserve">
          <source>[options.ref] &amp;laquo;string|function&amp;raquo; if &lt;code&gt;ref&lt;/code&gt; is not nullish, this becomes a &lt;a href=&quot;../populate#populate-virtuals&quot;&gt;populated virtual&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dc7b8f5fcd9f19c9d63f1fa1a1e9b390eb9a76" translate="yes" xml:space="preserve">
          <source>[options.retainNullValues=false] &amp;laquo;boolean&amp;raquo; by default, Mongoose removes null and undefined values from populated arrays. Use this option to make &lt;code&gt;populate()&lt;/code&gt; retain &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; array entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd467ef45ed981e3ff7a5ff4c2fb05c0edc7b1f4" translate="yes" xml:space="preserve">
          <source>[options.runValidators=false] &amp;laquo;Boolean&amp;raquo; if true, runs &lt;a href=&quot;../validation#update-validators&quot;&gt;update validators&lt;/a&gt; on this command. Update validators validate the update operation against the model's schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1485e0f9d7ad7215ef2412f2e7969e42110f98f" translate="yes" xml:space="preserve">
          <source>[options.safe] &amp;laquo;Object&amp;raquo; (DEPRECATED) overrides &lt;a href=&quot;http://mongoosejs.com//docs/guide.html#safe&quot;&gt;schema's safe option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc41bc658e52e8f281df96ee021319562ca8dd37" translate="yes" xml:space="preserve">
          <source>[options.safe] &amp;laquo;Object&amp;raquo; (DEPRECATED) overrides &lt;a href=&quot;http://mongoosejs.com//docs/guide.html#safe&quot;&gt;schema's safe option&lt;/a&gt;. Use the &lt;code&gt;w&lt;/code&gt; option instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effc91cbd91b12cfc4683e2b7ae0e5b1f1a1d04c" translate="yes" xml:space="preserve">
          <source>[options.session=null] &amp;laquo;ClientSession&amp;raquo; The session associated with this bulk write. See &lt;a href=&quot;../transactions&quot;&gt;transactions docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d340c14fc48876bb752036676f4e745474edf306" translate="yes" xml:space="preserve">
          <source>[options.session=null] &amp;laquo;ClientSession&amp;raquo; The session associated with this query. See &lt;a href=&quot;../transactions&quot;&gt;transactions docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725f9eb2ffa02132898b5ec7dd90ddc5f2b02609" translate="yes" xml:space="preserve">
          <source>[options.session=null] &amp;laquo;Session&amp;raquo; the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/server-sessions/&quot;&gt;session&lt;/a&gt; associated with this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c14822fc666d0c6040549f4678caf8b246aac8" translate="yes" xml:space="preserve">
          <source>[options.session=null] &amp;laquo;Session&amp;raquo; the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/server-sessions/&quot;&gt;session&lt;/a&gt; associated with this operation. If not specified, defaults to the &lt;a href=&quot;api#document_Document-%24session&quot;&gt;document's associated session&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9101536ea9c2a226c645cead4d0bb372fce43b" translate="yes" xml:space="preserve">
          <source>[options.session=null] &amp;laquo;Session&amp;raquo; the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/server-sessions/&quot;&gt;session&lt;/a&gt; associated with this save operation. If not specified, defaults to the &lt;a href=&quot;api#document_Document-%24session&quot;&gt;document's associated session&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7504dd89cb4411d5dfc1f80d983630aa301cae3b" translate="yes" xml:space="preserve">
          <source>[options.setDefaultsOnInsert=false] &amp;laquo;Boolean&amp;raquo; if this and &lt;code&gt;upsert&lt;/code&gt; are true, mongoose will apply the &lt;a href=&quot;http://mongoosejs.com/docs/defaults.html&quot;&gt;defaults&lt;/a&gt; specified in the model's schema if a new document is created. This option only works on MongoDB &amp;gt;= 2.4 because it relies on &lt;a href=&quot;https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/&quot;&gt;MongoDB's &lt;code&gt;$setOnInsert&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399f917862eaefeb85b5a852c4775556e37c3f8f" translate="yes" xml:space="preserve">
          <source>[options.skipInvalidIds=false] &amp;laquo;Boolean&amp;raquo; By default, Mongoose throws a cast error if &lt;code&gt;localField&lt;/code&gt; and &lt;code&gt;foreignField&lt;/code&gt; schemas don't line up. If you enable this option, Mongoose will instead filter out any &lt;code&gt;localField&lt;/code&gt; properties that cannot be casted to &lt;code&gt;foreignField&lt;/code&gt;'s schema type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1681bb83d26b60b85efb17b2b5c4779ea20b65" translate="yes" xml:space="preserve">
          <source>[options.socketTimeoutMS=30000] &amp;laquo;Number&amp;raquo; How long the MongoDB driver will wait before killing a socket due to inactivity &lt;em&gt;after initial connection&lt;/em&gt;. A socket may be inactive because of either no activity or a long-running operation. This is set to &lt;code&gt;30000&lt;/code&gt; by default, you should set this to 2-3x your longest running operation if you expect some of your database operations to run longer than 20 seconds. This option is passed to &lt;a href=&quot;https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback&quot;&gt;Node.js &lt;code&gt;socket#setTimeout()&lt;/code&gt; function&lt;/a&gt; after the MongoDB driver successfully completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61e053c28f6fd0d06c19a66a6d7fdaca6e9451d" translate="yes" xml:space="preserve">
          <source>[options.strict] &amp;laquo;Boolean|String&amp;raquo; overwrites the schema's &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#strict&quot;&gt;strict mode option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ea6bee5c7f32f141d5162ef1f24bdf04bd71c0" translate="yes" xml:space="preserve">
          <source>[options.timestamps=null] &amp;laquo;Boolean&amp;raquo; If set to &lt;code&gt;false&lt;/code&gt; and &lt;a href=&quot;../guide#timestamps&quot;&gt;schema-level timestamps&lt;/a&gt; are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71a5726d58b8b95c05c9dedc2f7511e28fdf41c" translate="yes" xml:space="preserve">
          <source>[options.timestamps=true] &amp;laquo;Boolean&amp;raquo; if &lt;code&gt;false&lt;/code&gt; and &lt;a href=&quot;guide#timestamps&quot;&gt;timestamps&lt;/a&gt; are enabled, skip timestamps for this &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e533692acdff507d6d10c0c55c48dfd56e0e465" translate="yes" xml:space="preserve">
          <source>[options.transform=null] &amp;laquo;Function|null&amp;raquo; if set, mongoose will call this function to allow you to transform the returned object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e300d3ad8a7b1549eba83263a4daa48de9277860" translate="yes" xml:space="preserve">
          <source>[options.upsert=false] &amp;laquo;Boolean&amp;raquo; if true, and no documents found, insert a new document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b3dff02bf893da403ea0167f55b82b5eac653f" translate="yes" xml:space="preserve">
          <source>[options.useCache=false] &amp;laquo;Boolean&amp;raquo; If true, cache results so calling &lt;code&gt;useDb()&lt;/code&gt; multiple times with the same name only creates 1 connection object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c7846652f416a5f0ca74eca73015cbfc9054cd" translate="yes" xml:space="preserve">
          <source>[options.useCreateIndex=true] &amp;laquo;Boolean&amp;raquo; Mongoose-specific option. If &lt;code&gt;true&lt;/code&gt;, this connection will use &lt;a href=&quot;../deprecations#-ensureindex-&quot;&gt;&lt;code&gt;createIndex()&lt;/code&gt; instead of &lt;code&gt;ensureIndex()&lt;/code&gt;&lt;/a&gt; for automatic index builds via &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.init&quot;&gt;&lt;code&gt;Model.init()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4246585a26e68d5ed8c557c956fe2bb55213e069" translate="yes" xml:space="preserve">
          <source>[options.useFindAndModify=true] &amp;laquo;Boolean&amp;raquo; True by default. Set to &lt;code&gt;false&lt;/code&gt; to make &lt;code&gt;findOneAndUpdate()&lt;/code&gt; and &lt;code&gt;findOneAndRemove()&lt;/code&gt; use native &lt;code&gt;findOneAndUpdate()&lt;/code&gt; rather than &lt;code&gt;findAndModify()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376e2a40228d7fe371e4e47709f60bed33ddf6b7" translate="yes" xml:space="preserve">
          <source>[options.useMongooseAggCursor] &amp;laquo;Boolean&amp;raquo; use experimental mongoose-specific aggregation cursor (for &lt;code&gt;eachAsync()&lt;/code&gt; and other query cursor semantics)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb38a97b5b14cc9e9fab17539ec6d562d813609" translate="yes" xml:space="preserve">
          <source>[options.useNewUrlParser=false] &amp;laquo;Boolean&amp;raquo; False by default. Set to &lt;code&gt;true&lt;/code&gt; to make all connections set the &lt;code&gt;useNewUrlParser&lt;/code&gt; option by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599cc1196aa387f267be408eac0f165cd6578ca3" translate="yes" xml:space="preserve">
          <source>[options.useNewUrlParser=false] &amp;laquo;Boolean&amp;raquo; False by default. Set to &lt;code&gt;true&lt;/code&gt; to opt in to the MongoDB driver's new URL parser logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed84b1f9341f4d07fd4d649016fc7e37e8169703" translate="yes" xml:space="preserve">
          <source>[options.useUnifiedTopology=false] &amp;laquo;Boolean&amp;raquo; False by default. Set to &lt;code&gt;true&lt;/code&gt; to make all connections set the &lt;code&gt;useUnifiedTopology&lt;/code&gt; option by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0510c5697f2bda194f15db14cfac83b2e8a1cd" translate="yes" xml:space="preserve">
          <source>[options.useUnifiedTopology=false] &amp;laquo;Boolean&amp;raquo; False by default. Set to &lt;code&gt;true&lt;/code&gt; to opt in to the MongoDB driver's replica set and sharded cluster monitoring engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e9e45d2ad4964b99e4f611b65e0ae877b78915" translate="yes" xml:space="preserve">
          <source>[options.user] &amp;laquo;String&amp;raquo; username for authentication, equivalent to &lt;code&gt;options.auth.user&lt;/code&gt;. Maintained for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72a5267bfc3225b886ffd9d79b4f4f2e81faae1" translate="yes" xml:space="preserve">
          <source>[options.validateBeforeSave] &amp;laquo;Boolean&amp;raquo; set to false to save without validating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315d2644eb4e9ea5a7c54b2fcf615f4e95f7aae3" translate="yes" xml:space="preserve">
          <source>[options.versionKey=true] &amp;laquo;Boolean&amp;raquo; if false, exclude the version key (&lt;code&gt;__v&lt;/code&gt; by default) from the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6559aaae71568d206768cc74bcfb552a5f40c4" translate="yes" xml:space="preserve">
          <source>[options.virtuals=false] &amp;laquo;Boolean&amp;raquo; Apply virtuals before getting this path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45bba4d3007959f6c5a7d79ebcdd693e4e5ed31" translate="yes" xml:space="preserve">
          <source>[options.virtuals=false] &amp;laquo;Boolean&amp;raquo; if true, apply virtuals, including aliases. Use &lt;code&gt;{ getters: true, virtuals: false }&lt;/code&gt; to just apply getters, not virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fecd9e8be5b64410e54dc6c5a6e3b6ce4ed1e4" translate="yes" xml:space="preserve">
          <source>[options.w=1] &amp;laquo;String|number&amp;raquo; The &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/&quot;&gt;write concern&lt;/a&gt;. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-w&quot;&gt;&lt;code&gt;Query#w()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed229aec17ad56cb12b7c8707e46bb010a544bb4" translate="yes" xml:space="preserve">
          <source>[options.w] &amp;laquo;Number|String&amp;raquo; set the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#w-option&quot;&gt;write concern&lt;/a&gt;. Overrides the &lt;a href=&quot;../guide#writeConcern&quot;&gt;schema-level &lt;code&gt;writeConcern&lt;/code&gt; option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72712c861f031b8b14bcddc5177f3a37f8a973da" translate="yes" xml:space="preserve">
          <source>[options.writeConcern=null] &amp;laquo;Object&amp;raquo; sets the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/&quot;&gt;write concern&lt;/a&gt; for replica sets. Overrides the &lt;a href=&quot;../guide#writeConcern&quot;&gt;schema-level write concern&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dfd1b6954ca059e2d758ec6ffa3a7a096dc30a" translate="yes" xml:space="preserve">
          <source>[options.wtimeout=null] &amp;laquo;number&amp;raquo; The &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#wtimeout&quot;&gt;write concern timeout&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89219f61b5990f37c254374bda594a0ead4c82e" translate="yes" xml:space="preserve">
          <source>[options.wtimeout] &amp;laquo;Number&amp;raquo; sets a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#wtimeout&quot;&gt;timeout for the write concern&lt;/a&gt;. Overrides the &lt;a href=&quot;../guide#writeConcern&quot;&gt;schema-level &lt;code&gt;writeConcern&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfff4101e335f9dd73d37a6be41784f0d6aab377" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccdf38bac7c5050dafcf7f2c64c03f1f9d1bf6c" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; Options for the population query (sort, etc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f318c0e8a936c9607c0aea645202512b99251efb" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; Options passed down to &lt;code&gt;save()&lt;/code&gt;. To specify &lt;code&gt;options&lt;/code&gt;, &lt;code&gt;docs&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an array, not a spread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146954a988a7ba2673018567be83913f27df0d43" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; Options to pass to &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex&quot;&gt;MongoDB driver's &lt;code&gt;createIndex()&lt;/code&gt; function&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4d8463a2f52bc9b4017e90a526ed7ab508f62b" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; Passed on to &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect&quot;&gt;http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40338be72930ad9f72e748e9137a6a069f91a81c" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; internal options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f2910a177036e194b1c0959b66ba2ec342f235" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; optional collection options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96598671f5b574521feb4c3e3f5eb517755b70f" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; optional see &lt;a href=&quot;http://mongoosejs.com/docs/api.html#query_Query-setOptions&quot;&gt;&lt;code&gt;Query.prototype.setOptions()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1320d592ba8b4ba77ca6b666815d0318e2455d27" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; optionally specify options that modify the behavior of the set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11272572146e46bceeb664f9de283b14668a1195" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; options optional options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c0d1e3b356cb4aea1119ba6d964cb24029b5ea" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; options to pass to &lt;code&gt;ensureIndexes()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1163417627135cae3d66fa8142fa4ce5abf8eeae" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; options to pass to the schema constructor. Defaults to &lt;code&gt;this.options&lt;/code&gt; if not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de0e023121cbf7c434202aa4bd799aa571e1f48" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; passed down to the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html&quot;&gt;MongoDB driver's &lt;code&gt;connect()&lt;/code&gt; function&lt;/a&gt;, except for 4 mongoose-specific options explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467d75dc84454542ddb43dc00ca771a5926bd033" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; passed transparently to the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount&quot;&gt;MongoDB driver&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64f6bfc309fe981d4df3efd2f166f844a18b2ad" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection&quot;&gt;MongoDB driver docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb36ffe6721d31490658aa3b158cbab600bf113" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Db.html#createCollection&quot;&gt;MongoDB driver docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51780b0f57dd90b4da16e64303e37bf9dfaf20a5" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see &lt;a href=&quot;http://mongoosejs.com/docs/api.html#query_Query-setOptions&quot;&gt;&lt;code&gt;setOptions()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71430e4583050c195a15950c699cb765671f569" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#insertMany&quot;&gt;mongodb driver options&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a84c64407747bca31cb657c569f7e96ee2ae6d" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html#watch&quot;&gt;mongodb driver options&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c98f80a9d5580fe51629a6952c478566784585e" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;Object&amp;raquo; see the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html#startSession&quot;&gt;mongodb driver options&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3288bf85a5c3fbf25cc640e07cc25a2bf452d7f0" translate="yes" xml:space="preserve">
          <source>[options] &amp;laquo;SchemaTypeOptions&amp;raquo; See &lt;a href=&quot;schematypeoptions&quot;&gt;SchemaTypeOptions docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1629d4b65e4e4a1270b37da9e104156c03b7fe8" translate="yes" xml:space="preserve">
          <source>[opts.deleteMany.filter] &amp;laquo;Object&amp;raquo; Delete all documents that match this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7012113bd8c91732e0e4b68f320640d98c088d2" translate="yes" xml:space="preserve">
          <source>[opts.deleteOne.filter] &amp;laquo;Object&amp;raquo; Delete the first document that matches this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7956fbc6c6f862a01536bc59cfbef7b527c272bd" translate="yes" xml:space="preserve">
          <source>[opts.numberOfRetries] &amp;laquo;Number&amp;raquo; if cursor is exhausted, retry this many times before giving up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c5f6a2724ac8c4c280bd4fb5ef7ee5520202fa" translate="yes" xml:space="preserve">
          <source>[opts.replaceOne.filter] &amp;laquo;Object&amp;raquo; Replace the first document that matches this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68a9618cbca7e880c6753fcfc7cff6b8761262d" translate="yes" xml:space="preserve">
          <source>[opts.replaceOne.replacement] &amp;laquo;Object&amp;raquo; The replacement document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97657bb7fa3959308282bacc940141207b40f6c" translate="yes" xml:space="preserve">
          <source>[opts.replaceOne.upsert=false] &amp;laquo;Boolean&amp;raquo; If true, insert a doc if no documents match &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f892b0290b1bdbbecb70e50fae512273e0c898" translate="yes" xml:space="preserve">
          <source>[opts.tailableRetryInterval] &amp;laquo;Number&amp;raquo; if cursor is exhausted, wait this many milliseconds before retrying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd5cabd02004a7d6113927385ca55cb9298ffa8" translate="yes" xml:space="preserve">
          <source>[opts.updateMany.arrayFilters] &amp;laquo;Array&amp;raquo; The &lt;a href=&quot;https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html&quot;&gt;array filters&lt;/a&gt; used in &lt;code&gt;update&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28023d1cc071a8844dc64dea5cc56269476d818" translate="yes" xml:space="preserve">
          <source>[opts.updateMany.collation] &amp;laquo;Object&amp;raquo; The &lt;a href=&quot;https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations&quot;&gt;MongoDB collation&lt;/a&gt; to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd333db5503c2020b6f6857f7bd3367c01c43a3" translate="yes" xml:space="preserve">
          <source>[opts.updateMany.filter] &amp;laquo;Object&amp;raquo; Update all the documents that match this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09d95d2324ef0c46dee70169a5a0e3fa4a533d3" translate="yes" xml:space="preserve">
          <source>[opts.updateMany.update] &amp;laquo;Object&amp;raquo; An object containing &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;update operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265493866d250ca28ddbcfa3e6942d2badbe2d65" translate="yes" xml:space="preserve">
          <source>[opts.updateMany.upsert=false] &amp;laquo;Boolean&amp;raquo; If true, insert a doc if no documents match &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522a219356b4fdd3d366263e1b7b88f2bb2ccf15" translate="yes" xml:space="preserve">
          <source>[opts.updateOne.arrayFilters] &amp;laquo;Array&amp;raquo; The &lt;a href=&quot;https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html&quot;&gt;array filters&lt;/a&gt; used in &lt;code&gt;update&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f73d74fb824a3fce0e8234d2464627a9834ae8" translate="yes" xml:space="preserve">
          <source>[opts.updateOne.collation] &amp;laquo;Object&amp;raquo; The &lt;a href=&quot;https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations&quot;&gt;MongoDB collation&lt;/a&gt; to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009020fc0acb05c97567f5e9580c50c0119fa5ad" translate="yes" xml:space="preserve">
          <source>[opts.updateOne.filter] &amp;laquo;Object&amp;raquo; Update the first document that matches this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30842c00916dcc74df7e5893123ac98e5761e03a" translate="yes" xml:space="preserve">
          <source>[opts.updateOne.update] &amp;laquo;Object&amp;raquo; An object containing &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;update operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396135641eca70d8734709e1482cac0caca62f67" translate="yes" xml:space="preserve">
          <source>[opts.updateOne.upsert=false] &amp;laquo;Boolean&amp;raquo; If true, insert a doc if none match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b34f11725f68e7c9312f2068578b646fea7937e" translate="yes" xml:space="preserve">
          <source>[opts] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e6ce8863b4edd49542d8a46043a23d951d19b9" translate="yes" xml:space="preserve">
          <source>[opts] &amp;laquo;Object&amp;raquo; optional options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061a591d0ae6bb338e65c732e049d51dba5c182d" translate="yes" xml:space="preserve">
          <source>[opts] &amp;laquo;Object&amp;raquo; options to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c3dfbe19ad09c48c4b6949d3a623d679b55c4f" translate="yes" xml:space="preserve">
          <source>[path] &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04e4c3768fc8fe2d1fb3326849d7ae29f20f082" translate="yes" xml:space="preserve">
          <source>[path] &amp;laquo;String&amp;raquo; optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054b36c9b5d6b1e149c15b116596f268cc924520" translate="yes" xml:space="preserve">
          <source>[path] &amp;laquo;String|Array&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b2b9b05299da26f4417a914e793923d8fa0537" translate="yes" xml:space="preserve">
          <source>[path] &amp;laquo;String|Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e2333b6fd1f58c8c085b0dd4fb5c16ee1e5269" translate="yes" xml:space="preserve">
          <source>[path] &amp;laquo;String|Object&amp;raquo; The path to populate or an options object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ff515c4160ee89dde91786c9026a0e0e07676d" translate="yes" xml:space="preserve">
          <source>[pathsToValidate] &amp;laquo;Array|String&amp;raquo; list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df65b79de9a9532e77c24f1bfc07e1f0a28090b8" translate="yes" xml:space="preserve">
          <source>[pipeline] &amp;laquo;Array&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8985542eaf4aaefec3c3467a933adf5b7d32e3cf" translate="yes" xml:space="preserve">
          <source>[pipeline] &amp;laquo;Array&amp;raquo; aggregation pipeline as an array of objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2c6e9a332c011db87d4bc21f575d65e10f1844" translate="yes" xml:space="preserve">
          <source>[prefix] &amp;laquo;String&amp;raquo; path to prefix the newly added paths with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046ecd2fa43e5ce388c965a640b7b83b09feec7d" translate="yes" xml:space="preserve">
          <source>[projection] &amp;laquo;Object&amp;raquo; optional fields to return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f148d1739736c98fa578d66c64c606e750252cb" translate="yes" xml:space="preserve">
          <source>[projection] &amp;laquo;Object|String&amp;raquo; optional fields to return, see &lt;a href=&quot;#query_Query-select&quot;&gt;&lt;code&gt;Query.prototype.select()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b196138d97f9ffafac32d9477cd17f92c9a36a81" translate="yes" xml:space="preserve">
          <source>[projection] &amp;laquo;Object|String&amp;raquo; optional fields to return, see &lt;a href=&quot;http://mongoosejs.com/docs/api.html#query_Query-select&quot;&gt;&lt;code&gt;Query.prototype.select()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa468f8e5aeda80463dd1b33ac3d12b0b685f20" translate="yes" xml:space="preserve">
          <source>[reason] &amp;laquo;Error&amp;raquo; The original error that was thrown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad460aeb08815880caa45078b44cf4b66c35ee08" translate="yes" xml:space="preserve">
          <source>[reject] &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e4cfba92e055bf112b91abab743c99767e018a" translate="yes" xml:space="preserve">
          <source>[reject] &amp;laquo;Function&amp;raquo; errorCallback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e3dad1af2980ad8a9ce5a4909bb895bb2785be" translate="yes" xml:space="preserve">
          <source>[replacement] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43824f2ca9b84ac8e37b9db5a35a8010fefa629b" translate="yes" xml:space="preserve">
          <source>[replacement] &amp;laquo;Object&amp;raquo; Replace with this document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172bda40bb35d96c3a4d45786d1b5072204f2a9f" translate="yes" xml:space="preserve">
          <source>[resolve] &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78ea54ae87f94ba2011622146e34f01bac0c482" translate="yes" xml:space="preserve">
          <source>[resolve] &amp;laquo;Function&amp;raquo; successCallback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a66075143038a78e87dd82eff8fca781b48072c" translate="yes" xml:space="preserve">
          <source>[schema] &amp;laquo;Schema&amp;raquo; a schema. necessary when defining a model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8a74b68a62d55e4cdad22de874bce841c69bcd" translate="yes" xml:space="preserve">
          <source>[schema] &amp;laquo;Schema&amp;raquo; the schema to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaf817ebd8f115d43007bfc1376195cf7ff70a6" translate="yes" xml:space="preserve">
          <source>[scope] &amp;laquo;Document&amp;raquo; the scope to run validators with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7bea69c88ece9831ca1643082d474457903d42" translate="yes" xml:space="preserve">
          <source>[select] &amp;laquo;Object|String&amp;raquo; Field selection for the population query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04285304dd99acaadc3a87b44aff53b13819ee74" translate="yes" xml:space="preserve">
          <source>[session] &amp;laquo;ClientSession&amp;raquo; from &lt;code&gt;await conn.startSession()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868d735a155dd6e1c1cbfac3560440b1a8fb129a" translate="yes" xml:space="preserve">
          <source>[session] &amp;laquo;ClientSession&amp;raquo; overwrite the current session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60232d5131a1a3b8f19328814843055a12853272" translate="yes" xml:space="preserve">
          <source>[skipInit] &amp;laquo;Boolean&amp;raquo; whether to skip initialization (defaults to false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaea5fbbe3b4fce81fd514361a8066b6abeb5ac9" translate="yes" xml:space="preserve">
          <source>[tags] &amp;laquo;Array&amp;raquo; optional tags for this query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb742b0c697ce71bbf27dae5e262f2ac6b8c7cf" translate="yes" xml:space="preserve">
          <source>[thenExpr] &amp;laquo;String|Object&amp;raquo; true case for the condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41e608de6c0d3eb38e611c0e9f15c508161e2a7" translate="yes" xml:space="preserve">
          <source>[type] &amp;laquo;Schema|String|Number|Buffer|*&amp;raquo; optionally specify a type for &quot;on-the-fly&quot; attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7572236bae45946d55023823b4e7a88ae4107828" translate="yes" xml:space="preserve">
          <source>[type] &amp;laquo;Schema|String|Number|Buffer|*&amp;raquo; optionally specify a type for on-the-fly attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39f5cb83bdeebc78ae0cbb7e8d2e152d767613e" translate="yes" xml:space="preserve">
          <source>[type] &amp;laquo;String&amp;raquo; optional validator type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34dcb1f71e2da62b88b524f703f28e45337d5fb" translate="yes" xml:space="preserve">
          <source>[update] &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f35b6fadc00415d95c8e76cd6f884cbd215e0fc" translate="yes" xml:space="preserve">
          <source>[uri] &amp;laquo;String&amp;raquo; a mongodb:// URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f540ea4eab42592dd17f641e89f0acfdbe39e422" translate="yes" xml:space="preserve">
          <source>[val] &amp;laquo;Any&amp;raquo; the value to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976d304c5de3b9116c0846c608823cc95cf558b7" translate="yes" xml:space="preserve">
          <source>[val] &amp;laquo;Boolean&amp;raquo; optional, overrides whether mongoose thinks the doc is deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ff2bcdf03b3675f9474b20d3ddf4c861af1f92" translate="yes" xml:space="preserve">
          <source>[val] &amp;laquo;Object&amp;raquo; optional value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131f5c1eb94be8c3a8170b2b2e6208291545608b" translate="yes" xml:space="preserve">
          <source>[val] &amp;laquo;any&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54d5de386c42e628f1022ccb98e2e74bab5cfdb" translate="yes" xml:space="preserve">
          <source>[value] &amp;laquo;Object&amp;raquo; if not passed, the current option value is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2558e015bfae543190ad1ad0809da49d60de77ce" translate="yes" xml:space="preserve">
          <source>[value] &amp;laquo;String&amp;raquo; the string stored in the &lt;code&gt;discriminatorKey&lt;/code&gt; property. If not specified, Mongoose uses the &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d3a4e242d5ca31c93fb0268337f44c987d148e" translate="yes" xml:space="preserve">
          <source>[verbose] &amp;laquo;String&amp;raquo; The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771b48ec2d2010b6d267680edd5324bb6d093d8b" translate="yes" xml:space="preserve">
          <source>[virtualsOnly] &amp;laquo;Boolean&amp;raquo; if truthy, only pulls virtuals from the class, not methods or statics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6526f25fbdfbb2678bba3fbc087623f3edb7400" translate="yes" xml:space="preserve">
          <source>_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1b410b0448e8acf1093fba44a7cb68cebdc3d8" translate="yes" xml:space="preserve">
          <source>_posts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db112c9a052511091434d7c1dc84c8df58e2edd" translate="yes" xml:space="preserve">
          <source>_pres</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0be6b5bdb88e12b946dd86d1a6a806693c7a041" translate="yes" xml:space="preserve">
          <source>`bulkWrite()` results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017447cbbcfca15054575f514c46c0243aa697c2" translate="yes" xml:space="preserve">
          <source>`getPromiseConstructor()`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfedfc38c97b55036d4f5e94af8f55d3c68b93f0" translate="yes" xml:space="preserve">
          <source>`numAffected` and `save()`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0749ab2a1c3ee970960dc83bab0110506732e99d" translate="yes" xml:space="preserve">
          <source>`remove()` and debouncing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179ac0ea737397c23445a957dc516adf4a41e27c" translate="yes" xml:space="preserve">
          <source>`required` validator for arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f0dad55f9475102b9e8834b1847f404c937c74" translate="yes" xml:space="preserve">
          <source>`toObject()` Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5222107c12fc619054bccfd65bbeddef0556d2ed" translate="yes" xml:space="preserve">
          <source>agg &amp;laquo;Aggregate&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ffb566107019d0965a193140bb5793546fb17e" translate="yes" xml:space="preserve">
          <source>aggregate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128dd9378dcf9b6ca4417882581256e7fbec8a4b" translate="yes" xml:space="preserve">
          <source>area &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e2e6851047192908c305723748928da1a86225" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf0c57feecf4ea692eb87b1d26e2d6000984429" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object&amp;raquo; $group operator contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb4f74df5bd425b94f320167c76e6c9ef766f30" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object&amp;raquo; $match operator contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960678d944d946b17da396dbb594a3a309223847" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object&amp;raquo; field specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca624afc1728e9e26b445b1e0a9272b50ae3dfec" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object|String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4076ca936f4854b75a102eb3864b096337b90358" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object|String&amp;raquo; field specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba96d707e7861c499b319ff09a37f5b62f2fa07" translate="yes" xml:space="preserve">
          <source>arg &amp;laquo;Object|null&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509d3139fef182b5f501bab010b97ca2b2a9fef4" translate="yes" xml:space="preserve">
          <source>args &amp;laquo;Array&amp;raquo; arguments to pass to the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab8f047db2f797e31a0190360bbc2612d6f99b5" translate="yes" xml:space="preserve">
          <source>argument &amp;laquo;String|Function&amp;raquo; is a javascript string or anonymous function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ddb4dd8a7ab44d2f48a15f93826fc1b9bc1967" translate="yes" xml:space="preserve">
          <source>array &amp;laquo;Array&amp;raquo; array of conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce02b22aeb56aa88ea9648d2ccc966b8b7c54da" translate="yes" xml:space="preserve">
          <source>asynchronous defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48346c844696914f973b3390ea3f3a509de7acf4" translate="yes" xml:space="preserve">
          <source>asynchronous tasks that a certain action triggers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c898f52b1caf893ff9617ada1cfaf4e7d2353521" translate="yes" xml:space="preserve">
          <source>autoCreate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030c90523a398f15f67ebe96ef8126c5652fc603" translate="yes" xml:space="preserve">
          <source>autoIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f0f34e4d287efc95fa4161c41e313b4e2128e0" translate="yes" xml:space="preserve">
          <source>base &amp;laquo;Mongoose&amp;raquo; a mongoose instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183d70588ef64ba722e02da62ad0e38f27d42f5c" translate="yes" xml:space="preserve">
          <source>batchSize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570e159bde3730d9d011daf8984d900656701c5f" translate="yes" xml:space="preserve">
          <source>bool &amp;laquo;Boolean&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4e63747536498396bcdd570365eccd93cbbaee" translate="yes" xml:space="preserve">
          <source>bool &amp;laquo;Boolean&amp;raquo; defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271d1dbcafa2a1fffcec82f602114a54deb13696" translate="yes" xml:space="preserve">
          <source>bool &amp;laquo;Boolean|Object&amp;raquo; defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bee1030d3b6ba7a6ad05f4e959efe9c995b78d" translate="yes" xml:space="preserve">
          <source>boolean &amp;laquo;[options.allowDiskUse]&amp;raquo; if true, the MongoDB server will use the hard drive to store data during this aggregation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bab6fa10b9986178a3346c648db3067517231b0" translate="yes" xml:space="preserve">
          <source>bufferCommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca163537d31ce3f23f5b00db4033c08657a9139d" translate="yes" xml:space="preserve">
          <source>callback &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9572918830ae83d7e0f11598e657a232de4d4e" translate="yes" xml:space="preserve">
          <source>capped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e1542029b937b73e3ac1243bfc28d39b96948e" translate="yes" xml:space="preserve">
          <source>caster &amp;laquo;Function|false&amp;raquo; Function that casts arbitrary values to this type, or throws an error if casting failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee2faa2f3f246e441fe258e84a724ee788f649b" translate="yes" xml:space="preserve">
          <source>collation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ae69fe28072da813cdc35f8f6e231abfadfbff" translate="yes" xml:space="preserve">
          <source>collation &amp;laquo;Object&amp;raquo; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2037de437c80264ccbce8a8b61d0bf9f593d2322" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76c2fa420066fcfbcfed7e10d9e3e6c78a1cf1a" translate="yes" xml:space="preserve">
          <source>collection &amp;laquo;string&amp;raquo; The collection to create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74fff156b3530f6ba1b0898a26e708dedd529b5" translate="yes" xml:space="preserve">
          <source>collection &amp;laquo;string&amp;raquo; The collection to delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118a9989815489c24b81b160782015890ed2085e" translate="yes" xml:space="preserve">
          <source>comment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed55c1a8a19dcb5ddb0646ed70cc9f73a11d942f" translate="yes" xml:space="preserve">
          <source>complex validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e04709efc300f3b272bd7119a1d535a52caeef" translate="yes" xml:space="preserve">
          <source>conditions &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d83d70e24c467280c8fa9f765d3c93db008095" translate="yes" xml:space="preserve">
          <source>conditions &amp;laquo;Object&amp;raquo; an object that specifies the match condition (required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a950de2daec4f3681cbd8dd6aab8c3fd231bbb" translate="yes" xml:space="preserve">
          <source>constructor &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0352a8acc949c7df21fec16e566ba9a74e797a97" translate="yes" xml:space="preserve">
          <source>db</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73ac48b89e13a0c2761dc9720cd24fb31a9d0a4" translate="yes" xml:space="preserve">
          <source>debug output defaults to stdout instead of stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9d266e2ef305531f5a197b746021bf59090e45" translate="yes" xml:space="preserve">
          <source>defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bba31bc07cb2341bd94cac2c08453575aeb840" translate="yes" xml:space="preserve">
          <source>defaults. Use the &lt;code&gt;setDefaultsOnInsert&lt;/code&gt; option to override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b8958758ee39136bd7e29f7554835c8c42fbfb" translate="yes" xml:space="preserve">
          <source>deleteMany</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c96e7508d8206229def305821d201b515583f05" translate="yes" xml:space="preserve">
          <source>deleteOne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ca2f486fdddf1c7e435b02bfbe273eddda9802" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Document&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749fb067964eab08fd4f2a8cc5ff0bd7fc8671ca" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Document&amp;raquo; The document this virtual is attached to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34234c34c44a25bbe3fa9a8feb4a895607889a3" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Document&amp;raquo; a document to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de9dbc207c6df2224808e698386b80d5974de38" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a116c299e44f27dad5e6ad73e43b9e1e47b0f8c9" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Object&amp;raquo; document returned by mongo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a1149f8bf565440ca7de1c54b2c2cfaeaebc7f" translate="yes" xml:space="preserve">
          <source>doc &amp;laquo;Object&amp;raquo; values for initial set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b697ed1f247adcb0fa8ba87d377fd97f4b13b5" translate="yes" xml:space="preserve">
          <source>doc(s) &amp;laquo;Array|Object|*&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92851e0ec9b53e859d1a3b55a1209e9c888fe504" translate="yes" xml:space="preserve">
          <source>docs &amp;laquo;Array|Object&amp;raquo; Documents to insert, as a spread or array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bed87ff4991c8ffb075840c45f4a476a9696950" translate="yes" xml:space="preserve">
          <source>docs &amp;laquo;Document|Array&amp;raquo; Either a single document or array of documents to populate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832041f3cefb5a8040a308d12638ec20a3f0084b" translate="yes" xml:space="preserve">
          <source>err &amp;laquo;Error|null&amp;raquo; if set, &lt;code&gt;exec()&lt;/code&gt; will fail fast before sending the query to MongoDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58ece118d668e8f7f5c0194741ee5db95d7c027" translate="yes" xml:space="preserve">
          <source>errorMsg &amp;laquo;String|Error&amp;raquo; the error which states the reason &lt;code&gt;path&lt;/code&gt; was invalid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570043596e41f9067d43fbff99f1acb348a090bf" translate="yes" xml:space="preserve">
          <source>errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c1380a0d710f68237d428f1a0df358079a6be5" translate="yes" xml:space="preserve">
          <source>explain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50815ce93d074801c0cd8b809c75bfa981a6af9f" translate="yes" xml:space="preserve">
          <source>expression &amp;laquo;Object&amp;raquo; redact options or conditional expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45617234f19dd8b607713e11fb88e42e02797027" translate="yes" xml:space="preserve">
          <source>facet &amp;laquo;Object&amp;raquo; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f138c3ebf297a1bb1cef7b749775737b25af805" translate="yes" xml:space="preserve">
          <source>field &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e64bba4b35baaf6bfdef700374de0d165a4383" translate="yes" xml:space="preserve">
          <source>fields &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0904dcd3c2cd2690796f44301ad0ad388752d35" translate="yes" xml:space="preserve">
          <source>fields &amp;laquo;String&amp;raquo; the field(s) to unwind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fa60f9957a51e3880099c66990ef73be4946ef" translate="yes" xml:space="preserve">
          <source>filter &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750806be16f338300867c95c086313870be94859" translate="yes" xml:space="preserve">
          <source>filter &amp;laquo;Object&amp;raquo; Replace the first document that matches this filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d440013a1600362c687bb1bfd77892ad45e4d02e" translate="yes" xml:space="preserve">
          <source>filter &amp;laquo;Object|Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98307db4e3e3f2ae2e0440fd52ce4dfd2e723e4d" translate="yes" xml:space="preserve">
          <source>filter &amp;laquo;Object|ObjectId&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded8dae5786fb0e9e6ffb657401fd861ba2efe11" translate="yes" xml:space="preserve">
          <source>find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769a3cfe9eb742b22525fcce4ea165ec2198816e" translate="yes" xml:space="preserve">
          <source>findOne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a384eed022309f9465c7a9740b7a8ca8861063b1" translate="yes" xml:space="preserve">
          <source>findOneAndDelete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a36751fa78f77ac3a0e0496e20f9997ad65af6" translate="yes" xml:space="preserve">
          <source>findOneAndRemove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7f722949da7db59c77d45c30941978fac2a4e8" translate="yes" xml:space="preserve">
          <source>findOneAndUpdate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27068ff081da9dda40626a7af522c1e05cb3e08" translate="yes" xml:space="preserve">
          <source>flag &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9205ae9e0fc4d81ad0dc0c029a2a06c775fb0b6f" translate="yes" xml:space="preserve">
          <source>fn &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c43437d60cebb273b87e7866011ceb6dfc90db" translate="yes" xml:space="preserve">
          <source>fn &amp;laquo;Function&amp;raquo; callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319c346b8441f7a604e5be327ecefac645cd316d" translate="yes" xml:space="preserve">
          <source>fn &amp;laquo;Function&amp;raquo; callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9679e260acbd459d8e8a6825d0e609738585d135" translate="yes" xml:space="preserve">
          <source>fn &amp;laquo;Function&amp;raquo; function to run to transform the query result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e5e07b24d0527279c6a47f26384db928b0e9ca" translate="yes" xml:space="preserve">
          <source>fn &amp;laquo;Function&amp;raquo; plugin callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c847ccde3433c752ee901ae888ef20fbf373e9f5" translate="yes" xml:space="preserve">
          <source>function Object() { [native code] }.prototype.options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fec154210f86bed97b281c3a238f84ff07521fe" translate="yes" xml:space="preserve">
          <source>geoNear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea55c6e095e948f0e8a9e72e66652f3b97f8b05" translate="yes" xml:space="preserve">
          <source>getter &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734c3c67dba099bc9f9d716c5b06aa5d84014b4f" translate="yes" xml:space="preserve">
          <source>hint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2a6b8f7f2a7ddc2e0c41a3b0d22611548c863a" translate="yes" xml:space="preserve">
          <source>id &amp;laquo;Any&amp;raquo; value of &lt;code&gt;_id&lt;/code&gt; to query by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b6bc5f6795ef39d76f1fe788b53c4dbe7a2ed6" translate="yes" xml:space="preserve">
          <source>id &amp;laquo;Object|Number|String&amp;raquo; value of &lt;code&gt;_id&lt;/code&gt; to query by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47f7f632a7edb7521a92b51c1738932c73a74f2" translate="yes" xml:space="preserve">
          <source>if you define a transform in &lt;code&gt;schema.options.toObject.transform&lt;/code&gt;, that transform will &lt;strong&gt;not&lt;/strong&gt; apply to subdocuments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd62812fbd9ec4c7f99aa4f6253fead2388eb238" translate="yes" xml:space="preserve">
          <source>init</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bdfe83c1f541b0554bf8f3d80fbe03aa71df40" translate="yes" xml:space="preserve">
          <source>insertMany</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56a037973771177e10a1f0523b6b6da23f3f5e8" translate="yes" xml:space="preserve">
          <source>invalidate &amp;laquo;Boolean&amp;raquo; refresh the cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053a53fea278e30829c5a8acd6395e26256f61f7" translate="yes" xml:space="preserve">
          <source>isModified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3eab7b7f241437111d34070ed20461b82df853a" translate="yes" xml:space="preserve">
          <source>isNew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d51d0600c175158e342c38c89210d4b09bea85" translate="yes" xml:space="preserve">
          <source>js &amp;laquo;String|Function&amp;raquo; javascript string or function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb6e27eabb57f3965f84221bd35eaaa46b3f659" translate="yes" xml:space="preserve">
          <source>justOne: optional boolean, if true Mongoose will always set &lt;code&gt;path&lt;/code&gt; to an array. Inferred from schema by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f710437eff24c07b9ee051c462843e496cdb008e" translate="yes" xml:space="preserve">
          <source>key &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385f7cc21a4534585a8beffbde4134cdb1bc5522" translate="yes" xml:space="preserve">
          <source>key &amp;laquo;String&amp;raquo; option name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be47d2b8549b583955db4969ed9f932d4d42fb7" translate="yes" xml:space="preserve">
          <source>lean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec63c5bb7cdf237d1e4f10ce8107924754942202" translate="yes" xml:space="preserve">
          <source>level &amp;laquo;String&amp;raquo; one of the listed read concern level or their aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d68c5a97e466323c2fbe2b655ab578066a1cd5" translate="yes" xml:space="preserve">
          <source>limit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7884a9936d51d6996fe1794a1f7c4df46cbf8a14" translate="yes" xml:space="preserve">
          <source>listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012df06dcf6cc53270340fdfe328bc38cb199ae4" translate="yes" xml:space="preserve">
          <source>match: optional query conditions to match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af4127b75312cf31896dc2ad4329b9a88a9013c" translate="yes" xml:space="preserve">
          <source>maxTimeMS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41127ffcff357347fcca99366d48c70dd560075" translate="yes" xml:space="preserve">
          <source>maxscan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8079aecd5ac3ed318a65d03ba551f5844dc5375b" translate="yes" xml:space="preserve">
          <source>method &amp;laquo;String|Object&amp;raquo; name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9460a52bdbeb3f581874c7fe69a184b765f897b5" translate="yes" xml:space="preserve">
          <source>middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3639c10994d885f997d2403c4fb64b10a118b3" translate="yes" xml:space="preserve">
          <source>minimize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17b67a218527e38148792e33c2e360de44b784e" translate="yes" xml:space="preserve">
          <source>model &amp;laquo;Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07ad4de981164dacf56e943a5574b329933c5f6" translate="yes" xml:space="preserve">
          <source>model: optional name of the model to use for population</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373232ac56e74b10277e8e5681ffc42cd1234925" translate="yes" xml:space="preserve">
          <source>modelName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c08643da534a9b85024b81dc5be654f892d8d5" translate="yes" xml:space="preserve">
          <source>mongoose-lean-defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3038d72ff6a8c81a02a1b3dc5be9fa28c4d5e" translate="yes" xml:space="preserve">
          <source>mongoose-lean-getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2caab238dcf9fe9ab0411108c88123ad598fe5d" translate="yes" xml:space="preserve">
          <source>mongoose-lean-virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628105c2c30f24b24f48ce705c8d1cd60bfc6c8d" translate="yes" xml:space="preserve">
          <source>ms &amp;laquo;number&amp;raquo; number of milliseconds to wait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58527d9c3bfd77eee73cb00993f96ed5df364bbc" translate="yes" xml:space="preserve">
          <source>msg &amp;laquo;String&amp;raquo; Error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e7300e5a528c5d743e1a1e7f9a11a71bbf98d5" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5153ed1c07b43dcc9ba94b1a5ae7fd42a36ae3" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo; The database name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac4ea76b7a6b6325784f401b4e18b6b170e98ab" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo; discriminator model name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f349eb5f15c15a64b5bc2f453ae379c9a4f027" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo; model name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9228589dd36e46430b8de9463f6433632960ea89" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo; name of the document method to call later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9a04300d1e6707a62812a70f0f09540805ace7" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String&amp;raquo; of the collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a037e7cca92b18e0b6029d859b5b4db9a57b9b" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String|Function&amp;raquo; model name or class extending Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cecb3bc6a57e1fd040f46ff65273dba6dcb06fa" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String|Function&amp;raquo; the model name or class extending Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085a39d2983af3e28ec9594866b681c6dc343ae4" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String|Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cce19d0fc78bdf5f467fb18de95d9d98b688b6" translate="yes" xml:space="preserve">
          <source>name &amp;laquo;String|RegExp&amp;raquo; if string, the name of the model to remove. If regexp, removes all models whose name matches the regexp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a423043ecef6b6cd0c67a2d7157ee2fb8756202" translate="yes" xml:space="preserve">
          <source>new &amp;laquo;Object&amp;raquo; query conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1047a5c4b010127664b2032b2e1121fd6a6f7266" translate="yes" xml:space="preserve">
          <source>new &amp;laquo;Object&amp;raquo; update operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313ca21a177e6c1d57b4f3001c3876e2237d9e47" translate="yes" xml:space="preserve">
          <source>num &amp;laquo;Number&amp;raquo; maximum number of records to pass to the next stage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042ce551a03a6f30506f67cd4d786a471f96e028" translate="yes" xml:space="preserve">
          <source>num &amp;laquo;Number&amp;raquo; number of records to skip before next stage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa47fa1c85fcdd613cba486fbdec1007a0672543" translate="yes" xml:space="preserve">
          <source>number &amp;laquo;[options.maxTimeMS]&amp;raquo; limits the time this aggregation will run, see &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/&quot;&gt;MongoDB docs on &lt;code&gt;maxTimeMS&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b181627b784f97e0cc122d611aadb7d1d8ebdc" translate="yes" xml:space="preserve">
          <source>o &amp;laquo;Object&amp;raquo; an object specifying map-reduce options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff5f41d6cb85bc8e35e6bcc6aee2a2164e5e138" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca524ffb096ec6b8b4044ec34b3eaea68765c87" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;Object&amp;raquo; the item to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e10740c40ef1f329faffd298a3e0009a7c33ae0" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;Object&amp;raquo; the item to look for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305db22e05dd33a0d95d22f8d25802a41c4c1c65" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;Object&amp;raquo; the object to overwrite this document with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3403709a5d0abd833d883411576ebd45bf0d8466" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;Object|Schema&amp;raquo; plain object with paths to add, or another schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c1351dc82a55716c355250558424d1d2892f50" translate="yes" xml:space="preserve">
          <source>obj &amp;laquo;RegExp|Function|Object&amp;raquo; validator function, or hash describing options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0ac8ea7a19431363142ab44b4372087e7459c1" translate="yes" xml:space="preserve">
          <source>object &amp;laquo;Object&amp;raquo; Must contain a &lt;code&gt;type&lt;/code&gt; property which is a String and a &lt;code&gt;coordinates&lt;/code&gt; property which is an Array. See the examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d1ccd0eabdcc155c1a425e072c29275481d2a3" translate="yes" xml:space="preserve">
          <source>object &amp;laquo;[options.collation]&amp;raquo; see &lt;a href=&quot;docs/api#aggregate_Aggregate-collation&quot;&gt;&lt;code&gt;Aggregate.prototype.collation()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687dee40db58b11dc42a4f228ed05b96f87d9075" translate="yes" xml:space="preserve">
          <source>omitUndefined: delete any properties whose value is &lt;code&gt;undefined&lt;/code&gt; when casting an update. In other words, if this is set, Mongoose will delete &lt;code&gt;baz&lt;/code&gt; from the update in &lt;code&gt;Model.updateOne({}, { foo: 'bar', baz: undefined })&lt;/code&gt; before sending the update to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3d405b10675998c030223177d42e71b4e7a312" translate="yes" xml:space="preserve">
          <source>on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1863835675e3970e15e5c22411ef60824eb55591" translate="yes" xml:space="preserve">
          <source>once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40d41cbffa3505e36b3285994c723ca7b956a40" translate="yes" xml:space="preserve">
          <source>ops &amp;laquo;Array&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c12f3659d93cacaafcd75f198a71fd2d6cb9182" translate="yes" xml:space="preserve">
          <source>ops &amp;laquo;Object&amp;raquo; operator(s) to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd39f71d5fcb40b7c18a1d7e377c0b8af92789b9" translate="yes" xml:space="preserve">
          <source>option: _id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08cd54b503ad85e58b6c1037fd938ef9fe48a90" translate="yes" xml:space="preserve">
          <source>option: autoCreate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f32fe8f2b620f078a072bf4071cfc417025478c" translate="yes" xml:space="preserve">
          <source>option: autoIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3961266d1acc928b5ddda08445c41980edd00a" translate="yes" xml:space="preserve">
          <source>option: bufferCommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aebe9e804a11b3706e9096412e18fac77abd084" translate="yes" xml:space="preserve">
          <source>option: capped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7e27468696deb77278b8e5db711c6be0e261c3" translate="yes" xml:space="preserve">
          <source>option: collation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5f3d772f9b6e05b6a797f9b84541faa800697c" translate="yes" xml:space="preserve">
          <source>option: collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3639569fe6dc4fa030e427e66044c0c3713a2471" translate="yes" xml:space="preserve">
          <source>option: id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88367951e5063abbf6f8cdf7f51cc497de0bed09" translate="yes" xml:space="preserve">
          <source>option: minimize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1474855581cbf7b0f94379da1d7719888587ec05" translate="yes" xml:space="preserve">
          <source>option: read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5feb9a997521f34cf9397c8f92cce62b5325cd1a" translate="yes" xml:space="preserve">
          <source>option: selectPopulatedPaths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e7c54aad1479a85a562fbf75c0f756f6e5f927" translate="yes" xml:space="preserve">
          <source>option: shardKey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022998903a0525dda5d7f3acbb528c91b1501a0a" translate="yes" xml:space="preserve">
          <source>option: skipVersioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8340e5b6f05796c70d991c8bf1c766b24657c499" translate="yes" xml:space="preserve">
          <source>option: storeSubdocValidationError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e24de1026eb9345d87c84095d351165114bb07" translate="yes" xml:space="preserve">
          <source>option: strict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894ef38102a9b6ca8ee502efd4c8b473c5714c29" translate="yes" xml:space="preserve">
          <source>option: strictQuery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4c6f7253b993edd011007cb81c9119338f7553" translate="yes" xml:space="preserve">
          <source>option: timestamps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88810b3abc1976f5421a604d396128800c1a7a9" translate="yes" xml:space="preserve">
          <source>option: toJSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27693cc44c0a07dbe67fa27070edd98fa5836ce" translate="yes" xml:space="preserve">
          <source>option: toObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bdbcdee2d8a0940313f0fed9aa8d45ebc678f9" translate="yes" xml:space="preserve">
          <source>option: typeKey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e81ae34e5cdbade7681433af200bb43c39e659" translate="yes" xml:space="preserve">
          <source>option: useNestedStrict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fd5a1442be104e349a19f9274466062d31ac82" translate="yes" xml:space="preserve">
          <source>option: validateBeforeSave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc196bfdc64b521e1bcc8b14853748809d6330f" translate="yes" xml:space="preserve">
          <source>option: versionKey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d239e373a28575c060e6b843c99b724fb77b4d" translate="yes" xml:space="preserve">
          <source>option: writeConcern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cac199cb2f2b1530df0b755aa189525cbf06fc1" translate="yes" xml:space="preserve">
          <source>optional &amp;laquo;[fields]&amp;raquo; object containing the fields that were selected in the query which returned this document. You do &lt;strong&gt;not&lt;/strong&gt; need to set this parameter to ensure Mongoose handles your &lt;a href=&quot;api#query_Query-select&quot;&gt;query projection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae8e63b1849fd4829ef7bf30f9113a9cbe0bbdb" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0687cd1dc44ebbdb6f39117bf0c6cc2aadb047a" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; A hash of key/val (path, options) used for population.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe9203bfc9ebab41f98b39fc53a7269d8b34754" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; for the geoSearch, some (near, maxDistance) are required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c65cb82e85e4f262d33d49234f54523a189a98" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; if specified, overwrites the current options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295da48467ea79eade370381217bb4d4de28e78d" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; keys to merge into current options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a0517eed340281c4e71b77afea4d2199dab0f7" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; query options passed to &lt;code&gt;.find()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48e3bae2c53cd2661b13664ea3a0844cb9a5a62" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; see &lt;a href=&quot;mongoose#mongoose_Mongoose-set&quot;&gt;&lt;code&gt;Mongoose#set()&lt;/code&gt; docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2937ab605003b4c3042048edd4efa3be1c14474" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; to $graphLookup as described in the above link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44768c0942b8b1848edc530371884f4eeefb51d" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object&amp;raquo; to $lookup as described in the above link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e1633d83b57f5b4c09f2ac02cb776b55b8ebcc" translate="yes" xml:space="preserve">
          <source>options &amp;laquo;Object|Boolean|String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e570f7848eb41d3805ee6deede6ea02ac08200" translate="yes" xml:space="preserve">
          <source>options.batchSize &amp;laquo;Number&amp;raquo; set the cursor batch size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36660c24e28bab472a6f5b4cfdce98cb35e20778" translate="yes" xml:space="preserve">
          <source>options: optional query options like sort, limit, etc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f166eaa760c712c5be273df2ec5ab541676886f" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;Object|String&amp;raquo; either the path to populate or an object specifying all parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473889e01eaa542b6c3423bbd2eacb978308796" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cbe00336b6ef709fbfb132746b996f6ead1c65" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; The path &lt;code&gt;a.b.c&lt;/code&gt; in the doc where this cast error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79194c86173a231fecf0444115f341acf084b5bd" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; the field to invalidate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7485bbfcf200f95523da2b48b6dede6610e686f2" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; the field to mark as valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2555c0b3b7fed444f4001fcf0fd4b5ed600b3ce9" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; the path to ignore</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de65b3a3fa30ac7c16a410926e33eafeb3e9c8b0" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; the path to mark modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7843930c02d6116d487228dbe1e1370bc328c8" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String&amp;raquo; the path to unmark modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65da4e82f0b5c5a202f24a6a555276a3fea5e990" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String|Array&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50153af25a524f325729d9bcc7d92c837933391a" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String|Object&amp;raquo; path or object of key/vals to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5cb559bc20e9ab7239f146a0069fe166e892ab" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String|Object&amp;raquo; path or object of key/value pairs to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23185249bd2472dd0692c1ff46a2e0c300cf809f" translate="yes" xml:space="preserve">
          <source>path &amp;laquo;String|Object|Function&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40681094b731261665e7e6f387399834ca794a04" translate="yes" xml:space="preserve">
          <source>path: space delimited path(s) to populate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e8fc127bdcc905e67e8df6e6ac265396979afe" translate="yes" xml:space="preserve">
          <source>paths &amp;laquo;Array&amp;raquo; list of paths to pick</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f5a4a5749d5eab8a19afc762cefd809d8d6c8b" translate="yes" xml:space="preserve">
          <source>pathsToValidate &amp;laquo;Array&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d57e5ad928f1e10633d6b4ad546d7818ed7da1" translate="yes" xml:space="preserve">
          <source>pathsToValidate &amp;laquo;Array|string&amp;raquo; only validate the given paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb2c469ccf42b64e43529092965819ec2fc913a" translate="yes" xml:space="preserve">
          <source>plugin &amp;laquo;Function&amp;raquo; callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec6a3606edd7440f8399436c78e193a9db810fb" translate="yes" xml:space="preserve">
          <source>populate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6224a48fde425d2a7c46b9ab17b73afe87646564" translate="yes" xml:space="preserve">
          <source>populated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae27cd889b12cf0e541195b342d0e764ad25fdf4" translate="yes" xml:space="preserve">
          <source>pref &amp;laquo;String&amp;raquo; one of the listed preference options or aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff5fe329aaa52ca5e06950d24fea5ecbec5d949" translate="yes" xml:space="preserve">
          <source>pref &amp;laquo;String&amp;raquo; one of the listed preference options or their aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b33a0418fea16aa0fbe46c698b0e138ca9522e" translate="yes" xml:space="preserve">
          <source>projection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c257c6a8cd537400e7297bcb92b9a1ef6e30d00" translate="yes" xml:space="preserve">
          <source>prototype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c2e551ed6c0375d51a1939803098404dded8c7" translate="yes" xml:space="preserve">
          <source>query &amp;laquo;Query&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d29399924df70ad29058cd42dab99470b32047" translate="yes" xml:space="preserve">
          <source>raw &amp;laquo;Object&amp;raquo; fields/conditions that may contain aliased keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18f32c33fd27f64b1e971fa3231108436650e33" translate="yes" xml:space="preserve">
          <source>rawResult</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7afddb68260a60f86c02a021efba7f216c2e7cf" translate="yes" xml:space="preserve">
          <source>read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a3560f17b11ba3bd8388cfb76f3842c2fe9808" translate="yes" xml:space="preserve">
          <source>readPreference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fab146067edd3619c4b55d87c25e3a7b3cc7d1b" translate="yes" xml:space="preserve">
          <source>ref &amp;laquo;String|Model|Function&amp;raquo; either a model name, a &lt;a href=&quot;../models&quot;&gt;Model&lt;/a&gt;, or a function that returns a model name or model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db99845855b2ecbfecca9a095062b96c3e27703f" translate="yes" xml:space="preserve">
          <source>remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f416665d1452ee063f5059487b8216ddb9f19c18" translate="yes" xml:space="preserve">
          <source>removeListener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28851b13bfa522b135a602d24736bde47f8a2463" translate="yes" xml:space="preserve">
          <source>removing dependent documents (removing a user removes all his blogposts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b65ddec9ca459b395b4aaa6748d71efcf47c63" translate="yes" xml:space="preserve">
          <source>required &amp;laquo;Boolean|Function|Object&amp;raquo; enable/disable the validator, or function that returns required boolean, or options object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910c2d90df067199e93de6a1f1697bfdad59b2fc" translate="yes" xml:space="preserve">
          <source>same as in &lt;a href=&quot;#model_Model.replaceOne&quot;&gt;Model.replaceOne&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73c4ac4e0269c29047b2098e4bd40902f1c7f62" translate="yes" xml:space="preserve">
          <source>same as in &lt;a href=&quot;#model_Model.update&quot;&gt;Model.update&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cc22cfe4cec62a48a9784a29b91f68e34b6222" translate="yes" xml:space="preserve">
          <source>same as in &lt;a href=&quot;#model_Model.updateOne&quot;&gt;Model.updateOne&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a4a11319d31c1b323d5774f44240a9ffc984d0" translate="yes" xml:space="preserve">
          <source>save</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7042cb74a5576f32a19f0f44a2c6e304936b11" translate="yes" xml:space="preserve">
          <source>schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8b3f6de69d2a014b2a15f7dcf8676dc6260dc8" translate="yes" xml:space="preserve">
          <source>schema &amp;laquo;Schema&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697ae40558fb92146e679a592925134cb0650dfe" translate="yes" xml:space="preserve">
          <source>schema &amp;laquo;Schema&amp;raquo; discriminator model schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996dcc17d57f1e303b6190c3cf32feba405356cc" translate="yes" xml:space="preserve">
          <source>schema &amp;laquo;Schema&amp;raquo; fields to add to the schema for instances of this sub-class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d712ee9c1dceaac6163765aea88906d87190304f" translate="yes" xml:space="preserve">
          <source>select: optional fields to select</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c467e5c051865896c25f3f5324e36886412f48f" translate="yes" xml:space="preserve">
          <source>selectPopulatedPaths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbdc4c271c889825d8338d2d8f10b6e5e95c171" translate="yes" xml:space="preserve">
          <source>session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09e593ea28ff5905c20b9f439e54f3bd3de6562" translate="yes" xml:space="preserve">
          <source>session &amp;laquo;ClientSession&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52c74529a4621bd74e76afdcfc46c4208fbf58c" translate="yes" xml:space="preserve">
          <source>shardKey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2a9fc83659f07590b7d74cd69de84f207f3172" translate="yes" xml:space="preserve">
          <source>size &amp;laquo;Number&amp;raquo; number of random documents to pick</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e16815bdd61271801523e21224f6226d9ab29d" translate="yes" xml:space="preserve">
          <source>skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687509c30fb32da032e0c88a29028d671b95b39b" translate="yes" xml:space="preserve">
          <source>skipVersioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94025be336b1f89159af64b1f6eda5d470ac8d6" translate="yes" xml:space="preserve">
          <source>snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c4b8f6e2d770a0f2b54233669d65ff6eddc472" translate="yes" xml:space="preserve">
          <source>sort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd98996ed0a002f830d37a2018660d9f256e4d1" translate="yes" xml:space="preserve">
          <source>source &amp;laquo;Query|Object&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86177e68d59eb1507af46a97dc31449494e0abde" translate="yes" xml:space="preserve">
          <source>storeSubdocValidationError</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
