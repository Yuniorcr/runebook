<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="matplotlib">
    <body>
      <group id="matplotlib">
        <trans-unit id="f2aac4a8ab189a7061d50f67cc83730f5f7cc1a6" translate="yes" xml:space="preserve">
          <source>If a tuple, different levels will be plotted with different linewidths in the order specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42ef0bbf9790f5e991d44b82b132c302fc9ee6a" translate="yes" xml:space="preserve">
          <source>If allow_nan is true, then NaN, Infinity, and -Infinity will be encoded as such. This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders. Otherwise, it will be a ValueError to encode such floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a8d48f17ba56eace95f6860082592b9d9d32a4" translate="yes" xml:space="preserve">
          <source>If an int &lt;em&gt;n&lt;/em&gt;, use &lt;em&gt;n&lt;/em&gt; data intervals; i.e. draw &lt;em&gt;n+1&lt;/em&gt; contour lines. The level heights are automatically chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543f2fde8bbf967f86ac093354ea2538a40781d5" translate="yes" xml:space="preserve">
          <source>If an integer is given, &lt;code&gt;bins + 1&lt;/code&gt; bin edges are calculated and returned, consistent with &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html#numpy.histogram&quot;&gt;&lt;code&gt;numpy.histogram&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd09d6d4e8678eaf62a2deec0d2d691a7061a35" translate="yes" xml:space="preserve">
          <source>If an integer, divide the counts in the specified number of bins, and color the hexagons accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb8943f647b6d967ee2c0cbddcb403120a2da02" translate="yes" xml:space="preserve">
          <source>If an integer, then equivalent to passing &lt;code&gt;range(frames)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc97fcdc014bd91d4d0ba9d3494d94f655c0c29" translate="yes" xml:space="preserve">
          <source>If an iterable, then simply use the values provided. If the iterable has a length, it will override the &lt;em&gt;save_count&lt;/em&gt; kwarg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dfa67d163ee9ddf8d4e604f6d457f11d6fca25" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.option_scale_image&quot;&gt;&lt;code&gt;option_scale_image()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cc482c0954c8d894cee6290673a6346bc099c4" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;a href=&quot;#matplotlib.backends.backend_pgf.RendererPgf.option_scale_image&quot;&gt;&lt;code&gt;option_scale_image()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backends.backend_pgf.RendererPgf.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bd3b3af4dc9763009779cd7a4604660389fd37" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.option_scale_image&quot;&gt;&lt;code&gt;option_scale_image()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a761c2a4227709697f06d7c79aa45e845b324a" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;code&gt;option_scale_image()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backends.backend_cairo.RendererCairo.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2251668412435f98506a7c2552629288725fd9fe" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;code&gt;option_scale_image()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7784fcc0d7c5f6152a4139dffc921e7cfc9dac3" translate="yes" xml:space="preserve">
          <source>If and only if the concrete backend is written such that &lt;code&gt;option_scale_image()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, an affine transformation &lt;em&gt;may&lt;/em&gt; be passed to &lt;a href=&quot;#matplotlib.backends.backend_ps.RendererPS.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. It takes the form of a &lt;a href=&quot;transformations#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt; instance. The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and has to be applied &lt;em&gt;before&lt;/em&gt; translating the result by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (this can be accomplished by adding &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the translation vector defined by &lt;code&gt;transform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6611967006961cee81ee47462e5e29704831e285" translate="yes" xml:space="preserve">
          <source>If any of &lt;em&gt;edgecolor&lt;/em&gt;, &lt;em&gt;facecolor&lt;/em&gt;, &lt;em&gt;linewidth&lt;/em&gt;, or &lt;em&gt;antialiased&lt;/em&gt; are &lt;em&gt;None&lt;/em&gt;, they default to their rc params setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee171c18af558ef12709693456d7ae9ce1fb1297" translate="yes" xml:space="preserve">
          <source>If any of &lt;em&gt;edgecolors&lt;/em&gt;, &lt;em&gt;facecolors&lt;/em&gt;, &lt;em&gt;linewidths&lt;/em&gt;, &lt;em&gt;antialiaseds&lt;/em&gt; are None, they default to their &lt;a href=&quot;matplotlib_configuration_api#matplotlib.rcParams&quot;&gt;&lt;code&gt;matplotlib.rcParams&lt;/code&gt;&lt;/a&gt; patch setting, in sequence form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf057820a9abacbd17f279ed52f85edfff3ce765" translate="yes" xml:space="preserve">
          <source>If any of the above are &lt;code&gt;None&lt;/code&gt;, the axis will simply use the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6038e754526fd3fe7812b233a27eed73084432d0" translate="yes" xml:space="preserve">
          <source>If array-like, draw contour lines at the specified levels. The values must be in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1c7a0f1e977aad5bcdfcdc2989a2f748b0274f" translate="yes" xml:space="preserve">
          <source>If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed56e6b2159e719eaa6f6f360e66d9146a695c9d" translate="yes" xml:space="preserve">
          <source>If b is True, then draw after every plotting command, e.g., after xlabel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad32a6ee610989ff130683704a16f4500e86615e" translate="yes" xml:space="preserve">
          <source>If both &lt;em&gt;density&lt;/em&gt; and &lt;em&gt;normed&lt;/em&gt; are set an error is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6525dea839de79b36c9f8f093e89c3d9bc9b1db" translate="yes" xml:space="preserve">
          <source>If check_circular is true, then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause an OverflowError). Otherwise, no such check takes place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0851c17b76a2d966e960fbde6cdc938fea227396" translate="yes" xml:space="preserve">
          <source>If clip is &lt;code&gt;False&lt;/code&gt;, out of range values are mapped to -1 if they are below &lt;code&gt;boundaries[0]&lt;/code&gt; or mapped to ncolors if they are above &lt;code&gt;boundaries[-1]&lt;/code&gt;. These are then converted to valid indices by &lt;code&gt;Colormap.__call__()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b390c47c3a1ebe25d8e3e8a8d6d4173d097c18" translate="yes" xml:space="preserve">
          <source>If clip is &lt;code&gt;True&lt;/code&gt;, out of range values are mapped to 0 if they are below &lt;code&gt;boundaries[0]&lt;/code&gt; or mapped to ncolors - 1 if they are above &lt;code&gt;boundaries[-1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebc65366563441b80ac572dbdc2f265acee9ac4" translate="yes" xml:space="preserve">
          <source>If contour is using a monochrome colormap and the contour level is less than 0, then the linestyle specified in &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;contour.negative_linestyle&quot;]&lt;/a&gt;&lt;/code&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d27327d8b279033576e228b1f509edbef620c4" translate="yes" xml:space="preserve">
          <source>If dirty, reasks the writers if they are available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a3c75a20793bb1703aa42442c166c75a607bcf" translate="yes" xml:space="preserve">
          <source>If either &lt;em&gt;vmin&lt;/em&gt; or &lt;em&gt;vmax&lt;/em&gt; is None, the image min/max respectively will be used for color scaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a6113f0700ef80a7bbbf6271df95a45d090c15" translate="yes" xml:space="preserve">
          <source>If ensure_ascii is true, the output is guaranteed to be str objects with all incoming non-ASCII characters escaped. If ensure_ascii is false, the output can contain non-ASCII characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a688a87bc6f848e1c857b7bfab43d3ef3667bf62" translate="yes" xml:space="preserve">
          <source>If given, &lt;em&gt;colors&lt;/em&gt; take precedence over &lt;em&gt;cmap&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7033165dd88ddae46144d7a7e75d1d599a0a456b" translate="yes" xml:space="preserve">
          <source>If given, only search this directory and its subdirectories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ebd07a69dc459052594d8c22753f5459c0c571" translate="yes" xml:space="preserve">
          <source>If given, the slider will snap to multiples of &lt;code&gt;valstep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94561d0b3b14a0c08ea68e9fa5f7a5dcb1e18d4" translate="yes" xml:space="preserve">
          <source>If given, this determines how many occurrences will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593a754c39c7fdd5f3fc26d47295519eb839bfc7" translate="yes" xml:space="preserve">
          <source>If given, this must be a datetime instance specifying the upper-bound limit of the recurrence. The last recurrence in the rule is the greatest datetime that is less than or equal to the value specified in the &lt;code&gt;until&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53aaa3c4684276b2853b240b42fdc9b537b61591" translate="yes" xml:space="preserve">
          <source>If grid_spec is given, None is inserted for those not from the given grid_spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87d534cedd99d7794e81a30397a10cbfc86891f" translate="yes" xml:space="preserve">
          <source>If if no current figure exists, a new one is created an its figure manager is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade699e417a3e594dd18e7042e84516e7de1f82a" translate="yes" xml:space="preserve">
          <source>If indent is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0 will only insert newlines. None is the most compact representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570a12b7ce63be7a2ce71fba3d8c9da77deb9d9d" translate="yes" xml:space="preserve">
          <source>If int, the number of bins for the two dimensions (nx=ny=bins).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4dddd77410ded368cb5a1984b64126649f525e" translate="yes" xml:space="preserve">
          <source>If it is None, defaults to its rcParams setting, in sequence form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9440c1ffa9a21fb63f4e3fdd81dab46cfb15a4" translate="yes" xml:space="preserve">
          <source>If labelOnlyBase is False, these two numbers control the labeling of ticks that are not at integer powers of base; normally these are the minor ticks. The controlling parameter is the log of the axis data range. In the typical case where base is 10 it is the number of decades spanned by the axis, so we can call it 'numdec'. If &lt;code&gt;numdec &amp;lt;= all&lt;/code&gt;, all minor ticks will be labeled. If &lt;code&gt;all &amp;lt; numdec &amp;lt;= subset&lt;/code&gt;, then only a subset of minor ticks will be labeled, so as to avoid crowding. If &lt;code&gt;numdec &amp;gt; subset&lt;/code&gt; then no minor ticks will be labeled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921ba7dc4337b70bcc79ba29787f2cf4b8de137f" translate="yes" xml:space="preserve">
          <source>If len(&lt;em&gt;cols&lt;/em&gt;) &amp;gt; 1, the first element will be an identifier for data for the &lt;em&gt;x&lt;/em&gt; axis and the remaining elements will be the column indexes for multiple subplots if &lt;em&gt;subplots&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt; (the default), or for lines in a single subplot if &lt;em&gt;subplots&lt;/em&gt; is &lt;em&gt;False&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abea32c3269093fc6324061c69eb3fcb4d37eb28" translate="yes" xml:space="preserve">
          <source>If len(&lt;em&gt;cols&lt;/em&gt;) == 1, only that column will be plotted on the &lt;em&gt;y&lt;/em&gt; axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29c35e7bce6dca6ac7bda4fd45bb4dc96853d7b" translate="yes" xml:space="preserve">
          <source>If len(&lt;em&gt;x&lt;/em&gt;) &amp;lt; &lt;em&gt;NFFT&lt;/em&gt; or len(&lt;em&gt;y&lt;/em&gt;) &amp;lt; &lt;em&gt;NFFT&lt;/em&gt;, they will be zero padded to &lt;em&gt;NFFT&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7532dbfddb76cc2cf09c7e7f8830e45bbeef10" translate="yes" xml:space="preserve">
          <source>If len(&lt;em&gt;x&lt;/em&gt;) &amp;lt; &lt;em&gt;NFFT&lt;/em&gt;, it will be zero padded to &lt;em&gt;NFFT&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbe79de7c18ba3f8f23e20bdd4fc65c5a772947" translate="yes" xml:space="preserve">
          <source>If mappable has changed since the last check, return True; else return False</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435fd2657b6cc52a2bbb2620272486eb1b6eb0c9" translate="yes" xml:space="preserve">
          <source>If minor ticker locations that overlap with major ticker locations should be trimmed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7de79e1a514ed11ca229d08a19a090c7491c54" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;transform&lt;/code&gt; has been specified when creating the artist (e.g. &lt;code&gt;artist.get_transform() == None&lt;/code&gt;) then the transform is set to &lt;code&gt;ax.transData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38eb79555a68a222a74b48818527044176d84531" translate="yes" xml:space="preserve">
          <source>If no axes exists on the stack, then returns &lt;code&gt;(None, None)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00db06b8dbc7fa2e658499023bcf4c01f3828092" translate="yes" xml:space="preserve">
          <source>If no current figure exists, a new one is created using &lt;a href=&quot;matplotlib.pyplot.figure#matplotlib.pyplot.figure&quot;&gt;&lt;code&gt;figure()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29345b54ac0528b87ae21be5a524b51d910836e" translate="yes" xml:space="preserve">
          <source>If no data is set currently, the BBox will ignore its limits and set the bound to be the bounds of the xydata (&lt;em&gt;xys&lt;/em&gt;). Otherwise, it will compute the bounds of the union of its current data and the data in &lt;em&gt;xys&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3563dc210c0de73ad1eb066c2f5cef4e2727aed" translate="yes" xml:space="preserve">
          <source>If no positional arguments are passed, defaults to (1, 1, 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178685331995c31ca4b2872c4b4c3eda3bfc7929" translate="yes" xml:space="preserve">
          <source>If norm is False, no normalization of the input data is performed, and it is assumed to be in the range (0-1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe78a19608c5cb5593471880562ff024fa912a70" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c9140c963ad5ff9adcc16efec2dd8a2466a8aa" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this defines where the Axes will be drawn if there is extra space due to aspect constraints. The most common way to to specify the anchor are abbreviations of cardinal directions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2039e0c26bebc5505efd2c8e9e00ce30a9968ec" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this defines which parameter will be adjusted to meet the required aspect. See &lt;a href=&quot;matplotlib.axes.axes.set_adjustable#matplotlib.axes.Axes.set_adjustable&quot;&gt;&lt;code&gt;set_adjustable&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93ebf3dfbd97f2807d3b3eb70b96c773ff1b573" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f086007e57d433a554c965ee4203f6bed225e5c3" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, either or both of these values will be supplied to the &lt;a href=&quot;matplotlib.colors.normalize#matplotlib.colors.Normalize&quot;&gt;&lt;code&gt;Normalize&lt;/code&gt;&lt;/a&gt; instance, overriding the default color scaling based on &lt;em&gt;levels&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1b04280cba50af6f875a9d158955e918194048" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, is a &lt;code&gt;len(x)&lt;/code&gt; array which specifies the fraction of the radius with which to offset each wedge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfc58dc529b688dab5d07fb6f65ec8985716c35" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be &lt;code&gt;fmt%pct&lt;/code&gt;. If it is a function, it will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91526c92032d09e1b43e87d89d3268894bc7a22" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, only display cells with more than &lt;em&gt;mincnt&lt;/em&gt; number of points in the cell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8024efe7ae806f131c25dbe2cdea56543edf6e99" translate="yes" xml:space="preserve">
          <source>If not &lt;em&gt;None&lt;/em&gt;, rotates the start of the pie chart by &lt;em&gt;angle&lt;/em&gt; degrees counterclockwise from the x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cb68dd1b4d2db11434fd50e08a4a0d75330ba2" translate="yes" xml:space="preserve">
          <source>If not None this function will be called with any &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#Exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; subclass raised by the callbacks in &lt;a href=&quot;#matplotlib.cbook.CallbackRegistry.process&quot;&gt;&lt;code&gt;CallbackRegistry.process&lt;/code&gt;&lt;/a&gt;. The handler may either consume the exception or re-raise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c13cf1268f826b443717c14fd10f10e7ce2ed64" translate="yes" xml:space="preserve">
          <source>If not None, must be a 3-tuple of the form (scale, length, randomness), representing the sketch parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8001e8528d6712573d3cc14fdac02f427e54e66" translate="yes" xml:space="preserve">
          <source>If not None, must be a four-tuple (x1, y1, x2, y2) defining a rectangle in which to clip the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f993d8a9a98294c200005f3a0a908a8493e451b2" translate="yes" xml:space="preserve">
          <source>If not None, the given affine transformation will be applied to the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba0e1d78c892891b8bc46340919bf92d09b658e" translate="yes" xml:space="preserve">
          <source>If not given, they are assumed to be integer indices, i.e. &lt;code&gt;X = range(M)&lt;/code&gt;, &lt;code&gt;Y = range(N)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715503fa612167f00afe6ff23bf41e92ec65f20c" translate="yes" xml:space="preserve">
          <source>If not given, they will be generated as a uniform integer meshgrid based on the dimensions of &lt;em&gt;U&lt;/em&gt; and &lt;em&gt;V&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa890d7a65716949ef6eb9c741440fe8e305fb9" translate="yes" xml:space="preserve">
          <source>If not given, use &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;image.aspect&quot;]&lt;/a&gt;&lt;/code&gt; (default: 'equal').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8eb1766a78f3772ae06f0dcfdc6d763bc1e0ab" translate="yes" xml:space="preserve">
          <source>If not provided, a new figure will be created, and the figure number will be incremented. The figure objects holds this number in a &lt;code&gt;number&lt;/code&gt; attribute. If num is provided, and a figure with this id already exists, make it active, and returns a reference to it. If this figure does not exists, create it and returns it. If num is a string, the window title will be set to this figure's &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edbe3ea116e1293d11d06bd30a8e23648e48bc6" translate="yes" xml:space="preserve">
          <source>If not specified, defaults to increasing integers along each axis, like those returned by &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.indices.html#numpy.indices&quot;&gt;&lt;code&gt;indices()&lt;/code&gt;&lt;/a&gt;. As indicated by the &lt;code&gt;/&lt;/code&gt; in the function signature, these arguments can only be passed positionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683eddf8646ae583eba86ada78f4e1a65c1c4cf4" translate="yes" xml:space="preserve">
          <source>If not specified, the Triangulation's default TriFinder will be used by calling &lt;a href=&quot;#matplotlib.tri.Triangulation.get_trifinder&quot;&gt;&lt;code&gt;matplotlib.tri.Triangulation.get_trifinder()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85135a8c882c58a90e31dd6fd4b89c1537495f7a" translate="yes" xml:space="preserve">
          <source>If one string color, e.g., &lt;em&gt;colors&lt;/em&gt; = 'r' or &lt;em&gt;colors&lt;/em&gt; = 'red', all labels will be plotted in this color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65102c20da725049a35e582e1cf642326067e1e5" translate="yes" xml:space="preserve">
          <source>If pass_through is True, all ancestors will always be invalidated, even if 'self' is already invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb37fb7ec1ec99f5bd3d9460f608e9b4dbee0b38" translate="yes" xml:space="preserve">
          <source>If present, indicates that the encoder should make an extra pass over the image in order to select optimal encoder settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7063b2081884d87a1f3ac9dd83e1a357d1b32d7" translate="yes" xml:space="preserve">
          <source>If present, indicates that this image should be stored as a progressive JPEG file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e18477edd2fc667fc1297cc1f0f2bcae622f939" translate="yes" xml:space="preserve">
          <source>If provided must have signature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508f4649ef1f8f847005f5ba84b2c0bc135ba353" translate="yes" xml:space="preserve">
          <source>If provided will set the plotting style of the fliers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049f3daa1e9bf8fcdd63cfb5016fdf7f69829ed8" translate="yes" xml:space="preserve">
          <source>If provided, a FontProperties() object describing the size and style of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb54783269d7c044588f5ed9dbaed3919c24d4" translate="yes" xml:space="preserve">
          <source>If provided, will set the plotting style of the boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20394e53cfc8daea4a1a0ce046048fc16d2bf637" translate="yes" xml:space="preserve">
          <source>If provided, will set the plotting style of the caps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5078540f2e178bc0f13c801ce7acf27dd126be56" translate="yes" xml:space="preserve">
          <source>If provided, will set the plotting style of the means</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c1738e7b52d0ffe1595d70bd5938d297a1bbf3" translate="yes" xml:space="preserve">
          <source>If provided, will set the plotting style of the medians</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac2f75586755168b892c2a5c705e673a5b7a785" translate="yes" xml:space="preserve">
          <source>If provided, will set the plotting style of the whiskers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8b9ac61631ee8386f9720abb6c2efdcbcffd30" translate="yes" xml:space="preserve">
          <source>If raw=True, then these are all in units relative to the container with no margins. (used for constrained_layout).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcba5f5c377d898f08ad3b55a5f49ea8293aa29" translate="yes" xml:space="preserve">
          <source>If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716dddf62961de47947f3959e6ec2e39cc68db83" translate="yes" xml:space="preserve">
          <source>If s is a path, return s, else False</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d93501a309adedc922fafbf79301e9e4c6bc67" translate="yes" xml:space="preserve">
          <source>If selection is less than &lt;em&gt;minspan&lt;/em&gt;, do not call &lt;em&gt;onselect&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff5d628e2a1d6057d9e8b5fe3ce386263ea4980" translate="yes" xml:space="preserve">
          <source>If set to False, then empty pdf files will be deleted automatically when closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e277e214ef5d351349904e154ce0e54b127f76c" translate="yes" xml:space="preserve">
          <source>If set to a non-None value, use Pillow to save the figure instead of Matplotlib's builtin PNG support, and pass these keyword arguments to &lt;code&gt;PIL.Image.save&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b4fe389d94a543edf3b942e41778520f0c764e" translate="yes" xml:space="preserve">
          <source>If set, forces &lt;em&gt;ismath&lt;/em&gt; to True. This parameter is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a964b971d3f0f8fd5280b9fed700e9fdbe81a614" translate="yes" xml:space="preserve">
          <source>If skipkeys is false, then it is a TypeError to attempt encoding of keys that are not str, int, float or None. If skipkeys is True, such items are simply skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d3ee5a5399c84c8bf292894726af17c760cc28" translate="yes" xml:space="preserve">
          <source>If sort_keys is true, then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8dd16f24fcea986818a24c9f30bd0af1fa3275" translate="yes" xml:space="preserve">
          <source>If specified, default is a function that gets called for objects that can't otherwise be serialized. It should return a JSON encodable version of the object or raise a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3315e362dc900e95fcfee9e78a1472f09af46d95" translate="yes" xml:space="preserve">
          <source>If specified, plot a projection of the contour lines at this position in a plane normal to zdir</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bfa5f87b85fdea75f00107dcc88e9d7802d0ac" translate="yes" xml:space="preserve">
          <source>If specified, separators should be an (item_separator, key_separator) tuple. The default is (', ', ': ') if &lt;em&gt;indent&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; and (',', ': ') otherwise. To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0b4d465f914bdd032c91a8c876281e685d3d37" translate="yes" xml:space="preserve">
          <source>If specified, the inset axes created will be created with this class's constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45b59e64720636115dac20ff08173a36c91a292" translate="yes" xml:space="preserve">
          <source>If start_rasterizing is called multiple times before stop_rasterizing is called, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2880c93e905066cf6098374a0bea00d6f9460380" translate="yes" xml:space="preserve">
          <source>If stop_rasterizing is called multiple times before start_rasterizing is called, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d91fdc98df6d8199b5999ed640a5785ef90b74" translate="yes" xml:space="preserve">
          <source>If successful, adds a new event &lt;code&gt;tool_trigger_{name}&lt;/code&gt; where &lt;code&gt;{name}&lt;/code&gt; is the &lt;em&gt;name&lt;/em&gt; of the tool; the event is fired everytime the tool is triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7255536ecf94a89f6702629f141a7426b4a6db79" translate="yes" xml:space="preserve">
          <source>If the 'pnginfo' key is present, it completely overrides &lt;em&gt;metadata&lt;/em&gt;, including the default 'Software' key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7573a66ea7f3bfb8bcd9de1daf61268805ef85e2" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;scale&lt;/em&gt; kwarg is &lt;em&gt;None&lt;/em&gt;, the arrow length unit. Default is &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc80dd8e1c47389c8973e2f073063db4efffb80" translate="yes" xml:space="preserve">
          <source>If the animation in repeated, adds a delay in milliseconds before repeating the animation. Defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368c8d13e736aeaa71275412845135ddec3a9de8" translate="yes" xml:space="preserve">
          <source>If the animation in repeated, adds a delay in milliseconds before repeating the animation. Defaults to &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1ce2d1c482c6ffc245b8315101fb2e68ff55e2" translate="yes" xml:space="preserve">
          <source>If the artist is not in contained in an Axes or if the xaxis does not have units, &lt;em&gt;x&lt;/em&gt; itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2cf8156f947bfe7ea13bafa7c5f5c8c44b0110" translate="yes" xml:space="preserve">
          <source>If the artist is not in contained in an Axes or if the yaxis does not have units, &lt;em&gt;y&lt;/em&gt; itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddec7c5e4a03a88f9e065a4a7201ec633aca2fdb" translate="yes" xml:space="preserve">
          <source>If the canonical value is not in the list it is assumed to have the highest priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa87eb5798a106550ee4761edac1a85863cfaa" translate="yes" xml:space="preserve">
          <source>If the case &lt;em&gt;kind&lt;/em&gt; ='geom' is chosen by the user, a simple geometric approximation is used (weighted average of the triangle normal vectors), which could improve speed on very large grids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3866efaede510456fccb161dd0c1c3fc0cab1e93" translate="yes" xml:space="preserve">
          <source>If the children of this DrawingArea should be clipped by DrawingArea bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9708ea975540f8522e14a51e2b525643e2144be4" translate="yes" xml:space="preserve">
          <source>If the color is the only part of the format string, you can additionally use any &lt;a href=&quot;../colors_api#module-matplotlib.colors&quot;&gt;&lt;code&gt;matplotlib.colors&lt;/code&gt;&lt;/a&gt; spec, e.g. full names (&lt;code&gt;'green'&lt;/code&gt;) or hex strings (&lt;code&gt;'#008000'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3db53a02359015d4ab4a3f50463ff0821c84c22" translate="yes" xml:space="preserve">
          <source>If the current axes doesn't exist, or isn't a polar one, the appropriate axes will be created and then returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905e96de93d154463cc7d4c3436792f6f7a90e9f" translate="yes" xml:space="preserve">
          <source>If the figure already has a axes with key (&lt;em&gt;args&lt;/em&gt;, &lt;em&gt;kwargs&lt;/em&gt;) then it will simply make that axes current and return it. This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs. The axes &lt;em&gt;label&lt;/em&gt; attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ead6e6bd93bfa458c3e62c275d9f757e48dfb49" translate="yes" xml:space="preserve">
          <source>If the figure already has a subplot with key (&lt;em&gt;args&lt;/em&gt;, &lt;em&gt;kwargs&lt;/em&gt;) then it will simply make that subplot current and return it. This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new subplot), you must use a unique set of args and kwargs. The axes &lt;em&gt;label&lt;/em&gt; attribute has been exposed for this purpose: if you want two subplots that are otherwise identical to be added to the figure, make sure you give them unique labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1ed354de1927b0a68adc807f4e7d90698f77ef" translate="yes" xml:space="preserve">
          <source>If the figure already has an axes with key (&lt;em&gt;args&lt;/em&gt;, &lt;em&gt;kwargs&lt;/em&gt;) then it will simply make that axes current and return it. This behavior is deprecated. Meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs. The axes &lt;em&gt;label&lt;/em&gt; attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03e07ff8096b3cd3013f3ae5df50a57925a7515" translate="yes" xml:space="preserve">
          <source>If the figure was not created using &lt;a href=&quot;matplotlib.pyplot.figure#matplotlib.pyplot.figure&quot;&gt;&lt;code&gt;figure()&lt;/code&gt;&lt;/a&gt;, it will lack a &lt;a href=&quot;../backend_bases_api#matplotlib.backend_bases.FigureManagerBase&quot;&gt;&lt;code&gt;FigureManagerBase&lt;/code&gt;&lt;/a&gt;, and will raise an AttributeError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64048df64141da983be4a0aa05c1239c16ad97e4" translate="yes" xml:space="preserve">
          <source>If the filename ends in .gz, the file is implicitly ungzipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864b343fdeeb6f231990994f94950b7cd1407b30" translate="yes" xml:space="preserve">
          <source>If the images differ, the return value depends on &lt;em&gt;in_decorator&lt;/em&gt;. If &lt;em&gt;in_decorator&lt;/em&gt; is true, a dict with the following entries is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ab0780edc3879c9be21ebcd0c4ed39b5579c39" translate="yes" xml:space="preserve">
          <source>If the key is not found, &lt;code&gt;%WINDIR%\Fonts&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b91e440c1d556e6436be35fb2d97324d240327b" translate="yes" xml:space="preserve">
          <source>If the norm on the mappable is different than before, this resets the locator and formatter for the axis, so if these have been customized, they will need to be customized again. However, if the norm only changes values of &lt;em&gt;vmin&lt;/em&gt;, &lt;em&gt;vmax&lt;/em&gt; or &lt;em&gt;cmap&lt;/em&gt; then the old formatter and locator will be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673bf3359efa6b6872831cd597c6b5b517f3d0c3" translate="yes" xml:space="preserve">
          <source>If the number of bins doesn't equal &lt;em&gt;ncolors&lt;/em&gt;, the color is chosen by linear interpolation of the bin number onto color numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a6ce818dc3afc69233b8be9ef64731b0ed3cd2" translate="yes" xml:space="preserve">
          <source>If the patch contains Bezier curves, the curves will be interpolated by line segments. To access the curves as curves, use &lt;a href=&quot;#matplotlib.patches.Patch.get_path&quot;&gt;&lt;code&gt;get_path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88646e031705ac0546046b6b7240b5799ea16171" translate="yes" xml:space="preserve">
          <source>If the path is closed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b6765bb1ef47dfeff7524af5726cb1066391d0" translate="yes" xml:space="preserve">
          <source>If the sum of the inputs and outputs is nonzero, the discrepancy will appear as a cubic Bezier curve along the top and bottom edges of the trunk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8fb1624cbe5f426c422b266dec550dee8f0cc7" translate="yes" xml:space="preserve">
          <source>If the temporary files should be deleted after stitching the final result. Setting this to &lt;code&gt;False&lt;/code&gt; can be useful for debugging. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417fc047d7c1e46ad30d2f3adbad87aa735b4bc1" translate="yes" xml:space="preserve">
          <source>If the transform needs to do something non-standard with &lt;a href=&quot;path_api#matplotlib.path.Path&quot;&gt;&lt;code&gt;matplotlib.path.Path&lt;/code&gt;&lt;/a&gt; objects, such as adding curves where there were once line segments, it should override:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfba509fe1d164ca6d7b8dc3a9c1af899ab50d9" translate="yes" xml:space="preserve">
          <source>If the value in data is not a string, unicode, bytes type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9d0bdf233976fb80208a11e011912a01c80caf" translate="yes" xml:space="preserve">
          <source>If there are any colorbars using the mappable for this norm, setting the norm of the mappable will reset the norm, locator, and formatters on the colorbar to default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2939acf047ee9bfb5a65dce2ea8af425669e122" translate="yes" xml:space="preserve">
          <source>If there is an active figure, it will be updated and displayed before the pause, and the GUI event loop (if any) will run during the pause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd57bea828a2b0f03c375181586ed353292729c5" translate="yes" xml:space="preserve">
          <source>If this is not specified, the Triangulation's default TriFinder will be used by calling &lt;a href=&quot;#matplotlib.tri.Triangulation.get_trifinder&quot;&gt;&lt;code&gt;matplotlib.tri.Triangulation.get_trifinder()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6389f090d6675fbba73ae94c9574fec956b154c3" translate="yes" xml:space="preserve">
          <source>If this method should give warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf2058dd6e0f50fa569ac1e98831352e5056d56" translate="yes" xml:space="preserve">
          <source>If true, also return the 1D values of the window that was applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95857bc28c23c7791db4e353e926cccf3d3f171" translate="yes" xml:space="preserve">
          <source>If true, creates a vertical violin plot. Otherwise, creates a horizontal violin plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb3a9659145e666ab5982a3fe2782b2d0e050f2" translate="yes" xml:space="preserve">
          <source>If true, plots the violins vertically. Otherwise, plots the violins horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be99294e66787c7422641ad6175f20ba6815d54" translate="yes" xml:space="preserve">
          <source>If true, will toggle rendering of the extrema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122b53318bfa08b98fd9714c3280575d374831cf" translate="yes" xml:space="preserve">
          <source>If true, will toggle rendering of the means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cc61d01dd13a4b3cc16011c74ee337296007ec" translate="yes" xml:space="preserve">
          <source>If true, will toggle rendering of the medians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bd0780a04e358e80f17119e8a6fde43c4fea85" translate="yes" xml:space="preserve">
          <source>If using a GUI backend with pyplot, display the figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1655023fe546322ede2ad133109c34166fadb342" translate="yes" xml:space="preserve">
          <source>If using the writer classes directly (not through &lt;a href=&quot;_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.save&quot;&gt;&lt;code&gt;Animation.save&lt;/code&gt;&lt;/a&gt;), it is strongly encouraged to use the &lt;code&gt;saving&lt;/code&gt; context manager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ba4a7659796b76577ebd8859058c5d86071e32" translate="yes" xml:space="preserve">
          <source>If you are creating many figures, make sure you explicitly call &lt;a href=&quot;matplotlib.pyplot.close#matplotlib.pyplot.close&quot;&gt;&lt;code&gt;pyplot.close()&lt;/code&gt;&lt;/a&gt; on the figures you are not using, because this will enable pyplot to properly clean up the memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240ecb7934a20a7d6744b9fb77eea21cab017011" translate="yes" xml:space="preserve">
          <source>If you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to &lt;a href=&quot;#matplotlib.axes.Axes.plot_date&quot;&gt;&lt;code&gt;plot_date&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#matplotlib.axes.Axes.plot_date&quot;&gt;&lt;code&gt;plot_date&lt;/code&gt;&lt;/a&gt; will set the default tick locator to &lt;a href=&quot;../dates_api#matplotlib.dates.AutoDateLocator&quot;&gt;&lt;code&gt;AutoDateLocator&lt;/code&gt;&lt;/a&gt; (if the tick locator is not already set to a &lt;a href=&quot;../dates_api#matplotlib.dates.DateLocator&quot;&gt;&lt;code&gt;DateLocator&lt;/code&gt;&lt;/a&gt; instance) and the default tick formatter to &lt;a href=&quot;../dates_api#matplotlib.dates.AutoDateFormatter&quot;&gt;&lt;code&gt;AutoDateFormatter&lt;/code&gt;&lt;/a&gt; (if the tick formatter is not already set to a &lt;a href=&quot;../dates_api#matplotlib.dates.DateFormatter&quot;&gt;&lt;code&gt;DateFormatter&lt;/code&gt;&lt;/a&gt; instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044738e0332f061540d48a9c71ced91907b8f10b" translate="yes" xml:space="preserve">
          <source>If you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to &lt;a href=&quot;#matplotlib.pyplot.plot_date&quot;&gt;&lt;code&gt;plot_date&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#matplotlib.pyplot.plot_date&quot;&gt;&lt;code&gt;plot_date&lt;/code&gt;&lt;/a&gt; will set the default tick locator to &lt;a href=&quot;../dates_api#matplotlib.dates.AutoDateLocator&quot;&gt;&lt;code&gt;AutoDateLocator&lt;/code&gt;&lt;/a&gt; (if the tick locator is not already set to a &lt;a href=&quot;../dates_api#matplotlib.dates.DateLocator&quot;&gt;&lt;code&gt;DateLocator&lt;/code&gt;&lt;/a&gt; instance) and the default tick formatter to &lt;a href=&quot;../dates_api#matplotlib.dates.AutoDateFormatter&quot;&gt;&lt;code&gt;AutoDateFormatter&lt;/code&gt;&lt;/a&gt; (if the tick formatter is not already set to a &lt;a href=&quot;../dates_api#matplotlib.dates.DateFormatter&quot;&gt;&lt;code&gt;DateFormatter&lt;/code&gt;&lt;/a&gt; instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab66ad7b2bcc44675355e33fde65d82c195d710" translate="yes" xml:space="preserve">
          <source>If you do not specify args, you can alternatively pass &lt;em&gt;bottom&lt;/em&gt; or &lt;em&gt;top&lt;/em&gt; as kwargs, i.e.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f282432d579a5238fd89de2de21420603a194c" translate="yes" xml:space="preserve">
          <source>If you do not specify args, you can pass &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; as kwargs, i.e.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0ce421791f8e79dd5d62fe7b1fb30642825a07" translate="yes" xml:space="preserve">
          <source>If you do not want this behavior, use the &lt;a href=&quot;matplotlib.figure.figure#matplotlib.figure.Figure.add_subplot&quot;&gt;&lt;code&gt;Figure.add_subplot&lt;/code&gt;&lt;/a&gt; method or the &lt;a href=&quot;matplotlib.pyplot.axes#matplotlib.pyplot.axes&quot;&gt;&lt;code&gt;pyplot.axes&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbc0e722960b757a384b890e9b84c4f0fee4c32" translate="yes" xml:space="preserve">
          <source>If you make multiple lines with one plot command, the kwargs apply to all those lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d75665695befff817c598e1ee4625b021ad33d0" translate="yes" xml:space="preserve">
          <source>If you need to create a &lt;a href=&quot;#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt; object from another form of data, consider the static methods &lt;a href=&quot;#matplotlib.transforms.Bbox.unit&quot;&gt;&lt;code&gt;unit()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.transforms.Bbox.from_bounds&quot;&gt;&lt;code&gt;from_bounds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.transforms.Bbox.from_extents&quot;&gt;&lt;code&gt;from_extents()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0aee03a52c08bfbfa096f664382300f7e64be8d" translate="yes" xml:space="preserve">
          <source>If you really must use datetime.datetime() or similar and still need microsecond precision, your only chance is to use very early years; using year 0001 is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c6da3b8fef2f061272c0c8b97c663430a4d2de" translate="yes" xml:space="preserve">
          <source>If you want microsecond resolution time plots, it is strongly recommended to use floating point seconds, not datetime-like time representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928f2506eb169cbdb9f5180a00ac0aa4d19f1a7a" translate="yes" xml:space="preserve">
          <source>If you want the effects of this function to be temporary, it can be used as a context manager, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e59bc5347535d7ba08ced3270e2e705c76cadd6" translate="yes" xml:space="preserve">
          <source>If you want to create an axes within the figure, that still preserves the aspect ratio, be sure to create it with equal width and height. See examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0919b30a65d3477f8baf5ed9ad7cdf706909d70" translate="yes" xml:space="preserve">
          <source>If you want to know the valid types of arguments, you can provide the name of the property you want to set without a value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed553e9e53f425c523b2d106d0f8f79436f76f41" translate="yes" xml:space="preserve">
          <source>If you want to override the default locator, use one of the above or a custom locator and pass it to the x or y axis instance. The relevant methods are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70f2e3ee4be48eebc5a37848a039f1ab70a69f0" translate="yes" xml:space="preserve">
          <source>If you want to see all the properties that can be set, and their possible values, you can do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddabf9f885be306cf1e9e03dce0d4e146c7d0f3" translate="yes" xml:space="preserve">
          <source>If you want to set the clim of multiple images, use &lt;a href=&quot;../cm_api#matplotlib.cm.ScalarMappable.set_clim&quot;&gt;&lt;code&gt;set_clim&lt;/code&gt;&lt;/a&gt; on every image, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50257264fd95791484a25dc62027599fd188ce3d" translate="yes" xml:space="preserve">
          <source>If you're running a pure python shell or executing a non-GUI python script, you should use &lt;a href=&quot;matplotlib.pyplot.show#matplotlib.pyplot.show&quot;&gt;&lt;code&gt;matplotlib.pyplot.show&lt;/code&gt;&lt;/a&gt; instead, which takes care of managing the event loop for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431501882457db7040db31dbe376d21b5421833b" translate="yes" xml:space="preserve">
          <source>If zooming in on a plot when using float arguments then the actual data points that have markers will change because the distance between markers is always determined from the display-coordinates axes-bounding-box-diagonal regardless of the actual axes data limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fee1435d74666b84850cd5e82c18229351da5d" translate="yes" xml:space="preserve">
          <source>Ignored</source>
          <target state="translated">Ignored</target>
        </trans-unit>
        <trans-unit id="b8539346ff5ad19dc34b42d198c4ab7bd655725c" translate="yes" xml:space="preserve">
          <source>Ignored if &lt;em&gt;histtype&lt;/em&gt; is 'step' or 'stepfilled'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34faab1c0cd049ed280737682f9f92b27911765f" translate="yes" xml:space="preserve">
          <source>IgnoredKeywordWarning</source>
          <target state="translated">IgnoredKeywordWarning</target>
        </trans-unit>
        <trans-unit id="4de347701f87675c9ad5816532d8c4b5a11ce6c4" translate="yes" xml:space="preserve">
          <source>Image Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6676efb2a84017a0fcb7b8d45d32eb93259066b4" translate="yes" xml:space="preserve">
          <source>Image Masked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c16f9b28787d3bfc0cfe45483b0404ceb0d923" translate="yes" xml:space="preserve">
          <source>Image Nonuniform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7062e745105952db2700cc718774139dec6a98" translate="yes" xml:space="preserve">
          <source>Image Slices Viewer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655224a263f2f9473d263e89861ca91c3bd4eb2b" translate="yes" xml:space="preserve">
          <source>Image tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc82a2474dfb0a97525a68ae2a982dbd72cbbc5f" translate="yes" xml:space="preserve">
          <source>Imagine an artificial sun placed at infinity in some azimuth and elevation position illuminating our surface. The parts of the surface that slope toward the sun should brighten while those sides facing away should become darker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9788eb9b703e3b80c6233ff3e13d4a21f0a02e" translate="yes" xml:space="preserve">
          <source>Implement the default mpl key bindings defined at &lt;a href=&quot;https://matplotlib.org/3.1.1/users/navigation_toolbar.html#key-event-handling&quot;&gt;Navigation Keyboard Shortcuts&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6453d92c19dc57b19c5a1c4839ffd532d81b85" translate="yes" xml:space="preserve">
          <source>Implement the default mpl key bindings for the canvas and toolbar described at &lt;a href=&quot;https://matplotlib.org/3.1.1/users/navigation_toolbar.html#key-event-handling&quot;&gt;Navigation Keyboard Shortcuts&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e135ba8919201e2740dfa859a6e6b0085673ba59" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass such that it returns a serializable object for &lt;code&gt;o&lt;/code&gt;, or calls the base implementation (to raise a &lt;code&gt;TypeError&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198d4ae48acaa69791332b1119dd4e0bd10e9280" translate="yes" xml:space="preserve">
          <source>Implementation of the 'linear' algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b00fc31a51484f918f95395c02e93064b170b8" translate="yes" xml:space="preserve">
          <source>Implementation of the 'mean' algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914b5ff26e7f592b6c4e4552d8c9bbbb9fbcf118" translate="yes" xml:space="preserve">
          <source>Implementation of the 'none' algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0160c8036fb42fcbf99d91ed7e6b850db9fe7157" translate="yes" xml:space="preserve">
          <source>Implements a Renderer which contains another renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="35c631d0371023eb05ee248134fcc05f7c23922b" translate="yes" xml:space="preserve">
          <source>In addition to AxisArtist, the Axes will have &lt;em&gt;gridlines&lt;/em&gt; attribute, which obviously draws grid lines. The gridlines needs to be separated from the axis as some gridlines can never pass any axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0003e4c1868d69ed9ba0da8c11685b1fe720cee2" translate="yes" xml:space="preserve">
          <source>In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627f4ffa82eaf5cc17d07d5df8c54c381fbc89cf" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;#matplotlib.backend_bases.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.backend_bases.LocationEvent&quot;&gt;&lt;code&gt;LocationEvent&lt;/code&gt;&lt;/a&gt; attributes, the following attributes are defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d606e2fcd20fcbf85af93b97cc0d7cefe974c08" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;#matplotlib.backend_bases.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; attributes, the following event attributes are defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d01422503ab1b0d96903e8438267174dca017e" translate="yes" xml:space="preserve">
          <source>In addition to the above described arguments, this function can take a &lt;strong&gt;data&lt;/strong&gt; keyword argument. If such a &lt;strong&gt;data&lt;/strong&gt; argument is given, the following arguments are replaced by &lt;strong&gt;data[&amp;lt;arg&amp;gt;]&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b99b405f745e7a01df763731147f8ae00f552e" translate="yes" xml:space="preserve">
          <source>In addition to what UnicodeFonts provides, this class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24c680f484c3f109e9c4fad637654c8a3c5c659" translate="yes" xml:space="preserve">
          <source>In addition, most of the constructors take an interval argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48a9dd4cd63d33c23c542684cad25243730fcf4" translate="yes" xml:space="preserve">
          <source>In all of these cases, the values in &lt;em&gt;frames&lt;/em&gt; is simply passed through to the user-supplied &lt;em&gt;func&lt;/em&gt; and thus can be of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053d278fdee7265b4d8ac9d330c2847243b3b0f0" translate="yes" xml:space="preserve">
          <source>In both cases it is critical to keep a reference to the instance object. The animation is advanced by a timer (typically from the host GUI framework) which the &lt;a href=&quot;_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation&quot;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt; object holds the only reference to. If you do not hold a reference to the &lt;a href=&quot;_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation&quot;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt; object, it (and hence the timers), will be garbage collected which will stop the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c79744bc2f17fc247c16d8eb24127826e973ac" translate="yes" xml:space="preserve">
          <source>In cases where the values of the CI are less than the lower quartile or greater than the upper quartile, the notches will extend beyond the box, giving it a distinctive &quot;flipped&quot; appearance. This is expected behavior and consistent with other statistical visualization packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314679cadf35a3d3157007ce4a26f06f3071def0" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;#matplotlib.widgets.Lasso&quot;&gt;&lt;code&gt;Lasso&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.widgets.LassoSelector&quot;&gt;&lt;code&gt;LassoSelector&lt;/code&gt;&lt;/a&gt; is written with an interface similar to &lt;a href=&quot;#matplotlib.widgets.RectangleSelector&quot;&gt;&lt;code&gt;RectangleSelector&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.widgets.SpanSelector&quot;&gt;&lt;code&gt;SpanSelector&lt;/code&gt;&lt;/a&gt;, and will continue to interact with the axes until disconnected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef22584e48c43b9a2e1afb795f2e03feb53a0d75" translate="yes" xml:space="preserve">
          <source>In either case, if &lt;em&gt;bytes&lt;/em&gt; is &lt;em&gt;False&lt;/em&gt; (default), the rgba array will be floats in the 0-1 range; if it is &lt;em&gt;True&lt;/em&gt;, the returned rgba array will be uint8 in the 0 to 255 range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cacf53dca1b24376c142288b00647c110c9051" translate="yes" xml:space="preserve">
          <source>In interactive mode, &lt;a href=&quot;_as_gen/matplotlib.pyplot.set_cmap#matplotlib.pyplot.set_cmap&quot;&gt;&lt;code&gt;set_cmap()&lt;/code&gt;&lt;/a&gt; will update the colormap post-hoc, allowing you to see which one works best for your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dc949f73d902f28579b410c0974b8755c23be8" translate="yes" xml:space="preserve">
          <source>In many cases you will create a &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure&quot;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt; and one or more &lt;a href=&quot;axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;_as_gen/matplotlib.pyplot.subplots#matplotlib.pyplot.subplots&quot;&gt;&lt;code&gt;pyplot.subplots&lt;/code&gt;&lt;/a&gt; and from then on only work on these objects. However, it's also possible to create &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure&quot;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt;s explicitly (e.g. when including them in GUI applications).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff627a1d92e98141ad7dc8b6f88ea5b6c081b4c9" translate="yes" xml:space="preserve">
          <source>In most backends callbacks subscribed to this callback will be fired after the rendering is complete but before the screen is updated. Any extra artists drawn to the canvas's renderer will be reflected without an explicit call to &lt;code&gt;blit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d645e563818624b65afbb35adcd7f2376cebe94" translate="yes" xml:space="preserve">
          <source>In non-affine transformations, this is generally a no-op. In affine transformations, this is equivalent to &lt;code&gt;transform(values)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac44912d91d2eb76b1d647faf12f872319061976" translate="yes" xml:space="preserve">
          <source>In non-affine transformations, this is generally equivalent to &lt;code&gt;transform(values)&lt;/code&gt;. In affine transformations, this is always a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f06ca8f8edd9787bc589a165326819497b446d7" translate="yes" xml:space="preserve">
          <source>In non-interactive mode, display all figures and block until the figures have been closed; in interactive mode it has no effect unless figures were created prior to a change from non-interactive to interactive mode (not recommended). In that case it displays the figures but does not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e970ba62a5e1b27cc3be2b286e9d994743e3e93" translate="yes" xml:space="preserve">
          <source>In one-dimension - on a segment - a cubic interpolating function is defined by the values of the function and its derivative at both ends. This is almost the same in 2-d inside a triangle, except that the values of the function and its 2 derivatives have to be defined at each triangle node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494b47d4741667a275c1ac8c7100f841ac4edc85" translate="yes" xml:space="preserve">
          <source>In order to draw a complex Sankey diagram, create an instance of &lt;a href=&quot;#matplotlib.sankey.Sankey&quot;&gt;&lt;code&gt;Sankey&lt;/code&gt;&lt;/a&gt; by calling it without any kwargs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca36e535c2bea61b1703526495290da09cdfb20" translate="yes" xml:space="preserve">
          <source>In order to keep the size of the test suite from ballooning, we only include the &lt;code&gt;svg&lt;/code&gt; or &lt;code&gt;pdf&lt;/code&gt; outputs if the test is explicitly exercising a feature dependent on that backend (see also the &lt;a href=&quot;#matplotlib.testing.decorators.check_figures_equal&quot;&gt;&lt;code&gt;check_figures_equal&lt;/code&gt;&lt;/a&gt; decorator for that purpose).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b549eb1f4c1badf65676687590d4a31edf2246a5" translate="yes" xml:space="preserve">
          <source>In order to turn off the SpanSelector, set &lt;code&gt;span_selector.active=False&lt;/code&gt;. To turn it back on, set &lt;code&gt;span_selector.active=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7673a42f53a1188fdfa3a97610cd00b5e75c98b" translate="yes" xml:space="preserve">
          <source>In practice, one should always disconnect all callbacks when they are no longer needed to avoid dangling references (and thus memory leaks). However, real code in Matplotlib rarely does so, and due to its design, it is rather difficult to place this kind of code. To get around this, and prevent this class of memory leaks, we instead store weak references to bound methods only, so when the destination object needs to die, the CallbackRegistry won't keep it alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0de5563e12c9d0828c86ccb13f496ed2bbc4cc" translate="yes" xml:space="preserve">
          <source>In rare circumstances, &lt;a href=&quot;#matplotlib.figure.Figure.add_axes&quot;&gt;&lt;code&gt;add_axes&lt;/code&gt;&lt;/a&gt; may be called with a single argument, a axes instance already created in the present figure but not in the figure's list of axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c9742175eacc6f0263e44859bcec1d2bce31dd" translate="yes" xml:space="preserve">
          <source>In rare circumstances, &lt;a href=&quot;#matplotlib.figure.Figure.add_subplot&quot;&gt;&lt;code&gt;add_subplot&lt;/code&gt;&lt;/a&gt; may be called with a single argument, a subplot axes instance already created in the present figure but not in the figure's list of axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa45488bd1645339709640b0c5735601757b957" translate="yes" xml:space="preserve">
          <source>In rare circumstances, &lt;a href=&quot;matplotlib.figure.figure#matplotlib.figure.Figure.add_subplot&quot;&gt;&lt;code&gt;add_subplot&lt;/code&gt;&lt;/a&gt; may be called with a single argument, a subplot axes instance already created in the present figure but not in the figure's list of axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b30c67d49851e73c74090954ac588c8cc0c9045" translate="yes" xml:space="preserve">
          <source>In reality &lt;a href=&quot;#matplotlib.backends.backend_pdf.PdfPages&quot;&gt;&lt;code&gt;PdfPages&lt;/code&gt;&lt;/a&gt; is a thin wrapper around &lt;a href=&quot;#matplotlib.backends.backend_pdf.PdfFile&quot;&gt;&lt;code&gt;PdfFile&lt;/code&gt;&lt;/a&gt;, in order to avoid confusion when using &lt;a href=&quot;_as_gen/matplotlib.pyplot.savefig#matplotlib.pyplot.savefig&quot;&gt;&lt;code&gt;savefig()&lt;/code&gt;&lt;/a&gt; and forgetting the format argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04a36a627a1ac9bfae514eba64c85c375783c31" translate="yes" xml:space="preserve">
          <source>In some cases such as the colorbar, there is no distinction between major and minor ticks; the tick locations might be set manually, or by a locator that puts ticks at integer powers of base and at intermediate locations. For this situation, disable the minor_thresholds logic by using &lt;code&gt;minor_thresholds=(np.inf, np.inf)&lt;/code&gt;, so that all ticks will be labeled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556d3644782d2fed367a8ef0458a4849413882d2" translate="yes" xml:space="preserve">
          <source>In some cases, this transform may insert curves into the path that began as line segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606aedf7180e7c0ec656ef7fe4739b60d181cfa3" translate="yes" xml:space="preserve">
          <source>In that case, only the visible parts of the ellipse are drawn, with each visible arc using a fixed number of spline segments (8). The algorithm proceeds as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32f1f8c2ceeeb806ccbd0357d594db65e47bf87" translate="yes" xml:space="preserve">
          <source>In the case of text, a hit is true anywhere in the axis-aligned bounding-box containing the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7381ae1b870a343fd3dba979580451c29fe62562" translate="yes" xml:space="preserve">
          <source>In the current implementation of &lt;code&gt;DraggableLegend&lt;/code&gt; and &lt;a href=&quot;#matplotlib.offsetbox.DraggableAnnotation&quot;&gt;&lt;code&gt;DraggableAnnotation&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.offsetbox.DraggableBase.update_offset&quot;&gt;&lt;code&gt;update_offset&lt;/code&gt;&lt;/a&gt; places the artists in display coordinates, and &lt;a href=&quot;#matplotlib.offsetbox.DraggableBase.finalize_offset&quot;&gt;&lt;code&gt;finalize_offset&lt;/code&gt;&lt;/a&gt; recalculates their position in axes coordinate and set a relevant attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2d1d3a1b8ad054060ae233b716f7c3c0507af4" translate="yes" xml:space="preserve">
          <source>In the default case (&lt;em&gt;kind&lt;/em&gt; ='min_E'), the interpolant minimizes a curvature energy on the functional space generated by the HCT element shape functions - with imposed values but arbitrary derivatives at each node. The minimized functional is the integral of the so-called total curvature (implementation based on an algorithm from &lt;a href=&quot;#r0be0c58fd53f-2&quot; id=&quot;id2&quot;&gt;[R0be0c58fd53f-2]&lt;/a&gt; - PCG sparse solver):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df3256f47b68907f0513c8931047c0ca60942f5" translate="yes" xml:space="preserve">
          <source>In the first case, &lt;em&gt;cmap&lt;/em&gt; must be a &lt;a href=&quot;_as_gen/matplotlib.colors.colormap#matplotlib.colors.Colormap&quot;&gt;&lt;code&gt;matplotlib.colors.Colormap&lt;/code&gt;&lt;/a&gt; instance. The &lt;em&gt;name&lt;/em&gt; is optional; if absent, the name will be the &lt;code&gt;name&lt;/code&gt; attribute of the &lt;em&gt;cmap&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e129a86257b745c2e33da46e6bec412865f4ca" translate="yes" xml:space="preserve">
          <source>In the new axes class, xaxis and yaxis is set to not visible by default, and new set of artist (AxisArtist) are defined to draw axis line, ticks, ticklabels and axis label. Axes.axis attribute serves as a dictionary of these artists, i.e., ax.axis[&quot;left&quot;] is a AxisArtist instance responsible to draw left y-axis. The default Axes.axis contains &quot;bottom&quot;, &quot;left&quot;, &quot;top&quot; and &quot;right&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8a7da8725439516085d8d3b75bdb3fa0b03fb7" translate="yes" xml:space="preserve">
          <source>In the normal case, &lt;em&gt;x&lt;/em&gt; is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca5afa328d92f88629e998559da169379398ebc" translate="yes" xml:space="preserve">
          <source>In the second case, the three arguments are passed to the &lt;a href=&quot;_as_gen/matplotlib.colors.linearsegmentedcolormap#matplotlib.colors.LinearSegmentedColormap&quot;&gt;&lt;code&gt;LinearSegmentedColormap&lt;/code&gt;&lt;/a&gt; initializer, and the resulting colormap is registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55f2b4c3b3e66b7aafbf01b85466692af89d23a" translate="yes" xml:space="preserve">
          <source>In the simplest form, the text is placed at &lt;em&gt;xy&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ed97b8a1671fde17e4a88c19212f762f583d31" translate="yes" xml:space="preserve">
          <source>In the special case of &lt;code&gt;N == 1&lt;/code&gt;, by convention the returned value is y0 for x == 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7521e8bded5cb669cd69d49e96aa3569832e9df6" translate="yes" xml:space="preserve">
          <source>In this case &lt;em&gt;U&lt;/em&gt;, &lt;em&gt;V&lt;/em&gt; is only used to determine the length of the arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98995d2c3c3f6f99a4d436e8a4b35a02eee1ccb" translate="yes" xml:space="preserve">
          <source>In this case &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; are 2D arrays with shape (M, N), specifying the x and y coordinates of the corners of the colored quadrilaterals. See &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b6fe15fe2d3bda3991c90560cffac95b42731b" translate="yes" xml:space="preserve">
          <source>In this case &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; have to be monotonic 1D arrays of length &lt;em&gt;N+1&lt;/em&gt; and &lt;em&gt;M+1&lt;/em&gt;, specifying the x and y boundaries of the cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075744e99d807f2c262e2cb2e6530f4301dff018" translate="yes" xml:space="preserve">
          <source>In this case, any additional keyword argument applies to all datasets. Also this syntax cannot be combined with the &lt;em&gt;data&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8779c13b10cabd5c1a118ba08c37fcf6deda70a" translate="yes" xml:space="preserve">
          <source>In this case, the labels are taken from the artist. You can specify them either at artist creation or by calling the &lt;a href=&quot;matplotlib.artist.artist.set_label#matplotlib.artist.Artist.set_label&quot;&gt;&lt;code&gt;set_label()&lt;/code&gt;&lt;/a&gt; method on the artist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636f0b98b1e797ad96b557b158388670412eacf0" translate="yes" xml:space="preserve">
          <source>Inches and Centimeters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a40c97a60135d6092f830201bcb066c79fb271" translate="yes" xml:space="preserve">
          <source>Include &lt;em&gt;self&lt;/em&gt; in the list to be checked for a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718b3ef2baa3ef410de4a81c5a06e452b968685f" translate="yes" xml:space="preserve">
          <source>Including upper and lower limits in error bars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd62fc4bf582d295759edb11668edaff93d894bd" translate="yes" xml:space="preserve">
          <source>Increases or decreases the contrast of the hillshade. Values greater than one will cause intermediate values to move closer to full illumination or shadow (and clipping any values that move beyond 0 or 1). Note that this is not visually or mathematically the same as vertical exaggeration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070b79312154e6fcf1949e8044666de41a5cb36e" translate="yes" xml:space="preserve">
          <source>Incremental navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b9e38f99aa6d98ab92264b0549d54602c727bb" translate="yes" xml:space="preserve">
          <source>Index of the initial triangulation containing triangle, for each point of &lt;em&gt;refi_triangulation&lt;/em&gt;. Returned only if &lt;em&gt;return_tri_index&lt;/em&gt; is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bec9939f19574dc8750f68148ed029a33778740" translate="yes" xml:space="preserve">
          <source>Index of the prior diagram to which this diagram should be connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5081ae0561df0b551b6ab567cc6e9bd94032f2ea" translate="yes" xml:space="preserve">
          <source>Indexes of contour levels to consider when looking for nearest point. Defaults to using all levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a933bfd6589eef5cdaa6558cf4aec6527678fe0" translate="yes" xml:space="preserve">
          <source>Indicate whether the slider interval is closed on the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f0af36cd58791b7b508b94e69d3938213c6d8c" translate="yes" xml:space="preserve">
          <source>Indicate whether the slider interval is closed on the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf839219f33bbc32807fc0e6e74a34dcc2b893e1" translate="yes" xml:space="preserve">
          <source>Indicates where the [0, 0] index of the array is in the upper left or lower left corner of the axes. Defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;image.origin&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f724a03fad1f5259ab1780bc2fafef1f35efcd49" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;(0, 0)&lt;/code&gt; index of the array is in the upper left or lower left corner of the axes. Defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;image.origin&quot;]&lt;/a&gt;&lt;/code&gt; ('upper').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdab08a243c3dea22482af6a11eac1bf6295ab6" translate="yes" xml:space="preserve">
          <source>Individual keyword arguments can be used to override any given parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47bb128a6df25dace87ef21580777b6a97cde1d" translate="yes" xml:space="preserve">
          <source>Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: &lt;code&gt;{'Creator': 'My software', 'Author': 'Me',
'Title': 'Awesome fig'}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db9e98d1f361be519f996fb6ce3435369de0322" translate="yes" xml:space="preserve">
          <source>Information to support default axis labeling, tick labeling, and limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4df072dd8fab5e49aa47964063b9cd347617e2" translate="yes" xml:space="preserve">
          <source>Information to support default tick labeling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="9da8d0f87fabf20083c3dcf8da1aa7e6093127cd" translate="yes" xml:space="preserve">
          <source>Inheritance Diagrams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf65bdf3381ec9711bc7608e3c70d5d19c88a578" translate="yes" xml:space="preserve">
          <source>Inherited from artist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2454cc8c9f50bf02e1d8910e117169a3a6853cc" translate="yes" xml:space="preserve">
          <source>Initial value in the text box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9d434bbc55ba8b793d5aa571859ae956c526a9" translate="yes" xml:space="preserve">
          <source>Initialize a Type-1 font. &lt;em&gt;input&lt;/em&gt; can be either the file name of a pfb file or a 3-tuple of already-decoded Type-1 font parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa40d2c47835e682cd84a5f15b1ec9067ea568b" translate="yes" xml:space="preserve">
          <source>Initialize an Affine transform from a 3x3 numpy float array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60cd167f5e4311df6e6ea71b2faf8f9547cc354" translate="yes" xml:space="preserve">
          <source>Initialize self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f66672d1a211feccb2663e524389cc7bbdc9544" translate="yes" xml:space="preserve">
          <source>Initialize self. See help(type(self)) for accurate signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa47bfb2c3e4b594e94f13a58c445d8e4acbaeb" translate="yes" xml:space="preserve">
          <source>Initialize the artist inspector with an &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; or an iterable of &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20e14acfdd6d81ddea360027e599f2aade13986" translate="yes" xml:space="preserve">
          <source>Initialize the artist inspector with an &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; or an iterable of &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt;s. If an iterable is used, we assume it is a homogeneous sequence (all &lt;code&gt;Artists&lt;/code&gt; are of the same type) and it is your responsibility to make sure this is so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59f62f903eb46dd354e67ab52777aff391dac74" translate="yes" xml:space="preserve">
          <source>Initialize the class with a &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;matplotlib.lines.Line2D&lt;/code&gt;&lt;/a&gt; instance. The line should already be added to some &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;matplotlib.axes.Axes&lt;/code&gt;&lt;/a&gt; instance and should have the picker property set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f232376816f031c10268a028c16bb9123226f11" translate="yes" xml:space="preserve">
          <source>Initialize the layoutbox for use in constrained_layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40acd474760c7675d9740817741b29601213f38f" translate="yes" xml:space="preserve">
          <source>Initializes mouse button callbacks to enable 3D rotation of the axes. Also optionally sets the mouse buttons for 3D rotation and zooming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260753716624ad2077f13f38ada17a33c0f48cba" translate="yes" xml:space="preserve">
          <source>Input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf14e71217c8a7f10324a53bd5825d3d1b8701ee" translate="yes" xml:space="preserve">
          <source>Input values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9c8a75f6a4cdfba7bbac247c9426be80efa494" translate="yes" xml:space="preserve">
          <source>Input values, this takes either a single array or a sequence of arrays which are not required to be of the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3877b2eb43da2ab35f52419d9b4151b1716337" translate="yes" xml:space="preserve">
          <source>Insert &lt;a href=&quot;#matplotlib.mathtext.Kern&quot;&gt;&lt;code&gt;Kern&lt;/code&gt;&lt;/a&gt; nodes between &lt;a href=&quot;#matplotlib.mathtext.Char&quot;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/a&gt; nodes to set kerning. The &lt;a href=&quot;#matplotlib.mathtext.Char&quot;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/a&gt; nodes themselves determine the amount of kerning they need (in &lt;a href=&quot;#matplotlib.mathtext.Char.get_kerning&quot;&gt;&lt;code&gt;get_kerning()&lt;/code&gt;&lt;/a&gt;), and this function just creates the linked list in the correct way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b991dc7de599a4809d440664983521c7f13188" translate="yes" xml:space="preserve">
          <source>Inset Locator Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6191d845bb6d5c9405386373b76d630d6abe18b" translate="yes" xml:space="preserve">
          <source>Inset Locator Demo2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb4c0a1a9339f9faa6832ae674214351d68e9b7" translate="yes" xml:space="preserve">
          <source>Inset axes object created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6153e04d826d66244412ccccf5ee8c9609a4cdd4" translate="yes" xml:space="preserve">
          <source>Inset axes to draw connecting lines to. Two lines are drawn connecting the indicator box to the inset axes on corners chosen so as to not overlap with the indicator box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec1d33f351a9d8e844625776a31e54e1985c823" translate="yes" xml:space="preserve">
          <source>Inspect an &lt;a href=&quot;#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; class (using &lt;a href=&quot;_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector&quot;&gt;&lt;code&gt;ArtistInspector&lt;/code&gt;&lt;/a&gt;) and return information about its settable properties and their current values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e00949ae26dcbf9ffdcae237bcbf3a39a2e190" translate="yes" xml:space="preserve">
          <source>Inspect an &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; class (using &lt;a href=&quot;matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector&quot;&gt;&lt;code&gt;ArtistInspector&lt;/code&gt;&lt;/a&gt;) and return information about its settable properties and their current values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0791aafce84b668e10186957a8ecf279924d10" translate="yes" xml:space="preserve">
          <source>Install a repl display hook so that any stale figure are automatically redrawn when control is returned to the repl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3511bf0327ea28ef5da56956383fe58e8b2b88c2" translate="yes" xml:space="preserve">
          <source>Instantiate an instance of FigureCanvasClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0c468a0daa114778a8835c0446c077b6ae7e1f" translate="yes" xml:space="preserve">
          <source>Integer numbers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;11&lt;/code&gt; create lines and triangles. Those are equally accessible via capitalized variables, like &lt;code&gt;CARETDOWNBASE&lt;/code&gt;. Hence the following are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4a4ac002171c676f61197df4e60cd505976378" translate="yes" xml:space="preserve">
          <source>Integers specifying the column-position of the cell. When &lt;em&gt;nx1&lt;/em&gt; is None, a single &lt;em&gt;nx&lt;/em&gt;-th column is specified. Otherwise location of columns spanning between &lt;em&gt;nx&lt;/em&gt; to &lt;em&gt;nx1&lt;/em&gt; (but excluding &lt;em&gt;nx1&lt;/em&gt;-th column) is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066ee77c22a7c36d148b56e66ecffa65c679ed84" translate="yes" xml:space="preserve">
          <source>Integers specifying the row-position of the cell. When &lt;em&gt;ny1&lt;/em&gt; is None, a single &lt;em&gt;ny&lt;/em&gt;-th row is specified. Otherwise location of rows spanning between &lt;em&gt;ny&lt;/em&gt; to &lt;em&gt;ny1&lt;/em&gt; (but excluding &lt;em&gt;ny1&lt;/em&gt;-th row) is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33927fd3e82f279189d0e0cfc80223adf07d65a" translate="yes" xml:space="preserve">
          <source>Integral as the area under a curve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa54dcd484bece407b54244bb3b575883252619" translate="yes" xml:space="preserve">
          <source>Integrate the streamline in forward, backward or both directions. default is &lt;code&gt;'both'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35798017bcd0a2db83f8a180e982b4ffe7563980" translate="yes" xml:space="preserve">
          <source>Intended to be overridden by new projection types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9abf5059bcb733d3773d0057ae7f731ee49d053" translate="yes" xml:space="preserve">
          <source>Interactive</source>
          <target state="translated">Interactive</target>
        </trans-unit>
        <trans-unit id="9a72d62568cf5c2d186f2a0bca629175ed87cdbb" translate="yes" xml:space="preserve">
          <source>Interactive backends need to reimplement this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b1b6a4214cefce25c525736d491d30f8a1fb76" translate="yes" xml:space="preserve">
          <source>Interactive backends need to reimplement this to match &lt;a href=&quot;#matplotlib.backend_bases.FigureCanvasBase.start_event_loop&quot;&gt;&lt;code&gt;start_event_loop&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592aaa6f80092bb9ebec620a148842c6bbb05104" translate="yes" xml:space="preserve">
          <source>Interactive backends should implement this in a more native way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69663a8315c3dc4272d27e945b34169da85ce71a" translate="yes" xml:space="preserve">
          <source>Interactive figures in the IPython notebook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfaf4068cdbdaba8a351fedf26289e6fd2725fea" translate="yes" xml:space="preserve">
          <source>Interactive functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d771152ac713d85312dca64b86348dbf6959b258" translate="yes" xml:space="preserve">
          <source>Interface:</source>
          <target state="translated">Interface:</target>
        </trans-unit>
        <trans-unit id="06865dc903c1fde77f40d0e7d6c2f608bc285ce3" translate="yes" xml:space="preserve">
          <source>Internal event handler to clear the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3267b2cb530da605d9a0667c647176fdfefa26b" translate="yes" xml:space="preserve">
          <source>Internal event handler to draw the cursor when the mouse moves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d1ba3c6abc6dbc6a037c7dcc083d64f9d7fb83" translate="yes" xml:space="preserve">
          <source>Internally, it assumes that the margins (left_margin, etc.) which are differences between ax.get_tightbbox and ax.bbox are independent of axes position. This may fail if Axes.adjustable is datalim. Also, This will fail for some cases (for example, left or right margin is affected by xlabel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee90561587a0eb8f86fa45b66d2dd6c0387cec1" translate="yes" xml:space="preserve">
          <source>Interpolations for imshow/matshow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d97b6c6eb6f754c85d0c66cfdfb7ca4cd6bf27e" translate="yes" xml:space="preserve">
          <source>Interpolator used for field interpolation. If not specified, a &lt;a href=&quot;#matplotlib.tri.CubicTriInterpolator&quot;&gt;&lt;code&gt;CubicTriInterpolator&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ea4b8016b576a831831b206d2d4d222205e6f1" translate="yes" xml:space="preserve">
          <source>Invalidate this &lt;a href=&quot;#matplotlib.transforms.TransformNode&quot;&gt;&lt;code&gt;TransformNode&lt;/code&gt;&lt;/a&gt; and triggers an invalidation of its ancestors. Should be called any time the transform changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640f1e8475d2d1a653ad9caea0f80a4bd7ab77a5" translate="yes" xml:space="preserve">
          <source>Invert Axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1135f8e14295ab1a293893a57e4e4e5243f9c533" translate="yes" xml:space="preserve">
          <source>Invert the x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303092509b3b6385008bcb34f59d92e011a5918b" translate="yes" xml:space="preserve">
          <source>Invert the y-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235f4578cc14d3fa3670c78cee74a1785d1311b1" translate="yes" xml:space="preserve">
          <source>Invert the z-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9c66e894899f8436da4ad6c7f5956cc542448c" translate="yes" xml:space="preserve">
          <source>Is a dictionary containing keyword arguments to be passed on to the &lt;code&gt;savefig&lt;/code&gt; command which is called repeatedly to save the individual frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae43f77e3a1652e9fa195e619a7850bba3119b5c" translate="yes" xml:space="preserve">
          <source>Is the widget active?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7679d76aa32abdbe190cb2fa595847609601509e" translate="yes" xml:space="preserve">
          <source>It can be used in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15e92f19bee40bf0dab856335f4cee5da5e3d4a" translate="yes" xml:space="preserve">
          <source>It does not have a have a pyplot wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0beebfd5e378e5b1ad08a7624c0b8e08b43eb7" translate="yes" xml:space="preserve">
          <source>It first checks if the &lt;em&gt;orig_handle&lt;/em&gt; itself is a key in the &lt;em&gt;legend_handler_map&lt;/em&gt; and return the associated value. Otherwise, it checks for each of the classes in its method-resolution-order. If no matching key is found, it returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb1b9241347c74135c33c546fbcea896d52ec90" translate="yes" xml:space="preserve">
          <source>It is also faster in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25200e3b783f2ae09697e02cf2341be946ac3135" translate="yes" xml:space="preserve">
          <source>It is also useful by itself for showing a colormap. If the &lt;em&gt;cmap&lt;/em&gt; kwarg is given but &lt;em&gt;boundaries&lt;/em&gt; and &lt;em&gt;values&lt;/em&gt; are left as None, then the colormap will be displayed on a 0-1 scale. To show the under- and over-value colors, specify the &lt;em&gt;norm&lt;/em&gt; as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e43cdc688d6a6551312b39725ea607862f20c34" translate="yes" xml:space="preserve">
          <source>It is based on the specification of the excellent work done by M.-A. Lemburg in his &lt;a href=&quot;https://www.egenix.com/products/python/mxBase/mxDateTime/&quot;&gt;mx.DateTime&lt;/a&gt; extension. However, notice that this type does &lt;em&gt;NOT&lt;/em&gt; implement the same algorithm as his work. Do &lt;em&gt;NOT&lt;/em&gt; expect it to behave like mx.DateTime's counterpart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258683f5fe8d6dbf76411aabafe35f4350478f00" translate="yes" xml:space="preserve">
          <source>It is known that some vector graphics viewer (svg and pdf) renders white gaps between segments of the colorbar. This is due to bugs in the viewers not matplotlib. As a workaround the colorbar can be rendered with overlapping segments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9b2f5ccb9da01870e68d0ecea96ba064197ef1" translate="yes" xml:space="preserve">
          <source>It is known that some vector graphics viewers (svg and pdf) renders white gaps between segments of the colorbar. This is due to bugs in the viewers, not Matplotlib. As a workaround, the colorbar can be rendered with overlapping segments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fda78320c30520e0e06f5c320f10ff0604f90f9" translate="yes" xml:space="preserve">
          <source>It is not intended to be instantiated directly; instead, use &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;_as_gen/matplotlib.pyplot.colorbar#matplotlib.pyplot.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; to make your colorbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fd4dc761076c6c6dea93d4a8db64f26630edbb" translate="yes" xml:space="preserve">
          <source>It is not safe to write to the output array. Multiple elements may point to the same piece of memory, so modifying one value may change others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e368fe1787d989c7ffa629433669c6313fbf1a41" translate="yes" xml:space="preserve">
          <source>It is only a base class which should be subclassed to provide needed behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24336629271803d5ad3b91213c90992adf1e99f" translate="yes" xml:space="preserve">
          <source>It is pretty easy to use, and requires only built-in python libs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8182beea8ee4f533d54d1728a02cfe802aebb51" translate="yes" xml:space="preserve">
          <source>It is similar to drawing area, except that the extent of the box is not predetermined but calculated from the window extent of its children. Furthermore, the extent of the children will be calculated in the transformed coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e082688950e9d3818c4b287b86095822801ee7e4" translate="yes" xml:space="preserve">
          <source>It is strongly encouraged to have read the &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/intermediate/legend_guide.html&quot;&gt;legend guide&lt;/a&gt; before this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e0f4179d23c13e54750cfc8a739778068e6ff1" translate="yes" xml:space="preserve">
          <source>It is unlikely that you would ever create a Legend instance manually. Most users would normally create a legend via the &lt;a href=&quot;_as_gen/matplotlib.axes.axes.legend#matplotlib.axes.Axes.legend&quot;&gt;&lt;code&gt;legend()&lt;/code&gt;&lt;/a&gt; function. For more details on legends there is also a &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/intermediate/legend_guide.html&quot;&gt;legend guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c3bed74d24ae31e052553fafe022aa3fe579dc" translate="yes" xml:space="preserve">
          <source>It lacks support for log scaling of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a955df7330773ed76e6e6d159130d85f197bfe5" translate="yes" xml:space="preserve">
          <source>It may be instantiated directly, or subclassed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ee04ce7c310ba6777c4ffbdf3bf2d5bb30fcf5" translate="yes" xml:space="preserve">
          <source>It may contain newlines (&lt;code&gt;\n&lt;/code&gt;) or math in LaTeX syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998407a241604df808a53bd64c1e32ba4f6224a8" translate="yes" xml:space="preserve">
          <source>It supports only flat shading (no outlines)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e048e495fb2db863799c53cb81f8cb59636a75e6" translate="yes" xml:space="preserve">
          <source>It uses a list of Patch instances instead of a &lt;a href=&quot;collections_api#matplotlib.collections.PatchCollection&quot;&gt;&lt;code&gt;PatchCollection&lt;/code&gt;&lt;/a&gt; because the latter does not allow the hatch pattern to vary among the members of the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338605082d09f7996e324ace06586c8db8e92502" translate="yes" xml:space="preserve">
          <source>It will also break contour and calculate inlining if &lt;em&gt;lc&lt;/em&gt; is not empty (lc defaults to the empty list if None). &lt;em&gt;spacing&lt;/em&gt; is the space around the label in pixels to leave empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93323246b6ef1efed9eed23029763e421ee51ef" translate="yes" xml:space="preserve">
          <source>Iterates over all of the curve segments in the path. Each iteration returns a 2-tuple &lt;code&gt;(vertices, code)&lt;/code&gt;, where &lt;code&gt;vertices&lt;/code&gt; is a sequence of 1-3 coordinate pairs, and &lt;code&gt;code&lt;/code&gt; is a &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8df59beb8057e643504c483b626d6752c957bae" translate="yes" xml:space="preserve">
          <source>Join given arguments into the same set. Accepts one or more arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19e2da3c40a5c81c8871ac924ee31371ed53ae7" translate="yes" xml:space="preserve">
          <source>Join styles and cap styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44853c801d14341aa591117c8fceb2263d828848" translate="yes" xml:space="preserve">
          <source>Keeps track of which characters are required from each font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="db022b393f9b7d1ba21752fb55f6932aae9b7cac" translate="yes" xml:space="preserve">
          <source>Key/value pairs to store in the image metadata. The supported keys and defaults depend on the image format and backend:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf61aaa0a5719d3418421a52547532d4e2e44bd" translate="yes" xml:space="preserve">
          <source>Keyboard modifiers, which: 'move': Move the existing shape. 'clear': Clear the current shape. 'square': Makes the shape square. 'center': Make the initial point the center of the shape. 'square' and 'center' can be combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c53c3f7ce35fb9d1a20e9aa7638c2294138a352" translate="yes" xml:space="preserve">
          <source>Keymap to associate with this tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0fa91ba6bd1933125139cee1ed7066e6cf68f6" translate="yes" xml:space="preserve">
          <source>Keypress Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3926e039fd753c472f6e172496fda0574369261" translate="yes" xml:space="preserve">
          <source>Keyword</source>
          <target state="translated">Keyword</target>
        </trans-unit>
        <trans-unit id="094f0fc05fe6f90889db2a328faa4617aaa9a18b" translate="yes" xml:space="preserve">
          <source>Keyword arguments and default values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b983e7aa68d3d7af5b6442d2610b4e52a63709a3" translate="yes" xml:space="preserve">
          <source>Keyword arguments are as described in the docstring of &lt;a href=&quot;_as_gen/matplotlib.axes.axes.contour#matplotlib.axes.Axes.contour&quot;&gt;&lt;code&gt;contour&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9a80a95155c3837564281cd1f92651764d8c33" translate="yes" xml:space="preserve">
          <source>Keyword arguments are as described in the docstring of &lt;code&gt;contour&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381caf27695693e818dc27c690e43a790cb41509" translate="yes" xml:space="preserve">
          <source>Keyword arguments are passed onto &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23cdfd15b9a9f2e1262abfc0f6a91109f4d4f00" translate="yes" xml:space="preserve">
          <source>Keyword arguments are passed to &lt;a href=&quot;matplotlib.gridspec.gridspec#matplotlib.gridspec.GridSpec&quot;&gt;&lt;code&gt;GridSpec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe678975edb62f803d4b82d56fc01924c2b179a9" translate="yes" xml:space="preserve">
          <source>Keyword arguments control the &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64fcb07b21ca394a0fa748a713874dc413df481" translate="yes" xml:space="preserve">
          <source>Keyword arguments control the &lt;a href=&quot;matplotlib.patches.patch#matplotlib.patches.Patch&quot;&gt;&lt;code&gt;Patch&lt;/code&gt;&lt;/a&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0850c84eddf1697e3ba25f039952a828d6b7f125" translate="yes" xml:space="preserve">
          <source>Keyword arguments may include the following (with defaults):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8804a97595c6605af997f797488e9f7a887cea7" translate="yes" xml:space="preserve">
          <source>Keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2147ad639a2774e2aa8694fb474a527166bf75" translate="yes" xml:space="preserve">
          <source>Keyword arguments: zsort, see set_zsort for options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f687110f013d72f83ac9dca4f40fda9ac48d43" translate="yes" xml:space="preserve">
          <source>Keyworded arguments to pass to &lt;a href=&quot;../offsetbox_api#matplotlib.offsetbox.AnchoredOffsetbox&quot;&gt;&lt;code&gt;matplotlib.offsetbox.AnchoredOffsetbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7c5b879ec73531fcaea882e519e9bca27b629a" translate="yes" xml:space="preserve">
          <source>Keyworded arguments to pass to the constructor of the inset axes. Valid arguments include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185ea62134a2c16b4b296d86cd9b9dad798d6594" translate="yes" xml:space="preserve">
          <source>LArrow</source>
          <target state="translated">LArrow</target>
        </trans-unit>
        <trans-unit id="6a35da59502a5ef35a548ba3271eba2c76786523" translate="yes" xml:space="preserve">
          <source>Label a contour plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4469da454d81e53f21cc969f44edf23a0da71609" translate="yes" xml:space="preserve">
          <source>Label for this text box. Accepts string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9e97d3ad635e5ae91fca0b4329dd26d1c27e8c" translate="yes" xml:space="preserve">
          <source>Label text for the x and y arrows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3085af5714431e4902d1117b72c2e22a218d85c" translate="yes" xml:space="preserve">
          <source>Label the long axis of the colorbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc291fb875e4eba961c1f30602a908212b0b07f" translate="yes" xml:space="preserve">
          <source>Label the long axis of the colorbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667bfc3242848c8fff647aae38cafd518aa3bc43" translate="yes" xml:space="preserve">
          <source>Label to be placed at the center of the diagram. Note that &lt;em&gt;label&lt;/em&gt; (not &lt;em&gt;patchlabel&lt;/em&gt;) can be passed as keyword argument to create an entry in the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df9586af6f6bd1741724ad82ccf56c6eda37a57" translate="yes" xml:space="preserve">
          <source>Label to display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8ba4af61e67600aa40e8e7472330d52371d73d" translate="yes" xml:space="preserve">
          <source>Labeling a pie and a donut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e129553c22461a9feadd2a0c4296f215dbff466" translate="yes" xml:space="preserve">
          <source>Labeling ticks using engineering notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5918cff42a3292bf1fe39e19fac3aafc31dc0771" translate="yes" xml:space="preserve">
          <source>Labels are plotted at a location with the smallest deviation of the contour from a straight line unless there is another label nearby, in which case the next best place on the contour is picked up. If all such candidates are rejected, the beginning of the contour is chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a49e99e9133085ffd607417addaa82583abc167" translate="yes" xml:space="preserve">
          <source>Labels for each dataset. Length must be compatible with dimensions of &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f25c363a86590e38cfc931ee88aa9d06a618f15" translate="yes" xml:space="preserve">
          <source>Labels for each dataset. Length must be compatible with dimensions of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e78e5c7bcbf582aa6f6ea655c2891af3b65bb9a" translate="yes" xml:space="preserve">
          <source>Labels to assign to each data series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db44f378dd577689f1ad4f2f3a4af85aa47732f" translate="yes" xml:space="preserve">
          <source>Lancaster, Don. &lt;a href=&quot;http://www.tinaja.com/glib/ellipse4.pdf&quot;&gt;Approximating a Circle or an Ellipse Using Four Bezier Cubic Splines&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6b4240e4d38286ba2fb593ac89d9d0a17245d8" translate="yes" xml:space="preserve">
          <source>Lancaster, Don. &lt;em&gt;Approximating a Circle or an Ellipse Using Four Bezier Cubic Splines.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043a1ca7878d5fb70a62bef5e71b93678de904c3" translate="yes" xml:space="preserve">
          <source>Lasso Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b56aa9ccb75dd3e8f610b1b911389986e49b838" translate="yes" xml:space="preserve">
          <source>Lasso Selector Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28458e30d347178b6e6492d7beb255b7a2507d8d" translate="yes" xml:space="preserve">
          <source>Lastly, it looks in &lt;code&gt;$MATPLOTLIBDATA/matplotlibrc&lt;/code&gt;, which should always exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605ec28d5c8cd76e92dc47866f847ae76533c6b2" translate="yes" xml:space="preserve">
          <source>Launch a subplot tool window for a figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c74932a0fc608f7f8250ec24381e7aa9658072" translate="yes" xml:space="preserve">
          <source>Layer Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7145691ffe98f961b28863d4ecea3dd9ff6b0f0" translate="yes" xml:space="preserve">
          <source>Layout: +---------------+-----+ | | R | + +-----+ | RGB | G | + +-----+ | | B | +---------------+-----+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b394834e405a68b0d25c00ff29fc0fec0404407" translate="yes" xml:space="preserve">
          <source>Left ventricle bullseye</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a04e1a059fef6eb05ffc5a6db51d3bc1b555cb" translate="yes" xml:space="preserve">
          <source>Legend Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1314e2a6451683665d8dc580304236c67131af" translate="yes" xml:space="preserve">
          <source>Legend Picking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05635996e807c235c6dad6ee2c668dc8bc73e8b7" translate="yes" xml:space="preserve">
          <source>Legend guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5482c04a57b64e70525da57aa96d5f3dc97919b1" translate="yes" xml:space="preserve">
          <source>Legend handlers are expected to be a callable object with a following signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bcbb422d7a81d6bcc9000c21b1c492b41b70ea" translate="yes" xml:space="preserve">
          <source>Legend using pre-defined labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726e97e75b61b4999d1d5bd236956568ed3da4db" translate="yes" xml:space="preserve">
          <source>Length &lt;em&gt;numpoints&lt;/em&gt; list of y offsets for each point in legend entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23be41eb4a82a65ade755ca50d4f680167f6925" translate="yes" xml:space="preserve">
          <source>Length below which arrow scales, in units of head length. Do not set this to less than 1, or small arrows will look terrible!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b68440bea560b371ae45cb8b69e570bc101e4e" translate="yes" xml:space="preserve">
          <source>Length between the bases of the input and output groups (in data-space units).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d211c421a1b36225079c4eebd280976eb07780" translate="yes" xml:space="preserve">
          <source>Length of arrow head, sent to ArrowStyle. Defaults to 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b9eb446e814b6e109547b555975aaeb8754b1f" translate="yes" xml:space="preserve">
          <source>Length of the arrow head</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e0e02a874fb4c94050b7d33da548643a3a89cf" translate="yes" xml:space="preserve">
          <source>Length of the arrow, given in coordinates of &lt;em&gt;transform&lt;/em&gt;. Defaults to 0.15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd867c642fc3939cf2a830c6536b90ce28120851" translate="yes" xml:space="preserve">
          <source>Length of the barb in points; the other parts of the barb are scaled against this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a821a1afd4cd036b68a8a8b6a4b47ac771fb15" translate="yes" xml:space="preserve">
          <source>Length of the bracket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51086cdc90f334a3917ac227202d905bd0768daa" translate="yes" xml:space="preserve">
          <source>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f11773cc43ff82ce738541618e84542511eab13" translate="yes" xml:space="preserve">
          <source>Licensed under the Matplotlib License Agreement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f3d3d02e49c9b7064d811110df63fdfc8db46a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#matplotlib.legend.Legend.get_window_extent&quot;&gt;&lt;code&gt;Legend.get_window_extent&lt;/code&gt;&lt;/a&gt;, but uses the box for the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94af5450e57764ab94e2e8b40b46394d288153dd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Artist.get_window_extent&lt;/code&gt;, but includes any clipping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f391e27f5c968605b8f1e39a2be92f8bd7cedf0d" translate="yes" xml:space="preserve">
          <source>Like Arrow, but lets you set head width and head height independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd95d74ee7e06de5e5c433f52a2cfd97b1a72f41" translate="yes" xml:space="preserve">
          <source>Like Python's datetime, mpl uses the Gregorian calendar for all conversions between dates and floating point numbers. This practice is not universal, and calendar differences can cause confusing differences between what Python and mpl give as the number of days since 0001-01-01 and what other software and databases yield. For example, the US Naval Observatory uses a calendar that switches from Julian to Gregorian in October, 1582. Hence, using their calculator, the number of days between 0001-01-01 and 2006-04-01 is 732403, whereas using the Gregorian calendar via the datetime module we find:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b9f160a4b716277584311f7d7bbec87fc75eec" translate="yes" xml:space="preserve">
          <source>Likely, you'll never instantiate a &lt;a href=&quot;#matplotlib.gridspec.SubplotSpec&quot;&gt;&lt;code&gt;SubplotSpec&lt;/code&gt;&lt;/a&gt; yourself. Instead you will typically obtain one from a &lt;a href=&quot;matplotlib.gridspec.gridspec#matplotlib.gridspec.GridSpec&quot;&gt;&lt;code&gt;GridSpec&lt;/code&gt;&lt;/a&gt; using item-access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cec3bdf29ab9deda45d0da2b6d7c9ecd5fa191e" translate="yes" xml:space="preserve">
          <source>Limit the domain to positive values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35443d5704543a0c5af098a59e11d97e3c23798" translate="yes" xml:space="preserve">
          <source>Limit the domain to values between 0 and 1 (excluded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349987d12c4caadf42ab7babd6f50576b76e2784" translate="yes" xml:space="preserve">
          <source>Limit, in MB, of the returned animation. No animation is created if the limit is exceeded. Defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;animation.embed_limit&quot;]&lt;/a&gt;&lt;/code&gt; = 20.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6ec91c3264c515e5d4a1ac1581d9d5f7f78d76" translate="yes" xml:space="preserve">
          <source>Limits may be passed in reverse order to flip the direction of the x-axis. For example, suppose &lt;em&gt;x&lt;/em&gt; represents the number of years before present. The x-axis limits might be set like the following so 5000 years ago is on the left of the plot and the present is on the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72969f89bc466b2c8a6d00357c4eefacb4d214a7" translate="yes" xml:space="preserve">
          <source>Limits may be passed in reverse order to flip the direction of the y-axis. For example, suppose &lt;code&gt;y&lt;/code&gt; represents depth of the ocean in m. The y-axis limits might be set like the following so 5000 m depth is at the bottom of the plot and the surface, 0 m, is at the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b00277cce68d00d8f9550c23c4957d37ae345d3" translate="yes" xml:space="preserve">
          <source>Line Collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd33d07d55592190fa5b8e3cdfe5bce98309673" translate="yes" xml:space="preserve">
          <source>Line Style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43932170c42e651b61b1514f0476f6b8532fd79d" translate="yes" xml:space="preserve">
          <source>Line, Poly and RegularPoly Collection with autoscaling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2dbbb0e6045f511808e5b62d5411b2fb5ceda3d" translate="yes" xml:space="preserve">
          <source>LineCollection</source>
          <target state="translated">LineCollection</target>
        </trans-unit>
        <trans-unit id="6cb1b96ee50fcc2ec2a69712a01e561ec2dcd0be" translate="yes" xml:space="preserve">
          <source>LinearSegmentedColormap</source>
          <target state="translated">LinearSegmentedColormap</target>
        </trans-unit>
        <trans-unit id="8e878bf1134e406fa96ae12438757e94c5666cd8" translate="yes" xml:space="preserve">
          <source>Linearly map a given value to the 0-1 range and then apply a power-law normalization over that range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03c0fffd7497bf3c0594fca0a3852a6562765f7" translate="yes" xml:space="preserve">
          <source>Linestyle</source>
          <target state="translated">Linestyle</target>
        </trans-unit>
        <trans-unit id="d811a1c27c815f88e718b1dfe600c2845d2d2871" translate="yes" xml:space="preserve">
          <source>Linestyles</source>
          <target state="translated">Linestyles</target>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="436a0a40fb7bb6d2e102c3db4fa18c0cc590f073" translate="yes" xml:space="preserve">
          <source>List in the form [[group1, [tool1, tool2 ...]], [group2, [...]]] Where the tools given by tool1, and tool2 will display in group1. See &lt;code&gt;add_tool&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4df20f1958746b2820c63afe158ea2b707d92b9" translate="yes" xml:space="preserve">
          <source>List of (line1, line2) tuples for the x's in the check boxes. These lines exist for each box, but have &lt;code&gt;set_visible(False)&lt;/code&gt; when its box is not checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366a518bc3298ba2045e2a7cc1406ff188ccca07" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb2ad278189c4dd1baddfa6d1ba9358cb4f296e" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d80929bfb48952a46a219e03f412ad33ecabfb8" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;_as_gen/matplotlib.patches.rectangle#matplotlib.patches.Rectangle&quot;&gt;&lt;code&gt;matplotlib.patches.Rectangle&lt;/code&gt;&lt;/a&gt; instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42b9f39ea3ebe063be665f7b0e8654ca0281c6c" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;matplotlib.text.Text&lt;/code&gt;&lt;/a&gt; instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8f92ac082776032a7c1fb59fc65eaf48a82d86" translate="yes" xml:space="preserve">
          <source>List of Matplotlib color specifications, or an equivalent Nx3 or Nx4 floating point array (&lt;em&gt;N&lt;/em&gt; rgb or rgba values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0a1746606fcd40db021770f279646917cd7bdf" translate="yes" xml:space="preserve">
          <source>List of all the polygon segments for all the &lt;em&gt;levels&lt;/em&gt;. For contour lines &lt;code&gt;len(allsegs) == len(levels)&lt;/code&gt;, and for filled contour regions &lt;code&gt;len(allsegs) = len(levels)-1&lt;/code&gt;. The lists should look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15932ee307fc9cc5e7c96cccadd259e49d5c7226" translate="yes" xml:space="preserve">
          <source>List of artists to include in the tight bounding box. If &lt;code&gt;None&lt;/code&gt; (default), then all artist children of each axes are included in the tight bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0719971bd07969e12c44f29b54a014e391f4b0a" translate="yes" xml:space="preserve">
          <source>List of artists to include in the tight bounding box. If &lt;code&gt;None&lt;/code&gt; (default), then all artist children of the axes are included in the tight bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e880e20cf244a3b3cb4bc7305cbfbcd4ee3f6c" translate="yes" xml:space="preserve">
          <source>List of available styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca3261d63e30102e8dec58ef7b9defac68f6aaa" translate="yes" xml:space="preserve">
          <source>List of axes in the Figure. You can access the axes in the Figure through this list. Do not modify the list itself. Instead, use &lt;a href=&quot;#matplotlib.figure.Figure.add_axes&quot;&gt;&lt;code&gt;add_axes&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;subplot&lt;/code&gt; or &lt;a href=&quot;#matplotlib.figure.Figure.delaxes&quot;&gt;&lt;code&gt;delaxes&lt;/code&gt;&lt;/a&gt; to add or remove an axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b7ac6e0c253b01f66ad99f0842e75fdbd6a9dd" translate="yes" xml:space="preserve">
          <source>List of character names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbedde76bbd3c129863f87e09f45bf0901fb421" translate="yes" xml:space="preserve">
          <source>List of extra string arguments to be passed to the underlying movie utility. If &lt;code&gt;None&lt;/code&gt;, defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;animation.extra_args&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead5f575bb5b525e10fa01621bd534aaa5f4b910" translate="yes" xml:space="preserve">
          <source>List of labels for the flows (or a single label to be used for all flows). Each label may be &lt;em&gt;None&lt;/em&gt; (no label), or a labeling string. If an entry is a (possibly empty) string, then the quantity for the corresponding flow will be shown below the string. However, if the &lt;em&gt;unit&lt;/em&gt; of the main diagram is None, then quantities are never shown, regardless of the value of this argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117306f3513fd778dd136a3d80704e3aeb6658c1" translate="yes" xml:space="preserve">
          <source>List of labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cddef2323bcae890ab252e969224df115becaa9" translate="yes" xml:space="preserve">
          <source>List of lengths of the vertical arrows before break-in or after break-away. If a single value is given, then it will be applied to the first (inside) paths on the top and bottom, and the length of all other arrows will be justified accordingly. The &lt;em&gt;pathlengths&lt;/em&gt; are not applied to the horizontal inputs and outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b681152504c57a445f4ae746483c699f368cabbb" translate="yes" xml:space="preserve">
          <source>List of named colors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0503437acdd508fde89c5c42203831fb6da591" translate="yes" xml:space="preserve">
          <source>List of numbers specifying the area occupied by the subplot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13de38d2cea597cd98e5ce6a56b28998333f3791" translate="yes" xml:space="preserve">
          <source>List of orientations of the flows (or a single orientation to be used for all flows). Valid values are 0 (inputs from the left, outputs to the right), 1 (from and to the top) or -1 (from and to the bottom).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5127ec0a32e564fb2e4e708b72df953bc267dc64" translate="yes" xml:space="preserve">
          <source>List of segments in the LineCollection. Each list item contains an array of vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80fe48ee56816d7743426ee885b8b066d2bb10d" translate="yes" xml:space="preserve">
          <source>List of string labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308c6b1c9bd836047579256f6b7f4c87da3a3b13" translate="yes" xml:space="preserve">
          <source>List of subplots that will be used to calculate optimal subplot_params.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f4e31f8bb84269369a7d084ee6cd29c701b983" translate="yes" xml:space="preserve">
          <source>List of texts for tick labels; must include values for non-visible labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b7f81a9538f0b5a129f62cd1b68b752fb70792" translate="yes" xml:space="preserve">
          <source>List of x-axis tick locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103bb3586b9845fcf6a3a93671aa698a36d693d8" translate="yes" xml:space="preserve">
          <source>List of y-axis tick locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24d46ea6af44c0a6fe80832eedb0498e3f16f51" translate="yes" xml:space="preserve">
          <source>List the font filenames known to &lt;code&gt;fc-list&lt;/code&gt; having the given extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5886971925d5d1738499100fc81aba04dba340" translate="yes" xml:space="preserve">
          <source>List[str]</source>
          <target state="translated">List[str]</target>
        </trans-unit>
        <trans-unit id="f20fb141d08f5d124a564a49b8604366cafa5f10" translate="yes" xml:space="preserve">
          <source>List[str] or None</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a69acc11d9c3df08acb2b6282482ae6298dfa7" translate="yes" xml:space="preserve">
          <source>ListedColormap</source>
          <target state="translated">ListedColormap</target>
        </trans-unit>
        <trans-unit id="c8c28c7a3a9eb6d0c43e09cd2287301f7cea3237" translate="yes" xml:space="preserve">
          <source>Load a &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/reference/Image.html&quot;&gt;PIL image&lt;/a&gt; and return it as a numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9b0d819108d0b1e92d1cfbfd6e43df4ec853df" translate="yes" xml:space="preserve">
          <source>Load converter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b12bbd86096b807e545e93b7305077ae2f72d75" translate="yes" xml:space="preserve">
          <source>Loads a data structure as JSON from the named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1d8b6fee481c06dceb4e6c66c75e9b22dd3cb6" translate="yes" xml:space="preserve">
          <source>Location Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddaaba0b0ade0ddcf0a6af0467b257fbf21d6e2" translate="yes" xml:space="preserve">
          <source>Location String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1410749705ba650bd42bad880e6a9294502bfa1c" translate="yes" xml:space="preserve">
          <source>Location code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ddfb46530fcac7d94e5e6a0cd921f8e9e61bef" translate="yes" xml:space="preserve">
          <source>Location of the bottom baseline of each bin. If a scalar, the base line for each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830acf298c04b0eba7009002d8009bf64a2edf3d" translate="yes" xml:space="preserve">
          <source>Location of the direction arrows. Valid location codes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c34a9050c0589aed2200b6dfc6f4a3e25fd7539" translate="yes" xml:space="preserve">
          <source>Location of this artist. Valid location codes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e806adac7d9818da0b797566f953bf4a57e1bd" translate="yes" xml:space="preserve">
          <source>Location of this size bar. Valid location codes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f76edc947205193ead03e1c5c0960ffe7263c27" translate="yes" xml:space="preserve">
          <source>Location to place axis within grid. First entry is row number, second entry is column number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fc5730f363217bd1aaafe09ba1bd65fc6d92e1" translate="yes" xml:space="preserve">
          <source>Location to place the inset axes. The valid locations are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3baba262c96853877b1e605c5d487f6d1362d607" translate="yes" xml:space="preserve">
          <source>Locator for index plots (e.g., where &lt;code&gt;x = range(len(y))&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93daf35085d6b47535cf7ae9fcd8f25589359ad" translate="yes" xml:space="preserve">
          <source>Locator for logit scaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57b34f9ca76b44cb0dd9ac75aa93d326242cee3" translate="yes" xml:space="preserve">
          <source>Locator for minor ticks when the axis is linear and the major ticks are uniformly spaced. Subdivides the major tick interval into a specified number of minor intervals, defaulting to 4 or 5 depending on the major interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6559784061e351556b48f9eefd388ddfeccea5" translate="yes" xml:space="preserve">
          <source>Locator for use with with the symlog norm; works like &lt;a href=&quot;#matplotlib.ticker.LogLocator&quot;&gt;&lt;code&gt;LogLocator&lt;/code&gt;&lt;/a&gt; for the part outside of the threshold and adds 0 if inside the limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582aaf62e225bd841aa0ca90c9e6fc78661b9a8f" translate="yes" xml:space="preserve">
          <source>Locator that this axis is using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0e65610249a845bdd47c1bdaa588e4316a4056" translate="yes" xml:space="preserve">
          <source>Log Axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775a2180669567b18338abadfa8c51b5336ccc7c" translate="yes" xml:space="preserve">
          <source>Log Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e89081cf8787ee07c63c4aef9c18a30d205709" translate="yes" xml:space="preserve">
          <source>Log Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fed270e94cde298502483c8833a0a75aec11551" translate="yes" xml:space="preserve">
          <source>Logit scale for data between zero and one, both excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af4bc6f30c919b524acd720f24dd9efb988e043" translate="yes" xml:space="preserve">
          <source>Loglog Aspect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e95ce0e77e00cb915e6e0a39ce42edb397ea87b" translate="yes" xml:space="preserve">
          <source>Long chain of connections using Sankey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d818c9174ba82b7e2a2715f5ede6e5e1b26768" translate="yes" xml:space="preserve">
          <source>Looking Glass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c2d913c8ced4d8fc903ddd398da59bd15e898e" translate="yes" xml:space="preserve">
          <source>Lorenz Attractor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3424310a6985d9610d377b5fc589b25f72d72c54" translate="yes" xml:space="preserve">
          <source>Lower limit of the horizontal span in data units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e78c47e8a312396bce77a28d19d53fbcdd29feb" translate="yes" xml:space="preserve">
          <source>Lower limit of the vertical span in axes (relative 0-1) units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a678a8d72807b8f6293c5a413eae2d29afc52ff5" translate="yes" xml:space="preserve">
          <source>Lower-left corner of inset axes, and its width and height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9bcb0aebe2fbb02dea2e71b386bf4fa9ab3b61" translate="yes" xml:space="preserve">
          <source>Lower-left corner of rectangle to be marked, and its width and height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d87dd267b8f0bc51944dbcaf62e60e5195ce48f" translate="yes" xml:space="preserve">
          <source>MATPLOTLIB &lt;strong&gt;UNCHAINED&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b94d9c827c8085d146a19e93005ea3c28de0a6" translate="yes" xml:space="preserve">
          <source>MATPLOTLIB UNCHAINED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5417cc3eb405a85db5b138a1df7b6ccaf043efc" translate="yes" xml:space="preserve">
          <source>MRI</source>
          <target state="translated">MRI</target>
        </trans-unit>
        <trans-unit id="a9b73ef11b4df2e0bccc5a845f2c4ecb7101aba7" translate="yes" xml:space="preserve">
          <source>MRI With EEG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7189c66d4b34a990d4d81be32a44c91cd7e6456" translate="yes" xml:space="preserve">
          <source>Major and minor ticks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10d82130289602c994e6b8323db51823172d80e" translate="yes" xml:space="preserve">
          <source>Make Room For Ylabel Using Axesgrid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f8bcbc7c050e25095403101a441b3c8c77b874" translate="yes" xml:space="preserve">
          <source>Make a 2D histogram plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5dc0dc473e9ae11ce375a7c13c6499a6152a7" translate="yes" xml:space="preserve">
          <source>Make a bar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924faa1990a75f5b2e81e0a04fb423c45816173b" translate="yes" xml:space="preserve">
          <source>Make a box and whisker plot for each column of &lt;code&gt;x&lt;/code&gt; or each vector in sequence &lt;code&gt;x&lt;/code&gt;. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665a2a0e4fba6b472e354bfb1909ed6158e73f39" translate="yes" xml:space="preserve">
          <source>Make a box and whisker plot for each column of &lt;em&gt;x&lt;/em&gt; or each vector in sequence &lt;em&gt;x&lt;/em&gt;. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc2bb27fa23882fc5b1de1812c31cb0ce5607f2" translate="yes" xml:space="preserve">
          <source>Make a box and whisker plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73293394755b6fbd8ced795de49e62d28fcb392" translate="yes" xml:space="preserve">
          <source>Make a compound path from a list of Path objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a488f5023c8fc7e7efcc4876b68b9da805e31c2" translate="yes" xml:space="preserve">
          <source>Make a compound path object to draw a number of polygons with equal numbers of sides XY is a (numpolys x numsides x 2) numpy array of vertices. Return object is a &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef8e3a66b7e57c0d5766e708faa8308f5d17922" translate="yes" xml:space="preserve">
          <source>Make a figure twice as tall as it is wide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d053db9d64b1a451e5dca032d4523995859083c3" translate="yes" xml:space="preserve">
          <source>Make a figure with the proper aspect for an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45adecc4a07df6090a8ea110c39a6f52a2a9067" translate="yes" xml:space="preserve">
          <source>Make a hexagonal binning plot of &lt;em&gt;x&lt;/em&gt; versus &lt;em&gt;y&lt;/em&gt;, where &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt; are 1-D sequences of the same length, &lt;em&gt;N&lt;/em&gt;. If &lt;em&gt;C&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt; (the default), this is a histogram of the number of occurrences of the observations at (x[i],y[i]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9edc9b42ae2f856c6c9264b393983d5dd67ad04" translate="yes" xml:space="preserve">
          <source>Make a hexagonal binning plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f301da3dd0b191ab853eb367fe0430b17cc1635e" translate="yes" xml:space="preserve">
          <source>Make a horizontal bar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f8d3c06a395fc3b0f11dd489d1f9c5a68465fd" translate="yes" xml:space="preserve">
          <source>Make a linear segmented colormap with &lt;em&gt;name&lt;/em&gt; from a sequence of &lt;em&gt;colors&lt;/em&gt; which evenly transitions from colors[0] at val=0 to colors[-1] at val=1. &lt;em&gt;N&lt;/em&gt; is the number of rgb quantization levels. Alternatively, a list of (value, color) tuples can be given to divide the range unevenly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1035c367d1bd550983ca774e48d3da54e4ef2bb5" translate="yes" xml:space="preserve">
          <source>Make a pcolor-style plot with an irregular rectangular grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bc6a393fc4e89350eb75cdac69871e295814fb" translate="yes" xml:space="preserve">
          <source>Make a pie chart of array &lt;em&gt;x&lt;/em&gt;. The fractional area of each wedge is given by &lt;code&gt;x/sum(x)&lt;/code&gt;. If &lt;code&gt;sum(x) &amp;lt; 1&lt;/code&gt;, then the values of &lt;em&gt;x&lt;/em&gt; give the fractional area directly and the array will not be normalized. The resulting pie will have an empty wedge of size &lt;code&gt;1 - sum(x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ec34967d7fb9d67e1c934da699aed58d8cb11e" translate="yes" xml:space="preserve">
          <source>Make a plot with log scaling on both the x and y axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2f223b36e7b2732d9f07d58a8f6a8e87d4835" translate="yes" xml:space="preserve">
          <source>Make a plot with log scaling on the x axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f2b922995f0ceec6e36171cb3f853779493e9a" translate="yes" xml:space="preserve">
          <source>Make a plot with log scaling on the y axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa84d7a9056cd77caa5ab83c10edc2f06c42fea1" translate="yes" xml:space="preserve">
          <source>Make a polar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab656567610df24ff69e212d834481a1099cca8" translate="yes" xml:space="preserve">
          <source>Make a reversed instance of the Colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a7dcf88cead7d9d0dd8573fc7c208e89ccb693" translate="yes" xml:space="preserve">
          <source>Make a step plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66afb3ccebc600ca5eb39ba4d1a3214682a52cc" translate="yes" xml:space="preserve">
          <source>Make a thumbnail of image in &lt;em&gt;infile&lt;/em&gt; with output filename &lt;em&gt;thumbfile&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a3e4d27d10e8c3e5c382b6d7e52790980c8fd4" translate="yes" xml:space="preserve">
          <source>Make a violin plot for each column of &lt;em&gt;dataset&lt;/em&gt; or each vector in sequence &lt;em&gt;dataset&lt;/em&gt;. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, and the maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd402b823be34172bf7591efebd0e060498e62f" translate="yes" xml:space="preserve">
          <source>Make a violin plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d069c265ea6db1fd780afccfb7ac9c8849515849" translate="yes" xml:space="preserve">
          <source>Make and return a second axes that shares the &lt;em&gt;x&lt;/em&gt;-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e09b480a8f616062de1e60f8cfa88fc74782db" translate="yes" xml:space="preserve">
          <source>Make and return a second axes that shares the &lt;em&gt;x&lt;/em&gt;-axis. The new axes will overlay &lt;em&gt;ax&lt;/em&gt; (or the current axes if &lt;em&gt;ax&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;), and its ticks will be on the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d89e28f3045c14e49c6887116dd53664eae6f9" translate="yes" xml:space="preserve">
          <source>Make and return a second axes that shares the &lt;em&gt;y&lt;/em&gt;-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9d6ba5ec8974da4c2b7efe7487b228721017b4" translate="yes" xml:space="preserve">
          <source>Make and return a second axes that shares the &lt;em&gt;y&lt;/em&gt;-axis. The new axes will overlay &lt;em&gt;ax&lt;/em&gt; (or the current axes if &lt;em&gt;ax&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;), and its ticks will be on the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9210c5400056cf6df2220da2f39b64d6d0545c78" translate="yes" xml:space="preserve">
          <source>Make one string from sequence of strings, with whitespace in between. The whitespace is chosen to form lines of at most linelen characters, if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b59ac9314d36faa22fd21f19ef2ad47d099b99c" translate="yes" xml:space="preserve">
          <source>Make sure every pushed graphics state is popped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5def61912331fb820cbca50783ba23294ef920ee" translate="yes" xml:space="preserve">
          <source>Make sure that self.home_views has an entry for all axes present in the figure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b16951e37cfc85853a90ce8e5585bb7383e359" translate="yes" xml:space="preserve">
          <source>Make ticks on a given day of each year that is a multiple of base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620b6f207cdb0c9ea527901e87236c5582406a70" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each day of the month. For example, 1, 15, 30.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8845c84d40f16d6bddb6a68843ff555770b14efb" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76af4837141e15b20e0a3131643b9476bb4b49e7" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each minute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a3dbf00567fc74d318b97bd278c3764f371e7b" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each month, e.g., 1, 3, 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be7afc19250e99bb92276eb8b5203dc6249c118" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8991fd466b6b55c43713b708e8bb067d06b8733" translate="yes" xml:space="preserve">
          <source>Make ticks on occurrences of each weekday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500c339585f77496afb1d14bf5c2dc0218aaff3c" translate="yes" xml:space="preserve">
          <source>Make ticks on regular intervals of one or more microsecond(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64990394e11b72f8f78bce046fa4036668512083" translate="yes" xml:space="preserve">
          <source>Makes an animation by repeatedly calling a function &lt;em&gt;func&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda698d39ccf6ec4a49ebc23ace2e678eb8c410a" translate="yes" xml:space="preserve">
          <source>Makes the path behave in an immutable way and sets the vertices and codes as read-only arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5090999865637c1739513d99373a4d24b87316cd" translate="yes" xml:space="preserve">
          <source>Manage the callbacks to maintain a list of selected vertices for &lt;a href=&quot;_as_gen/matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;matplotlib.lines.Line2D&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80817ab572181d0688fe2acaba5133d35e8088f" translate="yes" xml:space="preserve">
          <source>Manage the callbacks to maintain a list of selected vertices for &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;matplotlib.lines.Line2D&lt;/code&gt;&lt;/a&gt;. Derived classes should override &lt;a href=&quot;#matplotlib.lines.VertexSelector.process_selected&quot;&gt;&lt;code&gt;process_selected()&lt;/code&gt;&lt;/a&gt; to do something with the picks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d36ce3fa2ece68eb9b4b93f9b97338da10ca23c" translate="yes" xml:space="preserve">
          <source>Manager for actions triggered by user interactions (key press, toolbar clicks, ...) on a Figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea87c56e88eaf0c94a0a2f56caac8f172c5c63a" translate="yes" xml:space="preserve">
          <source>Manages the Comm connection between IPython and the browser (client).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9932be06e2fc743830494e45c22d312b0b1e2" translate="yes" xml:space="preserve">
          <source>Manages the set of projections available to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d2d6f5a2ebdd9c489ee116ebb0ca142a80bf35" translate="yes" xml:space="preserve">
          <source>Mandatory functions that must be implemented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5488ea6d6bf3958f01c93877568cf5a9a201f9" translate="yes" xml:space="preserve">
          <source>Manual Contour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c247da9f49a6993e89a12c5d4cba6057ed24d21f" translate="yes" xml:space="preserve">
          <source>Map Python objects to PDF syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb9f036249511b311bb8fe78687658302ab6b61" translate="yes" xml:space="preserve">
          <source>Mapping data onto colors using a colormap typically involves two steps: a data array is first mapped onto the range 0-1 using a subclass of &lt;a href=&quot;_as_gen/matplotlib.colors.normalize#matplotlib.colors.Normalize&quot;&gt;&lt;code&gt;Normalize&lt;/code&gt;&lt;/a&gt;, then this number is mapped to a color using a subclass of &lt;a href=&quot;_as_gen/matplotlib.colors.colormap#matplotlib.colors.Colormap&quot;&gt;&lt;code&gt;Colormap&lt;/code&gt;&lt;/a&gt;. Two are provided here: &lt;a href=&quot;_as_gen/matplotlib.colors.linearsegmentedcolormap#matplotlib.colors.LinearSegmentedColormap&quot;&gt;&lt;code&gt;LinearSegmentedColormap&lt;/code&gt;&lt;/a&gt;, which uses piecewise-linear interpolation to define colormaps, and &lt;a href=&quot;_as_gen/matplotlib.colors.listedcolormap#matplotlib.colors.ListedColormap&quot;&gt;&lt;code&gt;ListedColormap&lt;/code&gt;&lt;/a&gt;, which makes a colormap from a list of colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c181eb1c5938d7295ebf2b83f2ed492bd3d999" translate="yes" xml:space="preserve">
          <source>Mapping to the 0-1 interval could have been done via piece-wise linear interpolation, but using integers seems simpler, and reduces the number of conversions back and forth between integer and floating point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73725eadae8da1d985df2de6196032d5710b766f" translate="yes" xml:space="preserve">
          <source>Maps new values to integer identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa44ef6991c4e91a54a5d63384aef12a835d1340" translate="yes" xml:space="preserve">
          <source>Mark every day in &lt;em&gt;bymonthday&lt;/em&gt;; &lt;em&gt;bymonthday&lt;/em&gt; can be an int or sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479624fffe159a6ee10e35aa88b419397314b635" translate="yes" xml:space="preserve">
          <source>Mark every hour in &lt;em&gt;byhour&lt;/em&gt;; &lt;em&gt;byhour&lt;/em&gt; can be an int or sequence. Default is to tick every hour: &lt;code&gt;byhour=range(24)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eede7bd334ec966e86966378617e36d81ea94efc" translate="yes" xml:space="preserve">
          <source>Mark every minute in &lt;em&gt;byminute&lt;/em&gt;; &lt;em&gt;byminute&lt;/em&gt; can be an int or sequence. Default is to tick every minute: &lt;code&gt;byminute=range(60)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad7bb7a0eefda6e5c15c5dbc47d75f3900441ea" translate="yes" xml:space="preserve">
          <source>Mark every month in &lt;em&gt;bymonth&lt;/em&gt;; &lt;em&gt;bymonth&lt;/em&gt; can be an int or sequence. Default is &lt;code&gt;range(1,13)&lt;/code&gt;, i.e. every month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71967edab5892e1f614dfc5c04e0fb85ae83d98f" translate="yes" xml:space="preserve">
          <source>Mark every second in &lt;em&gt;bysecond&lt;/em&gt;; &lt;em&gt;bysecond&lt;/em&gt; can be an int or sequence. Default is to tick every second: &lt;code&gt;bysecond = range(60)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24a9982eec5c39a95ca248e1e2a053d67e0cf6c" translate="yes" xml:space="preserve">
          <source>Mark every weekday in &lt;em&gt;byweekday&lt;/em&gt;; &lt;em&gt;byweekday&lt;/em&gt; can be a number or sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6936136fade8830204309bc4c5fc00d783c06e20" translate="yes" xml:space="preserve">
          <source>Mark years that are multiple of base on a given month and day (default jan 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2168d94b4eaa889e96d264a8ccda6e7a891146e4" translate="yes" xml:space="preserve">
          <source>Marker Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc40f8b24cf1c7bdb8261810f47713c618ff0150" translate="yes" xml:space="preserve">
          <source>Marker Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb3cce853450d0127dec6f4987f8c0c7b652f5d" translate="yes" xml:space="preserve">
          <source>Marker filling-styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a44522b3c67934dcd036b1f38f861b51c53449f" translate="yes" xml:space="preserve">
          <source>Markevery Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e35b0617d43f2e1f08483cfc4cce336db4d796" translate="yes" xml:space="preserve">
          <source>Masionobe, L. 2003. &lt;a href=&quot;http://www.spaceroots.org/documents/ellipse/index.html&quot;&gt;Drawing an elliptical arc using polylines, quadratic or cubic Bezier curves&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759e9441966996323f4b83ddf49822176180fb2" translate="yes" xml:space="preserve">
          <source>Mask array of rasterized tex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed0f0b158ca5952d871b5b17b4459c1d88387f4" translate="yes" xml:space="preserve">
          <source>Mask to apply to encapsulated triangulation. All the initially masked triangles remain masked in the &lt;em&gt;new_mask&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08b1e29b8206c463f57ef9bb0c5fa5a3dbf0484" translate="yes" xml:space="preserve">
          <source>Masked Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bce59e5eee916a4702248eec69fd8415fd21c6" translate="yes" xml:space="preserve">
          <source>Masked arrays are not supported at present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b6a8ba5285d9607bea03c016fa0ca2d19f9aed" translate="yes" xml:space="preserve">
          <source>Masked out triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8655b09f433bef17fcb2c25241d4003067d198c9" translate="yes" xml:space="preserve">
          <source>Masks are obtained from all arguments of the correct length in categories 1, 2, and 4; a point is bad if masked in a masked array or if it is a nan or inf. No attempt is made to extract a mask from categories 2, 3, and 4 if &lt;code&gt;np.isfinite()&lt;/code&gt; does not yield a Boolean array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55ac4a44f35e88c849e9e0cec024da07fb7c6ec" translate="yes" xml:space="preserve">
          <source>MathText WX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c27b303e016eb0b7be87ae3629168ecc5da430" translate="yes" xml:space="preserve">
          <source>Mathtext Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a15e218e91c177a3bc6f72a5d837528ab2c266" translate="yes" xml:space="preserve">
          <source>Mathtext Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0034aecf4b9011cea87b94fd7637f673e3cbad" translate="yes" xml:space="preserve">
          <source>Matplotlib</source>
          <target state="translated">Matplotlib</target>
        </trans-unit>
        <trans-unit id="a1421b2ef668d6e58b6b9df937ffd8f86b2a20f5" translate="yes" xml:space="preserve">
          <source>Matplotlib With Glade 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dae52fffd1711fc8c4e32068cf298a7756f43a" translate="yes" xml:space="preserve">
          <source>Matplotlib axes where tool handles are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a9c5ffca4367cafd65cc1caaecf326dbaf78b8" translate="yes" xml:space="preserve">
          <source>Matplotlib axes_grid Toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e4a0f44f8b80e590daa3e1e5976b3630f9449a" translate="yes" xml:space="preserve">
          <source>Matplotlib axes_grid1 Toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5aea4d3fb0439c66a832ac274cb06b4d613965b" translate="yes" xml:space="preserve">
          <source>Matplotlib axisartist Toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb877b72e35a739ec89e8ef72161aac6c28bfed1" translate="yes" xml:space="preserve">
          <source>Matplotlib can only read PNGs natively. Further image formats are supported via the optional dependency on Pillow. Note, URL strings are not compatible with Pillow. Check the &lt;a href=&quot;http://pillow.readthedocs.io/en/latest/&quot;&gt;Pillow documentation&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc075594c45517dec6b11fd908521a25477a7d4f" translate="yes" xml:space="preserve">
          <source>Matplotlib color argument (all patches have same color), or a sequence or rgba tuples; if it is a sequence the patches will cycle through the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc74c98cd2e1090eb5654f25723652b3460c66cb" translate="yes" xml:space="preserve">
          <source>Matplotlib consists of the following submodules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e310f960ee2325382bd75e4f780879fdce2b1" translate="yes" xml:space="preserve">
          <source>Matplotlib date format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febed25b90c15f6b5bc49faeb7bef343995ba704" translate="yes" xml:space="preserve">
          <source>Matplotlib figure to initialize height, width and dpi from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6daf5dc67b1afa414225883df682c44b6fecea92" translate="yes" xml:space="preserve">
          <source>Matplotlib logo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eca34d03c87572b0e1aeda27123e6008dd2283a" translate="yes" xml:space="preserve">
          <source>Matplotlib mplot3d toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcb39993b77f6ac1e10a3a8fa96e947634a9d58" translate="yes" xml:space="preserve">
          <source>Matplotlib provides a number of colormaps, and others can be added using &lt;a href=&quot;cm_api#matplotlib.cm.register_cmap&quot;&gt;&lt;code&gt;register_cmap()&lt;/code&gt;&lt;/a&gt;. This function documents the built-in colormaps, and will also return a list of all registered colormaps if called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c97820d767e93c7e4e66629bc0dbf5b0d2b696" translate="yes" xml:space="preserve">
          <source>Matplotlib provides sophisticated date plotting capabilities, standing on the shoulders of python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and the add-on module &lt;code&gt;dateutil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c18e9984f0826a481f4b0b73b91300360426f4" translate="yes" xml:space="preserve">
          <source>Matplotlib recognizes the following formats to specify a color:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3167c0c83a51e9154be4d60559ab6873f0b71006" translate="yes" xml:space="preserve">
          <source>Matplotlib represents dates using floating point numbers specifying the number of days since 0001-01-01 UTC, plus 1. For example, 0001-01-01, 06:00 is 1.25, not 0.25. Values &amp;lt; 1, i.e. dates before 0001-01-01 UTC are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5212e07ac667cdb61cebfe3de22939b5d8eea55" translate="yes" xml:space="preserve">
          <source>Matplotlib ships with 4 perceptually uniform color maps which are the recommended color maps for sequential data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5e3e8d627c1952d15fe59f94b68abfe4b1f37b" translate="yes" xml:space="preserve">
          <source>Matshow</source>
          <target state="translated">Matshow</target>
        </trans-unit>
        <trans-unit id="5e280e3cca4412e3714ba38771ec2b95a54b1c7d" translate="yes" xml:space="preserve">
          <source>Maximum length of streamline in axes coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e49d0131f9d7705612189a83f8d6734bc8b6735" translate="yes" xml:space="preserve">
          <source>Maximum number of intervals; one less than max number of ticks. If the string &lt;code&gt;'auto'&lt;/code&gt;, the number of bins will be automatically determined based on the length of the axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff875360db9da5605b76cdce2980696c7dbfa726" translate="yes" xml:space="preserve">
          <source>Maximum number of samples used in each direction. If the input data is larger, it will be downsampled (by slicing) to these numbers of points. Defaults to 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebf1a346a59e32ca7206f31f8d1dcb404f78a21" translate="yes" xml:space="preserve">
          <source>Maximum number of samples used in each direction. If the input data is larger, it will be downsampled (by slicing) to these numbers of points. Setting a count to zero causes the data to be not sampled in the corresponding direction, producing a 3D line plot rather than a wireframe plot. Defaults to 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d37a0f7be4c8eae070e19d1ed391209f8dfb4c" translate="yes" xml:space="preserve">
          <source>Maximum value in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0539c9047688e5a4e002067c7214cf072d50189" translate="yes" xml:space="preserve">
          <source>May be either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445070985354c5341e8221e68403d2f0a4212b88" translate="yes" xml:space="preserve">
          <source>May be one of &quot;N&quot;, &quot;NW&quot;, &quot;W&quot;, &quot;SW&quot;, &quot;S&quot;, &quot;SE&quot;, &quot;E&quot;, or &quot;NE&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8283b92eaf5a3c74f05fc6d01567b3d502f3395e" translate="yes" xml:space="preserve">
          <source>May return &lt;a href=&quot;https://docs.python.org/3/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if no sketch parameters were set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f5f5efbc5990f5230aa95359042338b856707b" translate="yes" xml:space="preserve">
          <source>Menu</source>
          <target state="translated">Menu</target>
        </trans-unit>
        <trans-unit id="904a501cbadfef5832b911df9af07bd10a9bacbb" translate="yes" xml:space="preserve">
          <source>Merged into fontdict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723e79cd24aa036393a0317dc10b18a6bd8070dc" translate="yes" xml:space="preserve">
          <source>Message text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa318e1e0ed48b9684b65ee8d3eb3af9f9de56dd" translate="yes" xml:space="preserve">
          <source>Messages usually get displayed to the user by the toolbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="e1e4895cce3fd0033b1db8bad3938826481780c9" translate="yes" xml:space="preserve">
          <source>Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470557d712c9c2d7bced46b8007bb413b1cb9707" translate="yes" xml:space="preserve">
          <source>Method for determining the angle of the arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0217f3f3f42761a65418483684d505b4fe29c5" translate="yes" xml:space="preserve">
          <source>Method used to calculate the baseline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="d034b77fc9c625b3bd84935eb39eaa2f36055d68" translate="yes" xml:space="preserve">
          <source>Methods used by &lt;a href=&quot;axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; that must be overridden for non-rectilinear Axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98da78f48bf46ba481cd0910b08aba06eeb305e" translate="yes" xml:space="preserve">
          <source>Michel Bernadou, Kamal Hassan, &quot;Basis functions for general Hsieh-Clough-Tocher triangles, complete or reduced.&quot;, International Journal for Numerical Methods in Engineering, 17(5):784 - 789. 2.01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51b97dfe72702f7a4db88668d6bbc27ffd18957" translate="yes" xml:space="preserve">
          <source>Microseconds</source>
          <target state="translated">Microseconds</target>
        </trans-unit>
        <trans-unit id="28beecbfc0c4464f5c311ec9c5b37a7b74647cf6" translate="yes" xml:space="preserve">
          <source>Midpoint of rectangle edges from left, moving clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238af49a2e895fef3d58dbe65449766a8e0b5def" translate="yes" xml:space="preserve">
          <source>Mimics home/back/forward in a web browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dd4bbbeb1b080157953a97ebc2d7ebe0740fc3" translate="yes" xml:space="preserve">
          <source>Minimum and maximum value to map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13c0a8663c5c5d520a54d650aad7e46060c97d4" translate="yes" xml:space="preserve">
          <source>Minimum length as a multiple of shaft width; if an arrow length is less than this, plot a dot (hexagon) of this diameter instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3227123c22aa57afcee9d4b34303ca04962878df" translate="yes" xml:space="preserve">
          <source>Minimum length of streamline in axes coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58df290b2516008654e40cf327370460174cdf0d" translate="yes" xml:space="preserve">
          <source>Minimum value in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a848291cf2828e142e89d3d66f953b4a34b7ee" translate="yes" xml:space="preserve">
          <source>Minor ticks are not supported by Axes3D objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed33bdd4bf28d7f8ec4848509222c7c13416d1f2" translate="yes" xml:space="preserve">
          <source>Minor ticks are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9e933bcdc8c6ee0a8fe02245c947ada1f39398" translate="yes" xml:space="preserve">
          <source>Minor ticks are not supported. This function was added only for completeness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092f99ea11a34a8490e7a767a83a42fc45634f82" translate="yes" xml:space="preserve">
          <source>Minutes</source>
          <target state="translated">Minutes</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="244eb37a145a32262901e5c90ec8351f487077dc" translate="yes" xml:space="preserve">
          <source>Mixin class for FFMpeg output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0336a828acfb9bcb1ed3890c5f6db076580617" translate="yes" xml:space="preserve">
          <source>Mixin class for ImageMagick output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc468473618380c86d84d2db6f0d10b7bbfa7760" translate="yes" xml:space="preserve">
          <source>Mixin class for avconv output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31681fb0e07fa97ae49a53aaf4ad32e6fe3b2e05" translate="yes" xml:space="preserve">
          <source>Mixin to provide labelling capability to &lt;a href=&quot;#matplotlib.contour.ContourSet&quot;&gt;&lt;code&gt;ContourSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a3ce3c8a4405955f59c6558689b6d8d7576e12" translate="yes" xml:space="preserve">
          <source>Mmh Donuts!!!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3336d6d5561e40f6b9dd62e87a41b3edf3268266" translate="yes" xml:space="preserve">
          <source>Modifier keys will be prefixed to the pressed key and will be in the order &quot;ctrl&quot;, &quot;alt&quot;, &quot;super&quot;. The exception to this rule is when the pressed key is itself a modifier key, therefore &quot;ctrl+alt&quot; and &quot;alt+control&quot; can both be valid key values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b1b3c32a61becf83d463b4cfefaef7ce1869a2" translate="yes" xml:space="preserve">
          <source>Modify the endpoints of a range as needed to avoid singularities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e94e8245c464200e6484a4b177138f87dec53be" translate="yes" xml:space="preserve">
          <source>Modifying the coordinate formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3bae62f3b92b7534989a078e25b44f1388e465" translate="yes" xml:space="preserve">
          <source>Module for creating Sankey diagrams using Matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2285ccafab166d6de5656b6f96a4e05fb33c5d4" translate="yes" xml:space="preserve">
          <source>Module that allows plotting of string &quot;category&quot; data. i.e. &lt;code&gt;plot(['d', 'f', 'a'],[1, 2, 3])&lt;/code&gt; will plot three points with x-axis values of 'd', 'f', 'a'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="c27ae1f71ca7a733054ae82b445cda92afd48ff1" translate="yes" xml:space="preserve">
          <source>Monotonically increasing sequence of boundaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082bc378cd60e17a38d99898b21955299c5b60c8" translate="yes" xml:space="preserve">
          <source>Month</source>
          <target state="translated">Month</target>
        </trans-unit>
        <trans-unit id="123aac63d4db79c8789b7868120ae91c234a5fa3" translate="yes" xml:space="preserve">
          <source>More colormaps are available at &lt;a href=&quot;https://jiffyclub.github.io/palettable/&quot;&gt;palettable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86117686892823bd1c2903eff6bb1f56f98bd01e" translate="yes" xml:space="preserve">
          <source>More general function to plot data on a 2D regular raster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8033c2e3e887080d9279d88d2b55ceb7b6daf5" translate="yes" xml:space="preserve">
          <source>More triangular 3D surfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a5c465f4dca0266cc9c23537384195b2e968ac" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;matplotlib.patches.patch#matplotlib.patches.Patch&quot;&gt;&lt;code&gt;Patch&lt;/code&gt;&lt;/a&gt; properties are supported as keyword arguments, with the exception of &lt;em&gt;fill&lt;/em&gt; and &lt;em&gt;facecolor&lt;/em&gt; because filling is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182ae77f5e114158b240ef275743dc60588bc36a" translate="yes" xml:space="preserve">
          <source>Most of the &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/index.html#examples-index&quot;&gt;examples&lt;/a&gt; use the object-oriented approach (except for the pyplot section)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f74b2ac24cb2b65c1166eb010247c7eabb53c7" translate="yes" xml:space="preserve">
          <source>Most of the date tickers can locate single or multiple values. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3b60678228a0fdd379639f02f269e0a83083f1" translate="yes" xml:space="preserve">
          <source>Most of the information in this object is stored in the underlying &lt;a href=&quot;#matplotlib.mathtext.GlueSpec&quot;&gt;&lt;code&gt;GlueSpec&lt;/code&gt;&lt;/a&gt; class, which is shared between multiple glue objects. (This is a memory optimization which probably doesn't matter anymore, but it's easier to stick to what TeX does.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c32984d5d4166675cb9ebbd169af5af7e6b5e0" translate="yes" xml:space="preserve">
          <source>Mouse button used to add points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eff1975c8977f48bc07b707741169ad917c020" translate="yes" xml:space="preserve">
          <source>Mouse button used to remove the most recently added point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5a81f5490e2c4a41833975fb99e6e09682461c" translate="yes" xml:space="preserve">
          <source>Mouse button used to stop input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee3d9a0bf746117a6261a3d4c172b3a74baaa5f" translate="yes" xml:space="preserve">
          <source>Move back up the view lim stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af672706b919024b6f520a0384e52725a2e2190" translate="yes" xml:space="preserve">
          <source>Move forward in the view lim stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e9769955f759c8b499c7d90a61c745f3d07185" translate="yes" xml:space="preserve">
          <source>Move forward in the view lim stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c58b8dc917d2dfa0db9a0575faeb7aa1efa007" translate="yes" xml:space="preserve">
          <source>Move the given axes, which must already exist in the stack, to the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16384cbef70cc75b3d0b61efb90210b6a6141df" translate="yes" xml:space="preserve">
          <source>Move the position back and return the current element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049b74b4267924b4aab03a618c676d0fd96e6657" translate="yes" xml:space="preserve">
          <source>Move the position forward and return the current element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8d09100dff0a797737aa50fb9fdbcf97032543" translate="yes" xml:space="preserve">
          <source>Move ticks and ticklabels (if present) to the bottom of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c003536861cbd7a430a1570f5f7bbf20e6940777" translate="yes" xml:space="preserve">
          <source>Move ticks and ticklabels (if present) to the left of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6dae568f2cd1bd9945b8d8178d1c4cfd521bb9" translate="yes" xml:space="preserve">
          <source>Move ticks and ticklabels (if present) to the right of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e70927a4eb1a95d83475d9e5be92bbc0544529" translate="yes" xml:space="preserve">
          <source>Move ticks and ticklabels (if present) to the top of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e9cccf762333e011e78bd438a4a65a6fac774a" translate="yes" xml:space="preserve">
          <source>MovieWriter</source>
          <target state="translated">MovieWriter</target>
        </trans-unit>
        <trans-unit id="66e8a8a5a74af664d2ab70caad281b0e876359ec" translate="yes" xml:space="preserve">
          <source>Multi Image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f45661eaa57bb13f9d964282aadf0495ad649e" translate="yes" xml:space="preserve">
          <source>Multicolored lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c86580debb09379384daa113eb38cc2e59526" translate="yes" xml:space="preserve">
          <source>Multicursor</source>
          <target state="translated">Multicursor</target>
        </trans-unit>
        <trans-unit id="035b7b07c7332eff2827b344fe78914735922111" translate="yes" xml:space="preserve">
          <source>Multiline</source>
          <target state="translated">Multiline</target>
        </trans-unit>
        <trans-unit id="9b4f5b504430e5a3378be705fabc55904619f3ec" translate="yes" xml:space="preserve">
          <source>Multipage PDF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b9538e5c328c6055d1a92626facd1d2f46c0bd" translate="yes" xml:space="preserve">
          <source>Multiple &lt;em&gt;theta&lt;/em&gt;, &lt;em&gt;r&lt;/em&gt; arguments are supported, with format strings, as in &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b3b7f1b607faee32ccaf80c2c31f0f0295b649" translate="yes" xml:space="preserve">
          <source>Multiple Figs Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ff95c76c491dcca798b4f59c7fa5bb6dccb6d4" translate="yes" xml:space="preserve">
          <source>Multiple Yaxis With Spines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78335fcd0345bdbba597878d4da7dc52c6cfa656" translate="yes" xml:space="preserve">
          <source>Multiple data can be provided via &lt;em&gt;x&lt;/em&gt; as a list of datasets of potentially different length ([&lt;em&gt;x0&lt;/em&gt;, &lt;em&gt;x1&lt;/em&gt;, ...]), or as a 2-D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fdff7f2e8486d7dfe3755816b036f30882e47ee" translate="yes" xml:space="preserve">
          <source>Multiple subplots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63331aeb9f79031226ee4ac43e26136854374d1e" translate="yes" xml:space="preserve">
          <source>Multiprocess</source>
          <target state="translated">Multiprocess</target>
        </trans-unit>
        <trans-unit id="9319c8bd881ada88d240aa92bd5b842df33ced63" translate="yes" xml:space="preserve">
          <source>MxN: luminance (grayscale) values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff494d6a252cb02ddc4b5282b8e483acf0e0809a" translate="yes" xml:space="preserve">
          <source>MxNx3: RGB values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1f07394a6c09488fcc4436da141a512d999c5b" translate="yes" xml:space="preserve">
          <source>MxNx4: RGBA values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f56dbe7bb23caeb2a7872d0c458d7d02eec4b7b" translate="yes" xml:space="preserve">
          <source>My 3D plot doesn't look right at certain viewing angles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="a5ba6b6c66f0789206ad043e060599d029791bd2" translate="yes" xml:space="preserve">
          <source>Name (id) of the tool triggered from within the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5568343e33866f35e1783878825e8372edfe9e" translate="yes" xml:space="preserve">
          <source>Name of file parsed for matplotlib settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca006b789b7fa05c4b1ea28cdea98be849ce1f1" translate="yes" xml:space="preserve">
          <source>Name of the Tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5818a23b9b65f23c057262cd58f845ae9054154" translate="yes" xml:space="preserve">
          <source>Name of the event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d015481ca65b9081bb377d620ae6bc5221408f90" translate="yes" xml:space="preserve">
          <source>Name of the font as used internally by TeX and friends, as an ASCII bytestring. This is usually very different from any external font names, and &lt;code&gt;dviread.PsfontsMap&lt;/code&gt; can be used to find the external name of the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e6f2ce9b6686ae7ab5429f6cbc0c3c920d186f" translate="yes" xml:space="preserve">
          <source>Name of the group that this tool belongs to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4967719552039ce189c300b46d9913d069f630c5" translate="yes" xml:space="preserve">
          <source>Name of the part, e.g. 'acute'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4877841136afb30a44bc3e973f87ca6f6fe8091d" translate="yes" xml:space="preserve">
          <source>Name of the tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91a3b3f7bb52f8c14458ff6037cc5e76887bf9d" translate="yes" xml:space="preserve">
          <source>Name of the tool to add, this gets used as the tool's ID and as the default label of the buttons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a12afcd540dd1018e69044d9fa97152c63f1edf" translate="yes" xml:space="preserve">
          <source>Name of the tool to remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65cba5d47d3bea32d3b9f0b28e525a4f65efd2f" translate="yes" xml:space="preserve">
          <source>Name of the tool, or the tool itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40807ce94a1ba6efffe7e3f0ae6b48327c894ea0" translate="yes" xml:space="preserve">
          <source>Name of the tool, treated as the ID, has to be unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16097c19f71a43813b2924a63002081110afa13" translate="yes" xml:space="preserve">
          <source>Name(s) of keyword arguments to process, in descending order of priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2ce54f32a8220bd2e33376d6883dac83dabcfc" translate="yes" xml:space="preserve">
          <source>Nan Test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514c3f67fd78eec48f6b55cbc0740a27a05daf64" translate="yes" xml:space="preserve">
          <source>Negative values -0.5 &amp;lt; m &amp;lt; 0 will result in clipping of the data range. I.e. for a data range [0, 2], a factor of &lt;code&gt;m = -0.1&lt;/code&gt; will result in a range [0.2, 1.8].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a443e859d6eae822457dd4415573a5a14c76bd" translate="yes" xml:space="preserve">
          <source>Nested GridSpecs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bc9d893a27e3a04e102b6f3b49517d6aaec2e3" translate="yes" xml:space="preserve">
          <source>Nested Gridspecs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0055b4bf7cc1e9b56f7a6e44a066107f9083a1a6" translate="yes" xml:space="preserve">
          <source>Nested pie charts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6f2acc187bceb8c79f3ab7f3ea53c7abe23cc7" translate="yes" xml:space="preserve">
          <source>New in version 1.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8243cc22305b5aa370306f90b6f350cae519bf93" translate="yes" xml:space="preserve">
          <source>New in version 1.1.0: The &lt;em&gt;zdir&lt;/em&gt; and &lt;em&gt;offset&lt;/em&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57e2e4db9245efdc4fb26649a5e4d935285c3f2" translate="yes" xml:space="preserve">
          <source>New in version 1.1.0: This function was added, but not tested. Please report any bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3906ab7e4da1423b6a59515f1ac83a79dc5c0597" translate="yes" xml:space="preserve">
          <source>New in version 1.2.0: This plotting function was added for the v1.2.0 release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7964ec64a8b982e6ddd3213cdaec57bee7d993cd" translate="yes" xml:space="preserve">
          <source>New in version 1.2.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40b2e7d9c1f220dfb6ad89125bc6ab4e2c5b081" translate="yes" xml:space="preserve">
          <source>New in version 1.2.1: The &lt;em&gt;sharez&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34b9c1be5731bf190b660300a1a84ff5e7149cc" translate="yes" xml:space="preserve">
          <source>New in version 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fefbf12100ae1567172eecac61bb666a6592345" translate="yes" xml:space="preserve">
          <source>New in version 2.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3044731cb14928152cff1cf7dc1f4fa6c076e116" translate="yes" xml:space="preserve">
          <source>New in version 3.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1005880ee97480f75836d8ed53e5a7bf826a5e" translate="yes" xml:space="preserve">
          <source>No labels on the ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4bf92c07dc46895059f97b104ad87a5c58bd25" translate="yes" xml:space="preserve">
          <source>No match returns 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44902fe9fdfb69e7c13949329d330ee1de805d17" translate="yes" xml:space="preserve">
          <source>No match will return 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de377a47d866c67e4e612603efd9438eb93ed878" translate="yes" xml:space="preserve">
          <source>No ticks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8084b843e6dc806c0e6be9f27d68af2d8e54fb25" translate="yes" xml:space="preserve">
          <source>No ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c839030fd740521f967e65f3fcfa960871d69e" translate="yes" xml:space="preserve">
          <source>No window function; simply return x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b95bc4b809397716189e2a7c3e28c4c5f2b2df" translate="yes" xml:space="preserve">
          <source>Non-bootstrapping approach to confidence interval uses Gaussian- based asymptotic approximation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffaf89d43a759275c79dd20228a27b808804457" translate="yes" xml:space="preserve">
          <source>Non-positive values in x can be masked as invalid, or clipped to a very small positive number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0b2bfe3833b85efdaa6c32b037f2661d83bb23" translate="yes" xml:space="preserve">
          <source>Non-positive values in x or y can be masked as invalid, or clipped to a very small positive number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb94f86da3ac9971a8c9d85ff1804d1a01679548" translate="yes" xml:space="preserve">
          <source>Non-positive values in y can be masked as invalid, or clipped to a very small positive number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c6e18bfd139bed866154e6efc6d002b9e8e06cf8" translate="yes" xml:space="preserve">
          <source>None or a sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4e71d5c31c61e29f857e9ba235192290a52942" translate="yes" xml:space="preserve">
          <source>None or a sequence which must be of length 1 less than the sequence of &lt;em&gt;boundaries&lt;/em&gt;. For each region delimited by adjacent entries in &lt;em&gt;boundaries&lt;/em&gt;, the color mapped to the corresponding value in values will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e73de4abb58b9804a106cdb3a2c2f84de04dd4" translate="yes" xml:space="preserve">
          <source>None or bool or float or callable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861ab6b8f11dc6e24546c0eb050ece105e8dbc9a" translate="yes" xml:space="preserve">
          <source>None or int or (int, int) or slice or List[int] or float or (float, float)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc01b027c06d14a863d322d0f43bc26030b30d13" translate="yes" xml:space="preserve">
          <source>None | axes object into which the colorbar will be drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d81359109b09ece5d3d45edc8c8c48cef40b34" translate="yes" xml:space="preserve">
          <source>None | parent axes object from which space for a new colorbar axes will be stolen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95373d9054e2643c490ed751b5316808b00378a3" translate="yes" xml:space="preserve">
          <source>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c9ea487e8dc563a28094d0eb8c0167e9641273" translate="yes" xml:space="preserve">
          <source>None: no mouse button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039a509edaf221ae0ab968b77a65083d5ca33277" translate="yes" xml:space="preserve">
          <source>None: the self.xy will be checked only if &lt;em&gt;xycoords&lt;/em&gt; is &quot;data&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f090e1891b2e0952ad2c53517e58c3ff85eb60f7" translate="yes" xml:space="preserve">
          <source>Normalization for the colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cdb84b6a7d7bcb20cb30838e462fb0cf6d578e" translate="yes" xml:space="preserve">
          <source>Normalize a given value to the 0-1 range on a log scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6340eba3d865d613d0630a3a4da996c126ac5828" translate="yes" xml:space="preserve">
          <source>Normalize data with a set center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2b0ef0855da0e95069d56fce172e3ba32496bc" translate="yes" xml:space="preserve">
          <source>Normalize histogram. &lt;em&gt;normed&lt;/em&gt; is a deprecated synonym for this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdc60b36775184a165977c2a793f0763e9e63f9" translate="yes" xml:space="preserve">
          <source>Normalize object used to scale luminance data to 0, 1. If &lt;code&gt;None&lt;/code&gt;, stretch (min, max) to (0, 1). This is only used if &lt;em&gt;color&lt;/em&gt; is an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2013dfffe4fe3c41b257ea0cffcd8753640f7e50" translate="yes" xml:space="preserve">
          <source>Normalize, rescale, and colormap this image's data for rendering using &lt;em&gt;renderer&lt;/em&gt;, with the given &lt;em&gt;magnification&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9bb43a5bb49a85f60e2b0375b152b7c2f84179" translate="yes" xml:space="preserve">
          <source>Not all kinds of artist are supported by the legend command. See &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/intermediate/legend_guide.html&quot;&gt;Legend guide&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c6c74212ac6a6a9847391f4bf81adc9f400d0d" translate="yes" xml:space="preserve">
          <source>Not all methods have been overridden on this RendererBase subclass. It may be necessary to add further methods to extend the PathEffects capabilities further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702e05800667fa7446b5c0a3fe4404f582215a18" translate="yes" xml:space="preserve">
          <source>Not intended to be human readable, but useful for backends who want to cache derived information about text (e.g., layouts) and need to know if the text has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a8611375e3228ee97719b4aa70e9a3728d46c5" translate="yes" xml:space="preserve">
          <source>Not used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="2874e3753ffa14485aff80eacf7586c044ec0e7c" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#matplotlib.transforms.TransformWrapper&quot;&gt;&lt;code&gt;TransformWrapper&lt;/code&gt;&lt;/a&gt; instances must have the same input and output dimensions during their entire lifetime, so the child transform may only be replaced with another child transform of the same dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62bbf1f7f71d9e2f769f188132308da8218ae095" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;c&lt;/em&gt; should not be a single numeric RGB or RGBA sequence because that is indistinguishable from an array of values to be colormapped. If you want to specify the same RGB or RGBA value for all points, use a 2-D array with a single row. Otherwise, value- matching will have precedence in case of a size matching with &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849c84aee6a47e76419ff943f5dbe4b91eeb681f" translate="yes" xml:space="preserve">
          <source>Note that Matplotlib's internal font manager and fontconfig use a different algorithm to lookup fonts, so the results of the same pattern may be different in Matplotlib than in other applications that use fontconfig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26751f9f08bf893c7c8856f0d9718b67326b8a8" translate="yes" xml:space="preserve">
          <source>Note that all error arrays should have &lt;em&gt;positive&lt;/em&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02775b39890d2771208a584ff14efda84c9bcc68" translate="yes" xml:space="preserve">
          <source>Note that it is not guaranteed that &lt;code&gt;x0 &amp;lt;= x1&lt;/code&gt; and &lt;code&gt;y0 &amp;lt;= y1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b915edb5d64a803e764878ae7ddf549b24bdbfa9" translate="yes" xml:space="preserve">
          <source>Note that one can create a &lt;code&gt;ScalarMappable&lt;/code&gt; &quot;on-the-fly&quot; to generate colorbars not attached to a previously drawn artist, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc70a767b830a87c0fca408cbe47584abd726241" translate="yes" xml:space="preserve">
          <source>Note that special symbols can be defined via the &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/text/mathtext.html&quot;&gt;STIX math font&lt;/a&gt;, e.g. &lt;code&gt;&quot;$♫$&quot;&lt;/code&gt;. For an overview over the STIX font symbols refer to the &lt;a href=&quot;http://www.stixfonts.org/allGlyphs.html&quot;&gt;STIX font table&lt;/a&gt;. Also see the &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/text_labels_and_annotations/stix_fonts_demo.html&quot;&gt;STIX Fonts Demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ec1514169c0b4f0861c285c79e9b07bcee4ed6" translate="yes" xml:space="preserve">
          <source>Note that the &lt;em&gt;label_direction&lt;/em&gt;s '+' and '-' are relative to the direction of the increasing coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635865f97d2029e64a6a60022aea91500495d760" translate="yes" xml:space="preserve">
          <source>Note that the &lt;em&gt;shrink&lt;/em&gt; kwarg provides a simple way to keep a vertical colorbar, for example, from being taller than the axes of the mappable to which the colorbar is attached; but it is a manual method requiring some trial and error. If the colorbar is too tall (or a horizontal colorbar is too wide) use a smaller value of &lt;em&gt;shrink&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42ea4a03dd227383fbd1f6296c884b7b8138bd8" translate="yes" xml:space="preserve">
          <source>Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the &lt;a href=&quot;#axes-pcolor-grid-orientation&quot;&gt;Notes&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6646a42e1b773351ea610d39af0adabb0e05a3a4" translate="yes" xml:space="preserve">
          <source>Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the &lt;a href=&quot;#axes-pcolormesh-grid-orientation&quot;&gt;Notes&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be485386061b08bd4a6c78601d096a1ad23485dc" translate="yes" xml:space="preserve">
          <source>Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the &lt;a href=&quot;matplotlib.pyplot.pcolor#axes-pcolor-grid-orientation&quot;&gt;Notes&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931d2b5c0f9544d38d31dc05cf5c2a55f9be0a2f" translate="yes" xml:space="preserve">
          <source>Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the &lt;a href=&quot;matplotlib.pyplot.pcolormesh#axes-pcolormesh-grid-orientation&quot;&gt;Notes&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b08a3da5e89ae86f6e36466a28bedb990fc0a0" translate="yes" xml:space="preserve">
          <source>Note that the direction &quot;+&quot; and &quot;-&quot; are relative to the direction of the increasing coordinate. Also, the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115c405365b874a8f54ef407fd1e110999241e7c" translate="yes" xml:space="preserve">
          <source>Note that the direction of the vertical axis and thus the default values for top and bottom depend on &lt;em&gt;origin&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e4fc23f8e01945c166e561871e2f671e129dde" translate="yes" xml:space="preserve">
          <source>Note that the same locator should not be used across multiple &lt;a href=&quot;axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; because the locator stores references to the Axis data and view limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6b3ca81248ea5743717470626ac5c931bd765c" translate="yes" xml:space="preserve">
          <source>Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792768b497bcfc98bf8a6d9a14a6ef29691636a7" translate="yes" xml:space="preserve">
          <source>Note that the vertical axes points upward for 'lower' but downward for 'upper'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387de9ea7357e0ff564bc654d40a1842351cbaa4" translate="yes" xml:space="preserve">
          <source>Note that these are separate artists from Axis class of the original mpl, thus most of tick-related command in the original mpl won't work, although some effort has made to work with. For example, color and markerwidth of the ax.axis[&quot;bottom&quot;].major_ticks will follow those of Axes.xaxis unless explicitly specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d108fbea2e53558e32a6406efc8e69e99e2b7eb0" translate="yes" xml:space="preserve">
          <source>Note that this class does a bit of magic with the _facecolors and _edgecolors properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50a35b26dff474ed955f28c3adadf78695a9509" translate="yes" xml:space="preserve">
          <source>Note that this class is nothing more than a simple tuple of two floats. Take a look at the Divider class to see how these two values are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5a40626ba7380dfbc057269c244749ca8b85c0" translate="yes" xml:space="preserve">
          <source>Note that this does not check that there are events, much like the normal pop method. If no events exist, this will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f84461f5e79058c7ca3672f7c6aa53aae30832" translate="yes" xml:space="preserve">
          <source>Note that this function ignores geometry information of subplot itself, but uses what is given by the &lt;em&gt;nrows_ncols&lt;/em&gt; and &lt;em&gt;num1num2_list&lt;/em&gt; parameters. Also, the results could be incorrect if some subplots have &lt;code&gt;adjustable=datalim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322402dcdd83402ecf8217d701cdb768538df511" translate="yes" xml:space="preserve">
          <source>Note that this only affects drawing of texts and images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77292223065f2e37878b5f070116159c1f7323d" translate="yes" xml:space="preserve">
          <source>Note you can use python's kwargs dictionary facility to store dictionaries of default parameters. e.g., you can customize the font rc as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949804449df111bbfe4d8b47788907ee43843ac3" translate="yes" xml:space="preserve">
          <source>Note, for smarter transforms including caching (a common requirement for matplotlib figures), see &lt;a href=&quot;#matplotlib.transforms.TransformedBbox&quot;&gt;&lt;code&gt;TransformedBbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2233715a91bb2d409aa3143d6fe9cedb7bd8d175" translate="yes" xml:space="preserve">
          <source>Note, if you use this method, e.g., in &lt;a href=&quot;#matplotlib.ticker.Formatter.format_data&quot;&gt;&lt;code&gt;format_data()&lt;/code&gt;&lt;/a&gt; or call, you probably don't want to use it for &lt;a href=&quot;#matplotlib.ticker.Formatter.format_data_short&quot;&gt;&lt;code&gt;format_data_short()&lt;/code&gt;&lt;/a&gt; since the toolbar uses this for interactive coord reporting and I doubt we can expect GUIs across platforms will handle the unicode correctly. So for now the classes that override &lt;a href=&quot;#matplotlib.ticker.Formatter.fix_minus&quot;&gt;&lt;code&gt;fix_minus()&lt;/code&gt;&lt;/a&gt; should have an explicit &lt;a href=&quot;#matplotlib.ticker.Formatter.format_data_short&quot;&gt;&lt;code&gt;format_data_short()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953518cf234c10a4118ec7db8b4aa14a0d4a0498" translate="yes" xml:space="preserve">
          <source>Note, typically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6312220fa42592ba09d3ad6ee600337822aab6" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;#matplotlib.axes.Axes.tricontourf&quot;&gt;&lt;code&gt;tricontourf&lt;/code&gt;&lt;/a&gt; fills intervals that are closed at the top; that is, for boundaries &lt;em&gt;z1&lt;/em&gt; and &lt;em&gt;z2&lt;/em&gt;, the filled region is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34aea06f88bc08abec09eba72a905247c3ae0cc" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;#matplotlib.pyplot.tricontourf&quot;&gt;&lt;code&gt;tricontourf&lt;/code&gt;&lt;/a&gt; fills intervals that are closed at the top; that is, for boundaries &lt;em&gt;z1&lt;/em&gt; and &lt;em&gt;z2&lt;/em&gt;, the filled region is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebdd1c9664935d089bdcf1d26fe250a60fd2f33" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;_as_gen/matplotlib.axes.axes.relim#matplotlib.axes.Axes.relim&quot;&gt;&lt;code&gt;relim&lt;/code&gt;&lt;/a&gt; will not see collections even if the collection was added to the axes with &lt;em&gt;autolim&lt;/em&gt; = True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4e4871836ec22d70606812b76fd91baed7170c" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;matplotlib.axes.axes.relim#matplotlib.axes.Axes.relim&quot;&gt;&lt;code&gt;relim&lt;/code&gt;&lt;/a&gt; will not see collections even if the collection was added to the axes with &lt;em&gt;autolim&lt;/em&gt; = True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3eae2e2792a7b16bed99558776e45bed3c11e30" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;matplotlib.axes.axes.tricontourf#matplotlib.axes.Axes.tricontourf&quot;&gt;&lt;code&gt;tricontourf&lt;/code&gt;&lt;/a&gt; fills intervals that are closed at the top; that is, for boundaries &lt;em&gt;z1&lt;/em&gt; and &lt;em&gt;z2&lt;/em&gt;, the filled region is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fb92bcba681fa01501b23603a66ced1f5e951c" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;matplotlib.pyplot.tricontourf#matplotlib.pyplot.tricontourf&quot;&gt;&lt;code&gt;tricontourf&lt;/code&gt;&lt;/a&gt; fills intervals that are closed at the top; that is, for boundaries &lt;em&gt;z1&lt;/em&gt; and &lt;em&gt;z2&lt;/em&gt;, the filled region is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acf411ab8b32e4d94888d12f48a194530d16a7a" translate="yes" xml:space="preserve">
          <source>Note: This behavior is different from MATLAB's &lt;code&gt;pcolor()&lt;/code&gt;, which always discards the last row and column of &lt;em&gt;C&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c62d59657fe17dc03c40fe13b790a8ed0d77e3" translate="yes" xml:space="preserve">
          <source>Note: This is equivalent to the property &lt;a href=&quot;#matplotlib.figure.Figure.axes&quot;&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3ab239e0e335abf4674b1076b3ba29468b2a75" translate="yes" xml:space="preserve">
          <source>Note: This way of using is discouraged, because the relation between plot elements and labels is only implicit by their order and can easily be mixed up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71eae743000a5bbe13fa33e0cc654688e3f2b661" translate="yes" xml:space="preserve">
          <source>Note: While full format strings are accepted, it is recommended to only specify the color. Line styles are currently ignored (use the keyword argument &lt;em&gt;linestyle&lt;/em&gt; instead). Markers are accepted and plotted on the given positions, however, this is a rarely needed feature for step plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347697be1d5da2dc442c1d2867fc65418d167b4b" translate="yes" xml:space="preserve">
          <source>Note: While it is technically possible to specify valid formats other than color or color and linestyle (e.g. 'rx' or '-.'), this is beyond the intention of the method and will most likely not result in a reasonable reasonable plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04408044844a8b30311ca49414ccb9b66ba6d3d" translate="yes" xml:space="preserve">
          <source>Note: inverting a data axis will correspondingly invert the arrows only with &lt;code&gt;angles='xy'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b58f3540a71311fdf7a2605c2d1aa2b7ce567d" translate="yes" xml:space="preserve">
          <source>Note: plotfile is intended as a convenience for quickly plotting data from flat files; it is not intended as an alternative interface to general plotting with pyplot or matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0ec51f8068b166b7c935fbd07f163eeba19fa7" translate="yes" xml:space="preserve">
          <source>Note: there is no support for removing the artist's legend entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="4876f04b01feb7062d88ad1bcb188b54571e5749" translate="yes" xml:space="preserve">
          <source>Number indicating the first X-axis coordinate of the vertical span rectangle in data units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd129bfdc6d00fab6978e27bafb9caf4ba89461" translate="yes" xml:space="preserve">
          <source>Number indicating the first Y-axis coordinate of the vertical span rectangle in relative Y-axis units (0-1). Default to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9dbdb382effa81812267283d265f8ebf0a65c6" translate="yes" xml:space="preserve">
          <source>Number indicating the second X-axis coordinate of the vertical span rectangle in data units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdc31fc0d6651b4d948e35e63800d68c7c28ed1" translate="yes" xml:space="preserve">
          <source>Number indicating the second Y-axis coordinate of the vertical span rectangle in relative Y-axis units (0-1). Default to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05e3e487a02a4354e7e5f7b989310270504fc8d" translate="yes" xml:space="preserve">
          <source>Number of colors in the colormap to be used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba5a77fed50eafa5eff6925b0d06f5b651c365b" translate="yes" xml:space="preserve">
          <source>Number of columns for the axis to span downwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc68cf1d828872de96af7fabde9e9c238070785" translate="yes" xml:space="preserve">
          <source>Number of data units per arrow length unit, e.g., m/s per plot width; a smaller scale parameter makes the arrow longer. Default is &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ca0631b45a9f1ee4ba47aa128f1a01c8cc7d9f" translate="yes" xml:space="preserve">
          <source>Number of datapoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73918e1fcf345e64dd024467ba8c5ee44a483391" translate="yes" xml:space="preserve">
          <source>Number of days (fraction part represents hours, minutes, seconds) since 0001-01-01 00:00:00 UTC, plus one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb4776e7c90e4a879a553d21e949745935957f3" translate="yes" xml:space="preserve">
          <source>Number of days (fraction part represents hours, minutes, seconds, ms) since 0001-01-01 00:00:00 UTC, plus one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2045e4963dcc983ab0670e56fff2d3c7396e9cc" translate="yes" xml:space="preserve">
          <source>Number of days. The fraction part represents hours, minutes, seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faddf16ea4442c121b3f26a8cee985fe36bb6f4d" translate="yes" xml:space="preserve">
          <source>Number of dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b411b09bf497f3eb2e4f802a41e9fab8f6ffe3a" translate="yes" xml:space="preserve">
          <source>Number of entries in the map. The default is &lt;em&gt;None&lt;/em&gt;, in which case there is one colormap entry for each element in the list of colors. If:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed52162d81a934f128bdeca950f3eec17556355" translate="yes" xml:space="preserve">
          <source>Number of lags to show. If &lt;code&gt;None&lt;/code&gt;, will return all &lt;code&gt;2 * len(x) - 1&lt;/code&gt; lags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c61a5bdfe54e7c1f49e2fea9b81367f18be53fd" translate="yes" xml:space="preserve">
          <source>Number of lags to show. If None, will return all &lt;code&gt;2 * len(x) - 1&lt;/code&gt; lags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3c51dd286a9a4484655735e3e4d5d30995d6c2" translate="yes" xml:space="preserve">
          <source>Number of mouse clicks to accumulate. If negative, accumulate clicks until the input is terminated manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705bb46ccdda03ca21fe8c87a732384d7290f1b0" translate="yes" xml:space="preserve">
          <source>Number of points to show in legend entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ff798aed44b2dd97fa0f36194bf1c48ded37db" translate="yes" xml:space="preserve">
          <source>Number of rows and number of columns of the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05226873d4c2b84264f7c2443041a1293c223b98" translate="yes" xml:space="preserve">
          <source>Number of rows for the axis to span to the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cbe218c2c30de45868ca137dd3a9382ae420bb" translate="yes" xml:space="preserve">
          <source>Number of rows in grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df15c510488a99635dc0561fc094c8e653a16afa" translate="yes" xml:space="preserve">
          <source>Number of rows/columns of the subplot grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f83a8fbe8856331e08aa198aa419eab99863c6" translate="yes" xml:space="preserve">
          <source>Number of seconds to wait before timing out. If zero or negative will never timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b4ec9690e4efafd119d4c7968266d8d9fb2472" translate="yes" xml:space="preserve">
          <source>Number of times the confidence intervals around the median should be bootstrapped (percentile method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb814118910baad459bfe94bbc6976d9ecd8737" translate="yes" xml:space="preserve">
          <source>Number or columns in grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77a252a1d696001b83e2f8f6666651aac349e76" translate="yes" xml:space="preserve">
          <source>Numeric data that defines the arrow colors by colormapping via &lt;em&gt;norm&lt;/em&gt; and &lt;em&gt;cmap&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140042074981cb8c32a309d8bda2000dcc4b673b" translate="yes" xml:space="preserve">
          <source>Numeric data that defines the barb colors by colormapping via &lt;em&gt;norm&lt;/em&gt; and &lt;em&gt;cmap&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1efc296e818415144287f479f7e027d3b092d0" translate="yes" xml:space="preserve">
          <source>Numerical python functions written for compatibility with MATLAB commands with the same names. Most numerical python functions can be found in the &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/index.html#module-numpy&quot;&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/index.html#module-scipy&quot;&gt;&lt;code&gt;scipy&lt;/code&gt;&lt;/a&gt; libraries. What remains here is code for performing spectral computations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1958d44ff84b6aa8e2f869e453dc052497c7c7" translate="yes" xml:space="preserve">
          <source>Object that requested the tool to be triggered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0c5f13b5ed2e6079ca0c83ab728a551fdc4d84" translate="yes" xml:space="preserve">
          <source>Object that wishes to trigger the tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad87c789e4c39c5fa8c68fcfc2af57865c117b1" translate="yes" xml:space="preserve">
          <source>Objects can be joined using &lt;a href=&quot;#matplotlib.cbook.Grouper.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, tested for connectedness using &lt;a href=&quot;#matplotlib.cbook.Grouper.joined&quot;&gt;&lt;code&gt;joined()&lt;/code&gt;&lt;/a&gt;, and all disjoint sets can be retrieved by using the object as an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e1b0395f59b23028f9f50fb58212a6434f10f6" translate="yes" xml:space="preserve">
          <source>Objects passed as &lt;strong&gt;data&lt;/strong&gt; must support item access (&lt;code&gt;data[&amp;lt;arg&amp;gt;]&lt;/code&gt;) and membership test (&lt;code&gt;&amp;lt;arg&amp;gt; in data&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcd34f2564ae342b147437669390d1687a2860a" translate="yes" xml:space="preserve">
          <source>Offset (in pixels) from the &lt;em&gt;xy&lt;/em&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be7db5761a33f54d19dca438eaaff838c04c6c4" translate="yes" xml:space="preserve">
          <source>Offset (in points) from the &lt;em&gt;xy&lt;/em&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c704fb9f23eb8aae19cfd99b431a4e0364fe63db" translate="yes" xml:space="preserve">
          <source>Offset Box with the aux_transform. Its children will be transformed with the aux_transform first then will be offseted. The absolute coordinate of the aux_transform is meaning as it will be automatically adjust so that the left-lower corner of the bounding box of children will be set to (0,0) before the offset transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980b0a12e5e867bce54c02004439fc08cf64ebec" translate="yes" xml:space="preserve">
          <source>Offset of the baseline from the bottom of the image, in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9a2446151469f3f821fbaf9bce26a6f1f95a7a" translate="yes" xml:space="preserve">
          <source>Old attrs simply are forgotten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d22ed5b99b0d698f30e0253a8e913431468e780" translate="yes" xml:space="preserve">
          <source>On Linux,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e2b14be589add863d7281abdff4fdbb37f3932" translate="yes" xml:space="preserve">
          <source>On autoscale, this class picks the best &lt;a href=&quot;#matplotlib.dates.DateLocator&quot;&gt;&lt;code&gt;DateLocator&lt;/code&gt;&lt;/a&gt; to set the view limits and the tick locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2491e317c372f09f43f0d97575912fa5ab654d0" translate="yes" xml:space="preserve">
          <source>On import, the &lt;a href=&quot;#matplotlib.font_manager.FontManager&quot;&gt;&lt;code&gt;FontManager&lt;/code&gt;&lt;/a&gt; singleton instance creates a list of TrueType fonts based on the font properties: name, style, variant, weight, stretch, and size. The &lt;a href=&quot;#matplotlib.font_manager.FontManager.findfont&quot;&gt;&lt;code&gt;findfont()&lt;/code&gt;&lt;/a&gt; method does a nearest neighbor search to find the font that most closely matches the specification. If no good enough match is found, a default font is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48418819e386e4c737704120e1164f8cec6ae3cd" translate="yes" xml:space="preserve">
          <source>On other platforms,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e746daf2502df6c378a2c3477efd6fd0feff019c" translate="yes" xml:space="preserve">
          <source>Once the boxes have been set up, this sends them to output. Since boxes can be inside of boxes inside of boxes, the main work of &lt;a href=&quot;#matplotlib.mathtext.Ship&quot;&gt;&lt;code&gt;Ship&lt;/code&gt;&lt;/a&gt; is done by two mutually recursive routines, &lt;a href=&quot;#matplotlib.mathtext.Ship.hlist_out&quot;&gt;&lt;code&gt;hlist_out()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.mathtext.Ship.vlist_out&quot;&gt;&lt;code&gt;vlist_out()&lt;/code&gt;&lt;/a&gt;, which traverse the &lt;a href=&quot;#matplotlib.mathtext.Hlist&quot;&gt;&lt;code&gt;Hlist&lt;/code&gt;&lt;/a&gt; nodes and &lt;a href=&quot;#matplotlib.mathtext.Vlist&quot;&gt;&lt;code&gt;Vlist&lt;/code&gt;&lt;/a&gt; nodes inside of horizontal and vertical boxes. The global variables used in TeX to store state as it processes have become member variables here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd207312dcf8de4ee6c4f6fa6abb05fb9968069" translate="yes" xml:space="preserve">
          <source>One for each of four connector lines. Two are set with visibility to &lt;em&gt;False&lt;/em&gt;, but the user can set the visibility to True if the automatic choice is not deemed correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc62aa34dbc822c7a62c7b044d4dc57c353a1cb2" translate="yes" xml:space="preserve">
          <source>One limit may be left unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04986fbfc344e3d098145495d000cfd0b607a002" translate="yes" xml:space="preserve">
          <source>One of 'letter', 'legal', 'executive', 'ledger', 'a0' through 'a10', 'b0' through 'b10'. Only supported for postscript output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb2c69ba06da8ef931d4bf4f64e021a9f636d0e" translate="yes" xml:space="preserve">
          <source>One of the following strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475fb7e7e93ed68bb706fe4a5fa31dcf3dd98f71" translate="yes" xml:space="preserve">
          <source>One-way alias only: the getter differs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f2013f2241e6220662671a37e3ef0937e558bf" translate="yes" xml:space="preserve">
          <source>Only handles fully math and fully non-math strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9bc154fa350e38da1de2d400b7701011772ed7" translate="yes" xml:space="preserve">
          <source>Only interactive backends need to reimplement this method and it relies on &lt;a href=&quot;#matplotlib.backend_bases.FigureCanvasBase.flush_events&quot;&gt;&lt;code&gt;flush_events&lt;/code&gt;&lt;/a&gt; being properly implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b607910eae6c5747bfb748dbb42ce4ecd7f3fac" translate="yes" xml:space="preserve">
          <source>Only show &quot;outer&quot; labels and tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b3f9cd84d5161534cd028bc90ca2faa9e0c6c6" translate="yes" xml:space="preserve">
          <source>Only the major ticks are affected. If the method is called when the &lt;a href=&quot;../ticker_api#matplotlib.ticker.ScalarFormatter&quot;&gt;&lt;code&gt;ScalarFormatter&lt;/code&gt;&lt;/a&gt; is not the &lt;a href=&quot;../ticker_api#matplotlib.ticker.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; being used, an &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a05b302a81caf1899c6debbe7a83cb32af2fc53" translate="yes" xml:space="preserve">
          <source>Only used by the SVG renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae256c91621fd97c3dd198b47126fc9550dab542" translate="yes" xml:space="preserve">
          <source>Open a grouping element with label &lt;em&gt;s&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt; (if set) as id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2856762e46a606092999d577c9570a5bf484a7ce" translate="yes" xml:space="preserve">
          <source>Opens a new element. Attributes can be given as keyword arguments, or as a string/string dictionary. The method returns an opaque identifier that can be passed to the &lt;a href=&quot;#matplotlib.backends.backend_svg.XMLWriter.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method, to close all open elements up to and including this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330f02058f15895ddb21ea04dd48ee8bf82b5591" translate="yes" xml:space="preserve">
          <source>Optimize points for projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c41c1fdf0c3ddc6eabafb6b9e5fda0d0fb4058" translate="yes" xml:space="preserve">
          <source>Optional arguments that are passed to the savefig method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d44798f65fe5c7f653771647b6e3374e164de39" translate="yes" xml:space="preserve">
          <source>Optional keys are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba14667f5511bdc02dd0a4d464d5cf771a26e01" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e651d6eb4fd20ca8110299f62e7e325c38fe2b6" translate="yes" xml:space="preserve">
          <source>Optional kwargs (inherited from &lt;a href=&quot;matplotlib.patches.fancyarrow#matplotlib.patches.FancyArrow&quot;&gt;&lt;code&gt;FancyArrow&lt;/code&gt;&lt;/a&gt; patch) control the arrow construction and properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7379546efa7f002d7aeca7372764e92c6c52e15c" translate="yes" xml:space="preserve">
          <source>Optional list (or ndarray) of &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; to align the labels. Default is to align all axes on the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0484b363a29829aff503c1ccfbaea0965c7618b3" translate="yes" xml:space="preserve">
          <source>Optional list (or ndarray) of &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; to align the ylabels. Default is to align all axes on the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeccfb93aad18a1437dc735a2d88c48b595faf1" translate="yes" xml:space="preserve">
          <source>Optional list of (or ndarray) &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; to align the xlabels. Default is to align all axes on the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e879000419f0e4f7336fea58debfb6a827589d1" translate="yes" xml:space="preserve">
          <source>Optional list of all the polygon vertex kinds (code types), as described and used in Path. This is used to allow multiply- connected paths such as holes within filled polygons. If not &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;len(allkinds) == len(allsegs)&lt;/code&gt;. The lists should look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e262c476ff5bcf981c405e1514f193f861d00eff" translate="yes" xml:space="preserve">
          <source>Optional name for the base style to apply to the image test. The test itself can also apply additional styles if desired. Defaults to the '_classic_test' style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e776d4c8b8ab4a431255e0e5665c5c76f6b97760" translate="yes" xml:space="preserve">
          <source>Optional overrides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43055db07305f9751d3ae144406103421a52c847" translate="yes" xml:space="preserve">
          <source>Optional parameters are properties of the class matplotlib.patches.Polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4cf44c4040e97451df87827d4a0bc1f7c78e2f" translate="yes" xml:space="preserve">
          <source>Optionally use a custom &lt;a href=&quot;matplotlib.figure.figure#matplotlib.figure.Figure&quot;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6747ac3a9421c99da770b508aa92f94f0b9f0ce3" translate="yes" xml:space="preserve">
          <source>Optionally, the string may be preceded by a drawstyle, e.g. &lt;code&gt;'steps--'&lt;/code&gt;. See &lt;a href=&quot;#matplotlib.lines.Line2D.set_drawstyle&quot;&gt;&lt;code&gt;set_drawstyle()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac4839afe238152c8e9470ea7060c3e1fd2ef52" translate="yes" xml:space="preserve">
          <source>Optionally, the text can be displayed in another position &lt;em&gt;xytext&lt;/em&gt;. An arrow pointing from the text to the annotated point &lt;em&gt;xy&lt;/em&gt; can then be added by defining &lt;em&gt;arrowprops&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a7e0bc81575b46bc2ccf751ce3e6152d05439d" translate="yes" xml:space="preserve">
          <source>Optionally, you may override the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab89ecd16f183e2e29480da36aaaa8f8dd838a6e" translate="yes" xml:space="preserve">
          <source>Or, instead, simply daisy-chain those calls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc51f496c2794c06e766105c623041c20d13aafc" translate="yes" xml:space="preserve">
          <source>OrRd</source>
          <target state="translated">OrRd</target>
        </trans-unit>
        <trans-unit id="abc1a186af025cc5903ac92d06f128864b58519e" translate="yes" xml:space="preserve">
          <source>Oranges</source>
          <target state="translated">Oranges</target>
        </trans-unit>
        <trans-unit id="6dd320073adecde143ced34a84c4eaa84acd3962" translate="yes" xml:space="preserve">
          <source>Order of scalars is (left, right, bottom, top).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8007c9adb9a8f59a288058ef76bae92ff5643208" translate="yes" xml:space="preserve">
          <source>Original Canvas event or None</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8738f2f42ce8a1aeb24c4df14719029ee727bab" translate="yes" xml:space="preserve">
          <source>Oscilloscope</source>
          <target state="translated">Oscilloscope</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="e807a44f36562fd6a096fc060ddae955e9878a4b" translate="yes" xml:space="preserve">
          <source>Other &lt;em&gt;kwargs&lt;/em&gt; are passed on to &lt;code&gt;Axes.inset_rectangle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6feff3b245d43d7ab7082f63d592d4ee10ff23ef" translate="yes" xml:space="preserve">
          <source>Other &lt;em&gt;kwargs&lt;/em&gt; are passed on to the &lt;code&gt;axes.Axes&lt;/code&gt; child axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091e4895686397101b820be2730af28364c9fb29" translate="yes" xml:space="preserve">
          <source>Other &lt;em&gt;kwargs&lt;/em&gt; are passed on to the rectangle patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faa321ae463cf423d057b0fb19c09b0142f3c2a" translate="yes" xml:space="preserve">
          <source>Other Parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0486de0a79c454aec6c1697e828cc6336feaddd" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.bar#matplotlib.axes.Axes.bar&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.bar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837b50627a50bce68d6877184a40042f3fc80e0f" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.contour#matplotlib.axes.Axes.contour&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.contour&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87e2d0555f00c42ec907c0a80ad699f3cb9d4fa" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.contourf#matplotlib.axes.Axes.contourf&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.contourf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63599feb5220dcce34ba8ff3b3afa4952931926" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2df06bbb4f8398224c138bab650fc4a1fe9271" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.tricontour#matplotlib.axes.Axes.tricontour&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.tricontour&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9069143170b476a9ac3e22db57e185d44482ca56" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;matplotlib.axes.axes.tricontourf#matplotlib.axes.Axes.tricontourf&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.tricontourf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d93dc3b8bd1721c1971086e581b5809ab5fd93a" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;mpl_toolkits.mplot3d.art3d.line3dcollection#mpl_toolkits.mplot3d.art3d.Line3DCollection&quot;&gt;&lt;code&gt;Line3DCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25361b821aea704ca14fce4ab10f002b3b23452b" translate="yes" xml:space="preserve">
          <source>Other arguments are forwarded to &lt;a href=&quot;mpl_toolkits.mplot3d.art3d.poly3dcollection#mpl_toolkits.mplot3d.art3d.Poly3DCollection&quot;&gt;&lt;code&gt;Poly3DCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3306ed4d4b0b69b3b784769413cd63db41098a" translate="yes" xml:space="preserve">
          <source>Other axes to share z-limits with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96033fd095ec5bfcaf9265222c7223e858dcf5f4" translate="yes" xml:space="preserve">
          <source>Other combinations such as &lt;code&gt;[color][marker][line]&lt;/code&gt; are also supported, but note that their parsing may be ambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b582159f8312a083e2786bb7ceab12dad034d94" translate="yes" xml:space="preserve">
          <source>Other keyword arguments are line collection properties. See &lt;a href=&quot;#matplotlib.collections.LineCollection&quot;&gt;&lt;code&gt;LineCollection&lt;/code&gt;&lt;/a&gt; for a list of the valid properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff73d98dbc62076abf127698bc15a8accd9324e" translate="yes" xml:space="preserve">
          <source>Other keyword arguments are line collection properties. See &lt;a href=&quot;../collections_api#matplotlib.collections.LineCollection&quot;&gt;&lt;code&gt;LineCollection&lt;/code&gt;&lt;/a&gt; for a list of the valid properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d69f502697b67c267604fba7d4f36f418059e8a" translate="yes" xml:space="preserve">
          <source>Other keyword arguments are text properties, see &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; for a list of valid text properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba81974e53155ee9e4b8610b593df1c39fc2daef" translate="yes" xml:space="preserve">
          <source>Other keyword parameters of &lt;a href=&quot;#matplotlib.offsetbox.AnchoredOffsetbox&quot;&gt;&lt;code&gt;AnchoredOffsetbox&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fce2e0df195fdbf246ed8c22cbd985dcba4f9c" translate="yes" xml:space="preserve">
          <source>Other keywords may be invented for other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527a4cd03c22ed04a200120bbd5d2ef88a5d18c2" translate="yes" xml:space="preserve">
          <source>Other miscellaneous axes parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328fa980ee1040dc10874788721b34b78eafee28" translate="yes" xml:space="preserve">
          <source>Other miscellaneous schemes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab93843056f851ace9cc26e266c0736f0a45ad6f" translate="yes" xml:space="preserve">
          <source>Other miscellaneous text parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc41149ad389bef102e2faa09093fa790d7d566c" translate="yes" xml:space="preserve">
          <source>Other optional keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133b05b3eb9e079540c1d4da7e9f61a0971c3b4f" translate="yes" xml:space="preserve">
          <source>Other optional kwargs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26792b709b930c3c454854a66b854652b642e5f" translate="yes" xml:space="preserve">
          <source>Other valid kwargs (inherited from &lt;a href=&quot;matplotlib.patches.patch#matplotlib.patches.Patch&quot;&gt;&lt;code&gt;Patch&lt;/code&gt;&lt;/a&gt;) are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0435686dc9ada2298ce64c7d10b53ab8868d2e2" translate="yes" xml:space="preserve">
          <source>Otherwise, a human-readable multi-line string representation of this information is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c3d41a26271abc10f3a8cc72ec9454e972d1f9" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is the absolute distance between &lt;em&gt;size1&lt;/em&gt; and &lt;em&gt;size2&lt;/em&gt;, normalized so that the usual range of font sizes (6pt - 72pt) will lie between 0.0 and 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d6b16bea90a9deb8a4c9418881ab6d597d546f" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is the absolute value of the difference between the CSS numeric values of &lt;em&gt;weight1&lt;/em&gt; and &lt;em&gt;weight2&lt;/em&gt;, normalized between 0.05 and 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848f1b6b7c59883bb4e63e93961a5c48138ca24a" translate="yes" xml:space="preserve">
          <source>Out-of-range RGB(A) values are clipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ce13a125a81174e9ad5578c17bb9a7522d917b" translate="yes" xml:space="preserve">
          <source>Outer radial limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba124f2f5b102f0126b5d171d793bd7413c019f" translate="yes" xml:space="preserve">
          <source>Output pgf commands for drawing the figure so it can be included and rendered in latex documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a285b8f40b7e9cd3d6cf8e6e5b4624dcc242f55c" translate="yes" xml:space="preserve">
          <source>Override axis units by specifying an instance of a &lt;a href=&quot;../units_api#matplotlib.units.ConversionInterface&quot;&gt;&lt;code&gt;matplotlib.units.ConversionInterface&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5931918eba2573ed9ea1b16e62aa98b112be8bcd" translate="yes" xml:space="preserve">
          <source>Override if your font provides multiple sizes of the same symbol. Should return a list of symbols matching &lt;em&gt;sym&lt;/em&gt; in various sizes. The expression renderer will select the most appropriate size for a given situation from this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02911386b01aa78e0c079717b531ae2c02dc2c17" translate="yes" xml:space="preserve">
          <source>Override the output dpi, otherwise use the default associated with the output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80091926ee4da1db48fc747b696c5f38c3979d03" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;minor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00135d715eca97d86df50e16bc56a0e3afab91a8" translate="yes" xml:space="preserve">
          <source>Overrides the standard draw_path to add the shadow offset and necessary color changes for the shadow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16661ed396e2c74fabc920747f3703ae0110a9b4" translate="yes" xml:space="preserve">
          <source>Overview of axes_grid1 toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5966b001c9ff19a702cfed02ba0406ed5e8d853" translate="yes" xml:space="preserve">
          <source>PDF file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c52c68f6ed6ef575f5a924775f04e8ec89f27d" translate="yes" xml:space="preserve">
          <source>PDF name object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c830906d24b7b3369f6e4a90cac11d128f54ec5d" translate="yes" xml:space="preserve">
          <source>PDF operator object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0c26bd26daac022cff3eff2b0e9a4414bfd5c7" translate="yes" xml:space="preserve">
          <source>PDF reference object. Use PdfFile.reserveObject() to create References.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96db07bbccd86f9f0d0b1c9c75a8485842cbf9b1" translate="yes" xml:space="preserve">
          <source>PDF stream object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6980986dc7d32ad6eb03d82b8d8eb5b154a377" translate="yes" xml:space="preserve">
          <source>PRGn</source>
          <target state="translated">PRGn</target>
        </trans-unit>
        <trans-unit id="4a5b8d0297b5edf7490dde24055469c31d055707" translate="yes" xml:space="preserve">
          <source>Packing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd9ba9e18bb11ea10f8e0d24e3ec784ba2bd9b6" translate="yes" xml:space="preserve">
          <source>Pad between the axes. It takes same argument as &lt;em&gt;size&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0796bc2d3412b866cad0970b0374ac4312892945" translate="yes" xml:space="preserve">
          <source>Pad between the frame and the axes (or &lt;em&gt;bbox_to_anchor&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b5b1e258745c7616a96f757617ae67b43b52eb" translate="yes" xml:space="preserve">
          <source>Pad between the text and the frame as fraction of the font size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517bc7852ddc8e7fa7e188bfaacf8f3428c3b290" translate="yes" xml:space="preserve">
          <source>Padding (height/width) between edges of adjacent subplots, as a fraction of the font size. Defaults to &lt;em&gt;pad&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95144099867625ee75f1a6af87586b366069b0b" translate="yes" xml:space="preserve">
          <source>Padding (height/width) between edges of adjacent subplots. Defaults to &lt;em&gt;pad&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407d7d50a7e13525eb76104a831bb9fa571afbac" translate="yes" xml:space="preserve">
          <source>Padding (horizontal pad, vertical pad) in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19af2d8fe833d9ec8684fdce08ffa007463d108f" translate="yes" xml:space="preserve">
          <source>Padding around the child objects, in fraction of the font size. Defaults to 0.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe159942493f70c89cda916f0848c5d22c0bb170" translate="yes" xml:space="preserve">
          <source>Padding around the ellipse, in fraction of the font size. Defaults to 0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52940e0270035b4d6dbe0f0fecb71affc4f90cf2" translate="yes" xml:space="preserve">
          <source>Padding around the label and size bar, in fraction of the font size. Defaults to 0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52989064ff52d5c5b46c2d389770917c47088e3" translate="yes" xml:space="preserve">
          <source>Padding around the labels and arrows, in fraction of the font size. Defaults to 0.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a7edb5ce1d56cf71a3f101c3abb5e4825de790" translate="yes" xml:space="preserve">
          <source>Padding between inset axes and the bbox_to_anchor. Defaults to 0.5. The units are axes font size, i.e. for a default font size of 10 points &lt;em&gt;borderpad = 0.5&lt;/em&gt; is equivalent to a padding of 5 points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c001c4986ab29b71c800b6853980bf9bce0eac16" translate="yes" xml:space="preserve">
          <source>Padding between points in legend entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ddb63c42baa065955e7503cf71605b63c95899" translate="yes" xml:space="preserve">
          <source>Padding between points in legend entry. Default is 0.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902a54ced1868c1ec55ff57b17ca50776711fbd8" translate="yes" xml:space="preserve">
          <source>Padding between text and rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336de6fbf745481d44cd8e8024ff5143817d0435" translate="yes" xml:space="preserve">
          <source>Padding between the figure edge and the edges of subplots, as a fraction of the font size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7138566dd6b14300d38a9ce0466e6ec8c11cc889" translate="yes" xml:space="preserve">
          <source>Padding between the figure edge and the edges of subplots, as a fraction of the font-size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f2b9a0162da2e9c6f5f4d4ab280b00d1d640ef" translate="yes" xml:space="preserve">
          <source>Padding or (horizontal padding, vertical padding) between axes, in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd1b3d40e48bea83e57613d3b6130a2a9eda1a7" translate="yes" xml:space="preserve">
          <source>Paired</source>
          <target state="translated">Paired</target>
        </trans-unit>
        <trans-unit id="733c95796bf0c3b052ff423ab8c5c0bdaaa2f34d" translate="yes" xml:space="preserve">
          <source>Pan axes with left mouse, zoom with right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c891de5bfa3d417e727ea4b520c6984e7f5c8258" translate="yes" xml:space="preserve">
          <source>Pan by &lt;em&gt;numsteps&lt;/em&gt; (can be positive or negative).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c0fbbba54662283d7095bff9ac221eef1f545a" translate="yes" xml:space="preserve">
          <source>Pan numticks (can be positive or negative)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="6d84373353af4c2e52ab0a736dd4087c987ab904" translate="yes" xml:space="preserve">
          <source>Parameter passed to &lt;a href=&quot;matplotlib.axes.axes.autoscale_view#matplotlib.axes.Axes.autoscale_view&quot;&gt;&lt;code&gt;autoscale_view&lt;/code&gt;&lt;/a&gt;. Default is None, for no change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="955c3c13de03020bd8e9ef133255bf97ed420a8f" translate="yes" xml:space="preserve">
          <source>Parametric Curve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7765ed90bf35e2c922fa579f73cdb823c06f9d6" translate="yes" xml:space="preserve">
          <source>Parasite Axes demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b571ed6451f8e85d349243bb5ca9bea5ddcd722e" translate="yes" xml:space="preserve">
          <source>Parasite Simple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2436e6542c704f382fa2b9820cd8ae0a4e58ee58" translate="yes" xml:space="preserve">
          <source>Parasite Simple2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d767f85d8d1b2cbedc384ff2217e178b105fd0d6" translate="yes" xml:space="preserve">
          <source>Parent axes from which space for a new colorbar axes will be stolen. If a list of axes is given they will all be resized to make room for the colorbar axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1becc3a547f63f2362a8d555f0f17c059f84ba" translate="yes" xml:space="preserve">
          <source>Parse expression &lt;em&gt;s&lt;/em&gt; using the given &lt;em&gt;fonts_object&lt;/em&gt; for output, at the given &lt;em&gt;fontsize&lt;/em&gt; and &lt;em&gt;dpi&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4764e04a50e7e3ff1028fd16a61f87c6ba681b6a" translate="yes" xml:space="preserve">
          <source>Parse mathtext string &lt;em&gt;s&lt;/em&gt; and convert it to a (vertices, codes) pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211148855094f9e8d731dc653eb72958f7b546d8" translate="yes" xml:space="preserve">
          <source>Parse the AFM file in file object &lt;em&gt;fh&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f012e4a4f7974f71e431ed23dd7781e49b7ea0c6" translate="yes" xml:space="preserve">
          <source>Parse the given fontconfig &lt;em&gt;pattern&lt;/em&gt; and return a dictionary of key/value pairs useful for initializing a &lt;code&gt;font_manager.FontProperties&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8194751831f95b1806239a5a7d63d0f9e161b9" translate="yes" xml:space="preserve">
          <source>Parse the given math expression &lt;em&gt;s&lt;/em&gt; at the given &lt;em&gt;dpi&lt;/em&gt;. If &lt;em&gt;prop&lt;/em&gt; is provided, it is a &lt;a href=&quot;font_manager_api#matplotlib.font_manager.FontProperties&quot;&gt;&lt;code&gt;FontProperties&lt;/code&gt;&lt;/a&gt; object specifying the &quot;default&quot; font to use in the math expression, used for all non-math text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0fb9534bfddc87aa36f5833f4c8dd5df51a89c" translate="yes" xml:space="preserve">
          <source>Parses a *.enc file referenced from a psfonts.map style file. The format this class understands is a very limited subset of PostScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b39e813958e6e577ee3e2d867be243e0df307fd" translate="yes" xml:space="preserve">
          <source>Pass a &lt;a href=&quot;#matplotlib.backend_bases.CloseEvent&quot;&gt;&lt;code&gt;CloseEvent&lt;/code&gt;&lt;/a&gt; to all functions connected to &lt;code&gt;close_event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73191b7e4fabaf4e2c2c609ce22b75b1d0de19d" translate="yes" xml:space="preserve">
          <source>Pass a &lt;a href=&quot;#matplotlib.backend_bases.DrawEvent&quot;&gt;&lt;code&gt;DrawEvent&lt;/code&gt;&lt;/a&gt; to all functions connected to &lt;code&gt;draw_event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d35c65fe7b83e608592380d4ff49a0fb25d377a" translate="yes" xml:space="preserve">
          <source>Pass a &lt;a href=&quot;#matplotlib.backend_bases.KeyEvent&quot;&gt;&lt;code&gt;KeyEvent&lt;/code&gt;&lt;/a&gt; to all functions connected to &lt;code&gt;key_press_event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfe8c3c379f251cf77f1a15c5b1d73d5b1b4f80" translate="yes" xml:space="preserve">
          <source>Pass a &lt;a href=&quot;#matplotlib.backend_bases.KeyEvent&quot;&gt;&lt;code&gt;KeyEvent&lt;/code&gt;&lt;/a&gt; to all functions connected to &lt;code&gt;key_release_event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e4745e853e4de3efcf8768c4786152f02609ad" translate="yes" xml:space="preserve">
          <source>Pass a &lt;a href=&quot;#matplotlib.backend_bases.ResizeEvent&quot;&gt;&lt;code&gt;ResizeEvent&lt;/code&gt;&lt;/a&gt; to all functions connected to &lt;code&gt;resize_event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8fab9bc8a1ded7024b68f96d722e3b8e963eb3" translate="yes" xml:space="preserve">
          <source>Pass through file objects and context-manage &lt;code&gt;PathLike&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4fdd776df42065616a716acb8038c6f00cefe8" translate="yes" xml:space="preserve">
          <source>Passed as the &lt;em&gt;mode&lt;/em&gt; argument to &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; when &lt;em&gt;fname&lt;/em&gt; is &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.PathLike&quot;&gt;&lt;code&gt;os.PathLike&lt;/code&gt;&lt;/a&gt;; ignored if &lt;em&gt;fname&lt;/em&gt; is file-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bbb10a2f318a3dfa33462784585a6bea183a4e" translate="yes" xml:space="preserve">
          <source>Passed to &lt;a href=&quot;#matplotlib.dates.date2num&quot;&gt;&lt;code&gt;dates.date2num&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9453405ba3a53e71da4817c58fdedb943a464c4a" translate="yes" xml:space="preserve">
          <source>Pastel1</source>
          <target state="translated">Pastel1</target>
        </trans-unit>
        <trans-unit id="33eded30661d7fad1787f06a8d9ba52fb271e513" translate="yes" xml:space="preserve">
          <source>Pastel2</source>
          <target state="translated">Pastel2</target>
        </trans-unit>
        <trans-unit id="5dfc7beeb39ad8bccfa5a405bcde1823b55339c1" translate="yes" xml:space="preserve">
          <source>Patch for arrow labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5428e81e50c8342f2981932f8d5fb43c6f02a2ec" translate="yes" xml:space="preserve">
          <source>Patch properties for the line drawn. Valid arguments include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc69c45c49b796848b3bcd42d8df0c50b57f2e1" translate="yes" xml:space="preserve">
          <source>Patch properties for the line drawn:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224613f4f01cf54e0024e243e64eea57a4f047c8" translate="yes" xml:space="preserve">
          <source>Patch properties for the lines and box drawn:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637c91907a4c609acddab7b09f38bbb14859f9c9" translate="yes" xml:space="preserve">
          <source>Patch properties. Valid arguments include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31785c7e23f8a681681a51eb2976067d9bbcdef0" translate="yes" xml:space="preserve">
          <source>Patch showing the shape bounded by a Bbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc5acd2ae57e84f032e01675fb9be87b895e0b5" translate="yes" xml:space="preserve">
          <source>Patch that allows independent control of the head and tail properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ca2b9eabd9231aafa9f0e7ffe48df4c443d3be" translate="yes" xml:space="preserve">
          <source>PatchCollection</source>
          <target state="translated">PatchCollection</target>
        </trans-unit>
        <trans-unit id="37cd824357f4bef354992ac2f928cf4f8a939bdc" translate="yes" xml:space="preserve">
          <source>Path Editor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc37b7728972a7cf2ef5b9596e2bd9c990737c8" translate="yes" xml:space="preserve">
          <source>Path Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dc9218abf2faf815f9956140e0c675baff9b48" translate="yes" xml:space="preserve">
          <source>Path effects guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c337dfa75eb4180b22e1b82439ab8ceb1908bf4" translate="yes" xml:space="preserve">
          <source>Path for arrow labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7340664f97b61839be4d36af057a32e7fe56fbdd" translate="yes" xml:space="preserve">
          <source>PathPatch object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2579322a65ba04f6e5aa15ca181be8818e26700" translate="yes" xml:space="preserve">
          <source>Patheffect Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214ffd6eeae09b240f9692d77670861056a368a4" translate="yes" xml:space="preserve">
          <source>Paths are considered immutable by this class. Any update to the path's vertices/codes will not trigger a transform recomputation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab0ee5bc5b0f4a19a1f7d24a8da3fed86a910fc" translate="yes" xml:space="preserve">
          <source>Pause for &lt;em&gt;interval&lt;/em&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a5eb1b88f14f0df7f5cb4653a4551d5b98d774" translate="yes" xml:space="preserve">
          <source>Pcolor Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7987f4dfd04336e6a3d046f5f5f19cc3ab3be99f" translate="yes" xml:space="preserve">
          <source>Per RFC section 3.3.10, recurrence instances falling on invalid dates and times are ignored rather than coerced:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616d803712c72bf5a17a42f6c9d3f89b177c7e0e" translate="yes" xml:space="preserve">
          <source>Percentiles as horizontal bar chart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fc032f95509f203a29f2a4d3e1cc744d0fd702" translate="yes" xml:space="preserve">
          <source>Perform setup for writing the movie file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e7442a6e2b318b810565565c22ac0439560bb0" translate="yes" xml:space="preserve">
          <source>Perform the 3D projection for this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdbf07e607054447761f914a2b15faa0eb3bf47" translate="yes" xml:space="preserve">
          <source>Performs only the affine part of this transformation on the given array of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5f3ccdeed2415e4c05e61ac676398df3d18c08" translate="yes" xml:space="preserve">
          <source>Performs only the non-affine part of the transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e46928e0a8d07a56b2687d97ce73a2e29d3f26" translate="yes" xml:space="preserve">
          <source>Performs the transformation on the given array of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f3f5b5ebb375b4158a7c7ccd2ec4405feac6b2" translate="yes" xml:space="preserve">
          <source>Pgf Fonts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207d7855e419d89fe122a6ca80ed363be3a27fc7" translate="yes" xml:space="preserve">
          <source>Pgf Preamble</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d06d5a559e57ccb57d45302f0e7713db1fd252" translate="yes" xml:space="preserve">
          <source>Pgf Texsystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999027c856a352a7fe4fd0730af6cf0c38e21d71" translate="yes" xml:space="preserve">
          <source>PiYG</source>
          <target state="translated">PiYG</target>
        </trans-unit>
        <trans-unit id="8dbf6b9986d35e4e37c9c3639aa1a0a1ee76382a" translate="yes" xml:space="preserve">
          <source>Pick Event Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dae902550ded34aaf6cb3439bc6bbf2f4ff2b90" translate="yes" xml:space="preserve">
          <source>Pick Event Demo2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf373ff4e5a663cfcbb31fc24a2a77400de4fda" translate="yes" xml:space="preserve">
          <source>Pick radius, in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9fd2c59384a6a7edccd71bf1c4570283dbd60d" translate="yes" xml:space="preserve">
          <source>Pick the best locator based on a distance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984b3fa952e53cb102c7bdfd1cd1780485d1b943" translate="yes" xml:space="preserve">
          <source>Pick up the pen and move to the given vertex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fbe8fa5feeb114299f75fbce9ab3d54f4afaad" translate="yes" xml:space="preserve">
          <source>Pie Demo2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79844efe8fd255f20cc33241de961d51c3f0d42d" translate="yes" xml:space="preserve">
          <source>Pipe-based animated gif.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f189eee6d4b95e14b209785ab8720a9b1a06e79e" translate="yes" xml:space="preserve">
          <source>Pipe-based avconv writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b35b88094faf07d1953e6b1966ba05a1c39999" translate="yes" xml:space="preserve">
          <source>Pipe-based ffmpeg writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db31d4e1543fca2398d4b4177b9e87154d8c8d9d" translate="yes" xml:space="preserve">
          <source>Pipong</source>
          <target state="translated">Pipong</target>
        </trans-unit>
        <trans-unit id="e513cd678acb8f8ab2a855f8531b567d67b73367" translate="yes" xml:space="preserve">
          <source>Pixels from lower left corner of axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27f3983c516c01597b8c44e172b53d447f0847b" translate="yes" xml:space="preserve">
          <source>Pixels from the lower left of the figure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5199d1c37d3f3ae4c4bf164c731973c174797fad" translate="yes" xml:space="preserve">
          <source>Place a legend on the axes at location loc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b56880f599514f3f377212b7babba2d87544e86" translate="yes" xml:space="preserve">
          <source>Place a legend on the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab292366fd1160f58a69d348351b593f6ee678b4" translate="yes" xml:space="preserve">
          <source>Place a legend on the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95973c202f6d2b62fb28a1eac0258cc584d6225" translate="yes" xml:space="preserve">
          <source>Place a tick on every multiple of some base number of points plotted, e.g., on every 5th point. It is assumed that you are doing index plotting; i.e., the axis is 0, len(data). This is mainly useful for x ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe15447b4395be0b0a01bd3a1b26f9903d8f6339" translate="yes" xml:space="preserve">
          <source>Place the [0,0] index of the array in the upper left or lower left corner of the axes. The convention 'upper' is typically used for matrices and images. If not given, &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;image.origin&quot;]&lt;/a&gt;&lt;/code&gt; is used, defaulting to 'upper'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fc6ff8d7c66595879f6c7fc0697453b8392705" translate="yes" xml:space="preserve">
          <source>Place ticks on the locations : subs[j] * base**i</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25793b257bfde51125c89da9f92b61e04cd4e41" translate="yes" xml:space="preserve">
          <source>Place vertices with each mouse click, and make the selection by completing the polygon (clicking on the first vertex). Hold the &lt;em&gt;ctrl&lt;/em&gt; key and click and drag a vertex to reposition it (the &lt;em&gt;ctrl&lt;/em&gt; key is not necessary if the polygon has already been completed). Hold the &lt;em&gt;shift&lt;/em&gt; key and click and drag anywhere in the axes to move all vertices. Press the &lt;em&gt;esc&lt;/em&gt; key to start a new polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267e9a866ca23c0581b2c4df0fb4be3d38b9e609" translate="yes" xml:space="preserve">
          <source>Placing Colorbars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f458dff84f6f2c0834bf6a4ab482a9191b36de1" translate="yes" xml:space="preserve">
          <source>Placing text boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b57a68a850fff2023cea8e2bdc1eb3732e1ece7" translate="yes" xml:space="preserve">
          <source>Plot 2D data on 3D plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a669b7d1b5e6df3e77abb5580d193a2552095f" translate="yes" xml:space="preserve">
          <source>Plot 2D or 3D data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c0532d8964a873de6558e3cea6eca31d7f5d7f" translate="yes" xml:space="preserve">
          <source>Plot a 2D field of arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8992a691ead458aab047a8792e5d2281aa5f8596" translate="yes" xml:space="preserve">
          <source>Plot a 2D field of barbs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f798c4c3d13920a234502555231ce97556877893" translate="yes" xml:space="preserve">
          <source>Plot a 3D field of arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200bc32fcc8c4ae6bf498b01d5ee037f1191822d" translate="yes" xml:space="preserve">
          <source>Plot a 3D wireframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb2d4ced83dddc953f4ea405d7e8f8fac492afc" translate="yes" xml:space="preserve">
          <source>Plot a confidence ellipse of a two-dimensional dataset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b25e60c22914cf639aea2da9ae03701507570a3" translate="yes" xml:space="preserve">
          <source>Plot a histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89c62cbb101ff69b9d15b46bebd81663f40a9a4" translate="yes" xml:space="preserve">
          <source>Plot a horizontal bar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f0ef2c40aca7bf3297f0a87fdce1e30472938b" translate="yes" xml:space="preserve">
          <source>Plot a horizontal sequence of rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9cebedbd5a2f4e6995d3568171ddd6462661a2" translate="yes" xml:space="preserve">
          <source>Plot a matrix or an array as an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52807ce53b5700da45014620ae41f51339a536d9" translate="yes" xml:space="preserve">
          <source>Plot a pie chart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30a7f98d5192e6f64508676e8148257571f3046" translate="yes" xml:space="preserve">
          <source>Plot a set of filled voxels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d388ec65e5fbc050fb3dfe469535c6b7cb421718" translate="yes" xml:space="preserve">
          <source>Plot a spectrogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2180c8986f77a1bd9df1b392101fac50b9d386c9" translate="yes" xml:space="preserve">
          <source>Plot a triangulated surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc12e814f0a6b7ffae72b619b339ab6ee0743030" translate="yes" xml:space="preserve">
          <source>Plot a vertical bar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae43c140f3de50905f078bac676e25b108fef3de" translate="yes" xml:space="preserve">
          <source>Plot axes frame with the chart if true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04e0ab0f1f9c5a1cc7cbbd52e68f2296f06401d" translate="yes" xml:space="preserve">
          <source>Plot contours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b296f01d8755c691b92c03863ac47a222984dfd" translate="yes" xml:space="preserve">
          <source>Plot data that contains dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53edd887b6babe161d1268e8cc45c006f71349b7" translate="yes" xml:space="preserve">
          <source>Plot filled polygons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8155a81274117a33f37496be42c03afb8ac5ab52" translate="yes" xml:space="preserve">
          <source>Plot horizontal lines at each &lt;em&gt;y&lt;/em&gt; from &lt;em&gt;xmin&lt;/em&gt; to &lt;em&gt;xmax&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba1416ebb4a843512f9bd75c99d1cdd115e72e6" translate="yes" xml:space="preserve">
          <source>Plot identical parallel lines at the given positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3447c517edbad2bb4313ad4e5005f8da9fb14a" translate="yes" xml:space="preserve">
          <source>Plot the angle spectrum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3992cf45ce791425f3130eacfeaa2afbd99f6f" translate="yes" xml:space="preserve">
          <source>Plot the autocorrelation of &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953833fc5e593d9e9b5f1448ec3908db388d9647" translate="yes" xml:space="preserve">
          <source>Plot the coherence between &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6a5e179cc9d6004294a8528a07a76bcff858dc" translate="yes" xml:space="preserve">
          <source>Plot the coherence between &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;. Coherence is the normalized cross spectral density:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf3ec5acdf318a8aa02eb06fe51710f5322c0a5" translate="yes" xml:space="preserve">
          <source>Plot the cross correlation between &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9610ca74c87a162912be4ccad38c551b41a3a9ab" translate="yes" xml:space="preserve">
          <source>Plot the cross-spectral density.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e332c67576231715d7da6b49b39d1da8e642e3a7" translate="yes" xml:space="preserve">
          <source>Plot the data in a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64e6331631dd93d7056fd4e372d2eeb89b4dfcf" translate="yes" xml:space="preserve">
          <source>Plot the magnitude spectrum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5636899566de9160845e4f5b7a03468bd1ccb754" translate="yes" xml:space="preserve">
          <source>Plot the phase spectrum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2d16029bfb1c933f19f4776a5424cc826710c2" translate="yes" xml:space="preserve">
          <source>Plot the power spectral density.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b57baa16eda053684cb7d4062a4b9ad34caad8f" translate="yes" xml:space="preserve">
          <source>Plot the sparsity pattern of a 2D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ca13843267acc913dd3779a26cf27175c6e40a" translate="yes" xml:space="preserve">
          <source>Plot the values of a 2D matrix or array as color-coded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d88e7bb559c572e687c26e7e017a682ac5d78c" translate="yes" xml:space="preserve">
          <source>Plot vertical lines at each &lt;em&gt;x&lt;/em&gt; from &lt;em&gt;ymin&lt;/em&gt; to &lt;em&gt;ymax&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d7032b013364ad39bb8244ef3985f90a802372" translate="yes" xml:space="preserve">
          <source>Plot vertical lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2e4b69daf28367cf952ea6339e7bb31b42bff9" translate="yes" xml:space="preserve">
          <source>Plot y versus x as lines and/or markers with attached errorbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfe0d1439de55bc0e0efffa4f0658437316ebe9" translate="yes" xml:space="preserve">
          <source>Plot y versus x as lines and/or markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6255a320b26f82245e250108feba320ee1a63ce1" translate="yes" xml:space="preserve">
          <source>Plotfile Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba1fa0822a75d602000b4dccc1772c14b45cf4e" translate="yes" xml:space="preserve">
          <source>Plots using &lt;a href=&quot;#matplotlib.backends.backend_pdf.PdfPages.savefig&quot;&gt;&lt;code&gt;PdfPages.savefig()&lt;/code&gt;&lt;/a&gt; will be written to a file at this location. The file is opened at once and any older file with the same name is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc9e743ce79a65a9431f6acce9aa05cedd03035" translate="yes" xml:space="preserve">
          <source>Plots using &lt;a href=&quot;#matplotlib.backends.backend_pgf.PdfPages.savefig&quot;&gt;&lt;code&gt;PdfPages.savefig()&lt;/code&gt;&lt;/a&gt; will be written to a file at this location. Any older file with the same name is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490ff60c8b2fd4769268c971f091a9d53c49868b" translate="yes" xml:space="preserve">
          <source>Plots with different scales</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1431a1959fe1196c8f4695eb0b5b4cd6d881195" translate="yes" xml:space="preserve">
          <source>Plotting</source>
          <target state="translated">Plotting</target>
        </trans-unit>
        <trans-unit id="54f5394301da3af7517837f4356bda1cf4c1e0a2" translate="yes" xml:space="preserve">
          <source>Plotting categorical variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646613f0a590c5057e20f8a703e9b088d8b98456" translate="yes" xml:space="preserve">
          <source>Plotting the coherence of two signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abc16d4b12ffbfd47f26bb8269059cf59a7ccd3" translate="yes" xml:space="preserve">
          <source>Plotting with keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207f9c729d68c1e98bbd8bebbdfbe3190e6c2be7" translate="yes" xml:space="preserve">
          <source>Points converted to pixels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccad5e08dcddc48d00c207c53582383c95b98b2" translate="yes" xml:space="preserve">
          <source>Points from lower left corner of axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9336c07a5043f4afbca18bff9cf386be110dc1e" translate="yes" xml:space="preserve">
          <source>Points from the lower left of the figure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4473d26f0f78acc34e2944bcd985e3db1cfc6558" translate="yes" xml:space="preserve">
          <source>Polar Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c7673476b20783eeadf2a6fb6e6bb9d16c042b" translate="yes" xml:space="preserve">
          <source>Polar Legend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b8d9ee9d75caa791161de23a5fdd89d9887a44" translate="yes" xml:space="preserve">
          <source>Polar axes do not support zoom boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483df6b26381d50cb5bb27049aa148e62870400c" translate="yes" xml:space="preserve">
          <source>Poly Editor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f684e9760e295383a2e4b0fc41f3dcfdcc3722" translate="yes" xml:space="preserve">
          <source>PolyCollection</source>
          <target state="translated">PolyCollection</target>
        </trans-unit>
        <trans-unit id="d42e00eff978dad3575eba05b5c5f4a11a4d3ec5" translate="yes" xml:space="preserve">
          <source>Polygon Selector Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185b2b9e573c8f760223016188baf65b36db0f42" translate="yes" xml:space="preserve">
          <source>Pong</source>
          <target state="translated">Pong</target>
        </trans-unit>
        <trans-unit id="cdc6665d7b8e9e4c5e734e148f74758b5411b9e4" translate="yes" xml:space="preserve">
          <source>Pop a &lt;a href=&quot;#matplotlib.mathtext.Parser.State&quot;&gt;&lt;code&gt;State&lt;/code&gt;&lt;/a&gt; off of the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e59311899fd71dbcda86baad8009abf96f3ef86" translate="yes" xml:space="preserve">
          <source>Position of the text. For no offset, use &lt;code&gt;xy=(0, 0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde704600cd5facbbcd249054b6f2350d8548406" translate="yes" xml:space="preserve">
          <source>Position of the tool within its group, if -1 it goes at the End</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd4ab8536df00eaeecd448447595ba4e9f07d07" translate="yes" xml:space="preserve">
          <source>Position the label above, below, to the right, to the left of the arrow, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1063519f2b2206f03f7276810bcde3fbbaafeef4" translate="yes" xml:space="preserve">
          <source>Possible values where to place the table relative to the Axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a973c2c34ce13e6086e95a1c9d7e16b3e85f4e" translate="yes" xml:space="preserve">
          <source>Power spectral density using Welch's average periodogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7da060eebd5ee57db2d339635b93604f23e764" translate="yes" xml:space="preserve">
          <source>Precise text layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e36311bbf31bceba32a501c33d22a0f3b1070c8" translate="yes" xml:space="preserve">
          <source>Precision with which to display the number, specified in digits after the decimal point (there will be between one and three digits before the decimal point). If it is None, the formatting falls back to the floating point format '%g', which displays up to 6 &lt;em&gt;significant&lt;/em&gt; digits, i.e. the equivalent value for &lt;em&gt;places&lt;/em&gt; varies between 0 and 5 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b629abedf30d05c7008ffca8fa258c9f0ca2d85" translate="yes" xml:space="preserve">
          <source>Predicate: does the path need to be filled?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b1fa86d170b59f82d697e9b98a19c61bbf76e8" translate="yes" xml:space="preserve">
          <source>Predicate: does the path need to be stroked (its outline drawn)? This tests for the various conditions that disable stroking the path, in which case it would presumably be filled.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
