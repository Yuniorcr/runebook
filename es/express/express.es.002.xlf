<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="express">
    <body>
      <group id="express">
        <trans-unit id="27771c350437291bfc4199d8a18151bdf4220b74" translate="yes" xml:space="preserve">
          <source>The following callback is executed for requests to &lt;code&gt;/secret&lt;/code&gt; whether using GET, POST, PUT, DELETE, or any other HTTP request method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f183a5de5e3641cf6dea5713c604982ebef6c40c" translate="yes" xml:space="preserve">
          <source>The following code is an example of a very basic route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2112d26073621878d92877e16883b0699e34e46c" translate="yes" xml:space="preserve">
          <source>The following code is an example of implementing a very simple template engine for rendering &lt;code&gt;.ntl&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854bf564b7531125ef409382bc5152acb792aa64" translate="yes" xml:space="preserve">
          <source>The following code is an example of routes that are defined for the GET and the POST methods to the root of the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0683f525112e4f9ca9c79be2ffdebe3c222996d3" translate="yes" xml:space="preserve">
          <source>The following example code replicates the middleware system that is shown above for application-level middleware, by using router-level middleware:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc674592472fd34344a233cc2565a1a76b804171" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads a middleware function in it, defines some routes, and mounts the router module on a path in the main app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8df33945f09449cf748cbda26de967201b2596" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads middleware in it, defines some routes, and mounts it on a path on the main app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedad6af7293e1fbecbd439fc94b5500bf411ad5" translate="yes" xml:space="preserve">
          <source>The following example illustrates installing and loading the cookie-parsing middleware function &lt;code&gt;cookie-parser&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fbe352f4fa8ee31f7001ea1b6933d9579c3987" translate="yes" xml:space="preserve">
          <source>The following example illustrates using &lt;code&gt;res.sendFile&lt;/code&gt; to provide fine-grained support for serving files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df7f733b626d181e924fa4ba8bad6adc0bde52b" translate="yes" xml:space="preserve">
          <source>The following example shows how to use body-parsing middleware to populate &lt;code&gt;req.body&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194fd91ca9b0f6ce68763a85171bd1775c53eba9" translate="yes" xml:space="preserve">
          <source>The following example would respond with &lt;code&gt;{ &quot;message&quot;: &quot;hey&quot; }&lt;/code&gt; when the &lt;code&gt;Accept&lt;/code&gt; header field is set to &amp;ldquo;application/json&amp;rdquo; or &amp;ldquo;*/json&amp;rdquo; (however if it is &amp;ldquo;*/*&amp;rdquo;, then the response will be &amp;ldquo;hey&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19f8fc615e192261cd7c29898d3b4f7c2e34ae9" translate="yes" xml:space="preserve">
          <source>The following examples illustrate defining simple routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380794ce66523ed44188fd85a6b21fbfde8e3b05" translate="yes" xml:space="preserve">
          <source>The following figure shows the elements of a middleware function call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862820bceeab2b0882f2ba366cf2bccb81d7ea6d" translate="yes" xml:space="preserve">
          <source>The following method names have been pluralized. In Express 4, using the old methods resulted in a deprecation warning. Express 5 no longer supports them at all:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7c891d7ac1d3cb696999ebf066c1230c0c17a1" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;app.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e4eb3141b906fa57053ab91217e0b8c835a4e5" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;router.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7e14d52d419d2dfe7b26d664e382ff519dfa3f" translate="yes" xml:space="preserve">
          <source>The following snippet illustrates the most simple route definition possible. Express translates the path strings to regular expressions, used internally to match incoming requests. Query strings are &lt;em&gt;not&lt;/em&gt; considered when performing these matches, for example &amp;ldquo;GET /&amp;rdquo; would match the following route, as would &amp;ldquo;GET /?name=tobi&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322afa8c682cc54a48a36b4f79cc9e3a498a30f0" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the &lt;code&gt;options&lt;/code&gt; object. See also the &lt;a href=&quot;#example.of.express.static&quot;&gt;example below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6ded38e758ab87128a3104421456d4e2d163d4" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the optional &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d022061839cfe4ccc4b747ede20bacce929fa7" translate="yes" xml:space="preserve">
          <source>The following table lists Express 3 middleware and their counterparts in Express 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0dc0a712b2f5737feeeecd3c1d50e43fa019da" translate="yes" xml:space="preserve">
          <source>The following table lists application settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c8a2a9021a711c4e6bcbb6a535cddbaa7cddca" translate="yes" xml:space="preserve">
          <source>The following table lists other small but important changes in Express 4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729adb640a1f26923c6692f59e687d97657279bc" translate="yes" xml:space="preserve">
          <source>The following table provides details on the &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e7a0c7d12528c52cb31fc91be69f288ed104ad" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of middleware functions that can be used as the &lt;code&gt;callback&lt;/code&gt; argument to &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;. Even though the examples are for &lt;code&gt;app.use()&lt;/code&gt;, they are also valid for &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8272ae472962abdf7c6f5721b444c7ac41e39794" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of valid &lt;code&gt;path&lt;/code&gt; values for mounting middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a379d1ac7543c2c5d93f03d189bb0f4060bf7bc9" translate="yes" xml:space="preserve">
          <source>The function signature is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d44e667576f6fd0d6e7fed034ced8b5b1daea77" translate="yes" xml:space="preserve">
          <source>The generated app has the following directory structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc0ff633eeb477a04fb93d26af959d8ee4e102" translate="yes" xml:space="preserve">
          <source>The list below enumerates the Express vulnerabilities that were fixed in the specified version update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745b31949705d01311954e795252221d028278c2" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; enables view caching. Set it to &lt;code&gt;true&lt;/code&gt;, to cache the view during development; view caching is enabled in production by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccd8df08d0a6e146210e4565c7219ed71d7baff" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; is reserved for enabling view cache. Set it to &lt;code&gt;true&lt;/code&gt;, if you want to cache view during development; view caching is enabled in production by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb6d2ff33c4f3184c113ca9dc51fd6262ec5cd7" translate="yes" xml:space="preserve">
          <source>The main difference between these two modules is how they save cookie session data. The &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware stores session data on the server; it only saves the session ID in the cookie itself, not session data. By default, it uses in-memory storage and is not designed for a production environment. In production, you&amp;rsquo;ll need to set up a scalable session-store; see the list of &lt;a href=&quot;https://github.com/expressjs/session#compatible-session-stores&quot;&gt;compatible session stores&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1b372bcb81e0289afd1ed3e186dd836f491281" translate="yes" xml:space="preserve">
          <source>The method invokes the callback function &lt;code&gt;fn(err)&lt;/code&gt; when the transfer is complete or when an error occurs. If the callback function is specified and an error occurs, the callback function must explicitly handle the response process either by ending the request-response cycle, or by passing control to the next route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcc129b584cc9823eb78eff32f3c1cb0ff56262" translate="yes" xml:space="preserve">
          <source>The method, &lt;code&gt;app.all()&lt;/code&gt;, is not derived from any HTTP method and loads middleware at the specified path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For more information, see &lt;a href=&quot;#app.all&quot;&gt;app.all&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8493250a5bdf079e195f274e6e913153c67d104" translate="yes" xml:space="preserve">
          <source>The methods on the response object (&lt;code&gt;res&lt;/code&gt;) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d7588188297d2d65c1b8248fcd338d1d8b81a4" translate="yes" xml:space="preserve">
          <source>The middleware can now be used as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a80788e900a2a6d84f06c8627ba0cd7b74a0ee" translate="yes" xml:space="preserve">
          <source>The middleware function &lt;code&gt;myLogger&lt;/code&gt; simply prints a message, then passes on the request to the next middleware function in the stack by calling the &lt;code&gt;next()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c8ac0886d198b91e9077bed48289509283d123" translate="yes" xml:space="preserve">
          <source>The middleware function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d705aa13e658f2ea9de1b55df20df09589e9ac" translate="yes" xml:space="preserve">
          <source>The middleware returned by the function decides the behavior of what happens when a URL parameter is captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14d24eb4ee9d1ad43138aef6c20de0afde95848" translate="yes" xml:space="preserve">
          <source>The migration process is complete, and the app is now an Express 4 app. To confirm, start the app by using the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63a9d0c9071d0d38f70bbfe0ce6caf6da86ec36" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Express and other Node.js applications are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09698134b122c0ffff93c5c25f39cbb42fa728d6" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Node are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea6ff6794091a677adaf97c0608a3c275772d58" translate="yes" xml:space="preserve">
          <source>The name of route parameters must be made up of &amp;ldquo;word characters&amp;rdquo; ([A-Za-z0-9_]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3769b527bb8624b7887fa5dc2bf5b6c49ca51e94" translate="yes" xml:space="preserve">
          <source>The name of the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b62beade8625118367581cd1f9b6bbaf8702af3" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;app.route()&lt;/code&gt; method enables you to create chainable route handlers for a route path. Because the path is specified in a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see &lt;a href=&quot;../index#router&quot;&gt;&lt;code&gt;Router()&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a6a5833f67253c478510a4917e0deee66501ce" translate="yes" xml:space="preserve">
          <source>The next layer of reliability is to ensure that your app restarts when the server restarts. Systems can still go down for a variety of reasons. To ensure that your app restarts if the server crashes, use the init system built into your OS. The two main init systems in use today are &lt;a href=&quot;https://wiki.debian.org/systemd&quot;&gt;systemd&lt;/a&gt; and &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;Upstart&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc06a7949dfa84edd4397fc3dcab3611d8683e6c" translate="yes" xml:space="preserve">
          <source>The number of dot-separated parts of the host to remove to access subdomain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94be16c086d5530b471614800979016aaa69e7d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument is supported by Express v4.16.0 onwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d2bdfa9db85f99caefb5b5e21fc49e1332176e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument passes through to the underlying &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; call, and takes the exact same parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730ddf9384d35b501405cb3bb361b853fea7b60b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; parameter specifies the behavior of the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b01c9fe98918094f83127af0c6de4c5af3dd7a4" translate="yes" xml:space="preserve">
          <source>The order in which you define middleware with &lt;code&gt;router.use()&lt;/code&gt; is very important. They are invoked sequentially, thus the order defines middleware precedence. For example, usually a logger is the very first middleware you would use, so that every request gets logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928c48d6dbd0dcf89cf48ee881b21b3dddb2678b" translate="yes" xml:space="preserve">
          <source>The order of middleware loading is important: middleware functions that are loaded first are also executed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8fef2dda6e310a3561720d3d648f13d663e8af" translate="yes" xml:space="preserve">
          <source>The other feature that helps to organize routes is a new class, &lt;code&gt;express.Router&lt;/code&gt;, that you can use to create modular mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336fcb00801481f781e66eb98b3b9c9500dc2194" translate="yes" xml:space="preserve">
          <source>The parameter can be any JSON type, including object, array, string, Boolean, or number, and you can also use it to convert other values to JSON, such as &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt; (although these are technically not valid JSON).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74624806a6d45e120df27881778e7a6fc9c9286" translate="yes" xml:space="preserve">
          <source>The parameters of the callback function are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b9471cdfcef206ff7bec325d770ad0eed900e0" translate="yes" xml:space="preserve">
          <source>The path for which the middleware function is invoked; can be any of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb90f07dac6f867c04a4bc720cde4444d7253fd" translate="yes" xml:space="preserve">
          <source>The routing system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c938e6d78d20e713ee6d52559f43a38ccf487d" translate="yes" xml:space="preserve">
          <source>The signature of the function is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab81e1bad3146fc4bccfb542a97be989f42ff828" translate="yes" xml:space="preserve">
          <source>The simple query parser is based on Node&amp;rsquo;s native query parser, &lt;a href=&quot;http://nodejs.org/api/querystring.html&quot;&gt;querystring&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8eee6339ec1006a47a22c850013a5b158772d7" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&amp;ldquo;production&amp;rdquo;&lt;/em&gt; refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers. In contrast, in the &lt;em&gt;&amp;ldquo;development&amp;rdquo;&lt;/em&gt; stage, you&amp;rsquo;re still actively writing and testing code, and the application is not open to external access. The corresponding system environments are known as &lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt; environments, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfd5f3fd1531af155b8fa89b622ca06a7b2e418" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;express&lt;/code&gt; object has a &lt;a href=&quot;#express.router&quot;&gt;Router()&lt;/a&gt; method that creates a new &lt;code&gt;router&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6bd02109d9c9ba4f8073cc245d97c7a45a1128" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;http://expressjs.com/en/api.html#req.hostname&quot;&gt;req.hostname&lt;/a&gt; is derived from the value set in the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header, which can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ca029ce98ea4b9224656043b13bdef9b1564fc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b16790690d51857f362e0bfe828daf1acc0af9" translate="yes" xml:space="preserve">
          <source>The way you define routes is unchanged, but the routing system has two new features to help organize your routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33214671538150f77e53cdf9f7e4b84e8a56e09e" translate="yes" xml:space="preserve">
          <source>Then create a route to render the &lt;code&gt;index.pug&lt;/code&gt; file. If the &lt;code&gt;view engine&lt;/code&gt; property is not set, you must specify the extension of the &lt;code&gt;view&lt;/code&gt; file. Otherwise, you can omit it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c82585775e5cad2aff928e1d12e385a6813cb7b" translate="yes" xml:space="preserve">
          <source>Then install dependencies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b11d4df9e46cf7f12bdddd1817579121eab0ef0" translate="yes" xml:space="preserve">
          <source>Then install the corresponding template engine npm package; for example to install Pug:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60ca4b8e3d0c2392c17476bd9bab2d79bc35dac" translate="yes" xml:space="preserve">
          <source>Then load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in your browser to access the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fae67f35e1ce6760152544dd2e31157d5b0e646" translate="yes" xml:space="preserve">
          <source>Then run the service with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dd8ce3d1564d3cfff7bf8cfdbc99c375c37583" translate="yes" xml:space="preserve">
          <source>Then start the service with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1344d5024e8280dc94dd2c532c5d9f9c43d785a" translate="yes" xml:space="preserve">
          <source>Then to use it in your code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f8a4a914369f83038f069eb0a65844df12fc30" translate="yes" xml:space="preserve">
          <source>Then, create the following route in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7200e6f2f424015df41973313013765338beb3c1" translate="yes" xml:space="preserve">
          <source>Then, load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in a browser to see the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065e8d6b87455fea692b5996a0909443c140cc4e" translate="yes" xml:space="preserve">
          <source>Then, load the router module in the app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13fd315b2fad8692cf76eae1dd6e29885611d35" translate="yes" xml:space="preserve">
          <source>Then, remove invalid code, load the required middleware, and make other changes as necessary. The &lt;code&gt;app.js&lt;/code&gt; file will look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991a23aae9cdfdc87568b871e83b58064a39c63c" translate="yes" xml:space="preserve">
          <source>There are several significant changes in Express 4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1af7fc5f124707d3d486f9e632314f3b36c58c" translate="yes" xml:space="preserve">
          <source>There are two main middleware cookie session modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f758c1cf6d4c8cb9e9cd51e5dec0ee41ce2374f" translate="yes" xml:space="preserve">
          <source>There are two ways to use init systems with your Express app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9351e9914c8bc586d41c0c4a01832839a34f310b" translate="yes" xml:space="preserve">
          <source>There is a special routing method, &lt;code&gt;app.all()&lt;/code&gt;, used to load middleware functions at a path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For example, the following handler is executed for requests to the route &amp;ldquo;/secret&amp;rdquo; whether using GET, POST, PUT, DELETE, or any other HTTP request method supported in the &lt;a href=&quot;https://nodejs.org/api/http.html#http_http_methods&quot;&gt;http module&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1d6dc8e632f8aa86480e78f1c3005fddd15f8b" translate="yes" xml:space="preserve">
          <source>There is no definitive answer to this question. The answer depends on the scale of your application and the team that is involved. To be as flexible as possible, Express makes no assumptions in terms of structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b9dd413da07edf287e7fe6981e9b8f72c900c9" translate="yes" xml:space="preserve">
          <source>These database drivers are among many that are available. For other options, search on the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bb054abe760f22530355254d09281008974ff3" translate="yes" xml:space="preserve">
          <source>These routing methods specify a callback function (sometimes called &amp;ldquo;handler functions&amp;rdquo;) called when the application receives a request to the specified route (endpoint) and HTTP method. In other words, the application &amp;ldquo;listens&amp;rdquo; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46d47c06c7d915c40e70255eb957409610468fd" translate="yes" xml:space="preserve">
          <source>Things to do in your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a235dc03a74ce9e2751a9a72025475f40ce97169" translate="yes" xml:space="preserve">
          <source>Things to do in your code (the dev part):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6a2a16dd07c4b465cbbb29719ced0eb4bc6db6" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699cb6d5b2493ef4b92f01b495acbdc09f859a81" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup (the ops part):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559a5f7f0ea436d823c1ba60e07a18a0dfdabe73" translate="yes" xml:space="preserve">
          <source>Think of &lt;code&gt;app.render()&lt;/code&gt; as a utility function for generating rendered view strings. Internally &lt;code&gt;res.render()&lt;/code&gt; uses &lt;code&gt;app.render()&lt;/code&gt; to render views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7780493a98e511acb8e937e221168d4665a10" translate="yes" xml:space="preserve">
          <source>Third-party middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75cab7683b144c5a84f60e5a14ef4dbf7592d5b" translate="yes" xml:space="preserve">
          <source>Third-party solution: terminus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee732985d852e0a58e1362f30062069245ba8f74" translate="yes" xml:space="preserve">
          <source>This app starts a server and listens on port 3000 for connections. The app responds with &amp;ldquo;Hello World!&amp;rdquo; for requests to the root URL (&lt;code&gt;/&lt;/code&gt;) or &lt;em&gt;route&lt;/em&gt;. For every other path, it will respond with a &lt;strong&gt;404 Not Found&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36efd58e9596ed2d83d3910f938e1f6d51e40a6a" translate="yes" xml:space="preserve">
          <source>This approach re-uses the single &lt;code&gt;/users/:user_id&lt;/code&gt; path and adds handlers for various HTTP methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f640bcd1b157d93a815d6bfb75ed7442c38f34" translate="yes" xml:space="preserve">
          <source>This article covers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9516eb72662bc86c4292c21dba5f6a5bbbe2d51" translate="yes" xml:space="preserve">
          <source>This article discusses performance and reliability best practices for Express applications deployed to production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b49bbbcdc2e9fa9a985699da5173951223f7fb" translate="yes" xml:space="preserve">
          <source>This can also be configured within a PM2 process file (&lt;code&gt;ecosystem.config.js&lt;/code&gt; or similar) by setting &lt;code&gt;exec_mode&lt;/code&gt; to &lt;code&gt;cluster&lt;/code&gt; and &lt;code&gt;instances&lt;/code&gt; to the number of workers to start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae431e3803edf6da1aa164607df8bd9bf2b05bfb" translate="yes" xml:space="preserve">
          <source>This command prompts you for a number of things, such as the name and version of your application. For now, you can simply hit RETURN to accept the defaults for most of them, with the following exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566bc7ee678acbf385a283af7180d512ebfb19ea" translate="yes" xml:space="preserve">
          <source>This command will run the script in daemon mode (in the background).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d477748b97bf167d282df7ffa9a1891cca0c1a" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function mounted on the &lt;code&gt;/user/:id&lt;/code&gt; path. The function is executed for any type of HTTP request on the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5c2cbfa770a96f4b141b6897a34db0dbc7535c" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function with no mount path. The function is executed every time the app receives a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cefc3f75f01437fc9cc6427cd73ab2845d6b98e" translate="yes" xml:space="preserve">
          <source>This example shows a middleware sub-stack that handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8016d96e4d65b50f07562de145ce0bdf0e1399" translate="yes" xml:space="preserve">
          <source>This example shows a route and its handler function (middleware system). The function handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90a6b0044a0af85a69597582e3ab719a3739104" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbe82504369c95b9102307a8cf4f3e2d3176028" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bc77ae6bbabb233725459b0510c827a0610701" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It serves static files and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f181e2c6c39faa736cc2ef98a667cf8cfea26f" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;json&lt;/code&gt;), a mime type (like &lt;code&gt;application/json&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;*/json&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676612b8539e51a6459e419fd9a06c46e6bcca17" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;urlencoded&lt;/code&gt;), a mime type (like &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/x-www-form-urlencoded&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed47c755eaa7b19095ecd45a3de07ddd5f8ca6ec" translate="yes" xml:space="preserve">
          <source>This method is extremely useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you placed the following route at the top of all other route definitions, it would require that all routes from that point on would require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end points; &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838e5b05a805cfc293c010b0fc4905f0f167264e" translate="yes" xml:space="preserve">
          <source>This method is just like the &lt;code&gt;router.METHOD()&lt;/code&gt; methods, except that it matches all HTTP methods (verbs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90c875b757be730a3772a4a27392d7b09e9be19" translate="yes" xml:space="preserve">
          <source>This method is like the standard &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD()&lt;/a&gt; methods, except it matches all HTTP verbs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf56cb52c0c76c96a67f1f83f961a6e9c0378047" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt;. A simple example and use case is described below. See &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00076ed1b4d5e7715ecdc20b994b41c690eae8d3" translate="yes" xml:space="preserve">
          <source>This method now enforces asynchronous behavior for all view engines, avoiding bugs caused by view engines that had a synchronous implementation and that violated the recommended interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1a6c0a79f9dcc510d5992813a536810c87f5c8" translate="yes" xml:space="preserve">
          <source>This method performs many useful tasks for simple non-streaming responses: For example, it automatically assigns the &lt;code&gt;Content-Length&lt;/code&gt; HTTP response header field (unless previously defined) and provides automatic HEAD and HTTP cache freshness support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49116002c4bfce97e880a28a9dd031fcfa18e6e9" translate="yes" xml:space="preserve">
          <source>This middleware is available in Express v4.16.0 onwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56e031c5c7795accd8ffe8cb03cb1c8fe9da732" translate="yes" xml:space="preserve">
          <source>This option allows to choose between parsing the URL-encoded data with the &lt;code&gt;querystring&lt;/code&gt; library (when &lt;code&gt;false&lt;/code&gt;) or the &lt;code&gt;qs&lt;/code&gt; library (when &lt;code&gt;true&lt;/code&gt;). The &amp;ldquo;extended&amp;rdquo; syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please &lt;a href=&quot;https://www.npmjs.org/package/qs#readme&quot;&gt;see the qs library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a0c97a43cb8e3078822cc255b6382a146c2671" translate="yes" xml:space="preserve">
          <source>This option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, an error will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3efb98930e470bc9733bc6f117eafc912ee9e2" translate="yes" xml:space="preserve">
          <source>This option, if supplied, is called as &lt;code&gt;verify(req, res, buf, encoding)&lt;/code&gt;, where &lt;code&gt;buf&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; of the raw request body and &lt;code&gt;encoding&lt;/code&gt; is the encoding of the request. The parsing can be aborted by throwing an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c46f7597dea04c7cf428ffaf0e872629e37804" translate="yes" xml:space="preserve">
          <source>This potentially confusing and dangerous method of retrieving form data has been removed. You will now need to specifically look for the submitted parameter name in the &lt;code&gt;req.params&lt;/code&gt;, &lt;code&gt;req.body&lt;/code&gt;, or &lt;code&gt;req.query&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c30d6396be263e9272d62be76ccbb0f7258e52a" translate="yes" xml:space="preserve">
          <source>This property holds a reference to the instance of the Express application that is using the middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4639436b062fc694302176c104048361b091b002" translate="yes" xml:space="preserve">
          <source>This property is an object containing a property for each query string parameter in the route. If there is no query string, it is the empty object, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b585f1ffae7c231195df5813092e052b4259dc" translate="yes" xml:space="preserve">
          <source>This property is an object containing properties mapped to the &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;named route &amp;ldquo;parameters&amp;rdquo;&lt;/a&gt;. For example, if you have the route &lt;code&gt;/user/:name&lt;/code&gt;, then the &amp;ldquo;name&amp;rdquo; property is available as &lt;code&gt;req.params.name&lt;/code&gt;. This object defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1044dd424ff21196f0650d68bea91e62c630e482" translate="yes" xml:space="preserve">
          <source>This property is much like &lt;code&gt;req.url&lt;/code&gt;; however, it retains the original request URL, allowing you to rewrite &lt;code&gt;req.url&lt;/code&gt; freely for internal routing purposes. For example, the &amp;ldquo;mounting&amp;rdquo; feature of &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; will rewrite &lt;code&gt;req.url&lt;/code&gt; to strip the mount point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0289192a83596cb79a0734069985a1b8903bac8" translate="yes" xml:space="preserve">
          <source>This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abc0f802a527da9953fd7611de9ae3cf7df10a0" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;/abe&lt;/code&gt; and &lt;code&gt;/abcde&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60052f35a103754e81aa05e013591352e892bb44" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abbcd&lt;/code&gt;, &lt;code&gt;abbbcd&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ff5af1cd371d50fc340a9f4c567cc1c94a391d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abxcd&lt;/code&gt;, &lt;code&gt;abRANDOMcd&lt;/code&gt;, &lt;code&gt;ab123cd&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0f177459664773b537fa28909645541fe435b4" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;acd&lt;/code&gt; and &lt;code&gt;abcd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f073528ec1f551c90a8b35f9a8eaa3ac640a80d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;butterfly&lt;/code&gt; and &lt;code&gt;dragonfly&lt;/code&gt;, but not &lt;code&gt;butterflyman&lt;/code&gt;, &lt;code&gt;dragonflyman&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbd74a88b38190f0ef1d961e49022795a361e44" translate="yes" xml:space="preserve">
          <source>This route path will match anything with an &amp;ldquo;a&amp;rdquo; in it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfcc9e95077df3c0fc6c31f30437e8b2663d6d1" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/about&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58387bf487afa1113753e71a0cae2b0212feacf2" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/random.text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a598c25ea684b94de3293e017b1e83e69a0c04" translate="yes" xml:space="preserve">
          <source>This route path will match requests to the root route, &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7368005de74370f3529bb041a70e104f947f5f30" translate="yes" xml:space="preserve">
          <source>This should not affect your code if you follow the Express 4 documentation of &lt;a href=&quot;../index#app.param&quot;&gt;app.param&lt;/a&gt;, as it makes no mention of the leading colon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe79a028de6351d5457903e4ee44238b7ce90b8f" translate="yes" xml:space="preserve">
          <source>This topic clearly falls into the &amp;ldquo;devops&amp;rdquo; world, spanning both traditional development and operations. Accordingly, the information is divided into two parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec4fd32478986815d2f0fa47a088b06e395b391" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that an instance of &lt;code&gt;express&lt;/code&gt; named &lt;code&gt;app&lt;/code&gt; is created and the server is running. If you are not familiar with creating an app and starting it, see the &lt;a href=&quot;hello-world&quot;&gt;Hello world example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01ef283da347650a3411bb7e58d7d617b48d0d9" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abc` and `/xyz`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b781798be2a4f0d248c0a4ba715440d0a3f01f" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd` and `/abd`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bfff599c45ed15caa41cf6f665f414c21cedbe" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abbcd`, `/abbbbbcd`, and so on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50988b7ce5ab1e9d8a8a7408d1b628bc70fd1c11" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abxcd`, `/abFOOcd`, `/abbArcd`, and so on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637082278ad75872c412668b93aecbf4244b500e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/xyza`, `/lmn`, and `/pqr`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1070fae6f19aa324457a0bc087a38ad9c08e740b" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2462d9dc5f5bcd31e6573510daecb10e95bf162e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/ad` and `/abcd`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1c503406001fbdd2189da2b95349ba7b42b622" translate="yes" xml:space="preserve">
          <source>To avoid this problem, use generic cookie names; for example using &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70de49e4beafd96bc96b83e88468c789f24fc8de" translate="yes" xml:space="preserve">
          <source>To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the &lt;code&gt;express.static&lt;/code&gt; function, &lt;a href=&quot;../index#app.use&quot;&gt;specify a mount path&lt;/a&gt; for the static directory, as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b534121b9c7593a6d1cfea749627d520a71e95" translate="yes" xml:space="preserve">
          <source>To define routes with route parameters, simply specify the route parameters in the path of the route as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764c26101974c824af2f1da1b98284a5b20afc68" translate="yes" xml:space="preserve">
          <source>To enable cluster mode, start your application like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f96dd4baffb52d50feb8c73808a2be59f65dbc4" translate="yes" xml:space="preserve">
          <source>To ensure cookies don&amp;rsquo;t open your app to exploits, don&amp;rsquo;t use the default session cookie name and set cookie security options appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790e51c14fc23369f47b40e4a8ffc841bb32158c" translate="yes" xml:space="preserve">
          <source>To ensure you handle all exceptions, use the following techniques:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41609a57e3ab7975f4c451831acbc047c0f0d51b" translate="yes" xml:space="preserve">
          <source>To get rid of the &lt;code&gt;www&lt;/code&gt; directory and keep things the &amp;ldquo;Express 3 way&amp;rdquo;, delete the line that says &lt;code&gt;module.exports = app;&lt;/code&gt; at the end of the &lt;code&gt;app.js&lt;/code&gt; file, then paste the following code in its place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1beb29a2014abbed3c385925bdbf252eca04a20" translate="yes" xml:space="preserve">
          <source>To have more control over the exact string that can be matched by a route parameter, you can append a regular expression in parentheses (&lt;code&gt;()&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a80b2ecde7d262e30f3f506adb50320479a603" translate="yes" xml:space="preserve">
          <source>To install Express temporarily and not add it to the dependencies list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800782a4da9a7253ba3eb71924b97cc3c7c9cb09" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as a systemd service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0b9acbd1f9e6bc422b6fd6713f7383d422aad4" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as an Upstart 1.4 service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296a4bfe6e60b561d69a5e0bb6146cfa46c308e8" translate="yes" xml:space="preserve">
          <source>To install the latest alpha and to preview Express 5, enter the following command in your application root directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d0608cd352d5c2fc87e0effe600a7a27ed50be" translate="yes" xml:space="preserve">
          <source>To learn more about how template engines work in Express, see: &lt;a href=&quot;../advanced/developing-template-engines&quot;&gt;&amp;ldquo;Developing template engines for Express&amp;rdquo;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80176cd042205531cb13f4f13f0e26b951ab32e" translate="yes" xml:space="preserve">
          <source>To load the middleware function, call &lt;code&gt;app.use()&lt;/code&gt;, specifying the middleware function. For example, the following code loads the &lt;code&gt;myLogger&lt;/code&gt; middleware function before the route to the root path (/).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6662fbd38726ccc12e34e964bac507fe1bcba315" translate="yes" xml:space="preserve">
          <source>To remove an app from PM2&amp;rsquo;s registry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2564c5b3f834d0b8f7af686a29a177bc783fa61d" translate="yes" xml:space="preserve">
          <source>To remove an app from management:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bc3d4f8d4358cbbff256367a0f328d858c7959" translate="yes" xml:space="preserve">
          <source>To render template files, set the following &lt;a href=&quot;../index#app.set&quot;&gt;application setting properties&lt;/a&gt;, set in &lt;code&gt;app.js&lt;/code&gt; in the default app created by the generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0f6cf6c5f8b764d50004f97817954f3166b8f0" translate="yes" xml:space="preserve">
          <source>To route methods that translate to invalid JavaScript variable names, use the bracket notation. For example, &lt;code&gt;app['m-search']('/', function ...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7f7e3a4de3894abfdc8caee99a8babab1d31c1" translate="yes" xml:space="preserve">
          <source>To run the script so that it is attached to the terminal, omit &lt;code&gt;start&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552cb19dd03b77d93dc0d30ab216d99368217be4" translate="yes" xml:space="preserve">
          <source>To see all the internal logs used in Express, set the &lt;code&gt;DEBUG&lt;/code&gt; environment variable to &lt;code&gt;express:*&lt;/code&gt; when launching your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89a30d4aa5c388c56654c4b5aaf14746777f571" translate="yes" xml:space="preserve">
          <source>To see the logs only from the router implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:router&lt;/code&gt;. Likewise, to see logs only from the application implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:application&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9d240c057bf8c5ec5baf7229fa37ab9ca10595" translate="yes" xml:space="preserve">
          <source>To serve static files such as images, CSS files, and JavaScript files, use the &lt;code&gt;express.static&lt;/code&gt; built-in middleware function in Express.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0b3ce1769ca1c370ce68ad18599938d1dc28d2" translate="yes" xml:space="preserve">
          <source>To skip the rest of the middleware functions from a router middleware stack, call &lt;code&gt;next('route')&lt;/code&gt; to pass control to the next route. &lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;next('route')&lt;/code&gt; will work only in middleware functions that were loaded by using the &lt;code&gt;app.METHOD()&lt;/code&gt; or &lt;code&gt;router.METHOD()&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d814e6b9633e4adf25443034eb37fa975c489ba" translate="yes" xml:space="preserve">
          <source>To skip the rest of the router&amp;rsquo;s middleware functions, call &lt;code&gt;next('router')&lt;/code&gt; to pass control back out of the router instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd544db021bd5efb6f3f66fe83d3d7692f80e2c9" translate="yes" xml:space="preserve">
          <source>To start a script, use the &lt;code&gt;forever start&lt;/code&gt; command and specify the path of the script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b352b5d51736731ab31821097fa398fcf08a1edc" translate="yes" xml:space="preserve">
          <source>To stop a script that was started by Forever use the &lt;code&gt;forever stop&lt;/code&gt; command and specify the process index (as listed by the &lt;code&gt;forever list&lt;/code&gt; command).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fb7872e3f4f0c650e76255b149f3bbe68bc286" translate="yes" xml:space="preserve">
          <source>To stop all the scripts that were started by Forever:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5ca602885d49606c457d484a3453c0e237c01f" translate="yes" xml:space="preserve">
          <source>To use multiple static assets directories, call the &lt;code&gt;express.static&lt;/code&gt; middleware function multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f2d2b7be73a7a1089185b391b590a70ad34810" translate="yes" xml:space="preserve">
          <source>To view detailed information about an app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77340b9ee0ab1bcf2bc1e395c700959f0330134e" translate="yes" xml:space="preserve">
          <source>To view the list of scripts that were started by Forever:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813595a271258afbaaf456e614a60924bc719e61" translate="yes" xml:space="preserve">
          <source>Transfers the file at &lt;code&gt;path&lt;/code&gt; as an &amp;ldquo;attachment&amp;rdquo;. Typically, browsers will prompt the user for download. By default, the &lt;code&gt;Content-Disposition&lt;/code&gt; header &amp;ldquo;filename=&amp;rdquo; parameter is &lt;code&gt;path&lt;/code&gt; (this typically appears in the browser dialog). Override this default with the &lt;code&gt;filename&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1110c972c4b1318fb6f953698f8f57f1408e54f" translate="yes" xml:space="preserve">
          <source>Transfers the file at the given &lt;code&gt;path&lt;/code&gt;. Sets the &lt;code&gt;Content-Type&lt;/code&gt; response HTTP header field based on the filename&amp;rsquo;s extension. Unless the &lt;code&gt;root&lt;/code&gt; option is set in the options object, &lt;code&gt;path&lt;/code&gt; must be an absolute path to the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e32a089aa2349ed04cb819b16b721bcf1ec543a" translate="yes" xml:space="preserve">
          <source>Trust the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba4c13364dc9fbd26f7d827764a19c0630616ba" translate="yes" xml:space="preserve">
          <source>Trust the &lt;code&gt;n&lt;/code&gt;th hop from the front-facing proxy server as the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e592f92fad96eb3037716c43aee515afb5488e" translate="yes" xml:space="preserve">
          <source>Try-catch is a JavaScript language construct that you can use to catch exceptions in synchronous code. Use try-catch, for example, to handle JSON parsing errors as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a82c5ffc33c76a2d189706604a691cc757084b7" translate="yes" xml:space="preserve">
          <source>Unify multiple StrongLoop PMs to a distributed microservices runtime that is managed from Arc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be91ee2527adb4d5295a14e8f4c70d557c9ee45d" translate="yes" xml:space="preserve">
          <source>Unless you need to work directly with the &lt;code&gt;http&lt;/code&gt; module (socket.io/SPDY/HTTPS), loading it is not required, and the app can be simply started this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85371579c00ca2ba8a0632fdb6d0f5c2ed67fc1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;app.param()&lt;/code&gt;, &lt;code&gt;router.param()&lt;/code&gt; does not accept an array of route parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3720f042ef2dc469a062002b304ed3f943018a" translate="yes" xml:space="preserve">
          <source>Upgrading to the Express 4 app generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9100b7ce2f64a70e8a1c5883615a9f34edb2815c" translate="yes" xml:space="preserve">
          <source>Upstart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d84ca8bcef7004ca57c061fb2af74408a7daa97" translate="yes" xml:space="preserve">
          <source>Upstart is a system tool available on many Linux distributions for starting tasks and services during system startup, stopping them during shutdown, and supervising them. You can configure your Express app or process manager as a service and then Upstart will automatically restart it when it crashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92953bf89f16bbc8d0777a585a83944c0a9331ee" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; middleware to protect against cross-site request forgery (CSRF).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029916f122cc122d4922df388d06b3723375f842" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to ensure your regular expressions are not susceptible to &lt;a href=&quot;https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;regular expression denial of service&lt;/a&gt; attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7a61534f1816ead22365bba6458427adc90f3c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;false&lt;/code&gt; if you have mounted this middleware at a path designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c513011c4f6c45303d53f25059cbea71a137c8ab" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;req.accepts()&lt;/code&gt;, &lt;code&gt;req.acceptsEncodings()&lt;/code&gt;, &lt;code&gt;req.acceptsCharsets()&lt;/code&gt;, and &lt;code&gt;req.acceptsLanguages()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99aab5c9dce5ec98bf0489b75ecda59765fdb297" translate="yes" xml:space="preserve">
          <source>Use Helmet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c26334c3707c998f07f49984cc50ae8ba2df75" translate="yes" xml:space="preserve">
          <source>Use TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce0779b98259c382ad04f568518386e95df45bd" translate="yes" xml:space="preserve">
          <source>Use a caching server like &lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; or &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/&quot;&gt;Nginx&lt;/a&gt; (see also &lt;a href=&quot;https://serversforhackers.com/nginx-caching/&quot;&gt;Nginx Caching&lt;/a&gt;) to greatly improve the speed and performance of your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf6c7b3cd19181653c23de6840110ccdbe0d79d" translate="yes" xml:space="preserve">
          <source>Use a load balancer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7acf259d66d15c7080bc5835b24d74a75ab53179" translate="yes" xml:space="preserve">
          <source>Use a process manager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c16b8ec94d201e75a5346f4cb14b0e1d2e2499" translate="yes" xml:space="preserve">
          <source>Use a reverse proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2beaf7fd84f8ae48408301b6008ba574fa9c83a1" translate="yes" xml:space="preserve">
          <source>Use a tool such as &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; or &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; to help you find implicit exceptions like &lt;a href=&quot;http://www.jshint.com/docs/options/#undef&quot;&gt;reference errors on undefined variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e8e9a32e6ad3c7570ff7b27af04d865718ba55" translate="yes" xml:space="preserve">
          <source>Use an array to group middleware logically. If you pass an array of middleware as the first or only middleware parameters, then you &lt;em&gt;must&lt;/em&gt; specify the mount path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a741103afa3ffffd43676c4ac698704424f032" translate="yes" xml:space="preserve">
          <source>Use an init system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975a1cb62c4c0de841d4ba0e44fb702cff6b1937" translate="yes" xml:space="preserve">
          <source>Use cookies securely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7d880256013e0fbc96622b6897da9ed70c2e59" translate="yes" xml:space="preserve">
          <source>Use gzip compression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3ad30cb26ebd99be031d05deef7058432597bd" translate="yes" xml:space="preserve">
          <source>Use promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2eaf7dafcff98319621114957e9f32fc2b6b505" translate="yes" xml:space="preserve">
          <source>Use promises to avoid the overhead of the &lt;code&gt;try..catch&lt;/code&gt; block or when using functions that return promises. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac06791a68881a1b554d195ce538cc4aa8d60dd7" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt; and &lt;a href=&quot;https://github.com/nabla-c0d3/sslyze&quot;&gt;sslyze&lt;/a&gt; tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402e2cebebb17d60701c9b4a2ec5aeca0353738a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;app.engine(ext, callback)&lt;/code&gt; method to create your own template engine. &lt;code&gt;ext&lt;/code&gt; refers to the file extension, and &lt;code&gt;callback&lt;/code&gt; is the template engine function, which accepts the following items as parameters: the location of the file, the options object, and the callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a48ab614a8bd860342c4a69066fc9f8ce06896" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;express.Router&lt;/code&gt; class to create modular, mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason, it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0f5e15d50e3580e380b77c0b8193c797838c29" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;npm init&lt;/code&gt; command to create a &lt;code&gt;package.json&lt;/code&gt; file for your application. For more information on how &lt;code&gt;package.json&lt;/code&gt; works, see &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;Specifics of npm&amp;rsquo;s package.json handling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5ed754a08ec38ba5129971920e73486079d9ca" translate="yes" xml:space="preserve">
          <source>Use the application generator tool, &lt;code&gt;express-generator&lt;/code&gt;, to quickly create an application skeleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b167954a8c8aaef02302a47b4713756baeca2f5b" translate="yes" xml:space="preserve">
          <source>Use the module according to its documentation: &lt;code&gt;app.use( ... )&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb65cda5338a2a461000fb0f78b38d5bda1aabef" translate="yes" xml:space="preserve">
          <source>Use the open-source &lt;a href=&quot;http://sqlmap.org/&quot;&gt;sqlmap&lt;/a&gt; tool to detect SQL injection vulnerabilities in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fc0658b28305b4640074d3f740947da7109632" translate="yes" xml:space="preserve">
          <source>Use third-party middleware to add functionality to Express apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09c99575956d0ad4f4fb22fd6a6f7d9b2dfc48c" translate="yes" xml:space="preserve">
          <source>Use this command to open a wizard that walks you through the process of applying updates or patches to fix the vulnerabilities that were found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cb220c84713286eebb65fe910ff44a323d050a" translate="yes" xml:space="preserve">
          <source>Use this command to test your application for vulnerabilities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d50c5d7ebafbb34dd5729ecbb1bc3fed22d92e" translate="yes" xml:space="preserve">
          <source>Use this method for engines that do not provide &lt;code&gt;.__express&lt;/code&gt; out of the box, or if you wish to &amp;ldquo;map&amp;rdquo; a different extension to the template engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fae4738cd97d2316ea63e464bf7578d52bcff3" translate="yes" xml:space="preserve">
          <source>Use to quickly end the response without any data. If you need to respond with data, instead use methods such as &lt;a href=&quot;#res.send&quot;&gt;res.send()&lt;/a&gt; and &lt;a href=&quot;#res.json&quot;&gt;res.json()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902e06128bbbdbfa5af337a6b50e502630b4a69f" translate="yes" xml:space="preserve">
          <source>Use try-catch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e340171e2a1dbe1b56c47d487e564503cfd65a4" translate="yes" xml:space="preserve">
          <source>Uses the specified middleware function or functions, with optional mount path &lt;code&gt;path&lt;/code&gt;, that defaults to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654f3bf05b77360df0a3406aeca71887e7f6c41d" translate="yes" xml:space="preserve">
          <source>Using Node&amp;rsquo;s cluster module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7e58dba08b5bbd33a51ab77dc535570101ba4b" translate="yes" xml:space="preserve">
          <source>Using PM2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dc3d579975a83c8bfee195fa3c382d605df9cb" translate="yes" xml:space="preserve">
          <source>Using StrongLoop PM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93af00e90887257be98737715d7b9512739fd90b" translate="yes" xml:space="preserve">
          <source>Using a process manager to restart the app (and Node) when it crashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e88d83e9f5bdd6606c81ada6a1e5e4a7e2c54d" translate="yes" xml:space="preserve">
          <source>Using any of these four tools can be very helpful, however StrongLoop Process Manager is the only tool that provides a comprehensive runtime and deployment solution that addresses the entire Node.js application life cycle, with tooling for every step before and after production, in a unified interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b59ba3bacb0395c40b1cd2367e58d01d3cb95f7" translate="yes" xml:space="preserve">
          <source>Using any of these process managers will suffice to keep your application up, even if it does crash from time to time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083a810caa46fbc37f37806ef55b10b0f6008390" translate="yes" xml:space="preserve">
          <source>Using middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986b1f6b1ad043d2ce053a3361640dbdb32b8b1a" translate="yes" xml:space="preserve">
          <source>Using npm to manage your application&amp;rsquo;s dependencies is powerful and convenient. But the packages that you use may contain critical security vulnerabilities that could also affect your application. The security of your app is only as strong as the &amp;ldquo;weakest link&amp;rdquo; in your dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15e03d3bf76fe22116274f02829fd0f950aef97" translate="yes" xml:space="preserve">
          <source>Using template engines with Express</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dad4f352fd25bbb342e06fd4d4f3aaf02ad16d" translate="yes" xml:space="preserve">
          <source>Using the default session cookie name can open your app to attacks. The security issue posed is similar to &lt;code&gt;X-Powered-By&lt;/code&gt;: a potential attacker can use it to fingerprint the server and target attacks accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9cc0c45cda492964982d7bb4e6026ccfa4d1d8" translate="yes" xml:space="preserve">
          <source>Using the init system provided by your OS to restart the process manager when the OS crashes. It&amp;rsquo;s also possible to use the init system without a process manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b384be08e3744f644d6661d74d37f3a2500f08d7" translate="yes" xml:space="preserve">
          <source>Value of the &amp;ldquo;SameSite&amp;rdquo; &lt;strong&gt;Set-Cookie&lt;/strong&gt; attribute. More information at &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&quot;&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e9c0b5945c7935722397003f02b17b15f53167" translate="yes" xml:space="preserve">
          <source>Varied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313e3195b8777bdfcaf118aada15075b112e9026" translate="yes" xml:space="preserve">
          <source>Various other changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b75cf0a0a90a6e984c7c739220f3506d3b65e97" translate="yes" xml:space="preserve">
          <source>Version 3 app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba4be33fc4135a08d9f92218a86cb87aaf67a8a" translate="yes" xml:space="preserve">
          <source>Version 4 app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3a5f6f7177b543da808decde47ae7014e5e733" translate="yes" xml:space="preserve">
          <source>View CPU profiles and heap snapshots to optimize performance and diagnose memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbc5ebdf047a122b839510acaf7e34e34ee82a6" translate="yes" xml:space="preserve">
          <source>View performance metrics for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6d0d87ece400b8cf64cd304ffa809e3eaac0af" translate="yes" xml:space="preserve">
          <source>View performance metrics on your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032b39e1a29b75323ed6e822431fdf1653840053" translate="yes" xml:space="preserve">
          <source>View the status of Process Manager and all deployed apps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840005c99ca00aaadff0aa978bf6fd105851a418" translate="yes" xml:space="preserve">
          <source>Was a function; now an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ce2bc0e4251b94db6ef70e713d919be237ddd7" translate="yes" xml:space="preserve">
          <source>Was an array; now an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe5e34be9e88f0e513902136c6edc0db8309f06" translate="yes" xml:space="preserve">
          <source>We also don&amp;rsquo;t recommend using &lt;a href=&quot;https://nodejs.org/api/domain.html&quot;&gt;domains&lt;/a&gt;. It generally doesn&amp;rsquo;t solve the problem and is a deprecated module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725f77d1ff07e7333aab3f34668b6b7e73d2487d" translate="yes" xml:space="preserve">
          <source>Web browsers and other compliant clients will only clear the cookie if the given &lt;code&gt;options&lt;/code&gt; is identical to those given to &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie()&lt;/a&gt;, excluding &lt;code&gt;expires&lt;/code&gt; and &lt;code&gt;maxAge&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57180805b4fa9b41b1a61c5b0fcb6b6d98b20c3" translate="yes" xml:space="preserve">
          <source>What not to do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9705af16b960bbfb3b6da178b485da7d5dc3aa9b" translate="yes" xml:space="preserve">
          <source>When StrongLoop Process Manager (PM) runs an application, it automatically runs it in a cluster with a number of workers equal to the number of CPU cores on the system. You can manually change the number of worker processes in the cluster using the slc command line tool without stopping the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501c75627bf5873f6ed0764334661d4dd399725c" translate="yes" xml:space="preserve">
          <source>When a request is made to &lt;code&gt;/greet/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/greet&amp;rdquo;. When a request is made to &lt;code&gt;/hello/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/hello&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a13209ce06db6ad843d64699453b28b2d44f24b" translate="yes" xml:space="preserve">
          <source>When a request is then made to the app, you will see the logs specified in the Express code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e357d1d01f898305f5390f0fdd3955974b7d32" translate="yes" xml:space="preserve">
          <source>When an error occurs or transfer is complete, the method calls the optional callback function &lt;code&gt;fn&lt;/code&gt;. This method uses &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; to transfer the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed6b235e1c71c4d3da06dd2039800decab66c92" translate="yes" xml:space="preserve">
          <source>When called from a middleware, the mount point is not included in &lt;code&gt;req.path&lt;/code&gt;. See &lt;a href=&quot;http://expressjs.com/index.html#app.use&quot;&gt;app.use()&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d9aaa93ce05438d0e4ea773e11b6e9636744be" translate="yes" xml:space="preserve">
          <source>When enabled, Express attempts to determine the IP address of the client connected through the front-facing proxy, or series of proxies. The `req.ips` property, then contains an array of IP addresses the client is connected through. To enable it, use the values described in the &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;trust proxy options table&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c85044bc57f0d6a884e4489274a420e7a2a184" translate="yes" xml:space="preserve">
          <source>When running an Express app behind a proxy, set (by using &lt;a href=&quot;../index#app.set&quot;&gt;app.set()&lt;/a&gt;) the application variable &lt;code&gt;trust proxy&lt;/code&gt; to one of the values listed in the following table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c9495350f9799c80da28b9b15615ee54293fc4" translate="yes" xml:space="preserve">
          <source>When running an application with PM2, you can enable &lt;strong&gt;cluster mode&lt;/strong&gt; to run it in a cluster with a number of instances of your choosing, such as the matching the number of available CPUs on the machine. You can manually change the number of processes in the cluster using the &lt;code&gt;pm2&lt;/code&gt; command line tool without stopping the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bf187cc64c7a6034a0b049373e96ea76d47cc0" translate="yes" xml:space="preserve">
          <source>When specified, the IP addresses or the subnets are excluded from the address determination process, and the untrusted IP address nearest to the application server is determined as the client&amp;rsquo;s IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd362e75c41d7b3a53b3434b31e630d2d3538a4" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, the value of this property is derived from the left-most entry in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce50831515757b2bb1be2df81591c7189da47af2" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property contains an array of IP addresses specified in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; request header. Otherwise, it contains an empty array. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b29989490006b123a1fed6d88ef54e8b7bd056" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will instead have the value of the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header field. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f7c94e0ad0f11ece916f4860888b8e24018424" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will use the value of the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header field if present. This header can be set by the client or by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53fc9203cdc95f94a55562a14485c99b8a9949d" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;Buffer&lt;/code&gt; object, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; response header field to &amp;ldquo;application/octet-stream&amp;rdquo;, unless previously defined as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0049ab549f6d0d34dc584905288009eb3cb2e4" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;String&lt;/code&gt;, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; to &amp;ldquo;text/html&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba0d6a23b9ed3115c1635386577be778c6b4aa" translate="yes" xml:space="preserve">
          <source>When the parameter is an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt;, Express responds with the JSON representation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ef7c7734b2e6c93e13e00c6118eca632c95cd0" translate="yes" xml:space="preserve">
          <source>When this option is &lt;code&gt;true&lt;/code&gt;, client errors such as a bad request or a request to a non-existent file will cause this middleware to simply call &lt;code&gt;next()&lt;/code&gt; to invoke the next middleware in the stack. When false, these errors (even 404s), will invoke &lt;code&gt;next(err)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241a1ef9cbb953d3dd1bcbdf485e7709184954a6" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this method also supports signed cookies. Simply include the &lt;code&gt;signed&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. Then &lt;code&gt;res.cookie()&lt;/code&gt; will use the secret passed to &lt;code&gt;cookieParser(secret)&lt;/code&gt; to sign the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc29d15127af324c2a1391b359a25496708ce09" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property contains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside in a different object to show developer intent; otherwise, a malicious attack could be placed on &lt;code&gt;req.cookie&lt;/code&gt; values (which are easy to spoof). Note that signing a cookie does not make it &amp;ldquo;hidden&amp;rdquo; or encrypted; but simply prevents tampering (because the secret used to sign is private).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aca4707c58c587acb5d60b42e8c8c750f5a5242" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property is an object that contains cookies sent by the request. If the request contains no cookies, it defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527bc3d9a378866748647528d7a788311664bf1e" translate="yes" xml:space="preserve">
          <source>When you deploy a new version of your application, you must replace the previous version. The &lt;a href=&quot;pm&quot;&gt;process manager&lt;/a&gt; you&amp;rsquo;re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it will stop accepting new requests, finish all the ongoing requests, and clean up the resources it used, including database connections and file locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112db72b1b684632edf5399c5fd68decb2048e78" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, &lt;code&gt;index.ntl&lt;/code&gt; will be rendered as HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40ea203a597f70c6562ce508b93150441d07be2" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, the &lt;code&gt;index.pug&lt;/code&gt; file will be rendered as HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e2a41040365a3317d4cc514f3f135fc159164e" translate="yes" xml:space="preserve">
          <source>When you make a request to the root of the app, the app now displays the timestamp of your request in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a48d068b5118e8159fde711e2291a6f8f2ce62" translate="yes" xml:space="preserve">
          <source>When you run Express apps for production, it is helpful to use a &lt;em&gt;process manager&lt;/em&gt; to achieve the following tasks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e6fb3d9ea8a3687a1f5b5b573d13fbe7bb3b86" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, the app is immediately sent to the background. You can control the background app from the command line by using various &lt;code&gt;pm2&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59bfe72d6d73e91826b5eca71df05ad7544aa6c" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, you must specify the path of the app. However, when you stop, restart, or delete an app, you can specify just the name or the id of the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd69fd61eae1415d060d6fc65ebc3eed412af958" translate="yes" xml:space="preserve">
          <source>When you use a regular expression for the route definition, capture groups are provided in the array using &lt;code&gt;req.params[n]&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the n&lt;sup&gt;th&lt;/sup&gt; capture group. This rule is applied to unnamed wild card matches with string routes such as &lt;code&gt;/file/*&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015deb11a0b53c5bec42b592c6680d2852f63bab" translate="yes" xml:space="preserve">
          <source>Which template engines does Express support?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0541422e39055f0122db6367a3febd98e3075d8" translate="yes" xml:space="preserve">
          <source>Whichever method you use, if you want Express error handlers to be called in and the application to survive, you must ensure that Express receives the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57770079da3be365b005a2a2304f26f4a961d641" translate="yes" xml:space="preserve">
          <source>With Upstart, use the &lt;code&gt;env&lt;/code&gt; keyword in your job file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9126b23002c151251365607be139da9c53a52c81" translate="yes" xml:space="preserve">
          <source>With load balancing, you might have to ensure that requests that are associated with a particular session ID connect to the process that originated them. This is known as &lt;em&gt;session affinity&lt;/em&gt;, or &lt;em&gt;sticky sessions&lt;/em&gt;, and may be addressed by the suggestion above to use a data store such as Redis for session data (depending on your application). For a discussion, see &lt;a href=&quot;http://socket.io/docs/using-multiple-nodes/&quot;&gt;Using multiple nodes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d0a21af360f9a50bd9513ad5278e2d81d25739" translate="yes" xml:space="preserve">
          <source>With systemd, use the &lt;code&gt;Environment&lt;/code&gt; directive in your unit file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4b282b9b543394da45c47db8aef175048b5d84" translate="yes" xml:space="preserve">
          <source>Without built-in middleware, you must explicitly add all the middleware that is required to run your app. Simply follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c719370b85f52a302f9af0bc5e8dffa6230d34" translate="yes" xml:space="preserve">
          <source>Writing error handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3372b1b5955f502cd5c59cee832b86b347d9ff1e" translate="yes" xml:space="preserve">
          <source>Writing middleware for use in Express apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6e3d4c09f9f5d74359d9d5e16938c14c10017d" translate="yes" xml:space="preserve">
          <source>Yields the following results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef34ed32c89d8ecd7d5129a83874c305deb4868" translate="yes" xml:space="preserve">
          <source>You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via &lt;code&gt;req.app.locals&lt;/code&gt; (see &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ba5cbf9ec74c5bfa4b4e04b502d3e22f0f08bb" translate="yes" xml:space="preserve">
          <source>You can add middleware and HTTP method routes (such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on) to &lt;code&gt;router&lt;/code&gt; just like an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9298bfc210261527b90870db24a5f9c65bc99de" translate="yes" xml:space="preserve">
          <source>You can also &amp;ldquo;soft restart,&amp;rdquo; which gives worker processes a grace period to close existing connections, then restarts the current application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c160ab1af9771808d27a6250c8f1317c88050706" translate="yes" xml:space="preserve">
          <source>You can also use regular expressions&amp;mdash;useful if you have very specific constraints, for example the following would match &amp;ldquo;GET /commits/71dbb9c&amp;rdquo; as well as &amp;ldquo;GET /commits/71dbb9c..4c084f9&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd37ca0380136541bb2cdb065d0f644848ef0fa" translate="yes" xml:space="preserve">
          <source>You can combine all the above ways of mounting middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98410bf4500a3e769cf2974ff2789c94beb8a263" translate="yes" xml:space="preserve">
          <source>You can create chainable route handlers for a route path by using &lt;code&gt;app.route()&lt;/code&gt;. Because the path is specified at a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see: &lt;a href=&quot;../index#router&quot;&gt;Router() documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a3b1fb3b3d7101453eaa0c578ee607a4cb3a4c" translate="yes" xml:space="preserve">
          <source>You can define and mount a middleware function locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6be1821000bc03fe174db325d7a155613fd483" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as a systemd service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e947505467b4fe74639dadcb47ce3642b79f9be" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as an Upstart service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6387910e4bed6dd6f4b1178c5b289b5a6fa20c" translate="yes" xml:space="preserve">
          <source>You can load application-level and router-level middleware with an optional mount path. You can also load a series of middleware functions together, which creates a sub-stack of the middleware system at a mount point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d6d83c2831da220dc839d0f1f1c85ce840c31" translate="yes" xml:space="preserve">
          <source>You can pass an object as the &lt;code&gt;value&lt;/code&gt; parameter; it is then serialized as JSON and parsed by &lt;code&gt;bodyParser()&lt;/code&gt; middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33543cbc9ae9b756d1c80e53a9a660a2b80fc8f" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave just like middleware, except that these callbacks can invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there is no reason to proceed with the current route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f413616449c4f8674342bf9524c0861b22e6054" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave like &lt;a href=&quot;using-middleware&quot;&gt;middleware&lt;/a&gt; to handle a request. The only exception is that these callbacks might invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callbacks. You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there&amp;rsquo;s no reason to proceed with the current route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3160d5888f53a0436dc8303e6a7b32382d04b1" translate="yes" xml:space="preserve">
          <source>You can provide multiple callbacks, and all are treated equally, and behave just like middleware, except that these callbacks may invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to perform pre-conditions on a route then pass control to subsequent routes when there is no reason to proceed with the route matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353ae66caf29607f1e61863fb32c5e585e174482" translate="yes" xml:space="preserve">
          <source>You can set IP addresses in any of the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570005772e6d8637491c837390c8f86ee11ffd94" translate="yes" xml:space="preserve">
          <source>You can specify more than one debug namespace by assigning a comma-separated list of names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6a1726fe64b7e031645302d21eb2777b6da994" translate="yes" xml:space="preserve">
          <source>You can specify more than one middleware function at the same mount path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8bfecfd02bf22b488eccf0b73dbf30f9f0e9f5" translate="yes" xml:space="preserve">
          <source>You can then run your automated tests to see what fails, and fix problems according to the updates listed below. After addressing test failures, run your app to see what errors occur. You&amp;rsquo;ll find out right away if the app uses any methods or properties that are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2878120e801b6538ece42279b7388f977e27d91e" translate="yes" xml:space="preserve">
          <source>You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59600f0f18a0f8c79ce7c42cdc9cbed617dab47" translate="yes" xml:space="preserve">
          <source>You can work with StrongLoop PM by using a powerful command-line interface tool called &lt;code&gt;slc&lt;/code&gt;, or a graphical tool called Arc. Arc is open source, with professional support provided by StrongLoop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6c2ca9bdc896797e058fe4987d31f4ea111eb1" translate="yes" xml:space="preserve">
          <source>You could also use a chain of handlers to rely on synchronous error catching, by reducing the asynchronous code to something trivial. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b63f34d17f9e0ec5789ae699119332e25efa5cf" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature &lt;code&gt;(err, req, res, next)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b86858d0f37ba393118efcc6591e14415ebe664" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware last, after other &lt;code&gt;app.use()&lt;/code&gt; and routes calls; for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01686d33994edd50201b6783e4606ef768e78f0" translate="yes" xml:space="preserve">
          <source>You define routing using methods of the Express &lt;code&gt;app&lt;/code&gt; object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle GET requests and &lt;code&gt;app.post&lt;/code&gt; to handle POST requests. For a full list, see &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;. You can also use &lt;a href=&quot;../index#app.all&quot;&gt;app.all()&lt;/a&gt; to handle all HTTP methods and &lt;a href=&quot;../index#app.use&quot;&gt;app.use()&lt;/a&gt; to specify middleware as the callback function (See &lt;a href=&quot;using-middleware&quot;&gt;Using middleware&lt;/a&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42dcbc260ccad05bbf0833210397f0ef0602f413" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t! There&amp;rsquo;s no need to &amp;ldquo;render&amp;rdquo; HTML with the &lt;code&gt;res.render()&lt;/code&gt; function. If you have a specific file, use the &lt;code&gt;res.sendFile()&lt;/code&gt; function. If you are serving many assets from a directory, use the &lt;code&gt;express.static()&lt;/code&gt; middleware function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08fc535c4618cf05fb6de4cc356326814161ef2" translate="yes" xml:space="preserve">
          <source>You have now moved the functionality of &lt;code&gt;./bin/www&lt;/code&gt; back to &lt;code&gt;app.js&lt;/code&gt;. This change is not recommended, but the exercise helps you to understand how the &lt;code&gt;./bin/www&lt;/code&gt; file works, and why the &lt;code&gt;app.js&lt;/code&gt; file no longer starts on its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d30ce5abc7d8039203f11555293bb4e8bbdba1" translate="yes" xml:space="preserve">
          <source>You may be familiar with Secure Socket Layer (SSL) encryption. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx&quot;&gt;TLS is simply the next progression of SSL&lt;/a&gt;. In other words, if you were using SSL before, consider upgrading to TLS. In general, we recommend Nginx to handle TLS. For a good reference to configure TLS on Nginx (and other servers), see &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations&quot;&gt;Recommended Server Configurations (Mozilla Wiki)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aae250f7999dbc21f586d6ea27e4dee5436f84e" translate="yes" xml:space="preserve">
          <source>You must catch errors that occur in asynchronous code invoked by route handlers or middleware and pass them to Express for processing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bff4e5944a817d2b779f6298b31e6262e47f1d" translate="yes" xml:space="preserve">
          <source>You no longer need to load the &lt;code&gt;app.router&lt;/code&gt; function. It is not a valid Express 4 app object, so remove the &lt;code&gt;app.use(app.router);&lt;/code&gt; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c280e38b87ac78f4bcb841159de9ed86291faa5" translate="yes" xml:space="preserve">
          <source>You will also notice that the &lt;code&gt;app.js&lt;/code&gt; file is now a Node.js module, in contrast to the standalone app that was generated by the old generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59082a2396586f774d1cab2f7a3f8a4b9c0f946d" translate="yes" xml:space="preserve">
          <source>Your app will now be able to render &lt;code&gt;.ntl&lt;/code&gt; files. Create a file named &lt;code&gt;index.ntl&lt;/code&gt; in the &lt;code&gt;views&lt;/code&gt; directory with the following content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a838ff1a911eb3f4af98ef687b76715c682147c0" translate="yes" xml:space="preserve">
          <source>app.METHOD()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f6ec3046b7162e61285bc0748169141af181c0" translate="yes" xml:space="preserve">
          <source>app.METHOD(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e55a2e4936fdca99b5697552b3b1e0469ff658" translate="yes" xml:space="preserve">
          <source>app.all()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb57d8e4680cc2c1874ad526f059e2bed5a3251" translate="yes" xml:space="preserve">
          <source>app.all(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00be65b35b7e8b804e9efbd03c668fbeb75bc20" translate="yes" xml:space="preserve">
          <source>app.del()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b03211e8fe91b9a33ba359e93af1d45d34a839b" translate="yes" xml:space="preserve">
          <source>app.delete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfa82fa9634c97068378ca973320ca0260c0545" translate="yes" xml:space="preserve">
          <source>app.delete(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95bac08da335ff48120839521aa81dc0f56bc01" translate="yes" xml:space="preserve">
          <source>app.disable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d88135e3e28dd96dffcefb711a1e56d406811c" translate="yes" xml:space="preserve">
          <source>app.disable(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4957c4bc18288fc56a8d5179d909162132b1c0" translate="yes" xml:space="preserve">
          <source>app.disabled()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461fd03f28cf1c66c31b58fe640165cb316282da" translate="yes" xml:space="preserve">
          <source>app.disabled(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a348956a1d39cf3ddf33f6585b104288457e209" translate="yes" xml:space="preserve">
          <source>app.enable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de3d9252ddaa1f91f299b9917c5bb7d0fe58e62" translate="yes" xml:space="preserve">
          <source>app.enable(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d2c462b4c1d5268aaf45210d145baab573d4c7" translate="yes" xml:space="preserve">
          <source>app.enabled()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57ca2d1382c6376c7dd2231e97c8323651f2c64" translate="yes" xml:space="preserve">
          <source>app.enabled(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff09693ef1b27c6ac3769f579205fbe7fb7d7630" translate="yes" xml:space="preserve">
          <source>app.engine()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6839aa7526163d3421a1ab736549c8c402d226a7" translate="yes" xml:space="preserve">
          <source>app.engine(ext, callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f464cad95a85e6de551e6f032792402fe2a483" translate="yes" xml:space="preserve">
          <source>app.get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d373bd472acb2058c399476e974f26979ca762" translate="yes" xml:space="preserve">
          <source>app.get(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc09379b954e0bc4cb7b44b6d30a18d269104a4" translate="yes" xml:space="preserve">
          <source>app.get(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e865215b0a584ffca00b4e67de78ec2a3e0ed0" translate="yes" xml:space="preserve">
          <source>app.listen()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e83e86bcd51a22128cd9f638d86e1a90e22a97" translate="yes" xml:space="preserve">
          <source>app.listen([port[, host[, backlog]]][, callback])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034b5efe6a9c5bc7bd5f0f7ff4b64b0cf43197eb" translate="yes" xml:space="preserve">
          <source>app.listen(path, [callback])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8553d4240cb81aa6198823b92dcb651766d4bf4b" translate="yes" xml:space="preserve">
          <source>app.locals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7ebf675e483c5ae4f49f6af5f6ad24e55ef389" translate="yes" xml:space="preserve">
          <source>app.mountpath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cdb3903f6c8a973e6d0092c1fc7a9b98e2a650" translate="yes" xml:space="preserve">
          <source>app.on('mount', callback(parent))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5fafbbfac1475a116085409056abbc510708ae" translate="yes" xml:space="preserve">
          <source>app.on()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd07676a8d0e78040af8d4aa702ee0fedf720c5" translate="yes" xml:space="preserve">
          <source>app.param()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31899f869d9363a677df7cb478103a65d3574135" translate="yes" xml:space="preserve">
          <source>app.param([name], callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0c185ff686f9ce2a34776e2750f73918574444" translate="yes" xml:space="preserve">
          <source>app.param(fn)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d2cd9e9b518830c37b54e4dcbfb58878f6b965" translate="yes" xml:space="preserve">
          <source>app.path()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679596d299677c2bad263cb8f2aedfe469512252" translate="yes" xml:space="preserve">
          <source>app.post()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4855f39f495af951f33dbd8c43bc77de838bf78d" translate="yes" xml:space="preserve">
          <source>app.post(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d30009bb11d533c956eb27eb017e8523b42d9d5" translate="yes" xml:space="preserve">
          <source>app.put()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a37cfb8f71d31dd9b48144a81923a746c61098" translate="yes" xml:space="preserve">
          <source>app.put(path, callback [, callback ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6165a666cad761f82cd239272ea43d20cfeabc9f" translate="yes" xml:space="preserve">
          <source>app.render()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fe78a7c9aabf41daa35ff43d22dcd9da2b58cf" translate="yes" xml:space="preserve">
          <source>app.render(view, [locals], callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cf6417b823019e37aac623934d67ce2bc3a036" translate="yes" xml:space="preserve">
          <source>app.route()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef403c5ae042d5139816a9b362f7073de4fc6a22" translate="yes" xml:space="preserve">
          <source>app.route(path)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54160d53742fa246cf6e9617e93c555bef2ad5ee" translate="yes" xml:space="preserve">
          <source>app.router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e371552e3d2936a3d4bdf72646abf244a4346c" translate="yes" xml:space="preserve">
          <source>app.set()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce1dd408ca0b7f0ffc9dfc6cf8505ec39c5e608" translate="yes" xml:space="preserve">
          <source>app.set(name, value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cc94153849c91b77d0739b693a0814eee45666" translate="yes" xml:space="preserve">
          <source>app.use()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d50fcd03051afcdfa39c0a77fb15c313db975d" translate="yes" xml:space="preserve">
          <source>app.use([path,] callback [, callback...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c94651c6dfed693ca8e5c7ebc8e201be81fb74" translate="yes" xml:space="preserve">
          <source>compression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab0f5624db8cb73abb99e85bd9ca1d11d1458c5" translate="yes" xml:space="preserve">
          <source>connect-timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558682e9a8606eadee61d393c36c68d315869b3f" translate="yes" xml:space="preserve">
          <source>cookie-parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4736ce5561fcb21e9981845ff2907e2388f8a62" translate="yes" xml:space="preserve">
          <source>cookie-session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ee80a53c1d882ca9c974670f1c037fc380e83e" translate="yes" xml:space="preserve">
          <source>csurf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1587c51d541276724d2e1d176819746317137164" translate="yes" xml:space="preserve">
          <source>dotfiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27617c0e0564364346bd433b20612f0b0fccc154" translate="yes" xml:space="preserve">
          <source>errorhandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba37bccd187ac39286ab2f65c0a90b2a327a437" translate="yes" xml:space="preserve">
          <source>express()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca9c35e4a89979f1d80e1aeb61800650968b7fb" translate="yes" xml:space="preserve">
          <source>express-session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8399bf4ffcaf94469d588787f36eb4347b161a6" translate="yes" xml:space="preserve">
          <source>express.Router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d97037b9bb7fc5944dc67651d55bbe109673f16" translate="yes" xml:space="preserve">
          <source>express.Router()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ebb15c536c0c81e95d98819026323f2008108e" translate="yes" xml:space="preserve">
          <source>express.Router([options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d24a187b8abd31ebe16afd44c64f0a6847367d0" translate="yes" xml:space="preserve">
          <source>express.json()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173878196b2e58c5b7b68d23f968b05d6909ab14" translate="yes" xml:space="preserve">
          <source>express.json([options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80f14809aed87513756371d68b4053e20766a7c" translate="yes" xml:space="preserve">
          <source>express.static()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bdc01607dc7c622029d937af399044eaad0e41" translate="yes" xml:space="preserve">
          <source>express.static(root, [options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931644caa0ed99aad45bfe9b177b15b07c545079" translate="yes" xml:space="preserve">
          <source>express.urlencoded()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bbf7f5c077234fdae52b5ecb0b095d579e9c14" translate="yes" xml:space="preserve">
          <source>express.urlencoded([options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302537ac017dcbf48c03777d4be2e78fcd5aa71a" translate="yes" xml:space="preserve">
          <source>fallthrough</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7868b0ca6417a8c9e4ea8eff421703e5ff95304" translate="yes" xml:space="preserve">
          <source>inherit the value of this setting, even though it has a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ffe21eeabe8d0af01cdddd41a5adee0f68d76d" translate="yes" xml:space="preserve">
          <source>linklocal - &lt;code&gt;169.254.0.0/16&lt;/code&gt;, &lt;code&gt;fe80::/10&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3115012771630a9f133aea2eef1c5714c36b40d" translate="yes" xml:space="preserve">
          <source>loopback - &lt;code&gt;127.0.0.1/8&lt;/code&gt;, &lt;code&gt;::1/128&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b00fa9d468f2a76a3f394f47bf897a57c3841bf" translate="yes" xml:space="preserve">
          <source>method-override</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519bc3f0fda96312357e1409de278bff4d5f5b25" translate="yes" xml:space="preserve">
          <source>morgan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0573a9a28d76348073d0992e349e6d16e168c2b6" translate="yes" xml:space="preserve">
          <source>req.accepts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fd085c6f47415a8b07cb8793c96b2ab5ce86a3" translate="yes" xml:space="preserve">
          <source>req.accepts(types)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdf0f7bfa9bcee5f8ae30009b58641de200222e" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9df014f398a14da8070a481c747f1cc52544f26" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets(charset [, ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c500b7d919d3ee5d83cc4d699081cf3168cd9dce" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59cb2c81e6e04fd410d33fcf5349b0642ee9b26" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings(encoding [, ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fed5fbe88100a956f74f80374b9dc66ad25fea" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c737a7254e0522e28123cd9831e5b72318c684" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages(lang [, ...])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceea344f474505d214adecf449c7ebc5bc076dc5" translate="yes" xml:space="preserve">
          <source>req.app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64ffadcd5fa0a8a144649dcf2c8ff3c2a409c29" translate="yes" xml:space="preserve">
          <source>req.baseUrl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09b3cf3a63a04bfdc00b09ed53963e899af3079" translate="yes" xml:space="preserve">
          <source>req.body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fe86d4749862cf23747240c6adb64773533292" translate="yes" xml:space="preserve">
          <source>req.cookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d10b1f040b25f3b1f9225c2cc3d139126e3bc45" translate="yes" xml:space="preserve">
          <source>req.fresh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caae5d78eb439354a3392577f19ad92c976190d" translate="yes" xml:space="preserve">
          <source>req.get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc830fb7ae5e0449b46798a7312055cfb356a346" translate="yes" xml:space="preserve">
          <source>req.get(field)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3315a1d3f43addc98b7837512e14740a9484e908" translate="yes" xml:space="preserve">
          <source>req.host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c128a537175820007a6e925205fe65ff896d61" translate="yes" xml:space="preserve">
          <source>req.hostname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d0fb279d6126607ded35c39ff584032668dc2c" translate="yes" xml:space="preserve">
          <source>req.ip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4067c6f2a97609981b358cee9d6dce548fdda8e3" translate="yes" xml:space="preserve">
          <source>req.ips</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1d85aba335e65747c25c6810d61a12e4cf7266" translate="yes" xml:space="preserve">
          <source>req.is()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24269cbb1290603169b693b936906800d7ea35ef" translate="yes" xml:space="preserve">
          <source>req.is(type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0375227020ede7f69e6cfa0585a2a18ba889b300" translate="yes" xml:space="preserve">
          <source>req.method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d41d891589f04499a39addb298ca4c20450922" translate="yes" xml:space="preserve">
          <source>req.originalUrl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2f22abe7b87d06a9ada54ab2215e59e94271bf" translate="yes" xml:space="preserve">
          <source>req.param()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def4edeb854e454304ae9f045c230d5ff08a401a" translate="yes" xml:space="preserve">
          <source>req.param(name [, defaultValue])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0ab7cc86b03e2f1c73f0cea5ca521aaac2782e" translate="yes" xml:space="preserve">
          <source>req.param(name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f1403de6f4160062a44db7f69ab376946a8c24" translate="yes" xml:space="preserve">
          <source>req.params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f5f28b5e85f198eb2b25e6d302763759110a3f" translate="yes" xml:space="preserve">
          <source>req.path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1a4b0d2680a7dec6110dc617959b9e785871da" translate="yes" xml:space="preserve">
          <source>req.protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979e40316b240d89f020ab27fccc81fe9d093ba1" translate="yes" xml:space="preserve">
          <source>req.query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a46aca4b79907155e4bfec2d5711b9bea8dad6" translate="yes" xml:space="preserve">
          <source>req.range()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84530fcf152ab20166be9822d850fe6e0d9d4405" translate="yes" xml:space="preserve">
          <source>req.range(size[, options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a009be30a101bad68597d689fda2a2e086257c" translate="yes" xml:space="preserve">
          <source>req.route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4e0a01700a2de190316747dbbb3acd298dfee2" translate="yes" xml:space="preserve">
          <source>req.secure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8c2de355db5eb4da50c8fc89efa7c9e5c92780" translate="yes" xml:space="preserve">
          <source>req.signedCookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dd3f50bf529295dee306d162ee028e21478dc0" translate="yes" xml:space="preserve">
          <source>req.stale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca99d41ad8dad2a97a61cdb2b14ce48aca53b93" translate="yes" xml:space="preserve">
          <source>req.subdomains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d92923eaa52431a959ff1f65835d2111ab1e9f5" translate="yes" xml:space="preserve">
          <source>req.xhr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfdd9f3454d267306feb0bbf77da093dbfa0ffd" translate="yes" xml:space="preserve">
          <source>res.app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552d5cd0a26979f6cb9eab9511549012d2edd7ff" translate="yes" xml:space="preserve">
          <source>res.append()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46da46a5dcc17b35a2f1c7c1a554e22e571cd01e" translate="yes" xml:space="preserve">
          <source>res.append(field [, value])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60065656c823adc312515e29c90e7ac4a6a58fe4" translate="yes" xml:space="preserve">
          <source>res.attachment()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bf1656677d6be8b1bf6d015dd8a465026949cf" translate="yes" xml:space="preserve">
          <source>res.attachment([filename])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279a92c6f0d376e1ca3f7160c456a7ea76b73ea8" translate="yes" xml:space="preserve">
          <source>res.clearCookie()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5450dea065376384554a1043dd594f31e084177a" translate="yes" xml:space="preserve">
          <source>res.clearCookie(name [, options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022e05e9c9e3db5d610cb27c43d21465c05c5864" translate="yes" xml:space="preserve">
          <source>res.cookie()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed0a66256d36951ef2068cb85bdb6028d166d37" translate="yes" xml:space="preserve">
          <source>res.cookie(name, value [, options])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83716236a26c5b875be376269e1bc6e4e8e82209" translate="yes" xml:space="preserve">
          <source>res.download()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05b3a2ae767a9068e7ee75549478b240c915314" translate="yes" xml:space="preserve">
          <source>res.download(path [, filename] [, options] [, fn])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819c01b624ee810f1c8dcdc320f86a26a308d917" translate="yes" xml:space="preserve">
          <source>res.end()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bf967b0b9915d9a2a120f53bab1736cb9cf7bb" translate="yes" xml:space="preserve">
          <source>res.end([data] [, encoding])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001efc2ac33184e05bd5985cfe6848826d30e9db" translate="yes" xml:space="preserve">
          <source>res.format()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6f32370a29d86049d9e95d67f57d6b17424f88" translate="yes" xml:space="preserve">
          <source>res.format(object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eac806898fcfdfd6d848cab03a6f41e01759059" translate="yes" xml:space="preserve">
          <source>res.get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47260b11a7d3f7d396eb8374b11dde3e08200b4" translate="yes" xml:space="preserve">
          <source>res.get(field)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad044b84dc8dd0f126496fb95d0d243240abd61a" translate="yes" xml:space="preserve">
          <source>res.headersSent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104ecc2c15e364a063fe2a8ee446da65e5358d02" translate="yes" xml:space="preserve">
          <source>res.json()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c0c7d52d4a80d1e599383e993776c1cb7b32fb" translate="yes" xml:space="preserve">
          <source>res.json([body])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00a09ee307543b703439968f17119a2c3da75aa" translate="yes" xml:space="preserve">
          <source>res.json(obj, status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66c858e7faea6fd4a219f62263e2828333593ac" translate="yes" xml:space="preserve">
          <source>res.jsonp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ca2e94d3497ba0a53dcbfbc3151b555ff5060" translate="yes" xml:space="preserve">
          <source>res.jsonp([body])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee87dab6a4a380352567cc52f41aebe7610b1ee" translate="yes" xml:space="preserve">
          <source>res.jsonp(obj, status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8547ef25de8f7b6be7966ae7fa6bc5480ec080b6" translate="yes" xml:space="preserve">
          <source>res.links()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fe9e83ad549a184cfb5dabd6039a97c6aa1ead" translate="yes" xml:space="preserve">
          <source>res.links(links)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ee7e912d3f45329a7e20dfe0929a9eba1e770c" translate="yes" xml:space="preserve">
          <source>res.locals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecee29772d360af4c9df81955546ec19d2bab7fd" translate="yes" xml:space="preserve">
          <source>res.location()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3648756abde5edf94fe1a44e7ffec86fcd7fde72" translate="yes" xml:space="preserve">
          <source>res.location(path)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db689745fd1784885c81318dd7a36275a572b475" translate="yes" xml:space="preserve">
          <source>res.redirect()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c12ba62b8063aed92cd0ac9a19b38b6fad6893" translate="yes" xml:space="preserve">
          <source>res.redirect([status,] path)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c56c99126aaef66b730ddeeea5cdac83d9fd31a" translate="yes" xml:space="preserve">
          <source>res.render()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aade41007808e4f875a0cccad77bd169dc15fc04" translate="yes" xml:space="preserve">
          <source>res.render(view [, locals] [, callback])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a399e3340e14335bb31f075b3dc0da017d9ece" translate="yes" xml:space="preserve">
          <source>res.send()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b226cc66a813582f24d0d59aee2733b034ce1ba" translate="yes" xml:space="preserve">
          <source>res.send([body])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee6550cba81611d25838adfbe6c17488a1310a6" translate="yes" xml:space="preserve">
          <source>res.send(body, status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1191cee7db001968f190519ebed49bc5b3676627" translate="yes" xml:space="preserve">
          <source>res.send(status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6c0e48c64bbfcdfeb3e7af3d83e26cc72c61e9" translate="yes" xml:space="preserve">
          <source>res.sendFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6accc02d8f1c14cc0424189472752ee3a2d51e" translate="yes" xml:space="preserve">
          <source>res.sendFile(path [, options] [, fn])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dd552f80083a69d873a3e60807a5bafd63e340" translate="yes" xml:space="preserve">
          <source>res.sendStatus()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf307262cb0eb7a057c0d9cb5503342c3bb82042" translate="yes" xml:space="preserve">
          <source>res.sendStatus(statusCode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f7e30176b432408f38acda415a62d8ddcd272e" translate="yes" xml:space="preserve">
          <source>res.sendfile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bb83ed5ec58c3a114e87c47ae515179e617cb7" translate="yes" xml:space="preserve">
          <source>res.set()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2e87ca7b60a593207c894c6eda7ffff24eaa3a" translate="yes" xml:space="preserve">
          <source>res.set(field [, value])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5a22853f5922e76efab1500ca1fe41ea759736" translate="yes" xml:space="preserve">
          <source>res.status()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefce9919c36ec6a0adeeedc7191b80abc86408b" translate="yes" xml:space="preserve">
          <source>res.status(code)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0127d5b2f0d9821c360ef760121e602c0d2bf22" translate="yes" xml:space="preserve">
          <source>res.type()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38e248fd694a0958037ec7f6f91a3665cf72c8d" translate="yes" xml:space="preserve">
          <source>res.type(type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44730073d9f80b39259a36c8ad46e35cdc2889e4" translate="yes" xml:space="preserve">
          <source>res.vary()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690d3d1d374a6aa2294ce75a4bfda0fd1b430341" translate="yes" xml:space="preserve">
          <source>res.vary(field)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bc846e88a6febe851934450a72d65318b85f78" translate="yes" xml:space="preserve">
          <source>response-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c94ac827ab88d29cc39474371e7a8b70d603c5f" translate="yes" xml:space="preserve">
          <source>router.METHOD()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb6a302f12a6f6d5e9ddef289f65eb7793b8825" translate="yes" xml:space="preserve">
          <source>router.METHOD(path, [callback, ...] callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84e6dac1f8d334e00c2415507c5d6337751fe51" translate="yes" xml:space="preserve">
          <source>router.all()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e47131c47c4c81e093b88f5f48c3a373b54e8f" translate="yes" xml:space="preserve">
          <source>router.all(path, [callback, ...] callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cbe5704d39a68da489447cd2f492118cb8f1a7" translate="yes" xml:space="preserve">
          <source>router.param()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9b95024a7fb7e4502a8f587f2b8cd47c7cffe4" translate="yes" xml:space="preserve">
          <source>router.param(name, callback)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05213405ad3e982f74ba1bdb896dba6ebd383604" translate="yes" xml:space="preserve">
          <source>router.route()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b74d17e788a4608e25428b4650dca605ba8c685" translate="yes" xml:space="preserve">
          <source>router.route(path)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21765202948a7298719daa10e75001db652eb2f9" translate="yes" xml:space="preserve">
          <source>router.use()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777cd87b38a78f87aaa233a8508aa0bcc8e8537a" translate="yes" xml:space="preserve">
          <source>router.use([path], [function, ...] function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af74e3c01ca7b6492b5d01b640ecb8188796e1f" translate="yes" xml:space="preserve">
          <source>serve-favicon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15917a9a70998b4e091520ab28f9727ef390f0f" translate="yes" xml:space="preserve">
          <source>serve-index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae0c2c0f96ac832e715c29ba152e7253c8f2987" translate="yes" xml:space="preserve">
          <source>serve-static</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a8065db3b305cacce5d2a79c6eb94f976ee64e" translate="yes" xml:space="preserve">
          <source>setHeaders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec425e40046d264c02628b94f12daa230c34ee4" translate="yes" xml:space="preserve">
          <source>uniquelocal - &lt;code&gt;10.0.0.0/8&lt;/code&gt;, &lt;code&gt;172.16.0.0/12&lt;/code&gt;, &lt;code&gt;192.168.0.0/16&lt;/code&gt;, &lt;code&gt;fc00::/7&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60bd82a61f2f560092ee3376ac781a684f11d57" translate="yes" xml:space="preserve">
          <source>vhost</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d41699bdee4fcb969ca499eb0f8b82c60d59cc" translate="yes" xml:space="preserve">
          <source>will</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
