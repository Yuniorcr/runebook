<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="tcl_tk">
    <body>
      <group id="tcl_tk">
        <trans-unit id="d5db80138210e485d393ce2d179259464323eabf" translate="yes" xml:space="preserve">
          <source>The scrollbar automatically sets the &lt;b&gt;disabled&lt;/b&gt; state bit. when the entire range is visible (range is 0.0 to 1.0), and clears it otherwise. It also sets the &lt;b&gt;active&lt;/b&gt; and &lt;b&gt;pressed&lt;/b&gt; state flags of individual elements, based on the position and state of the mouse pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b01dd6890a9bd8efd8f1cd96e728aa0a17a8349" translate="yes" xml:space="preserve">
          <source>The search may be limited by the option &lt;b&gt;-exactnamespace&lt;/b&gt; to only check the current namespace and not any parent namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7af7e8056757139b2ccb3d7c9c129d23fce576c" translate="yes" xml:space="preserve">
          <source>The search will proceed backward through the text, finding the matching range closest to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87e6e6cc1fdba27875f2fa5e488d81a21c2871d" translate="yes" xml:space="preserve">
          <source>The search will proceed forward through the text, finding the first matching range starting at or after the position given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c35ae3a12c0983de37ea5cd7ce4572f5bf63361" translate="yes" xml:space="preserve">
          <source>The second feature of a message widget is justification. The text may be displayed left-justified (each line starts at the left side of the window), centered on a line-by-line basis, or right-justified (each line ends at the right side of the window).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830aa08740fcf2692cf7b4dba9f0bf22902afcd6" translate="yes" xml:space="preserve">
          <source>The second form of &lt;b&gt;selection own&lt;/b&gt; causes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f297db871799b3a1a58297c74dc23adbb7cf87ff" translate="yes" xml:space="preserve">
          <source>The second form of annotation consists of floating markers in the text called &amp;ldquo;marks&amp;rdquo;. Marks are used to keep track of various interesting positions in the text as it is edited. See &lt;b&gt;&lt;a href=&quot;#M71&quot;&gt;MARKS&lt;/a&gt;&lt;/b&gt; below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1a9dc028241b70ee32f5791a951ffb01258db6" translate="yes" xml:space="preserve">
          <source>The second form of annotation in text widgets is a mark. Marks are used for remembering particular places in a text. They are something like tags, in that they have names and they refer to places in the file, but a mark is not associated with particular characters. Instead, a mark is associated with the gap between two characters. Only a single position may be associated with a mark at any given time. If the characters around a mark are deleted the mark will still remain; it will just have new neighbor characters. In contrast, if the characters containing a tag are deleted then the tag will no longer have an association with characters in the file. Marks may be manipulated with the &amp;ldquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146c0a578da2021484881d48034905d16559e7b5" translate="yes" xml:space="preserve">
          <source>The second form specifies types where all the types given must match. These are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1569ee53bb869f338c3b8fb63c045619c1c262" translate="yes" xml:space="preserve">
          <source>The second option, with &lt;b&gt;&lt;a href=&quot;coroutine.htm&quot;&gt;coroutine&lt;/a&gt;&lt;/b&gt; and some helper procedures, is done like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6081c398147213ce1a90f68bd320357b67883d" translate="yes" xml:space="preserve">
          <source>The second portion of a conversion specifier may contain any of the following flag characters, in any order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e842110e9383f93d22622a153a60e86b50aeb7" translate="yes" xml:space="preserve">
          <source>The second possible syntax is a character list containing only 5 possible characters &amp;ldquo;&lt;b&gt;.,-_ &lt;/b&gt;&amp;rdquo;. The space can be used to enlarge the space between other line elements, and cannot occur as the first position in the string. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e898b97c8d5346aefd76f7e235345fc659057b" translate="yes" xml:space="preserve">
          <source>The second purpose for tags is event bindings. You can associate bindings with a tag in much the same way you can associate bindings with a widget class: whenever particular X events occur on characters with the given tag, a given Tcl command will be executed. Tag bindings can be used to give behaviors to ranges of characters; among other things, this allows hypertext-like features to be implemented. For details, see the description of the &amp;ldquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffb8a8684eebf191480568a0cb68380c9d86491" translate="yes" xml:space="preserve">
          <source>The sections below describe the various types of items supported by canvas widgets. Each item type is characterized by two things: first, the form of the &lt;b&gt;create&lt;/b&gt; command used to create instances of the type; and second, a set of configuration options for items of that type, which may be used in the &lt;b&gt;create&lt;/b&gt; and &lt;b&gt;itemconfigure&lt;/b&gt; widget commands. Most items do not support indexing or selection or the commands related to them, such as &lt;b&gt;index&lt;/b&gt; and &lt;b&gt;insert&lt;/b&gt;. Where items do support these facilities, it is noted explicitly in the descriptions below. At present, text, line and polygon items provide this support. For lines and polygons the indexing facility is used to manipulate the coordinates of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc6ba8dd1031b26529127aae40e600cd3b20c74" translate="yes" xml:space="preserve">
          <source>The selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84aa9abbeb7f56556a897b2159aa30c50635d9f" translate="yes" xml:space="preserve">
          <source>The semantics of &lt;b&gt;apply&lt;/b&gt; can also be described by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ea41782c205631d5ba9c40f48da3de8681f29e" translate="yes" xml:space="preserve">
          <source>The set of hidden commands in an interpreter can be manipulated by a trusted interpreter using &lt;b&gt;interp expose&lt;/b&gt; and &lt;b&gt;interp hide&lt;/b&gt;. The &lt;b&gt;interp expose&lt;/b&gt; command moves a hidden command to the set of exposed commands in the interpreter identified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dca3ba24f3b5ab59058205a4d959abed8b62971" translate="yes" xml:space="preserve">
          <source>The side effect of &lt;b&gt;tdbc::mysql::connection create&lt;/b&gt; is to create a new database connection.. See &lt;b&gt;tdbc::connection(n)&lt;/b&gt; for the details of how to use the connection to manipulate a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7291a467bbd8aad44a2ce39e65f6a0148dfd6087" translate="yes" xml:space="preserve">
          <source>The side effect of &lt;b&gt;tdbc::odbc::connection create&lt;/b&gt; is to create a new database connection.. See &lt;b&gt;tdbc::connection(n)&lt;/b&gt; for the details of how to use the connection to manipulate a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7266ae1f5603731980051a92afb358b87e34b8ef" translate="yes" xml:space="preserve">
          <source>The side effect of &lt;b&gt;tdbc::postgres::connection create&lt;/b&gt; is to create a new database connection.. See &lt;b&gt;tdbc::connection(n)&lt;/b&gt; for the details of how to use the connection to manipulate a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f04b35f1fe3ec6a8f661aed1a6cc1543871c448" translate="yes" xml:space="preserve">
          <source>The simplest way to use the operators is often by using &lt;b&gt;&lt;a href=&quot;namespace.htm&quot;&gt;namespace path&lt;/a&gt;&lt;/b&gt; to make the commands available. This has the advantage of not affecting the set of commands defined by the current namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad61da75dad89a978dcd42d840ac97b9e6bb0529" translate="yes" xml:space="preserve">
          <source>The single command &lt;b&gt;runAllTests&lt;/b&gt; is evaluated to run an entire test suite, spanning many files and directories. The configuration options of &lt;b&gt;tcltest&lt;/b&gt; control the precise operations. The &lt;b&gt;runAllTests&lt;/b&gt; command begins by printing a summary of its configuration to &lt;b&gt;outputChannel&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7a1b08291f192046bf22627f05cb23ff3ed83b" translate="yes" xml:space="preserve">
          <source>The single letter abbreviations noted above are also recognized so that &amp;ldquo;&lt;b&gt;configure -verbose pt&lt;/b&gt;&amp;rdquo; is the same as &amp;ldquo;&lt;b&gt;configure -verbose {pass start}&lt;/b&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af7ed7568d746e075b18a9041517d5cd4280c6a" translate="yes" xml:space="preserve">
          <source>The single-argument form is a simple &amp;ldquo;full-close&amp;rdquo;: all buffered output is flushed to the channel's output device, any buffered input is discarded, the underlying file or device is closed, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ddf4b3390ac2236ffb39938de2562cf92c6f26" translate="yes" xml:space="preserve">
          <source>The size modifier field is used only when scanning a substring into one of Tcl's integer values. The size modifier field dictates the integer range acceptable to be stored in a variable, or, for the inline case, in a position in the result list. The syntactically valid values for the size modifier are &lt;b&gt;h&lt;/b&gt;, &lt;b&gt;L&lt;/b&gt;, &lt;b&gt;l&lt;/b&gt;, and &lt;b&gt;ll&lt;/b&gt;. The &lt;b&gt;h&lt;/b&gt; size modifier value is equivalent to the absence of a size modifier in the the conversion specifier. Either one indicates the integer range to be stored is limited to the same range produced by the &lt;b&gt;&lt;a href=&quot;mathfunc.htm&quot;&gt;int()&lt;/a&gt;&lt;/b&gt; function of the &lt;b&gt;&lt;a href=&quot;expr.htm&quot;&gt;expr&lt;/a&gt;&lt;/b&gt; command. The &lt;b&gt;L&lt;/b&gt; size modifier is equivalent to the &lt;b&gt;l&lt;/b&gt; size modifier. Either one indicates the integer range to be stored is limited to the same range produced by the &lt;b&gt;&lt;a href=&quot;mathfunc.htm&quot;&gt;wide()&lt;/a&gt;&lt;/b&gt; function of the &lt;b&gt;&lt;a href=&quot;expr.htm&quot;&gt;expr&lt;/a&gt;&lt;/b&gt; command. The &lt;b&gt;ll&lt;/b&gt; size modifier indicates that the integer range to be stored is unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60184481a82bc595c328d59687b2c6ee7d89ee0f" translate="yes" xml:space="preserve">
          <source>The size modifiers are ignored when formatting floating-point values. The &lt;b&gt;ll&lt;/b&gt; modifier has no &lt;b&gt;sprintf&lt;/b&gt; counterpart. The &lt;b&gt;b&lt;/b&gt; specifier has no &lt;b&gt;sprintf&lt;/b&gt; counterpart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8b200f2de4e9a4e487f622a9a1c826817406ee" translate="yes" xml:space="preserve">
          <source>The size of the uncompressed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afae7ed0d21ae45d3ddd33152b62e2a4f536e7f" translate="yes" xml:space="preserve">
          <source>The space and Select keys make a selection at the location cursor (active element) just as if mouse button 1 had been pressed over this element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2445d8fc1a3c1adeaa72a18fb0530e16603ccf6d" translate="yes" xml:space="preserve">
          <source>The spinbox widget generates a &lt;b&gt;&amp;lt;&amp;lt;Increment&amp;gt;&amp;gt;&lt;/b&gt; virtual event when the user presses &amp;lt;Up&amp;gt;, and a &lt;b&gt;&amp;lt;&amp;lt;Decrement&amp;gt;&amp;gt;&lt;/b&gt; virtual event when the user presses &amp;lt;Down&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3c0ddc563165b7682b4bff2798f8337f8dee60" translate="yes" xml:space="preserve">
          <source>The stack will be unwound until the error is trapped by a suitable &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;try.htm&quot;&gt;try&lt;/a&gt;&lt;/b&gt; command. If it reaches the event loop without being trapped, it will be reported through the &lt;b&gt;&lt;a href=&quot;bgerror.htm&quot;&gt;bgerror&lt;/a&gt;&lt;/b&gt; mechanism. If it reaches the top level of script evaluation in &lt;b&gt;&lt;a href=&quot;../usercmd/tclsh.htm&quot;&gt;tclsh&lt;/a&gt;&lt;/b&gt;, it will be printed on the console before, in the non-interactive case, causing an exit (the behavior in other programs will depend on the details of how Tcl is embedded and used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b36b7c23730209382306913619ef16ac9c69a1" translate="yes" xml:space="preserve">
          <source>The standard Tk &amp;lt;&amp;lt;Cut&amp;gt;&amp;gt;, &amp;lt;&amp;lt;Copy&amp;gt;&amp;gt;, &amp;lt;&amp;lt;Paste&amp;gt;&amp;gt;, and &amp;lt;&amp;lt;Clear&amp;gt;&amp;gt; virtual events operate on the selection in the expected manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fc80c46ad3370e7e9089755f48fb86fccd7de3" translate="yes" xml:space="preserve">
          <source>The standard Tk entry widget automatically disables validation (by setting &lt;b&gt;-validate&lt;/b&gt; to &lt;b&gt;none&lt;/b&gt;) if the &lt;b&gt;-validatecommand&lt;/b&gt; or &lt;b&gt;-invalidcommand&lt;/b&gt; modifies the entry's value. The Tk themed entry widget only disables validation if one of the validation scripts raises an error, or if &lt;b&gt;-validatecommand&lt;/b&gt; does not return a valid boolean value. (Thus, it is not necessary to re-enable validation after modifying the entry value in a validation script).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96174f1ed2c3a224a3dbc3589cf25710f160444b" translate="yes" xml:space="preserve">
          <source>The standard configuration options &lt;b&gt;-encoding&lt;/b&gt;, &lt;b&gt;-isolation&lt;/b&gt;, &lt;b&gt;-readonly&lt;/b&gt; and &lt;b&gt;-timeout&lt;/b&gt; are all recognized, both on &lt;b&gt;tdbc::sqlite3::connection create&lt;/b&gt; and on the &lt;b&gt;configure&lt;/b&gt; method of the resulting connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a24cf1e3639a2417d972ee3f2f9904bff2804d" translate="yes" xml:space="preserve">
          <source>The starting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962210e3fe18ec9bf71ab2543a30583d67bfe6e5" translate="yes" xml:space="preserve">
          <source>The stream will be a compressing stream that produces gzip-format output, using compression level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4182f608ccce4c34edd6868aac450fad09a66347" translate="yes" xml:space="preserve">
          <source>The stream will be a compressing stream that produces raw output, using compression level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b670fb40dd8f683e897efea1aafad7c7e7b2ec5b" translate="yes" xml:space="preserve">
          <source>The stream will be a compressing stream that produces zlib-format output, using compression level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8744d7c01eb43c5623a743bb567d0247448a3a" translate="yes" xml:space="preserve">
          <source>The stream will be a decompressing stream that takes gzip-format input and produces uncompressed output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5c24bad181f2aa5db6114ab1e81104e406767b" translate="yes" xml:space="preserve">
          <source>The stream will be a decompressing stream that takes raw compressed input and produces uncompressed output. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a935fbfc817a704bf626ba5d6623bd54d5759c3f" translate="yes" xml:space="preserve">
          <source>The stream will be a decompressing stream that takes zlib-format input and produces uncompressed output. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de32e295790f2110d7acd7571f9314d92b9ac066" translate="yes" xml:space="preserve">
          <source>The string will be used to title the window created when this menu is torn off. If the title is NULL, then the window will have the title of the menubutton or the text of the cascade item from which this menu was invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce5cb072e9b48418251dc8902f76d42d1740218" translate="yes" xml:space="preserve">
          <source>The structure of the object, its class, superclasses, filters, and mixins, are examined to build a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c831067c039126eec60c65d478a1468768db06" translate="yes" xml:space="preserve">
          <source>The subcommand &lt;b&gt;clear&lt;/b&gt; removes all locales and their data, which are not in the current preference list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472bed6e6a6a4314f4acbf66439c59c5913edf1c" translate="yes" xml:space="preserve">
          <source>The subcommand &lt;b&gt;get&lt;/b&gt; returns the list of currently loaded locales.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded3859f2886b4c0ce451637f94c9d754b1057f7" translate="yes" xml:space="preserve">
          <source>The subcommand &lt;b&gt;present&lt;/b&gt; requires the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e1e33e1a473078efb450490233a0e0d9a9d3aa" translate="yes" xml:space="preserve">
          <source>The subcommand must throw an error if the chosen mode is not supported by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49022da6b522e840e51bcedea6288b55c3606cb2" translate="yes" xml:space="preserve">
          <source>The subcommand should return a list of all options and their values. This list must have an even number of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d28d2b81223df6a8d595915af087f83d6ebd426" translate="yes" xml:space="preserve">
          <source>The subcommand should return the value of the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328d04e95335998bd58d1e1cf92f5b7449d6058f" translate="yes" xml:space="preserve">
          <source>The symbolic string however is the same across systems, and internally translated to the correct number. No other error value has such a mapping to a symbolic string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2746bd2af964c5e59b9f8e73f2d7fb87381df6" translate="yes" xml:space="preserve">
          <source>The syntactic form &lt;b&gt;{*}&lt;/b&gt; is handled like &lt;b&gt;&lt;a href=&quot;eval.htm&quot;&gt;eval&lt;/a&gt;&lt;/b&gt;. I.e. if it is given a literal list argument the system tracks the line number within the list words as well, and otherwise all line numbers are counted relative to the start of each word (smallest scope)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1e11e847336103e496eeb922924fa8028d5c70" translate="yes" xml:space="preserve">
          <source>The tag &lt;b&gt;all&lt;/b&gt; is implicitly associated with every item in the canvas; it may be used to invoke operations on all the items in the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded1ac2a50696a05af732c2167332dbd7175c446" translate="yes" xml:space="preserve">
          <source>The tag &lt;b&gt;current&lt;/b&gt; is managed automatically by Tk; it applies to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7768eaff703c5fb78a207aa61591dd9c7895e5db" translate="yes" xml:space="preserve">
          <source>The text string being inserted/deleted, if any, {} otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b1ab303b9b705c62b1cbb1cb10c128470c2986" translate="yes" xml:space="preserve">
          <source>The text string being inserted/deleted, if any. Otherwise it is an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f2c2cd14f223c08b886437c2b9c2073b05f038" translate="yes" xml:space="preserve">
          <source>The text to display in the column heading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26fe39f07097266990b101695b969a759acc87b" translate="yes" xml:space="preserve">
          <source>The text widget allows for the creation of peer widgets. These are other text widgets which share the same underlying data (text, marks, tags, images, etc). See &lt;b&gt;&lt;a href=&quot;#M89&quot;&gt;PEER WIDGETS&lt;/a&gt;&lt;/b&gt; below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bdd7059d60aedffc4c090ec73a9b73298aa299" translate="yes" xml:space="preserve">
          <source>The text widget also has a built-in undo/redo mechanism. See &lt;b&gt;&lt;a href=&quot;#M88&quot;&gt;THE UNDO MECHANISM&lt;/a&gt;&lt;/b&gt; below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887d3ee36baf643bc7effcdbab5f2c98f4948009" translate="yes" xml:space="preserve">
          <source>The text widget can keep track of changes to the content of the widget by means of the modified flag. Inserting or deleting text will set this flag. The flag can be queried, set and cleared programmatically as well. Whenever the flag changes state a &lt;b&gt;&amp;lt;&amp;lt;Modified&amp;gt;&amp;gt;&lt;/b&gt; virtual event is generated. See the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7377f47f8d4de65f1f9c9d3948bc6280dab7261" translate="yes" xml:space="preserve">
          <source>The text widget has a separate store of all its data concerning each line's textual contents, marks, tags, images and windows, and the undo stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59e075259c23d7c6ca3c215862940228d73dc65" translate="yes" xml:space="preserve">
          <source>The text widget has an unlimited undo and redo mechanism (when the &lt;b&gt;-undo&lt;/b&gt; widget option is true) which records every insert and delete action on a stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781fd46cb32fb2d772f49135a740a4dd6122fbb5" translate="yes" xml:space="preserve">
          <source>The textual label to display for the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c7fea3b7104d50e9022fa8d52cc46967989001" translate="yes" xml:space="preserve">
          <source>The themed Tk widgets generalizes this idea: every widget has a bitmap of independent state flags. Widget state flags include &lt;b&gt;active&lt;/b&gt;, &lt;b&gt;disabled&lt;/b&gt;, &lt;b&gt;pressed&lt;/b&gt;, &lt;b&gt;focus&lt;/b&gt;, etc., (see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a274ea0e6272705673e79d4242fc2d113cf69f5" translate="yes" xml:space="preserve">
          <source>The third example copies in chunks and tests for end of file in the command callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16d95521280b2f5054cd5d35a8948a5dcf44498" translate="yes" xml:space="preserve">
          <source>The third feature of a message widget is that it handles control characters and non-printing characters specially. Tab characters are replaced with enough blank space to line up on the next 8-character boundary. Newlines cause line breaks. Other control characters (ASCII code less than 0x20) and characters not defined in the font are displayed as a four-character sequence &lt;b&gt;\x&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c98497ae977ed17ccfed65758e853450426da6" translate="yes" xml:space="preserve">
          <source>The third form of annotation allows arbitrary windows to be embedded in a text widget. See &lt;b&gt;&lt;a href=&quot;#M72&quot;&gt;EMBEDDED WINDOWS&lt;/a&gt;&lt;/b&gt; below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9524ff57ef4011d392d3d38dd3073f3d03c24a" translate="yes" xml:space="preserve">
          <source>The third form of annotation in text widgets is an embedded window. Each embedded window annotation causes a window to be displayed at a particular point in the text. There may be any number of embedded windows in a text widget, and any widget may be used as an embedded window (subject to the usual rules for geometry management, which require the text window to be the parent of the embedded window or a descendant of its parent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60423d914e447f95efdab4774d67799b24d0350" translate="yes" xml:space="preserve">
          <source>The third form of pattern is used to specify a user-defined, named virtual event. It has the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db529626134b7eae0d0f9f2e92ec64e08cd8259" translate="yes" xml:space="preserve">
          <source>The third portion of a conversion specifier is a decimal number giving a minimum field width for this conversion. It is typically used to make columns line up in tabular printouts. If the converted argument contains fewer characters than the minimum field width then it will be padded so that it is as wide as the minimum field width. Padding normally occurs by adding extra spaces on the left of the converted argument, but the &lt;b&gt;0&lt;/b&gt; and &lt;b&gt;-&lt;/b&gt; flags may be used to specify padding with zeroes on the left or with spaces on the right, respectively. If the minimum field width is specified as &lt;b&gt;*&lt;/b&gt; rather than a number, then the next argument to the &lt;b&gt;format&lt;/b&gt; command determines the minimum field width; it must be an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331199ab61e5640e9d54bb1824f8c0f26dfeecd4" translate="yes" xml:space="preserve">
          <source>The third use for tags is in managing the selection. See &lt;b&gt;&lt;a href=&quot;#M85&quot;&gt;THE SELECTION&lt;/a&gt;&lt;/b&gt; below. With the exception of the special &lt;b&gt;sel&lt;/b&gt; tag, all tags are shared between peer text widgets, and may be manipulated on an equal basis from any such widget. The &lt;b&gt;sel&lt;/b&gt; tag exists separately and independently in each peer text widget (but any tag bindings to &lt;b&gt;sel&lt;/b&gt; are shared).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b71e51b5dc243c384543cdf067fb4a35b900cd" translate="yes" xml:space="preserve">
          <source>The thread created in the above example will never be able to exit . After it has been released with the last matching &lt;b&gt;thread::release&lt;/b&gt; call, the thread will jump out of the &lt;b&gt;thread::wait&lt;/b&gt; and continue to execute commands following . It will enter &lt;b&gt;&lt;a href=&quot;../tclcmd/vwait.htm&quot;&gt;vwait&lt;/a&gt;&lt;/b&gt; command and wait endlessly for events . There is no way one can terminate such thread, so you wouldn't want to do this!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26556bef4ec5b4ea73e5ceca00164b7228818ad" translate="yes" xml:space="preserve">
          <source>The time field from the header if non-zero, expected to be time that the file named by the &lt;b&gt;filename&lt;/b&gt; field was modified. Suitable for use with &lt;b&gt;&lt;a href=&quot;clock.htm&quot;&gt;clock format&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ac2e88da274bed36d229ae5119a1ff7a070b2b" translate="yes" xml:space="preserve">
          <source>The time is also determined according to the fields that are present in the preprocessed format string. In order of preference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ca48d72d7d1d6446d42194efa1a96294b55585" translate="yes" xml:space="preserve">
          <source>The time that the file named in the &lt;b&gt;filename&lt;/b&gt; key was last modified. This will be in the same as is returned by &lt;b&gt;&lt;a href=&quot;clock.htm&quot;&gt;clock seconds&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;file.htm&quot;&gt;file mtime&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954db89110078ceaf260a54ee74d20945f003c17" translate="yes" xml:space="preserve">
          <source>The top or left arrow in the scrollbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8500c8dde182e31f6466849f32cdca171406c679" translate="yes" xml:space="preserve">
          <source>The transformation will be a compressing transformation that produces gzip-format data on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fbf33d94307a3354542b641ec7d65735123e8e" translate="yes" xml:space="preserve">
          <source>The transformation will be a compressing transformation that produces raw compressed data on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825b27ea0a6244facda3779fc39cf33ac34775bf" translate="yes" xml:space="preserve">
          <source>The transformation will be a compressing transformation that produces zlib-format data on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ac2a7f5dc29c129c5598c755e0ade358357915" translate="yes" xml:space="preserve">
          <source>The transformation will be a decompressing transformation that reads gzip-format data from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b84543343793dfc9c7a2c8e1ec7871c9ad40a0" translate="yes" xml:space="preserve">
          <source>The transformation will be a decompressing transformation that reads raw compressed data from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4223d7a75295192337b48b9d6ea1cde78452f5c" translate="yes" xml:space="preserve">
          <source>The transformation will be a decompressing transformation that reads zlib-format data from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d4addb81580c66d88e12e490015db638f34f42" translate="yes" xml:space="preserve">
          <source>The tree area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8b76d39db1b590f5d14cf83bd5285d9146fecd" translate="yes" xml:space="preserve">
          <source>The treeview widget generates the following virtual events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ba9bd0f5ffd0d5d3b9f94ed3c80873be35d3c8" translate="yes" xml:space="preserve">
          <source>The two forms are combined in the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a272c54eee92766731e0f83946b4f8986eae20" translate="yes" xml:space="preserve">
          <source>The two forms may be mixed, so &lt;b&gt;-types {d f r w}&lt;/b&gt; will find all regular files OR directories that have both read AND write permissions. The following are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1f79558d7abea5f4e095bf7988e56f0ec7a891" translate="yes" xml:space="preserve">
          <source>The two-argument form is a &amp;ldquo;half-close&amp;rdquo;: given a bidirectional channel like a socket or command pipeline and a (possibly abbreviated) direction, it closes only the sub-stream going in that direction. This means a shutdown() on a socket, and a close() of one end of a pipe for a command pipeline. Then, the Tcl-level channel data structure is either kept or freed depending on whether the other direction is still open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627d8fef2dd9683cc3586643534474c44f5f39f1" translate="yes" xml:space="preserve">
          <source>The type of the URL contents. Examples include &lt;b&gt;text/html&lt;/b&gt;, &lt;b&gt;image/gif,&lt;/b&gt;&lt;b&gt;application/postscript&lt;/b&gt; and &lt;b&gt;application/x-tcl&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f78ac1f4acc4c01f6d72227a66db44cb693ded" translate="yes" xml:space="preserve">
          <source>The type of the data being compressed, being &lt;b&gt;binary&lt;/b&gt; or &lt;b&gt;text&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62608cea92ed9b0b84dc8625fb141910eb77d0f6" translate="yes" xml:space="preserve">
          <source>The type of the uncompressed data (&lt;b&gt;binary&lt;/b&gt; or &lt;b&gt;text&lt;/b&gt;) if known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c1e3d0da0702471eaa7d1368abb8f7a8207e5b" translate="yes" xml:space="preserve">
          <source>The type of validation currently set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30906ab685b9eacecceef56a6138c89b144c4ad" translate="yes" xml:space="preserve">
          <source>The type of validation that triggered the callback (key, focusin, focusout, forced).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4fe04bb0ccb0d6f20701d6363bafc2b84fb58d" translate="yes" xml:space="preserve">
          <source>The undo mechanism</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1601aa611109da2625f5d345736f5bf29f04ba5" translate="yes" xml:space="preserve">
          <source>The undo mechanism is also linked to the modified flag. This means that undoing or redoing changes can take a modified text widget back to the unmodified state or vice versa. The modified flag will be set automatically to the appropriate state. This automatic coupling does not work when the modified flag has been set by the user, until the flag has been reset again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2c523937f9af5816b18bbdb6b7a66c181365eb" translate="yes" xml:space="preserve">
          <source>The unload procedure must match the following prototype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e569464cad753cf942945877c0b1d5a9c53a5d90" translate="yes" xml:space="preserve">
          <source>The user can exercise some control over the number of colors that a photo image uses with the &lt;b&gt;-palette&lt;/b&gt; configuration option. If this option is used, it specifies the maximum number of shades of each primary color to try to allocate. It can also be used to force the image to be displayed in shades of gray, even on a color display, by giving a single number rather than three numbers separated by slashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a14cca3875f21f906b1e6dce15167067f93241" translate="yes" xml:space="preserve">
          <source>The usual &quot;info&quot; command is a composite command--the command name &lt;b&gt;&lt;a href=&quot;../tclcmd/info.htm&quot;&gt;info&lt;/a&gt;&lt;/b&gt; must be followed by a sub-command like &lt;b&gt;body&lt;/b&gt; or &lt;b&gt;globals&lt;/b&gt;. We will refer to a command like &lt;b&gt;&lt;a href=&quot;../tclcmd/info.htm&quot;&gt;info&lt;/a&gt;&lt;/b&gt; as an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb54cf9dc3851604b5f2dfa19815847096669ec" translate="yes" xml:space="preserve">
          <source>The valid operators (most of which are also available as commands in the &lt;b&gt;tcl::mathop&lt;/b&gt; namespace; see the &lt;b&gt;&lt;a href=&quot;mathop.htm&quot;&gt;mathop&lt;/a&gt;&lt;/b&gt;(n) manual page for details) are listed below, grouped in decreasing order of precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80177a9bf1c0195a23f70cb506c9642f170bbdc" translate="yes" xml:space="preserve">
          <source>The valid options for &lt;b&gt;test&lt;/b&gt; are summarized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2600a9d021430796db83904ac7697f5463ca50d5" translate="yes" xml:space="preserve">
          <source>The validation condition that triggered the callback (&lt;b&gt;key&lt;/b&gt;, &lt;b&gt;focusin&lt;/b&gt;, &lt;b&gt;focusout&lt;/b&gt;, or &lt;b&gt;forced&lt;/b&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6452a8f098351f04ffd7fb472c6f3da4f82873ba" translate="yes" xml:space="preserve">
          <source>The value associated with &lt;b&gt;-translation&lt;/b&gt; is a single item for read-only and write-only channels. The value is a two-element list for read-write channels; the read translation mode is the first element of the list, and the write translation mode is the second element. As a convenience, when setting the translation mode for a read-write channel you can specify a single value that will apply to both reading and writing. When querying the translation mode of a read-write channel, a two-element list will always be returned. The following values are currently supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00351ed02315ceed976dead90d440cf0eb4d5e40" translate="yes" xml:space="preserve">
          <source>The value is a boolean flag that specifies whether a horizontal line should be drawn through the middle of characters in this font. The default value for overstrike is &lt;b&gt;false&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc67e91ffc8a4d2f4406eeb290307fd0b72c2ae1" translate="yes" xml:space="preserve">
          <source>The value is a boolean flag that specifies whether characters in this font should be underlined. The default value for underline is &lt;b&gt;false&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aeec54bf35e686c101af4db0966a62c3a5a6fd2" translate="yes" xml:space="preserve">
          <source>The value must be a boolean. If true, it means that this window will be used as a container in which some other application will be embedded (for example, a Tk toplevel can be embedded using the &lt;b&gt;-use&lt;/b&gt; option). The window will support the appropriate window manager protocols for things like geometry requests. The window should not have any children of its own in this application. This option may not be changed with the &lt;b&gt;configure&lt;/b&gt; widget command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dfa61380213ce37938d554c0efb80094f38583" translate="yes" xml:space="preserve">
          <source>The value must be a boolean. If true, it means that this window will be used as a container in which some other application will be embedded (for example, a Tk toplevel can be embedded using the &lt;b&gt;-use&lt;/b&gt; option). The window will support the appropriate window manager protocols for things like geometry requests. The window should not have any children of its own in this application. This option may not be changed with the &lt;b&gt;configure&lt;/b&gt; widget command. Note that &lt;b&gt;-borderwidth&lt;/b&gt;, &lt;b&gt;-padx&lt;/b&gt; and &lt;b&gt;-pady&lt;/b&gt; are ignored when configured as a container since a container has no border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab4af2aee862308168a496b793fcb09f2d2963b" translate="yes" xml:space="preserve">
          <source>The value must be a proper boolean value. If it is true then a small indicator rectangle will be displayed on the right side of the menubutton and the default menu bindings will treat this as an option menubutton. If false then no indicator will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c568c3786a00bf4d2746074ea2b400edf015598f" translate="yes" xml:space="preserve">
          <source>The value of the User-Agent header in the HTTP request. The default is &amp;ldquo;&lt;b&gt;Tcl http client package 2.7&lt;/b&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3468b561f7e2e3e186712058b8d917fcfa6f2fcf" translate="yes" xml:space="preserve">
          <source>The value of the charset attribute from the &lt;b&gt;Content-Type&lt;/b&gt; meta-data value. If none was specified, this defaults to the RFC standard &lt;b&gt;iso8859-1&lt;/b&gt;, or the value of &lt;b&gt;$::http::defaultCharset&lt;/b&gt;. Incoming text data will be automatically converted from this charset to utf-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ed11355ea64c03809be7dd4a5ac01a6cfda5ed" translate="yes" xml:space="preserve">
          <source>The value of the entry if the edit is allowed. If you are configuring the entry widget to have a new textvariable, this will be the value of that textvariable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72353af19323305cd76b724ec6f2838db7d1cca" translate="yes" xml:space="preserve">
          <source>The value of the spinbox should edition occur. If you are configuring the spinbox widget to have a new textvariable, this will be the value of that textvariable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f9bd949217095e8d617e7d72d8da74f01dc81a" translate="yes" xml:space="preserve">
          <source>The value of the using clause is a list that may contain any or all of the following substitution codes; these codes are substituted with the described value to build the delegated command prefix. Note that the following two statements are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d091a0f555831c69ddf65b078d844fa37626c5bb" translate="yes" xml:space="preserve">
          <source>The value of this variable can be set to control how much tracing information is displayed during bytecode compilation. By default, &lt;b&gt;tcl_traceCompile&lt;/b&gt; is zero and no information is displayed. Setting &lt;b&gt;tcl_traceCompile&lt;/b&gt; to 1 generates a one-line summary in &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stdout&lt;/a&gt;&lt;/b&gt; whenever a procedure or top-level command is compiled. Setting it to 2 generates a detailed listing in &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stdout&lt;/a&gt;&lt;/b&gt; of the bytecode instructions emitted during every compilation. This variable is useful in tracking down suspected problems with the Tcl compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a17c1218aab73c54d2b9fc2c965b09ce1fd8d05" translate="yes" xml:space="preserve">
          <source>The value of this variable can be set to control how much tracing information is displayed during bytecode execution. By default, &lt;b&gt;tcl_traceExec&lt;/b&gt; is zero and no information is displayed. Setting &lt;b&gt;tcl_traceExec&lt;/b&gt; to 1 generates a one-line trace in &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stdout&lt;/a&gt;&lt;/b&gt; on each call to a Tcl procedure. Setting it to 2 generates a line of output whenever any Tcl command is invoked that contains the name of the command and its arguments. Setting it to 3 produces a detailed trace showing the result of executing each bytecode instruction. Note that when &lt;b&gt;tcl_traceExec&lt;/b&gt; is 2 or 3, commands such as &lt;b&gt;&lt;a href=&quot;set.htm&quot;&gt;set&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;incr.htm&quot;&gt;incr&lt;/a&gt;&lt;/b&gt; that have been entirely replaced by a sequence of bytecode instructions are not shown. Setting this variable is useful in tracking down suspected problems with the bytecode compiler and interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955a969afa218e4488290dbd821827dadb2e2e05" translate="yes" xml:space="preserve">
          <source>The value of this variable is a regular expression that can be set to control what are considered &amp;ldquo;non-word&amp;rdquo; characters, for instances like selecting a word by double-clicking in text in Tk. It is platform dependent. On Windows, it defaults to &lt;b&gt;\s&lt;/b&gt;, meaning any Unicode space character. Otherwise it defaults to &lt;b&gt;\W&lt;/b&gt;, which is anything but a Unicode word character (number, letter, or underscore).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015a4dcb9430cc0a2aaa6daa119bc52ef6ea724d" translate="yes" xml:space="preserve">
          <source>The value of this variable is a regular expression that can be set to control what are considered &amp;ldquo;word&amp;rdquo; characters, for instances like selecting a word by double-clicking in text in Tk. It is platform dependent. On Windows, it defaults to &lt;b&gt;\S&lt;/b&gt;, meaning anything but a Unicode space character. Otherwise it defaults to &lt;b&gt;\w&lt;/b&gt;, which is any Unicode word character (number, letter, or underscore).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67115668155a98d3948d0b9483fc211adc20acd4" translate="yes" xml:space="preserve">
          <source>The value rule only matches those key/value pairs whose values match any of the given patterns (in the style of &lt;b&gt;&lt;a href=&quot;string.htm&quot;&gt;string match&lt;/a&gt;&lt;/b&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5fdb1f98e764fec33fd1370b15f88b7bce7327" translate="yes" xml:space="preserve">
          <source>The value to store in the associated &lt;b&gt;-variable&lt;/b&gt; when the widget is deselected. Defaults to &lt;b&gt;0&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c48a7b1b29f8b13c2ffcdcd37ded8221bf60c4a" translate="yes" xml:space="preserve">
          <source>The value to store in the associated &lt;b&gt;-variable&lt;/b&gt; when the widget is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d2df1681f59098fe92d384e52ce4a9b3a5cb14" translate="yes" xml:space="preserve">
          <source>The value to store in the associated &lt;b&gt;-variable&lt;/b&gt; when the widget is selected. Defaults to &lt;b&gt;1&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beeca8caeefcf61c910a193d9df2c775256af440" translate="yes" xml:space="preserve">
          <source>The values of the &lt;b&gt;-errorinfo&lt;/b&gt; and &lt;b&gt;-errorcode&lt;/b&gt; entries of the most recent error are also available as values of the global variables &lt;b&gt;::errorInfo&lt;/b&gt; and &lt;b&gt;::errorCode&lt;/b&gt; respectively. The value of the &lt;b&gt;-errorstack&lt;/b&gt; entry surfaces as &lt;b&gt;&lt;a href=&quot;info.htm&quot;&gt;info errorstack&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f1766bae3a425f11651630c2450a1baa1543bf" translate="yes" xml:space="preserve">
          <source>The variable can be modified by an application to switch to a different library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c658fcebd216201d1cbfa6b927bf4a1548fd2e0" translate="yes" xml:space="preserve">
          <source>The variables are mapped in the scope enclosing the &lt;b&gt;dict with&lt;/b&gt;; it is recommended that this command only be used in a local scope (&lt;b&gt;&lt;a href=&quot;proc.htm&quot;&gt;proc&lt;/a&gt;&lt;/b&gt;edure, lambda term for &lt;b&gt;&lt;a href=&quot;apply.htm&quot;&gt;apply&lt;/a&gt;&lt;/b&gt;, or method). Because of this, the variables set by &lt;b&gt;dict with&lt;/b&gt; will continue to exist after the command finishes (unless explicitly &lt;b&gt;&lt;a href=&quot;unset.htm&quot;&gt;unset&lt;/a&gt;&lt;/b&gt;). Note that the mapping of values to variables does not use traces; changes to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d642807bca08ca76fa5e15009f1f8e176092ec" translate="yes" xml:space="preserve">
          <source>The version number for the operating system running on this machine. On UNIX machines, this is the value returned by &lt;b&gt;uname -r&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfc2a9126c706039fab2fb8e08ae2d412f7ca51" translate="yes" xml:space="preserve">
          <source>The view in the entry can be adjusted by dragging with mouse button 2. If mouse button 2 is clicked without moving the mouse, the selection is copied into the entry at the position of the mouse cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8e1d8987c7bdcddb7ae0270f952072529756df" translate="yes" xml:space="preserve">
          <source>The view in the spinbox can be adjusted by dragging with mouse button 2. If mouse button 2 is clicked without moving the mouse, the selection is copied into the spinbox at the position of the mouse cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24356885c93d9fe8a7437cda32b9c9a28c801610" translate="yes" xml:space="preserve">
          <source>The view in the widget can be adjusted by dragging with mouse button 2. If mouse button 2 is clicked without moving the mouse, the selection is copied into the text at the position of the mouse cursor. The Insert key also inserts the selection, but at the position of the insertion cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c2b4458b68f8c52c1b41ad4dc08f2abd112fe1" translate="yes" xml:space="preserve">
          <source>The widget</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2195db03964c17bc57de8768fa60b2df1a00d256" translate="yes" xml:space="preserve">
          <source>The widget does not respond to user input if the &lt;b&gt;disabled&lt;/b&gt; state is set. The widget sets the &lt;b&gt;selected&lt;/b&gt; state whenever the linked &lt;b&gt;-variable&lt;/b&gt; is set to the widget's &lt;b&gt;-onvalue&lt;/b&gt;, and clears it otherwise. The widget sets the &lt;b&gt;alternate&lt;/b&gt; state whenever the linked &lt;b&gt;-variable&lt;/b&gt; is unset. (The &lt;b&gt;alternate&lt;/b&gt; state may be used to indicate a &amp;ldquo;tri-state&amp;rdquo; or &amp;ldquo;indeterminate&amp;rdquo; selection.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce73521f6b53187b7b40ee91cc7dd0548454dad2" translate="yes" xml:space="preserve">
          <source>The widget does not respond to user input if the &lt;b&gt;disabled&lt;/b&gt; state is set. The widget sets the &lt;b&gt;selected&lt;/b&gt; state whenever the linked &lt;b&gt;-variable&lt;/b&gt; is set to the widget's &lt;b&gt;-value&lt;/b&gt;, and clears it otherwise. The widget sets the &lt;b&gt;alternate&lt;/b&gt; state whenever the linked &lt;b&gt;-variable&lt;/b&gt; is unset. (The &lt;b&gt;alternate&lt;/b&gt; state may be used to indicate a &amp;ldquo;tri-state&amp;rdquo; or &amp;ldquo;indeterminate&amp;rdquo; selection.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f919df272cbc7697d14b792e53ca99b131caf03" translate="yes" xml:space="preserve">
          <source>The widget should adjust its view by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539e48718dba8a098305c28e83d29493eecbe0a8" translate="yes" xml:space="preserve">
          <source>The widget state is a bitmap of independent state flags. Widget state flags include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b24859ed7def4b42269a99033dbef1dddb16115" translate="yes" xml:space="preserve">
          <source>The widget's background color. If unspecified, the theme default is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283e77b4ad4a56f588c484886224f6dff139616f" translate="yes" xml:space="preserve">
          <source>The widget's foreground color. If unspecified, the theme default is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de87d684ba10916649908a9fc29050bddbd6f70" translate="yes" xml:space="preserve">
          <source>The widget's value is invalid. (Potential uses: scale widget value out of bounds, entry widget value failed validation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3438fca08d29b08bbe3892f0f07f646a39686e" translate="yes" xml:space="preserve">
          <source>The width of the column in pixels. Default is something reasonable, probably 200 or so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d5186ba3ec63d1ebcb1e902a2d13ac15f0c527" translate="yes" xml:space="preserve">
          <source>Themes</source>
          <target state="translated">Themes</target>
        </trans-unit>
        <trans-unit id="014b0407486c93fe3161e5422f9717f9400a6258" translate="yes" xml:space="preserve">
          <source>Then &lt;b&gt;chan read&lt;/b&gt; behaves much like described above. Note that most serial ports are comparatively slow; it is entirely possible to get a &lt;b&gt;readable&lt;/b&gt; event for each character read from them. Care must be taken when using &lt;b&gt;chan read&lt;/b&gt; on blocking serial ports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711dc8f4488ef41a13926677ab971b46bbe622a7" translate="yes" xml:space="preserve">
          <source>There are a few remaining points about qualified names that we should cover. Namespaces have nonempty names except for the global namespace. &lt;b&gt;::&lt;/b&gt; is disallowed in simple command, variable, and namespace names except as a namespace separator. Extra colons in any separator part of a qualified name are ignored; i.e. two or more colons are treated as a namespace separator. A trailing &lt;b&gt;::&lt;/b&gt; in a qualified variable or command name refers to the variable or command named {}. However, a trailing &lt;b&gt;::&lt;/b&gt; in a qualified namespace name is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9c6ace939670f833a198ffee9ebbc0517b0589" translate="yes" xml:space="preserve">
          <source>There are a number of additional global configuration options that control the details of how Tk renders by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4a281bd04507d00fdd63882d8233066b647de4" translate="yes" xml:space="preserve">
          <source>There are many times in applications where you want to temporarily restrict what actions the user can take. For example, an application could have a &amp;ldquo;Run&amp;rdquo; button that when pressed causes some processing to occur. However, while the application is busy processing, you probably don't want the user to be able to click the &amp;ldquo;Run&amp;rdquo; button again. You may also want restrict the user from other tasks such as clicking a &amp;ldquo;Print&amp;rdquo; button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fec3c9823f0aa75abbacfbf5b0fc6ae6528e216" translate="yes" xml:space="preserve">
          <source>There are more complex examples of &lt;b&gt;catch&lt;/b&gt; usage in the documentation for the &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4709e2b6427d50f0c01070b557684383dca6037e" translate="yes" xml:space="preserve">
          <source>There are no oval-specific options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d36e6363dc35ae14e59cac914d3d920cf87f402" translate="yes" xml:space="preserve">
          <source>There are no rectangle-specific options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e1ca7f0ab29045b7c00425719b3e278f58794c" translate="yes" xml:space="preserve">
          <source>There are other possible results of the HTTP transaction determined by examining the status from &lt;b&gt;::http::status&lt;/b&gt;. These are described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbd670ee2a36d13ce1cf14071e6f5346d061d77" translate="yes" xml:space="preserve">
          <source>There are several additional commands in the console interpreter that are called in response to activity in the main interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88343dc89d48b23ebe2099c067d956d5d39cebc2" translate="yes" xml:space="preserve">
          <source>There are several interactions between menubuttons and menus; see the &lt;b&gt;&lt;a href=&quot;menu.htm&quot;&gt;menu&lt;/a&gt;&lt;/b&gt; manual entry for information on various menu configurations, such as pulldown menus and option menus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e02f57c15daf524a67e38b97437fb1ce75342b" translate="yes" xml:space="preserve">
          <source>There are two known issues related to nested evaluations of &lt;b&gt;test&lt;/b&gt;. The first issue relates to the stack level in which test scripts are executed. Tests nested within other tests may be executed at the same stack level as the outermost test. For example, in the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0af260b84efd60b0f06e80fbb9f20b67feb4678" translate="yes" xml:space="preserve">
          <source>There are two main validation modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77effc8492bfcf4c3da279e923606464e561b0cf" translate="yes" xml:space="preserve">
          <source>There are two special cases of bracket expressions: the bracket expressions &amp;ldquo;&lt;b&gt;[[:&amp;lt;:]]&lt;/b&gt;&amp;rdquo; and &amp;ldquo;&lt;b&gt;[[:&amp;gt;:]]&lt;/b&gt;&amp;rdquo; are constraints, matching empty strings at the beginning and end of a word respectively. A word is defined as a sequence of word characters that is neither preceded nor followed by word characters. A word character is an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e8ce862727f991bf9ecff1381b117ab24cbaea" translate="yes" xml:space="preserve">
          <source>There is an inherent historical ambiguity between octal character-entry escapes and back references, which is resolved by heuristics, as hinted at above. A leading zero always indicates an octal escape. A single non-zero digit, not followed by another digit, is always taken as a back reference. A multi-digit sequence not starting with a zero is taken as a back reference if it comes after a suitable subexpression (i.e. the number is in the legal range for a back reference), and otherwise is taken as octal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6c11826c1b71d835d7bb44afb7c1190708e10d" translate="yes" xml:space="preserve">
          <source>There is no limit to the recursive depth of subfields, allowing one to build complex data structures . Keyed lists are constructed and accessed via a number of commands . All keyed list management commands take the name of the variable containing the keyed list as an argument (i .e . passed by reference), rather than passing the list directly .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7722e0082d845604c1c90d097853cf201a3428fa" translate="yes" xml:space="preserve">
          <source>There is one special case to permit procedures with variable numbers of arguments. If the last formal argument has the name &amp;ldquo;&lt;b&gt;args&lt;/b&gt;&amp;rdquo;, then a call to the procedure may contain more actual arguments than the procedure has formal arguments. In this case, all of the actual arguments starting at the one that would be assigned to &lt;b&gt;args&lt;/b&gt; are combined into a list (as if the &lt;b&gt;&lt;a href=&quot;list.htm&quot;&gt;list&lt;/a&gt;&lt;/b&gt; command had been used); this combined value is assigned to the local variable &lt;b&gt;args&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826c39dc200ad232326aad2eab7ac0d67edf732c" translate="yes" xml:space="preserve">
          <source>There may be any number of variable substitutions in a single word. Variable substitution is not performed on words enclosed in braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fab91aecb1e98ab4cb32655754247b10af25af5" translate="yes" xml:space="preserve">
          <source>There will be one button for each of these arguments. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f19d4bbe7117c9a5fea3759e3f990a6a770e51" translate="yes" xml:space="preserve">
          <source>These are documented here for completeness only; they form part of the internal implementation of the console and are likely to change or be modified without warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf0eb1b1416b91ab78a79d2d847a45eb9004afc" translate="yes" xml:space="preserve">
          <source>These commands always operate using the real user and group identifiers, not the effective ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee27410b2dc6d8689e7651546d5b1908f539ffa" translate="yes" xml:space="preserve">
          <source>These commands are used to set the protection level for class members that are created when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19a00b60206793e844bb83381d3904574b7a9c2" translate="yes" xml:space="preserve">
          <source>These commands are used to set the protection level for extendedclass members that are created when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629a6045ae91c6935a2a259fd5291191586d98d1" translate="yes" xml:space="preserve">
          <source>These commands are used to set the protection level for widget members that are created when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45141b519e5b9c84b962cfd27ecc1340b2e5ac0" translate="yes" xml:space="preserve">
          <source>These commands can be recreated later as Tcl procedures or aliases, or re-exposed by &lt;b&gt;interp expose&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997e063cc339f871a87d9ff474138055dafca16f" translate="yes" xml:space="preserve">
          <source>These environment variables are used by the &lt;b&gt;&lt;a href=&quot;msgcat.htm&quot;&gt;msgcat&lt;/a&gt;&lt;/b&gt; package to determine what locale to format messages using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d11821512d142bdb9005fed1a33cce08eef86a" translate="yes" xml:space="preserve">
          <source>These events are not normally delivered to Tk applications. They are included for completeness, to make it possible to write X11 window managers in Tk. (These events are only delivered when a client has selected &lt;b&gt;SubstructureRedirectMask&lt;/b&gt; on a window; the Tk core does not use this mask.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7251d5446089956431fcbfa2066ec0cab22a09ed" translate="yes" xml:space="preserve">
          <source>These five options set the certificate authority, certificate authority search path, SSL certificate, transfer cipher, and SSL key to the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e91f0a50e089e9b4dd0013d59b0ee04a98b4f5" translate="yes" xml:space="preserve">
          <source>These options (only meaningful with the &lt;b&gt;-sorted&lt;/b&gt; option) specify how the list is sorted. If more than one is given, the last one takes precedence. The default option is &lt;b&gt;-increasing&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d72befae158eda32667e42593a2cdcd13fda8ec" translate="yes" xml:space="preserve">
          <source>These options are used to search lists of lists. They may be used with any other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03af9442c6a67666840a532967652c588c61a6c" translate="yes" xml:space="preserve">
          <source>These options describe how to interpret the items in the list being searched. They are only meaningful when used with the &lt;b&gt;-exact&lt;/b&gt; and &lt;b&gt;-sorted&lt;/b&gt; options. If more than one is specified, the last one takes precedence. The default is &lt;b&gt;-ascii&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faefae8117f626e0fec07db3c8adf894685d0e0b" translate="yes" xml:space="preserve">
          <source>These options may be given with all matching styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917544579f876aec04378730d6c1662e38bf5330" translate="yes" xml:space="preserve">
          <source>These paths are seen and therefore shared by all Tcl shells in the &lt;b&gt;$::env(PATH)&lt;/b&gt; of the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6d54241a4e11f63bb6f2937d06ac9e8418f378" translate="yes" xml:space="preserve">
          <source>These specify the default timezone used for parsing and formatting times and dates in the &lt;b&gt;&lt;a href=&quot;clock.htm&quot;&gt;clock&lt;/a&gt;&lt;/b&gt; command. On many platforms, the TZ environment variable is set up by the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e236a49aa5ae73cf5518eba3e3960182a7ebd233" translate="yes" xml:space="preserve">
          <source>These subcommands are currently supported, but are likely to go away in a future release as their functionality is either virtually never used or highly misleading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e6bf23914722c4c4fc46e1f2717743a07c0464" translate="yes" xml:space="preserve">
          <source>These subcommands are deprecated and will likely be removed in a future version of Tcl. They use an older syntax in which &lt;b&gt;&lt;a href=&quot;array.htm&quot;&gt;array&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;read.htm&quot;&gt;read&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;write&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;unset.htm&quot;&gt;unset&lt;/a&gt;&lt;/b&gt; are replaced by &lt;b&gt;a&lt;/b&gt;, &lt;b&gt;r&lt;/b&gt;, &lt;b&gt;w&lt;/b&gt; and &lt;b&gt;u&lt;/b&gt; respectively, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ae1118a3417ae13e2d85212584c54565bc3aac" translate="yes" xml:space="preserve">
          <source>These subcommands are used for handling transformations applied to readable channels; though strictly &lt;b&gt;read &lt;/b&gt;is optional, it must be supported if any of the others is or the channel will be made non-readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d327fb865dd360c57542e682d245529565746ff" translate="yes" xml:space="preserve">
          <source>These subcommands are used for handling transformations applied to writable channels; though strictly &lt;b&gt;write&lt;/b&gt; is optional, it must be supported if any of the others is or the channel will be made non-writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5beae3d83715111547375a93b511e7220aad8ba7" translate="yes" xml:space="preserve">
          <source>These two events are sent to every sub-window of a toplevel when they change state. In addition to the focus Window, the Macintosh platform and Windows platforms have a notion of an active window (which often has but is not required to have the focus). On the Macintosh, widgets in the active window have a different appearance than widgets in deactive windows. The &lt;b&gt;Activate&lt;/b&gt; event is sent to all the sub-windows in a toplevel when it changes from being deactive to active. Likewise, the &lt;b&gt;Deactive&lt;/b&gt; event is sent when the window's state changes from active to deactive. There are no useful percent substitutions you would make when binding to these events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e340235672fdb5233eda266d368c3c8efa710bc" translate="yes" xml:space="preserve">
          <source>These two options are synonymous. They present the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694e22c435e967776aac7d240b78b6db3fa5253e" translate="yes" xml:space="preserve">
          <source>These variables are only used in the &lt;b&gt;tcl_endOfWord&lt;/b&gt;, &lt;b&gt;tcl_startOfNextWord&lt;/b&gt;, &lt;b&gt;tcl_startOfPreviousWord&lt;/b&gt;, &lt;b&gt;tcl_wordBreakAfter&lt;/b&gt;, and &lt;b&gt;tcl_wordBreakBefore&lt;/b&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994cff722d2b449d212b4aaca6807cca367e42d3" translate="yes" xml:space="preserve">
          <source>These variables are set by text widgets when they have debugging turned on. The values written to these variables can be used to test or debug text widget operations. These variables are mostly used by Tk's test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fe6980c7337c5cb9d538f870a67583505798a1" translate="yes" xml:space="preserve">
          <source>These variables should not normally be set by user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7971e6a051104074fdae0f02322417b6eb5695a2" translate="yes" xml:space="preserve">
          <source>This</source>
          <target state="translated">This</target>
        </trans-unit>
        <trans-unit id="9fc3330826ddf871e18930937528141cf8aef60b" translate="yes" xml:space="preserve">
          <source>This &lt;b&gt;bgerror&lt;/b&gt; procedure appends errors to a file, with a timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6306730af7590a65e019e6fb8e5ed9ce65c44d" translate="yes" xml:space="preserve">
          <source>This action is controled by the following ensemble:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d94233298f7ab3fcd8616cbf21fdddec6f27ec" translate="yes" xml:space="preserve">
          <source>This adds all exported commands from the &lt;b&gt;Blt&lt;/b&gt; namespace into the current namespace context, so you can write code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45506fbaef937b7a5d4912428aaacce390a38af" translate="yes" xml:space="preserve">
          <source>This adds the given increment value (an integer that defaults to 1 if not specified) to the value that the given key maps to in the dictionary value contained in the given variable, writing the resulting dictionary value back to that variable. Non-existent keys are treated as if they map to 0. It is an error to increment a value for an existing key if that value is not an integer. The updated dictionary value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ccafa7d8f3b47cfa0b86bf3867b27c62c4904d" translate="yes" xml:space="preserve">
          <source>This allows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e0f08ec8169b366ecae9f3efe55df58bfefca8" translate="yes" xml:space="preserve">
          <source>This allows a C code module to be installed temporarily into a long-running Tcl program and then removed again (either because it is no longer needed or because it is being updated with a new version) without having to shut down the overall Tcl process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9546c753955786d2de42c7e9f17a47fe2de60c8f" translate="yes" xml:space="preserve">
          <source>This allows a package to change its locale without causing any locales load or removal in other packages and not to invoke the global locale change callback (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c9c2fb32ea294ad75300095f9ecb32dfaa0ce6" translate="yes" xml:space="preserve">
          <source>This allows an item to override the canvas widget's global</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8903f225859e6898fdff323bbfff6500375d1ad" translate="yes" xml:space="preserve">
          <source>This allows the class of an object to be changed after creation. Note that the class's constructors are not called when this is done, and so the object may well be in an inconsistent state unless additional configuration work is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ff555a856b631d5f7aadc037c05a273ea0979e" translate="yes" xml:space="preserve">
          <source>This appends the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0ef597900f279042dafc765ca7bf1cc982101f" translate="yes" xml:space="preserve">
          <source>This appends the given items to the list value that the given key maps to in the dictionary value contained in the given variable, writing the resulting dictionary value back to that variable. Non-existent keys are treated as if they map to an empty list, and it is legal for there to be no items to append to the list. It is an error for the value that the key maps to to not be representable as a list. The updated dictionary value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5c53c850b9ddad0066b4ff6343b70a5253ab8b" translate="yes" xml:space="preserve">
          <source>This appends the given string (or strings) to the value that the given key maps to in the dictionary value contained in the given variable, writing the resulting dictionary value back to that variable. Non-existent keys are treated as if they map to an empty string. The updated dictionary value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc7ee2cfadf32d86ec1bca6da2b89893dfd45e8" translate="yes" xml:space="preserve">
          <source>This approach has three advantages over the approach in the previous paragraph. First, the location of the &lt;b&gt;tclsh&lt;/b&gt; binary does not have to be hard-wired into the script: it can be anywhere in your shell search path. Second, it gets around the 30-character file name limit in the previous approach. Third, this approach will work even if &lt;b&gt;tclsh&lt;/b&gt; is itself a shell script (this is done on some systems in order to handle multiple architectures or operating systems: the &lt;b&gt;tclsh&lt;/b&gt; script selects one of several binaries to run). The three lines cause both &lt;b&gt;sh&lt;/b&gt; and &lt;b&gt;tclsh&lt;/b&gt; to process the script, but the &lt;b&gt;&lt;a href=&quot;../tclcmd/exec.htm&quot;&gt;exec&lt;/a&gt;&lt;/b&gt; is only executed by &lt;b&gt;sh&lt;/b&gt;. &lt;b&gt;sh&lt;/b&gt; processes the script first; it treats the second line as a comment and executes the third line. The &lt;b&gt;&lt;a href=&quot;../tclcmd/exec.htm&quot;&gt;exec&lt;/a&gt;&lt;/b&gt; statement cause the shell to stop processing and instead to start up &lt;b&gt;tclsh&lt;/b&gt; to reprocess the entire script. When &lt;b&gt;tclsh&lt;/b&gt; starts up, it treats all three lines as comments, since the backslash at the end of the second line causes the third line to be treated as part of the comment on the second line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cd53a429b791e7be70c2744344610bba8ad736" translate="yes" xml:space="preserve">
          <source>This approach has three advantages over the approach in the previous paragraph. First, the location of the &lt;b&gt;wish&lt;/b&gt; binary does not have to be hard-wired into the script: it can be anywhere in your shell search path. Second, it gets around the 30-character file name limit in the previous approach. Third, this approach will work even if &lt;b&gt;wish&lt;/b&gt; is itself a shell script (this is done on some systems in order to handle multiple architectures or operating systems: the &lt;b&gt;wish&lt;/b&gt; script selects one of several binaries to run). The three lines cause both &lt;b&gt;sh&lt;/b&gt; and &lt;b&gt;wish&lt;/b&gt; to process the script, but the &lt;b&gt;&lt;a href=&quot;../tclcmd/exec.htm&quot;&gt;exec&lt;/a&gt;&lt;/b&gt; is only executed by &lt;b&gt;sh&lt;/b&gt;. &lt;b&gt;sh&lt;/b&gt; processes the script first; it treats the second line as a comment and executes the third line. The &lt;b&gt;&lt;a href=&quot;../tclcmd/exec.htm&quot;&gt;exec&lt;/a&gt;&lt;/b&gt; statement cause the shell to stop processing and instead to start up &lt;b&gt;wish&lt;/b&gt; to reprocess the entire script. When &lt;b&gt;wish&lt;/b&gt; starts up, it treats all three lines as comments, since the backslash at the end of the second line causes the third line to be treated as part of the comment on the second line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5fe0864e674267102a483df1a7ed4f5b94d409" translate="yes" xml:space="preserve">
          <source>This arranges for each of the named methods,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d646236bed374719e9a83835932aa536087ed5b" translate="yes" xml:space="preserve">
          <source>This arranges for the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129cbcaca7e05a8d3668bbd24d9d7a84a2b75e6f" translate="yes" xml:space="preserve">
          <source>This asks Internet Explorer (which must already be running) to go to a particularly important website:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893043b54139174349f11a28f40efa74d243b20a" translate="yes" xml:space="preserve">
          <source>This attaches the previously detached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6d317f153d6317a0d864cfc01dfd3edf9f535c" translate="yes" xml:space="preserve">
          <source>This callback is invoked before a set of message catalog files are loaded for the package which has this property set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bb431cf3b005ca8d490d3cd758ae577c2e3b49" translate="yes" xml:space="preserve">
          <source>This callback is invoked when a default local change was performed. Its purpose is to allow a package to update any dependency on the default locale like showing the GUI in another language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73ceb9ceeffa16ce2902c189077f96332e41b83" translate="yes" xml:space="preserve">
          <source>This callback may be used to do any preparation work for message file load or to get the message data from another source like a data base. In this case, no message files are used (mcfolder is unset).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3700958296709c1a928ae8728dba5df60f851bc2" translate="yes" xml:space="preserve">
          <source>This can be handled by using the positional parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060dc1889c127113cfabdc09397c2631831dc53f" translate="yes" xml:space="preserve">
          <source>This can be sent to some widgets (e.g. button, listbox, menu) as an alternative to &amp;lt;space&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e53e45c6715973c13805bb142c922e12ae6761f" translate="yes" xml:space="preserve">
          <source>This can be used to allow an application to be shipped with multiple builds of a shared library, so that the same package works on many versions of an operating system. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b55d9edd6575ef017104ba4b32c48f4017491e" translate="yes" xml:space="preserve">
          <source>This can even do a &amp;ldquo;set-like&amp;rdquo; removal operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3964f0bc6a8e2014894f61a62a9e1d19a0939624" translate="yes" xml:space="preserve">
          <source>This clause matches if the evaluation of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fd1cdc279c29bec75598be555526dfba0fd82e" translate="yes" xml:space="preserve">
          <source>This command (provided the binary string in the variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3119cae2ca493cdf97c655eb2bde5df5098675a" translate="yes" xml:space="preserve">
          <source>This command adds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="144930e7b31b1692d85b55b12ded077bd44f4420" translate="yes" xml:space="preserve">
          <source>This command adjust the view in the window up or down according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfa59c0c3890ef1d34473a53c90cf68d99649a0" translate="yes" xml:space="preserve">
          <source>This command adjusts the view in the window up or down according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab18d906b374e967f4f182e0b3ea65a10db1479" translate="yes" xml:space="preserve">
          <source>This command allows an application to send Dynamic Data Exchange (DDE) command when running under Microsoft Windows. Dynamic Data Exchange is a mechanism where applications can exchange raw data. Each DDE transaction needs a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80717e005460897e3d8d40531509ed171758b626" translate="yes" xml:space="preserve">
          <source>This command also cancels the execution of a delayed command. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d269fef550ba8dbc727c78ca2001bf5b7b25bc" translate="yes" xml:space="preserve">
          <source>This command applies a transformation to each element of a dictionary, returning a new dictionary. It takes three arguments: the first is a two-element list of variable names (for the key and value respectively of each mapping in the dictionary), the second the dictionary value to iterate across, and the third a script to be evaluated for each mapping with the key and value variables set appropriately (in the manner of &lt;b&gt;&lt;a href=&quot;lmap.htm&quot;&gt;lmap&lt;/a&gt;&lt;/b&gt;). In an iteration where the evaluated script completes normally (&lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_OK&lt;/a&gt;&lt;/b&gt;, as opposed to an &lt;b&gt;&lt;a href=&quot;error.htm&quot;&gt;error&lt;/a&gt;&lt;/b&gt;, etc.) the result of the script is put into an accumulator dictionary using the key that is the current contents of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b85cb5ee7a64d42f38d39997be3bbf84ac1eb84" translate="yes" xml:space="preserve">
          <source>This command arranges for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf6833298c6ee6272e14a64e8caabde3fe321e1" translate="yes" xml:space="preserve">
          <source>This command arranges for one or more local variables in the current procedure to refer to variables in an enclosing procedure call or to global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d9eb724a2b2b8e1a4b47277bdb510e39516412" translate="yes" xml:space="preserve">
          <source>This command arranges for zero or more local variables in the current procedure to refer to variables in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acfd4119ab194389a3da12a049f0f560d822b90" translate="yes" xml:space="preserve">
          <source>This command associates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bfc460d7b19f5b2c14448d16e7856bf4d52abd" translate="yes" xml:space="preserve">
          <source>This command attempts to load the definition for a Tcl command named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421b53c96e7107b8a11421954a88e5fb581b94dc" translate="yes" xml:space="preserve">
          <source>This command cancels the previously posted jobs given by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2e3907dcab46c10d450f92131de267ad6470e4" translate="yes" xml:space="preserve">
          <source>This command causes Tcl commands to be executed whenever certain operations are invoked. The legal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eed21ff3fa5a308c09daf8e877360a2dde29a7b" translate="yes" xml:space="preserve">
          <source>This command causes the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86d9cea76f583e5a6d4127bdfa4492c8fa5879a" translate="yes" xml:space="preserve">
          <source>This command causes the current evaluation to be unwound with an error. The error created is described by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36238c55860a50715dae3696cebb43d409a8f71e" translate="yes" xml:space="preserve">
          <source>This command causes the text or coordinates between</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024c98299fcb358da8b203eaec6f38b0257dda7f" translate="yes" xml:space="preserve">
          <source>This command computes the difference between its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a42648b44ff7c307cf7491a7828b66fc38af5c" translate="yes" xml:space="preserve">
          <source>This command computes the difference between the given coordinates and the coordinates given to the last &lt;b&gt;sash mark&lt;/b&gt; command for the given sash. It then moves that sash the computed difference. The return value is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79f28edf9150ef3f92f382cadefb5547414d8a7" translate="yes" xml:space="preserve">
          <source>This command concatenates all of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83acdb27057c56f93b23d335c3e420f96d7063d" translate="yes" xml:space="preserve">
          <source>This command concatenates given arguments and evaluates the resulting Tcl command with trace framework enabled . If the command execution was ok, it takes necessary steps to automatically propagate the trace epoch change to all threads in the application . For AOLserver, only newly created threads actually receive the epoch change . For the Tcl threading extension, all threads created by the extension are automatically updated . If the command execution resulted in Tcl error, no state propagation takes place .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b497f4ddf0d07b32eba8512cea098f301f77a7c2" translate="yes" xml:space="preserve">
          <source>This command concatenates passed arguments and evaluates the resulting script under the internal mutex protection . During the script evaluation, the entire shared variable is locked . For shared variable commands within the script, internal locking is disabled so no deadlock can occur . It is also allowed to unset the shared variable from within the script . The shared variable is automatically created if it did not exists at the time of the first lock operation .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8030607e60d7bc49cd09b6aa66180d7ebe8f1466" translate="yes" xml:space="preserve">
          <source>This command concatenates passed arguments and evaluates the resulting script under the mutex protection . If no mutex is specified by using the ?-lock mutex? optional argument, the internal static mutex is used .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7463265897b2c4132a841aa5cec65ca4bfbfcb55" translate="yes" xml:space="preserve">
          <source>This command configures various low-level aspects of the thread with ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cf27f63c35c47f650c06d8e414479758b634d9" translate="yes" xml:space="preserve">
          <source>This command controls the marking of window hierarchies as &amp;ldquo;busy&amp;rdquo;, rendering them non-interactive while some other operation is proceeding. For more details see the &lt;b&gt;&lt;a href=&quot;busy.htm&quot;&gt;busy&lt;/a&gt;&lt;/b&gt; manual page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd01d33184639f888ecf2308e86aa243592d976e" translate="yes" xml:space="preserve">
          <source>This command controls the undo mechanism and the modified flag. The exact behavior of the command depends on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da12561a32bfa31c6cc9f2cede362ee66d152c02" translate="yes" xml:space="preserve">
          <source>This command controls whether or not the user may interactively resize a top-level window. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff412256bad271d442acbc263e1964544032581" translate="yes" xml:space="preserve">
          <source>This command creates a new image annotation, which will appear in the text at the position given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e737e347fa9a977cfefb956bb0bff4d032f0f7" translate="yes" xml:space="preserve">
          <source>This command creates a new window annotation, which will appear in the text at the position given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6c32d06f69ea9678a194fd3df9a3e6c1a8d63d" translate="yes" xml:space="preserve">
          <source>This command creates a thread that contains a Tcl interpreter . The Tcl interpreter either evaluates the optional &lt;b&gt;script&lt;/b&gt;, if specified, or it waits in the event loop for scripts that arrive via the &lt;b&gt;thread::send&lt;/b&gt; command . The result, if any, of the optional &lt;b&gt;script&lt;/b&gt; is never returned to the caller . The result of &lt;b&gt;thread::create&lt;/b&gt; is the ID of the thread . This is the opaque handle which identifies the newly created thread for all other package commands . The handle of the thread goes out of scope automatically when thread is marked for exit (see the &lt;b&gt;thread::release&lt;/b&gt; command below) .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fbdb44621f5483c3f68113a49191a3ad2c4df9" translate="yes" xml:space="preserve">
          <source>This command creates an alias between one slave and another (see the &lt;b&gt;alias&lt;/b&gt; slave command below for creating aliases between a slave and its master). In this command, either of the slave interpreters may be anywhere in the hierarchy of interpreters under the interpreter invoking the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71987218de265d9d58f9b20399d6a97c8e66c30b" translate="yes" xml:space="preserve">
          <source>This command creates many-readers/single-writer mutexes . Reader/writer mutexes allow you to serialize access to a shared resource more optimally . In situations where a shared resource gets mostly read and seldom modified, you might gain some performace by using reader/writer mutexes instead of exclusive or recursive mutexes .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba77006edd411fc8d8bea5dbd4b5c2b594ef924" translate="yes" xml:space="preserve">
          <source>This command creates new threadpool . It accepts several options as key-value pairs . Options are used to tune some threadpool parameters . The command returns the ID of the newly created threadpool .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2765b5a2f6b1849f0f0edaeb6dac9073dda9b69c" translate="yes" xml:space="preserve">
          <source>This command decrements the thread reference counter . Each call to this command decrements the reference counter by one (1) . If called with the optional thread &lt;b&gt;id&lt;/b&gt;, the command releases the given thread . Otherwise, the current thread is released . Command returns the value of the reference counter after the decrement . When the reference counter reaches zero (0), the target thread is marked for termination . You should not reference the thread after the &lt;b&gt;thread::release&lt;/b&gt; command returns zero or negative integer . The handle of the thread goes out of scope and should not be used any more . Any following reference to the same thread handle will result in Tcl error .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c0a597a5041f10605ae1bb35e7ac1599203a0b" translate="yes" xml:space="preserve">
          <source>This command deletes the windows given by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a36da2c33b1baf741a409bc14dbca71db89afbe" translate="yes" xml:space="preserve">
          <source>This command does the same identification as &lt;b&gt;platform::generic&lt;/b&gt;, for the specified Tcl shell, in contrast to the running shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08336b35c590a2f190c8a0947206c3312bd1fbc7" translate="yes" xml:space="preserve">
          <source>This command does the same identification as &lt;b&gt;platform::identify&lt;/b&gt;, for the specified Tcl shell, in contrast to the running shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1588688a46830ea030475b441f6ba17ced8265bb" translate="yes" xml:space="preserve">
          <source>This command either gets or sets the current background exception handler for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987bf6fe3202994fd3486dab7f147d75972be929" translate="yes" xml:space="preserve">
          <source>This command either gets or sets the current background exception handler for the interpreter identified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be70dd6ff1c934082d1c78ead415b2a0182bdee9" translate="yes" xml:space="preserve">
          <source>This command enters the Tcl event loop to process events, blocking the application if no events are ready. It continues processing events until some event handler sets the value of the global variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b277c45ff23e8d6b5427f7c8d4123fe8bb4889e7" translate="yes" xml:space="preserve">
          <source>This command executes the script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7385de9eb03170f96924351cfdda9c6f449fb61d" translate="yes" xml:space="preserve">
          <source>This command exposes the hidden command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1673cb58b2ee2d3e77261cca13a2d7e6d696190d" translate="yes" xml:space="preserve">
          <source>This command finds and returns the token for the real directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373ed2d492cbff68ca648d129f8f5ffc5378be47" translate="yes" xml:space="preserve">
          <source>This command forces a thread stuck in the &lt;b&gt;thread::wait&lt;/b&gt; command to unconditionaly exit . The thread's exit status defaults to 666 and can be specified using the optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29abc3564869144d74dcd3022a0d914117f7b0d" translate="yes" xml:space="preserve">
          <source>This command generates a formatted string in a fashion similar to the ANSI C &lt;b&gt;sprintf&lt;/b&gt; procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30add7a7fa936c68d85828db097fe8b27ab8ef9d" translate="yes" xml:space="preserve">
          <source>This command has no effect unless executed in the context of a proc body. If the &lt;b&gt;global&lt;/b&gt; command is executed in the context of a proc body, it creates local variables linked to the corresponding global variables (though these linked variables, like those created by &lt;b&gt;&lt;a href=&quot;upvar.htm&quot;&gt;upvar&lt;/a&gt;&lt;/b&gt;, are not included in the list returned by &lt;b&gt;&lt;a href=&quot;info.htm&quot;&gt;info locals&lt;/a&gt;&lt;/b&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7825ca299d891aa4874f8953dd5fb89e8e3080f4" translate="yes" xml:space="preserve">
          <source>This command hides the exposed command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dd6185c3bc12aada5e62ffe158fa49a495e3b1" translate="yes" xml:space="preserve">
          <source>This command implements simple pointer and keyboard grabs for Tk. Tk's grabs are different than the grabs described in the Xlib documentation. When a grab is set for a particular window, Tk restricts all pointer events to the grab window and its descendants in Tk's window hierarchy. Whenever the pointer is within the grab window's subtree, the pointer will behave exactly the same as if there had been no grab at all and all events will be reported in the normal fashion. When the pointer is outside</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c1cd02e3d5a5f59381830d9f652b6f701088fc" translate="yes" xml:space="preserve">
          <source>This command increments the thread reference counter . Each call to this command increments the reference counter by one (1) . Command returns the value of the reference counter after the increment . If called with the optional thread &lt;b&gt;id&lt;/b&gt;, the command preserves the given thread . Otherwise the current thread is preserved .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289abb508c80d9db6c09e8515b3480981c4a0b48" translate="yes" xml:space="preserve">
          <source>This command indicates that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539fab244035d6bb23322b0419801cceec61e5bd" translate="yes" xml:space="preserve">
          <source>This command initializes an element-by-element search through the array given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c897f29758bc952e5091ca067a6cea4967940f" translate="yes" xml:space="preserve">
          <source>This command installs a script that will be called when interesting life cycle events occur for a safe interpreter. When called with no arguments, it returns the currently installed script. When called with one argument, an empty string, the currently installed script is removed and logging is turned off. The script will be invoked with one additional argument, a string describing the event of interest. The main purpose is to help in debugging safe interpreters. Using this facility you can get complete error messages while the safe interpreter gets only generic error messages. This prevents a safe interpreter from seeing messages about failures and other events that might contain sensitive information such as real directory names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3eeb99ac0257e2e16e5760d23abe9a492eade0" translate="yes" xml:space="preserve">
          <source>This command invokes the hidden command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3282f73a2d5b80603c6e1014fa5c43039a9c883" translate="yes" xml:space="preserve">
          <source>This command is &lt;b&gt;&lt;a href=&quot;safe.htm&quot;&gt;safe&lt;/a&gt;&lt;/b&gt; and made accessible to safe interpreters. It can trigger the execution of &lt;b&gt;chan event&lt;/b&gt; handlers, whether in the current interpreter or in other interpreters or other threads, even where the event is posted from a safe interpreter and listened for by a trusted interpreter. &lt;b&gt;Chan event&lt;/b&gt; handlers are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f226c0a9c9fe17d0a125fc5682d378d83807246" translate="yes" xml:space="preserve">
          <source>This command is equivalent to &lt;b&gt;package require&lt;/b&gt; except that it does not try and load the package if it is not already loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e2c6e97aee6e31169484d2de74603d13685697" translate="yes" xml:space="preserve">
          <source>This command is equivalent to calling &lt;b&gt;oo::objdefine&lt;/b&gt; on the class being defined (see &lt;b&gt;&lt;a href=&quot;#M20&quot;&gt;CONFIGURING OBJECTS&lt;/a&gt;&lt;/b&gt; below for a description of the supported values of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cab4ef60fb4d8700b11dd38ed037f7f47f1a95" translate="yes" xml:space="preserve">
          <source>This command is invoked by the Tcl interpreter whenever a script tries to invoke a command that does not exist. The default implementation of &lt;b&gt;unknown&lt;/b&gt; is a library procedure defined when Tcl initializes an interpreter. You can override the default &lt;b&gt;unknown&lt;/b&gt; to change its functionality, or you can register a new handler for individual namespaces using the &lt;b&gt;&lt;a href=&quot;namespace.htm&quot;&gt;namespace unknown&lt;/a&gt;&lt;/b&gt; command. Note that there is no default implementation of &lt;b&gt;unknown&lt;/b&gt; in a safe interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f2b660094036c8bdde109d2ef9dc76a0001d32" translate="yes" xml:space="preserve">
          <source>This command is invoked by the scrollbar's associated widget to tell the scrollbar about the current view in the widget. The command takes two arguments, each of which is a real fraction between 0 and 1. The fractions describe the range of the document that is visible in the associated widget. For example, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b777abb8347606e835456755be641845a84a75f" translate="yes" xml:space="preserve">
          <source>This command is invoked to change the current value of the scale, and hence the position at which the slider is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c701731277b0d9967f371935f2494a6b70fecdf" translate="yes" xml:space="preserve">
          <source>This command is invoked to indicate that version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed27feee0b79fcfe2a804bf5739ad8948812a40" translate="yes" xml:space="preserve">
          <source>This command is normally invoked by the scrollbar's associated widget from an &lt;b&gt;-xscrollcommand&lt;/b&gt; or &lt;b&gt;-yscrollcommand&lt;/b&gt; callback. Specifies the visible range to be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effcfee39a6b022317ba79e4c274c3cde0df7b50" translate="yes" xml:space="preserve">
          <source>This command is normally used within a &lt;b&gt;&lt;a href=&quot;namespace.htm&quot;&gt;namespace eval&lt;/a&gt;&lt;/b&gt; command to create one or more variables within a namespace. Each variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a22f76c3c1b5d61000d25d5bd684f68a2280f3f" translate="yes" xml:space="preserve">
          <source>This command is not recommended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269930be0f234f27a52c933d36b68b43befa2e11" translate="yes" xml:space="preserve">
          <source>This command is similar to &lt;b&gt;interpCreate&lt;/b&gt; except it that does not create the safe interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcea03b48144a53e5842e61438b03342cb7adf64" translate="yes" xml:space="preserve">
          <source>This command is similar to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e523204c2b40e60088ec039fe6295824407ba37d" translate="yes" xml:space="preserve">
          <source>This command is similar to the &lt;b&gt;configure&lt;/b&gt; command, except that it applies to the options for an individual entry, whereas &lt;b&gt;configure&lt;/b&gt; applies to the options for the menu as a whole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431c0b2b81a7d2522489f90b86560eb8453b4ab0" translate="yes" xml:space="preserve">
          <source>This command is similar to the &lt;b&gt;configure&lt;/b&gt; widget command except that it modifies item-specific options for the items given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ae664b916bb406c4fca1b6bc19ada6263529bb" translate="yes" xml:space="preserve">
          <source>This command is typically invoked by Tcl code that wishes to use a particular version of a particular package. The arguments indicate which package is wanted, and the command ensures that a suitable version of the package is loaded into the interpreter. If the command succeeds, it returns the version number that is loaded; otherwise it generates an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdb151813f27f5a92cc9faf60c7560fde65228a" translate="yes" xml:space="preserve">
          <source>This command is typically invoked inside the body of a looping command such as &lt;b&gt;&lt;a href=&quot;for.htm&quot;&gt;for&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;foreach.htm&quot;&gt;foreach&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;while.htm&quot;&gt;while&lt;/a&gt;&lt;/b&gt;. It returns a 3 (&lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_BREAK&lt;/a&gt;&lt;/b&gt;) result code, which causes a break exception to occur. The exception causes the current script to be aborted out to the innermost containing loop command, which then aborts its execution and returns normally. Break exceptions are also handled in a few other situations, such as the &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; command, Tk event bindings, and the outermost scripts of procedure bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a811f7a6ef1c6dcb1c5c1f95ad5886669ecdc3f3" translate="yes" xml:space="preserve">
          <source>This command is typically invoked inside the body of a looping command such as &lt;b&gt;&lt;a href=&quot;for.htm&quot;&gt;for&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;foreach.htm&quot;&gt;foreach&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;while.htm&quot;&gt;while&lt;/a&gt;&lt;/b&gt;. It returns a 4 (&lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_CONTINUE&lt;/a&gt;&lt;/b&gt;) result code, which causes a continue exception to occur. The exception causes the current script to be aborted out to the innermost containing loop command, which then continues with the next iteration of the loop. Catch exceptions are also handled in a few other situations, such as the &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; command and the outermost scripts of procedure bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a7557748ca32b7ae0e97a89f8d8b8c886c75d2" translate="yes" xml:space="preserve">
          <source>This command is used internally by the system to set up the system-specific default paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3131e9b860d939467f63aa8f6c8f859b62607355" translate="yes" xml:space="preserve">
          <source>This command is used to adjust the selection within a listbox. It has several forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc97de112d84794a0406fe9fa6c004ea74eb0e2" translate="yes" xml:space="preserve">
          <source>This command is used to adjust the selection within a spinbox. It has several forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7789d384d2342067ef9795e06e6cb9c9010616" translate="yes" xml:space="preserve">
          <source>This command is used to adjust the selection within an entry. It has several forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3a0569d8958968d2abffb4a5c54584cdd12c6c" translate="yes" xml:space="preserve">
          <source>This command is used to bring the application &amp;ldquo;up to date&amp;rdquo; by entering the event loop repeatedly until all pending events (including idle callbacks) have been processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db56f63d09f9b07666ebf5a89eb030816226fd7b" translate="yes" xml:space="preserve">
          <source>This command is used to create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619e79742eff2942cff8966c2e9df00d8467f492" translate="yes" xml:space="preserve">
          <source>This command is used to create and query widget peers. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcda30ec40c7bba22926ddbc246e21a6126f2523" translate="yes" xml:space="preserve">
          <source>This command is used to delay execution of the program or to execute a command in background sometime in the future. It has several forms, depending on the first argument to the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81f93a0ed90f7b41906b79429b6f2a3a7ab8a73" translate="yes" xml:space="preserve">
          <source>This command is used to force an evaluation of the &lt;b&gt;-validatecommand&lt;/b&gt; independent of the conditions specified by the &lt;b&gt;-validate&lt;/b&gt; option. This is done by temporarily setting the &lt;b&gt;-validate&lt;/b&gt; option to &lt;b&gt;all&lt;/b&gt;. It returns 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c991ff2facf451171e26cb51d6788e95de442d" translate="yes" xml:space="preserve">
          <source>This command is used to implement scanning on canvases. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf9bce2e15499c767e61323c709813252d4183b" translate="yes" xml:space="preserve">
          <source>This command is used to implement scanning on entries. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ca824ed5151f8c45b62337cbce58213e22af42" translate="yes" xml:space="preserve">
          <source>This command is used to implement scanning on listboxes. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c28051087104df9dc160d10596ee7903b4f2eb" translate="yes" xml:space="preserve">
          <source>This command is used to implement scanning on spinboxes. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce86c003130da167c81b146d79dae55358f96d7" translate="yes" xml:space="preserve">
          <source>This command is used to implement scanning on texts. It has two forms, depending on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e3425af3959910279b4bc358bec1a994770dfe" translate="yes" xml:space="preserve">
          <source>This command is used to manage window manager protocols such as &lt;b&gt;WM_DELETE_WINDOW&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4dca93808282868e1d26f70faf973131d13362" translate="yes" xml:space="preserve">
          <source>This command is used to manipulate embedded images. The behavior of the command depends on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11ff790502019c8be665b7acc09f9be1c2bfa2b" translate="yes" xml:space="preserve">
          <source>This command is used to manipulate embedded windows. The behavior of the command depends on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb74cbcdae79274b15d8983f0b58373cdb3ebdaa" translate="yes" xml:space="preserve">
          <source>This command is used to manipulate marks. The exact behavior of the command depends on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf4595e6c9f53179af8b9c71266520f1cb0c516" translate="yes" xml:space="preserve">
          <source>This command is used to manipulate tags. The exact behavior of the command depends on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784b78fa2b9023ae5a6735c241d5e26282054a7b" translate="yes" xml:space="preserve">
          <source>This command is used to manipulate the &lt;b&gt;WM_COLORMAP_WINDOWS&lt;/b&gt; property, which provides information to the window managers about windows that have private colormaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93949172bff57649d4ae347db01f7416b179fc06" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the horizontal position of the information displayed in the canvas's window. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c18b26de54f9e588e4da6af1404ebe8b2d00b1f" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the horizontal position of the information in the widget's window. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d080c380f2684aa8ddd6baf38f7de0e775f992" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the horizontal position of the text in the widget's window. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9378b88e9eef371f77aaa7a269dcfe1cd1c29ae5" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the position of sashes in the panedwindow. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f2b56e4cad549da14f174a7315d2341d6bb0bb" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the position of the sash proxy, used for rubberband-style pane resizing. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025f4c0f4bc92d35a911a0c4f928530af2221d60" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the vertical position of the information displayed in the canvas's window. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b32cff77594ccb86a69929463a80ba50f01957c" translate="yes" xml:space="preserve">
          <source>This command is used to query and change the vertical position of the text in the widget's window. It can take any of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3bb9111c8dac1b35677273f0a757e6fb49fa24" translate="yes" xml:space="preserve">
          <source>This command is used to suspend program execution until the condition variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0dc780cba8b324634082e652f860cc0fae2327" translate="yes" xml:space="preserve">
          <source>This command joins each of its arguments together with spaces after trimming leading and trailing white-space from each of them. If all of the arguments are lists, this has the same effect as concatenating them into a single list. It permits any number of arguments; if no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa05dd390dfdc925f5cea880f07f371a6399189f" translate="yes" xml:space="preserve">
          <source>This command keeps a simple database of the packages available for use by the current interpreter and how to load them into the interpreter. It supports multiple versions of each package and arranges for the correct version of a package to be loaded based on what is needed by the application. This command also detects and reports version clashes. Typically, only the &lt;b&gt;package require&lt;/b&gt; and &lt;b&gt;package provide&lt;/b&gt; commands are invoked in normal Tcl scripts; the other commands are used primarily by system scripts that maintain the package database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e817e5e43855f1fca10e0c7d9e737a674be6e175" translate="yes" xml:space="preserve">
          <source>This command loads binary code from a file into the application's address space and calls an initialization procedure in the package to incorporate it into an interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e738c2296210d273e3444729be90ebdf6fe0393e" translate="yes" xml:space="preserve">
          <source>This command makes it possible to create one or more new Tcl interpreters that co-exist with the creating interpreter in the same application. The creating interpreter is called the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666ff7fc0389cc95dfe98c99e169187883232b8f" translate="yes" xml:space="preserve">
          <source>This command makes the first character on the line after the one given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd0042a7424fd46e8b0a3dbcd61fff92a1cb9aa" translate="yes" xml:space="preserve">
          <source>This command matches the regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bd56b08719d8e9b239233ea3967c41a1e19a5a" translate="yes" xml:space="preserve">
          <source>This command may be used to change the size of the history list to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6093a74d737bdf681ce069b8ca06b31e42e8dde" translate="yes" xml:space="preserve">
          <source>This command may cause the load of locales.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe70abd96fc2881c61d88603a118f7d31e6d50" translate="yes" xml:space="preserve">
          <source>This command may not be invoked from within an &lt;b&gt;&lt;a href=&quot;uplevel.htm&quot;&gt;uplevel&lt;/a&gt;&lt;/b&gt; into a procedure or inside a &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; inside a procedure or lambda.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee9ff7aa246ce1fdc31ae51bcd0d97d53228142" translate="yes" xml:space="preserve">
          <source>This command opens a file, serial port, or command pipeline and returns a channel identifier that may be used in future invocations of commands like &lt;b&gt;&lt;a href=&quot;read.htm&quot;&gt;read&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;puts.htm&quot;&gt;puts&lt;/a&gt;&lt;/b&gt;, and &lt;b&gt;&lt;a href=&quot;close.htm&quot;&gt;close&lt;/a&gt;&lt;/b&gt;. If the first character of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0c93fa8bd4a9697af9becc5d820d8f2219c12f" translate="yes" xml:space="preserve">
          <source>This command opens a network socket and returns a channel identifier that may be used in future invocations of commands like &lt;b&gt;&lt;a href=&quot;read.htm&quot;&gt;read&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;puts.htm&quot;&gt;puts&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;flush.htm&quot;&gt;flush&lt;/a&gt;&lt;/b&gt;. At present only the TCP network protocol is supported over IPv4 and IPv6; future releases may include support for additional protocols. The &lt;b&gt;socket&lt;/b&gt; command may be used to open either the client or server side of a connection, depending on whether the &lt;b&gt;-server&lt;/b&gt; switch is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8688b2d8600617ad257f9a760f85b7267f8ed05f" translate="yes" xml:space="preserve">
          <source>This command parses substrings from an input string in a fashion similar to the ANSI C &lt;b&gt;sscanf&lt;/b&gt; procedure and returns a count of the number of conversions performed, or -1 if the end of the input string is reached before any conversions have been performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d01f4c69477142ea042844a863a6a11512bc83" translate="yes" xml:space="preserve">
          <source>This command passes a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8227c0cc23d33732ad97ac3dd88c32b381015b25" translate="yes" xml:space="preserve">
          <source>This command performes the opposite of the &lt;b&gt;tsv::lpop&lt;/b&gt; command . As its counterpart, it returns no value to the caller .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b036cd92f50934bc4613bda22bc48b29982e7f" translate="yes" xml:space="preserve">
          <source>This command performs file name &amp;ldquo;globbing&amp;rdquo; in a fashion similar to the csh shell or bash shell. It returns a list of the files whose names match any of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fb79e05ba4b5aade404757ad14c068613bddd7" translate="yes" xml:space="preserve">
          <source>This command performs one of several operations on the variable given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ffb54c67ba1c7e875fc7a0600d15b1c0a421ab" translate="yes" xml:space="preserve">
          <source>This command performs variable substitutions, command substitutions, and backslash substitutions on its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe416017a7afd61ff41edb74a6299507bbac876" translate="yes" xml:space="preserve">
          <source>This command prints out a procedure suitable for saving in a Tcl script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fca5636a5d6c0f698212e6fb62ba252246f8a1" translate="yes" xml:space="preserve">
          <source>This command produces a new list from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e575523e3209ae8176cd9dddc356e0ab2ca91fcc" translate="yes" xml:space="preserve">
          <source>This command provides a Tcl interface to the Tk clipboard, which stores data for later retrieval using the selection mechanism (via the &lt;b&gt;-selection CLIPBOARD&lt;/b&gt; option). In order to copy data into the clipboard, &lt;b&gt;clipboard clear&lt;/b&gt; must be called, followed by a sequence of one or more calls to &lt;b&gt;clipboard append&lt;/b&gt;. To ensure that the clipboard is updated atomically, all appends should be completed before returning to the event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d1d4f7961d1e292d4ae5e0dc42b5e4124af99a" translate="yes" xml:space="preserve">
          <source>This command provides a Tcl interface to the X selection mechanism and implements the full selection functionality described in the X Inter-Client Communication Conventions Manual (ICCCM).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0121657c141cc37c92569b4305acfcf185ee88d" translate="yes" xml:space="preserve">
          <source>This command provides access to all frames on the stack, even those hidden from &lt;b&gt;info level&lt;/b&gt;. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28614d28c34eecfc7441f04c2b873f02bc92eb50" translate="yes" xml:space="preserve">
          <source>This command provides facilities for manipulating binary data. The subcommand &lt;b&gt;binary format&lt;/b&gt; creates a binary string from normal Tcl values. For example, given the values 16 and 22, on a 32-bit architecture, it might produce an 8-byte binary string consisting of two 4-byte integers, one for each of the numbers. The subcommand &lt;b&gt;binary scan&lt;/b&gt;, does the opposite: it extracts data from a binary string and returns it as ordinary Tcl string values. The &lt;b&gt;binary encode&lt;/b&gt; and &lt;b&gt;binary decode&lt;/b&gt; subcommands convert binary data to or from string encodings such as base64 (used in MIME messages for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e68173b3f8ec94f9be0e4bc3f6ae73e85e6e87" translate="yes" xml:space="preserve">
          <source>This command provides information about various internals of the Tcl interpreter. The legal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8a0414ee932bc1cc91c01b09e0e8e9fa83020c" translate="yes" xml:space="preserve">
          <source>This command provides script-level access to condition variables . A condition variable creates a safe environment for the program to test some condition, sleep on it when false and be awakened when it might have become true . A condition variable is always used in the conjuction with an exclusive mutex . If you attempt to use other type of mutex in conjuction with the condition variable, a Tcl error will be thrown .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d2e0239a27a295b30e23d6f5ef7d6a178fa1da" translate="yes" xml:space="preserve">
          <source>This command provides several operations for reading from, writing to and otherwise manipulating open channels (such as have been created with the &lt;b&gt;&lt;a href=&quot;open.htm&quot;&gt;open&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;socket.htm&quot;&gt;socket&lt;/a&gt;&lt;/b&gt; commands, or the default named channels &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stdin&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stdout&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/GetStdChan.htm&quot;&gt;stderr&lt;/a&gt;&lt;/b&gt; which correspond to the process's standard input, output and error streams respectively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571d066bf04fe1157509ec6a2276c787d6fdf5c9" translate="yes" xml:space="preserve">
          <source>This command provides several operations on a file's name or attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c10f5284aa37b5ea25370885c30ab018c2fb80" translate="yes" xml:space="preserve">
          <source>This command reads the next line from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46350f628c59b0ac67bfa5f18763b3de873e9eba" translate="yes" xml:space="preserve">
          <source>This command removes one or more variables. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b9446ed08e007156852248794809ab49067e24" translate="yes" xml:space="preserve">
          <source>This command requires Tcl version 8 .6 or higher .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491dd425d89f5540d7f4d05c3090c824a98440b8" translate="yes" xml:space="preserve">
          <source>This command resets the HTTP transaction identified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40070b66511adf1f5baa06f6c45009460e8c529" translate="yes" xml:space="preserve">
          <source>This command retrieves the result of the previously posted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e424e677159b19eb9c458b05479a5b29d203cdc" translate="yes" xml:space="preserve">
          <source>This command returns a Tcl list of the tokens of all the source commands for aliases defined in the interpreter identified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3498c7c947a43f305a8b05111d0b6b70ef00d0" translate="yes" xml:space="preserve">
          <source>This command returns a decimal string giving the numerical index within</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc130684bd04978a792f00a9d21574063fa9a08" translate="yes" xml:space="preserve">
          <source>This command returns a list comprised of all the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99722d9e090c246bc8ac520c0d79ca6d6bdcbc3" translate="yes" xml:space="preserve">
          <source>This command returns a list consisting of all the items that meet the constraints specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270f19c076247ec7c938b4dd59a334a7b27d1c76" translate="yes" xml:space="preserve">
          <source>This command returns a list of IDs of threadpools created with the &lt;b&gt;tpool::create&lt;/b&gt; command . If no threadpools were found, the command will return empty list .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dff52605554b64f053c6ad4ed0c3f7dd9ebe960" translate="yes" xml:space="preserve">
          <source>This command returns a list of thread IDs . These are only for threads that have been created via &lt;b&gt;thread::create&lt;/b&gt; command . If your application creates other threads at the C level, they are not reported by this command .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff21a924a2a3c1b663bda7bf30670adf8d049a5" translate="yes" xml:space="preserve">
          <source>This command returns a simplified identifier describing the platform the Tcl core is running on. In contrast to &lt;b&gt;platform::identify&lt;/b&gt; it leaves out details like kernel version, libc version, etc. The returned identifier has the general format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f34cfaeb98c51aded0c45b9b518d9bab1a078af" translate="yes" xml:space="preserve">
          <source>This command returns an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3733b8877fbc1783df87002d2de1cc42ab133c98" translate="yes" xml:space="preserve">
          <source>This command returns an identifier describing the platform the Tcl core is running on. The returned identifier has the general format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21f5e3b708c18db6655e8a525010d05f79668d9" translate="yes" xml:space="preserve">
          <source>This command returns information about existing event handlers. If no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3b8a5ae78c2c05608bd12a41b8c0eac0195430" translate="yes" xml:space="preserve">
          <source>This command returns the ID of the current thread .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c228b626f9860c9ad5953e1a136754db96ec9040" translate="yes" xml:space="preserve">
          <source>This command returns the contents of &lt;b&gt;tcl_platform(platform)&lt;/b&gt; for the specified Tcl shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b268616612d8aef75f53575165d73f473e75172" translate="yes" xml:space="preserve">
          <source>This command returns the current value of the option named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4027548f1c52078afd264be6cff7c890f5f5836" translate="yes" xml:space="preserve">
          <source>This command rings the bell on the display for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7b24a3ef66b1dd75e191e0d3af3d744a3fbb28" translate="yes" xml:space="preserve">
          <source>This command searches the elements of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eced5b4aec0515f5931a63876d96ecbc65ba3fb" translate="yes" xml:space="preserve">
          <source>This command searches the text for a range of characters tagged with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ae7e24489d25ec328385d717405c2e8c8b26d2" translate="yes" xml:space="preserve">
          <source>This command sends a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6554072555e640587c80f70592ce4e88b45ab6" translate="yes" xml:space="preserve">
          <source>This command sets a handler for errors that occur in scripts sent asynchronously, using the &lt;b&gt;-async&lt;/b&gt; flag of the &lt;b&gt;thread::send&lt;/b&gt; command, to other threads . If no handler is specified, the current handler is returned . The empty string resets the handler to default (unspecified) value . An uncaught error in a thread causes an error message to be sent to the standard error channel . This default reporting scheme can be changed by registering a procedure which is called to report the error . The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a183510acc983c9956231a9b229a0e8b59abc36b" translate="yes" xml:space="preserve">
          <source>This command shifts the view in the window left or right according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3c6492b2d9c0bcd5cb9e3343eef09b2229c49d" translate="yes" xml:space="preserve">
          <source>This command sorts the elements of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bd6d9ea7520d486ccf7eec4f7034de95fe8993" translate="yes" xml:space="preserve">
          <source>This command stops a prior &lt;b&gt;thread::wait&lt;/b&gt; command . Execution of the script passed to newly created thread will continue from the &lt;b&gt;thread::wait&lt;/b&gt; command . If &lt;b&gt;thread::wait&lt;/b&gt; was the last command in the script, the thread will exit . The command returns empty result but may trigger Tcl error with the message &quot;target thread died&quot; in some situations .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbfd4ab82306e23fc8a2d78d9edc857fddce3c8" translate="yes" xml:space="preserve">
          <source>This command supplies a &amp;ldquo;last resort&amp;rdquo; command to invoke during &lt;b&gt;package require&lt;/b&gt; if no suitable version of a package can be found in the &lt;b&gt;package ifneeded&lt;/b&gt; database. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5aebd4a9be141eb48b1acf89aa9af4c9c1fcef" translate="yes" xml:space="preserve">
          <source>This command supports most of the options of the standard Tcl &lt;b&gt;&lt;a href=&quot;../tclcmd/array.htm&quot;&gt;array&lt;/a&gt;&lt;/b&gt; command . In addition to those, it allows binding a shared variable to some persisten storage databases . Currently the persistent options supported are the famous GNU Gdbm and LMDB . These options have to be selected during the package compilation time . The implementation provides hooks for defining other persistency layers, if needed .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ee560a4772b978fadff72b9b005bf963ec48ec" translate="yes" xml:space="preserve">
          <source>This command takes an identifier as returned by &lt;b&gt;platform::identify&lt;/b&gt; and returns a list of identifiers describing compatible architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db697074d2e1cc0f7978a02039379285a530f65" translate="yes" xml:space="preserve">
          <source>This command takes the contents of the specified file or resource and passes it to the Tcl interpreter as a text script. The return value from &lt;b&gt;source&lt;/b&gt; is the return value of the last command executed in the script. If an error occurs in evaluating the contents of the script then the &lt;b&gt;source&lt;/b&gt; command will return that error. If a &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt; command is invoked from within the script then the remainder of the file will be skipped and the &lt;b&gt;source&lt;/b&gt; command will return normally with the result from the &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050b275d6dc98add8997c35b74358363d90330c6" translate="yes" xml:space="preserve">
          <source>This command takes three arguments, the first a two-element list of variable names (for the key and value respectively of each mapping in the dictionary), the second the dictionary value to iterate across, and the third a script to be evaluated for each mapping with the key and value variables set appropriately (in the manner of &lt;b&gt;&lt;a href=&quot;foreach.htm&quot;&gt;foreach&lt;/a&gt;&lt;/b&gt;.) The result of the command is an empty string. If any evaluation of the body generates a &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_BREAK&lt;/a&gt;&lt;/b&gt; result, no further pairs from the dictionary will be iterated over and the &lt;b&gt;dict for&lt;/b&gt; command will terminate successfully immediately. If any evaluation of the body generates a &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_CONTINUE&lt;/a&gt;&lt;/b&gt; result, this shall be treated exactly like a normal &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;TCL_OK&lt;/a&gt;&lt;/b&gt; result. The order of iteration is the order in which the keys were inserted into the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bde8d99670dec784d70aa26fb6953b337519d71" translate="yes" xml:space="preserve">
          <source>This command terminates an array search and destroys all the state associated with that search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6e0fbe99f94caa0ed8d031436f7b2336cd7dd" translate="yes" xml:space="preserve">
          <source>This command treats its arguments as the specification of one or more subprocesses to execute. The arguments take the form of a standard shell pipeline where each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033f36fc33f1c1e9ba517a906394cb086d60d2a9" translate="yes" xml:space="preserve">
          <source>This command treats the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed8e932b72fcb2383146a7d721f986a45d295f4" translate="yes" xml:space="preserve">
          <source>This command treats the variable given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1d796905ee8be4a179cb10d06732abd8d336ce" translate="yes" xml:space="preserve">
          <source>This command tries to unload shared libraries previously loaded with &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; from the application's address space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182d1e39c8573517e1a85781ebfd741e05465f9b" translate="yes" xml:space="preserve">
          <source>This command typically appears only in system configuration scripts to set up the package database. It indicates that a particular version of a particular package is available if needed, and that the package can be added to the interpreter by executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ab446631cd5c20f5bba6949acff74597c6f75e" translate="yes" xml:space="preserve">
          <source>This command waits for one or many jobs, whose job IDs are given in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62297a8facc9fb4f7531a0f5be1d6e9233b4660d" translate="yes" xml:space="preserve">
          <source>This command waits for the thread with ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c22338968e0ff6be86614b476e9b3e5789883f" translate="yes" xml:space="preserve">
          <source>This command will call the Tcl interpreter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945cf42d101b3cc93b2be16a78083c5fd0eb68df" translate="yes" xml:space="preserve">
          <source>This converts the contents of a file (named in the variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8f67ffc67d132259a1aa4fa92f81beed0cf4c5" translate="yes" xml:space="preserve">
          <source>This could also be written as a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d162ea212b5293ffed66344f06547b90d6e275" translate="yes" xml:space="preserve">
          <source>This counts the number of octal digits in a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ad1036757f86f0c1ce189538f0e8c8b97f7ae1" translate="yes" xml:space="preserve">
          <source>This creates a new instance of the class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd857dc03c3aa24051f746a0e9703801163b076" translate="yes" xml:space="preserve">
          <source>This creates or updates a forwarded method called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bc6805d00ad07ecebe625c407c2c990f31dde5" translate="yes" xml:space="preserve">
          <source>This creates or updates a forwarded object method called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5693cdbb2e78fd5dd34864cabbecb947e379a6" translate="yes" xml:space="preserve">
          <source>This creates or updates a method that is implemented as a procedure-like script. The name of the method is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdc678a4750005c0889a2048b0b72651b560667" translate="yes" xml:space="preserve">
          <source>This creates or updates the constructor for a class. The formal arguments to the constructor (defined using the same format as for the Tcl &lt;b&gt;&lt;a href=&quot;proc.htm&quot;&gt;proc&lt;/a&gt;&lt;/b&gt; command) will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8f0f6fa350e5231f2bea3dc8cff45bbbb51139" translate="yes" xml:space="preserve">
          <source>This creates or updates the destructor for a class. Destructors take no arguments, and the body of the destructor will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a612f8bf7844156aa47bf42d451bb4270ba6576" translate="yes" xml:space="preserve">
          <source>This creates, updates or deletes an object method. The name of the method is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae3be667918f586d308c1ebcbca70a4a80a1619" translate="yes" xml:space="preserve">
          <source>This defines a command to make Tcl do nothing at all for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652d83baa7b1323d950dfa811949857ed03896af" translate="yes" xml:space="preserve">
          <source>This definition assumes that a package defined for Tcl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3ec7ee1d916a143b833675879bc77a7896931d" translate="yes" xml:space="preserve">
          <source>This deletes each of the methods called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64511fdf9f0268b6d77d3571787341c657ef80d" translate="yes" xml:space="preserve">
          <source>This demonstrates how to make a channel that reads from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa1bd18c6e119bb3bc3b52299b57306a4bd9a9c" translate="yes" xml:space="preserve">
          <source>This demonstrates what a method call chain looks like, and how traversing along it changes the index into it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c279cc3f945bf46efc01223ce72d21d86f76d4" translate="yes" xml:space="preserve">
          <source>This description was merely a brief overview of object-oriented programming and &lt;b&gt;[incr Tcl]&lt;/b&gt;. A more tutorial introduction is presented in the paper included with this distribution. See the &lt;b&gt;class&lt;/b&gt; command for more details on creating and using classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6919eb36fe8b235f9e9824f113e81f1436a141" translate="yes" xml:space="preserve">
          <source>This detaches the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d68c8c57e8d5daa268d2c6984d410ab48a5fc15" translate="yes" xml:space="preserve">
          <source>This document describes commands looking up a prefix in a list of strings. The following commands are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e03f12f9acaea40eb8284783868ff963758482" translate="yes" xml:space="preserve">
          <source>This document describes the facilities for locating and loading Tcl Modules (see &lt;b&gt;&lt;a href=&quot;#M9&quot;&gt;MODULE DEFINITION&lt;/a&gt;&lt;/b&gt; for the definition of a Tcl Module). The following commands are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d277a211552e4419e832a775588757fcfa8fd5c" translate="yes" xml:space="preserve">
          <source>This enters the event loop so a thread can receive messages from the &lt;b&gt;thread::send&lt;/b&gt; command . This command should only be used within the script passed to the &lt;b&gt;thread::create&lt;/b&gt; . It should be the very last command in the script . If this is not the case, the exiting thread will continue executing the script lines past the &lt;b&gt;thread::wait&lt;/b&gt; which is usually not what you want and/or expect .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a8d6798d38cf70e61c9540ea623863352c4ae5" translate="yes" xml:space="preserve">
          <source>This entry is always present and describes the nature of the location for the command. The recognized values are &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;proc.htm&quot;&gt;proc&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;eval.htm&quot;&gt;eval&lt;/a&gt;&lt;/b&gt;, and &lt;b&gt;precompiled&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8048717f9a0a2fb3001406cc3026a067db70d0" translate="yes" xml:space="preserve">
          <source>This entry is present only for type &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt;. It provides the normalized path of the file the command is in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10410e99b8fe9d7e2fd16f88f5264836efb9e0c" translate="yes" xml:space="preserve">
          <source>This entry is present only if the command is found in the body of a regular Tcl procedure. It then provides the name of that procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742a9a4e87195293a36dcd102f74a677a74b8dd4" translate="yes" xml:space="preserve">
          <source>This entry is present only if the command is found in the body of an anonymous Tcl procedure, i.e. a lambda. It then provides the entire definition of the lambda in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1271ec3bf914910a852d01cc8604b7d7e610d957" translate="yes" xml:space="preserve">
          <source>This entry is present only if the queried frame has a corresponding frame returned by &lt;b&gt;info level&lt;/b&gt;. It provides the index of this frame, relative to the current level (0 and negative numbers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263bf4a36f7b36826eb935af9051f93832f5f1d3" translate="yes" xml:space="preserve">
          <source>This entry provides the number of the line the command is at inside of the script it is a part of. This information is not present for type &lt;b&gt;precompiled&lt;/b&gt;. For type &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt; this information is counted relative to the beginning of the file, whereas for the last two types the line is counted relative to the start of the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7653f79b79e7d6875180b05034b831bfa9675b0" translate="yes" xml:space="preserve">
          <source>This entry provides the string representation of the command. This is usually the unsubstituted form, however for commands which are a canonically-constructed list (e.g., as produced by the &lt;b&gt;&lt;a href=&quot;list.htm&quot;&gt;list&lt;/a&gt;&lt;/b&gt; command) executed by &lt;b&gt;&lt;a href=&quot;eval.htm&quot;&gt;eval&lt;/a&gt;&lt;/b&gt; it is the substituted form as they have no other string representation. Care is taken that the canonicality property of the latter is not spoiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047035ec25a7e97cf7f14ca51be04dfaba9104ff" translate="yes" xml:space="preserve">
          <source>This environment variable, if set, gives the location of the directory considered to be the current user's home directory, and to which a call of &lt;b&gt;&lt;a href=&quot;cd.htm&quot;&gt;cd&lt;/a&gt;&lt;/b&gt; without arguments or with just &amp;ldquo;~&amp;rdquo; as an argument will change into. Most platforms set this correctly by default; it does not normally need to be set by user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425415cee25813b6e081319b460ae56dba49dd3d" translate="yes" xml:space="preserve">
          <source>This example code reads a file all at once, and splits it into a list, with each line in the file corresponding to an element in the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abbe854f81aa0b9358d00f89744c701eac9bfb57" translate="yes" xml:space="preserve">
          <source>This example creates a procedure to copy a URL to a file while printing a progress meter, and prints the meta-data associated with the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a423522c2c1cdb5d2bbaea1c6c8568e9d06dde" translate="yes" xml:space="preserve">
          <source>This example creates an object, copies it, modifies the source object, and then demonstrates that the copied object is indeed a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf9843f6aa06327ec106aed2eb84fc11a9d835c" translate="yes" xml:space="preserve">
          <source>This example defines a simple class hierarchy and creates a new instance of it. It then invokes a method of the object before destroying the hierarchy and showing that the destruction is transitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3e2853321b0c544d3436cdded0dc31ce81abef" translate="yes" xml:space="preserve">
          <source>This example demonstrates basic use of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71aa4d6061541a646d1b22803bd2cba73831519" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to build a simple cache class that applies memoization to all the method calls of the objects it is mixed into, and shows how it can make a difference to computation times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25feb63eca72cac6ad19f1d24e9395e45182cae" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to handle button accelerators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1a6f943b636312db2b8802178ff5fa64acfc64" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use both forms of the &lt;b&gt;oo::define&lt;/b&gt; and &lt;b&gt;oo::objdefine&lt;/b&gt; commands (they work in the same way), as well as illustrating four of the subcommands of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed53c2a3f011b32d9e4b04938e13265c2aa2da6" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use the &lt;b&gt;next&lt;/b&gt; command to call the (super)class's implementation of a method. The script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71497f25a4660883b331446955697408d26931bb" translate="yes" xml:space="preserve">
          <source>This example demonstrates that coroutines start from the global namespace, and that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38cfbd1224fb63e9aa627a4adecd512ea81b4a6" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of coroutines to implement the classic Sieve of Eratosthenes algorithm for finding prime numbers. Note the creation of coroutines inside a coroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc1ad485b65091a5556a4b60ba2ab6d4abcf3f8" translate="yes" xml:space="preserve">
          <source>This example demonstrates what can happen when the &lt;b&gt;vwait&lt;/b&gt; command is nested. The script will never finish because the waiting for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9714c21e5111e1d436231dbc98ac261887dc2299" translate="yes" xml:space="preserve">
          <source>This example reads a file one line at a time and prints it out with the current line number attached to the start of each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d9137270afa071e6d505fc0941a5fb8813c718" translate="yes" xml:space="preserve">
          <source>This example shows a coroutine that will produce an infinite sequence of even values, and a loop that consumes the first ten of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0f88a7f8b737c9e4bba4ca3e1da6b9a7d4d30e" translate="yes" xml:space="preserve">
          <source>This example shows a group of uncoupled checkbuttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8237b99378a5477a31ca13660aad64823d1ebb79" translate="yes" xml:space="preserve">
          <source>This example shows basic use of &lt;b&gt;my&lt;/b&gt; to use the &lt;b&gt;variables&lt;/b&gt; method of the &lt;b&gt;&lt;a href=&quot;object.htm&quot;&gt;oo::object&lt;/a&gt;&lt;/b&gt; class, which is not publicly visible by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfdc79fee02fe6363f02f4b641faa6f1b20d9e3" translate="yes" xml:space="preserve">
          <source>This example shows basic use of &lt;b&gt;self&lt;/b&gt; to provide information about the current object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f32e56dfdcd9216aca0973f95e238e5fa82b06" translate="yes" xml:space="preserve">
          <source>This example shows how a value can be passed around a group of three coroutines that yield to each other:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d107240f982e495fef8abd8fe8c537c0c12fb3" translate="yes" xml:space="preserve">
          <source>This example shows how additional classes can be mixed into an object. It also shows how &lt;b&gt;mixin&lt;/b&gt; is a slot that supports appending:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eda8b6568a1025c3cdc7f514a82962eff395b8e" translate="yes" xml:space="preserve">
          <source>This extends the &lt;b&gt;-rowspan&lt;/b&gt; of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbb56c6a928c0664b793374cac14cacb46ef796" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;b&gt;::http::geturl&lt;/b&gt; to do a POST request that passes the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77999c52b993b9f26a642a54e824aa0b2db811dd" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;b&gt;::http::geturl&lt;/b&gt; to do a POST request that passes the data contained in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cac97f457d28fa08a66619292f1f8cbfdf138a4" translate="yes" xml:space="preserve">
          <source>This font is the default for all GUI items not otherwise specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4e8876727364479309ed08fcc12a2def2f8c84" translate="yes" xml:space="preserve">
          <source>This font is the standard fixed-width font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e994c251885ed1986a006eeb0f86bc3ee447d6" translate="yes" xml:space="preserve">
          <source>This font is used for menu items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660d5b00b79434cba18d17a9c27a996d9481d9b3" translate="yes" xml:space="preserve">
          <source>This font should be used for captions on contained windows or tool dialogs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2de079ef9ffe473b0d9253887b223ce24c5453e" translate="yes" xml:space="preserve">
          <source>This font should be used for column headings in lists and tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ef2acfa92e0803ee00702a5c41eb4e87ecf81b" translate="yes" xml:space="preserve">
          <source>This font should be used for icon captions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a74eeb3dae8e769c989d31dacf08a1fe7078f3" translate="yes" xml:space="preserve">
          <source>This font should be used for tooltip windows (transient information windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e767040cd2d2f532f481a9fb5e454ff96de366" translate="yes" xml:space="preserve">
          <source>This font should be used for user text in entry widgets, listboxes etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6f5d3aad243374b65241263840cb8b5fb9b175" translate="yes" xml:space="preserve">
          <source>This font should be used for window and dialog caption bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a6ba29c9576d5257282fad642ee15ef0ac1d66" translate="yes" xml:space="preserve">
          <source>This form (mnemonically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf9f892d39bc9a5de7b0ba4bd6a8c79eaf7f6b6" translate="yes" xml:space="preserve">
          <source>This form (mnemonically the mirror of &lt;b&gt;d&lt;/b&gt;) is the same as &lt;b&gt;d&lt;/b&gt; except that it stores the double-precision floating point numbers in little-endian order. This conversion only produces meaningful output when used on machines which use the IEEE floating point representation (very common, but not universal.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce787c117f75eed82d06e1c263d4dd77dde354b3" translate="yes" xml:space="preserve">
          <source>This form (mnemonically the mirror of &lt;b&gt;w&lt;/b&gt;) is the same as &lt;b&gt;w&lt;/b&gt; and &lt;b&gt;W&lt;/b&gt; except that it stores the 64-bit integers in the output string in the native byte order of the machine where the Tcl script is running. To determine what the native byte order of the machine is, refer to the &lt;b&gt;byteOrder&lt;/b&gt; element of the &lt;b&gt;&lt;a href=&quot;tclvars.htm&quot;&gt;tcl_platform&lt;/a&gt;&lt;/b&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8e36e2974642f239c6f2f1bed079de8617305c" translate="yes" xml:space="preserve">
          <source>This form delegates all unknown options to the specified component. The except clause can be used to specify a list of exceptions, i.e., option names that will not be so delegated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230c8b7685e2c7617a62641ed4d8047a9f8d992b" translate="yes" xml:space="preserve">
          <source>This form is an even-sized list alternating tokens and parameters. Tokens are currently either &lt;b&gt;CALL&lt;/b&gt;, &lt;b&gt;UP&lt;/b&gt;, or &lt;b&gt;INNER&lt;/b&gt;, but other values may be introduced in the future. &lt;b&gt;CALL&lt;/b&gt; indicates a procedure call, and its parameter is the corresponding &lt;b&gt;info level&lt;/b&gt;&lt;b&gt;0&lt;/b&gt;. &lt;b&gt;UP&lt;/b&gt; indicates a shift in variable frames generated by &lt;b&gt;&lt;a href=&quot;uplevel.htm&quot;&gt;uplevel&lt;/a&gt;&lt;/b&gt; or similar, and applies to the previous &lt;b&gt;CALL&lt;/b&gt; item. Its parameter is the level offset. &lt;b&gt;INNER&lt;/b&gt; identifies the &amp;ldquo;inner context&amp;rdquo;, which is the innermost atomic command or bytecode instruction that raised the error, along with its arguments when available. While &lt;b&gt;CALL&lt;/b&gt; and &lt;b&gt;UP&lt;/b&gt; allow to follow complex call paths, &lt;b&gt;INNER&lt;/b&gt; homes in on the offending operation in the innermost procedure call, even going to sub-expression granularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dd7369305617da147854114573c4ef5050235d" translate="yes" xml:space="preserve">
          <source>This form is called &amp;ldquo;bounded&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8cdfe6e51805b3bbd7264596e2c391b81e35ca" translate="yes" xml:space="preserve">
          <source>This form is called &amp;ldquo;min-bounded&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14916609dc49de71565fd51d66f6802f8d5aa10" translate="yes" xml:space="preserve">
          <source>This form is called &amp;ldquo;min-unbound&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073bbce35399c9253fb55d998f101a1b344129af" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;H&lt;/b&gt; except that the digits are stored in low-to-high order within each byte. This is seldom required. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595f5fa470689041004ff370126729ddf1d72bb8" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;H&lt;/b&gt;, except the digits are taken in reverse (low-to-high) order within each byte. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fb09d338cbecb6cd337d18051ccf7f1c79cff7" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;I&lt;/b&gt; except that the data is interpreted as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc39a2bd6b1c6577f6e9763aab72a07fefd3c06" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;a&lt;/b&gt; except that spaces are used for padding instead of nulls. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8013a0725f965f2fa26a250895105596b83e9f" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;a&lt;/b&gt;, except trailing blanks and nulls are stripped from the scanned value before it is stored in the variable. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c0b49604ea33323948497fcc5b3504d7b02ef4" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;b&lt;/b&gt; except that the bits are stored in high-to-low order within each byte. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f4c00e94e6a8cd441b0c15b79561d97e1e08e9" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;b&lt;/b&gt;, except the bits are taken in high-to-low order within each byte. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c6a779566543a84d2b9b2969994228d1b4dc2a" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;c&lt;/b&gt; except that it stores one or more 16-bit integers in little-endian byte order in the output string. The low-order 16-bits of each integer are stored as a two-byte value at the cursor position with the least significant byte stored first. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e6719ceed4a388401c115db777df719ba39420" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;c&lt;/b&gt; except that it stores one or more 32-bit integers in little-endian byte order in the output string. The low-order 32-bits of each integer are stored as a four-byte value at the cursor position with the least significant byte stored first. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb97229d650a4f37577999b46f32b9938bae9ef" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;c&lt;/b&gt; except that it stores one or more 64-bit integers in little-endian byte order in the output string. The low-order 64-bits of each integer are stored as an eight-byte value at the cursor position with the least significant byte stored first. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12682e6c47274e7a6699489bc760f484b32a476d" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;c&lt;/b&gt; except that it stores one or more one or more single-precision floating point numbers in the machine's native representation in the output string. This representation is not portable across architectures, so it should not be used to communicate floating point numbers across the network. The size of a floating point number may vary across architectures, so the number of bytes that are generated may vary. If the value overflows the machine's native representation, then the value of FLT_MAX as defined by the system will be used instead. Because Tcl uses double-precision floating point numbers internally, there may be some loss of precision in the conversion to single-precision. For example, on a Windows system running on an Intel Pentium processor,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793c3892e1a288e40432922309cac2ed88da4e17" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;d&lt;/b&gt; except that the data is interpreted as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7525ae95b47fe8bad24edc8de790b17d41b68266" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;f&lt;/b&gt; except that it stores one or more one or more double-precision floating point numbers in the machine's native representation in the output string. For example, on a Windows system running on an Intel Pentium processor,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4481690373b3fe550d12d709992562c7d1272c" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;f&lt;/b&gt; except that the data is interpreted as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70076c29a6dbc9c5ca79f8968b5c06c570fca5d" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;i&lt;/b&gt; except that it stores one or more one or more 32-bit integers in big-endian byte order in the output string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ba7bcb35e4705728e92b1e41aa05444ec63b31" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;q&lt;/b&gt; except that it stores the double-precision floating point numbers in big-endian order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1390b256e300c1f20b82391d9a0052f12ad50760" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;r&lt;/b&gt; except that it stores the single-precision floating point numbers in big-endian order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f4afd6bfcde439c14920121db47adc13e3a0d6" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;s&lt;/b&gt; except that it stores one or more 16-bit integers in big-endian byte order in the output string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1323b2e2af49385805e34d120f536999d561b766" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;s&lt;/b&gt; except that the data is interpreted as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0f89a924682e30f76da401e5a965adb791bd9f" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;w&lt;/b&gt; except that it stores one or more one or more 64-bit integers in big-endian byte order in the output string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934bb3582e876b87831a93d56359521d90437568" translate="yes" xml:space="preserve">
          <source>This form is the same as &lt;b&gt;w&lt;/b&gt; except that the data is interpreted as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fba315461983fafc50d4dd1fa14024d440bc63" translate="yes" xml:space="preserve">
          <source>This form of &lt;b&gt;test&lt;/b&gt; is provided to support test suites written for version 1 of the &lt;b&gt;tcltest&lt;/b&gt; package, and also a simpler interface for a common usage. It is the same as &amp;ldquo;&lt;b&gt;test&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041e28957af6de63b3a34f5cfb5c4ec9a12ed81a" translate="yes" xml:space="preserve">
          <source>This form of &lt;b&gt;test&lt;/b&gt; was provided to enable passing many options spanning several lines to &lt;b&gt;test&lt;/b&gt; as a single argument quoted by braces, rather than needing to backslash quote the newlines between arguments to &lt;b&gt;test&lt;/b&gt;. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ce7a53080674bbcc1784438ba6744ef398e7de" translate="yes" xml:space="preserve">
          <source>This form of delegate method delegates method methodName to component componentName. That is, when method methdoNameame is called on an instance of this type, the method and its arguments will be passed to the named component's command instead. That is, the following statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfb23e8d261cb5160f534faa8b33e7d1db9faa0" translate="yes" xml:space="preserve">
          <source>This form of scan is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee7d6543aa978f4a4ad8337075330ad3b02f292" translate="yes" xml:space="preserve">
          <source>This form of the command is used when only the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b2404d7d2ba615e90515558ee2c64a6e5bef74" translate="yes" xml:space="preserve">
          <source>This format group is reserved for internal use within the Tcl library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdd14d95e201e89c81e4b7c8c325b349b51711a" translate="yes" xml:space="preserve">
          <source>This format group is synonymous with &lt;b&gt;%b&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186635c70164e91cc61a27e0c1e7cc8adff957c9" translate="yes" xml:space="preserve">
          <source>This format group is synonymous with &lt;b&gt;%m/%d/%Y&lt;/b&gt;. It should be used only in exchanging data within the &lt;b&gt;en_US&lt;/b&gt; locale, since other locales typically do not use this order for the fields of the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddbfebb896ca19cb151be6f2ea96f6dceefd1d2" translate="yes" xml:space="preserve">
          <source>This format is used for errors where no additional information is available for an error besides the message returned with the error. In these cases the &lt;b&gt;-errorcode&lt;/b&gt; return option will consist of a list containing a single element whose contents are &lt;b&gt;NONE&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6900bdecbc91e33fd7a4a20c579a5e255be3eeda" translate="yes" xml:space="preserve">
          <source>This format is used when a child process has been killed because of a signal. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c3c39c9fe882e8cb110c5ca8889af4ec95525c" translate="yes" xml:space="preserve">
          <source>This format is used when a child process has been suspended because of a signal. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126bf95a29ad55184dacb975d4be635cb4a78260" translate="yes" xml:space="preserve">
          <source>This format is used when a child process has exited with a non-zero exit status. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094c0ace9c42898b072e6de563b1ff15ec95930c" translate="yes" xml:space="preserve">
          <source>This format is used when an arithmetic error occurs (e.g. an attempt to divide zero by zero in the &lt;b&gt;&lt;a href=&quot;expr.htm&quot;&gt;expr&lt;/a&gt;&lt;/b&gt; command).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b854837c24945519eca3c2fe0f5e8205128acbe1" translate="yes" xml:space="preserve">
          <source>This function sets the locale to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e2a3b2d40bd84396f0c3b00612bb40c26080a9" translate="yes" xml:space="preserve">
          <source>This gives the size of the native-machine pointer in bytes (strictly, it is same as the result of evaluating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330e98a306bcd1a004090efd0ba6d261a08298dc" translate="yes" xml:space="preserve">
          <source>This gives the size of the native-machine word in bytes (strictly, it is same as the result of evaluating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939beea4633ad8628e2e26cb40b0610e5b4dbf7c" translate="yes" xml:space="preserve">
          <source>This group of commands manage the list of loaded locales for packages not setting a package locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e52acf492c217556f8fb14e3dbd362a70c0d0bc" translate="yes" xml:space="preserve">
          <source>This identifies the current user based on the login information available on the platform. This value comes from the getuid() and getpwuid() system calls on Unix, and the value from the GetUserName() system call on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f7842f80fdd4f0b4b1e57761d1b730d8e4dd7c" translate="yes" xml:space="preserve">
          <source>This illustrates how you can use Tcl to ensure that files get closed even when errors happen by combining &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;close&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962687c25923c0bb97c708a80cd4abe314714971" translate="yes" xml:space="preserve">
          <source>This implicitly defines the method tail whose subcommands will be delegated to the tail component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1105fac4cb0c01888b246349aaafe23a16a4878f" translate="yes" xml:space="preserve">
          <source>This increases the &lt;b&gt;-columnspan&lt;/b&gt; of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fbcf23230eba49eccf9887ef81a7df7cb52047" translate="yes" xml:space="preserve">
          <source>This information is also present in the &lt;b&gt;-errorstack&lt;/b&gt; entry of the options dictionary returned by 3-argument &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt;; &lt;b&gt;info errorstack&lt;/b&gt; is a convenient way of retrieving it for uncaught errors at top-level in an interactive &lt;b&gt;&lt;a href=&quot;../usercmd/tclsh.htm&quot;&gt;tclsh&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8eb23e5c98b880fd1a79fedc433483ec4ddfbb" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that blocks and waits for the transaction to complete. This only works in trusted code because it uses &lt;b&gt;&lt;a href=&quot;vwait.htm&quot;&gt;vwait&lt;/a&gt;&lt;/b&gt;. Also, it is not useful for the case where &lt;b&gt;::http::geturl&lt;/b&gt; is called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65190eb538119153fbe0b79ce00bb7ff375d93d1" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns just the numeric return code (200, 404, etc.) from the &lt;b&gt;http&lt;/b&gt; element of the state array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fe0ee5a491b4171ae4c4bc5542a8056e8d5bb7" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;&lt;a href=&quot;error.htm&quot;&gt;error&lt;/a&gt;&lt;/b&gt; element of the state array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0056ae42f53837490c924b33a3f47455d5a4359b" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;body&lt;/b&gt; element (i.e., the URL data) of the state array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee476d7357c3aa4bed43d0a2e12ad1adf1ecec8e" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;currentsize&lt;/b&gt; element of the state array, which represents the number of bytes received from the URL in the &lt;b&gt;::http::geturl&lt;/b&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2717e3e0d27b1e22dbe56818c1fd8022bc69dc" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;http&lt;/b&gt; element of the state array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cb4e287b4f781ee2cfbe1ab5aabab735ec7154" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;meta&lt;/b&gt; element of the state array which contains the HTTP response headers. See below for an explanation of this element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2a1d706463c801fcd2ee2e37cd71af6a666bde" translate="yes" xml:space="preserve">
          <source>This is a convenience procedure that returns the &lt;b&gt;status&lt;/b&gt; element of the state array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f990161fc62b763372d807d95feb282f8a9785b9" translate="yes" xml:space="preserve">
          <source>This is a master command meant to run an entire suite of tests, spanning multiple files and/or directories, as governed by the configurable options of &lt;b&gt;tcltest&lt;/b&gt;. See &lt;b&gt;&lt;a href=&quot;#M86&quot;&gt;RUNNING ALL TESTS&lt;/a&gt;&lt;/b&gt; below for a complete description of the many variations possible with &lt;b&gt;runAllTests&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3645aece0e3a7df32fbc49c7301dc93775a27190" translate="yes" xml:space="preserve">
          <source>This is a procedure that accepts arbitrarily many arguments and prints them out, one by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110110bbe79e291bc7aada68d33a5afdc67b4a2e" translate="yes" xml:space="preserve">
          <source>This is a procedure that takes two arguments and prints both their sum and their product. It also returns the string &amp;ldquo;OK&amp;rdquo; to the caller as an explicit result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa5c87f55e3501e40763bea4d0797f5ed32d7ca" translate="yes" xml:space="preserve">
          <source>This is a procedure to write a Tcl string to a binary-encoded channel as UTF-8 data preceded by a length word:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638432893b908e56a600d9186a368e1095ba78a1" translate="yes" xml:space="preserve">
          <source>This is a standard search procedure for use by extensions during their initialization. They call this procedure to look for their script library in several standard directories. The last component of the name of the library directory is normally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57946e361c90645b1e76ba2d27c189f6547999b1" translate="yes" xml:space="preserve">
          <source>This is an alternate way of looking up the definition; it is implemented by manually scanning the list of methods up the inheritance tree. This code assumes that only single inheritance is in use, and that there is no complex use of mixed-in classes (in such cases, using &lt;b&gt;info object call&lt;/b&gt; as above is the simplest way of doing this by far):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c0c6a73444c2a3930af0309d5494096ba4cec5" translate="yes" xml:space="preserve">
          <source>This is an associative array whose elements contain information about the platform on which the application is running, such as the name of the operating system, its current release number, and the machine's instruction set. The elements listed below will always be defined, but they may have empty strings as values if Tcl could not retrieve any relevant information. In addition, extensions and applications may add additional values to the array. The predefined elements are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9777132a709d06490efaa5f9dd5b49fd6534ab2" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;b&gt;trace add variable &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e309f4717a8206a0a9e184a3795503952c505001" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;b&gt;trace info variable &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6d3d27d8756de5f24f96faed52630e165e10ba" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;b&gt;trace remove variable &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99061af684e68daa3d80598e751ae926338c7622" translate="yes" xml:space="preserve">
          <source>This is more easily written using the &lt;b&gt;&lt;a href=&quot;try.htm&quot;&gt;try&lt;/a&gt;&lt;/b&gt; command, as that makes it simpler to trap specific types of errors. This is done using code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8f727e19c41e7e0c5857c080144fabfd0d57bc" translate="yes" xml:space="preserve">
          <source>This is new functionality in [incr Tcl] where the API can still change!!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ddbe6e87560576519536405f95cc9af1c68a50" translate="yes" xml:space="preserve">
          <source>This is replaced by the method name; if the name consists of multiple tokens, they are joined by space characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73207244d5fb6fb9a65e4d53f40d6f43a2c348b5" translate="yes" xml:space="preserve">
          <source>This is replaced by the method name; if the name consists of multiple tokens, they are joined by underscores (&quot;_&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9173079cd6d182c7d09f088b4a3c4786fc511d" translate="yes" xml:space="preserve">
          <source>This is replaced with a single &quot;%&quot;. Thus, to pass the string &quot;%c&quot; to the command as an argument, you'd write &quot;%%c&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d3df605522216acd168d3cbbf33fe1d1011c08" translate="yes" xml:space="preserve">
          <source>This is replaced with the final token of the method name; if the method name has one token, this is identical to &lt;b&gt;%M&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f359bd251e655e3f29705b1151d29a3e7f922d8" translate="yes" xml:space="preserve">
          <source>This is replaced with the fully qualified type name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2939b682408c30ac641118405e3789860a3d2dfb" translate="yes" xml:space="preserve">
          <source>This is replaced with the name of the instance command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e94268d3f4a0b581b4c19cee3b08501ba691a5" translate="yes" xml:space="preserve">
          <source>This is replaced with the name of the instance's private namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750c0569adbf23ae863c95617f84f82faaf4acd1" translate="yes" xml:space="preserve">
          <source>This is replaced with the named component's command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6a0ac31ab9ffa6cfc3129be8efc608e89e7d03" translate="yes" xml:space="preserve">
          <source>This is replaced with the original name of the instance command; for Itcl widgets and widget adaptors, it will be the Tk window name. It remains constant, even if the instance command is renamed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022d1edc08b59c21ba23df8df3a2fc494fde55c8" translate="yes" xml:space="preserve">
          <source>This is required to avoid ambiguities in package naming. If for example the two directories &amp;ldquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc987589848863fb2311135fa709d5d7d0c3380f" translate="yes" xml:space="preserve">
          <source>This is sent to a listbox when the set of selected item(s) in the listbox is updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf207f121f2b25de5fb217713d69d104b975057b" translate="yes" xml:space="preserve">
          <source>This is sent to a menu when the currently selected item in the menu changes. It is intended for use with context-sensitive help systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9478db2577909eedb1d129df631df0404e6b07" translate="yes" xml:space="preserve">
          <source>This is sent to a text widget when its internal data become obsolete, and again when these internal data are back in sync with the widget view. The detail field (%d substitution) is either true (when the widget is in sync) or false (when it is not).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12afe8c4d19544585a8bac2514916ba6ba076504" translate="yes" xml:space="preserve">
          <source>This is sent to a text widget when its undo stack or redo stack becomes empty or unempty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab5e716581a210db00c73bb70cc6757673602dd" translate="yes" xml:space="preserve">
          <source>This is sent to a text widget when the contents of the widget are changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f206070c8ca58517b96e2bf309f3a54cd0d359" translate="yes" xml:space="preserve">
          <source>This is sent to a text widget when the selection in the widget is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d94ee2169b89e0f56afcedc26d47d9efc7370a5" translate="yes" xml:space="preserve">
          <source>This is sent to a text widget when the ttk (Tile) theme changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0acc6c996c423deeabda2931644cacb66c9932" translate="yes" xml:space="preserve">
          <source>This is sent to a widget when the focus enters the widget because of a user-driven &amp;ldquo;tab to widget&amp;rdquo; action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a689c4b8ecd706ca48da8945b3c8557d5eb75f1" translate="yes" xml:space="preserve">
          <source>This is sent to a widget when the focus leaves the widget because of a user-driven &amp;ldquo;tab to widget&amp;rdquo; action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66231d3cd7e5b67b151a45bae41cd69bfcb419da" translate="yes" xml:space="preserve">
          <source>This is sent to widget to notify it that the letter it has underlined (as an accelerator indicator) with the &lt;b&gt;-underline&lt;/b&gt; option has been pressed in combination with the Alt key. The usual response to this is to either focus into the widget (or some related widget) or to invoke the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c641144951dd25641a0094e18ef872c8ab3710ad" translate="yes" xml:space="preserve">
          <source>This is similar to how &lt;b&gt;info level&lt;/b&gt; works, except that this subcommand reports all frames, like &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt;d scripts, &lt;b&gt;&lt;a href=&quot;eval.htm&quot;&gt;eval&lt;/a&gt;&lt;/b&gt;s, &lt;b&gt;&lt;a href=&quot;uplevel.htm&quot;&gt;uplevel&lt;/a&gt;&lt;/b&gt;s, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37849c2d3e20d1cfc162e3d905a449c5fdff43ed" translate="yes" xml:space="preserve">
          <source>This is the classic Tk &amp;ldquo;Hello, World!&amp;rdquo; demonstration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b071781e3584b07619bb73badd7b0a27e8d42329" translate="yes" xml:space="preserve">
          <source>This is the compatible way to do menu bars. You create one menubutton widget for each top-level menu, and typically you arrange a series of menubuttons in a row in a menubar window. You also create the top-level menus and any cascaded submenus, and tie them together with &lt;b&gt;-menu&lt;/b&gt; options in menubuttons and cascade menu entries. The top-level menu must be a child of the menubutton, and each submenu must be a child of the menu that refers to it. Once you have done this, the default bindings will allow users to traverse and invoke the tree of menus via its menubutton; see the &lt;b&gt;&lt;a href=&quot;menubutton.htm&quot;&gt;menubutton&lt;/a&gt;&lt;/b&gt; manual entry for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03cb1e778cf823a4ed1162bd854f547473d2eeb" translate="yes" xml:space="preserve">
          <source>This is the message folder of the package. This option is set by mcload and by the subcommand set. Both are identical and both return the number of loaded message catalog files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582d4b867c7c074bad303b14645e64410d2a8ee" translate="yes" xml:space="preserve">
          <source>This is the most common case. You create a menu widget that will become the menu bar. You then add cascade entries to this menu, specifying the pull down menus you wish to use in your menu bar. You then create all of the pulldowns. Once you have done this, specify the menu using the &lt;b&gt;-menu&lt;/b&gt; option of the toplevel's widget command. See the &lt;b&gt;&lt;a href=&quot;toplevel.htm&quot;&gt;toplevel&lt;/a&gt;&lt;/b&gt; manual entry for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3df2bd46292d22bf1d12d7ea4dbde31c02b9d3" translate="yes" xml:space="preserve">
          <source>This is the most important user-level command of the package as it wraps most of the commands described below . This greatly simplifies things, because user need to learn just this (one) command in order to effectively use the package . Other commands, as desribed below, are included mostly for the sake of completeness .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07fad4e4268de10123877bb11f65693ec114b96" translate="yes" xml:space="preserve">
          <source>This leaves an empty column between the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d945fb198bdd1516aaf110132e073e1f3f5a89a4" translate="yes" xml:space="preserve">
          <source>This lists all words (consisting of all sequences of non-whitespace characters) in a string, and is useful as a more powerful version of the &lt;b&gt;&lt;a href=&quot;split.htm&quot;&gt;split&lt;/a&gt;&lt;/b&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07986ccfdc1717238b80dd6737f53699c10fa0e3" translate="yes" xml:space="preserve">
          <source>This loop prints every value in a list together with the square and cube of the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c772bab0d46a6860c1b078cd837bbf124f5267d" translate="yes" xml:space="preserve">
          <source>This mandatory subcommand is called first, and then never again (for the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be179d94eecc97f2d8c7623c85bd9e4fce70a4c4" translate="yes" xml:space="preserve">
          <source>This mandatory subcommand is called last for the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0996d2e729246b73858a27ae2fb283725c45b6de" translate="yes" xml:space="preserve">
          <source>This manual describes common widget options and commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c1c699099a19e3f8b033b9f65eb8187054b9d3" translate="yes" xml:space="preserve">
          <source>This manual entry describes the common configuration options supported by widgets in the Tk toolkit. Every widget does not necessarily support every option (see the manual entries for individual widgets for a list of the standard options supported by that widget), but if a widget does support an option with one of the names listed below, then the option has exactly the effect described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1403bfa9342fd5611d85bd4e583d87b6389ad127" translate="yes" xml:space="preserve">
          <source>This manual page primarily describes AREs. BREs mostly exist for backward compatibility in some old programs; they will be discussed at the end. POSIX EREs are almost an exact subset of AREs. Features of AREs that are not present in EREs will be indicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6122060f5b78368b29fe70c61ebc8eb7357470dc" translate="yes" xml:space="preserve">
          <source>This method arranges for each variable called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e75db5034714c944aad0f4b472df346593416c" translate="yes" xml:space="preserve">
          <source>This method concatenates the arguments,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0735e09c37750dce88da1713ea3a876dddedb8" translate="yes" xml:space="preserve">
          <source>This method destroys the object,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e6cd70aa8fa0ea654d5f2a0008496a393428ca" translate="yes" xml:space="preserve">
          <source>This method is called when an attempt to invoke the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70ed369f3378a28f0d71c691966fd559389031e" translate="yes" xml:space="preserve">
          <source>This method is used by the &lt;b&gt;oo::object&lt;/b&gt; command to copy the state of one object to another. It is responsible for copying the procedures and variables of the namespace of the source object (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37248e09634d05024ed9a24c302bbaac0a812398" translate="yes" xml:space="preserve">
          <source>This method returns the globally qualified name of the variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17c9a18f73db9fb2d302ca7333edf5191f32c07" translate="yes" xml:space="preserve">
          <source>This method takes the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0c02c0ffddd00225ceceb7218aa79498a30a5a" translate="yes" xml:space="preserve">
          <source>This moves the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898a778e649b3244ba6a2350c3eeed1289a505bb" translate="yes" xml:space="preserve">
          <source>This must be a Tcl list of values. If this option is set then this will override any range set using the &lt;b&gt;-from&lt;/b&gt;, &lt;b&gt;-to&lt;/b&gt; and &lt;b&gt;-increment&lt;/b&gt; options. The widget will instead use the values specified beginning with the first value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c38fe6cc012cbc5bf72333a8870c8ba15652bcf" translate="yes" xml:space="preserve">
          <source>This negates the sense of the match, returning the index of the first non-matching value in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306a5081a9a46b121ffc0db202f87d3270f66da2" translate="yes" xml:space="preserve">
          <source>This not only formats the command correctly, but also captures its namespace context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef59cf7a3414e1bb4e1f43c55fff2633a226ad4" translate="yes" xml:space="preserve">
          <source>This opens a file using a known encoding (CP1252, a very common encoding on Windows), searches for a string, rewrites that part, and truncates the file after a further two lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b503b628ab5b693e8688b99c0db12c5ed61d635" translate="yes" xml:space="preserve">
          <source>This operation (the companion to &lt;b&gt;dict set&lt;/b&gt;) takes the name of a variable containing a dictionary value and places an updated dictionary value in that variable that does not contain a mapping for the given key. Where multiple keys are present, this describes a path through nested dictionaries to the mapping to remove. At least one key must be specified, but the last key on the key-path need not exist. All other components on the path must exist. The updated dictionary value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd6aae7e8e9f2f4d94239a4cebf8ff702e9a8fd" translate="yes" xml:space="preserve">
          <source>This operation takes the name of a variable containing a dictionary value and places an updated dictionary value in that variable containing a mapping from the given key to the given value. When multiple keys are present, this operation creates or updates a chain of nested dictionaries. The updated dictionary value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1082e68cfa8221a950a8e070a60b576e400b729" translate="yes" xml:space="preserve">
          <source>This option (common for all limit types) specifies (if non-empty) a Tcl script to be executed in the global namespace of the interpreter reading and writing the option when the particular limit in the limited interpreter is exceeded. The callback may modify the limit on the interpreter if it wishes the limited interpreter to continue executing. If the callback generates an exception, it is reported through the background exception mechanism (see &lt;b&gt;&lt;a href=&quot;#M54&quot;&gt;BACKGROUND EXCEPTION HANDLING&lt;/a&gt;&lt;/b&gt;). Note that the callbacks defined by one interpreter are completely isolated from the callbacks defined by another, and that the order in which those callbacks are called is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807ebef51a2d030a8c6945415a5832ad197106a4" translate="yes" xml:space="preserve">
          <source>This option (common for all limit types) specifies how frequently (out of the points when the Tcl interpreter is in a consistent state where limit checking is possible) that the limit is actually checked. This allows the tuning of how frequently a limit is checked, and hence how often the limit-checking overhead (which may be substantial in the case of time limits) is incurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7287f01c1e45887fc92e18cc4de46867d61d690d" translate="yes" xml:space="preserve">
          <source>This option (only legal when &lt;b&gt;-regexp&lt;/b&gt; is also specified) specifies the name of a variable into which the list of indices referring to matching substrings found by the regular expression engine will be written. The first element of the list written will be a two-element list specifying the index of the start and index of the first character after the end of the overall substring of the input string (i.e. the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3798055f3ffdd9787aae8bc724a77b59cc1c140" translate="yes" xml:space="preserve">
          <source>This option (only legal when &lt;b&gt;-regexp&lt;/b&gt; is also specified) specifies the name of a variable into which the list of matches found by the regular expression engine will be written. The first element of the list written will be the overall substring of the input string (i.e. the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25b8156a4f6432e84dda2e985aed5ae22da4e85" translate="yes" xml:space="preserve">
          <source>This option (which is enabled by default) controls whether the ensemble command recognizes unambiguous prefixes of its subcommands. When turned off, the ensemble command requires exact matching of subcommand names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad663dbfa92c0b1de8f66ee2d30cc89484dcfa8" translate="yes" xml:space="preserve">
          <source>This option can be one of &lt;b&gt;menubar&lt;/b&gt;, &lt;b&gt;tearoff&lt;/b&gt;, or &lt;b&gt;normal&lt;/b&gt;, and is set when the menu is created. While the string returned by the configuration database will change if this option is changed, this does not affect the menu widget's behavior. This is used by the cloning mechanism and is not normally set outside of the Tk library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b6ca3244b445455ea221008631e216dc5df3f9" translate="yes" xml:space="preserve">
          <source>This option determines whether or with what priority an SSL connection will be negotiated with the server. There are four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0efe37606a66e6591eaee1af5ff0f57584a2e25" translate="yes" xml:space="preserve">
          <source>This option gets the current error status of the given socket. This is useful when you need to determine if an asynchronous connect operation succeeded. If there was an error, the error message is returned. If there was no error, an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53514263759098cf7a8d0e474c69a48e48a58e52" translate="yes" xml:space="preserve">
          <source>This option gives a list of named arguments (the names being used during generation of error messages) that are passed by the caller of the ensemble between the name of the ensemble and the subcommand argument. By default, it is the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac811e3f4f540437caf63559d772a011e7f9897" translate="yes" xml:space="preserve">
          <source>This option indicates how to draw arrowheads. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c015658ffcf2c550b17a52b3cf15bef6c1c83f1d" translate="yes" xml:space="preserve">
          <source>This option is a convenience shortcut for &lt;b&gt;-nested true&lt;/b&gt; and thus specifies the safe interpreter will be allowed to load packages into its own sub-interpreters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ea6fbe11071a806d3af80a06d6ea5129f5a8e8" translate="yes" xml:space="preserve">
          <source>This option is a convenience shortcut for &lt;b&gt;-statics false&lt;/b&gt; and thus specifies that the safe interpreter will not be allowed to load statically linked packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e6ab2b595f574218922336da0a4d1948ff89be" translate="yes" xml:space="preserve">
          <source>This option is a set of 4 comma-separated values: the baud rate, parity, number of data bits, and number of stop bits for this serial port. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa05a94a3359a663fa012146e58c1ee3781095c" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favor of the &lt;b&gt;-sslmode&lt;/b&gt; setting. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b4245ac106fd26d4b1ec7ed49565604daeac80" translate="yes" xml:space="preserve">
          <source>This option is designed for use when searching within nested lists. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee6f356ba776df28c542afefb09da676a358256" translate="yes" xml:space="preserve">
          <source>This option is ignored on never servers. Formerly this specified where to send debug output. This option is left for compatibility with older servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5ac1e9447f7d8e3e9a9277a5a6eb0f700c1ec2" translate="yes" xml:space="preserve">
          <source>This option is mutually exclusive with the &lt;b&gt;-finalize&lt;/b&gt; and &lt;b&gt;-flush&lt;/b&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98b2f49ac911542efb8234913374a5a3a84eaf0" translate="yes" xml:space="preserve">
          <source>This option is mutually exclusive with the &lt;b&gt;-finalize&lt;/b&gt; and &lt;b&gt;-fullflush&lt;/b&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b47136251021f9f7df7ceb51e177a87436bd85f" translate="yes" xml:space="preserve">
          <source>This option is mutually exclusive with the &lt;b&gt;-flush&lt;/b&gt; and &lt;b&gt;-fullflush&lt;/b&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7c97c9e1e022666bff652985c4e63c0d7b17e9" translate="yes" xml:space="preserve">
          <source>This option is not supported by server sockets. For client and accepted sockets, this option returns a list of three elements; these are the address, the host name and the port to which the peer socket is connected or bound. If the host name cannot be computed, the second element of the list is identical to the address, its first element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9691c6306da1afd14cc9114d994190fa064f99b" translate="yes" xml:space="preserve">
          <source>This option is not supported by server sockets. For client sockets, this option returns 1 if an asyncroneous connect is still in progress, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5879f9c153774c98306354d0559151645691baab" translate="yes" xml:space="preserve">
          <source>This option is the same as the standard &lt;b&gt;-background&lt;/b&gt; option except that its value may also be specified as an empty string. In this case, the widget will display no background or border, and no colors will be consumed from its colormap for its background and border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cd6a7313b112c2ecb392c9b131a36daa1ef44d" translate="yes" xml:space="preserve">
          <source>This option is used for embedding. If the value is not an empty string, it must be the window identifier of a container window, specified as a hexadecimal string like the ones returned by the &lt;b&gt;&lt;a href=&quot;winfo.htm&quot;&gt;winfo id&lt;/a&gt;&lt;/b&gt; command. The toplevel widget will be created as a child of the given container instead of the root window for the screen. If the container window is in a Tk application, it must be a frame or toplevel widget for which the &lt;b&gt;-container&lt;/b&gt; option was specified. This option may not be changed with the &lt;b&gt;configure&lt;/b&gt; widget command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d77e1ae8eb3a1b4cd2459e80cfe419b7fb182ad" translate="yes" xml:space="preserve">
          <source>This option is used to add headers not already specified by &lt;b&gt;::http::config&lt;/b&gt; to the HTTP request. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89242f94d23ec0cee2d9fed35dee39b8e80fcfb6" translate="yes" xml:space="preserve">
          <source>This option is used to specify the encoding of the channel as one of the named encodings returned by &lt;b&gt;&lt;a href=&quot;encoding.htm&quot;&gt;encoding names&lt;/a&gt;&lt;/b&gt; or the special value &lt;b&gt;&lt;a href=&quot;binary.htm&quot;&gt;binary&lt;/a&gt;&lt;/b&gt;, so that the data can be converted to and from Unicode for use in Tcl. For instance, in order for Tcl to read characters from a Japanese file in &lt;b&gt;shiftjis&lt;/b&gt; and properly process and display the contents, the encoding would be set to &lt;b&gt;shiftjis&lt;/b&gt;. Thereafter, when reading from the channel, the bytes in the Japanese file would be converted to Unicode as they are read. Writing is also supported - as Tcl strings are written to the channel they will automatically be converted to the specified encoding on output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0f402af8d8223f9007a811bbdee5a756b3ac76" translate="yes" xml:space="preserve">
          <source>This option is used to specify the encoding of the channel, so that the data can be converted to and from Unicode for use in Tcl. For instance, in order for Tcl to read characters from a Japanese file in &lt;b&gt;shiftjis&lt;/b&gt; and properly process and display the contents, the encoding would be set to &lt;b&gt;shiftjis&lt;/b&gt;. Thereafter, when reading from the channel, the bytes in the Japanese file would be converted to Unicode as they are read. Writing is also supported - as Tcl strings are written to the channel they will automatically be converted to the specified encoding on output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca91b09bd9ac94c03ef6ca97e164c4d1198195b" translate="yes" xml:space="preserve">
          <source>This option must have a proper boolean value, which specifies whether or not the menu should include a tear-off entry at the top. If so, it will exist as entry 0 of the menu and the other entries will number starting at 1. The default menu bindings arrange for the menu to be torn off when the tear-off entry is invoked. This option is ignored under Aqua/Mac OS X, where menus cannot be torn off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925948db1d393b211066913b04769fac4a4add09" translate="yes" xml:space="preserve">
          <source>This option sets the list of directories from which the safe interpreter can &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; files. If this option is not specified, or if it is given as the empty list, the safe interpreter will use the same directories as its master for auto-loading. See the section &lt;b&gt;&lt;a href=&quot;#M27&quot;&gt;SECURITY&lt;/a&gt;&lt;/b&gt; below for more detail about virtual paths, tokens and access control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1041d5dd978ab567c57d2aedd9c69073c44eb45b" translate="yes" xml:space="preserve">
          <source>This option specifies dash patterns for the normal, active state, and disabled state of an item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f040ca3e4e7b5326be5cb6253db08583ed2d46e0" translate="yes" xml:space="preserve">
          <source>This option specifies if the safe interpreter will be allowed to load packages into its own sub-interpreters. The default value is &lt;b&gt;false&lt;/b&gt; : safe interpreters are not allowed to load packages into their own sub-interpreters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ecb0773aba51d8fbeaec0f7dda74ed63900d2b" translate="yes" xml:space="preserve">
          <source>This option specifies if the safe interpreter will be allowed to load statically linked packages (like &lt;b&gt;load {} Tk&lt;/b&gt;). The default value is &lt;b&gt;true&lt;/b&gt; : safe interpreters are allowed to load statically linked packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513bf6b4098c4c4ab9480fc07bbcf24907f43668" translate="yes" xml:space="preserve">
          <source>This option specifies stipple patterns that should be used to draw the outline of the item in its normal, active and disabled states. Indicates that the outline for the item should be drawn with a stipple pattern;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e73af5749159f4dad2ee7ddaf5d8ec087cadfd" translate="yes" xml:space="preserve">
          <source>This option specifies stipple patterns that should be used to fill the item in its normal, active and disabled states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0c3445e21783f434c38512a6e158397c1af194" translate="yes" xml:space="preserve">
          <source>This option specifies the color that should be used to draw the outline of the item in its normal, active and disabled states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7833996e3e362a0646ec565ed640dfded3da451c" translate="yes" xml:space="preserve">
          <source>This option specifies the number of commands that the interpreter may execute before triggering the command limit. This option may be the empty string, which indicates that a command limit is not set for the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ea86c3e795e021a99d6576c10777d85f5478ff" translate="yes" xml:space="preserve">
          <source>This option specifies the number of milliseconds after the moment defined in the &lt;b&gt;-seconds&lt;/b&gt; option that the time limit will fire. It should only ever be specified in conjunction with the &lt;b&gt;-seconds&lt;/b&gt; option (whether it was set previously or is being set this invocation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab710376fbff415f6c94e5de11bf5eb5557ff8f" translate="yes" xml:space="preserve">
          <source>This option specifies the number of seconds after the epoch (see &lt;b&gt;clock seconds&lt;/b&gt;) that the time limit for the interpreter will be triggered. The limit will be triggered at the start of the second unless specified at a sub-second level using the &lt;b&gt;-milliseconds&lt;/b&gt; option. This option may be the empty string, which indicates that a time limit is not set for the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1feca04dbe599c6d10fed2b6f12ba671ee026a3" translate="yes" xml:space="preserve">
          <source>This option supports DOS file systems that use Control-z (\x1a) as an end of file marker. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cfea58fb2e80b74d5c18a8f78f033fb4f5860f" translate="yes" xml:space="preserve">
          <source>This option typically consists of a two-element list, containing the name of a scrollable widget followed by either &lt;b&gt;xview&lt;/b&gt; (for horizontal scrollbars) or &lt;b&gt;yview&lt;/b&gt; (for vertical scrollbars).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31db4528bb4e39e58e5bbe3bb01a3ddcf72763c" translate="yes" xml:space="preserve">
          <source>This option will cause the client socket to be connected asynchronously. This means that the socket will be created immediately but may not yet be connected to the server, when the call to &lt;b&gt;socket&lt;/b&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2b671d4a58e2a5b4c40dd4fe6929150c2df8fc" translate="yes" xml:space="preserve">
          <source>This optional subcommand is called to allow the Tcl I/O engine to determine how far ahead it should read. If present, it should return an integer number greater than zero which indicates how many bytes ahead should be read, or an integer less than zero to indicate that the I/O engine may read as far ahead as it likes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6d2132550427f2ffbf32c6c68781d11e45dbac" translate="yes" xml:space="preserve">
          <source>This optional subcommand is called to signify to the transformation that any data stored in internal buffers (either incoming or outgoing) must be cleared. It is called when a &lt;b&gt;&lt;a href=&quot;chan.htm&quot;&gt;chan seek&lt;/a&gt;&lt;/b&gt; is performed on the channel being transformed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93abe4e63be03bb031c7d2163e16f64c5b7e364f" translate="yes" xml:space="preserve">
          <source>This optional subcommand is called whenever data in the transformation 'write' buffer has to be forced downward, i.e. towards the base channel. The result returned by the subcommand is taken as the binary data to write to the transformation below the current transformation. This can be the base channel as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823909b3153c0d08feab52251856f2f62be1af2e" translate="yes" xml:space="preserve">
          <source>This optional subcommand is called whenever data in the transformation input (i.e. read) buffer has to be forced upward, i.e. towards the user or script. The result returned by the method is taken as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f130c656d40fc603ef81a58510e5c2770d9915e4" translate="yes" xml:space="preserve">
          <source>This package allows the identification of the architecture of a specific Tcl shell different from the shell running the package. The only requirement is that the other shell (identified by its path), is actually executable on the current machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8861766bfa63ba70aaf9e32f96b257082be89695" translate="yes" xml:space="preserve">
          <source>This package creates a framework for on-demand replication of the interpreter state accross threads in an multithreading application . It relies on the mechanics of Tcl command tracing and the Tcl &lt;b&gt;&lt;a href=&quot;../tclcmd/unknown.htm&quot;&gt;unknown&lt;/a&gt;&lt;/b&gt; command and mechanism .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12634e2b1b02f73e446a9ac084cd38794b61103d" translate="yes" xml:space="preserve">
          <source>This package creates and manages pools of worker threads . It allows you to post jobs to worker threads and wait for their completion . The threadpool implementation is Tcl event-loop aware . That means that any time a caller is forced to wait for an event (job being completed or a worker thread becoming idle or initialized), the implementation will enter the event loop and allow for servicing of other pending file or timer (or any other supported) events .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1edd57c529fea920fe8ced67da6a6e60257e427" translate="yes" xml:space="preserve">
          <source>This pane will always stretch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c2f6546db18b86a2defcbadc5913cf0aed5b75" translate="yes" xml:space="preserve">
          <source>This pane will never stretch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4911cb5dbb17a68cf5d3e7bdca4e20bb489f56" translate="yes" xml:space="preserve">
          <source>This parameter is similar to the &lt;b&gt;-load&lt;/b&gt; parameter, except that it specifies a Tcl library that must be loaded with the &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt; command. Any number of &lt;b&gt;-source&lt;/b&gt; parameters may be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fdbe72b3e4346fab84dc86c42ad3dec3426b0d" translate="yes" xml:space="preserve">
          <source>This parameter specifies a binary library that must be loaded with the &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263dd5901cc1afe7af1ce2928a4ef3d43ab9f6aa" translate="yes" xml:space="preserve">
          <source>This parameter specifies the name of the package. It is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44aeab2f9217f9a1a7487a01288178aaa7cd0c01" translate="yes" xml:space="preserve">
          <source>This parameter specifies the version of the package. It is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e013bee0806d97c7846c39289d7840d0dfd870a2" translate="yes" xml:space="preserve">
          <source>This primitive is occasionally handier than juxtaposition of strings when mixed quoting is wanted, or when the aim is to return the result of a concatenation without resorting to &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt;&lt;b&gt;-level 0&lt;/b&gt;, and is more efficient than building a list of arguments and using &lt;b&gt;&lt;a href=&quot;join.htm&quot;&gt;join&lt;/a&gt;&lt;/b&gt; with an empty join string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862e19456370d26ad1ac76016dea8c482c239cd4" translate="yes" xml:space="preserve">
          <source>This procedure accumulates the strings passed to it in a global buffer, separated by newlines. It is useful for situations when you want to build a message piece-by-piece (as if with &lt;b&gt;&lt;a href=&quot;puts.htm&quot;&gt;puts&lt;/a&gt;&lt;/b&gt;) but send that full message in a single piece (e.g. over a connection opened with &lt;b&gt;&lt;a href=&quot;socket.htm&quot;&gt;socket&lt;/a&gt;&lt;/b&gt; or as part of a counted HTTP response).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f8f34857e7dad3b97d886a585e3f6903405bf1" translate="yes" xml:space="preserve">
          <source>This procedure allows one to provide custom HTTP transport types such as HTTPS, by registering a prefix, the default port, and the command to execute to create the Tcl &lt;b&gt;channel&lt;/b&gt;. E.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e735f64b3bd95603907d10d1ac964d2b3c4728d" translate="yes" xml:space="preserve">
          <source>This procedure cleans up the state associated with the connection identified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb622b6d7080f3932f93c7971cad8a14819bbf8" translate="yes" xml:space="preserve">
          <source>This procedure creates an option menubutton whose name is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a6dc1fff5caaf6e8519364d497732184713a64" translate="yes" xml:space="preserve">
          <source>This procedure creates and displays a message window with an application-specified message, an icon and a set of buttons. Each of the buttons in the message window is identified by a unique symbolic name (see the &lt;b&gt;-type&lt;/b&gt; options). After the message window is popped up, &lt;b&gt;tk_messageBox&lt;/b&gt; waits for the user to select one of the buttons. Then it returns the symbolic name of the selected button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac6c8a48d18a6a0522c0c89deb4a90885603824" translate="yes" xml:space="preserve">
          <source>This procedure does x-url-encoding of query data. It takes an even number of arguments that are the keys and values of the query. It encodes the keys and values, and generates one string that has the proper &amp;amp; and = separators. The result is suitable for the &lt;b&gt;-query&lt;/b&gt; value passed to &lt;b&gt;::http::geturl&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84795ddcdfa1a246537635783b7226422acdea97" translate="yes" xml:space="preserve">
          <source>This procedure is a bit like the &lt;b&gt;&lt;a href=&quot;incr.htm&quot;&gt;incr&lt;/a&gt;&lt;/b&gt; command, except it multiplies the contents of the named variable by the value, which defaults to &lt;b&gt;2&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe09b78a94123486ec7bc8d00b1dec051945230d" translate="yes" xml:space="preserve">
          <source>This procedure is part of the Tk script library. It is largely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c398baf87db14ea4cbfc6ee94d731a271dd37f" translate="yes" xml:space="preserve">
          <source>This procedure posts a menu at a given position on the screen and configures Tk so that the menu and its cascaded children can be traversed with the mouse or the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0710c2fb21d176cc384b3f52c078afaed0f3ef64" translate="yes" xml:space="preserve">
          <source>This procedure reads a string from a channel that was written by the previously presented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5179f0d3506c205177c0ce4a56ac16482fff803" translate="yes" xml:space="preserve">
          <source>This procedure sets the namespace variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9affc72bf28ec7ee4c14ddb0098d248e3dd45a82" translate="yes" xml:space="preserve">
          <source>This procedure shows how to search for C files in a given directory that have a correspondingly-named object file in the current directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdab2281ae9d04de54a4da46ff33de6fce15e50d" translate="yes" xml:space="preserve">
          <source>This procedure unregisters a protocol handler that was previously registered via &lt;b&gt;::http::register&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b70129da010c2f2ce93b6f8efb56f6fb33c9fc7" translate="yes" xml:space="preserve">
          <source>This read-only option allows the retrieval of the fully-qualified name of the namespace which the ensemble was created within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0babbbc0ccbf1d703f861b5ee5cb7bcb55d93b0b" translate="yes" xml:space="preserve">
          <source>This read-only option gets the current checksum for the uncompressed data that the compression engine has seen so far. It is valid for both compressing and decompressing transforms, but not for the raw inflate and deflate formats. The compression algorithm depends on what format is being produced or consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dd20bb655e9cff512f0a9026f064b73063a30b" translate="yes" xml:space="preserve">
          <source>This read-only option, only valid for decompressing transforms that are processing gzip-format data, returns the dictionary describing the header read off the data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0155e573f110285a0a1f430db92b6ac90ba79d" translate="yes" xml:space="preserve">
          <source>This read-write option is used by decompressing channels to control the maximum number of bytes ahead to read from the underlying data source. This defaults to 1, which ensures that data is always decompressed correctly, but may be increased to improve performance. This is more useful when the channel is non-blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad521bfeeca584a6644202a4b50e41b3523a922" translate="yes" xml:space="preserve">
          <source>This read-write options gets or sets the initial compression dictionary to use when working with compressing or decompressing the data to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0132fb0e3f30268f437207f56715b21f75c7b225" translate="yes" xml:space="preserve">
          <source>This renames the method called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01be81e580a802c6dd15159975bea35788c7db9d" translate="yes" xml:space="preserve">
          <source>This replaces the slot definition with the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfedc6145ee5ad4bc7d780205846f50cb724b3c7" translate="yes" xml:space="preserve">
          <source>This reports the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a909cb7e7a85e8a0659185e46a2c8db858b19f" translate="yes" xml:space="preserve">
          <source>This returns a boolean value indicating whether the given key (or path of keys through a set of nested dictionaries) exists in the given dictionary value. This returns a true value exactly when &lt;b&gt;dict get&lt;/b&gt; on that path will succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1067de052f6181ff7d66634ba1992bfe45f84a4" translate="yes" xml:space="preserve">
          <source>This returns a two-element list describing the method implementations used to implement the current call chain. The first element is the same as would be reported by &lt;b&gt;&lt;a href=&quot;info.htm&quot;&gt;info object&lt;/a&gt;&lt;/b&gt;&lt;b&gt;call&lt;/b&gt; for the current method (except that this also reports useful values from within constructors and destructors, whose names are reported as &lt;b&gt;&amp;lt;constructor&amp;gt;&lt;/b&gt; and &lt;b&gt;&amp;lt;destructor&amp;gt;&lt;/b&gt; respectively), and the second element is an index into the first element's list that indicates which actual implementation is currently executing (the first implementation to execute is always at index 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6443f14c21161b4aa7c7a48aded0c7429e4ee1b4" translate="yes" xml:space="preserve">
          <source>This returns information (intended for display to people) about the given dictionary though the format of this data is dependent on the implementation of the dictionary. For dictionaries that are implemented by hash tables, it is expected that this will return the string produced by &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Hash.htm&quot;&gt;Tcl_HashStats&lt;/a&gt;&lt;/b&gt;, similar to &lt;b&gt;&lt;a href=&quot;array.htm&quot;&gt;array statistics&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2464d06942bffb68c510770d56b73717d9b7a54" translate="yes" xml:space="preserve">
          <source>This returns the name of the class that the current method was defined within. Note that this will change as the chain of method implementations is traversed with &lt;b&gt;&lt;a href=&quot;next.htm&quot;&gt;next&lt;/a&gt;&lt;/b&gt;, and that if the method was defined on an object then this will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f14e5ba0f1d5df950126347d950b2e93650ed62" translate="yes" xml:space="preserve">
          <source>This returns the name of the current method (with the strings &lt;b&gt;&amp;lt;constructor&amp;gt;&lt;/b&gt; and &lt;b&gt;&amp;lt;destructor&amp;gt;&lt;/b&gt; indicating constructors and destructors respectively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e897bf6b2d42d79797e717b9736532444e160a" translate="yes" xml:space="preserve">
          <source>This returns the name of the object that the method was invoked upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7704838ae13f82a40d6bcc9465895b0f5c38bed7" translate="yes" xml:space="preserve">
          <source>This returns the name of the unique namespace of the object that the method was invoked upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a08f3f4b27d1a088b22e9c41be56625e6a363d2" translate="yes" xml:space="preserve">
          <source>This returns whether</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0157d045da8ffd9d32ef21844c7d5972fd99b99" translate="yes" xml:space="preserve">
          <source>This routine is called by &lt;b&gt;::msgcat::mc&lt;/b&gt; in the case when a translation for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df93a8704f433333370704504dddb32dfcd75b6f" translate="yes" xml:space="preserve">
          <source>This scheme provides a natural migration path for code development. Classes can be developed quickly using Tcl code to implement the bodies. An entire application can be built and tested. When necessary, individual bodies can be implemented with C code to improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab939f569b4bf9c76cf3217e24fe2fa1bd480ef5" translate="yes" xml:space="preserve">
          <source>This scheme provides a natural migration path for code development. Extendedclasses can be developed quickly using Tcl code to implement the bodies. An entire application can be built and tested. When necessary, individual bodies can be implemented with C code to improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34c2fd12d6b78efebe799a131d47bf0eb76f062" translate="yes" xml:space="preserve">
          <source>This scheme provides a natural migration path for code development. Widgets can be developed quickly using Tcl code to implement the bodies. An entire application can be built and tested. When necessary, individual bodies can be implemented with C code to improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2679b6331dc3c8f769cbe110ab0e441ca06989c5" translate="yes" xml:space="preserve">
          <source>This script fragment can be used to make an application that only runs once on a particular display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5012aa9ae7b3e2013e9029198b221121a44db700" translate="yes" xml:space="preserve">
          <source>This searches the current namespace for any commands imported from &lt;b&gt;Blt&lt;/b&gt;. If it finds any, it removes them. Otherwise, it does nothing. After this, the &lt;b&gt;Blt&lt;/b&gt; commands must be accessed with the &lt;b&gt;Blt::&lt;/b&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf0faf0fdd095ceec4eba5cebba9f8ebcca8bcc" translate="yes" xml:space="preserve">
          <source>This second example shows how the callback gets passed the number of bytes transferred. It also uses vwait to put the application into the event loop. Of course, this simplified example could be done without the command callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b3bfab69f945bd862e1e0ae9d6cdf2c103f1f1" translate="yes" xml:space="preserve">
          <source>This section describes commands for creating and destroying threads and sending scripts to threads for evaluation .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91099e19d0dafa084883d0a9ebc36253c7524850" translate="yes" xml:space="preserve">
          <source>This section describes commands implementing thread shared variables . A thread shared variable is very similar to a Tcl array but in contrast to a Tcl array it is created in shared memory and can be accessed from many threads at the same time . Important feature of thread shared variable is that each access to the variable is internaly protected by a mutex so script programmer does not have to take care about locking the variable himself .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48dc91d19ad353836c23b9d8f1b7dde89482861d" translate="yes" xml:space="preserve">
          <source>This section describes user-level commands . Those commands can be used by script writers to control the execution of the tracing framework .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd19d3c9b4ea69257e567dd9cd8462b93a70188d" translate="yes" xml:space="preserve">
          <source>This sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfa28c22a93375ddd0af833b7317be7f79a49c6" translate="yes" xml:space="preserve">
          <source>This sets of paths is handled equivalently to the set coming before, except that it is anchored in &lt;b&gt;EXEC_PREFIX&lt;/b&gt;. For a build with &lt;b&gt;PREFIX&lt;/b&gt; = &lt;b&gt;EXEC_PREFIX&lt;/b&gt; the two sets are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c6f6dfe1e824fc11df0803d8d744a5092a4d99" translate="yes" xml:space="preserve">
          <source>This sets the slot definition to the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092707a23a62b8287f413ac8d2499b2a6f92d423" translate="yes" xml:space="preserve">
          <source>This shows how to build part of a GUI for a hamburger vendor. The &lt;b&gt;labelframe&lt;/b&gt; widgets are used to organize the available choices by the kinds of things that the choices are being made over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4384382e78b9c45db51cf8407d13d6b3eddff58" translate="yes" xml:space="preserve">
          <source>This shows how to make a simple general command that applies a transformation to each element of a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082d89bc1433d91fcc844f23ad9c2469f3e664a8" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) allows the alteration of the superclasses of the class being defined. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849e6db4186a5c5ed4badb1715368ec50fa2b3e1" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) arranges for each of the named variables to be automatically made available in the methods declared by the object being defined. Each variable name must not have any namespace separators and must not look like an array access. All variables will be actually present in the object on which the method is executed. Note that the variable lists declared by the classes and mixins of which the object is an instance are completely disjoint; the list of variable names is just for methods declared by this object. By default, this slot works by appending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f722d09569db228cbed75c866b217ad6ec36ef3" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) arranges for each of the named variables to be automatically made available in the methods, constructor and destructor declared by the class being defined. Each variable name must not have any namespace separators and must not look like an array access. All variables will be actually present in the instance object on which the method is executed. Note that the variable lists declared by a superclass or subclass are completely disjoint, as are variable lists declared by instances; the list of variable names is just for methods (and constructors and destructors) declared by this class. By default, this slot works by appending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42dd04c8c773928f34647a2d3f1bf1c4d394a613" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) sets or updates a per-object list of additional classes that are to be mixed into the object. Each argument,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7781b12e93d85589da30e68e567e63701badfbfa" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) sets or updates the list of additional classes that are to be mixed into all the instances of the class being defined. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd1c891d119b78561dddd58cb0493616c98b967" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) sets or updates the list of method names that are used to guard whether a method call to the object may be called and what the method's results are. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb8966ce64bbbe5e4e9c3a977dcbc5bcacd294b" translate="yes" xml:space="preserve">
          <source>This slot (see &lt;b&gt;&lt;a href=&quot;#M31&quot;&gt;SLOTTED DEFINITIONS&lt;/a&gt;&lt;/b&gt; below) sets or updates the list of method names that are used to guard whether method call to instances of the class may be called and what the method's results are. Each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca102c443ecc93b4e312968899ba326f6a75c48" translate="yes" xml:space="preserve">
          <source>This specifies that the widget becomes &lt;b&gt;active&lt;/b&gt; when the pointer enters the widget, and inactive when it leaves. Similarly it becomes &lt;b&gt;pressed&lt;/b&gt; when the mouse button is pressed, and &lt;b&gt;!pressed&lt;/b&gt; on the ButtonRelease event. In addition, the button unpresses if pointer is dragged outside the widget while Button-1 is held down, and represses if it's dragged back in. Finally, when the mouse button is released, the widget's &lt;b&gt;-command&lt;/b&gt; is invoked, but only if the button is currently in the &lt;b&gt;pressed&lt;/b&gt; state. (The actual bindings are a little more complicated than the above, but not by much).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4ca5fadc2a5cb64b090e3199facabd8d6393aa" translate="yes" xml:space="preserve">
          <source>This statement represents a call to a stored procedure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0548aa9b2776b17e598e62758c270140808cdf4c" translate="yes" xml:space="preserve">
          <source>This subcommand creates a new script level channel using the command prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5db22257059a3810e316142e79685f54a88b92b" translate="yes" xml:space="preserve">
          <source>This subcommand interacts with &lt;b&gt;&lt;a href=&quot;chan.htm&quot;&gt;chan postevent&lt;/a&gt;&lt;/b&gt;. Trying to post an event which was not listed in the last call to &lt;b&gt;watch&lt;/b&gt; will cause &lt;b&gt;&lt;a href=&quot;chan.htm&quot;&gt;chan postevent&lt;/a&gt;&lt;/b&gt; to throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fce8af9eb8fe2dc9dc340de714038ff105bfdd5" translate="yes" xml:space="preserve">
          <source>This subcommand is &lt;b&gt;&lt;a href=&quot;safe.htm&quot;&gt;safe&lt;/a&gt;&lt;/b&gt; and made accessible to safe interpreters. While it arranges for the execution of arbitrary Tcl code the system also makes sure that the code is always executed within the safe interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31e1a0527115ffeaefb58353949e84c66a3ac4c" translate="yes" xml:space="preserve">
          <source>This subcommand is not invoked if the creation of the channel was aborted during &lt;b&gt;initialize&lt;/b&gt; (See above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0304c54f61d329d61b96f2654b80a33cd3a641" translate="yes" xml:space="preserve">
          <source>This subcommand is used by command handlers specified with &lt;b&gt;chan create&lt;/b&gt;. It notifies the channel represented by the handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e82a23f645108fe74b63daca8235aa55ae28e9a" translate="yes" xml:space="preserve">
          <source>This subcommand notifies the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f71d47bc45f2dd96e72b07458dfec6d9cfc1b4b" translate="yes" xml:space="preserve">
          <source>This subcommand returns a description of the definition of the constructor of class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d022719eaf8e4648f29ab3a3a24b7a570323e72c" translate="yes" xml:space="preserve">
          <source>This subcommand returns a description of the definition of the method named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183885667887afc30cb96bd75db07005dbf73460" translate="yes" xml:space="preserve">
          <source>This subcommand returns a description of the type of implementation used for the method named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf5eba6ca9cf8157711605880d57059b499f46a" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all classes that have been mixed into the class named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f337cf32465b96ccd791b24a404fd40cd534c0" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all classes that have been mixed into the object named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dd82292c5a0924308473284fa7007ea50edcd8" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all public (i.e. exported) methods of the class called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eae6c6d63e40d1bd1a02e7260767cfd0402395" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all public (i.e. exported) methods of the object called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3b13ea8c7e0bb7e6122f23c3f8b4545466a4b4" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all variables in the private namespace of the object named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e187366c4c187524512ce5e09a7d130153ab30" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all variables that have been declared for the class named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54630c8c63205f9750937c6b67da9df72c782f81" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of all variables that have been declared for the object named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4618b79132c5210e3dddad111670527a7ee6b7cd" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of direct subclasses of class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36447a53ffd33b0834a1a7a5e7a9f4a49b43502e" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of direct superclasses of class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef48af7de9369c1751482e9c3397e5b918f0b92" translate="yes" xml:space="preserve">
          <source>This subcommand returns a list of instances of class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90077b324594dbd467f0e87c08da6ea96a2d0c9f" translate="yes" xml:space="preserve">
          <source>This subcommand returns or sets platform specific attributes associated with a window. The first form returns a list of the platform specific flags and their values. The second form returns the value for the specific option. The third form sets one or more of the values. The values are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b1918d61e4ec2653ed42f7b48a8dd7a1589fc3" translate="yes" xml:space="preserve">
          <source>This subcommand returns or sets platform specific values associated with a file. The first form returns a list of the platform specific flags and their values. The second form returns the value for the specific option. The third form sets one or more of the values. The values are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bebbc644ad3a3d646711347ce0209319e4d64b" translate="yes" xml:space="preserve">
          <source>This subcommand returns the argument list for the method forwarding called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c94c330588fb26a33ab44266499772b8646499" translate="yes" xml:space="preserve">
          <source>This subcommand returns the body of the destructor of class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59b5e9daa2cacb704ac2f187f6d63791265752d" translate="yes" xml:space="preserve">
          <source>This subcommand returns the list of filter methods set on the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b61e2deb02a7a84fda8fa0cff1fb009a2446b03" translate="yes" xml:space="preserve">
          <source>This subcommand returns the list of filter methods set on the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f408f2580e02464e30df512be47c94a02691736" translate="yes" xml:space="preserve">
          <source>This subcommand returns the name of the internal namespace of the object named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81139d973d1b503902b1c3be4bc582634d1a17f0" translate="yes" xml:space="preserve">
          <source>This subcommand tests whether an object belongs to a particular category, returning a boolean value that indicates whether the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42be6184df8c4b90d65fd00af1c101ec19f7fb30" translate="yes" xml:space="preserve">
          <source>This subcommand will never try to update more than one option at a time; that is behavior implemented in the Tcl channel core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cc03b87e5121dfe78ec5a1b5ddb81f7608ec9f" translate="yes" xml:space="preserve">
          <source>This subcommand, which must be present if the transformation is to work with readable channels, is called whenever the base channel, or a transformation below this transformation, pushes data upward. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae23c33c05d44f6cc4ab6ef67fae31fcd012510" translate="yes" xml:space="preserve">
          <source>This subcommand, which must be present if the transformation is to work with writable channels, is called whenever the user, or a transformation above this transformation, writes data downward. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245e774a0df601afd11d10e3fa44f071de2d6e71" translate="yes" xml:space="preserve">
          <source>This switch has no effect except to terminate the list of switches: the next argument will be treated as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c10d31f708251120de55a86c0f0d57e4a90a0c" translate="yes" xml:space="preserve">
          <source>This switch will prevent &lt;b&gt;unload&lt;/b&gt; from issuing the operating system call that will unload the library from the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e377906bda097a6d1ace1bb7afd3408b5161988" translate="yes" xml:space="preserve">
          <source>This takes a dictionary value and returns a new dictionary that contains just those key/value pairs that match the specified filter type (which may be abbreviated.) Supported filter types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60207c6baf03835f485e64c62c5042c480abea99" translate="yes" xml:space="preserve">
          <source>This test can not be run on Windows. This flag is used to temporarily disable a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4602419cc36aa265fd629893fbd4c24ccec950" translate="yes" xml:space="preserve">
          <source>This test can not be run on a Mac. This flag is used to temporarily disable a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f2e156c5e9e244c9ce708fae8f8861fab971ba" translate="yes" xml:space="preserve">
          <source>This test can only be run if &lt;b&gt;interpreter&lt;/b&gt; can be &lt;b&gt;&lt;a href=&quot;open.htm&quot;&gt;open&lt;/a&gt;&lt;/b&gt;ed as a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4299780e6f190a9a9621a0a90cc6d2504fba5b78" translate="yes" xml:space="preserve">
          <source>This test can only be run if all test files are sourced into a single interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de20603890f1f3f4c276c9307217c4bdb8c9a109" translate="yes" xml:space="preserve">
          <source>This test can only be run if can switch to an ISO locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a075b28ee924c17a4bfc8bf051c4a8a74379269a" translate="yes" xml:space="preserve">
          <source>This test can only be run if platform supports async flush and async close on a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20236a1746ae68d769c988f36846fe42adaa85df" translate="yes" xml:space="preserve">
          <source>This test can only be run if platform supports setting files into nonblocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffb38bfe8e1562dfe6ce21b5fd1137b07d82775" translate="yes" xml:space="preserve">
          <source>This test can only be run if this machine has Unix-style commands &lt;b&gt;cat&lt;/b&gt;, &lt;b&gt;echo&lt;/b&gt;, &lt;b&gt;sh&lt;/b&gt;, &lt;b&gt;wc&lt;/b&gt;, &lt;b&gt;rm&lt;/b&gt;, &lt;b&gt;sleep&lt;/b&gt;, &lt;b&gt;fgrep&lt;/b&gt;, &lt;b&gt;ps&lt;/b&gt;, &lt;b&gt;chmod&lt;/b&gt;, and &lt;b&gt;mkdir&lt;/b&gt; available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf35a26c5588770681568173c69799110756b13" translate="yes" xml:space="preserve">
          <source>This test can only be run in if the interpreter is in interactive mode (when the global tcl_interactive variable is set to 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbe7f5baeea1bb6448b0de59f4b819daf3b68f1" translate="yes" xml:space="preserve">
          <source>This test can only be run in some known development environment. Some tests are inherently non-portable because they depend on things like word length, file system configuration, window manager, etc. This constraint has value false to cause tests to be skipped unless the user specifies otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23382137317539949048957e77252d2c6774cf2" translate="yes" xml:space="preserve">
          <source>This test can only be run on a Mac or Unix platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b788c7c57ba90151ee975fad04b38c10aa8752" translate="yes" xml:space="preserve">
          <source>This test can only be run on a Mac or Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42d6c33f53df2ce050c93bf149534bc4495996a" translate="yes" xml:space="preserve">
          <source>This test can only be run on a Unix or Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6da8cd843dd6291d319bfa6eb07ff48edd375bd" translate="yes" xml:space="preserve">
          <source>This test can only be run on any Mac platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09fdbc1db3601cf4e86394b22ac222816c7d9ae" translate="yes" xml:space="preserve">
          <source>This test can only be run on any Unix platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7823b77ef94472c146c5d747ddb1acea3310f33" translate="yes" xml:space="preserve">
          <source>This test can only be run on any Windows NT platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2eb999f9a1cbc705a6f38ace0c6d75247ba9f9" translate="yes" xml:space="preserve">
          <source>This test can only be run on any Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51029a9163ceb84f7f231842c3805851e71dda8b" translate="yes" xml:space="preserve">
          <source>This test can only run if Unix user is not root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34808465d51a9228394ca70d60fe2145b87d01db" translate="yes" xml:space="preserve">
          <source>This test can only run if Unix user is root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9d312b872702d08c221c8d8e896192e9b57fa4" translate="yes" xml:space="preserve">
          <source>This test can only run if app has a working version of sprintf with respect to the &amp;ldquo;e&amp;rdquo; format of floating-point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49b92d2f6f473ad3ae5b8eec94a3f12c784119d" translate="yes" xml:space="preserve">
          <source>This test crashes if it is run on Unix. This flag is used to temporarily disable a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22c84658f0fd92afab51b517637cd3394e53f42" translate="yes" xml:space="preserve">
          <source>This test crashes if it is run on Windows. This flag is used to temporarily disable a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b10a43d015f7425bab2ad062db91b429b27d44" translate="yes" xml:space="preserve">
          <source>This test crashes if it is run on a Mac. This flag is used to temporarily disable a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2e16612f6c1ed3bd17c1d45dc1604575c83e23" translate="yes" xml:space="preserve">
          <source>This test is empty, and so not worth running, but it remains as a place-holder for a test to be written in the future. This constraint has value false to cause tests to be skipped unless the user specifies otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db849d9188b9c8b474f6b5aecdce7486317e4541" translate="yes" xml:space="preserve">
          <source>This test is known to fail and the bug is not yet fixed. This constraint has value false to cause tests to be skipped unless the user specifies otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e728d0f4cd1066fbaa018b25e5d437840a2dd2" translate="yes" xml:space="preserve">
          <source>This test requires interaction from the user. This constraint has value false to causes tests to be skipped unless the user specifies otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cfc6bf509a8def8fe3daa839d7d4ae3b263c1a" translate="yes" xml:space="preserve">
          <source>This tests whether the last input operation on the channel called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cd0d9cb1201dc4ef70eb6b1c793290ef43db17" translate="yes" xml:space="preserve">
          <source>This use is deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5781f7d7a626476559777d0cedeba1061cb32f29" translate="yes" xml:space="preserve">
          <source>This value is normally the same as the result of &amp;ldquo;&lt;b&gt;&lt;a href=&quot;../tclcmd/package.htm&quot;&gt;package require&lt;/a&gt;&lt;/b&gt;&lt;b&gt;Tk&lt;/b&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c782ac7e456bf42691979fdbd55cade0b65c0c" translate="yes" xml:space="preserve">
          <source>This variable and functionality only exist if &lt;b&gt;TCL_COMPILE_DEBUG&lt;/b&gt; was defined during Tcl's compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170d1c724a471a1671cb8982a365948c42b42188" translate="yes" xml:space="preserve">
          <source>This variable contains a regular expression that is used by routines like &lt;b&gt;tcl_endOfWord&lt;/b&gt; to identify whether a character is part of a word or not. If the pattern matches a character, the character is considered to be a non-word character. On Windows platforms, spaces, tabs, and newlines are considered non-word characters. Under Unix, everything but numbers, letters and underscores are considered non-word characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3c59b056d8edfe48a72274a26d5c4dd488a5e" translate="yes" xml:space="preserve">
          <source>This variable contains a regular expression that is used by routines like &lt;b&gt;tcl_endOfWord&lt;/b&gt; to identify whether a character is part of a word or not. If the pattern matches a character, the character is considered to be a word character. On Windows platforms, words are comprised of any character that is not a space, tab, or newline. Under Unix, words are comprised of numbers, letters or underscores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718cd858b271f3d2db910c7bb849617487bc6f31" translate="yes" xml:space="preserve">
          <source>This variable controls the number of digits to generate when converting floating-point values to strings. It defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182e553cbe5a8c68f74eecfffa75bfb2d4b3669b" translate="yes" xml:space="preserve">
          <source>This variable holds a list of directories indicating where packages are normally installed. It is not used on Windows. It typically contains either one or two entries; if it contains two entries, the first is normally a directory for platform-dependent packages (e.g., shared library binaries) and the second is normally a directory for platform-independent packages (e.g., script files). Typically a package is installed as a subdirectory of one of the entries in the &lt;b&gt;tcl_pkgPath&lt;/b&gt; variable. The directories in the &lt;b&gt;tcl_pkgPath&lt;/b&gt; variable are included by default in the &lt;b&gt;auto_path&lt;/b&gt; variable, so they and their immediate subdirectories are automatically searched for packages during &lt;b&gt;&lt;a href=&quot;package.htm&quot;&gt;package require&lt;/a&gt;&lt;/b&gt; commands. Note: &lt;b&gt;tcl_pkgPath&lt;/b&gt; is not intended to be modified by the application. Its value is added to &lt;b&gt;auto_path&lt;/b&gt; at startup; changes to &lt;b&gt;tcl_pkgPath&lt;/b&gt; are not reflected in &lt;b&gt;auto_path&lt;/b&gt;. If you want Tcl to search additional directories for packages you should add the names of those directories to &lt;b&gt;auto_path&lt;/b&gt;, not &lt;b&gt;tcl_pkgPath&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658c8890cb73302c3eeb187eaa3c88be7358c7af" translate="yes" xml:space="preserve">
          <source>This variable holds the file name for a directory containing a library of Tcl scripts related to Tk. These scripts include an initialization file that is normally processed whenever a Tk application starts up, plus other files containing procedures that implement default behaviors for widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98123292dbd33086110858eedb74458efe04d88" translate="yes" xml:space="preserve">
          <source>This variable holds the name of a directory containing the system library of Tcl scripts, such as those used for auto-loading. The value of this variable is returned by the &lt;b&gt;&lt;a href=&quot;info.htm&quot;&gt;info library&lt;/a&gt;&lt;/b&gt; command. See the &lt;b&gt;&lt;a href=&quot;library.htm&quot;&gt;library&lt;/a&gt;&lt;/b&gt; manual entry for details of the facilities provided by the Tcl script library. Normally each application or package will have its own application-specific script library in addition to the Tcl script library; each application should set a global variable with a name like &lt;b&gt;$&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29055a4a9a31855d2babfcdfd39ddbf672a2dbc2" translate="yes" xml:space="preserve">
          <source>This variable holds the value of the &lt;b&gt;-errorcode&lt;/b&gt; return option set by the most recent error that occurred in this interpreter. This list value represents additional information about the error in a form that is easy to process with programs. The first element of the list identifies a general class of errors, and determines the format of the rest of the list. The following formats for &lt;b&gt;-errorcode&lt;/b&gt; return options are used by the Tcl core; individual applications may define additional formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6becefbc1979834024e6a7dad7c47dbf56d7e70f" translate="yes" xml:space="preserve">
          <source>This variable holds the value of the &lt;b&gt;-errorinfo&lt;/b&gt; return option set by the most recent error that occurred in this interpreter. This string value will contain one or more lines identifying the Tcl commands and procedures that were being executed when the most recent error occurred. Its contents take the form of a stack trace showing the various nested Tcl commands that had been invoked at the time of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663f64574222ab1609c9f58b34892efca4c055ce" translate="yes" xml:space="preserve">
          <source>This variable is an array containing several pieces of information that are private to Tk. The elements of &lt;b&gt;tk::Priv&lt;/b&gt; are used by Tk library procedures and default bindings. They should not be accessed by any code outside Tk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d9db3a8597bc1ecfbcc4feae294a2d58e4a6fa" translate="yes" xml:space="preserve">
          <source>This variable is maintained by Tcl as an array whose elements are the environment variables for the process. Reading an element will return the value of the corresponding environment variable. Setting an element of the array will modify the corresponding environment variable or create a new one if it does not already exist. Unsetting an element of &lt;b&gt;env&lt;/b&gt; will remove the corresponding environment variable. Changes to the &lt;b&gt;env&lt;/b&gt; array will affect the environment passed to children by commands like &lt;b&gt;&lt;a href=&quot;exec.htm&quot;&gt;exec&lt;/a&gt;&lt;/b&gt;. If the entire &lt;b&gt;env&lt;/b&gt; array is unset then Tcl will stop monitoring &lt;b&gt;env&lt;/b&gt; accesses and will not update environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888bdf717b3e50e74c851d11ee487a0ae96d5aa8" translate="yes" xml:space="preserve">
          <source>This variable is set to zero by default. If an application sets it to one, then Tk attempts to adhere as closely as possible to Motif look-and-feel standards. For example, active elements such as buttons and scrollbar sliders will not change color when the pointer passes over them. Modern applications should not normally set this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1397b0c7b1c1ede844922ba66cb527b569dc6788" translate="yes" xml:space="preserve">
          <source>This variable is used during initialization to indicate the name of a user-specific startup file. If it is set by application-specific initialization, then the Tcl startup code will check for the existence of this file and &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt; it if it exists. For example, for &lt;b&gt;&lt;a href=&quot;../usercmd/wish.htm&quot;&gt;wish&lt;/a&gt;&lt;/b&gt; the variable is set to &lt;b&gt;~/.wishrc&lt;/b&gt; for Unix and &lt;b&gt;~/wishrc.tcl&lt;/b&gt; for Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf14d36d10da65f56a47cb94a1fb8e818a6c5231" translate="yes" xml:space="preserve">
          <source>This will cause the &lt;b&gt;insert&lt;/b&gt; to receive the original replacement string (open square bracket) as its first argument. If the extra backslash had not been added, Tcl would not have been able to parse the script correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66e79b5854a58b1ad3c1f14c288974b4d8104d8" translate="yes" xml:space="preserve">
          <source>This will extend the bindings for the toplevel window containing the notebook as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc94ae59d23d700b8e8713126ef77a73a4c86a42" translate="yes" xml:space="preserve">
          <source>This would generate an object named &quot;.foo.bar.fileselectiondialog0&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8925252b2ad9d7967739849b7504367c3350715" translate="yes" xml:space="preserve">
          <source>This write-only operation flushes the current state of the compressor to the underlying channel. It is only valid for compressing transformations. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196a695bdbd5e08a8a397e09429e73b0f795824a" translate="yes" xml:space="preserve">
          <source>This write-only option allows the name of the ensemble created by &lt;b&gt;namespace ensemble create&lt;/b&gt; to be anything in any existing namespace. The default value for this option is the fully-qualified name of the namespace in which the &lt;b&gt;namespace ensemble create&lt;/b&gt; command is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc01edde865178bff5f9fd9869e2eda88d35e56" translate="yes" xml:space="preserve">
          <source>Those command are similar to the equivalently named Tcl command . The difference is that they operate on elements of shared arrays .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb566ea98396de1e169e6b968157393359cc74d" translate="yes" xml:space="preserve">
          <source>Those options that write data to the image generally expand the size of the image, if necessary, to accommodate the data written to the image, unless the user has specified non-zero values for the &lt;b&gt;-width&lt;/b&gt; and/or &lt;b&gt;-height&lt;/b&gt; configuration options, in which case the width and/or height, respectively, of the image will not be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7863f7503e5377891a3b7452c7d6cc377d443fe7" translate="yes" xml:space="preserve">
          <source>Thread</source>
          <target state="translated">Thread</target>
        </trans-unit>
        <trans-unit id="3a020a9ca704bcc7395b026d2a72a422cdc2652d" translate="yes" xml:space="preserve">
          <source>Thread Package Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a274461b8c0ea5db3cfe6ba7730c4d8c6d8bb3bf" translate="yes" xml:space="preserve">
          <source>Thread shared variables are inspired by the nsv interface found in AOLserver, a highly scalable Web server from America Online .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f090b69dce79b0cc17e699b3b54bd346940fefec" translate="yes" xml:space="preserve">
          <source>Thread shared variables are not bound to any thread explicitly . That means that when a thread which created any of thread shared variables exits, the variable and associated memory is not unset/reclaimed . User has to explicitly unset the variable to reclaim the memory consumed by the variable .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb212a72c617ac2a6b276d31981c83bd6907211e" translate="yes" xml:space="preserve">
          <source>ThreadCmd</source>
          <target state="translated">ThreadCmd</target>
        </trans-unit>
        <trans-unit id="daf3864e7e1c4d7a6184ed445ff77a94ab627a60" translate="yes" xml:space="preserve">
          <source>Threadpool is one of the most common threading paradigm when it comes to server applications handling a large number of relatively small tasks . A very simplistic model for building a server application would be to create a new thread each time a request arrives and service the request in the new thread . One of the disadvantages of this approach is that the overhead of creating a new thread for each request is significant; a server that created a new thread for each request would spend more time and consume more system resources in creating and destroying threads than in processing actual user requests . In addition to the overhead of creating and destroying threads, active threads consume system resources . Creating too many threads can cause the system to run out of memory or trash due to excessive memory consumption .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92723c3256acf1c18b366b2a6f9f3d9e822c2573" translate="yes" xml:space="preserve">
          <source>Threads created by the &lt;b&gt;thread::create&lt;/b&gt; cannot be destroyed forcefully . Consequently, there is no corresponding thread destroy command . A thread may only be released using the &lt;b&gt;thread::release&lt;/b&gt; and if its internal reference count drops to zero, the thread is marked for exit . This kicks the thread out of the event loop servicing and the thread continues to execute commands passed in the &lt;b&gt;script&lt;/b&gt; argument, following the &lt;b&gt;thread::wait&lt;/b&gt; command . If this was the last command in the script, as usualy the case, the thread will exit .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2121357dac350079af533b545b816762b9bbe7b9" translate="yes" xml:space="preserve">
          <source>Three annotations may be displayed in a scale widget: a label appearing at the top right of the widget (top left for horizontal scales), a number displayed just to the left of the slider (just above the slider for horizontal scales), and a collection of numerical tick marks just to the left of the current value (just below the trough for horizontal scales). Each of these three annotations may be enabled or disabled using the configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a377a0bb5820400a62442ed38afc82ea9ac1bc39" translate="yes" xml:space="preserve">
          <source>Three subcommands of the &lt;b&gt;namespace ensemble&lt;/b&gt; command are defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceccdf00bb062dc9159dce0643b9737497cc5539" translate="yes" xml:space="preserve">
          <source>Three widgets of equal width, despite their different &amp;ldquo;natural&amp;rdquo; widths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744e6a06720ef67382590f44c67607bc81f0d914" translate="yes" xml:space="preserve">
          <source>Tilde substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7ff97432f089c3ccdf6769675060e2e2c1a315" translate="yes" xml:space="preserve">
          <source>Time in seconds an idle worker thread waits for the job to get posted to the job queue . If no job arrives during this interval and the time expires, the worker thread will check the number of currently available worker threads and if the number is higher than the number set by the &lt;b&gt;minthreads&lt;/b&gt; option, it will exit . If an &lt;b&gt;exitscript&lt;/b&gt; has been defined, the exiting worker thread will first run the script and then exit . Errors from the exit script, if any, are ignored .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9aac4028931969e4e43d5926f21c1c02b03737" translate="yes" xml:space="preserve">
          <source>Time zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5cc0f84fc345c602dd1accf23180e03ce108cd" translate="yes" xml:space="preserve">
          <source>Tk</source>
          <target state="translated">Tk</target>
        </trans-unit>
        <trans-unit id="8b54437ad8076519eed1b789400eb3748a27c6c2" translate="yes" xml:space="preserve">
          <source>Tk C API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6c81cb54b258a2e6bbdd06a0a3c36c36b5f734" translate="yes" xml:space="preserve">
          <source>Tk Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd059a9d89122e35c47e63d2b5899ded047ac930" translate="yes" xml:space="preserve">
          <source>Tk always defines a protocol handler for &lt;b&gt;WM_DELETE_WINDOW&lt;/b&gt;, even if you have not asked for one with &lt;b&gt;wm protocol&lt;/b&gt;. If a &lt;b&gt;WM_DELETE_WINDOW&lt;/b&gt; message arrives when you have not defined a handler, then Tk handles the message by destroying the window for which it was received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5bde660e7fc0505b2f4960e4976fad618219a4" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for buttons that give them default behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048a7cf6a50df57acee2a84e8b83cdd65e477260" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for checkbuttons that give them the following default behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebeaa1d068d99979d8e3da22ec863cea9e90e34" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for entries that give them the following default behavior. In the descriptions below, &amp;ldquo;word&amp;rdquo; refers to a contiguous group of letters, digits, or &amp;ldquo;_&amp;rdquo; characters, or any single character other than these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23817b8bd302f1cb672461658267a081b763d3ca" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for listboxes that give them Motif-like behavior. Much of the behavior of a listbox is determined by its &lt;b&gt;-selectmode&lt;/b&gt; option, which selects one of four ways of dealing with the selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca36c3256fe8479fc0f02e6b06c2ad9082aaef24" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for menubuttons that give them the following default behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687e3308ffab87fc47e13f9d08099612577a43cd" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for menus that give them the following default behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9362c0a95bf0f0fbabbd073d4b9916a1dc1032" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for radiobuttons that give them the following default behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec75b3232759ac45f06adbe3fa1790660888c2f0" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for scales that give them the following default behavior. Where the behavior is different for vertical and horizontal scales, the horizontal behavior is described in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdedb6b6b7022318f75092b1a63e77a21c3cf14" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for scrollbars that give them the following default behavior. If the behavior is different for vertical and horizontal scrollbars, the horizontal behavior is described in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a34ac28ff9aad50e6731143cec314160c9b4e49" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for spinboxes that give them the following default behavior. In the descriptions below, &amp;ldquo;word&amp;rdquo; refers to a contiguous group of letters, digits, or &amp;ldquo;_&amp;rdquo; characters, or any single character other than these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c12eed33b987bf392e9f20270669732ac62ecbb" translate="yes" xml:space="preserve">
          <source>Tk automatically creates class bindings for texts that give them the following default behavior. In the descriptions below, &amp;ldquo;word&amp;rdquo; is dependent on the value of the &lt;b&gt;&lt;a href=&quot;../tclcmd/tclvars.htm&quot;&gt;tcl_wordchars&lt;/a&gt;&lt;/b&gt; variable. See &lt;b&gt;&lt;a href=&quot;../tclcmd/tclvars.htm&quot;&gt;tclvars&lt;/a&gt;&lt;/b&gt;(n).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ff88eb49df61bc8755f2cc055b89d828701e5c" translate="yes" xml:space="preserve">
          <source>Tk defines the following virtual events for the purposes of notification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17681585c327c36369177f02f48d23db111b2d8f" translate="yes" xml:space="preserve">
          <source>Tk defines the following virtual events for the purposes of unifying bindings across multiple platforms. Users expect them to behave in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75501ea7af65b1aa8e5048722bcbdff0efaf074e" translate="yes" xml:space="preserve">
          <source>Tk initialization is now safe with respect to not trusting the slave's state for startup. &lt;b&gt;safe::loadTk&lt;/b&gt; registers the slave's name so when the Tk initialization (&lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TkLib/Tk_Init.htm&quot;&gt;Tk_SafeInit&lt;/a&gt;&lt;/b&gt;) is called and in turn calls the master's &lt;b&gt;safe::InitTk&lt;/b&gt; it will return the desired &lt;b&gt;&lt;a href=&quot;../tclcmd/tclvars.htm&quot;&gt;argv&lt;/a&gt;&lt;/b&gt; equivalent (&lt;b&gt;-use&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df14ea5add2d54a36070bd4a1c04395fccdf52dc" translate="yes" xml:space="preserve">
          <source>Tk recognizes many keysyms when specifying key bindings (e.g., &amp;ldquo;&lt;b&gt;&lt;a href=&quot;bind.htm&quot;&gt;bind&lt;/a&gt;&lt;/b&gt;&lt;b&gt;. &amp;lt;Key-&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b9b5d7c3fc170f318c624d119fbfa89d898331" translate="yes" xml:space="preserve">
          <source>Tk recognizes many symbolic color names (e.g., &lt;b&gt;red&lt;/b&gt;) when specifying colors. The symbolic names recognized by Tk and their 8-bit-per-channel RGB values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2797b1795118bae530657d7652f835063e6feb10" translate="yes" xml:space="preserve">
          <source>Tk remembers one focus window for each top-level (the most recent descendant of that top-level to receive the focus); when the window manager gives the focus to a top-level, Tk automatically redirects it to the remembered window. Within a top-level Tk uses an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7df078c8e1f70751a39699ad84b9b6e95f68cf" translate="yes" xml:space="preserve">
          <source>Tk sets this variable in the interpreter for each application. The variable holds the current version number of the Tk library in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baea86bc2c854661ce0a1fa601d14cf645eb2eb6" translate="yes" xml:space="preserve">
          <source>Tk's canvas widget is a blatant ripoff of ideas from Joel Bartlett's</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4d081bf66edd8c386860b6e957b45b62ce1f94" translate="yes" xml:space="preserve">
          <source>TkCmd</source>
          <target state="translated">TkCmd</target>
        </trans-unit>
        <trans-unit id="02242960eb60319b05a7fea3b03881d48640de2d" translate="yes" xml:space="preserve">
          <source>To access the procedures in the Tcl library, an application should source the file &lt;b&gt;init.tcl&lt;/b&gt; in the library, for example with the Tcl command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6b444aea38268a7c34d3e649df05d1f8b93f81" translate="yes" xml:space="preserve">
          <source>To add a directory to the collection of locations searched by &lt;b&gt;&lt;a href=&quot;package.htm&quot;&gt;package require&lt;/a&gt;&lt;/b&gt;, e.g., because of some application-specific packages that are used, the &lt;b&gt;auto_path&lt;/b&gt; variable needs to be updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbfda4cadc2d2040a9632f6dc567e78cbbadb38" translate="yes" xml:space="preserve">
          <source>To be clear,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc395a432fff4c47a61c10e0e3169d505a07c68b" translate="yes" xml:space="preserve">
          <source>To claim the selection, you must first set up a handler to supply the data for the selection. Then you have to claim the selection...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c479fc2fb7dcacd31dd4949bc930944cb823a3a1" translate="yes" xml:space="preserve">
          <source>To compress a Tcl string, it should be first converted to a particular charset encoding since the &lt;b&gt;zlib&lt;/b&gt; command always operates on binary strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a3b94fc478be48341f0e13b7c1e4e9524ddbda" translate="yes" xml:space="preserve">
          <source>To compute the minimum size of a layout, the grid geometry manager first looks at all slaves whose &lt;b&gt;-columnspan&lt;/b&gt; and &lt;b&gt;-rowspan&lt;/b&gt; values are one, and computes the nominal size of each row or column to be either the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8796c046ba6a160e1b0c012dc306b2bdf836fa08" translate="yes" xml:space="preserve">
          <source>To enable keyboard traversal for a toplevel window containing a notebook widget</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c272a218a9bfb52b0c47df140522dcc477fbd79" translate="yes" xml:space="preserve">
          <source>To execute a program that can return a non-zero result, you should wrap the call to &lt;b&gt;exec&lt;/b&gt; in &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; and check the contents of the &lt;b&gt;-errorcode&lt;/b&gt; return option if you have an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dbb84d25168fdbbf5dba858a45279055908aa5" translate="yes" xml:space="preserve">
          <source>To execute the unknown handler, the ensemble mechanism takes the specified &lt;b&gt;-unknown&lt;/b&gt; option and appends each argument of the attempted ensemble command invocation (including the ensemble command itself, expressed as a fully qualified name). It invokes the resulting command in the scope of the attempted call. If the execution of the unknown handler terminates normally, the ensemble engine reparses the subcommand (as described below) and tries to dispatch it again, which is ideal for when the ensemble's configuration has been updated by the unknown subcommand handler. Any other kind of termination of the unknown handler is treated as an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad089ff7d6756dab07a4d7be2774385405b4823c" translate="yes" xml:space="preserve">
          <source>To further prevent potential information leakage from sensitive files that are accidentally included in the set of files that can be sourced by a safe interpreter, the &lt;b&gt;&lt;a href=&quot;source.htm&quot;&gt;source&lt;/a&gt;&lt;/b&gt; alias restricts access to files meeting the following constraints: the file name must fourteen characters or shorter, must not contain more than one dot (&amp;ldquo;&lt;b&gt;.&lt;/b&gt;&amp;rdquo;), must end up with the extension (&amp;ldquo;&lt;b&gt;.tcl&lt;/b&gt;&amp;rdquo;) or be called (&amp;ldquo;&lt;b&gt;tclIndex&lt;/b&gt;&amp;rdquo;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe04edffce1f08060305493ecaef8c6eac52734" translate="yes" xml:space="preserve">
          <source>To include a literal &lt;b&gt;]&lt;/b&gt; or &lt;b&gt;-&lt;/b&gt; in the list, the simplest method is to enclose it in &lt;b&gt;[.&lt;/b&gt; and &lt;b&gt;.]&lt;/b&gt; to make it a collating element (see below). Alternatively, make it the first character (following a possible &amp;ldquo;&lt;b&gt;^&lt;/b&gt;&amp;rdquo;), or (AREs only) precede it with &amp;ldquo;&lt;b&gt;\&lt;/b&gt;&amp;rdquo;. Alternatively, for &amp;ldquo;&lt;b&gt;-&lt;/b&gt;&amp;rdquo;, make it the last character, or the second endpoint of a range. To use a literal &lt;b&gt;-&lt;/b&gt; as the first endpoint of a range, make it a collating element or (AREs only) precede it with &amp;ldquo;&lt;b&gt;\&lt;/b&gt;&amp;rdquo;. With the exception of these, some combinations using &lt;b&gt;[&lt;/b&gt; (see next paragraphs), and escapes, all other special characters lose their special significance within a bracket expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc36db64c998c17a06832fa28d59fd6c7ccd315" translate="yes" xml:space="preserve">
          <source>To make a window that only participates in the focus traversal ring when a variable is set, add the following bindings to the widgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bc92ea52b0ebb88472113044b57c222bbe7196" translate="yes" xml:space="preserve">
          <source>To pass, a test must successfully evaluate its &lt;b&gt;-setup&lt;/b&gt;, &lt;b&gt;-body&lt;/b&gt;, and &lt;b&gt;-cleanup&lt;/b&gt; scripts. The return code of the &lt;b&gt;-body&lt;/b&gt; script and its result must match expected values, and if specified, output and error data from the test must match expected &lt;b&gt;-output&lt;/b&gt; and &lt;b&gt;-errorOutput&lt;/b&gt; values. If any of these conditions are not met, then the test fails. Note that all scripts are evaluated in the context of the caller of &lt;b&gt;test&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20940871c27a2aa41d79fc64bde508cc7fbd9fa7" translate="yes" xml:space="preserve">
          <source>To print a text file using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660432cfbd2abf9d9f4f5b39d4e7cc109b5a2d99" translate="yes" xml:space="preserve">
          <source>To set the &lt;b&gt;-errorcode&lt;/b&gt; return option, applications should use library procedures such as &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/AddErrInfo.htm&quot;&gt;Tcl_SetObjErrorCode&lt;/a&gt;&lt;/b&gt;, &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/AddErrInfo.htm&quot;&gt;Tcl_SetReturnOptions&lt;/a&gt;&lt;/b&gt;, and &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/AddErrInfo.htm&quot;&gt;Tcl_PosixError&lt;/a&gt;&lt;/b&gt;, or they may invoke the &lt;b&gt;-errorcode&lt;/b&gt; option of the &lt;b&gt;&lt;a href=&quot;return.htm&quot;&gt;return&lt;/a&gt;&lt;/b&gt; command. If none of these methods for setting the error code has been used, the Tcl interpreter will reset the variable to &lt;b&gt;NONE&lt;/b&gt; after the next error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc3a5d9a0a4ce98aa9fce95ab0e754e884d857f" translate="yes" xml:space="preserve">
          <source>To signal that the channel is not able to accept data for writing right now, it is necessary to throw the error &quot;EAGAIN&quot;, i.e. to either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f111b58de6fda6f4d88bb461b63e67990c93cdc" translate="yes" xml:space="preserve">
          <source>To state that a Tcl script requires the Tk and http packages, put this at the top of the script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be01799fb8452a1fb3ff71e140db6b861e9df1" translate="yes" xml:space="preserve">
          <source>To test to see if the Snack package is available and load if it is (often useful for optional enhancements to programs where the loss of the functionality is not critical) do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d990d6ac6831f7f1f6bee635ab002e3930160dc" translate="yes" xml:space="preserve">
          <source>To these columns may be added additional ones that are specific to a particular database system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e15c774856b806dc8d977667f47f27c517004f" translate="yes" xml:space="preserve">
          <source>Toggle the selection state of each item in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb7629c107074848df6a26d5e56673366739dd1" translate="yes" xml:space="preserve">
          <source>Toggle the selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579826e486a300f695c61a7373519b1f988d7c55" translate="yes" xml:space="preserve">
          <source>Toggles between the selected and deselected states and evaluates the associated &lt;b&gt;-command&lt;/b&gt;. If the widget is currently selected, sets the &lt;b&gt;-variable&lt;/b&gt; to the &lt;b&gt;-offvalue&lt;/b&gt; and deselects the widget; otherwise, sets the &lt;b&gt;-variable&lt;/b&gt; to the &lt;b&gt;-onvalue&lt;/b&gt; Returns the result of the &lt;b&gt;-command&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97faedc1afd731e817cc1f2e005e62264447ed8" translate="yes" xml:space="preserve">
          <source>Toggles the selection state of the button, redisplaying it and modifying its associated variable to reflect the new state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965de5ffa346665a7ad0c13952cca2eaab748ffb" translate="yes" xml:space="preserve">
          <source>TotalUnits</source>
          <target state="translated">TotalUnits</target>
        </trans-unit>
        <trans-unit id="41447890da5908f1cdcba61fcca4b1608b8da06c" translate="yes" xml:space="preserve">
          <source>Traces and upvar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee9a7f496ba891890f8d6b6b25ed6847cf112ab" translate="yes" xml:space="preserve">
          <source>Transaction isolation levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685ad7c59aeb1945ef867b52857539b62c1b81c" translate="yes" xml:space="preserve">
          <source>Transformations</source>
          <target state="translated">Transformations</target>
        </trans-unit>
        <trans-unit id="ce751f0564dbeb0fdb570b908776d9cab9fc6b95" translate="yes" xml:space="preserve">
          <source>Traverse to the previous window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80f0595b4f7e700f1b0b5ec71abb9bea27d906c" translate="yes" xml:space="preserve">
          <source>Treat</source>
          <target state="translated">Treat</target>
        </trans-unit>
        <trans-unit id="cdce232a1a2b04b117e18224545bdbd3d19301cf" translate="yes" xml:space="preserve">
          <source>Treats</source>
          <target state="translated">Treats</target>
        </trans-unit>
        <trans-unit id="c9f919e63a885b3bc0b9a33e4771e05c79574334" translate="yes" xml:space="preserve">
          <source>Tree heading area; use [&lt;b&gt;pathname identify column &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef575842be7272ec27de72047a3ca9b7a7d52b9" translate="yes" xml:space="preserve">
          <source>Treeview widgets support horizontal and vertical scrolling with the standard &lt;b&gt;-&lt;/b&gt;[&lt;b&gt;xy&lt;/b&gt;]&lt;b&gt;scrollcommand&lt;/b&gt; options and [&lt;b&gt;xy&lt;/b&gt;]&lt;b&gt;view&lt;/b&gt; widget commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0452468c023b04efc5995529c06ee6cbfb8972bd" translate="yes" xml:space="preserve">
          <source>Triple-clicking with mouse button 1 selects all of the text in the entry and positions the insert cursor at the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fe476a49e92b6897c78db4bcb973b7993bc0bc" translate="yes" xml:space="preserve">
          <source>Triple-clicking with mouse button 1 selects all of the text in the entry and positions the insertion cursor at the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d27b459583b2ff3f90a8d0ce1084eb9d697806" translate="yes" xml:space="preserve">
          <source>Triple-clicking with mouse button 1 selects all of the text in the spinbox and positions the insertion cursor before the first character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4118466309dfd5b4b9b6808018ca1263413e012" translate="yes" xml:space="preserve">
          <source>Triple-clicking with mouse button 1 selects the line under the mouse and positions the insertion cursor at the start of the line. Dragging after a triple click will stroke out a selection consisting of whole lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29069e3fe0aff71fc3c4247c252ab2382893d220" translate="yes" xml:space="preserve">
          <source>Turn on or off the pre-initialization of all allocated memory with bogus bytes. Useful for detecting the use of uninitialized values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d13cf96a3040bf9097ca90ec6d8f6f8bb109dd8" translate="yes" xml:space="preserve">
          <source>Turns memory tracing on or off. When memory tracing is on, every call to &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckalloc&lt;/a&gt;&lt;/b&gt; causes a line of trace information to be written to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77ea3872689c772ae099477c1a7469f99e772a5" translate="yes" xml:space="preserve">
          <source>Turns memory validation on or off. When memory validation is enabled, on every call to &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckalloc&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckfree&lt;/a&gt;&lt;/b&gt;, the guard zones are checked for every piece of memory currently in existence that was allocated by &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckalloc&lt;/a&gt;&lt;/b&gt;. This has a large performance impact and should only be used when overwrite problems are strongly suspected. The advantage of enabling memory validation is that a guard zone overwrite can be detected on the first call to &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckalloc&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;https://www.tcl.tk/man/tcl/TclLib/Alloc.htm&quot;&gt;ckfree&lt;/a&gt;&lt;/b&gt; after the overwrite occurred, rather than when the specific memory with the overwritten guard zone(s) is freed, which may occur long after the overwrite occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dff39ad3f2fb6a5c16770c96258be46b00ab6f" translate="yes" xml:space="preserve">
          <source>Two forms of grabs are possible: local and global. A local grab affects only the grabbing application: events will be reported to other applications as if the grab had never occurred. Grabs are local by default. A global grab locks out all applications on the screen, so that only the given subtree of the grabbing application will be sensitive to pointer events (mouse button presses, mouse button releases, pointer motions, window entries, and window exits). During global grabs the window manager will not receive pointer events either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5f973104ef08166ff5957370d2d37bf0b142c5" translate="yes" xml:space="preserve">
          <source>Two marks have special significance. First, the mark &lt;b&gt;insert&lt;/b&gt; is associated with the insertion cursor, as described under &lt;b&gt;&lt;a href=&quot;#M86&quot;&gt;THE INSERTION CURSOR&lt;/a&gt;&lt;/b&gt; below. Second, the mark &lt;b&gt;current&lt;/b&gt; is associated with the character closest to the mouse and is adjusted automatically to track the mouse position and any changes to the text in the widget (one exception: &lt;b&gt;current&lt;/b&gt; is not updated in response to mouse motions if a mouse button is down; the update will be deferred until all mouse buttons have been released). Neither of these special marks may be deleted. With the exception of these two special marks, all marks are shared between peer text widgets, and may be manipulated on an equal basis from any peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1639344e9f970310ba0cf1f6aea2af6c0c3fba99" translate="yes" xml:space="preserve">
          <source>Two or more forward or backward slashes in a row in a path refer to a network path. For example, a simple concatenation of the root directory &lt;b&gt;c:/&lt;/b&gt; with a subdirectory &lt;b&gt;/windows/system&lt;/b&gt; will yield &lt;b&gt;c://windows/system&lt;/b&gt; (two slashes together), which refers to the mount point called &lt;b&gt;system&lt;/b&gt; on the machine called &lt;b&gt;windows&lt;/b&gt; (and the &lt;b&gt;c:/&lt;/b&gt; is ignored), and is not equivalent to &lt;b&gt;c:/windows/system&lt;/b&gt;, which describes a directory on the current computer. The &lt;b&gt;&lt;a href=&quot;file.htm&quot;&gt;file join&lt;/a&gt;&lt;/b&gt; command should be used to concatenate path components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96d0110ad8bbe521445eada221727bb54dc53ad" translate="yes" xml:space="preserve">
          <source>Two syntaxes are provided for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e35dfbcddbffbd70f2133c324b000d91b8cad4" translate="yes" xml:space="preserve">
          <source>Two types of functions can be included in the class definition. &quot;Methods&quot; are functions which operate on a specific object, and therefore have access to both &quot;variables&quot; and &quot;common&quot; data members. &quot;Procs&quot; are ordinary procedures in the class namespace, and only have access to &quot;common&quot; data members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de5ff24c4bc2d400a33fcf80b87bec10c42b8ec" translate="yes" xml:space="preserve">
          <source>Two types of functions can be included in the extendedclass definition. &quot;Methods&quot; are functions which operate on a specific object, and therefore have access to both &quot;variables&quot; and &quot;common&quot; data members. &quot;Procs&quot; are ordinary procedures in the extendedclass namespace, and only have access to &quot;common&quot; data members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c62c4bad5639c80c31a892fdb8c52c7c32dd1" translate="yes" xml:space="preserve">
          <source>Two types of functions can be included in the widget definition. &quot;Methods&quot; are functions which operate on a specific object, and therefore have access to both &quot;variables&quot; and &quot;common&quot; data members. &quot;Procs&quot; are ordinary procedures in the widget namespace, and only have access to &quot;common&quot; data members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="f4cb8e9ae1ccde1910d7b8ea3f993b4367aef4d7" translate="yes" xml:space="preserve">
          <source>Type of action: 1 for &lt;b&gt;insert&lt;/b&gt; prevalidation, 0 for &lt;b&gt;delete&lt;/b&gt; prevalidation, or -1 for revalidation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f125fd0d8c6410edaf8f2d47a00a68304b4661" translate="yes" xml:space="preserve">
          <source>Type of action: 1 for &lt;b&gt;insert&lt;/b&gt;, 0 for &lt;b&gt;delete&lt;/b&gt;, or -1 for focus, forced or textvariable validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb8beedda8b117fa099d2a07a078ec64afab309" translate="yes" xml:space="preserve">
          <source>Types of entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51b5d97a32aed0a780b19a9c62b37ce2de50611" translate="yes" xml:space="preserve">
          <source>Types, overflow, and precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0da5b02443ddcc93470631d9d96b2730af727f" translate="yes" xml:space="preserve">
          <source>Typically the &lt;b&gt;-xscrollcommand&lt;/b&gt; option consists of the path name of a &lt;b&gt;&lt;a href=&quot;scrollbar.htm&quot;&gt;scrollbar&lt;/a&gt;&lt;/b&gt; widget followed by &amp;ldquo;set&amp;rdquo;, e.g. &amp;ldquo;.x.scrollbar set&amp;rdquo;. This will cause the scrollbar to be updated whenever the view in the window changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5dc95d8360ddec1db7baa3dba46f955c79ac89" translate="yes" xml:space="preserve">
          <source>Typically, the text is &amp;ldquo;grayed-out&amp;rdquo; in the &lt;b&gt;disabled&lt;/b&gt; state, and a different background is used in the &lt;b&gt;readonly&lt;/b&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f095dde6265241ab85c789070f5abf76268e86" translate="yes" xml:space="preserve">
          <source>UART buffer overrun (hardware) with data lost. The data comes faster than the system driver receives it. Check your advanced serial port settings to enable the FIFO (16550) buffer and/or setup a lower(1) interrupt threshold value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3c8c9b5b1b2661421e45b90fef2325c93876c0" translate="yes" xml:space="preserve">
          <source>UNIX EXAMPLES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26fc13ed128c513709d9f4fd5001e60aea02b79" translate="yes" xml:space="preserve">
          <source>UNKNOWN HANDLER BEHAVIOUR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedb1210cfd5ca06259fca08874cff56dc642176" translate="yes" xml:space="preserve">
          <source>UNLOAD HOOK PROTOTYPE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091ec67dab6a69681ef5743a16bb29e6f740ec12" translate="yes" xml:space="preserve">
          <source>UNLOAD OPERATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2062d9041ea585daaf2a8030be02340501960774" translate="yes" xml:space="preserve">
          <source>USER COMMANDS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab9201d3df635788a4aebf58450b71fcbfa6390" translate="yes" xml:space="preserve">
          <source>USER SPECIFIC PATHS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed1ce5722ab0bf26b7e4328bf7487562dfb3867" translate="yes" xml:space="preserve">
          <source>Unary minus, unary plus, bit-wise NOT, logical NOT. None of these operators may be applied to string operands, and bit-wise NOT may be applied only to integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4aab4acb93b61c473419810b9ae035a5ef3248" translate="yes" xml:space="preserve">
          <source>Unbinds the shared</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5200f7f7c484a52647f0692d1c8fff360a3d6513" translate="yes" xml:space="preserve">
          <source>Under Windows, the environment variables PATH and COMSPEC in any capitalization are converted automatically to upper case. For instance, the PATH variable could be exported by the operating system as &amp;ldquo;path&amp;rdquo;, &amp;ldquo;Path&amp;rdquo;, &amp;ldquo;PaTh&amp;rdquo;, etc., causing otherwise simple Tcl code to have to support many special cases. All other environment variables inherited by Tcl are left unmodified. Setting an env array variable to blank is the same as unsetting it as this is the behavior of the underlying Windows OS. It should be noted that relying on an existing and empty environment variable will not work on Windows and is discouraged for cross-platform usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845cbb7eaa96b89a8428a0866dda59c2881a2689" translate="yes" xml:space="preserve">
          <source>Under the old syntax the &lt;b&gt;get&lt;/b&gt; widget command returns a list of four integers, consisting of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d770ed4c028d0c49b2fc3d0701d8dadc8d2f511" translate="yes" xml:space="preserve">
          <source>Undo the last action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b58eed86c18967dd9e7d4c1cb4c647b4d098b4" translate="yes" xml:space="preserve">
          <source>Undoes the last edit action when the &lt;b&gt;-undo&lt;/b&gt; option is true. An edit action is defined as all the insert and delete commands that are recorded on the undo stack in between two separators. Generates an error when the undo stack is empty. Does nothing when the &lt;b&gt;-undo&lt;/b&gt; option is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b935ab337145efdeadda28cae18aa89a845e36" translate="yes" xml:space="preserve">
          <source>Unit</source>
          <target state="translated">Unit</target>
        </trans-unit>
        <trans-unit id="36a39bc2591ab26f6c95e08eb40602b8bf7ee10c" translate="yes" xml:space="preserve">
          <source>Unix examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540009c5ee481397c2b627f960e0969a48f44c38" translate="yes" xml:space="preserve">
          <source>Unknown handler behaviour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083fe771b31017372efe840357563c595c17637e" translate="yes" xml:space="preserve">
          <source>Unlike many other geometry managers (such as the packer) the placer does not make any attempt to manipulate the geometry of the master windows or the parents of slave windows (i.e. it does not set their requested sizes). To control the sizes of these windows, make them windows like frames and canvases that provide configuration options for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d6ccc4dbc20b27938738ea0e1874523ad4c7ea" translate="yes" xml:space="preserve">
          <source>Unlike most of the other Tk dialog commands, &lt;b&gt;&lt;a href=&quot;tk.htm&quot;&gt;tk fontchooser&lt;/a&gt;&lt;/b&gt; does not return an immediate result, as on some platforms (Mac OS X) the standard font dialog is modeless while on others (Windows) it is modal. To accommodate this difference, all user interaction with the dialog will be communicated to the caller via callbacks or virtual events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c876ef9096b64616179a0366a4cbdf4ba20e1947" translate="yes" xml:space="preserve">
          <source>Unlike slave windows managed by e.g. pack or grid, the panes managed by a panedwindow do not change width or height to accomodate changes in the requested widths or heights of the panes, once these have become mapped. Therefore it may be advisable, particularly when creating layouts interactively, to not add a pane to the panedwindow widget until after the geometry requests of that pane has been finalized (i.e., all components of the pane inserted, all options affecting geometry set to their proper values, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236b08c2e7fece4166534f3245b9a22863b53699" translate="yes" xml:space="preserve">
          <source>Unlinks all of the specified items in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b80a8a20a3990ef3f4e9d1ffab3385c846f963b" translate="yes" xml:space="preserve">
          <source>Unload hook prototype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593a18e47884f5ab576809dc6772e7ec381dc94d" translate="yes" xml:space="preserve">
          <source>Unload operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233f69c5b306752e0659a96526bb3ca6374e1641" translate="yes" xml:space="preserve">
          <source>Unlocks the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73f309b5e3e139a0873059788bee118e29a9a16" translate="yes" xml:space="preserve">
          <source>Unmap the window so that it is no longer displayed. If a lower-level cascaded menu is posted, unpost that menu. Returns an empty string. This subcommand does not work on Windows and the Macintosh, as those platforms have their own way of unposting menus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3550ad7a4a7b5284f2da69dc614fffc593602f" translate="yes" xml:space="preserve">
          <source>Unset the package private locale and use the globale locale. Load and remove locales to adjust the list of loaded locales for the package to the global loaded locales list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d74fca874bfdd6d94e555e0f88eaae2fe2c903" translate="yes" xml:space="preserve">
          <source>Unsets all of the elements in the array that match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e8cfa3608f1e2b05fe1fea172aba0c9a570055" translate="yes" xml:space="preserve">
          <source>Unsets the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faa3a041d7d68d19f7cd6c1ab98bb3838a550ad" translate="yes" xml:space="preserve">
          <source>Unsets the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a678a4b2ca33cf000f06f5d4b4c7c81ad9cb9d2a" translate="yes" xml:space="preserve">
          <source>Unsetting this value will disable message file load for the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7eb9648563dc3352f7669f38e16a4352249b12" translate="yes" xml:space="preserve">
          <source>Upper-case characters in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed8c77b658659c376790a7576f3e997c29afee5" translate="yes" xml:space="preserve">
          <source>Upvar interacts with traces in a straightforward but possibly unexpected manner. If a variable trace is defined on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="ebf69e921bb66cb71fd055ac2ab72b3348f41697" translate="yes" xml:space="preserve">
          <source>Use XPG3 format codes to allow reordering of fields (a technique that is often used in localized message catalogs; see &lt;b&gt;&lt;a href=&quot;msgcat.htm&quot;&gt;msgcat&lt;/a&gt;&lt;/b&gt;) without reordering the data values passed to &lt;b&gt;format&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27defad96e296767ea6d1f548c217a0cf1de23e" translate="yes" xml:space="preserve">
          <source>Use a package locale mcunknown procedure instead of the standard version supplied by the msgcat package (msgcat::mcunknown).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6a09459b6dbbe50e704c74616237b9d4b644fc" translate="yes" xml:space="preserve">
          <source>Use dictionary-style comparison. This is the same as &lt;b&gt;-ascii&lt;/b&gt; except (a) case is ignored except as a tie-breaker and (b) if two strings contain embedded numbers, the numbers compare as integers, not characters. For example, in &lt;b&gt;-dictionary&lt;/b&gt; mode, &lt;b&gt;bigBoy&lt;/b&gt; sorts between &lt;b&gt;bigbang&lt;/b&gt; and &lt;b&gt;bigboy&lt;/b&gt;, and &lt;b&gt;x10y&lt;/b&gt; sorts between &lt;b&gt;x9y&lt;/b&gt; and &lt;b&gt;x11y&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789eab49deb182038047ee2b844b4d8164b34201" translate="yes" xml:space="preserve">
          <source>Use exact matching when comparing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7131465152cce9edbc4de1e5087e72ec17d4df2f" translate="yes" xml:space="preserve">
          <source>Use exact matching: the characters in the matching range must be identical to those in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075d16ecbb0d1fa04d50a4e6d13908780f5f32ee" translate="yes" xml:space="preserve">
          <source>Use of this command is deprecated in favour of more advanced thread reservation system implemented with &lt;b&gt;thread::preserve&lt;/b&gt; and &lt;b&gt;thread::release&lt;/b&gt; commands . Support for &lt;b&gt;thread::exit&lt;/b&gt; command will dissapear in some future major release of the extension .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd549c63645f84e7c7d676a31a799abab7bd9b2" translate="yes" xml:space="preserve">
          <source>Use of this command is deprecated in favour of more advanced thread reservation system implemented with &lt;b&gt;thread::preserve&lt;/b&gt; and &lt;b&gt;thread::release&lt;/b&gt; commands . Support for &lt;b&gt;thread::unwind&lt;/b&gt; command will dissapear in some future major release of the extension .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4241316691463427b5698bcf43c8350bf4390bc3" translate="yes" xml:space="preserve">
          <source>Use string comparison with Unicode code-point collation order (the name is for backward-compatibility reasons.) This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bd2030686a0114e79d06695b0a432f0ca6835a" translate="yes" xml:space="preserve">
          <source>Use the &lt;b&gt;-setup&lt;/b&gt; and &lt;b&gt;-cleanup&lt;/b&gt; options to establish and release all context requirements of the test body. Do not make tests depend on prior tests in the file. Those prior tests might be skipped. If several consecutive tests require the same context, the appropriate setup and cleanup scripts may be stored in variable for passing to each tests &lt;b&gt;-setup&lt;/b&gt; and &lt;b&gt;-cleanup&lt;/b&gt; options. This is a better solution than performing setup outside of &lt;b&gt;test&lt;/b&gt; commands, because the setup will only be done if necessary, and any errors during setup will be reported, and not cause the test file to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e29d197812195277be98e5f06455364d4d6b1d6" translate="yes" xml:space="preserve">
          <source>Use with serial ports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a4532d3a3aef3cc446fe8279f00475b042f899" translate="yes" xml:space="preserve">
          <source>Used by &lt;b&gt;auto_execok&lt;/b&gt; to record information about whether particular commands exist as executable files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0deb94d08f1cace4cb7d73d1f5fee497856efd6" translate="yes" xml:space="preserve">
          <source>Used by &lt;b&gt;auto_load&lt;/b&gt; to save the index information read from disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0c903cebf4d6072dd0c4a80a767d76c23b24f2" translate="yes" xml:space="preserve">
          <source>Used in conjunction with &lt;b&gt;-repeatdelay&lt;/b&gt;: once auto-repeat begins, this option determines the number of milliseconds between auto-repeats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00b6f9efcab01b8619517d72413bbc01955fe98" translate="yes" xml:space="preserve">
          <source>Used to clean-up all on-demand loaded resources in the interpreter . It effectively brings Tcl interpreter to its pristine state .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01926a054ab608c3b71526d3f876a4cfa569eb87" translate="yes" xml:space="preserve">
          <source>Used to refresh the state of the interpreter to match the optional trace ?epoch? . If the optional ?epoch? is not given, it takes the most recent trace epoch .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f7f5a1ae4d50b0ad0927680b49a7172e97ca10" translate="yes" xml:space="preserve">
          <source>User commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0beb0d714f19dc41a7479a48f60ad67eaded0b57" translate="yes" xml:space="preserve">
          <source>User specific paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc19a3f025495fbdb19bb7f87151ef97ca7e80cd" translate="yes" xml:space="preserve">
          <source>UserCmd</source>
          <target state="translated">UserCmd</target>
        </trans-unit>
        <trans-unit id="f742bbe8b9220c1efcd073865e4aaa4cb8ca173f" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;join&lt;/b&gt; to flatten a list by a single level:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547289c822cf945bc949dbad87a6c1921d8d95d3" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;lappend&lt;/b&gt; to build up a list of numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee65ebf249e19d43a73868c14db48fcf4c29fb2" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;lsearch&lt;/b&gt; to filter lists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ba70ba502a5ced2e630f5d81cf4d5650d946dd" translate="yes" xml:space="preserve">
          <source>Using flag &lt;b&gt;-joinable&lt;/b&gt; it is possible to create a joinable thread, i .e . one upon whose exit can be waited upon by using &lt;b&gt;thread::join&lt;/b&gt; command . Note that failure to join a thread created with &lt;b&gt;-joinable&lt;/b&gt; flag results in resource and memory leaks .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87914d2f3256b72cb6b6f286f430beee92080574" translate="yes" xml:space="preserve">
          <source>Using glob matching and the fall-through body is an alternative to writing regular expressions with alternations, as can be seen here (this returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758a76d8808106edb0f8210a6bea85202a05f40e" translate="yes" xml:space="preserve">
          <source>Using grid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6a2383b66256faa9cfe5286133118ccbd2f0b0" translate="yes" xml:space="preserve">
          <source>Using pack:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3e9155f69edf73caab337bf5f64231188b1e48" translate="yes" xml:space="preserve">
          <source>VALIDATION</source>
          <target state="translated">VALIDATION</target>
        </trans-unit>
        <trans-unit id="f56a7a48ea344e1fb54566e5491b46c21030f37e" translate="yes" xml:space="preserve">
          <source>VALIDATION MODES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22016a0b099de1f3ca15f1e0838cb76ceee5715f" translate="yes" xml:space="preserve">
          <source>VALIDATION SCRIPT SUBSTITUTIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fcb61029823124da78ad195388293fa0fe55ea" translate="yes" xml:space="preserve">
          <source>VARIABLES</source>
          <target state="translated">VARIABLES</target>
        </trans-unit>
        <trans-unit id="1a0e7c6395aa749eb79993b77fe40299cee85e5a" translate="yes" xml:space="preserve">
          <source>VERSION NUMBERS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c2118307e12b468ba4710d8369f8b02efe4188" translate="yes" xml:space="preserve">
          <source>VIRTUAL EVENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4aefa35c3b5ad26cd56f18c500001b89f66a9ce" translate="yes" xml:space="preserve">
          <source>Valid</source>
          <target state="translated">Valid</target>
        </trans-unit>
        <trans-unit id="84f2f3ec3827618d62354b42e515a504932d9cf4" translate="yes" xml:space="preserve">
          <source>Valid attributes and associated values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bba0a5d311fa7103c46c4335eaae8e574106433" translate="yes" xml:space="preserve">
          <source>Valid for &lt;b&gt;Enter&lt;/b&gt;, &lt;b&gt;Leave&lt;/b&gt;, &lt;b&gt;FocusIn&lt;/b&gt; and &lt;b&gt;FocusOut&lt;/b&gt; events. Corresponds to the &lt;b&gt;%d&lt;/b&gt; substitution for binding scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4802c4755280331faca2c75aeeab8a0d45c27bd" translate="yes" xml:space="preserve">
          <source>Valid values for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05d41d8df5d80477579d18f15de7263ecd83392" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;b&gt;tcl_precision&lt;/b&gt; range from 0 to 17.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="1b4ba67ec12f84c0ea1d9cf901eca7b0c125ff3f" translate="yes" xml:space="preserve">
          <source>Validation is performed for all above conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d267cb008eadc082e2c868570e519b7d7a026635" translate="yes" xml:space="preserve">
          <source>Validation modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a818e2a09f83c20d420e7b85e3ec2c6a8c5aa88b" translate="yes" xml:space="preserve">
          <source>Validation script substitutions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b3189ef7c3153c3230a1f0c604d2223eeb1c7f" translate="yes" xml:space="preserve">
          <source>Validation works by setting the &lt;b&gt;-validatecommand&lt;/b&gt; option to a script (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb95de755636ca96ecd6df755dab0392b4c8e737" translate="yes" xml:space="preserve">
          <source>Validation works by setting the &lt;b&gt;-validatecommand&lt;/b&gt; option to a script which will be evaluated according to the &lt;b&gt;-validate&lt;/b&gt; option as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="f123f793dd439ad762f7c51e88cad426181d7814" translate="yes" xml:space="preserve">
          <source>VarName</source>
          <target state="translated">VarName</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="77beec37551695ed13cfaf90f074478c80e025da" translate="yes" xml:space="preserve">
          <source>Version numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26880e7934aa67fddfa07d1085cd7d6dd97095d5" translate="yes" xml:space="preserve">
          <source>Version numbers consist of one or more decimal numbers separated by dots, such as 2 or 1.162 or 3.1.13.1. The first number is called the major version number. Larger numbers correspond to later versions of a package, with leftmost numbers having greater significance. For example, version 2.1 is later than 1.3 and version 3.4.6 is later than 3.3.5. Missing fields are equivalent to zeroes: version 1.3 is the same as version 1.3.0 and 1.3.0.0, so it is earlier than 1.3.1 or 1.3.0.2. In addition, the letters &amp;ldquo;a&amp;rdquo; (alpha) and/or &amp;ldquo;b&amp;rdquo; (beta) may appear exactly once to replace a dot for separation. These letters semantically add a negative specifier into the version, where &amp;ldquo;a&amp;rdquo; is -2, and &amp;ldquo;b&amp;rdquo; is -1. Each may be specified only once, and &amp;ldquo;a&amp;rdquo; or &amp;ldquo;b&amp;rdquo; are mutually exclusive in a specifier. Thus 1.3a1 becomes (semantically) 1.3.-2.1, 1.3b1 is 1.3.-1.1. Negative numbers are not directly allowed in version specifiers. A version number not containing the letters &amp;ldquo;a&amp;rdquo; or &amp;ldquo;b&amp;rdquo; as specified above is called a &lt;b&gt;stable&lt;/b&gt; version, whereas presence of the letters causes the version to be called is &lt;b&gt;unstable&lt;/b&gt;. A later version number is assumed to be upwards compatible with an earlier version number as long as both versions have the same major version number. For example, Tcl scripts written for version 2.3 of a package should work unchanged under versions 2.3.2, 2.4, and 2.5.1. Changes in the major version number signify incompatible changes: if code is written to use version 2.1 of a package, it is not guaranteed to work unmodified with either version 1.7.3 or version 3.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fe74f926a23c013f0db20d9d6d17459ff5136e" translate="yes" xml:space="preserve">
          <source>Vertical tab (Unicode U+00000B).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3eae9eb5d7fb503c6d95ee0ec80dbad9b826ae" translate="yes" xml:space="preserve">
          <source>Very long text lines can be expensive, especially if they have many marks and tags within them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf8968ee143971caf1a9fa02c337553195f9f01" translate="yes" xml:space="preserve">
          <source>VioletRed</source>
          <target state="translated">VioletRed</target>
        </trans-unit>
        <trans-unit id="a76f15b43cf944fc2e048367a6dc201efcf004ef" translate="yes" xml:space="preserve">
          <source>VioletRed1</source>
          <target state="translated">VioletRed1</target>
        </trans-unit>
        <trans-unit id="c875ce48a119a8cce6fb347e23bce3cde4debd19" translate="yes" xml:space="preserve">
          <source>VioletRed2</source>
          <target state="translated">VioletRed2</target>
        </trans-unit>
        <trans-unit id="976a77ef28bede20a0c13ffc333e542e2bdb7ff8" translate="yes" xml:space="preserve">
          <source>VioletRed3</source>
          <target state="translated">VioletRed3</target>
        </trans-unit>
        <trans-unit id="6c1a722a1d4f81c2891b0c52e919a991a30e130a" translate="yes" xml:space="preserve">
          <source>VioletRed4</source>
          <target state="translated">VioletRed4</target>
        </trans-unit>
        <trans-unit id="8e7daa120e8db8c0b0388938d9f61d6c6b796edd" translate="yes" xml:space="preserve">
          <source>Virtual</source>
          <target state="translated">Virtual</target>
        </trans-unit>
        <trans-unit id="17939436623483b052de1e4d3f9d6c11ccdc98ad" translate="yes" xml:space="preserve">
          <source>Virtual events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770d690e6d5909f7d7c475daf618ce7d3c4a71bb" translate="yes" xml:space="preserve">
          <source>Visual</source>
          <target state="translated">Visual</target>
        </trans-unit>
        <trans-unit id="2cb3ee59cbd2e4f36dcf01b7a5f007715b682d0b" translate="yes" xml:space="preserve">
          <source>Volume-relative path to a file &lt;b&gt;foo&lt;/b&gt; in the current directory on drive &lt;b&gt;c&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7195dac59a47d08a0bc3978bb082258b19d39658" translate="yes" xml:space="preserve">
          <source>Volume-relative path to a file &lt;b&gt;foo&lt;/b&gt; in the root directory of the current volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521844cd5d0688d2c77b3fde5ea381a795360bfa" translate="yes" xml:space="preserve">
          <source>Volume-relative path to a file &lt;b&gt;foo&lt;/b&gt; in the root directory of the current volume. This is not a valid UNC path, so the assumption is that the extra backslashes are superfluous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="83d3f9c1d2100ea98e1038177e9a9710e37a4067" translate="yes" xml:space="preserve">
          <source>WARNING!</source>
          <target state="translated">WARNING!</target>
        </trans-unit>
        <trans-unit id="011e3cffd526598cfdfd860e1db148314c3de4b3" translate="yes" xml:space="preserve">
          <source>WHAT IS A NAMESPACE?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44604922ab11465bfec0ea568a5764f29508a856" translate="yes" xml:space="preserve">
          <source>WIDGET COMMAND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2447b42b4aa2c0f06d1c85f0d95426d00313f6" translate="yes" xml:space="preserve">
          <source>WIDGET DEFINITIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cf495d9e5c876632fe6057770d39c7c224448a" translate="yes" xml:space="preserve">
          <source>WIDGET STATES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e115dbc9f4a814a5c034516204c99663199377f" translate="yes" xml:space="preserve">
          <source>WIDGET USAGE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6962ee0920a20ce1e6d42852bbd63e0411db7c" translate="yes" xml:space="preserve">
          <source>WIDGET-SPECIFIC OPTIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29081bcf5a01f19a4973352e4b242fd24220fa3a" translate="yes" xml:space="preserve">
          <source>WINDOW ITEMS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468237274b09cae5f2530d689856521566947da1" translate="yes" xml:space="preserve">
          <source>WINDOWS EXAMPLES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8579f5a692503e3da996104d10e0ec80e7528bf8" translate="yes" xml:space="preserve">
          <source>WINDOWS PORTABILITY ISSUES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd23fb6881da28370be757f3c32d47ab79ca675b" translate="yes" xml:space="preserve">
          <source>WORD BOUNDARY DETERMINATION VARIABLES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587197a59d2e9c3454bb4d042ef332aec3641136" translate="yes" xml:space="preserve">
          <source>WORKING WITH COMMAND BUILT-INS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb60663719aec200b33403998cf845ebca342eb" translate="yes" xml:space="preserve">
          <source>WORKING WITH CONSOLE PROGRAMS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae4d86a797dc39897b5e9f0a49b524b7eff8e44" translate="yes" xml:space="preserve">
          <source>WORKING WITH GLOBBING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1c4b91d8647158cbc6ed1143c629f3fb29947a" translate="yes" xml:space="preserve">
          <source>WORKING WITH NATIVE FILENAMES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904d92a8e220c5277cef593d349a147c967898d1" translate="yes" xml:space="preserve">
          <source>WORKING WITH NON-ZERO RESULTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530e98e95702dff1a3aab326afd036952308ce73" translate="yes" xml:space="preserve">
          <source>WORKING WITH QUOTED ARGUMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff3d40db7d87031396729efc07a7f441e2a2bcd" translate="yes" xml:space="preserve">
          <source>WORKING WITH USER-SUPPLIED SHELL SCRIPT FRAGMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e629105d57e99a5c21ee7e8401485516327e8c5" translate="yes" xml:space="preserve">
          <source>WRITE-RELATED SUBCOMMANDS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a9e80a83d1e492bd1844742d223566201f44cc" translate="yes" xml:space="preserve">
          <source>Wait five seconds for a connection to a server socket, otherwise close the socket and continue running the script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b5b26ec706ff60e1a9e767d1ac4f712a1ac17e" translate="yes" xml:space="preserve">
          <source>Wakes up all threads waiting on the condition variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="c94e855e54cd9a7ccbadd695335791061fdec071" translate="yes" xml:space="preserve">
          <source>Warning!</source>
          <target state="translated">Warning!</target>
        </trans-unit>
        <trans-unit id="9bf19660e2459157d700b373e3d3b9e2e284006d" translate="yes" xml:space="preserve">
          <source>We could access the current count like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16040e663ae01ed530d9efc63cb933e59de2665c" translate="yes" xml:space="preserve">
          <source>We could use an ensemble to clean up the syntax of the various &quot;wait&quot; commands in Tcl/Tk. Instead of using a series of strange commands like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5152ea9a6e5beeeca253937ad523c55d65e0c3f3" translate="yes" xml:space="preserve">
          <source>We might create another class like SmartToaster that redefines the &quot;toast&quot; method. If we want to access the base class method, we can qualify it with the base class name, to avoid ambiguity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1991c7969308f6cfa084e0f5adda0ca6baf8ac6f" translate="yes" xml:space="preserve">
          <source>We might create another extendedclass like SmartToaster that redefines the &quot;toast&quot; method. If we want to access the base extendedclass method, we can qualify it with the base extendedclass name, to avoid ambiguity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76697fb2b223713990957813b9887c34b7b3bcea" translate="yes" xml:space="preserve">
          <source>We might create another widget like SmartToaster that redefines the &quot;toast&quot; method. If we want to access the base widget method, we can qualify it with the base widget name, to avoid ambiguity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97211a8888128314d9ca34d1005f08cb83ed5d9c" translate="yes" xml:space="preserve">
          <source>What</source>
          <target state="translated">What</target>
        </trans-unit>
        <trans-unit id="92e8723103400272df4f56e20dd5ad8985c52294" translate="yes" xml:space="preserve">
          <source>What is a namespace?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657b3c35d774c8134682b6bc8717833d7ce32e69" translate="yes" xml:space="preserve">
          <source>What is an ensemble?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="7361a71fbf68e3c89e5a372a25c05aad2d2c03bf" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;-use&lt;/b&gt; is not used, the new toplevel created is specially decorated so the user is always aware that the user interface presented comes from a potentially unsafe code and can easily delete the corresponding interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8315ee9df64ec8519a8ecb142926c30c8b97b4d" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;dict with&lt;/b&gt; is used with a key that clashes with the name of the dictionary variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504e7184cec51f70449d243f2dfa8077cf075f99" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;scan&lt;/b&gt; finds a conversion specifier in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7916652d9addc31ccdff6b4d1b110f7823f4ca3" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;tclsh&lt;/b&gt; is invoked interactively it normally prompts for each command with &amp;ldquo;&lt;b&gt;% &lt;/b&gt;&amp;rdquo;. You can change the prompt by setting the global variables &lt;b&gt;tcl_prompt1&lt;/b&gt; and &lt;b&gt;tcl_prompt2&lt;/b&gt;. If variable &lt;b&gt;tcl_prompt1&lt;/b&gt; exists then it must consist of a Tcl script to output a prompt; instead of outputting a prompt &lt;b&gt;tclsh&lt;/b&gt; will evaluate the script in &lt;b&gt;tcl_prompt1&lt;/b&gt;. The variable &lt;b&gt;tcl_prompt2&lt;/b&gt; is used in a similar way when a newline is typed but the current command is not yet complete; if &lt;b&gt;tcl_prompt2&lt;/b&gt; is not set then no prompt is output for incomplete commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50949413711b7353f9102fed3f0c46ce0de30604" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;wish&lt;/b&gt; is invoked interactively it normally prompts for each command with &amp;ldquo;&lt;b&gt;% &lt;/b&gt;&amp;rdquo;. You can change the prompt by setting the variables &lt;b&gt;tcl_prompt1&lt;/b&gt; and &lt;b&gt;tcl_prompt2&lt;/b&gt;. If variable &lt;b&gt;tcl_prompt1&lt;/b&gt; exists then it must consist of a Tcl script to output a prompt; instead of outputting a prompt &lt;b&gt;wish&lt;/b&gt; will evaluate the script in &lt;b&gt;tcl_prompt1&lt;/b&gt;. The variable &lt;b&gt;tcl_prompt2&lt;/b&gt; is used in a similar way when a newline is typed but the current command is not yet complete; if &lt;b&gt;tcl_prompt2&lt;/b&gt; is not set then no prompt is output for incomplete commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f08ce37e920a072b3551e0fb44b2bd14149899" translate="yes" xml:space="preserve">
          <source>When Tcl detects a background error, it saves information about the error and invokes a handler command registered by &lt;b&gt;&lt;a href=&quot;interp.htm&quot;&gt;interp bgerror&lt;/a&gt;&lt;/b&gt; later as an idle event handler. The default handler command in turn calls the &lt;b&gt;bgerror&lt;/b&gt; command . Before invoking &lt;b&gt;bgerror&lt;/b&gt;, Tcl restores the &lt;b&gt;&lt;a href=&quot;tclvars.htm&quot;&gt;errorInfo&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;tclvars.htm&quot;&gt;errorCode&lt;/a&gt;&lt;/b&gt; variables to their values at the time the error occurred, then it invokes &lt;b&gt;bgerror&lt;/b&gt; with the error message as its only argument. Tcl assumes that the application has implemented the &lt;b&gt;bgerror&lt;/b&gt; command, and that the command will report the error in a way that makes sense for the application. Tcl will ignore any result returned by the &lt;b&gt;bgerror&lt;/b&gt; command as long as no error is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bbefc9cc3650a3fa258307d762044d72f30064" translate="yes" xml:space="preserve">
          <source>When Tcl processes a &lt;b&gt;dde execute&lt;/b&gt; command, the data for the execute is run as a script in the interp named by the topic of the &lt;b&gt;dde execute&lt;/b&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c49d126f720d83f7e8043082535b6309afe347" translate="yes" xml:space="preserve">
          <source>When Tcl processes a &lt;b&gt;dde request&lt;/b&gt; command, it returns the value of the variable given in the dde command in the context of the interp named by the dde topic. Tcl reserves the variable &lt;b&gt;$TCLEVAL$EXECUTE$RESULT&lt;/b&gt; for internal use, and &lt;b&gt;dde request&lt;/b&gt; commands for that variable will give unpredictable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45db4425a9d8c36918d8b044a5884e506770ee50" translate="yes" xml:space="preserve">
          <source>When Tk sees a .menubar.apple menu as the first menu in a menubar on the Macintosh, that menu's contents make up the first items of the Application menu whenever the window containing the menubar is in front. After all of the Tk-defined items, the menu will have a separator, followed by all standard Application menu items. Such a .apple menu must be present in a menu when that menu is first configured as a toplevel's menubar, otherwise a default application menu (hidden from Tk) will be inserted into the menubar at that time and subsequent addition of a .apple menu will no longer result in it becoming the Application menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88c21d4f5b34ceba9b4954ee119c12a6524ed98" translate="yes" xml:space="preserve">
          <source>When Tk sees a .menubar.help menu on the Macintosh, the menu's contents are appended to the standard Help menu of the user's menubar whenever the window's menubar is in front. The first items in the menu are provided by Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a90c9d8ed95f5353cb24e1705fab61064e6029" translate="yes" xml:space="preserve">
          <source>When Tk sees a .menubar.window menu on the Macintosh, the menu's contents are inserted into the standard Window menu of the user's menubar whenever the window's menubar is in front. The first items in the menu are provided by Mac OS X, and the names of the current toplevels are automatically appended after all the Tk-defined items and a separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47304d291720d7ed1f7aee4be93cae3511b35989" translate="yes" xml:space="preserve">
          <source>When Tk sees a Help menu on X Windows and Motif menu compatibility is enabled the menu is moved to be last in the menubar and is right justified. Motif menu compatibility is enabled by setting the Tk option &lt;b&gt;*Menu.useMotifHelp&lt;/b&gt; to true or by calling &lt;b&gt;tk::classic::restore menu&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddff6687e7e556fb53f2926795d99ab11f4fea96" translate="yes" xml:space="preserve">
          <source>When Tk sees a System menu on Windows, its items are appended to the system menu that the menubar is attached to. This menu is tied to the application icon and can be invoked with the mouse or by typing Alt+Spacebar. Due to limitations in the Windows API, any font changes, colors, images, bitmaps, or tearoff images will not appear in the system menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3d6234851cf7360a0faea15fc7c5c549469738" translate="yes" xml:space="preserve">
          <source>When a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f06b6083aee1e3bdd441d1d7dbfce36c7619ee8" translate="yes" xml:space="preserve">
          <source>When a &lt;b&gt;&lt;a href=&quot;gets.htm&quot;&gt;gets&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;flush.htm&quot;&gt;flush&lt;/a&gt;&lt;/b&gt; is done on the socket before the connection attempt succeeds or fails, if the socket is in blocking mode, the operation will wait until the connection is completed or fails. If the socket is in nonblocking mode and a &lt;b&gt;&lt;a href=&quot;gets.htm&quot;&gt;gets&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;flush.htm&quot;&gt;flush&lt;/a&gt;&lt;/b&gt; is done on the socket before the connection attempt succeeds or fails, the operation returns immediately and &lt;b&gt;&lt;a href=&quot;fblocked.htm&quot;&gt;fblocked&lt;/a&gt;&lt;/b&gt; on the socket returns 1. Synchronous client sockets may be switched (after they have connected) to operating in asynchronous mode using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cf366b452d4028341a581929539cb90ebf84be" translate="yes" xml:space="preserve">
          <source>When a binding is created with the &lt;b&gt;&lt;a href=&quot;bind.htm&quot;&gt;bind&lt;/a&gt;&lt;/b&gt; command, it is associated either with a particular window such as &lt;b&gt;.a.b.c&lt;/b&gt;, a class name such as &lt;b&gt;&lt;a href=&quot;button.htm&quot;&gt;Button&lt;/a&gt;&lt;/b&gt;, the keyword &lt;b&gt;all&lt;/b&gt;, or any other string. All of these forms are called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120247644120b1c25462f0387151bda86df52962" translate="yes" xml:space="preserve">
          <source>When a bitmap image is created, Tk also creates a new command whose name is the same as the image. This command may be used to invoke various operations on the image. It has the following general form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3559204b999676e456d77888f905f8fab00068a7" translate="yes" xml:space="preserve">
          <source>When a button has the input focus, the space key causes the button to be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8dec6f227a7036cf71998bb1bfc58743149a4e" translate="yes" xml:space="preserve">
          <source>When a button is released over a menu, the active entry (if any) is invoked. The menu also unposts unless it is a torn-off menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5647b777edf60b4884a31c3173a87e02089eaf" translate="yes" xml:space="preserve">
          <source>When a checkbutton has the input focus, the space key causes the checkbutton to be invoked. Under Windows, there are additional key bindings; plus (&lt;b&gt;+&lt;/b&gt;) and equal (&lt;b&gt;=&lt;/b&gt;) select the button, and minus (&lt;b&gt;-&lt;/b&gt;) deselects the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb13a4d436f842d7689c312816e30eebafb626f8" translate="yes" xml:space="preserve">
          <source>When a definition of a virtual event changes at run time, all windows will respond immediately to the new definition. Starting from the preceding example, if the following code is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2df97604ce871b68ed99b395d490df74351788" translate="yes" xml:space="preserve">
          <source>When a file containing a shared library is loaded through the &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; command, Tcl associates two reference counts to the library file. The first counter shows how many times the library has been loaded into normal (trusted) interpreters while the second describes how many times the library has been loaded into safe interpreters. As a file containing a shared library can be loaded only once by Tcl (with the first &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; call on the file), these counters track how many interpreters use the library. Each subsequent call to &lt;b&gt;&lt;a href=&quot;load.htm&quot;&gt;load&lt;/a&gt;&lt;/b&gt; after the first simply increments the proper reference count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6092f492954feab06dbfa83658cc5bcf313ff69d" translate="yes" xml:space="preserve">
          <source>When a limit is exceeded for an interpreter, first any handler callbacks defined by master interpreters are called. If those callbacks increase or remove the limit, execution within the (previously) limited interpreter continues. If the limit is still in force, an error is generated at that point and normal processing of errors within the interpreter (by the &lt;b&gt;&lt;a href=&quot;catch.htm&quot;&gt;catch&lt;/a&gt;&lt;/b&gt; command) is disabled, so the error propagates outwards (building a stack-trace as it goes) to the point where the limited interpreter was invoked (e.g. by &lt;b&gt;interp eval&lt;/b&gt;) where it becomes the responsibility of the calling code to catch and handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac351782dc85dad9a380c5ca655e8d7613b9ce8" translate="yes" xml:space="preserve">
          <source>When a load fails with &amp;ldquo;library not found&amp;rdquo; error, it is also possible that a dependent library was not found. To see the dependent libraries, type &amp;ldquo;dumpbin -imports &amp;lt;dllname&amp;gt;&amp;rdquo; in a DOS console to see what the library must import. When loading a DLL in the current directory, Windows will ignore &amp;ldquo;./&amp;rdquo; as a path specifier and use a search heuristic to find the DLL instead. To avoid this, load the DLL with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38eeae2a7953f73f7994438a9ca545913dc84465" translate="yes" xml:space="preserve">
          <source>When a locale is specified by the user, a &amp;ldquo;best match&amp;rdquo; search is performed during string translation. For example, if a user specifies en_GB_Funky, the locales &amp;ldquo;en_gb_funky&amp;rdquo;, &amp;ldquo;en_gb&amp;rdquo;, &amp;ldquo;en&amp;rdquo; and &amp;ldquo;&amp;rdquo; (the empty string) are searched in order until a matching translation string is found. If no translation string is available, then the unknown handler is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04adbe246672fb130e049578f170e42093a01f4" translate="yes" xml:space="preserve">
          <source>When a menu is set as a menubar for a toplevel window, or when a menu is torn off, a clone of the menu is made. This clone is a menu widget in its own right, but it is a child of the original. Changes in the configuration of the original are reflected in the clone. Additionally, any cascades that are pointed to are also cloned so that menu traversal will work right. Clones are destroyed when either the tearoff or menubar goes away, or when the original menu is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a3a3f3614f7ca5c1d3ee14f42716901a7bbbea" translate="yes" xml:space="preserve">
          <source>When a menubutton is posted, its associated menu claims the input focus to allow keyboard traversal of the menu and its submenus. See the &lt;b&gt;&lt;a href=&quot;menu.htm&quot;&gt;menu&lt;/a&gt;&lt;/b&gt; manual entry for details on these bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0526e469b80cee5d006bad3a4a7e924f0172763f" translate="yes" xml:space="preserve">
          <source>When a method of an object is invoked, things happen in several stages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112a346bc7e529c7e7da53267f301829e49b4abc" translate="yes" xml:space="preserve">
          <source>When a mouse button is pressed, the window containing the pointer automatically obtains a temporary pointer grab. Subsequent &lt;b&gt;ButtonPress&lt;/b&gt;, &lt;b&gt;ButtonRelease&lt;/b&gt;, and &lt;b&gt;Motion&lt;/b&gt; events will be sent to that window, regardless of which window contains the pointer, until all buttons have been released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8881e850bae8cf03863ebde345ce165473cd7bf" translate="yes" xml:space="preserve">
          <source>When a new frame is created, it has no default event bindings: frames are not intended to be interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd73badaa3241e2ce9922a80759d764fe2ee5474" translate="yes" xml:space="preserve">
          <source>When a new label is created, it has no default event bindings: labels are not intended to be interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d220ea71b4f0f91bf50e0150a5dc23be19fc38b" translate="yes" xml:space="preserve">
          <source>When a new labelframe is created, it has no default event bindings: labelframes are not intended to be interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68243a00ac3c0937ade7e0c4ad2a58c9205d605d" translate="yes" xml:space="preserve">
          <source>When a new message is created, it has no default event bindings: messages are intended for output purposes only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9f1b6d3759e16ad19916389a61611140f3097c" translate="yes" xml:space="preserve">
          <source>When a new toplevel is created, it has no default event bindings: toplevels are not intended to be interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada6c3e5de9eab58a37438b68ed1324f1bab1a89" translate="yes" xml:space="preserve">
          <source>When a pane is resized from outside (e.g. it is packed to expand and fill, and the containing toplevel is resized), space is added to the final (rightmost or bottommost) pane in the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3f87e49331b1603df1e278a86376eb8a5b3103" translate="yes" xml:space="preserve">
          <source>When a photo image is created, Tk also creates a new command whose name is the same as the image. This command may be used to invoke various operations on the image. It has the following general form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414069793f6cc1b19d785c3dc99d6c681e83016e" translate="yes" xml:space="preserve">
          <source>When a photo image is displayed in a window, the photo image code allocates colors to use to display the image and dithers the image, if necessary, to display a reasonable approximation to the image using the colors that are available. The colors are allocated as a color cube, that is, the number of colors allocated is the product of the number of shades of red, green and blue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211902875ef602c6757a48fff223ab4af7cb6957" translate="yes" xml:space="preserve">
          <source>When a procedure wants to signal that it has received invalid arguments from its caller, it may use &lt;b&gt;return -code error&lt;/b&gt; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2ca9db4338aa56253b172d662de910f0833512" translate="yes" xml:space="preserve">
          <source>When a radiobutton has the input focus, the space key causes the radiobutton to be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae33670a5e6b4ffac7ffd461f3bb549e1c3279b5" translate="yes" xml:space="preserve">
          <source>When a thread or interpreter is deleted, all channels created with this subcommand and using this thread/interpreter as their computing base are deleted as well, in all interpreters they have been shared with or moved into, and in whatever thread they have been transferred to. While this pulls the rug out under the other thread(s) and/or interpreter(s), this cannot be avoided. Trying to use such a channel will cause the generation of a regular error about unknown channel handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142eb33b36c1c45c0c5285bc5b50f70ab9d626af" translate="yes" xml:space="preserve">
          <source>When a token is used in a safe interpreter in a request to source or load a file, the token is checked and translated to a real path name and the file to be sourced or loaded is located on the file system. The safe interpreter never gains knowledge of the actual path name under which the file is stored on the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc61e1dec14b99ca460c70bcb86c992a29733789" translate="yes" xml:space="preserve">
          <source>When a widget is made busy, the widget and all of its descendants will ignore events. It's easy to make an entire panel of widgets busy. You can simply make the toplevel widget (such as &amp;ldquo;.&amp;rdquo;) busy. This is easier and far much more efficient than recursively traversing the widget hierarchy, disabling each widget and re-configuring its cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b118935cfa1dba0543d2356e3650647f03c28c2c" translate="yes" xml:space="preserve">
          <source>When a widget is made busy, the widget is prevented from gaining the keyboard focus by the busy window. But if the widget already had focus, it still may received keyboard events. To prevent this, you must move focus to another window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db6ac8564c391cf21d3d827467cb57b90caeb98" translate="yes" xml:space="preserve">
          <source>When an embedded image is added to a text widget with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6a50659950afa702000014ffd1839b7a5f6610" translate="yes" xml:space="preserve">
          <source>When an embedded window is added to a text widget with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85412aa79381a84ffc3bcbbdd9bc4ca299293866" translate="yes" xml:space="preserve">
          <source>When an exception happens in a situation where it cannot be reported directly up the stack (e.g. when processing events in an &lt;b&gt;&lt;a href=&quot;update.htm&quot;&gt;update&lt;/a&gt;&lt;/b&gt; or &lt;b&gt;&lt;a href=&quot;vwait.htm&quot;&gt;vwait&lt;/a&gt;&lt;/b&gt; call) the exception is instead reported through the background exception handling mechanism. Every interpreter has a background exception handler registered; the default exception handler arranges for the &lt;b&gt;&lt;a href=&quot;bgerror.htm&quot;&gt;bgerror&lt;/a&gt;&lt;/b&gt; command in the interpreter's global namespace to be called, but other exception handlers may be installed and process background exceptions in substantially different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12af41bf09491370aa78787cfd1a0939289c88c4" translate="yes" xml:space="preserve">
          <source>When an internal window receives the input focus, Tk does not actually set the X focus to that window; as far as X is concerned, the focus will stay on the top-level window containing the window with the focus. However, Tk generates FocusIn and FocusOut events just as if the X focus were on the internal window. This approach gets around a number of problems that would occur if the X focus were actually moved; the fact that the X focus is on the top-level is invisible unless you use C code to query the X server directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbddc96f22b6571b1672d89b8a25e0a4ab316dd" translate="yes" xml:space="preserve">
          <source>When an interpreter is created Tcl initializes this variable to hold a string giving the current patch level for Tcl, such as &lt;b&gt;8.4.16&lt;/b&gt; for Tcl 8.4 with the first sixteen official patches, or &lt;b&gt;8.5b3&lt;/b&gt; for the third beta release of Tcl 8.5. The value of this variable is returned by the &lt;b&gt;&lt;a href=&quot;info.htm&quot;&gt;info patchlevel&lt;/a&gt;&lt;/b&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf8141ce08fe9f696487d1f94259ea05ffe2400" translate="yes" xml:space="preserve">
          <source>When an interpreter is created Tcl initializes this variable to hold the version number for this version of Tcl in the form</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
