<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="nginx_lua_module">
    <body>
      <group id="nginx_lua_module">
        <trans-unit id="6d97a1abd47827fe6b7bb1892f23c3c510c5e353" translate="yes" xml:space="preserve">
          <source>Starting from NGINX 1.9.11, you can also compile this module as a dynamic module, by using the &lt;code&gt;--add-dynamic-module=PATH&lt;/code&gt; option instead of &lt;code&gt;--add-module=PATH&lt;/code&gt; on the &lt;code&gt;./configure&lt;/code&gt; command line above. And then you can explicitly load the module in your &lt;code&gt;nginx.conf&lt;/code&gt; via the &lt;a href=&quot;http://nginx.org/en/docs/ngx_core_module.html#load_module&quot;&gt;load_module&lt;/a&gt; directive, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd047172ef41316b0bac25a882f8035d82009cfc" translate="yes" xml:space="preserve">
          <source>Starting from the &lt;code&gt;0.9.4&lt;/code&gt; release, this function also accepts a 5th argument, &lt;code&gt;res_table&lt;/code&gt;, for letting the caller supply the Lua table used to hold all the capturing results. Starting from &lt;code&gt;0.9.6&lt;/code&gt;, it is the caller's responsibility to ensure this table is empty. This is very useful for recycling Lua tables and saving GC and table allocation overhead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8188f412359ca9aadcb16bd9ce5726504d5da177" translate="yes" xml:space="preserve">
          <source>Starting from the &lt;code&gt;0.9.9&lt;/code&gt; release, the cosocket object here is full-duplex, that is, a reader &quot;light thread&quot; and a writer &quot;light thread&quot; can operate on a single cosocket object simultaneously (both &quot;light threads&quot; must belong to the same Lua handler though, see reasons above). But you cannot have two &quot;light threads&quot; both reading (or writing or connecting) the same cosocket, otherwise you might get an error like &quot;socket busy reading&quot; when calling the methods of the cosocket object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3754b62dc11d04cbf2fb007d2860b9e46b74987b" translate="yes" xml:space="preserve">
          <source>Starting from the &lt;code&gt;v0.9.20&lt;/code&gt; release, you can use the &lt;a href=&quot;#access_by_lua_no_postpone&quot;&gt;access_by_lua_no_postpone&lt;/a&gt; directive to control when to run this handler inside the &quot;access&quot; request-processing phase of NGINX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d233fcff5bc1867bd9d5514a5dd9b82f8d0f470" translate="yes" xml:space="preserve">
          <source>Starting from the &lt;code&gt;v0.9.3&lt;/code&gt; release, it is allowed to create zero-delay timers even when the Nginx worker process starts shutting down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43325a86a3290343a7b6d2383ea8fc34a5c4fb5c" translate="yes" xml:space="preserve">
          <source>Statically Linking Pure Lua Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="b5c31820448a1cc654eb35adc849402604b926fd" translate="yes" xml:space="preserve">
          <source>Subrequest API functions (e.g., &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da95ef5b3e8cbe834405da7799c46e5c90af20f" translate="yes" xml:space="preserve">
          <source>Subrequests are all internal requests and so are requests after internal redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcf9a9cb9ce4859c5b4eaaf635c977bb2497c64" translate="yes" xml:space="preserve">
          <source>Subrequests are completely different from HTTP 301/302 redirection (via &lt;a href=&quot;#ngxredirect&quot;&gt;ngx.redirect&lt;/a&gt;) and internal redirection (via &lt;a href=&quot;#ngxexec&quot;&gt;ngx.exec&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfae1f89c006fe6a04d0de6c95337dfa35d7644" translate="yes" xml:space="preserve">
          <source>Substitutes the first match of the Perl compatible regular expression &lt;code&gt;regex&lt;/code&gt; on the &lt;code&gt;subject&lt;/code&gt; argument string with the string or function argument &lt;code&gt;replace&lt;/code&gt;. The optional &lt;code&gt;options&lt;/code&gt; argument has exactly the same meaning as in &lt;a href=&quot;#ngxrematch&quot;&gt;ngx.re.match&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="19c1b54fc653f618f98d03381525319c3151ac7c" translate="yes" xml:space="preserve">
          <source>System Environment Variable Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2445d212dd8a165e440cc6272fb3d2014d678771" translate="yes" xml:space="preserve">
          <source>TCP socket connect operation issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcff10d1557d276c63c24add6ad5a5118d4e375" translate="yes" xml:space="preserve">
          <source>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b698c11e84460ed5999bfeb5cbf25b865c238f3c" translate="yes" xml:space="preserve">
          <source>TODO</source>
          <target state="translated">TODO</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afaaf7fc8cf263d64f0d4b1181dc0a418e30923" translate="yes" xml:space="preserve">
          <source>Test Suite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435d4dc03c4fcc195eb1904ee0cf588ca79ba0eb" translate="yes" xml:space="preserve">
          <source>Test::Nginx: &lt;a href=&quot;https://github.com/openresty/test-nginx&quot;&gt;https://github.com/openresty/test-nginx&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bad68b72932112df5e9be8360037a493e4f094e" translate="yes" xml:space="preserve">
          <source>That is, if a client IP address is in the blacklist, it will be denied before the MySQL query for more complex authentication is executed by &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e708f550a9148bbb2e6d9be6706841b4a4ca6e2f" translate="yes" xml:space="preserve">
          <source>That is, let the caller pass the &lt;code&gt;ctx&lt;/code&gt; table explicitly via a function argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5493df2ae5f32fd9400dbae91089d020bf0fd927" translate="yes" xml:space="preserve">
          <source>That is, nginx variables cannot be created on-the-fly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c646775cdbe741c7d0fa48f53c2af56fcebe12" translate="yes" xml:space="preserve">
          <source>That is, the &lt;code&gt;ngx.ctx.foo&lt;/code&gt; entry persists across the rewrite, access, and content phases of a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e681db9aa3b3a123203188035ed51abac7ddcd4" translate="yes" xml:space="preserve">
          <source>That is, they will take Lua boolean values &lt;code&gt;true&lt;/code&gt;. However, they are different from arguments taking empty string values. &lt;code&gt;GET /test?foo=&amp;amp;bar=&lt;/code&gt; will give something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ce2573625f9f18760b9457c33f852d6b92195c" translate="yes" xml:space="preserve">
          <source>That is, they will take Lua boolean values &lt;code&gt;true&lt;/code&gt;. However, they are different from arguments taking empty string values. &lt;code&gt;POST /test&lt;/code&gt; with request body &lt;code&gt;foo=&amp;amp;bar=&lt;/code&gt; will return something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bef08c1ba2460b80114090440c67a0cdab88e83" translate="yes" xml:space="preserve">
          <source>That is, when the body filter sees a chunk containing the word &quot;hello&quot;, then it will set the &quot;eof&quot; flag to true immediately, resulting in truncated but still valid responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea935d39893850ddbceb419931f91f6a6d2dd309" translate="yes" xml:space="preserve">
          <source>The &quot;light threads&quot; are not scheduled in a pre-emptive way. In other words, no time-slicing is performed automatically. A &quot;light thread&quot; will keep running exclusively on the CPU until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493b2481a63d9217b544d8a7a168c58c50232740" translate="yes" xml:space="preserve">
          <source>The &quot;parent coroutine&quot; can call &lt;a href=&quot;#ngxthreadwait&quot;&gt;ngx.thread.wait&lt;/a&gt; to wait on the termination of its child &quot;light thread&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce93b6e218087946ad570aa3fbcb3b98328dd976" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt; directives cannot capture locations that include the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_addition_module.html#add_before_body&quot;&gt;add_before_body&lt;/a&gt;, &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_addition_module.html#add_after_body&quot;&gt;add_after_body&lt;/a&gt;, &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_auth_request_module.html#auth_request&quot;&gt;auth_request&lt;/a&gt;, &lt;a href=&quot;http://github.com/openresty/echo-nginx-module#echo_location&quot;&gt;echo_location&lt;/a&gt;, &lt;a href=&quot;http://github.com/openresty/echo-nginx-module#echo_location_async&quot;&gt;echo_location_async&lt;/a&gt;, &lt;a href=&quot;http://github.com/openresty/echo-nginx-module#echo_subrequest&quot;&gt;echo_subrequest&lt;/a&gt;, or &lt;a href=&quot;http://github.com/openresty/echo-nginx-module#echo_subrequest_async&quot;&gt;echo_subrequest_async&lt;/a&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f281a1d124ecac51bb9032c508f80b880e67448" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; function is just a special form of this function. Logically speaking, the &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; can be implemented like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2764a1f9a0364748e73368ac778234da9930f9f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tcpsockconnect&quot;&gt;tcpsock:connect&lt;/a&gt; method may indicate &lt;code&gt;success&lt;/code&gt; despite connection failures such as with &lt;code&gt;Connection Refused&lt;/code&gt; errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128c00acadfcb8dee9b0cf4df11662619e8544da" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl.md&quot;&gt;ngx.ssl&lt;/a&gt; and &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ocsp.md&quot;&gt;ngx.ocsp&lt;/a&gt; Lua modules provided by the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/#readme&quot;&gt;lua-resty-core&lt;/a&gt; library are particularly useful in this context. You can use the Lua API offered by these two Lua modules to manipulate the SSL certificate chain and private key for the current SSL connection being initiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8e570e76d1ecadf9727b0d395ddc003718e1cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://groups.google.com/group/openresty&quot;&gt;openresty&lt;/a&gt; mailing list is for Chinese speakers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0549dfd3bfead6565f08db864ffc05c4488458" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://groups.google.com/group/openresty-en&quot;&gt;openresty-en&lt;/a&gt; mailing list is for English speakers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6b5dc4704498221f954adb82eb433bfeff45cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt; argument accepts size units such as &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b48b3d5f83cc902c237a27cd6f18b6aa9be2766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; argument can be an integer, with an optional time unit, like &lt;code&gt;s&lt;/code&gt; (second), &lt;code&gt;ms&lt;/code&gt; (millisecond), &lt;code&gt;m&lt;/code&gt; (minute). The default time unit is &lt;code&gt;s&lt;/code&gt;, i.e., &quot;second&quot;. The default setting is &lt;code&gt;60s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76efab7264944ace4a773d3600bc12c74e84e0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-bg&lt;/code&gt; option can be used to include debug information in the LuaJIT bytecode file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21883fff5622c3e898fee979cdc9ef400c32999e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__index&lt;/code&gt; metamethod will not be added when the &lt;code&gt;raw&lt;/code&gt; argument is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c829f5f90628bb0149ea6c6570e3deeed7ca45ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option can also take plain query strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02b7c7997642c21bbf45769fefa0d3fb6a22daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option can specify extra URI arguments, for instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf89182bfe3b5c370dd6b4402e93f39f73497e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copy_all_vars&lt;/code&gt; option provides a copy of the parent request's Nginx variables to subrequests when such subrequests are issued. Changes made to these variables by such subrequests will not affect the parent request or any other subrequests sharing the parent request's variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a2f8629ee28bea3f9b37887e862b0413017d80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ctx&lt;/code&gt; option can be used to specify a custom Lua table to serve as the &lt;a href=&quot;#ngxctx&quot;&gt;ngx.ctx&lt;/a&gt; table for the subrequest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c398712669d39171da9aab72b931534b30e037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ctx&lt;/code&gt; table argument combined with the &lt;code&gt;a&lt;/code&gt; regex modifier can be used to construct a lexer atop &lt;code&gt;ngx.re.match&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5fbd9fbeb1267a7c66218710fa3f024fe4c22b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exptime&lt;/code&gt; argument has a resolution of &lt;code&gt;0.001&lt;/code&gt; seconds. If &lt;code&gt;exptime&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, then the item will never expire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d5e7004de781376a95603f21c22043e3c96177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forcible&lt;/code&gt; return value will always be &lt;code&gt;nil&lt;/code&gt; when the &lt;code&gt;init&lt;/code&gt; argument is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b835260dffc4e81e440d5115662c814d87dca546" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;header_value&lt;/code&gt; can take an array list of values, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee36ae2e8ff0e8c0882ad839a0f6dd84b566d5fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inclusive&lt;/code&gt; takes a boolean value to control whether to include the pattern string in the returned data string. Default to &lt;code&gt;false&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53311b2abbb60ba9f29e777a244583b3b78a8b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jump&lt;/code&gt; argument can only be set to &lt;code&gt;true&lt;/code&gt; in &lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua*&lt;/a&gt;. Use of jump in other contexts is prohibited and will throw out a Lua exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6b4d06dbc5cea80082f83b73fa6ab27519ec77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log_level&lt;/code&gt; argument can take constants like &lt;code&gt;ngx.ERR&lt;/code&gt; and &lt;code&gt;ngx.WARN&lt;/code&gt;. Check out &lt;a href=&quot;#nginx-log-level-constants&quot;&gt;Nginx log level constants&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c682298710169cd66ca20a1047ce3229128ec9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mydata&lt;/code&gt; module in this example will only be loaded and run on the first request to the location &lt;code&gt;/lua&lt;/code&gt;, and all subsequent requests to the same nginx worker process will use the reloaded instance of the module as well as the same copy of the data in it, until a &lt;code&gt;HUP&lt;/code&gt; signal is sent to the Nginx master process to force a reload. This data sharing technique is essential for high performance Lua applications based on this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1296364b974d29b718fe0aca669244d08aa2a3f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngx.DECLINED&lt;/code&gt; constant was first introduced in the &lt;code&gt;v0.5.0rc19&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3d4e2ec0b9fd970bac65a6443b6be33b09cad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngx.ctx&lt;/code&gt; lookup requires relatively expensive metamethod calls and it is much slower than explicitly passing per-request data along by your own function arguments. So do not abuse this API for saving your own function arguments because it usually has quite some performance impact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e689016fc7ca45feb6b9e99f973648d06c7875e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngx.null&lt;/code&gt; constant is a &lt;code&gt;NULL&lt;/code&gt; light userdata usually used to represent nil values in Lua tables etc and is similar to the &lt;a href=&quot;http://www.kyne.com.au/%7Emark/software/lua-cjson.php&quot;&gt;lua-cjson&lt;/a&gt; library's &lt;code&gt;cjson.null&lt;/code&gt; constant. This constant was first introduced in the &lt;code&gt;v0.5.0rc5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5223bcfdd0a972c3b45f974e90f0662f4d905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngx.null&lt;/code&gt; constant will yield the &lt;code&gt;&quot;null&quot;&lt;/code&gt; string output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0455d47d04582d1aed2521c4ef684e4fd443fbef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;o&lt;/code&gt; option is useful for performance tuning, because the regex pattern in question will only be compiled once, cached in the worker-process level, and shared among all requests in the current Nginx worker process. The upper limit of the regex cache can be tuned via the &lt;a href=&quot;#lua_regex_cache_max_entries&quot;&gt;lua_regex_cache_max_entries&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ee349283a58921fe2da7220f2d0c155803b005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rewrite_by_lua&lt;/code&gt; code will always run at the end of the &lt;code&gt;rewrite&lt;/code&gt; request-processing phase unless &lt;a href=&quot;#rewrite_by_lua_no_postpone&quot;&gt;rewrite_by_lua_no_postpone&lt;/a&gt; is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84b0d172e23979ee7fbb19ab54edc10eb1372f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rewrite_by_lua_file&lt;/code&gt; code will always run at the end of the &lt;code&gt;rewrite&lt;/code&gt; request-processing phase unless &lt;a href=&quot;#rewrite_by_lua_no_postpone&quot;&gt;rewrite_by_lua_no_postpone&lt;/a&gt; is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ce706d9c9ef3645427c746bacbff2567f719c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;share_all_vars&lt;/code&gt; option controls whether to share nginx variables among the current request and its subrequests. If this option is set to &lt;code&gt;true&lt;/code&gt;, then the current request and associated subrequests will share the same Nginx variable scope. Hence, changes to Nginx variables made by a subrequest will affect the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fe351bd2b9ab1ccc84687c69d3fa760c32cc58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;status&lt;/code&gt; argument can be &lt;code&gt;ngx.OK&lt;/code&gt;, &lt;code&gt;ngx.ERROR&lt;/code&gt;, &lt;code&gt;ngx.HTTP_NOT_FOUND&lt;/code&gt;, &lt;code&gt;ngx.HTTP_MOVED_TEMPORARILY&lt;/code&gt;, or other &lt;a href=&quot;#http-status-constants&quot;&gt;HTTP status constants&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a262fbcef8060cdec4782d6b276cecc008abf25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; argument and &lt;code&gt;init&lt;/code&gt; argument can be any valid Lua numbers, like negative numbers or floating-point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a65f5f17f68609b6e86289a796d9b219eb8fce8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; argument inserted can be Lua booleans, numbers, strings, or &lt;code&gt;nil&lt;/code&gt;. Their value type will also be stored into the dictionary and the same data type can be retrieved later via the &lt;a href=&quot;#ngxshareddictget&quot;&gt;get&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cca78a6cd56391f34d1abd60cb297d66d46fb0" translate="yes" xml:space="preserve">
          <source>The API is exposed to Lua in the form of two standard packages &lt;code&gt;ngx&lt;/code&gt; and &lt;code&gt;ndk&lt;/code&gt;. These packages are in the default global scope within ngx_lua and are always available within ngx_lua directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212e8223d672a1eef118e5c6f551efe0fdc5a203" translate="yes" xml:space="preserve">
          <source>The HTTP 1.0 protocol does not support chunked output and requires an explicit &lt;code&gt;Content-Length&lt;/code&gt; header when the response body is not empty in order to support the HTTP 1.0 keep-alive. So when a HTTP 1.0 request is made and the &lt;a href=&quot;#lua_http10_buffering&quot;&gt;lua_http10_buffering&lt;/a&gt; directive is turned &lt;code&gt;on&lt;/code&gt;, ngx_lua will buffer the output of &lt;a href=&quot;#ngxsay&quot;&gt;ngx.say&lt;/a&gt; and &lt;a href=&quot;#ngxprint&quot;&gt;ngx.print&lt;/a&gt; calls and also postpone sending response headers until all the response body output is received. At that time ngx_lua can calculate the total length of the body and construct a proper &lt;code&gt;Content-Length&lt;/code&gt; header to return to the HTTP 1.0 client. If the &lt;code&gt;Content-Length&lt;/code&gt; response header is set in the running Lua code, however, this buffering will be disabled even if the &lt;a href=&quot;#lua_http10_buffering&quot;&gt;lua_http10_buffering&lt;/a&gt; directive is turned &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bdf78a0b005cf1a4af1b5ed70dc41c59603dd3" translate="yes" xml:space="preserve">
          <source>The Lua API for obtaining the current session ID and loading a cached SSL session data is provided in the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl/session.md&quot;&gt;ngx.ssl.session&lt;/a&gt; Lua module shipped with the &lt;a href=&quot;https://github.com/openresty/lua-resty-core#readme&quot;&gt;lua-resty-core&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b66deb98c8575f8c611d86ff54a71bd7327683" translate="yes" xml:space="preserve">
          <source>The Lua API for obtaining the current session ID and the associated session state data is provided in the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl/session.md#readme&quot;&gt;ngx.ssl.session&lt;/a&gt; Lua module shipped with the &lt;a href=&quot;https://github.com/openresty/lua-resty-core#readme&quot;&gt;lua-resty-core&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772f1148c1c25c928980a306e0b23b964ef7ac4d" translate="yes" xml:space="preserve">
          <source>The Lua code can pass its own modified version of the input data chunk to the downstream Nginx output body filters by overriding &lt;a href=&quot;#ngxarg&quot;&gt;ngx.arg&lt;/a&gt;[1] with a Lua string or a Lua table of strings. For example, to transform all the lowercase letters in the response body, we can just write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e23db89ef964e3c0c3aac5506e27bcd5de07a32" translate="yes" xml:space="preserve">
          <source>The Lua code handler registered by this directive might get called more than once in a single downstream request when the nginx upstream mechanism retries the request on conditions specified by directives like the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream&quot;&gt;proxy_next_upstream&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7edd80387b9379245c8e8675949383c18e82714" translate="yes" xml:space="preserve">
          <source>The Lua interpreter or LuaJIT instance is shared across all the requests in a single nginx worker process but request contexts are segregated using lightweight Lua coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff2c3dd0b6d0213a8e9e526376ebaa14d007184" translate="yes" xml:space="preserve">
          <source>The Lua load balancer can totally ignore the list of servers defined in the &lt;code&gt;upstream {}&lt;/code&gt; block and select peer from a completely dynamic server list (even changing per request) via the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/balancer.md&quot;&gt;ngx.balancer&lt;/a&gt; module from the &lt;a href=&quot;https://github.com/openresty/lua-resty-core&quot;&gt;lua-resty-core&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507d01fd24975e1324c525d8b2ac25d906d2f890" translate="yes" xml:space="preserve">
          <source>The Lua state (Lua VM instance) is shared across all the requests handled by a single nginx worker process to minimize memory use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e72aaab502edc0b73edc9cbc1fd4b16ecc0332" translate="yes" xml:space="preserve">
          <source>The OpenResty bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5cadbb997213997b2f9e29a75435f4f048a428" translate="yes" xml:space="preserve">
          <source>The TTL is originally determined by the &lt;code&gt;exptime&lt;/code&gt; argument of the &lt;a href=&quot;#ngxshareddictset&quot;&gt;set&lt;/a&gt;, &lt;a href=&quot;#ngxshareddictadd&quot;&gt;add&lt;/a&gt;, &lt;a href=&quot;#ngxshareddictreplace&quot;&gt;replace&lt;/a&gt; (and the likes) methods. It has a time resolution of &lt;code&gt;0.001&lt;/code&gt; seconds. A value of &lt;code&gt;0&lt;/code&gt; means that the item will never expire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e06eb61a6ddf913623d7fe26b376ebf48604e9" translate="yes" xml:space="preserve">
          <source>The ability to require these packages was introduced in the &lt;code&gt;v0.2.1rc19&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2800315ef27c94fdaae1c63ee269f3f6c3c4d929" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;thread1&lt;/code&gt;, &lt;code&gt;thread2&lt;/code&gt;, and etc are the Lua thread objects returned by earlier calls of &lt;a href=&quot;#ngxthreadspawn&quot;&gt;ngx.thread.spawn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f038d9d54b50157b2cdb8f7c0cae687a1e16048" translate="yes" xml:space="preserve">
          <source>The basic building blocks of scripting Nginx with Lua are directives. Directives are used to specify when the user Lua code is run and how the result will be used. Below is a diagram showing the order in which directives are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c2f884cbf8716bac1ee6ebd137ae16742c691d" translate="yes" xml:space="preserve">
          <source>The bundled version of the NGINX core in OpenResty 1.9.7.2 (or above) already has this patch applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71547188ee86c03861f08b4e98ba54f89f11c74" translate="yes" xml:space="preserve">
          <source>The callback function can decide what to do with the client abortion event all by itself. For example, it can simply ignore the event by doing nothing and the current Lua request handler will continue executing without interruptions. And the callback function can also decide to terminate everything by calling &lt;a href=&quot;#ngxexit&quot;&gt;ngx.exit&lt;/a&gt;, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09cd34554678156dfa6acfe34bd4ddf74a0aff9" translate="yes" xml:space="preserve">
          <source>The changes made in every release of this module are listed in the change logs of the OpenResty bundle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970e386bd084d99183115bd0d4582833e4033c95" translate="yes" xml:space="preserve">
          <source>The code repository of this project is hosted on github at &lt;a href=&quot;https://github.com/openresty/lua-nginx-module&quot;&gt;openresty/lua-nginx-module&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3001a0f56fb277d79c1a53802388f0949531ce3" translate="yes" xml:space="preserve">
          <source>The contents in the dictionary storage will be lost, however, when the Nginx server quits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18260de332dd4424cdf7f4dd36c9840abf521bce" translate="yes" xml:space="preserve">
          <source>The cosocket object created by this API function has exactly the same lifetime as the Lua handler creating it. So never pass the cosocket object to any other Lua handler (including ngx.timer callback functions) and never share the cosocket object between different NGINX requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad3ee46d105f2d0645ded0a41553c70a0168f41" translate="yes" xml:space="preserve">
          <source>The cosockets are currently also disabled in the &lt;a href=&quot;#init_by_lua&quot;&gt;init_by_lua*&lt;/a&gt; and &lt;a href=&quot;#init_worker_by_lua&quot;&gt;init_worker_by_lua*&lt;/a&gt; directive contexts but we may add support for these contexts in the future because there is no limitation in the nginx core (or the limitation might be worked around).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b322bf88c6142e1fa37084b8dcd7f42661e58a38" translate="yes" xml:space="preserve">
          <source>The current implementation requires that the iterator returned should only be used in a single request. That is, one should &lt;em&gt;not&lt;/em&gt; assign it to a variable belonging to persistent namespace like a Lua package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35a882cf5243f7c8003fa6b3108dc930c82df4a" translate="yes" xml:space="preserve">
          <source>The current implementation uses an NGINX log phase handler to do the request counting. So the appearance of the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#log_subrequest&quot;&gt;log_subrequest on&lt;/a&gt; directives in &lt;code&gt;nginx.conf&lt;/code&gt; may make the counting faster when subrequests are involved. By default, only &quot;main requests&quot; count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9e120f347f8db1c7d7080e09b7646e67492de2" translate="yes" xml:space="preserve">
          <source>The data chunk and &quot;eof&quot; flag passed to the downstream Nginx output filters can also be overridden by assigning values directly to the corresponding table elements. When setting &lt;code&gt;nil&lt;/code&gt; or an empty Lua string value to &lt;code&gt;ngx.arg[1]&lt;/code&gt;, no data chunk will be passed to the downstream Nginx output filters at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff53116326020147735eea3f86a8d17245b4a849" translate="yes" xml:space="preserve">
          <source>The default number of entries allowed is 1024 and when this limit is reached, new regular expressions will not be cached (as if the &lt;code&gt;o&lt;/code&gt; option was not specified) and there will be one, and only one, warning in the &lt;code&gt;error.log&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8245ee6ca00e0476be7b07495c9182ba0dd3c0e9" translate="yes" xml:space="preserve">
          <source>The dollar sign characters in the return value of the &lt;code&gt;replace&lt;/code&gt; function argument are not special at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aef324e4e541adc881d9a5e71dd7df104f89ee1" translate="yes" xml:space="preserve">
          <source>The effect in action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30472cce7864a329de522917d1afbeccf76ae408" translate="yes" xml:space="preserve">
          <source>The first argument to this method must be the dictionary object itself, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a97723b542ec4ef2fffd8846e814c828e8f641" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;delay&lt;/code&gt;, specifies the delay for the timer, in seconds. One can specify fractional seconds like &lt;code&gt;0.001&lt;/code&gt; to mean 1 millisecond here. &lt;code&gt;0&lt;/code&gt; delay can also be specified, in which case the timer will immediately expire when the current handler yields execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5a4a7533b05b60d306511331b4f93c3a14df84" translate="yes" xml:space="preserve">
          <source>The first optional argument, &lt;code&gt;timeout&lt;/code&gt;, can be used to specify the maximal idle timeout (in milliseconds) for the current connection. If omitted, the default setting in the &lt;a href=&quot;#lua_socket_keepalive_timeout&quot;&gt;lua_socket_keepalive_timeout&lt;/a&gt; config directive will be used. If the &lt;code&gt;0&lt;/code&gt; value is given, then the timeout interval is unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3beed3e118d90b065d38c548772e5d410103d33f" translate="yes" xml:space="preserve">
          <source>The following dependencies are required to run the test suite:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637c81eb3986471466bff45b7e19b77e453b9c04" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of &lt;code&gt;ngx.thread.wait&lt;/code&gt; and &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; to emulate &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b43209f4ec01cbc1b4586b52109ea9f8fe3d816" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of coroutine.yield() in the &quot;light thread&quot; coroutines to do manual time-slicing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c9a25a7baf360d34e24d9f0d021241f75a2da0" translate="yes" xml:space="preserve">
          <source>The following example emulates the &lt;code&gt;$request_time&lt;/code&gt; variable value (provided by &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_log_module.html&quot;&gt;ngx_http_log_module&lt;/a&gt;) in pure Lua:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42212cf588944bce0249835bdca575105fd2c0f4" translate="yes" xml:space="preserve">
          <source>The format for the Lua table passed as the &lt;code&gt;args&lt;/code&gt; argument is identical to the format used in the &lt;a href=&quot;#ngxencode_args&quot;&gt;ngx.encode_args&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6041674bdf6d923cdc6ec3c0edb3ff9a62a92fc2" translate="yes" xml:space="preserve">
          <source>The full list can be viewed using the &amp;ldquo;openssl ciphers&amp;rdquo; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4631f283959351330388f20f8f093a2f71ab22a" translate="yes" xml:space="preserve">
          <source>The hard-coded minimum size is 8KB while the practical minimum size depends on actual user data set (some people start with 12KB).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c68830c003240a4ef935b2a4d89403c58e82ff" translate="yes" xml:space="preserve">
          <source>The header names are matched case-insensitively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bf0182962d32c8f269060edf8a10438545124f" translate="yes" xml:space="preserve">
          <source>The input argument &lt;code&gt;data&lt;/code&gt; can either be a Lua string or a (nested) Lua table holding string fragments. In case of table arguments, this method will copy all the string elements piece by piece to the underlying Nginx socket send buffers, which is usually optimal than doing string concatenation operations on the Lua land.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a68f2055c86f0b4a5c93aeb116098c9d532c4a" translate="yes" xml:space="preserve">
          <source>The input data chunk is passed via &lt;a href=&quot;#ngxarg&quot;&gt;ngx.arg&lt;/a&gt;[1] (as a Lua string value) and the &quot;eof&quot; flag indicating the end of the response body data stream is passed via &lt;a href=&quot;#ngxarg&quot;&gt;ngx.arg&lt;/a&gt;[2] (as a Lua boolean value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b865b2e89632e2e1a2d9c342cc70c3486d1692a6" translate="yes" xml:space="preserve">
          <source>The iterator function behaves differently (i.e., like a real iterator) when it is called with a &lt;code&gt;size&lt;/code&gt; argument. That is, it will read that &lt;code&gt;size&lt;/code&gt; of data on each invocation and will return &lt;code&gt;nil&lt;/code&gt; at the last invocation (either sees the boundary pattern or meets an error). For the last successful invocation of the iterator function, the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;nil&lt;/code&gt; too. The iterator function will be reset after the last successful invocation that returns &lt;code&gt;nil&lt;/code&gt; data and &lt;code&gt;nil&lt;/code&gt; error. Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9bbfa1305dcb6174a5b03d501294b9c5e83d9c" translate="yes" xml:space="preserve">
          <source>The iterator function can be called multiple times and can be mixed safely with other cosocket method calls or other iterator function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6fbd7904840a04b5b549ca65672172aa2f1869" translate="yes" xml:space="preserve">
          <source>The latest version of this module is compatible with the following versions of Nginx:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83aea397a109ada439c979d979a50aebbd281b53" translate="yes" xml:space="preserve">
          <source>The limit can be manually modified if required by editing the definition of the &lt;code&gt;NGX_HTTP_MAX_SUBREQUESTS&lt;/code&gt; macro in the &lt;code&gt;nginx/src/http/ngx_http_request.h&lt;/code&gt; file in the Nginx source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738970af6ae4e99f793463247aa27c8e65dc613a" translate="yes" xml:space="preserve">
          <source>The maximal number of pending timers allowed in an Nginx worker is controlled by the &lt;a href=&quot;#lua_max_pending_timers&quot;&gt;lua_max_pending_timers&lt;/a&gt; directive. The maximal number of running timers is controlled by the &lt;a href=&quot;#lua_max_running_timers&quot;&gt;lua_max_running_timers&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd52c4075b2cbb03a09ea4b36f69040954f98c8" translate="yes" xml:space="preserve">
          <source>The ngx_lua module does not support the &lt;code&gt;stat&lt;/code&gt; mode available with the Apache &lt;code&gt;mod_lua&lt;/code&gt; module (yet).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865674885c0565f15c3c0b059fb58e7de950448d" translate="yes" xml:space="preserve">
          <source>The number &lt;code&gt;8&lt;/code&gt; will be consistently output when accessing &lt;code&gt;/get&lt;/code&gt; regardless of how many Nginx workers there are because the &lt;code&gt;dogs&lt;/code&gt; dictionary resides in the shared memory and visible to &lt;em&gt;all&lt;/em&gt; of the worker processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbecc7e5eee13fb54f6ff8a682f1c435d42f689" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;exptime&lt;/code&gt; argument specifies expiration time (in seconds) for the inserted key-value pair. The time resolution is &lt;code&gt;0.001&lt;/code&gt; seconds. If the &lt;code&gt;exptime&lt;/code&gt; takes the value &lt;code&gt;0&lt;/code&gt; (which is the default), then the item will never expire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049bc950fcb5361340e25a8bc84221ec612b5492" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument specifies a user flags value associated with the entry to be stored. It can also be retrieved later with the value. The user flags is stored as an unsigned 32-bit integer internally. Defaults to &lt;code&gt;0&lt;/code&gt;. The user flags argument was first introduced in the &lt;code&gt;v0.5.0rc2&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa012ff0f72db35d9a285a84ef12bc806db92247" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;init&lt;/code&gt; parameter was first added in the &lt;code&gt;v0.10.6&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c980416b97ee10079e19a3efe4025b8711b6809" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;init_ttl&lt;/code&gt; argument specifies expiration time (in seconds) of the value when it is initialized via the &lt;code&gt;init&lt;/code&gt; argument. The time resolution is &lt;code&gt;0.001&lt;/code&gt; seconds. If &lt;code&gt;init_ttl&lt;/code&gt; takes the value &lt;code&gt;0&lt;/code&gt; (which is the default), then the item will never expire. This argument cannot be provided without providing the &lt;code&gt;init&lt;/code&gt; argument as well, and has no effect if the value already exists (e.g., if it was previously inserted via &lt;a href=&quot;#ngxshareddictset&quot;&gt;set&lt;/a&gt; or the likes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7391c5b4ef241f6506eb3d02c293a05ca4ebd72f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;init_ttl&lt;/code&gt; parameter was introduced in the &lt;code&gt;v0.10.12rc2&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665bf9db44f5cfd04f5c66e46f0bf3cb93b28658" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;max_args&lt;/code&gt; argument can be used to specify the maximum number of arguments parsed from the &lt;code&gt;str&lt;/code&gt; argument. By default, a maximum of 100 request arguments are parsed (including those with the same name) and that additional URI arguments are silently discarded to guard against potential denial of service attacks. Since &lt;code&gt;v0.10.13&lt;/code&gt;, when the limit is exceeded, it will return a second value which is the string &lt;code&gt;&quot;truncated&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493c607735aa0b456d27348fea1f24028e22c5b2" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument takes exactly the same semantics as the &lt;a href=&quot;#ngxrematch&quot;&gt;ngx.re.match&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705aca588f0b2633abb24406d791e875eeb034ef" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;reused_session&lt;/code&gt; argument can take a former SSL session userdata returned by a previous &lt;code&gt;sslhandshake&lt;/code&gt; call for exactly the same target. For short-lived connections, reusing SSL sessions can usually speed up the handshake by one order by magnitude but it is not so useful if the connection pool is enabled. This argument defaults to &lt;code&gt;nil&lt;/code&gt;. If this argument takes the boolean &lt;code&gt;false&lt;/code&gt; value, no SSL session userdata would return by this call and only a Lua boolean will be returned as the first return value; otherwise the current SSL session will always be returned as the first argument in case of successes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210cef7f98d6b95bd8bb15065bccf11215f9bada" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;send_status_req&lt;/code&gt; argument takes a boolean that controls whether to send the OCSP status request in the SSL handshake request (which is for requesting OCSP stapling).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca11f868b341f7561198d59ae0bfa05b7a00f05" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;server_name&lt;/code&gt; argument is used to specify the server name for the new TLS extension Server Name Indication (SNI). Use of SNI can make different servers share the same IP address on the server side. Also, when SSL verification is enabled, this &lt;code&gt;server_name&lt;/code&gt; argument is also used to validate the server name specified in the server certificate sent from the remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbdfdf805c45a513d77660c289da3e4e9842140" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;ssl_verify&lt;/code&gt; argument takes a Lua boolean value to control whether to perform SSL verification. When set to &lt;code&gt;true&lt;/code&gt;, the server certificate will be verified according to the CA certificates specified by the &lt;a href=&quot;#lua_ssl_trusted_certificate&quot;&gt;lua_ssl_trusted_certificate&lt;/a&gt; directive. You may also need to adjust the &lt;a href=&quot;#lua_ssl_verify_depth&quot;&gt;lua_ssl_verify_depth&lt;/a&gt; directive to control how deep we should follow along the certificate chain. Also, when the &lt;code&gt;ssl_verify&lt;/code&gt; argument is true and the &lt;code&gt;server_name&lt;/code&gt; argument is also specified, the latter will be used to validate the server name in the server certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc49e28c975472bfc5dd816a692c21288c6827eb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;status&lt;/code&gt; parameter specifies the HTTP status code to be used. The following status codes are supported right now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92293ecfd6c6a30e71da275ce679f0cde410b27" translate="yes" xml:space="preserve">
          <source>The optional boolean &lt;code&gt;jump&lt;/code&gt; argument can trigger location rematch (or location jump) as &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;ngx_http_rewrite_module&lt;/a&gt;'s &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&quot;&gt;rewrite&lt;/a&gt; directive, that is, when &lt;code&gt;jump&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (default to &lt;code&gt;false&lt;/code&gt;), this function will never return and it will tell Nginx to try re-searching locations with the new URI value at the later &lt;code&gt;post-rewrite&lt;/code&gt; phase and jumping to the new location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83458411cec2afcaf29d42425c72dcedef760d7c" translate="yes" xml:space="preserve">
          <source>The optional fourth argument, &lt;code&gt;ctx&lt;/code&gt;, can be a Lua table holding an optional &lt;code&gt;pos&lt;/code&gt; field. When the &lt;code&gt;pos&lt;/code&gt; field in the &lt;code&gt;ctx&lt;/code&gt; table argument is specified, &lt;code&gt;ngx.re.match&lt;/code&gt; will start matching from that offset (starting from 1). Regardless of the presence of the &lt;code&gt;pos&lt;/code&gt; field in the &lt;code&gt;ctx&lt;/code&gt; table, &lt;code&gt;ngx.re.match&lt;/code&gt; will always set this &lt;code&gt;pos&lt;/code&gt; field to the position &lt;em&gt;after&lt;/em&gt; the substring matched by the whole pattern in case of a successful match. When match fails, the &lt;code&gt;ctx&lt;/code&gt; table will be left intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38d6a3ac6c323ee9a043738d8e0b45b9304ec4c" translate="yes" xml:space="preserve">
          <source>The optional second &lt;code&gt;args&lt;/code&gt; can be used to specify extra URI query arguments, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522e7a360a8ea44d625c2576523c70ff93591236" translate="yes" xml:space="preserve">
          <source>The order in which these modules are added during configuration is important because the position of any filter module in the filtering chain determines the final output, for example. The correct adding order is shown above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2814945babddb21121d8a1374fb1b668ffccb3" translate="yes" xml:space="preserve">
          <source>The output data stream can be aborted immediately by running the following Lua statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45e99058c7da4dbf8c6726b9c1b8252b6dd1eee" translate="yes" xml:space="preserve">
          <source>The output says that the line 1489 of file &lt;code&gt;lib/foo/bar.lua&lt;/code&gt; writes to a global variable named &lt;code&gt;contains&lt;/code&gt;, the line 1506 reads from the global variable &lt;code&gt;setvar&lt;/code&gt;, and line 1545 reads the global &lt;code&gt;varexpand&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5d68859b54d5e8415fc9d3cb8779288046dfb2" translate="yes" xml:space="preserve">
          <source>The packages can be introduced into external Lua modules like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a08d46130b3509ef3cef10664d5bc51687c03aa" translate="yes" xml:space="preserve">
          <source>The possibilities are unlimited as the module allows bringing together various elements within Nginx as well as exposing the power of the Lua language to the user. The module provides the full flexibility of scripting while offering performance levels comparable with native C language programs both in terms of CPU time as well as memory footprint. This is particularly the case when LuaJIT 2.x is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03dc62ed9fbdd78071180eb36357a837cf872078" translate="yes" xml:space="preserve">
          <source>The raw binary form of the &lt;code&gt;HMAC-SHA1&lt;/code&gt; digest will be generated, use &lt;a href=&quot;#ngxencode_base64&quot;&gt;ngx.encode_base64&lt;/a&gt;, for example, to encode the result to a textual representation if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d811fa560b109c9312c56986cf0442a8abeb693d" translate="yes" xml:space="preserve">
          <source>The regular expressions used in &lt;a href=&quot;#ngxrematch&quot;&gt;ngx.re.match&lt;/a&gt;, &lt;a href=&quot;#ngxregmatch&quot;&gt;ngx.re.gmatch&lt;/a&gt;, &lt;a href=&quot;#ngxresub&quot;&gt;ngx.re.sub&lt;/a&gt;, and &lt;a href=&quot;#ngxregsub&quot;&gt;ngx.re.gsub&lt;/a&gt; will be cached within this cache if the regex option &lt;code&gt;o&lt;/code&gt; (i.e., compile-once flag) is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d564f3171842f11fa2afdb0d7ff03337a33eef0" translate="yes" xml:space="preserve">
          <source>The request body data read using this function can be retrieved later via &lt;a href=&quot;#ngxreqget_body_data&quot;&gt;ngx.req.get_body_data&lt;/a&gt; or, alternatively, the temporary file name for the body data cached to disk using &lt;a href=&quot;#ngxreqget_body_file&quot;&gt;ngx.req.get_body_file&lt;/a&gt;. This depends on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fb71b8a85a4b41e2c9880b9533b43e14d9d0a4" translate="yes" xml:space="preserve">
          <source>The result is exactly the same as the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da11b5ca5aac2a4ab7b57e61c755e66d9f443be0" translate="yes" xml:space="preserve">
          <source>The resulting Lua load balancer can work with any existing nginx upstream modules like &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&quot;&gt;ngx_proxy&lt;/a&gt; and &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&quot;&gt;ngx_fastcgi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3012f02d1c771ce5bf2f66a27a7de3b37c7bd2b" translate="yes" xml:space="preserve">
          <source>The resulting object &lt;code&gt;dict&lt;/code&gt; has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73a3e4e5e4001966f65bd5df1db9448fd2f2b7c" translate="yes" xml:space="preserve">
          <source>The return values have exactly the same meaning as &lt;a href=&quot;#coroutineresume&quot;&gt;coroutine.resume&lt;/a&gt;, that is, the first value returned is a boolean value indicating whether the &quot;light thread&quot; terminates successfully or not, and subsequent values returned are the return values of the user Lua function that was used to spawn the &quot;light thread&quot; (in case of success) or the error object (in case of failure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6762126ca16668ab14fef18778d78e6a4c6d301c" translate="yes" xml:space="preserve">
          <source>The returned file is read only and is usually cleaned up by Nginx's memory pool. It should not be manually modified, renamed, or removed in Lua code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bde323bd751bfec28d0b7ab0e225421b31321f6" translate="yes" xml:space="preserve">
          <source>The right way of doing this is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4d749704caedea5598e77d72d1046fb18528fa" translate="yes" xml:space="preserve">
          <source>The same applies to assigning an empty table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ac91c3cf48f0dbb24fb4a2e421cfd12c6ca11b" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;callback&lt;/code&gt;, can be any Lua function, which will be invoked later in a background &quot;light thread&quot; after the delay specified. The user callback will be called automatically by the Nginx core with the arguments &lt;code&gt;premature&lt;/code&gt;, &lt;code&gt;user_arg1&lt;/code&gt;, &lt;code&gt;user_arg2&lt;/code&gt;, and etc, where the &lt;code&gt;premature&lt;/code&gt; argument takes a boolean value indicating whether it is a premature timer expiration or not, and &lt;code&gt;user_arg1&lt;/code&gt;, &lt;code&gt;user_arg2&lt;/code&gt;, and etc, are those (extra) user arguments specified when calling &lt;code&gt;ngx.timer.at&lt;/code&gt; as the remaining arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6359f6052ebb3599b90dd93311ee0e13c0370806" translate="yes" xml:space="preserve">
          <source>The second optional argument, &lt;code&gt;size&lt;/code&gt;, can be used to specify the maximal number of connections allowed in the connection pool for the current server (i.e., the current host-port pair or the unix domain socket file path). Note that the size of the connection pool cannot be changed once the pool is created. When this argument is omitted, the default setting in the &lt;a href=&quot;#lua_socket_pool_size&quot;&gt;lua_socket_pool_size&lt;/a&gt; config directive will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc63d1fe13432660df2182e116d247ebb30a736a" translate="yes" xml:space="preserve">
          <source>The shared dictionary will retain its contents through a server config reload (either by sending the &lt;code&gt;HUP&lt;/code&gt; signal to the Nginx process or by using the &lt;code&gt;-s reload&lt;/code&gt; command-line option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0211053300e5717e141766fc7bcecb34955c09ea" translate="yes" xml:space="preserve">
          <source>The size of the buffer must be bigger than the maximum length of a single error log message (which is 4K in OpenResty and 2K in stock NGINX).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df05313cf47d7177bbc420d7f0c3d313ea51d9a0" translate="yes" xml:space="preserve">
          <source>The socket object returned by this method is usually used to read the current request's body in a streaming fashion. Do not turn on the &lt;a href=&quot;#lua_need_request_body&quot;&gt;lua_need_request_body&lt;/a&gt; directive, and do not mix this call with &lt;a href=&quot;#ngxreqread_body&quot;&gt;ngx.req.read_body&lt;/a&gt; and &lt;a href=&quot;#ngxreqdiscard_body&quot;&gt;ngx.req.discard_body&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963a7f5f2fa9d49255e0bbb33fb35b3317a9f2e4" translate="yes" xml:space="preserve">
          <source>The status of the &quot;light thread&quot; coroutine can be &quot;zombie&quot; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60be1727a8d1978c7afe3a3537402ea031ff1c8" translate="yes" xml:space="preserve">
          <source>The support for the &lt;code&gt;TLSv1.3&lt;/code&gt; parameter requires version &lt;code&gt;v0.10.12&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; OpenSSL 1.1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b270ff5cef0623eaa4985a8f926e019073cf35" translate="yes" xml:space="preserve">
          <source>The support for the options table argument was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957ec8c0f220006127e950d3788369db2eae32e6" translate="yes" xml:space="preserve">
          <source>The table keys must be Lua strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9302013d02b0484ae057dd405b511c8a5c6a77" translate="yes" xml:space="preserve">
          <source>The usage of this function is often like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa94fc26e81e25adcce2a5fed253b8df1b9907d3" translate="yes" xml:space="preserve">
          <source>The use of Lua global variables is a generally inadvisable in the ngx_lua context as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c0c4638013cb57ad4cd406b8801686b91cea8c" translate="yes" xml:space="preserve">
          <source>The value returned will have the original data type when they were inserted into the dictionary, for example, Lua booleans, numbers, or strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb15a03d4dace280b7ea3b362724ea82399447e5" translate="yes" xml:space="preserve">
          <source>The various &lt;code&gt;*_by_lua&lt;/code&gt;, &lt;code&gt;*_by_lua_block&lt;/code&gt; and &lt;code&gt;*_by_lua_file&lt;/code&gt; configuration directives serve as gateways to the Lua API within the &lt;code&gt;nginx.conf&lt;/code&gt; file. The Nginx Lua API described below can only be called within the user Lua code run in the context of these configuration directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d93209feaafbc1a12da3a4ff746ce203ae75ff" translate="yes" xml:space="preserve">
          <source>Then</source>
          <target state="translated">Then</target>
        </trans-unit>
        <trans-unit id="0a2d7946869326684c93e256513ea22a5e2532c4" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;GET /main&lt;/code&gt; will give the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfc2a9d052e9410cd9b5db2eb718f34233c28fe" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;GET /orig&lt;/code&gt; will give</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ebfa1866c1ad2d2575e0a4904d7d9ea2df0918" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;GET /t&lt;/code&gt; will just return the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f02bdd38980b3567fd2006573d464d3e0e9047b" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;GET /test&lt;/code&gt; will yield the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27689a4cf87415f2165bb395cae546b7d76351b" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;GET /test?foo=bar&amp;amp;bar=baz&amp;amp;bar=blah&lt;/code&gt; will yield the response body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2745e53a02aeeeff820807c6f02f218b5d0c8582" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;res.header[&quot;Set-Cookie&quot;]&lt;/code&gt; will be evaluated to the table value &lt;code&gt;{&quot;a=3&quot;, &quot;foo=bar&quot;, &quot;baz=blah&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867ab26696f11437105bcedfaf4cb0e3f982a5e9" translate="yes" xml:space="preserve">
          <source>Then for the incoming data stream &lt;code&gt;'hello, world! -agentzh\r\n--abcedhb blah blah'&lt;/code&gt;, we shall get the following output from the sample code above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eaf4acf4ced3299bbed6cfb57a331ec9b532ee8" translate="yes" xml:space="preserve">
          <source>Then for the input data stream &lt;code&gt;&quot;hello world _END_ blah blah blah&quot;&lt;/code&gt;, then the example above will output &lt;code&gt;hello world _END_&lt;/code&gt;, including the pattern string &lt;code&gt;_END_&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b398613be90d1dd7f5da3a27a2a7f6e0c3cd31" translate="yes" xml:space="preserve">
          <source>Then it will generate the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0854cc34835beeae4c73078714a07e5236cbdde9" translate="yes" xml:space="preserve">
          <source>Then request &lt;code&gt;GET /lua&lt;/code&gt; gives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a78b87abf2b4673ecbc541b67e2bda764051e7" translate="yes" xml:space="preserve">
          <source>Then when building Nginx or OpenResty, pass the &lt;code&gt;--with-ld-opt=&quot;foo.o&quot;&lt;/code&gt; option to the &lt;code&gt;./configure&lt;/code&gt; script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9a87c27a218a1f6e03e596aaaece4abe1cff91" translate="yes" xml:space="preserve">
          <source>There are also various testing modes based on mockeagain, valgrind, and etc. Refer to the &lt;a href=&quot;http://search.cpan.org/perldoc?Test::Nginx&quot;&gt;Test::Nginx documentation&lt;/a&gt; for more details for various advanced testing modes. See also the test reports for the Nginx test cluster running on Amazon EC2: &lt;a href=&quot;http://qa.openresty.org&quot;&gt;http://qa.openresty.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2eb364a41bb020a4f7abb02d68e1625251fe56" translate="yes" xml:space="preserve">
          <source>There exists a work-around, however, when the original context does &lt;em&gt;not&lt;/em&gt; need to wait for the cosocket results. That is, creating a zero-delay timer via the &lt;a href=&quot;#ngxtimerat&quot;&gt;ngx.timer.at&lt;/a&gt; API and do the cosocket results in the timer handler, which runs asynchronously as to the original context creating the timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f769dbad5ece88c4e9d6139bcb22b97592e282" translate="yes" xml:space="preserve">
          <source>There is a hard coded &lt;code&gt;2048&lt;/code&gt; byte limitation on error message lengths in the Nginx core. This limit includes trailing newlines and leading time stamps. If the message size exceeds this limit, Nginx will truncate the message text accordingly. This limit can be manually modified by editing the &lt;code&gt;NGX_MAX_ERROR_STR&lt;/code&gt; macro definition in the &lt;code&gt;src/core/ngx_log.h&lt;/code&gt; file in the Nginx source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f93bd5fc8e1fd9117f533369b695eceb32a611b" translate="yes" xml:space="preserve">
          <source>There is a hard-coded upper limit on the number of concurrent subrequests possible for every main request. In older versions of Nginx, the limit was &lt;code&gt;50&lt;/code&gt; concurrent subrequests and in more recent versions, Nginx &lt;code&gt;1.1.x&lt;/code&gt; onwards, this was increased to &lt;code&gt;200&lt;/code&gt; concurrent subrequests. When this limit is exceeded, the following error message is added to the &lt;code&gt;error.log&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d3cde6c32a3988a1b840dd4a879b969a241fc3" translate="yes" xml:space="preserve">
          <source>There is no way to use the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method to specify connecting timeout for this method and the &lt;a href=&quot;#lua_socket_connect_timeout&quot;&gt;lua_socket_connect_timeout&lt;/a&gt; directive must be set at configure time instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2af8aa321d3ce806928a9432c6f6496b11e260" translate="yes" xml:space="preserve">
          <source>These constants are usually used by the &lt;a href=&quot;#ngxlog&quot;&gt;ngx.log&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b4cbebf2656c694dcb77f7cd962cc955b796ea" translate="yes" xml:space="preserve">
          <source>These constants are usually used in &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt; method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3128eea58990545d43b40f9798f537cd62fad0" translate="yes" xml:space="preserve">
          <source>These options can be combined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a14c2c57f459c15e02f8eceb620fc62d91bd08" translate="yes" xml:space="preserve">
          <source>These two forms are fundamentally equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a294b87ae83f24b23d4cc036bde3cce057823970" translate="yes" xml:space="preserve">
          <source>This API also respect the &lt;a href=&quot;#lua_max_pending_timers&quot;&gt;lua_max_pending_timers&lt;/a&gt; and &lt;a href=&quot;#lua_max_running_timers&quot;&gt;lua_max_running_timers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffd61be8b688191c6adcd8e08eaedb8d279fd4e" translate="yes" xml:space="preserve">
          <source>This API function (as well as &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt;) always buffers the whole response body of the subrequest in memory. Thus, you should use &lt;a href=&quot;#ngxsockettcp&quot;&gt;cosockets&lt;/a&gt; and streaming processing instead if you have to handle large subrequest responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073c461155c910d59c4f1d0e8fb1b9619eaa64da" translate="yes" xml:space="preserve">
          <source>This API function was first added to the &lt;code&gt;v0.10.1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124830fea6371533e0ed11aa5d9a6284089beb96" translate="yes" xml:space="preserve">
          <source>This API function was first introduced in the &lt;code&gt;v0.9.2&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc27b9b2a3bf2de174244e046a31d9c81311a52a" translate="yes" xml:space="preserve">
          <source>This API requires a relatively expensive metamethod call and it is recommended to avoid using it on hot code paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d058f122e111ff67bf509a45a9bef0bc81ec2c41" translate="yes" xml:space="preserve">
          <source>This API requires the OpenSSL library enabled in the Nginx build (usually by passing the &lt;code&gt;--with-http_ssl_module&lt;/code&gt; option to the &lt;code&gt;./configure&lt;/code&gt; script).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf1f1abf0a2bd266d528c13cd426502e58abfd3" translate="yes" xml:space="preserve">
          <source>This API was first enabled in the &lt;code&gt;v0.6.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1c20977be5980b5dffafbf094a213994e04e38" translate="yes" xml:space="preserve">
          <source>This API was first enabled in the &lt;code&gt;v0.7.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bb8dfc07b529bc7d30218081451f11aadab8cb" translate="yes" xml:space="preserve">
          <source>This API was first enabled in the &lt;code&gt;v0.9.9&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b06ce05bc80d712279da3c3552a2abec489f97" translate="yes" xml:space="preserve">
          <source>This API was first introduced in &lt;code&gt;v0.3.1rc32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ba1671edb3c4e51b3548fbc5543f56bb5a496d" translate="yes" xml:space="preserve">
          <source>This API was first introduced in ngx_lua v0.3.1rc6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7be04dfa0f4cd10182b8aca3a10bcbd8980c15f" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;0.9.20&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7947818f6263d45180bf357ad69f7642750a31b" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;0.9.3&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4091161f2a3c56021fd534da88f071bffaf43120" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;0.9.5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca28ec0051905855c12d2b0989ea7628d5fefd43" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.10.9&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96d67d4e94fef37b1bc1d2ca8c634aca23ad711" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.3.1rc8&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3efab3146e46ff06a62e58c93c3f1292ea907c" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.5.10&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0b3990241906331fda8298678ecba55006acb8" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.6.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c7acd2f1cd540a6b91b24ba334d64c9bbc812a" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.7.4&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a631cf4e42106365b93d6532cb450b3d13daee" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.8.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352c3683af64fe339e5c0f7efdeb7e725feca526" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b16c413ac5914784760a6550b6c82e7382f364" translate="yes" xml:space="preserve">
          <source>This API was first introduced in the &lt;code&gt;v0.9.5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1e6c505dc88d0f71e31693dcc8c43cd5821d55" translate="yes" xml:space="preserve">
          <source>This API was first usable in the context of &lt;a href=&quot;#init_by_lua&quot;&gt;init_by_lua*&lt;/a&gt; since the &lt;code&gt;0.9.2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42446e8bd13d9a0d0745430d74eeb3d75000148" translate="yes" xml:space="preserve">
          <source>This Lua code execution context &lt;em&gt;does&lt;/em&gt; support yielding, so Lua APIs that may yield (like cosockets, sleeping, and &quot;light threads&quot;) are enabled in this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f39fcd1746088dadc5de24677b8f530216f09b" translate="yes" xml:space="preserve">
          <source>This Lua code execution context does not support yielding, so Lua APIs that may yield (like cosockets and &quot;light threads&quot;) are disabled in this context. One can usually work around this limitation by doing such operations in an earlier phase handler (like &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua*&lt;/a&gt;) and passing along the result into this context via the &lt;a href=&quot;#ngxctx&quot;&gt;ngx.ctx&lt;/a&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698bc3ca3356fb8c70046deba3672b36c89f7034" translate="yes" xml:space="preserve">
          <source>This Lua handler does not run at all, however, when NGINX/OpenSSL successfully resumes the SSL session via SSL session IDs or TLS session tickets for the current SSL connection. In other words, this Lua handler only runs when NGINX has to initiate a full SSL handshake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26656cb70005dae06cb7a5932362f35b59296ac" translate="yes" xml:space="preserve">
          <source>This Lua module does not ship with this ngx_lua module itself rather it is shipped with the &lt;a href=&quot;https://github.com/openresty/lua-resty-core&quot;&gt;lua-resty-core&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eada3ba0df3425be8bc0d66ee324ba3743bd87b" translate="yes" xml:space="preserve">
          <source>This Lua module provides API functions to control the SSL handshake process in contexts like &lt;a href=&quot;#ssl_certificate_by_lua_block&quot;&gt;ssl_certificate_by_lua*&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a085478e6d8eccd84a480d0223dd7ff82d17739" translate="yes" xml:space="preserve">
          <source>This Lua module provides API to perform OCSP queries, OCSP response validations, and OCSP stapling planting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee74bee80759999dc970082a6122ae0692443e3f" translate="yes" xml:space="preserve">
          <source>This also applies to &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua*&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc93b1ec2ba0fab80c20df48d34c1deec8a61e9c" translate="yes" xml:space="preserve">
          <source>This argument can be set to zero to remove the limit and to process all request arguments received:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85e03d9b81d30be679e6d026bfddaa930f2ed9e" translate="yes" xml:space="preserve">
          <source>This argument can be set to zero to remove the limit and to process all request headers received:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e64aa15a4a158416bcd2292a83f5d6b86ed175" translate="yes" xml:space="preserve">
          <source>This boolean field indicates whether the current Nginx is a debug build, i.e., being built by the &lt;code&gt;./configure&lt;/code&gt; option &lt;code&gt;--with-debug&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a40bdc732303b41974d6bd779f5adafe9c6017" translate="yes" xml:space="preserve">
          <source>This buffer does not have to be that big to hold everything at the same time because cosocket supports 100% non-buffered reading and parsing. So even &lt;code&gt;1&lt;/code&gt; byte buffer size should still work everywhere but the performance could be terrible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68093e399a74a014706b233cb9d5289f9ec67e7b" translate="yes" xml:space="preserve">
          <source>This buffer never grows. If it is full, new error log messages will replace the oldest ones in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f035493ae7f11ac2c5ceb682e0f2c53b946328" translate="yes" xml:space="preserve">
          <source>This directive can be freely mixed with all directives of the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;ngx_http_rewrite_module&lt;/a&gt;, &lt;a href=&quot;http://github.com/openresty/set-misc-nginx-module&quot;&gt;set-misc-nginx-module&lt;/a&gt;, and &lt;a href=&quot;http://github.com/openresty/array-var-nginx-module&quot;&gt;array-var-nginx-module&lt;/a&gt; modules. All of these directives will run in the same order as they appear in the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6833c048d389e8488d9775d6f06f80722cb43b" translate="yes" xml:space="preserve">
          <source>This directive can be used to toggle error logging when a failure occurs for the TCP or UDP cosockets. If you are already doing proper error handling and logging in your Lua code, then it is recommended to turn this directive off to prevent data flushing in your nginx error log files (which is usually rather expensive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a92b2155af17f15850cb08e066c15d2de3f99b4" translate="yes" xml:space="preserve">
          <source>This directive controls the default maximal idle time of the connections in the cosocket built-in connection pool. When this timeout reaches, idle connections will be closed and removed from the pool. This setting can be overridden by cosocket objects' &lt;a href=&quot;#tcpsocksetkeepalive&quot;&gt;setkeepalive&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e332301365d4441bb00a11e72c7a05ae4a9599c" translate="yes" xml:space="preserve">
          <source>This directive controls the default timeout value used in TCP/unix-domain socket object's &lt;a href=&quot;#tcpsockconnect&quot;&gt;connect&lt;/a&gt; method and can be overridden by the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; or &lt;a href=&quot;#tcpsocksettimeouts&quot;&gt;settimeouts&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6cfd4127607f21e44e004a1344f29b465ad8dc" translate="yes" xml:space="preserve">
          <source>This directive controls the default timeout value used in TCP/unix-domain socket object's &lt;a href=&quot;#tcpsockreceive&quot;&gt;receive&lt;/a&gt; method and iterator functions returned by the &lt;a href=&quot;#tcpsockreceiveuntil&quot;&gt;receiveuntil&lt;/a&gt; method. This setting can be overridden by the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; or &lt;a href=&quot;#tcpsocksettimeouts&quot;&gt;settimeouts&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70dd833613431dc3694aaefdcaea040b1be30f7" translate="yes" xml:space="preserve">
          <source>This directive controls whether to check for premature client connection abortion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa604cbb755627a5326669110b88b394d4247943" translate="yes" xml:space="preserve">
          <source>This directive currently requires the following NGINX core patch to work correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05258018cd2044f3272f119b24108e0ac10ad61b" translate="yes" xml:space="preserve">
          <source>This directive is designed to execute short, fast running code blocks as the Nginx event loop is blocked during code execution. Time consuming code sequences should therefore be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1bc423124ae13532f0ee1511426b54608cf591" translate="yes" xml:space="preserve">
          <source>This directive is implemented by injecting custom commands into the standard &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;ngx_http_rewrite_module&lt;/a&gt;'s command list. Because &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;ngx_http_rewrite_module&lt;/a&gt; does not support nonblocking I/O in its commands, Lua APIs requiring yielding the current Lua &quot;light thread&quot; cannot work in this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a2675ffd6791635c365b02be6d7fb56771e453" translate="yes" xml:space="preserve">
          <source>This directive is turned &lt;code&gt;on&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966d256ac515e5b981b1d5765420a799eef75759" translate="yes" xml:space="preserve">
          <source>This directive is turned on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b9b6dae2006d538cf51bb6b9da954360ab69c3" translate="yes" xml:space="preserve">
          <source>This directive requires the &lt;a href=&quot;https://github.com/simplresty/ngx_devel_kit&quot;&gt;ngx_devel_kit&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c2ebab47a0fee63c32630f90c1de6146534e5b" translate="yes" xml:space="preserve">
          <source>This directive runs Lua code as an upstream balancer for any upstream entities defined by the &lt;code&gt;upstream {}&lt;/code&gt; configuration block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72552743119a577068d28f9e3e8937966df21509" translate="yes" xml:space="preserve">
          <source>This directive runs Lua code to fetch and save the SSL session (if any) according to the session ID provided by the current SSL handshake request for the downstream. The saved or cached SSL session data can be used for future SSL connections to resume SSL sessions without going through the full SSL handshake process (which is very expensive in terms of CPU time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c5b7e007100220fd13a68127d495dd436604b3" translate="yes" xml:space="preserve">
          <source>This directive runs Lua code to look up and load the SSL session (if any) according to the session ID provided by the current SSL handshake request for the downstream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f157917a6c397f4428d9e47e41cf8777acbbf6da" translate="yes" xml:space="preserve">
          <source>This directive runs user Lua code when NGINX is about to start the SSL handshake for the downstream SSL (https) connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20aa4bf973a332f377e5e121f2164c33f5ab97b1" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.10.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e703aa969e97d311451d8ba8becc7781e7b4998" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639bbd0cc15ae5db5550cd53b776786509f26e66" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.10.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd982686a7cf5ad53debfe091f7125223804c58" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.10.9&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5451ca1827a84751fa9e8a0b342a8865d7f2dd8" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.2.1rc20&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83700bdd9f038e425a3ef018580f8355611ae94" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bab658c9cfa2c7df8ba9e68b06d406b2ea24cc9" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.0rc19&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dc4e668a75c1c0f8fb2f7492acc9bb25b91d1a" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020bfecfac04f640e0af1872518ce36ff69c4dbd" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.0rc29&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74957b0620e96b66a45841926ccebbc0e5101c6" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.0rc31&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210819e99d76e019b15ea05b5af6a651b5f172fb" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.0rc32&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e13a92ea945c67e6ddb2eda1c47ea3c24c5f34b" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.13&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ceeb256d2031e2a76573826b11d8858b295e55" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.5.5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399d736069b3dbdac12ba857203fbc1ecf303198" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.7.4&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b57be562192f90700725a3c6272b839531b679c" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.8.0&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a99d5303db0916ba92502c7de108ea41105591" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.8.5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8789dd65279a72bd51bfd2db1f4c1285c326b6" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7ece61f4fbc1e238f802f79761cc92b123fee6" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.9.17&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b668de35606cf2aca8305a40d4443ff6a58d2bb" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.9.1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ad21da907ecc15d872d1c8cef5d687a1cddafe" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.9.20&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f76acd06d4a49f75839659b108b835233ae7d14" translate="yes" xml:space="preserve">
          <source>This directive was first introduced in the &lt;code&gt;v0.9.5&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4dc6856e3ae3ddb90d885dedbce8073a6568aa" translate="yes" xml:space="preserve">
          <source>This document describes ngx_lua &lt;a href=&quot;https://github.com/openresty/lua-nginx-module/tags&quot;&gt;v0.10.13&lt;/a&gt; released on 22 April 2018.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce357e0d6d0880ef5bfe886f336dc6a9f5a3522" translate="yes" xml:space="preserve">
          <source>This example produces the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62d1675d707f7b35eb369c2f6f5bc883e49e69b" translate="yes" xml:space="preserve">
          <source>This feature requires at least nginx core version &lt;code&gt;0.7.3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaebf26ef879d7bd191e5088fa55f053a9abf6dc" translate="yes" xml:space="preserve">
          <source>This feature requires at least nginx core version &lt;code&gt;1.11.7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa64ef986ea2ac075f6762f420622806c2d108ce" translate="yes" xml:space="preserve">
          <source>This feature requires at least ngx_lua &lt;code&gt;v0.10.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b636476e87291c29e3da5e9400ef8f424e67e2" translate="yes" xml:space="preserve">
          <source>This feature requires the &lt;a href=&quot;https://github.com/simplresty/ngx_devel_kit&quot;&gt;ngx_devel_kit&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e65e9db12791120855f942f3a9002be6535e753" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.10.11&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126482ec5737c0279ab28e47d795e733362f7605" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.10.6&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53dfc90594a44aecf5b9b68ddf88aa336fee480e" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.10.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246633ee2a887165d08e065b3fbc4f07dfd811ef" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.2.1rc12&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc98d5f778a394064f3290c99ed43fa46bcebb18" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.2.1rc13&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a320ed9c6304c389d0bafb436687dbb220b34581" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.2.1rc15&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60704aa795b6706902e6a2fd197d759c1b0f786" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02396d434c635c9c686661539b43384bffd7119c" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.5.0rc17&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b048a8352db6c9b0407f80305c1309e8b671db" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbf0627f2373edea9c080cc6eb19fd61ecaa546" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed97f2e4e3dabfaf07e08205c840cd78dc49a999" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.6.3&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df92dcfa3a9650d6ea0a180e1eeb71d0bac14431" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.7.18&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4c94860a1f9b1f4d91a1966486475bba63addd" translate="yes" xml:space="preserve">
          <source>This feature was first introduced in the &lt;code&gt;v0.7.3&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7577d05e592509e6e63022b5adc96e3a42345435" translate="yes" xml:space="preserve">
          <source>This feature was introduced in the &lt;code&gt;v0.2.1rc11&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db80afb5c322d57971926cdfb35258656cfeb2d1" translate="yes" xml:space="preserve">
          <source>This field take an integral value indicating the version number of the current &lt;code&gt;ngx_lua&lt;/code&gt; module being used. For example, the version number &lt;code&gt;0.9.3&lt;/code&gt; results in the Lua number 9003.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6c4467aa23b55325fac28b29dd2eb2a2e2992f" translate="yes" xml:space="preserve">
          <source>This field take an integral value indicating the version number of the current Nginx core being used. For example, the version number &lt;code&gt;1.4.3&lt;/code&gt; results in the Lua number 1004003.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de21b0df7224b8b35678cee42de047bfd905f4c8" translate="yes" xml:space="preserve">
          <source>This field was first introduced in the &lt;code&gt;0.10.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86369c84314a915b099f23d02efb5f5f8436ede2" translate="yes" xml:space="preserve">
          <source>This field was first introduced in the &lt;code&gt;0.8.7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc1125a99662f019c4261a888559a8a0ded9d53" translate="yes" xml:space="preserve">
          <source>This function can be used with &lt;a href=&quot;#ngxreqappend_body&quot;&gt;ngx.req.append_body&lt;/a&gt;, &lt;a href=&quot;#ngxreqfinish_body&quot;&gt;ngx.req.finish_body&lt;/a&gt;, and &lt;a href=&quot;#ngxreqsocket&quot;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&quot;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&quot;&gt;ngx_http_fastcgi_module&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8f6bad46d60b81976e0f954ac746a5903d007a" translate="yes" xml:space="preserve">
          <source>This function can be used with &lt;a href=&quot;#ngxreqinit_body&quot;&gt;ngx.req.init_body&lt;/a&gt;, &lt;a href=&quot;#ngxreqappend_body&quot;&gt;ngx.req.append_body&lt;/a&gt;, and &lt;a href=&quot;#ngxreqsocket&quot;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&quot;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&quot;&gt;ngx_http_fastcgi_module&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02d358ec4b63d66728f9e3223622f93d9972e3f" translate="yes" xml:space="preserve">
          <source>This function can be used with &lt;a href=&quot;#ngxreqinit_body&quot;&gt;ngx.req.init_body&lt;/a&gt;, &lt;a href=&quot;#ngxreqfinish_body&quot;&gt;ngx.req.finish_body&lt;/a&gt;, and &lt;a href=&quot;#ngxreqsocket&quot;&gt;ngx.req.socket&lt;/a&gt; to implement efficient input filters in pure Lua (in the context of &lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua*&lt;/a&gt; or &lt;a href=&quot;#access_by_lua&quot;&gt;access_by_lua*&lt;/a&gt;), which can be used with other Nginx content handler or upstream modules like &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&quot;&gt;ngx_http_proxy_module&lt;/a&gt; and &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&quot;&gt;ngx_http_fastcgi_module&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cf7c3e09f0de5420897cc5e6bc10c3f34293f1" translate="yes" xml:space="preserve">
          <source>This function has the same signature as &lt;a href=&quot;#ngxreqget_headers&quot;&gt;ngx.req.get_headers&lt;/a&gt; except getting response headers instead of request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a85d9dd9d43ed47b9138c1560d7145a9eece65" translate="yes" xml:space="preserve">
          <source>This function is a shortcut for combining &lt;a href=&quot;#ngxsockettcp&quot;&gt;ngx.socket.tcp()&lt;/a&gt; and the &lt;a href=&quot;#tcpsockconnect&quot;&gt;connect()&lt;/a&gt; method call in a single operation. It is actually implemented like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb01e4d92dd09847d5f8a1c0bf97c01d95154bc1" translate="yes" xml:space="preserve">
          <source>This function is added for &lt;a href=&quot;http://w3.impa.br/%7Ediego/software/luasocket/tcp.html&quot;&gt;LuaSocket&lt;/a&gt; API compatibility and does nothing for now. Its functionality will be implemented in future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f979b4847e802252cddd2219bafcfd3603def6" translate="yes" xml:space="preserve">
          <source>This function is an asynchronous call and returns immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdf564ddd6ae8405bd5659721bdffa85cae0d6b" translate="yes" xml:space="preserve">
          <source>This function issues several parallel subrequests specified by the input table and returns their results in the same order. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d361f892815ef828b5b483c06e6a11e46fae197a" translate="yes" xml:space="preserve">
          <source>This function requires SHA-1 support in the Nginx build. (This usually just means OpenSSL should be installed while building Nginx).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c35126c7417909014b8ee2fc507e3014c57a47" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;nil&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f4f895d8ebc971a0cfd8e0e192e6e72c148b54" translate="yes" xml:space="preserve">
          <source>This function returns a Lua number for the process ID (PID) of the current Nginx worker process. This API is more efficient than &lt;code&gt;ngx.var.pid&lt;/code&gt; and can be used in contexts where the &lt;a href=&quot;#ngxvarvariable&quot;&gt;ngx.var.VARIABLE&lt;/a&gt; API cannot be used (like &lt;a href=&quot;#init_worker_by_lua&quot;&gt;init_worker_by_lua&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efcf34206aa1159f37ec0f9daa8bfbad1b71fef" translate="yes" xml:space="preserve">
          <source>This function returns a boolean value indicating whether the current Nginx worker process already starts exiting. Nginx worker process exiting happens on Nginx server quit or configuration reload (aka HUP reload).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfa05e68c435d81fd864551512a9c9410c3d936" translate="yes" xml:space="preserve">
          <source>This function returns a string for the NGINX &lt;code&gt;./configure&lt;/code&gt; command's arguments string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7737b3b1a43b63b7ba3f60fd18006bcf4941ef1" translate="yes" xml:space="preserve">
          <source>This function returns meaningful values only for NGINX 1.9.1+. With earlier versions of NGINX, it always returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06240e5e02a8e3d9437cafe67b4a56506cd98936" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;0.9.2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b74208d479a492e349209b286b533a25e2d4f8" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.3.1rc17&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0eb4b3b744365f24028fdbdef97ba810707574" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.3.1rc18&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39690940ad5fc85f5d270afea776dea09ce9afa2" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.3.1rc29&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d2a227aebf85f25e502eb35c86b8b68a24cec8" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84abb3df79e3973a266157f465b0a094432c2054" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.5.0rc6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf1f07ea830812fc7702fc5b70f10d75b4e960f" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.5.11&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f07c2f8a257e1020346ac97fd10cc58ddf21bb8" translate="yes" xml:space="preserve">
          <source>This function was first introduced in the &lt;code&gt;v0.7.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c03ca40151ee0ff552fa8b8af4b079356e891b2" translate="yes" xml:space="preserve">
          <source>This function will not return until all the subrequests terminate. The total latency is the longest latency of the individual subrequests rather than the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98bd168fe6afc8bad95d319750f3f75a778c04e" translate="yes" xml:space="preserve">
          <source>This hook is often used to create per-worker reoccurring timers (via the &lt;a href=&quot;#ngxtimerat&quot;&gt;ngx.timer.at&lt;/a&gt; Lua API), either for backend health-check or other timed routine work. Below is an example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0049bd71d0daf3c9c7a289bccaec1c20ee7ffe00" translate="yes" xml:space="preserve">
          <source>This hook no longer runs in the cache manager and cache loader processes since the &lt;code&gt;v0.10.12&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a046d7fd38d6bc933afc749d40e490f5f2d555" translate="yes" xml:space="preserve">
          <source>This hook, together with the &lt;a href=&quot;#ssl_session_store_by_lua_block&quot;&gt;ssl_session_store_by_lua*&lt;/a&gt; hook, can be used to implement distributed caching mechanisms in pure Lua (based on the &lt;a href=&quot;#ngxsockettcp&quot;&gt;cosocket&lt;/a&gt; API, for example). If a cached SSL session is found and loaded into the current SSL connection context, SSL session resumption can then get immediately initiated and bypass the full SSL handshake process which is very expensive in terms of CPU time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f544007228f8b9f5612e795f09ef89cec24c7d94" translate="yes" xml:space="preserve">
          <source>This interface was first introduced in the &lt;code&gt;v0.3.1rc13&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc7e23dba7b45388ea63a949fb1a195c31a6dc8" translate="yes" xml:space="preserve">
          <source>This interface was first introduced in the &lt;code&gt;v0.3.1rc14&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eca6c1df74469066f8294cec1d983e4cd95dd5b" translate="yes" xml:space="preserve">
          <source>This is a Lua module that implements a classic-style semaphore API for efficient synchronizations among different &quot;light threads&quot;. Sharing the same semaphore among different &quot;light threads&quot; created in different (request) contexts are also supported as long as the &quot;light threads&quot; reside in the same NGINX worker process and the &lt;a href=&quot;#lua_code_cache&quot;&gt;lua_code_cache&lt;/a&gt; directive is turned on (which is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332c45682de593d442ad645aba892e10fd91aaac" translate="yes" xml:space="preserve">
          <source>This is a Lua module that provides a Lua API to allow defining completely dynamic load balancers in pure Lua.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac279947186e424b8ee357a8ff59c8d544fae53d" translate="yes" xml:space="preserve">
          <source>This is an asynchronous call and will return immediately without waiting for all the data to be written into the system send buffer. To run in synchronous mode, call &lt;code&gt;ngx.flush(true)&lt;/code&gt; after calling &lt;code&gt;ngx.print&lt;/code&gt;. This can be particularly useful for streaming output. See &lt;a href=&quot;#ngxflush&quot;&gt;ngx.flush&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e66c964fb3c23d4fdb96e9ccdbeb747ef835990" translate="yes" xml:space="preserve">
          <source>This is functionally identical to the previous examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fd6c1f95c96ca864c256ab8ede9f57fc04fdcf" translate="yes" xml:space="preserve">
          <source>This is particularly useful in the context of &lt;a href=&quot;#header_filter_by_lua&quot;&gt;header_filter_by_lua*&lt;/a&gt;, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce57553bbcbd556d34723ff20f45d4ad47c82906" translate="yes" xml:space="preserve">
          <source>This is the UTC time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c91f1781a683bbba310b40ce815df5672a8e224" translate="yes" xml:space="preserve">
          <source>This is the local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e90cc4a678544e3853d917ac47f4293f2e1f95" translate="yes" xml:space="preserve">
          <source>This issue is due to limitations in the Nginx event model and only appears to affect Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d36b8102f1fdb27f28c601e2a837388ac84ada" translate="yes" xml:space="preserve">
          <source>This means that phases that normally run are skipped, such as the rewrite or access phase. This also means that later phases that are run regardless, e.g. &lt;a href=&quot;#log_by_lua&quot;&gt;log_by_lua&lt;/a&gt;, will not have access to information that is normally set in those phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2cbc67d38c14ae1b1b697e46ad13ec42ccb9aa" translate="yes" xml:space="preserve">
          <source>This mechanism allows calling other nginx C modules' directives that are implemented by &lt;a href=&quot;https://github.com/simplresty/ngx_devel_kit&quot;&gt;Nginx Devel Kit&lt;/a&gt; (NDK)'s set_var submodule's &lt;code&gt;ndk_set_var_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f410b28b198d7c523406eb25be674282e4fc7d" translate="yes" xml:space="preserve">
          <source>This method also makes the current cosocket object enter the &quot;closed&quot; state, so there is no need to manually call the &lt;a href=&quot;#tcpsockclose&quot;&gt;close&lt;/a&gt; method on it afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3efa3826c081368180b9d6d453ad72dc73b5add" translate="yes" xml:space="preserve">
          <source>This method does not work in HTTP/2 requests yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30804077619e0b16d472a616a9ccd2d2d72ecb9f" translate="yes" xml:space="preserve">
          <source>This method is a synchronous operation and is 100% nonblocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16beaea1f778f25a2f81b6437f3f083d1f95c72c" translate="yes" xml:space="preserve">
          <source>This method is a synchronous operation just like the &lt;a href=&quot;#tcpsocksend&quot;&gt;send&lt;/a&gt; method and is 100% nonblocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca23691f91c5cc27b730efeb024b47e206dba1e0" translate="yes" xml:space="preserve">
          <source>This method is a synchronous operation that will not return until &lt;em&gt;all&lt;/em&gt; the data has been flushed into the system socket send buffer or an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac08826936268b86b5549b2ddb1339214bcdb54" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&quot;&gt;rewrite&lt;/a&gt; directive with the &lt;code&gt;redirect&lt;/code&gt; modifier in the standard &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;ngx_http_rewrite_module&lt;/a&gt;, for example, this &lt;code&gt;nginx.conf&lt;/code&gt; snippet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4a83ede8a97097cc7a9703f14c5b0b45079edd" translate="yes" xml:space="preserve">
          <source>This method performs better on relatively long &lt;code&gt;str&lt;/code&gt; inputs (i.e., longer than 30 ~ 60 bytes), as compared to &lt;a href=&quot;#ngxcrc32_short&quot;&gt;ngx.crc32_short&lt;/a&gt;. The result is exactly the same as &lt;a href=&quot;#ngxcrc32_short&quot;&gt;ngx.crc32_short&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3585c2e651d3b28bba9db7df5aa5f7e153f6c9b" translate="yes" xml:space="preserve">
          <source>This method performs better on relatively short &lt;code&gt;str&lt;/code&gt; inputs (i.e., less than 30 ~ 60 bytes), as compared to &lt;a href=&quot;#ngxcrc32_long&quot;&gt;ngx.crc32_long&lt;/a&gt;. The result is exactly the same as &lt;a href=&quot;#ngxcrc32_long&quot;&gt;ngx.crc32_long&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cd1d7e7ec9442e5cbc877dcf0bea5983febb63" translate="yes" xml:space="preserve">
          <source>This method requires the PCRE library enabled in Nginx. (&lt;a href=&quot;#special-escaping-sequences&quot;&gt;Known Issue With Special Escaping Sequences&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33357a09b5efe8171e73fc073a065083949145b8" translate="yes" xml:space="preserve">
          <source>This method returns an iterator Lua function that can be called to read the data stream until it sees the specified pattern or an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c2c328fe9debd04ec70ccae494c791d280f980" translate="yes" xml:space="preserve">
          <source>This method returns the (successfully) reused times for the current connection. In case of error, it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed48807bd1fe7513c192f85938d222ac43ca691" translate="yes" xml:space="preserve">
          <source>This method returns the resulting new string as well as the number of successful substitutions. In case of failures, like syntax errors in the regular expressions or the &lt;code&gt;&amp;lt;replace&amp;gt;&lt;/code&gt; string argument, it will return &lt;code&gt;nil&lt;/code&gt; and a string describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c44db8797cb6660325445822c4517b88523e02" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;0.8.6&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b40fa428bc115e02c881d1faf5dcaea0646b4e4" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.3.1rc22&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08194cccbf335f4311841ab0cad7fa6b938327f" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.3.1rc27&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57abb78a79a7b04980e393d8ab528a56a9b3d550" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.5.0rc1&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c77a47ce69f27b65e2b527558cf44442f99ac8" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.5.6&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d7b1e6f5bc024280ea624bbe733d21e4af080c" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.5.7&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68c747ef332f71a789579b0f7c6f0c91c565be8" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.7.17&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1331c7988be7085ff26eda0e323f41be2e978864" translate="yes" xml:space="preserve">
          <source>This method was first introduced in the &lt;code&gt;v0.9.11&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0451bdbd9e1be237a3add9bb19bd84927184b5fd" translate="yes" xml:space="preserve">
          <source>This method was introduced in the &lt;code&gt;0.5.0rc30&lt;/code&gt; release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1966b5ebf057e27e77bd8f4c08b105410d6f888f" translate="yes" xml:space="preserve">
          <source>This method was introduced in the &lt;code&gt;v0.5.0rc29&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb9a727555a42442c1c94b3f952a5b1073590fd" translate="yes" xml:space="preserve">
          <source>This module embeds Lua, via the standard Lua 5.1 interpreter or &lt;a href=&quot;http://luajit.org/luajit.html&quot;&gt;LuaJIT 2.0/2.1&lt;/a&gt;, into Nginx and by leveraging Nginx's subrequests, allows the integration of the powerful Lua threads (Lua coroutines) into the Nginx event model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5112b5de01ae129eff441df39d636b4f8c1acdcc" translate="yes" xml:space="preserve">
          <source>This module is licensed under the BSD license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f312c739619f14cf3876d7b9af5395ef58521b41" translate="yes" xml:space="preserve">
          <source>This module is plugged into NGINX's &quot;http&quot; subsystem so it can only speaks downstream communication protocols in the HTTP family (HTTP 0.9/1.0/1.1/2.0, WebSockets, and etc). If you want to do generic TCP communications with the downstream clients, then you should use the &lt;a href=&quot;https://github.com/openresty/stream-lua-nginx-module#readme&quot;&gt;ngx_stream_lua&lt;/a&gt; module instead which has a compatible Lua API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a483178bdb549f716d6ee98c8de0997e67b62304" translate="yes" xml:space="preserve">
          <source>This option is set to &lt;code&gt;false&lt;/code&gt; by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e322ad1bf9f45e8b11b0a0bacdb08a6bceba38a2" translate="yes" xml:space="preserve">
          <source>This section has been renamed to &lt;a href=&quot;#special-escaping-sequences&quot;&gt;Special Escaping Sequences&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d605b97a4a4724ee7fd4704d3c54112df58a84" translate="yes" xml:space="preserve">
          <source>This section is just holding obsolete documentation sections that have been either renamed or removed so that existing links over the web are still valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c2aa4eb03a0c12b3b6017b8a231a23cb648528" translate="yes" xml:space="preserve">
          <source>This string field indicates the current NGINX subsystem the current Lua environment is based on. For this module, this field always takes the string value &lt;code&gt;&quot;http&quot;&lt;/code&gt;. For &lt;a href=&quot;https://github.com/openresty/stream-lua-nginx-module#readme&quot;&gt;ngx_stream_lua_module&lt;/a&gt;, however, this field takes the value &lt;code&gt;&quot;stream&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751ddda1aa3bb67a142f8bde1fc3e270340d8246" translate="yes" xml:space="preserve">
          <source>This table can be used to store per-request Lua context data and has a life time identical to the current request (as with the Nginx variables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327de488a3dc729ebf45eb5fa572053dbfd770c8" translate="yes" xml:space="preserve">
          <source>This tool will guarantee that local variables in the Lua module functions are all declared with the &lt;code&gt;local&lt;/code&gt; keyword, otherwise a runtime exception will be thrown. It prevents undesirable race conditions while accessing such variables. See &lt;a href=&quot;#data-sharing-within-an-nginx-worker&quot;&gt;Data Sharing within an Nginx Worker&lt;/a&gt; for the reasons behind this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4c9880c949290c3d762d8a4fb493c0110912b3" translate="yes" xml:space="preserve">
          <source>This will truncate the response body and usually result in incomplete and also invalid responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686ba622e0734f8c6ff964ecfd9e49f077900cf0" translate="yes" xml:space="preserve">
          <source>Timeout for the connecting operation is controlled by the &lt;a href=&quot;#lua_socket_connect_timeout&quot;&gt;lua_socket_connect_timeout&lt;/a&gt; config directive and the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86499f97e007bb66b630696b0a0e8b473eb0e79c" translate="yes" xml:space="preserve">
          <source>Timeout for the iterator function's reading operation is controlled by the &lt;a href=&quot;#lua_socket_read_timeout&quot;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356de04e35844a913bcd88d34cf72ab5c7e1814c" translate="yes" xml:space="preserve">
          <source>Timeout for the reading operation is controlled by the &lt;a href=&quot;#lua_socket_read_timeout&quot;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d513def9a797c844c725d5671f7f97e9cf6f97e0" translate="yes" xml:space="preserve">
          <source>Timeout for the reading operation is controlled by the &lt;a href=&quot;#lua_socket_read_timeout&quot;&gt;lua_socket_read_timeout&lt;/a&gt; config directive and the &lt;a href=&quot;#udpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b15a69bc6d5ec8bb03c477ddda733f0cf1e518d" translate="yes" xml:space="preserve">
          <source>Timeout for the sending operation is controlled by the &lt;a href=&quot;#lua_socket_send_timeout&quot;&gt;lua_socket_send_timeout&lt;/a&gt; config directive and the &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt; method. And the latter takes priority. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263920d54ad58ee3e9fb3bef424ece95f393dc56" translate="yes" xml:space="preserve">
          <source>To avoid this, &lt;em&gt;double&lt;/em&gt; escape the backslash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8271d57c9f432da496359f39acfbb2176192b30c" translate="yes" xml:space="preserve">
          <source>To confirm that PCRE JIT is enabled, activate the Nginx debug log by adding the &lt;code&gt;--with-debug&lt;/code&gt; option to Nginx or OpenResty's &lt;code&gt;./configure&lt;/code&gt; script. Then, enable the &quot;debug&quot; error log level in &lt;code&gt;error_log&lt;/code&gt; directive. The following message will be generated if PCRE JIT is enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ccf7c2625f44f9fdf6b2cefdc898e32d4ea12e" translate="yes" xml:space="preserve">
          <source>To easily test this hook locally with a modern web browser, you can temporarily put the following line in your https server block to disable the TLS session ticket support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbb2ac075fd488f16984505a12a1ae8a3150fff" translate="yes" xml:space="preserve">
          <source>To enable one or more of these macros, just pass extra C compiler options to the &lt;code&gt;./configure&lt;/code&gt; script of either NGINX or OpenResty. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310f4be17eb9a29b5e6e4b504207330160ba392b" translate="yes" xml:space="preserve">
          <source>To find all instances of Lua global variables in your Lua code, run the &lt;a href=&quot;https://github.com/openresty/nginx-devel-utils/blob/master/lua-releng&quot;&gt;lua-releng tool&lt;/a&gt; across all &lt;code&gt;.lua&lt;/code&gt; source files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d9a9c22ee8b1b3d8c3c3c61f8b1a07661d3db0" translate="yes" xml:space="preserve">
          <source>To force in-file request bodies, try turning on &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only&quot;&gt;client_body_in_file_only&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ac5c2a0e8ce48695391762905f56957b82ba11" translate="yes" xml:space="preserve">
          <source>To force in-memory request bodies, try setting &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&quot;&gt;client_body_buffer_size&lt;/a&gt; to the same size value in &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&quot;&gt;client_max_body_size&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b9312b835b83f6819193545b3a05a156a8c25b" translate="yes" xml:space="preserve">
          <source>To globally share data among all the requests handled by the same nginx worker process, encapsulate the shared data into a Lua module, use the Lua &lt;code&gt;require&lt;/code&gt; builtin to import the module, and then manipulate the shared data in Lua. This works because required Lua modules are loaded only once and all coroutines will share the same copy of the module (both its code and data). Note however that Lua global variables (note, not module-level variables) WILL NOT persist between requests because of the one-coroutine-per-request isolation design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec062ae9cc0455e26eaafea514d15aff54ba0d4" translate="yes" xml:space="preserve">
          <source>To output very large response data in a streaming fashion (via the &lt;a href=&quot;#ngxflush&quot;&gt;ngx.flush&lt;/a&gt; call, for example), this directive MUST be turned off to minimize memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e299a25adbaec725c8610575ab06d0d85ad48d98" translate="yes" xml:space="preserve">
          <source>To read an individual header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804306edcb4f446374df8d9c022f150fcbcc0adf" translate="yes" xml:space="preserve">
          <source>To read the request body data within the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&quot;&gt;$request_body&lt;/a&gt; variable, &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&quot;&gt;client_body_buffer_size&lt;/a&gt; must have the same value as &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&quot;&gt;client_max_body_size&lt;/a&gt;. Because when the content length exceeds &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&quot;&gt;client_body_buffer_size&lt;/a&gt; but less than &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&quot;&gt;client_max_body_size&lt;/a&gt;, Nginx will buffer the data into a temporary file on the disk, which will lead to empty value in the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&quot;&gt;$request_body&lt;/a&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bc625bed6e60dbf52f76b84c509262aa04c79d" translate="yes" xml:space="preserve">
          <source>To return an error page with custom contents, use code snippets like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e648df2fae0de7fec89656b115ef8b2aa264ce72" translate="yes" xml:space="preserve">
          <source>To run a specific test block in a particular test file, add the line &lt;code&gt;--- ONLY&lt;/code&gt; to the test block you want to run, and then use the &lt;code&gt;prove&lt;/code&gt; utility to run that &lt;code&gt;.t&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4181bc9bb97b43542885f396179acd9f2fcf5f1f" translate="yes" xml:space="preserve">
          <source>To run specific test files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1eb0ee98d60c775310798916e8467744cd6bf57" translate="yes" xml:space="preserve">
          <source>To run the whole test suite in the default testing mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde06580408f134f13dfc80c9b61771deb5f12b7" translate="yes" xml:space="preserve">
          <source>Typical Uses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd365822e145dd82c81ebc25cbd8dda8347de52e" translate="yes" xml:space="preserve">
          <source>URI arguments can be specified as well, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2656f5732e461af96ebf59f2affb9fd100171598" translate="yes" xml:space="preserve">
          <source>URI query strings can be concatenated to URI itself, for instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07406874d386595e410e09c0c63df5b635a427f6" translate="yes" xml:space="preserve">
          <source>Uncaught Lua exceptions in the user Lua code immediately abort the current SSL session, so does the &lt;a href=&quot;#ngxexit&quot;&gt;ngx.exit&lt;/a&gt; call with an error code like &lt;code&gt;ngx.ERROR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7078cb03027cbac9ec7cc3184809436d3ced9b9" translate="yes" xml:space="preserve">
          <source>Unconditionally removes the key-value pair from the shm-based dictionary &lt;a href=&quot;#ngxshareddict&quot;&gt;ngx.shared.DICT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50507f07cc9ec100619d89ceed550e28b2d2377" translate="yes" xml:space="preserve">
          <source>Unconditionally sets a key-value pair into the shm-based dictionary &lt;a href=&quot;#ngxshareddict&quot;&gt;ngx.shared.DICT&lt;/a&gt;. Returns three values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b996280c114992d9bdfde90853303086f08eb6b" translate="yes" xml:space="preserve">
          <source>Undefined NGINX variables are evaluated to &lt;code&gt;nil&lt;/code&gt; while uninitialized (but defined) NGINX variables are evaluated to an empty Lua string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec7d977aeaafa0a56a073269236d2c825872b99" translate="yes" xml:space="preserve">
          <source>Underscores (&lt;code&gt;_&lt;/code&gt;) in the header names will also be replaced by dashes (&lt;code&gt;-&lt;/code&gt;) and the header names will be matched case-insensitively. If the response header is not present at all, &lt;code&gt;nil&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256f8956a6d8bce12cd574227698fe88708530bd" translate="yes" xml:space="preserve">
          <source>Underscores (&lt;code&gt;_&lt;/code&gt;) in the header names will be replaced by hyphens (&lt;code&gt;-&lt;/code&gt;) by default. This transformation can be turned off via the &lt;a href=&quot;#lua_transform_underscores_in_response_headers&quot;&gt;lua_transform_underscores_in_response_headers&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7050f6fa22df6c872c0e8e08df1d7c67b27bbe8" translate="yes" xml:space="preserve">
          <source>Unescape &lt;code&gt;str&lt;/code&gt; as an escaped URI component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23b46c88e516f87a3f9748ab13db45199040d8c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;https://httpd.apache.org/docs/trunk/mod/mod_lua.html&quot;&gt;Apache's mod_lua&lt;/a&gt; and &lt;a href=&quot;http://redmine.lighttpd.net/wiki/1/Docs:ModMagnet&quot;&gt;Lighttpd's mod_magnet&lt;/a&gt;, Lua code executed using this module can be &lt;em&gt;100% non-blocking&lt;/em&gt; on network traffic as long as the &lt;a href=&quot;#nginx-api-for-lua&quot;&gt;Nginx API for Lua&lt;/a&gt; provided by this module is used to handle requests to upstream services such as MySQL, PostgreSQL, Memcached, Redis, or upstream HTTP web services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c1eb0f2bf9d5920c0b68ee85c1cffd19a631c2" translate="yes" xml:space="preserve">
          <source>Unlike as with LuaJIT, debug information is included in standard Lua 5.1 bytecode files by default. This can be striped out by specifying the &lt;code&gt;-s&lt;/code&gt; option as shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c76436188c55ec6070bada1e60143ac5691c086" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;#ngxshareddictflush_all&quot;&gt;flush_all&lt;/a&gt; method, this method actually free up the memory used by the expired items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5582ecefc9cc9b7f3a1ec81d54228c116c308155" translate="yes" xml:space="preserve">
          <source>Unmatched subpatterns will have &lt;code&gt;false&lt;/code&gt; values in their &lt;code&gt;captures&lt;/code&gt; table fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2fb9a4cbd7e921d637c4b8ef1f3bf16bfdc5ae" translate="yes" xml:space="preserve">
          <source>Updates of the Nginx time cache can be forced by calling &lt;a href=&quot;#ngxupdate_time&quot;&gt;ngx.update_time&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec181cb11d58bcf5ff1fdbc886cdfbead3b6e8a9" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;exptime&lt;/code&gt; (in second) of a key-value pair in the shm-based dictionary &lt;a href=&quot;#ngxshareddict&quot;&gt;ngx.shared.DICT&lt;/a&gt;. Returns a boolean indicating success if the operation completes or &lt;code&gt;nil&lt;/code&gt; and an error message otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf6e2912b0e1b86bbbef2d350b9ef4c66183557" translate="yes" xml:space="preserve">
          <source>Updating query arguments via the nginx variable &lt;code&gt;$args&lt;/code&gt; (or &lt;code&gt;ngx.var.args&lt;/code&gt; in Lua) at runtime is also supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722357c3e89577ed5bf050ec80b96fff9c78d475" translate="yes" xml:space="preserve">
          <source>Use data storage mechanisms such as &lt;code&gt;memcached&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; or &lt;code&gt;PostgreSQL&lt;/code&gt;. &lt;a href=&quot;http://openresty.org&quot;&gt;The OpenResty bundle&lt;/a&gt; associated with this module comes with a set of companion Nginx modules and Lua libraries that provide interfaces with these data storage mechanisms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837870561d18c1340fe17d3a8838268c7588531e" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;http://www.lua.org/manual/5.1/manual.html#pdf-package.seeall&quot;&gt;package.seeall&lt;/a&gt; flag is strongly discouraged due to its various bad side-effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117d92fdb073a7582fd4dea508996ad94000fde8" translate="yes" xml:space="preserve">
          <source>Use only a single nginx worker and a single server (this is however not recommended when there is a multi core CPU or multiple CPUs in a single machine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef50a363cba0e7d23e2525c759034abffc23ec1" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#ngxshareddict&quot;&gt;ngx.shared.DICT&lt;/a&gt; API provided by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9d433515bdb74b58c38092021647bad0390c0f" translate="yes" xml:space="preserve">
          <source>Use the following instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e04fbe28b8fd3dc2726c57776964b940afa23da" translate="yes" xml:space="preserve">
          <source>User &quot;light threads&quot; can create &quot;light threads&quot; themselves. And normal user coroutines created by &lt;a href=&quot;#coroutinecreate&quot;&gt;coroutine.create&lt;/a&gt; can also create &quot;light threads&quot;. The coroutine (be it a normal Lua coroutine or a &quot;light thread&quot;) that directly spawns the &quot;light thread&quot; is called the &quot;parent coroutine&quot; for the &quot;light thread&quot; newly spawned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3051d5161dec8259348e20a78d348c96785998d1" translate="yes" xml:space="preserve">
          <source>Uses Lua code specified in &lt;code&gt;&amp;lt;lua-script-str&amp;gt;&lt;/code&gt; to define an output body filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded6196731dd60e7a6f3daebcbfe3101e65dafd4" translate="yes" xml:space="preserve">
          <source>Uses Lua code specified in &lt;code&gt;&amp;lt;lua-script-str&amp;gt;&lt;/code&gt; to define an output header filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e6282c4779b152733e47206dc28454bee859bd" translate="yes" xml:space="preserve">
          <source>Using LuaRocks with ngx_lua</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c069766a735f16bffd3eb81ff8bd3338417e70ad" translate="yes" xml:space="preserve">
          <source>Usually you can pre-load Lua modules at server start-up by means of this hook and take advantage of modern operating systems' copy-on-write (COW) optimization. Here is an example for pre-loading Lua modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532936ba2128b4e636dfd3eb5ffbd8be55d05ec6" translate="yes" xml:space="preserve">
          <source>Usually, this module is used together with the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl.md&quot;&gt;ngx.ssl&lt;/a&gt; module in the context of &lt;a href=&quot;#ssl_certificate_by_lua_block&quot;&gt;ssl_certificate_by_lua*&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="52410b56d8b4ca4991fe9794a8f9922ad169e787" translate="yes" xml:space="preserve">
          <source>Waits on one or more child &quot;light threads&quot; and returns the results of the first &quot;light thread&quot; that terminates (either successfully or with an error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18661c65b6dfe9c2af3bdd953c07f01ed4281ca" translate="yes" xml:space="preserve">
          <source>We can also use the numerical code directly as the second &lt;code&gt;status&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdff0fdfa20c1531971ad6042498f40c78809ce" translate="yes" xml:space="preserve">
          <source>What matters here is the name of the &lt;code&gt;.lua&lt;/code&gt; file, which determines how you use this module later on the Lua land. The file name &lt;code&gt;foo.o&lt;/code&gt; does not matter at all except the &lt;code&gt;.o&lt;/code&gt; file extension (which tells &lt;code&gt;luajit&lt;/code&gt; what output format is used). If you want to strip the Lua debug information from the resulting bytecode, you can just specify the &lt;code&gt;-b&lt;/code&gt; option above instead of &lt;code&gt;-bg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da17365da141e4113795fb55cf89317b492eff2" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#lua_check_client_abort&quot;&gt;lua_check_client_abort&lt;/a&gt; is set to &lt;code&gt;off&lt;/code&gt; (which is the default), then this function call will always return the error message &quot;lua_check_client_abort is off&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc91d40857966e0f337496e865bde4a53500d706" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#ssl_certificate_by_lua_block&quot;&gt;ssl_certificate_by_lua*&lt;/a&gt; is specified at the same time, this hook usually runs before &lt;a href=&quot;#ssl_certificate_by_lua_block&quot;&gt;ssl_certificate_by_lua*&lt;/a&gt;. When the SSL session is found and successfully loaded for the current SSL connection, SSL session resumption will happen and thus bypass the &lt;a href=&quot;#ssl_certificate_by_lua_block&quot;&gt;ssl_certificate_by_lua*&lt;/a&gt; hook completely. In this case, NGINX also bypasses the &lt;a href=&quot;#ssl_session_store_by_lua&quot;&gt;ssl_session_store_by_lua_block&lt;/a&gt; hook, for obvious reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b50a30e6d6cdb2880d71d5862baf40f3f30e74" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ngx.flush(true)&lt;/code&gt; is called immediately after &lt;a href=&quot;#ngxprint&quot;&gt;ngx.print&lt;/a&gt; or &lt;a href=&quot;#ngxsay&quot;&gt;ngx.say&lt;/a&gt;, it causes the latter functions to run in synchronous mode. This can be particularly useful for streaming output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ff135588f575bd4ff6cb32ca6187d053e25778" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;status &amp;gt;= 200&lt;/code&gt; (i.e., &lt;code&gt;ngx.HTTP_OK&lt;/code&gt; and above), it will interrupt the execution of the current request and return status code to nginx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225dd63375b0570d2d0cf2e2a9e87f7b0692af7f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;status == 0&lt;/code&gt; (i.e., &lt;code&gt;ngx.OK&lt;/code&gt;), it will only quit the current phase handler (or the content handler if the &lt;a href=&quot;#content_by_lua&quot;&gt;content_by_lua*&lt;/a&gt; directive is used) and continue to run later phases (if any) for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6977100a318c0f6aa85f9759462b8efe5aa9a73" translate="yes" xml:space="preserve">
          <source>When LuaJIT 2.x is used, it is possible to statically link the bytecode of pure Lua modules into the Nginx executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55c60517607f7b208179809cf800cfeddb46219" translate="yes" xml:space="preserve">
          <source>When Nginx receives the &lt;code&gt;HUP&lt;/code&gt; signal and starts reloading the config file, the Lua VM will also be re-created and &lt;code&gt;init_by_lua&lt;/code&gt; will run again on the new Lua VM. In case that the &lt;a href=&quot;#lua_code_cache&quot;&gt;lua_code_cache&lt;/a&gt; directive is turned off (default on), the &lt;code&gt;init_by_lua&lt;/code&gt; handler will run upon every request because in this special mode a standalone Lua VM is always created for each request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc5712ac2f460da505dec7c9d8b9c0f76df35e9" translate="yes" xml:space="preserve">
          <source>When TCP keepalive is disabled, it is relying on the client side to close the socket gracefully (by sending a &lt;code&gt;FIN&lt;/code&gt; packet or something like that). For (soft) real-time web applications, it is highly recommended to configure the &lt;a href=&quot;http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html&quot;&gt;TCP keepalive&lt;/a&gt; support in your system's TCP stack implementation in order to detect &quot;half-open&quot; TCP connections in time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f5a2a442a78fd438677dd755070a4a12a351ed" translate="yes" xml:space="preserve">
          <source>When a match is found, a Lua table &lt;code&gt;captures&lt;/code&gt; is returned, where &lt;code&gt;captures[0]&lt;/code&gt; holds the whole substring being matched, and &lt;code&gt;captures[1]&lt;/code&gt; holds the first parenthesized sub-pattern's capturing, &lt;code&gt;captures[2]&lt;/code&gt; the second, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fbda4a23eb8719b23958e48ba15a9fa62752f4" translate="yes" xml:space="preserve">
          <source>When a relative path like &lt;code&gt;foo/bar.lua&lt;/code&gt; is given, they will be turned into the absolute path relative to the &lt;code&gt;server prefix&lt;/code&gt; path determined by the &lt;code&gt;-p PATH&lt;/code&gt; command-line option while starting the Nginx server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e147a447417173b6ecd2a2a627664fd5f2cd6a" translate="yes" xml:space="preserve">
          <source>When a timer expires, the user Lua code in the timer callback is running in a &quot;light thread&quot; detached completely from the original request creating the timer. So objects with the same lifetime as the request creating them, like &lt;a href=&quot;#ngxsockettcp&quot;&gt;cosockets&lt;/a&gt;, cannot be shared between the original request and the timer user callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f6abd8579e514353e2c10ecb6e73797049538a" translate="yes" xml:space="preserve">
          <source>When being used in the context of &lt;a href=&quot;#init_worker_by_lua&quot;&gt;init_worker_by_lua*&lt;/a&gt;, this table just has the same lifetime of the current Lua handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9f7260a47a62e507608916a302811e705debe9" translate="yes" xml:space="preserve">
          <source>When being used in the contexts of &lt;a href=&quot;#header_filter_by_lua&quot;&gt;header_filter_by_lua*&lt;/a&gt;, &lt;a href=&quot;#balancer_by_lua_block&quot;&gt;balancer_by_lua*&lt;/a&gt;, and &lt;a href=&quot;#ssl_session_store_by_lua_block&quot;&gt;ssl_session_store_by_lua*&lt;/a&gt;, &lt;code&gt;ngx.exit()&lt;/code&gt; is an asynchronous operation and will return immediately. This behavior may change in future and it is recommended that users always use &lt;code&gt;return&lt;/code&gt; in combination as suggested above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d47f6f40f2d2c5ebfef7a62ca3511835ef4ecd2" translate="yes" xml:space="preserve">
          <source>When called without any argument, the iterator function returns the received data right &lt;em&gt;before&lt;/em&gt; the specified pattern string in the incoming data stream. So for the example above, if the incoming data stream is &lt;code&gt;'hello, world! -agentzh\r\n--abcedhb blah blah'&lt;/code&gt;, then the string &lt;code&gt;'hello, world! -agentzh'&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21df47ff644579b3d7d1a3495d7eedb40f059c1d" translate="yes" xml:space="preserve">
          <source>When exceeding this limit, Nginx will stop running the callbacks of newly expired timers and log an error message &quot;N lua_max_running_timers are not enough&quot; where &quot;N&quot; is the current value of this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bad6bbea3db52bfad10306d6e125acac34e1ab" translate="yes" xml:space="preserve">
          <source>When exceeding this limit, the &lt;a href=&quot;#ngxtimerat&quot;&gt;ngx.timer.at&lt;/a&gt; call will immediately return &lt;code&gt;nil&lt;/code&gt; and the error string &quot;too many pending timers&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee59ac626e9ea2758ca750efe715ff5503e58433" translate="yes" xml:space="preserve">
          <source>When it fails to allocate memory for the current key-value item, then &lt;code&gt;set&lt;/code&gt; will try removing existing items in the storage according to the Least-Recently Used (LRU) algorithm. Note that, LRU takes priority over expiration time here. If up to tens of existing items have been removed and the storage left is still insufficient (either due to the total capacity limit specified by &lt;a href=&quot;#lua_shared_dict&quot;&gt;lua_shared_dict&lt;/a&gt; or memory segmentation), then the &lt;code&gt;err&lt;/code&gt; return value will be &lt;code&gt;no memory&lt;/code&gt; and &lt;code&gt;success&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87f1fc15915d742dc78ba9b777775bbb22fc6e4" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;nil&lt;/code&gt; or an empty Lua string value to &lt;code&gt;ngx.arg[1]&lt;/code&gt;, no data chunk will be passed to the downstream Nginx output filters at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c4d1ee4bbcee0ac73d2ed2648a8e475a46f777" translate="yes" xml:space="preserve">
          <source>When setting the limit to 0, the default &quot;match limit&quot; when compiling the PCRE library is used. And this is the default value of this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f142354601c7a01dc863e20d51d69f63922823" translate="yes" xml:space="preserve">
          <source>When success, returns a &quot;conditional true&quot; value (but not a &lt;code&gt;true&lt;/code&gt;). Otherwise, returns a &quot;conditional false&quot; value and a string describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f068b575575d9d2e236f8212bba9c71158bbe6" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;body&lt;/code&gt; option is not specified and the &lt;code&gt;always_forward_body&lt;/code&gt; option is false (the default value), the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; subrequests will inherit the request bodies of the parent request (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de69a62398012124c01070ddfaa80a4d1cae525" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;header_value&lt;/code&gt; argument is &lt;code&gt;nil&lt;/code&gt;, the request header will be removed. So</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82a64049b60581f59bb31aa29b8f372f2ee6ec5" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;raw&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, it is required that no pending data from any previous &lt;a href=&quot;#ngxsay&quot;&gt;ngx.say&lt;/a&gt;, &lt;a href=&quot;#ngxprint&quot;&gt;ngx.print&lt;/a&gt;, or &lt;a href=&quot;#ngxsend_headers&quot;&gt;ngx.send_headers&lt;/a&gt; calls exists. So if you have these downstream output calls previously, you should call &lt;a href=&quot;#ngxflush&quot;&gt;ngx.flush(true)&lt;/a&gt; before calling &lt;code&gt;ngx.req.socket(true)&lt;/code&gt; to ensure that there is no pending output data. If the request body has not been read yet, then this &quot;raw socket&quot; can also be used to read the request body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5923b167310ef9d7895099251a4b912f7691107" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;replace&lt;/code&gt; argument is of type &quot;function&quot;, then it will be invoked with the &quot;match table&quot; as the argument to generate the replace string literal for substitution. The &quot;match table&quot; fed into the &lt;code&gt;replace&lt;/code&gt; function is exactly the same as the return value of &lt;a href=&quot;#ngxrematch&quot;&gt;ngx.re.match&lt;/a&gt;. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5ceb1d8f797313363763f219b47c4c7abfa124" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;replace&lt;/code&gt; is a string, then it is treated as a special template for string replacement. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7046882c8237fc7735b6bbbbc6a42bdad8ea8ac7" translate="yes" xml:space="preserve">
          <source>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&quot;#lua_code_cache&quot;&gt;lua_code_cache&lt;/a&gt;&lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid reloading Nginx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f416d93052dbbe13068ebf193919846bca562d9d" translate="yes" xml:space="preserve">
          <source>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching &lt;a href=&quot;#lua_code_cache&quot;&gt;lua_code_cache&lt;/a&gt;&lt;code&gt;off&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt; to avoid repeatedly reloading Nginx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af3509c76fdb43db6a9787e75937e10bb5c59a4" translate="yes" xml:space="preserve">
          <source>When the Lua code may change the length of the response body, then it is required to always clear out the &lt;code&gt;Content-Length&lt;/code&gt; response header (if any) in a header filter to enforce streaming output, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc2bbeacbac28ac92b502ea9d6e4b5960bb0814" translate="yes" xml:space="preserve">
          <source>When the connection pool exceeds the available size limit, the least recently used (idle) connection already in the pool will be closed to make room for the current connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d187073d9963d5bb36b20287faa0c6425a1c3f7" translate="yes" xml:space="preserve">
          <source>When the data can no longer be hold in the memory buffer for the request body, then the data will be flushed onto a temporary file just like the standard request body reader in the Nginx core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbad2abaf08f5ead2e02738e55367c0d8314569" translate="yes" xml:space="preserve">
          <source>When the key does not exist or has already expired in the shared dictionary,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e477dfa7291c96581969ff981143209b0c9a82" translate="yes" xml:space="preserve">
          <source>When the limit is hit, the error string &quot;pcre_exec() failed: -8&quot; will be returned by the &lt;a href=&quot;#ngxrematch&quot;&gt;ngx.re API&lt;/a&gt; functions on the Lua land.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4353ea9e30658349de7dc3c1525924337c248688" translate="yes" xml:space="preserve">
          <source>When the system receive buffer for the current connection has unread data, then this method will return the &quot;connection in dubious state&quot; error message (as the second return value) because the previous session has unread data left behind for the next session and the connection is not safe to be reused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7527bdcfaf27919cdc412479e62e92e94df60ea" translate="yes" xml:space="preserve">
          <source>When the user &quot;light thread&quot; terminates with a Lua error, however, it will not abort other running &quot;light threads&quot; like the &quot;entry thread&quot; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e563f529bfc607d8234b997bd60b236bc5ecdcf" translate="yes" xml:space="preserve">
          <source>When this directive is on, the ngx_lua module will monitor the premature connection close event on the downstream connections and when there is such an event, it will call the user Lua function callback (registered by &lt;a href=&quot;#ngxon_abort&quot;&gt;ngx.on_abort&lt;/a&gt;) or just stop and clean up all the Lua &quot;light threads&quot; running in the current request's request handler when there is no user callback function registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96a370dec09fae7e5f7553f460aca35a9f146e6" translate="yes" xml:space="preserve">
          <source>When this is used in the context of the &lt;a href=&quot;#set_by_lua&quot;&gt;set_by_lua*&lt;/a&gt; directives, this table is read-only and holds the input arguments to the config directives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd9505fd5f4ffe331c7901b1c9d378293a25bd8" translate="yes" xml:space="preserve">
          <source>When this table is used in the context of &lt;a href=&quot;#body_filter_by_lua&quot;&gt;body_filter_by_lua*&lt;/a&gt;, the first element holds the input data chunk to the output filter code and the second element holds the boolean flag for the &quot;eof&quot; flag indicating the end of the whole output data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a472f7253267d55b4af5f3c0e8341fdeac856c8" translate="yes" xml:space="preserve">
          <source>When turning off, every request served by ngx_lua will run in a separate Lua VM instance, starting from the &lt;code&gt;0.9.3&lt;/code&gt; release. So the Lua files referenced in &lt;a href=&quot;#set_by_lua_file&quot;&gt;set_by_lua_file&lt;/a&gt;, &lt;a href=&quot;#content_by_lua_file&quot;&gt;content_by_lua_file&lt;/a&gt;, &lt;a href=&quot;#access_by_lua_file&quot;&gt;access_by_lua_file&lt;/a&gt;, and etc will not be cached and all Lua modules used will be loaded from scratch. With this in place, developers can adopt an edit-and-refresh approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89d8e0936f9c23a54fde5f08d7fbf8f7e88b042" translate="yes" xml:space="preserve">
          <source>When you disable the HTTP 1.1 keep-alive feature for your downstream connections, you can rely on well written HTTP clients to close the connection actively for you when you call this method. This trick can be used do back-ground jobs without letting the HTTP clients to wait on the connection, as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73d8afd53a24f840ab8e9efc3bee4f9f2860686" translate="yes" xml:space="preserve">
          <source>When you have multiple &lt;code&gt;.lua&lt;/code&gt; files to compile and link, then just specify their &lt;code&gt;.o&lt;/code&gt; files at the same time in the value of the &lt;code&gt;--with-ld-opt&lt;/code&gt; option. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94db54106b5dfa9a7364b516a52fe6b32fca8ff0" translate="yes" xml:space="preserve">
          <source>While building this module either via OpenResty or with the NGINX core, you can define the following C macros via the C compiler options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e803da16672d30b945fda90ac008bafb4fc3ee6" translate="yes" xml:space="preserve">
          <source>With the settings above,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f274f7e25e73d37fda59c4e9bc146de173e28a70" translate="yes" xml:space="preserve">
          <source>Within external script files, PCRE sequences presented as long-bracketed Lua string literals do not require modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae4fa9153538d61e84012cea39683398cd73853" translate="yes" xml:space="preserve">
          <source>Writes argument values into the nginx &lt;code&gt;error.log&lt;/code&gt; file with the &lt;code&gt;ngx.NOTICE&lt;/code&gt; log level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14b0ba20c614e530843eadd0bb264e9c2ad11ed" translate="yes" xml:space="preserve">
          <source>Yields the execution of the current user Lua coroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e138b696d46fc590c8a9bfd87acf83c9dd1cfb70" translate="yes" xml:space="preserve">
          <source>You are recommended to use &lt;a href=&quot;#tcpsocksettimeouts&quot;&gt;settimeouts&lt;/a&gt; instead of &lt;a href=&quot;#tcpsocksettimeout&quot;&gt;settimeout&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7cfaef5025ae2ca4cac694fa8bfd66c71ddfaf" translate="yes" xml:space="preserve">
          <source>You can also initialize the &lt;a href=&quot;#lua_shared_dict&quot;&gt;lua_shared_dict&lt;/a&gt; shm storage at this phase. Here is an example for this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d370f8493ee40eb9cc6e6bd967af301c94ec9c" translate="yes" xml:space="preserve">
          <source>You can call coroutine.status() and coroutine.yield() on the &quot;light thread&quot; coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961000ca825e2709cd7f2398b770b7181dcaf210" translate="yes" xml:space="preserve">
          <source>You can forcibly update the Nginx time cache by calling &lt;a href=&quot;#ngxupdate_time&quot;&gt;ngx.update_time&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e950061e916e474f02f2473273d173d7e7cad54e" translate="yes" xml:space="preserve">
          <source>You can pass most of the standard Lua values (nils, booleans, numbers, strings, tables, closures, file handles, and etc) into the timer callback, either explicitly as user arguments or implicitly as upvalues for the callback closure. There are several exceptions, however: you &lt;em&gt;cannot&lt;/em&gt; pass any thread objects returned by &lt;a href=&quot;#coroutinecreate&quot;&gt;coroutine.create&lt;/a&gt; and &lt;a href=&quot;#ngxthreadspawn&quot;&gt;ngx.thread.spawn&lt;/a&gt; or any cosocket objects returned by &lt;a href=&quot;#ngxsockettcp&quot;&gt;ngx.socket.tcp&lt;/a&gt;, &lt;a href=&quot;#ngxsocketudp&quot;&gt;ngx.socket.udp&lt;/a&gt;, and &lt;a href=&quot;#ngxreqsocket&quot;&gt;ngx.req.socket&lt;/a&gt; because these objects' lifetime is bound to the request context creating them while the timer callback is detached from the creating request's context (by design) and runs in its own (fake) request context. If you try to share the thread or cosocket objects across the boundary of the creating request, then you will get the &quot;no co ctx found&quot; error (for threads) or &quot;bad request&quot; (for cosockets). It is fine, however, to create all these objects inside your timer callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a4ab21caee4d1c2c49bbf3f48b6568a6b62286" translate="yes" xml:space="preserve">
          <source>You can read the messages in the buffer on the Lua land via the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/errlog.md#get_logs&quot;&gt;get_logs()&lt;/a&gt; function of the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/errlog.md#readme&quot;&gt;ngx.errlog&lt;/a&gt; module of the &lt;a href=&quot;https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/errlog.md#readme&quot;&gt;lua-resty-core&lt;/a&gt; library. This Lua API function will return the captured error log messages and also remove these already read from the global capturing buffer, making room for any new error log data. For this reason, the user should not configure this buffer to be too big if the user read the buffered error log data fast enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690742b949ff5b3876b8f53a8f40ab9ad0625fe9" translate="yes" xml:space="preserve">
          <source>You can specify the optional &lt;code&gt;no_request_line&lt;/code&gt; argument as a &lt;code&gt;true&lt;/code&gt; value to exclude the request line from the result. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d15bb344f1445867fadcca27c710dfa11eb5554" translate="yes" xml:space="preserve">
          <source>You can use the &quot;raw request socket&quot; returned by &lt;code&gt;ngx.req.socket(true)&lt;/code&gt; to implement fancy protocols like &lt;a href=&quot;http://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSocket&lt;/a&gt;, or just emit your own raw HTTP response header or body data. You can refer to the &lt;a href=&quot;https://github.com/openresty/lua-resty-websocket&quot;&gt;lua-resty-websocket library&lt;/a&gt; for a real world example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc81828fdf6b5bfdb714bddc466fabd55f87bff5" translate="yes" xml:space="preserve">
          <source>You can use units like &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; in the &lt;code&gt;size&lt;/code&gt; value, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c359d2ff1f0a68f628dd63a16719644b23f8de" translate="yes" xml:space="preserve">
          <source>You should always read the request body (by either calling &lt;a href=&quot;#ngxreqread_body&quot;&gt;ngx.req.read_body&lt;/a&gt; or configuring &lt;a href=&quot;#lua_need_request_body&quot;&gt;lua_need_request_body&lt;/a&gt; on) before initiating a subrequest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c38dcd7a86861a6925f533077b4eab9f8ab141" translate="yes" xml:space="preserve">
          <source>You should be very careful about potential security vulnerabilities in your Lua code registered in this context because the Nginx master process is often run under the &lt;code&gt;root&lt;/code&gt; account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7c071e6e4eaa835aab72980f6430c86b3c0543" translate="yes" xml:space="preserve">
          <source>a &quot;light thread&quot; (either the &quot;entry thread&quot; or a user &quot;light thread&quot; aborts by calling &lt;a href=&quot;#ngxexit&quot;&gt;ngx.exit&lt;/a&gt;, &lt;a href=&quot;#ngxexec&quot;&gt;ngx.exec&lt;/a&gt;, &lt;a href=&quot;#ngxredirect&quot;&gt;ngx.redirect&lt;/a&gt;, or &lt;a href=&quot;#ngxreqset_uri&quot;&gt;ngx.req.set_uri(uri, true)&lt;/a&gt;, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0205ec0adfc7d5c99a04ad19e2fab13bdfefd40c" translate="yes" xml:space="preserve">
          <source>a (nonblocking) I/O operation cannot be completed in a single run,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea92adc1f11d7fe30542473f05266c229ad9e4e" translate="yes" xml:space="preserve">
          <source>access_by_lua</source>
          <target state="translated">access_by_lua</target>
        </trans-unit>
        <trans-unit id="5293cd950938a60cf5c708d34e39091e8da46881" translate="yes" xml:space="preserve">
          <source>access_by_lua_block</source>
          <target state="translated">access_by_lua_block</target>
        </trans-unit>
        <trans-unit id="4ae774dba2ea45d3d3b344384a96aa5050731f79" translate="yes" xml:space="preserve">
          <source>access_by_lua_file</source>
          <target state="translated">access_by_lua_file</target>
        </trans-unit>
        <trans-unit id="f8bc5499f122ed62a6e8913d0f96f5881f8cd53b" translate="yes" xml:space="preserve">
          <source>access_by_lua_no_postpone</source>
          <target state="translated">access_by_lua_no_postpone</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="9a406a10ed1057806377027b0fc568f84a6160f1" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;ignore_resp_headers&lt;/code&gt;, &lt;code&gt;ignore_resp_body&lt;/code&gt;, and &lt;code&gt;ignore_resp&lt;/code&gt; options to &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt; and &lt;a href=&quot;#ngxlocationcapture_multi&quot;&gt;ngx.location.capture_multi&lt;/a&gt; methods, to allow micro performance tuning on the user side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f715fea5de7ac9f3cd4f352a1c6d7b055f1103d4" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;stat&lt;/code&gt; mode similar to &lt;a href=&quot;https://httpd.apache.org/docs/trunk/mod/mod_lua.html&quot;&gt;mod_lua&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699ca5c14be3866873be9ebdad3c83cb91c9b9cd" translate="yes" xml:space="preserve">
          <source>add automatic Lua code time slicing support by yielding and resuming the Lua VM actively via Lua's debug hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fdbcd4ed95a7e457ae6c8320439dc01d4db773" translate="yes" xml:space="preserve">
          <source>add configure options for different strategies of handling the cosocket connection exceeding in the pools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd41786a0f2a8fe51c13cbf81cc68e281f55f04" translate="yes" xml:space="preserve">
          <source>add directives to run Lua codes when nginx stops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0be792199b22bac23601eab86f5eb924035fd8" translate="yes" xml:space="preserve">
          <source>add new API function &lt;code&gt;ngx.resp.add_header&lt;/code&gt; to emulate the standard &lt;code&gt;add_header&lt;/code&gt; config directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb0d4e11a742b2715d4c5b444e17d5151053e37" translate="yes" xml:space="preserve">
          <source>and old &lt;code&gt;Foo&lt;/code&gt; headers will be overridden if there is any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad94b8b9c3eaa965889be7e1888b24254d5f393" translate="yes" xml:space="preserve">
          <source>and then accessing it from &lt;code&gt;nginx.conf&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef83b68ae8df93a61c4744300349cdfb237b3a69" translate="yes" xml:space="preserve">
          <source>and whether &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only&quot;&gt;client_body_in_file_only&lt;/a&gt; has been switched on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72abfe7822625370bbffcbe9d510b96b00a96b50" translate="yes" xml:space="preserve">
          <source>assuming memcached (or something else) is listening on the unix domain socket file &lt;code&gt;/tmp/memcached.sock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a80dee24963d0e7d2dcb1d3a88f75ff2fe9f04b" translate="yes" xml:space="preserve">
          <source>assuming the datagram service is listening on the unix domain socket file &lt;code&gt;/tmp/some-datagram-service.sock&lt;/code&gt; and the client socket will use the &quot;autobind&quot; feature on Linux.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582a358e2864ee266a97b280fa2b80e00f23a873" translate="yes" xml:space="preserve">
          <source>balancer_by_lua_block</source>
          <target state="translated">balancer_by_lua_block</target>
        </trans-unit>
        <trans-unit id="f683871ee1c7346e73f9316e5431b77b8b2f25ca" translate="yes" xml:space="preserve">
          <source>balancer_by_lua_file</source>
          <target state="translated">balancer_by_lua_file</target>
        </trans-unit>
        <trans-unit id="087451882149bae78baef64b84ed8c85bab52d54" translate="yes" xml:space="preserve">
          <source>because &lt;code&gt;if&lt;/code&gt; runs &lt;em&gt;before&lt;/em&gt;&lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua&lt;/a&gt; even if it is placed after &lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua&lt;/a&gt; in the config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd6b7b104d2bdc14957c2d9e8d14e963056ce9d" translate="yes" xml:space="preserve">
          <source>because &lt;code&gt;set $a 12&lt;/code&gt; and &lt;code&gt;set $b &quot;&quot;&lt;/code&gt; run &lt;em&gt;before&lt;/em&gt;&lt;a href=&quot;#rewrite_by_lua&quot;&gt;rewrite_by_lua&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70206c109fedd65c54e9c77871072f88e173ae83" translate="yes" xml:space="preserve">
          <source>body_filter_by_lua</source>
          <target state="translated">body_filter_by_lua</target>
        </trans-unit>
        <trans-unit id="5ecf1152f084855f70fd420f15744afd0933e011" translate="yes" xml:space="preserve">
          <source>body_filter_by_lua_block</source>
          <target state="translated">body_filter_by_lua_block</target>
        </trans-unit>
        <trans-unit id="6b8892bfc30f7510b57ce6a839ed96b00c455533" translate="yes" xml:space="preserve">
          <source>body_filter_by_lua_file</source>
          <target state="translated">body_filter_by_lua_file</target>
        </trans-unit>
        <trans-unit id="885693dadbd23f9e2c2ba03fae534f35e5945d9e" translate="yes" xml:space="preserve">
          <source>both the &quot;entry thread&quot; and all the user &quot;light threads&quot; terminates,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3caf9cb101f9ab17ab153aa900f187916a831aea" translate="yes" xml:space="preserve">
          <source>can be coded as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cda6df48f680ce054a5c4c6214f8249d18fd29" translate="yes" xml:space="preserve">
          <source>can be coded in Lua as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e611ed7b3bf8db96950b4312d91de35899fe082" translate="yes" xml:space="preserve">
          <source>can be coded in Lua like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66d661cd1e5207d5a64a80af033677983c62b5b" translate="yes" xml:space="preserve">
          <source>can be implemented in ngx_lua as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb1f56d3fbe09e809244fc8e13671cd876e3860" translate="yes" xml:space="preserve">
          <source>capacity</source>
          <target state="translated">capacity</target>
        </trans-unit>
        <trans-unit id="da38860cb875cb64092e402d80d9fe29c4865b18" translate="yes" xml:space="preserve">
          <source>close</source>
          <target state="translated">close</target>
        </trans-unit>
        <trans-unit id="35f9580d35e4200cec9b6ae47a1058414dd2b551" translate="yes" xml:space="preserve">
          <source>coding up arbitrarily complex web applications in a content handler using synchronous but still non-blocking access to the database backends and other storage,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11a107f38328604e9320754224b60375758bca1" translate="yes" xml:space="preserve">
          <source>connect</source>
          <target state="translated">connect</target>
        </trans-unit>
        <trans-unit id="76bdb07ff81e63c5d6c890ec2a6911074e7c2604" translate="yes" xml:space="preserve">
          <source>content_by_lua</source>
          <target state="translated">content_by_lua</target>
        </trans-unit>
        <trans-unit id="510a31a14b14f2fdf5849cae5ce6be91031acb7c" translate="yes" xml:space="preserve">
          <source>content_by_lua_block</source>
          <target state="translated">content_by_lua_block</target>
        </trans-unit>
        <trans-unit id="2de783ac03434e3d768471853628ec7bcf88e727" translate="yes" xml:space="preserve">
          <source>content_by_lua_file</source>
          <target state="translated">content_by_lua_file</target>
        </trans-unit>
        <trans-unit id="aaae2631f5bb5f54485a73c872bcacfee7de77dc" translate="yes" xml:space="preserve">
          <source>coroutine.create</source>
          <target state="translated">coroutine.create</target>
        </trans-unit>
        <trans-unit id="c31ca37d3862fe3a5e4030ef6aa5c2449aca06d8" translate="yes" xml:space="preserve">
          <source>coroutine.resume</source>
          <target state="translated">coroutine.resume</target>
        </trans-unit>
        <trans-unit id="ce55502f20f668fde01b7bba7aaefbb4d4861abc" translate="yes" xml:space="preserve">
          <source>coroutine.running</source>
          <target state="translated">coroutine.running</target>
        </trans-unit>
        <trans-unit id="ca57d88ceba501ae3f0ad9078c2dd644e0c85bb6" translate="yes" xml:space="preserve">
          <source>coroutine.status</source>
          <target state="translated">coroutine.status</target>
        </trans-unit>
        <trans-unit id="609daeb097353d1a194f2f9b64becd2bd4ec8268" translate="yes" xml:space="preserve">
          <source>coroutine.wrap</source>
          <target state="translated">coroutine.wrap</target>
        </trans-unit>
        <trans-unit id="b474c3b4844418c526eed6cbb8423f4fb6e87cdf" translate="yes" xml:space="preserve">
          <source>coroutine.yield</source>
          <target state="translated">coroutine.yield</target>
        </trans-unit>
        <trans-unit id="49b82aceb2e2e1d21428c137f862316155cfa61a" translate="yes" xml:space="preserve">
          <source>cosocket: add client SSL certificate support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac10ec0b8d8888da63210e8dd96ba6a1b48628f" translate="yes" xml:space="preserve">
          <source>cosocket: add support in the context of &lt;a href=&quot;#init_by_lua&quot;&gt;init_by_lua*&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42aaf3339fa3aeaf146de4d631228c86dc94e68" translate="yes" xml:space="preserve">
          <source>cosocket: implement LuaSocket's unconnected UDP API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3823a79d16b550ee7d81c2557738fad1dda525e8" translate="yes" xml:space="preserve">
          <source>cosocket: implement the &lt;code&gt;bind()&lt;/code&gt; method for stream-typed cosockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51d6f6ecdb121ebbf1bf1939f1cfe2e3bfc57cb" translate="yes" xml:space="preserve">
          <source>cosocket: pool-based backend concurrency level control: implement automatic &lt;code&gt;connect&lt;/code&gt; queueing when the backend concurrency exceeds its connection pool limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1de7a2b0625d63b5ca272926e746a4f5e055f95" translate="yes" xml:space="preserve">
          <source>cosocket: review and merge aviramc's &lt;a href=&quot;https://github.com/openresty/lua-nginx-module/pull/290&quot;&gt;patch&lt;/a&gt; for adding the &lt;code&gt;bsdrecv&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3426ee9f481680269d873ce6d23e65fcc7eb6d7d" translate="yes" xml:space="preserve">
          <source>creating a ticket on the &lt;a href=&quot;https://github.com/openresty/lua-nginx-module/issues&quot;&gt;GitHub Issue Tracker&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="426cede9b821e0e7d12522286db68cb3cc38a621" translate="yes" xml:space="preserve">
          <source>doing arbitrarily complex access control and security checks in Lua before requests actually reach the upstream backends,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d58d156125f0bb4d6e499d5bc4942e10404b32" translate="yes" xml:space="preserve">
          <source>doing very complex URL dispatch in Lua at rewrite phase,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0d121c1c0299a43509f0e6dee7215038e5c299" translate="yes" xml:space="preserve">
          <source>drizzle-nginx-module</source>
          <target state="translated">drizzle-nginx-module</target>
        </trans-unit>
        <trans-unit id="610f48001bc9ea4dcecbaf83b4832cdd7eb2416f" translate="yes" xml:space="preserve">
          <source>echo-nginx-module</source>
          <target state="translated">echo-nginx-module</target>
        </trans-unit>
        <trans-unit id="20dda04ba85cc1d159e6c80f0473186d495ab0ca" translate="yes" xml:space="preserve">
          <source>expire</source>
          <target state="translated">expire</target>
        </trans-unit>
        <trans-unit id="ce7f404770ee79ffa96fafb987734df507af6428" translate="yes" xml:space="preserve">
          <source>fetching backend information from external storage backends (like redis, memcached, mysql, postgresql) and use that information to choose which upstream backend to access on-the-fly,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6da73188b93089901c81209598fdbf4840286f" translate="yes" xml:space="preserve">
          <source>flush_all</source>
          <target state="translated">flush_all</target>
        </trans-unit>
        <trans-unit id="08f51c012828d59b5a687199627897613fc11376" translate="yes" xml:space="preserve">
          <source>flush_expired</source>
          <target state="translated">flush_expired</target>
        </trans-unit>
        <trans-unit id="d166f6ec1622529cfa244871a0dc3e21112522a7" translate="yes" xml:space="preserve">
          <source>free_space</source>
          <target state="translated">free_space</target>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="translated">get</target>
        </trans-unit>
        <trans-unit id="71fc98fc23f579d9edcc0f5f49fca34a0b220fa8" translate="yes" xml:space="preserve">
          <source>get_keys</source>
          <target state="translated">get_keys</target>
        </trans-unit>
        <trans-unit id="464ffbd50eaab98aac8938ab38b74ddd20845444" translate="yes" xml:space="preserve">
          <source>get_stale</source>
          <target state="translated">get_stale</target>
        </trans-unit>
        <trans-unit id="6916288ca4cf791ca8d3d8442fa133a628988533" translate="yes" xml:space="preserve">
          <source>getreusedtimes</source>
          <target state="translated">getreusedtimes</target>
        </trans-unit>
        <trans-unit id="d6ba0a23f165c32b684272aaaaa6c9f76e03edfc" translate="yes" xml:space="preserve">
          <source>gives</source>
          <target state="translated">gives</target>
        </trans-unit>
        <trans-unit id="c3ecf75f48b94f75475ee717f736fb998151b911" translate="yes" xml:space="preserve">
          <source>gives something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409218cefe4a1dd5a80a0b5d42b043bc9a98c1b9" translate="yes" xml:space="preserve">
          <source>gives the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e07feb3e46c434251e62237c90a6517b3d91d9e" translate="yes" xml:space="preserve">
          <source>header_filter_by_lua</source>
          <target state="translated">header_filter_by_lua</target>
        </trans-unit>
        <trans-unit id="81fac0ccc0c7828dfc892b52ea0dd8ed179b4da6" translate="yes" xml:space="preserve">
          <source>header_filter_by_lua_block</source>
          <target state="translated">header_filter_by_lua_block</target>
        </trans-unit>
        <trans-unit id="15ed9e486c3b9eabcb27e2dd7b3fc6e92b70d4ae" translate="yes" xml:space="preserve">
          <source>header_filter_by_lua_file</source>
          <target state="translated">header_filter_by_lua_file</target>
        </trans-unit>
        <trans-unit id="26aab9a4c05c655b7bd143cd27e088971c0a43bf" translate="yes" xml:space="preserve">
          <source>if the &lt;code&gt;init&lt;/code&gt; argument is not specified or takes the value &lt;code&gt;nil&lt;/code&gt;, this method will return &lt;code&gt;nil&lt;/code&gt; and the error string &lt;code&gt;&quot;not found&quot;&lt;/code&gt;, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9fa2b41cd6c28df93234da0194fd89a6ad811a" translate="yes" xml:space="preserve">
          <source>if the &lt;code&gt;init&lt;/code&gt; argument takes a number value, this method will create a new &lt;code&gt;key&lt;/code&gt; with the value &lt;code&gt;init + value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278b1a2b5330a5ca4c67d0487e65f0a8c5064db5" translate="yes" xml:space="preserve">
          <source>in the response headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58086838f67374476c0a7d5d55c207529a620fa4" translate="yes" xml:space="preserve">
          <source>incr</source>
          <target state="translated">incr</target>
        </trans-unit>
        <trans-unit id="6a0db96d1395545fa262310ae37fb3832e14e5db" translate="yes" xml:space="preserve">
          <source>init_by_lua</source>
          <target state="translated">init_by_lua</target>
        </trans-unit>
        <trans-unit id="fb13b0577557a1cbe07b2c49359988f3a602594d" translate="yes" xml:space="preserve">
          <source>init_by_lua_block</source>
          <target state="translated">init_by_lua_block</target>
        </trans-unit>
        <trans-unit id="9dd37ccc5a1fea35e7e5e4e0c961dbb23478d211" translate="yes" xml:space="preserve">
          <source>init_by_lua_file</source>
          <target state="translated">init_by_lua_file</target>
        </trans-unit>
        <trans-unit id="837b3c2bed7fcffc089534674ec9518970f09c5f" translate="yes" xml:space="preserve">
          <source>init_worker_by_lua</source>
          <target state="translated">init_worker_by_lua</target>
        </trans-unit>
        <trans-unit id="94e074f487395b897d2afb2f7f7d57cae105e98d" translate="yes" xml:space="preserve">
          <source>init_worker_by_lua_block</source>
          <target state="translated">init_worker_by_lua_block</target>
        </trans-unit>
        <trans-unit id="113a14ee14c90fd18b357946d5e09835efb6c5ef" translate="yes" xml:space="preserve">
          <source>init_worker_by_lua_file</source>
          <target state="translated">init_worker_by_lua_file</target>
        </trans-unit>
        <trans-unit id="c048e60340b89789177bd04461bd7007fca86909" translate="yes" xml:space="preserve">
          <source>instead of the old deprecated form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec285792f84b2006557cfe7a76ef03e4dffbd46" translate="yes" xml:space="preserve">
          <source>is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3128f696a4a89e9a4b4bf9c2a4de16e6b279b3" translate="yes" xml:space="preserve">
          <source>is equivalent to the following Lua code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6426c8c9924073829d0f1a54ce6584b01a93c3f9" translate="yes" xml:space="preserve">
          <source>it calls &lt;a href=&quot;#coroutineyield&quot;&gt;coroutine.yield&lt;/a&gt; to actively give up execution, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8a89fdcc25e0bba98e9f350ae2ac540df8485a" translate="yes" xml:space="preserve">
          <source>it is aborted by a Lua error or an invocation of &lt;a href=&quot;#ngxexit&quot;&gt;ngx.exit&lt;/a&gt;, &lt;a href=&quot;#ngxexec&quot;&gt;ngx.exec&lt;/a&gt;, &lt;a href=&quot;#ngxredirect&quot;&gt;ngx.redirect&lt;/a&gt;, or &lt;a href=&quot;#ngxreqset_uri&quot;&gt;ngx.req.set_uri(uri, true)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f49fe6edab36a314c646483713449b3c5cd8d2b" translate="yes" xml:space="preserve">
          <source>its parent coroutine is not waiting on it with &lt;a href=&quot;#ngxthreadwait&quot;&gt;ngx.thread.wait&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c651bc017b651b4d77a8bdaa862b8da7baa0332" translate="yes" xml:space="preserve">
          <source>its parent coroutine is still alive, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b9502eb092996269765f5bfe2a69619ddabfd6" translate="yes" xml:space="preserve">
          <source>llen</source>
          <target state="translated">llen</target>
        </trans-unit>
        <trans-unit id="755845d946e95adb1a5dee8678673c8b2779fa40" translate="yes" xml:space="preserve">
          <source>log_by_lua</source>
          <target state="translated">log_by_lua</target>
        </trans-unit>
        <trans-unit id="d8104080c6c4ff1bfd0e84d8b2e7fe7897e9fff5" translate="yes" xml:space="preserve">
          <source>log_by_lua_block</source>
          <target state="translated">log_by_lua_block</target>
        </trans-unit>
        <trans-unit id="17c8387e058b4f545877625fbf08a566f68f6566" translate="yes" xml:space="preserve">
          <source>log_by_lua_file</source>
          <target state="translated">log_by_lua_file</target>
        </trans-unit>
        <trans-unit id="fe18c7670939044a3501dd836416694756301df1" translate="yes" xml:space="preserve">
          <source>lpop</source>
          <target state="translated">lpop</target>
        </trans-unit>
        <trans-unit id="6fc389b36b7fa594ae026992fad6543dfe453bb9" translate="yes" xml:space="preserve">
          <source>lpush</source>
          <target state="translated">lpush</target>
        </trans-unit>
        <trans-unit id="df2d63a6ac3c6cad20b2c5c2063d315f55b98942" translate="yes" xml:space="preserve">
          <source>lua-cjson</source>
          <target state="translated">lua-cjson</target>
        </trans-unit>
        <trans-unit id="b2eb49a70066ceb4aed256553d88e644c86c2d42" translate="yes" xml:space="preserve">
          <source>lua-resty-dns</source>
          <target state="translated">lua-resty-dns</target>
        </trans-unit>
        <trans-unit id="25daa68c434dba8dfe67782d9ceb42320e356bcc" translate="yes" xml:space="preserve">
          <source>lua-resty-lock</source>
          <target state="translated">lua-resty-lock</target>
        </trans-unit>
        <trans-unit id="7b3d371473c57fc8bb890e08a3b9f0ef7a7056cb" translate="yes" xml:space="preserve">
          <source>lua-resty-logger-socket</source>
          <target state="translated">lua-resty-logger-socket</target>
        </trans-unit>
        <trans-unit id="34ba9a1a3d38ad5507a9eca6441d9421ddc7b47f" translate="yes" xml:space="preserve">
          <source>lua-resty-lrucache</source>
          <target state="translated">lua-resty-lrucache</target>
        </trans-unit>
        <trans-unit id="3de58d0f0c3804da480bf8f178efb8464ed3236b" translate="yes" xml:space="preserve">
          <source>lua-resty-memcached</source>
          <target state="translated">lua-resty-memcached</target>
        </trans-unit>
        <trans-unit id="c0926b78baa5bd1140359523403cc627de756050" translate="yes" xml:space="preserve">
          <source>lua-resty-mysql</source>
          <target state="translated">lua-resty-mysql</target>
        </trans-unit>
        <trans-unit id="fe0b350660e599b7d5b6a175a5ed2d9395b8fcc6" translate="yes" xml:space="preserve">
          <source>lua-resty-redis</source>
          <target state="translated">lua-resty-redis</target>
        </trans-unit>
        <trans-unit id="e66efd3a244d13ee8b90d1896264a1e9c42d1224" translate="yes" xml:space="preserve">
          <source>lua-resty-string</source>
          <target state="translated">lua-resty-string</target>
        </trans-unit>
        <trans-unit id="156d1b88f9b520176eb39ceaab4ec73332b25f21" translate="yes" xml:space="preserve">
          <source>lua-resty-upload</source>
          <target state="translated">lua-resty-upload</target>
        </trans-unit>
        <trans-unit id="6451dd4350eb74b812a64e20da144a91e23672db" translate="yes" xml:space="preserve">
          <source>lua-resty-websocket</source>
          <target state="translated">lua-resty-websocket</target>
        </trans-unit>
        <trans-unit id="cbcfbd35f59c303fed915f822d3f80908ff33613" translate="yes" xml:space="preserve">
          <source>lua_capture_error_log</source>
          <target state="translated">lua_capture_error_log</target>
        </trans-unit>
        <trans-unit id="a7db675383ff4b226097885271bbf6274afb0e31" translate="yes" xml:space="preserve">
          <source>lua_check_client_abort</source>
          <target state="translated">lua_check_client_abort</target>
        </trans-unit>
        <trans-unit id="5b2255db07c6b353e069bf4119d171a59f0e9767" translate="yes" xml:space="preserve">
          <source>lua_code_cache</source>
          <target state="translated">lua_code_cache</target>
        </trans-unit>
        <trans-unit id="d345e9b82d59938089f1beeb5541c91d1d307e69" translate="yes" xml:space="preserve">
          <source>lua_http10_buffering</source>
          <target state="translated">lua_http10_buffering</target>
        </trans-unit>
        <trans-unit id="6ec6b6c5a30d52ba8b95c6cba43ee1eed84e0d43" translate="yes" xml:space="preserve">
          <source>lua_malloc_trim</source>
          <target state="translated">lua_malloc_trim</target>
        </trans-unit>
        <trans-unit id="63f87c5da74f030c7bca72f9bddf0a37cf0e506e" translate="yes" xml:space="preserve">
          <source>lua_max_pending_timers</source>
          <target state="translated">lua_max_pending_timers</target>
        </trans-unit>
        <trans-unit id="78848c39f68c5cf0ae467441e8a1c40335452143" translate="yes" xml:space="preserve">
          <source>lua_max_running_timers</source>
          <target state="translated">lua_max_running_timers</target>
        </trans-unit>
        <trans-unit id="7094ec2d0c59e55dbe92cedbe1cd725082263d6d" translate="yes" xml:space="preserve">
          <source>lua_need_request_body</source>
          <target state="translated">lua_need_request_body</target>
        </trans-unit>
        <trans-unit id="7c21598d8f828171047696cab66f65428c0c4b50" translate="yes" xml:space="preserve">
          <source>lua_package_cpath</source>
          <target state="translated">lua_package_cpath</target>
        </trans-unit>
        <trans-unit id="80b063f6d09b849d1fb47486d5fb6a7a29f35a3d" translate="yes" xml:space="preserve">
          <source>lua_package_path</source>
          <target state="translated">lua_package_path</target>
        </trans-unit>
        <trans-unit id="4af31cc946657bbf89a8f97f986169620e0fc481" translate="yes" xml:space="preserve">
          <source>lua_regex_cache_max_entries</source>
          <target state="translated">lua_regex_cache_max_entries</target>
        </trans-unit>
        <trans-unit id="8c7076f0b29ca163258f612dd26a2c1ce8daa5ef" translate="yes" xml:space="preserve">
          <source>lua_regex_match_limit</source>
          <target state="translated">lua_regex_match_limit</target>
        </trans-unit>
        <trans-unit id="9cc0cec0dbe42686a2d6b06dd8b65c63b08d7a61" translate="yes" xml:space="preserve">
          <source>lua_shared_dict</source>
          <target state="translated">lua_shared_dict</target>
        </trans-unit>
        <trans-unit id="5870a5c96fc19e13711cf2e91e6d234cbc2fffed" translate="yes" xml:space="preserve">
          <source>lua_socket_buffer_size</source>
          <target state="translated">lua_socket_buffer_size</target>
        </trans-unit>
        <trans-unit id="1d05c5330dbcb68ad4e3f62be4296d9acc17cc0b" translate="yes" xml:space="preserve">
          <source>lua_socket_connect_timeout</source>
          <target state="translated">lua_socket_connect_timeout</target>
        </trans-unit>
        <trans-unit id="f16e3f105d15a7386530adec6cb3d0394aea5cdf" translate="yes" xml:space="preserve">
          <source>lua_socket_keepalive_timeout</source>
          <target state="translated">lua_socket_keepalive_timeout</target>
        </trans-unit>
        <trans-unit id="26f7bf278c903d41d26b877fcd37cabc4c577ff8" translate="yes" xml:space="preserve">
          <source>lua_socket_log_errors</source>
          <target state="translated">lua_socket_log_errors</target>
        </trans-unit>
        <trans-unit id="442b8930f9d99f08ffd788e5cb003cf636c0d42a" translate="yes" xml:space="preserve">
          <source>lua_socket_pool_size</source>
          <target state="translated">lua_socket_pool_size</target>
        </trans-unit>
        <trans-unit id="d95abc230450026ebdfc6709889d2d220ac98287" translate="yes" xml:space="preserve">
          <source>lua_socket_read_timeout</source>
          <target state="translated">lua_socket_read_timeout</target>
        </trans-unit>
        <trans-unit id="e533ae4687f7655c204ace367d0ecc447659dea5" translate="yes" xml:space="preserve">
          <source>lua_socket_send_lowat</source>
          <target state="translated">lua_socket_send_lowat</target>
        </trans-unit>
        <trans-unit id="683f5c1b51b89d9a66668c0f2fc623158b2cbc35" translate="yes" xml:space="preserve">
          <source>lua_socket_send_timeout</source>
          <target state="translated">lua_socket_send_timeout</target>
        </trans-unit>
        <trans-unit id="53932108b62668ff5f90c8ef023d15470fd02303" translate="yes" xml:space="preserve">
          <source>lua_ssl_ciphers</source>
          <target state="translated">lua_ssl_ciphers</target>
        </trans-unit>
        <trans-unit id="b3b0fd6cbb23a0afe9e46cd218d0d154e2b68e7f" translate="yes" xml:space="preserve">
          <source>lua_ssl_crl</source>
          <target state="translated">lua_ssl_crl</target>
        </trans-unit>
        <trans-unit id="77b8329ff39ecd69b2cf3af5b70d9f24614658c7" translate="yes" xml:space="preserve">
          <source>lua_ssl_protocols</source>
          <target state="translated">lua_ssl_protocols</target>
        </trans-unit>
        <trans-unit id="4fa5d9a30792aed6eb6fa61c38eac1e383319e08" translate="yes" xml:space="preserve">
          <source>lua_ssl_trusted_certificate</source>
          <target state="translated">lua_ssl_trusted_certificate</target>
        </trans-unit>
        <trans-unit id="ed8bd6ce577c505c2b5a9d3d2dcf0eb99a7f46ac" translate="yes" xml:space="preserve">
          <source>lua_ssl_verify_depth</source>
          <target state="translated">lua_ssl_verify_depth</target>
        </trans-unit>
        <trans-unit id="ab563c973be1097c4c8aaabbaa7bbb159e4685ea" translate="yes" xml:space="preserve">
          <source>lua_transform_underscores_in_response_headers</source>
          <target state="translated">lua_transform_underscores_in_response_headers</target>
        </trans-unit>
        <trans-unit id="a302ed9d3a3d6a379ad3454c7595b30490d44559" translate="yes" xml:space="preserve">
          <source>lua_use_default_type</source>
          <target state="translated">lua_use_default_type</target>
        </trans-unit>
        <trans-unit id="be8ef63adc4c8a5324aeae0b15184cdc3497ee33" translate="yes" xml:space="preserve">
          <source>manipulating response headers in an arbitrary way (by Lua)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619e4491825d9231fbf6a582490ef554222a0dd0" translate="yes" xml:space="preserve">
          <source>memc-nginx-module</source>
          <target state="translated">memc-nginx-module</target>
        </trans-unit>
        <trans-unit id="7a17fc5dfbd8a089df5162c593183dd0b067fad9" translate="yes" xml:space="preserve">
          <source>memcached: listening on the default port, 11211.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27ab685455c16e1236dc16f3c77ca1d8ce8174a" translate="yes" xml:space="preserve">
          <source>mysql: create database 'ngx_test', grant all privileges to user 'ngx_test', password is 'ngx_test'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beba7d93d3ebe73741e427d8487bce9971eb9545" translate="yes" xml:space="preserve">
          <source>ndk.set_var.DIRECTIVE</source>
          <target state="translated">ndk.set_var.DIRECTIVE</target>
        </trans-unit>
        <trans-unit id="4f60f0f28275cd6504e554edc3c213a84d412ea2" translate="yes" xml:space="preserve">
          <source>nginx / Lua Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1668ffbfdfba06fbb816f555991fa5e4f1265f41" translate="yes" xml:space="preserve">
          <source>ngx.arg</source>
          <target state="translated">ngx.arg</target>
        </trans-unit>
        <trans-unit id="cd6baf9720db99851bcbc16c19686bd4481e719f" translate="yes" xml:space="preserve">
          <source>ngx.balancer</source>
          <target state="translated">ngx.balancer</target>
        </trans-unit>
        <trans-unit id="f0d4cf920df59587d5a0bf5b5c9c07891ff13117" translate="yes" xml:space="preserve">
          <source>ngx.config.debug</source>
          <target state="translated">ngx.config.debug</target>
        </trans-unit>
        <trans-unit id="02b3d16c79bfd793440a9d19b345fbd604a554e0" translate="yes" xml:space="preserve">
          <source>ngx.config.nginx_configure</source>
          <target state="translated">ngx.config.nginx_configure</target>
        </trans-unit>
        <trans-unit id="a0d927929cca671fdf271699bf947d8531dfc779" translate="yes" xml:space="preserve">
          <source>ngx.config.nginx_version</source>
          <target state="translated">ngx.config.nginx_version</target>
        </trans-unit>
        <trans-unit id="86a8d5d122d199d8eb74d79126e0e82a02beff8b" translate="yes" xml:space="preserve">
          <source>ngx.config.ngx_lua_version</source>
          <target state="translated">ngx.config.ngx_lua_version</target>
        </trans-unit>
        <trans-unit id="7c825b89f228e0b7f646e5e06baf260770a1deb7" translate="yes" xml:space="preserve">
          <source>ngx.config.prefix</source>
          <target state="translated">ngx.config.prefix</target>
        </trans-unit>
        <trans-unit id="3120aed47199a5a2dd2521a93b6fc6c078fcf23d" translate="yes" xml:space="preserve">
          <source>ngx.config.subsystem</source>
          <target state="translated">ngx.config.subsystem</target>
        </trans-unit>
        <trans-unit id="2c5ac3e38f83e230734f562d51ff106e7390081b" translate="yes" xml:space="preserve">
          <source>ngx.cookie_time</source>
          <target state="translated">ngx.cookie_time</target>
        </trans-unit>
        <trans-unit id="0857175cb88466f5030dea6557aade3dcc5fdd87" translate="yes" xml:space="preserve">
          <source>ngx.crc32_long</source>
          <target state="translated">ngx.crc32_long</target>
        </trans-unit>
        <trans-unit id="9d127c3195921de2fb885cd7d323357e66e282fa" translate="yes" xml:space="preserve">
          <source>ngx.crc32_short</source>
          <target state="translated">ngx.crc32_short</target>
        </trans-unit>
        <trans-unit id="c6e214a0a7eca73b6d874c5a21b58560fe075e6e" translate="yes" xml:space="preserve">
          <source>ngx.ctx</source>
          <target state="translated">ngx.ctx</target>
        </trans-unit>
        <trans-unit id="106d9dc0d02c1311c85f5e4e4ded49c7fc624074" translate="yes" xml:space="preserve">
          <source>ngx.decode_args</source>
          <target state="translated">ngx.decode_args</target>
        </trans-unit>
        <trans-unit id="8f9c77cb5dace369afc08f2e7fbbd530f1792e12" translate="yes" xml:space="preserve">
          <source>ngx.decode_base64</source>
          <target state="translated">ngx.decode_base64</target>
        </trans-unit>
        <trans-unit id="70737df004e7dd0e6894fc9908158e92f082a1f9" translate="yes" xml:space="preserve">
          <source>ngx.encode_args</source>
          <target state="translated">ngx.encode_args</target>
        </trans-unit>
        <trans-unit id="1eee48fc5ad83f9abd7b18bc68ea192b6e069d7d" translate="yes" xml:space="preserve">
          <source>ngx.encode_base64</source>
          <target state="translated">ngx.encode_base64</target>
        </trans-unit>
        <trans-unit id="1234159cd8d7c370194d0de23a0e7711becf82b8" translate="yes" xml:space="preserve">
          <source>ngx.eof</source>
          <target state="translated">ngx.eof</target>
        </trans-unit>
        <trans-unit id="8e6f67f92ae1abbb6dff82524a1cd237b7c97a3a" translate="yes" xml:space="preserve">
          <source>ngx.escape_uri</source>
          <target state="translated">ngx.escape_uri</target>
        </trans-unit>
        <trans-unit id="87af05cfe31608e406c262de4e71e6310cc4a91c" translate="yes" xml:space="preserve">
          <source>ngx.exec</source>
          <target state="translated">ngx.exec</target>
        </trans-unit>
        <trans-unit id="ce91c1696a2c9908d62853ee7fe8b9876cf9b709" translate="yes" xml:space="preserve">
          <source>ngx.exit</source>
          <target state="translated">ngx.exit</target>
        </trans-unit>
        <trans-unit id="fe76caf9dab251e057d4077bdf702c8b7852a156" translate="yes" xml:space="preserve">
          <source>ngx.flush</source>
          <target state="translated">ngx.flush</target>
        </trans-unit>
        <trans-unit id="d5af4a87cff50b029e81639fb01575645c95c2d4" translate="yes" xml:space="preserve">
          <source>ngx.get_phase</source>
          <target state="translated">ngx.get_phase</target>
        </trans-unit>
        <trans-unit id="58c1434b5b61ad56cccd5dacb0e58afdd8c61360" translate="yes" xml:space="preserve">
          <source>ngx.header.HEADER</source>
          <target state="translated">ngx.header.HEADER</target>
        </trans-unit>
        <trans-unit id="d9e6b54fb58036cdf470f78cc83f13b547d36a89" translate="yes" xml:space="preserve">
          <source>ngx.headers_sent</source>
          <target state="translated">ngx.headers_sent</target>
        </trans-unit>
        <trans-unit id="456b6b8e1e0f91c1c27af06402b70da666f06a57" translate="yes" xml:space="preserve">
          <source>ngx.hmac_sha1</source>
          <target state="translated">ngx.hmac_sha1</target>
        </trans-unit>
        <trans-unit id="a5cdb271678e5b949c359472ba55e4dffd614a15" translate="yes" xml:space="preserve">
          <source>ngx.http_time</source>
          <target state="translated">ngx.http_time</target>
        </trans-unit>
        <trans-unit id="253b73d1c92431242eeb9de0d17ada3697760cc5" translate="yes" xml:space="preserve">
          <source>ngx.is_subrequest</source>
          <target state="translated">ngx.is_subrequest</target>
        </trans-unit>
        <trans-unit id="914f7fe2bfac8b64b89d368ea0a13ab329357c18" translate="yes" xml:space="preserve">
          <source>ngx.localtime</source>
          <target state="translated">ngx.localtime</target>
        </trans-unit>
        <trans-unit id="c91d8074157daa8821d013c81c744409c972cb03" translate="yes" xml:space="preserve">
          <source>ngx.location.capture</source>
          <target state="translated">ngx.location.capture</target>
        </trans-unit>
        <trans-unit id="ce658cd3ebfbe12caa16a434e7b41d2321827c19" translate="yes" xml:space="preserve">
          <source>ngx.location.capture_multi</source>
          <target state="translated">ngx.location.capture_multi</target>
        </trans-unit>
        <trans-unit id="0482e8c0d7cd71359f538475d93333f39f85f6e0" translate="yes" xml:space="preserve">
          <source>ngx.log</source>
          <target state="translated">ngx.log</target>
        </trans-unit>
        <trans-unit id="d00405662cd20d321c21a5bcda53557b966d61b6" translate="yes" xml:space="preserve">
          <source>ngx.md5</source>
          <target state="translated">ngx.md5</target>
        </trans-unit>
        <trans-unit id="2c67517fb5892fc1b78c52c2595a9fe07fde02c3" translate="yes" xml:space="preserve">
          <source>ngx.md5_bin</source>
          <target state="translated">ngx.md5_bin</target>
        </trans-unit>
        <trans-unit id="7d042055ef6abf2cb5dd304cc87a2b7caecae154" translate="yes" xml:space="preserve">
          <source>ngx.now</source>
          <target state="translated">ngx.now</target>
        </trans-unit>
        <trans-unit id="9c6c099acd2b05b1b668cd51dc9b04acd3f07723" translate="yes" xml:space="preserve">
          <source>ngx.ocsp</source>
          <target state="translated">ngx.ocsp</target>
        </trans-unit>
        <trans-unit id="53ba0e49eebaa5c273684a0b27ed61fd09605ee8" translate="yes" xml:space="preserve">
          <source>ngx.on_abort</source>
          <target state="translated">ngx.on_abort</target>
        </trans-unit>
        <trans-unit id="7d18e0ef5598726d3b2d21e5c8e823c4d02b7550" translate="yes" xml:space="preserve">
          <source>ngx.parse_http_time</source>
          <target state="translated">ngx.parse_http_time</target>
        </trans-unit>
        <trans-unit id="29e9331ddbd37de2afa09e4dcdd143149b1bac94" translate="yes" xml:space="preserve">
          <source>ngx.print</source>
          <target state="translated">ngx.print</target>
        </trans-unit>
        <trans-unit id="554aa169c1082bfaf8d01c46f326950fb3e0879f" translate="yes" xml:space="preserve">
          <source>ngx.quote_sql_str</source>
          <target state="translated">ngx.quote_sql_str</target>
        </trans-unit>
        <trans-unit id="630aec6dface694dc2c52950fce906eec448e785" translate="yes" xml:space="preserve">
          <source>ngx.re.find</source>
          <target state="translated">ngx.re.find</target>
        </trans-unit>
        <trans-unit id="3d159dd3d9bc416cd20b4f3829365fae33f976dd" translate="yes" xml:space="preserve">
          <source>ngx.re.gmatch</source>
          <target state="translated">ngx.re.gmatch</target>
        </trans-unit>
        <trans-unit id="f7d69f3d1134a00509649da21df12e2d70cc7511" translate="yes" xml:space="preserve">
          <source>ngx.re.gsub</source>
          <target state="translated">ngx.re.gsub</target>
        </trans-unit>
        <trans-unit id="f20f8474ae604f283bcfe429a6175c9635335526" translate="yes" xml:space="preserve">
          <source>ngx.re.match</source>
          <target state="translated">ngx.re.match</target>
        </trans-unit>
        <trans-unit id="d2df999f4844570a38505e4f5679245d923ef74d" translate="yes" xml:space="preserve">
          <source>ngx.re.sub</source>
          <target state="translated">ngx.re.sub</target>
        </trans-unit>
        <trans-unit id="219d505a9d44895ea6f6b9e5c17343ee63065e1d" translate="yes" xml:space="preserve">
          <source>ngx.redirect</source>
          <target state="translated">ngx.redirect</target>
        </trans-unit>
        <trans-unit id="86a25724a37cba5c44901a32b76a11a33d611d1b" translate="yes" xml:space="preserve">
          <source>ngx.req.append_body</source>
          <target state="translated">ngx.req.append_body</target>
        </trans-unit>
        <trans-unit id="e382e9136184417f530071da8d81d1b49c0f3aea" translate="yes" xml:space="preserve">
          <source>ngx.req.clear_header</source>
          <target state="translated">ngx.req.clear_header</target>
        </trans-unit>
        <trans-unit id="c5163c273178958088f509b7a2dfd16cc4c94dae" translate="yes" xml:space="preserve">
          <source>ngx.req.discard_body</source>
          <target state="translated">ngx.req.discard_body</target>
        </trans-unit>
        <trans-unit id="0613be13e110e9811d87534635fd04830d3639e4" translate="yes" xml:space="preserve">
          <source>ngx.req.finish_body</source>
          <target state="translated">ngx.req.finish_body</target>
        </trans-unit>
        <trans-unit id="1d197aa13fa978589f4a9be0ca51aeb4798f76ba" translate="yes" xml:space="preserve">
          <source>ngx.req.get_body_data</source>
          <target state="translated">ngx.req.get_body_data</target>
        </trans-unit>
        <trans-unit id="a37dc5213fda4e78c87a407b48290f68ee93e02b" translate="yes" xml:space="preserve">
          <source>ngx.req.get_body_file</source>
          <target state="translated">ngx.req.get_body_file</target>
        </trans-unit>
        <trans-unit id="45a5f8c85683d56fa7efbaf482e9b0e9f144ae85" translate="yes" xml:space="preserve">
          <source>ngx.req.get_headers</source>
          <target state="translated">ngx.req.get_headers</target>
        </trans-unit>
        <trans-unit id="8f5f752cd2e9bdc8b107c17598b368b91b8e9724" translate="yes" xml:space="preserve">
          <source>ngx.req.get_method</source>
          <target state="translated">ngx.req.get_method</target>
        </trans-unit>
        <trans-unit id="aa81a696a371b6738a61fc7f12fe75d913288707" translate="yes" xml:space="preserve">
          <source>ngx.req.get_post_args</source>
          <target state="translated">ngx.req.get_post_args</target>
        </trans-unit>
        <trans-unit id="c8ab507cd34565806f58d0ba6b254dc7fe092d52" translate="yes" xml:space="preserve">
          <source>ngx.req.get_uri_args</source>
          <target state="translated">ngx.req.get_uri_args</target>
        </trans-unit>
        <trans-unit id="912dcb3394590e3863f3835f82526e53a1653700" translate="yes" xml:space="preserve">
          <source>ngx.req.http_version</source>
          <target state="translated">ngx.req.http_version</target>
        </trans-unit>
        <trans-unit id="508e034fd324ff7c62e73d676f04e919c4c008e6" translate="yes" xml:space="preserve">
          <source>ngx.req.init_body</source>
          <target state="translated">ngx.req.init_body</target>
        </trans-unit>
        <trans-unit id="166a3c310b8be9706dc5b7bbca06ef758860561c" translate="yes" xml:space="preserve">
          <source>ngx.req.is_internal</source>
          <target state="translated">ngx.req.is_internal</target>
        </trans-unit>
        <trans-unit id="3476ad9ecc3f74dd896100e01a678c545816ceca" translate="yes" xml:space="preserve">
          <source>ngx.req.raw_header</source>
          <target state="translated">ngx.req.raw_header</target>
        </trans-unit>
        <trans-unit id="9d9b4b6929b86202c2c39c5309d56252341849fa" translate="yes" xml:space="preserve">
          <source>ngx.req.read_body</source>
          <target state="translated">ngx.req.read_body</target>
        </trans-unit>
        <trans-unit id="8dd924797c72efa18beddc5f35c76dcb01b2ad45" translate="yes" xml:space="preserve">
          <source>ngx.req.set_body_data</source>
          <target state="translated">ngx.req.set_body_data</target>
        </trans-unit>
        <trans-unit id="66a452698ff23cf22686045918457a0eee886a80" translate="yes" xml:space="preserve">
          <source>ngx.req.set_body_file</source>
          <target state="translated">ngx.req.set_body_file</target>
        </trans-unit>
        <trans-unit id="dafe903114a0bb4d82adb1b2f47fc855aa3e2da8" translate="yes" xml:space="preserve">
          <source>ngx.req.set_header</source>
          <target state="translated">ngx.req.set_header</target>
        </trans-unit>
        <trans-unit id="18b5000171df483a4f7f357004d1d19c94613c83" translate="yes" xml:space="preserve">
          <source>ngx.req.set_method</source>
          <target state="translated">ngx.req.set_method</target>
        </trans-unit>
        <trans-unit id="76838e7548e0f46c2231e630fc8dde6910a01d9d" translate="yes" xml:space="preserve">
          <source>ngx.req.set_uri</source>
          <target state="translated">ngx.req.set_uri</target>
        </trans-unit>
        <trans-unit id="1c6dc598e016783ebb9cbaaf9224a8614c5866a3" translate="yes" xml:space="preserve">
          <source>ngx.req.set_uri_args</source>
          <target state="translated">ngx.req.set_uri_args</target>
        </trans-unit>
        <trans-unit id="36f3a0862b7f3fb6b6c957e3b5dafea98e9d683b" translate="yes" xml:space="preserve">
          <source>ngx.req.socket</source>
          <target state="translated">ngx.req.socket</target>
        </trans-unit>
        <trans-unit id="ba30ba4cfe1612c56a35051e9cf2b4a004ae1865" translate="yes" xml:space="preserve">
          <source>ngx.req.start_time</source>
          <target state="translated">ngx.req.start_time</target>
        </trans-unit>
        <trans-unit id="ab3383774986041cbbbc81ac52c4056f262f8c7b" translate="yes" xml:space="preserve">
          <source>ngx.resp.get_headers</source>
          <target state="translated">ngx.resp.get_headers</target>
        </trans-unit>
        <trans-unit id="24a9d7f2971ea19ecc1eab599da17c51a6ee5ece" translate="yes" xml:space="preserve">
          <source>ngx.say</source>
          <target state="translated">ngx.say</target>
        </trans-unit>
        <trans-unit id="a2caf6e24d6b2c11eacf43646afe0f9a12c66751" translate="yes" xml:space="preserve">
          <source>ngx.semaphore</source>
          <target state="translated">ngx.semaphore</target>
        </trans-unit>
        <trans-unit id="1e8383f551c458641cdf1a52361bbef979498c96" translate="yes" xml:space="preserve">
          <source>ngx.send_headers</source>
          <target state="translated">ngx.send_headers</target>
        </trans-unit>
        <trans-unit id="b7bc738ad7d7587129d357c3cdc6f8e1ff281813" translate="yes" xml:space="preserve">
          <source>ngx.sha1_bin</source>
          <target state="translated">ngx.sha1_bin</target>
        </trans-unit>
        <trans-unit id="7b5a5dc5c2f8a668961859de28e91493d3299447" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT</source>
          <target state="translated">ngx.shared.DICT</target>
        </trans-unit>
        <trans-unit id="a56213ebf2f834521cabd13c0103d43d6fd69884" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.add</source>
          <target state="translated">ngx.shared.DICT.add</target>
        </trans-unit>
        <trans-unit id="4d5b8646470e2de69236d47b7e384bf3d8313b32" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.capacity</source>
          <target state="translated">ngx.shared.DICT.capacity</target>
        </trans-unit>
        <trans-unit id="db0c3082ecf061a77bca5bfa336ea5cc84a3ee9b" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.delete</source>
          <target state="translated">ngx.shared.DICT.delete</target>
        </trans-unit>
        <trans-unit id="73f83990e2929cc0cf3be024bcb6cc5419cb5946" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.expire</source>
          <target state="translated">ngx.shared.DICT.expire</target>
        </trans-unit>
        <trans-unit id="5c074031fe075a07cf5153536845bf2255e0923e" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.flush_all</source>
          <target state="translated">ngx.shared.DICT.flush_all</target>
        </trans-unit>
        <trans-unit id="b655589e7f6b4626b72bb3ce5087080328c0cbca" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.flush_expired</source>
          <target state="translated">ngx.shared.DICT.flush_expired</target>
        </trans-unit>
        <trans-unit id="a2c38603eca9dab111a50aac19ee9f61bfedd575" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.free_space</source>
          <target state="translated">ngx.shared.DICT.free_space</target>
        </trans-unit>
        <trans-unit id="545362f10587dc8d8fd4f11273814b3e950d5b93" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.get</source>
          <target state="translated">ngx.shared.DICT.get</target>
        </trans-unit>
        <trans-unit id="ec41b7db8ead49858b45b33e2d02a4306a86b116" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.get_keys</source>
          <target state="translated">ngx.shared.DICT.get_keys</target>
        </trans-unit>
        <trans-unit id="9804b5634e3dc7aa51ffaf30f6603301e1c56569" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.get_stale</source>
          <target state="translated">ngx.shared.DICT.get_stale</target>
        </trans-unit>
        <trans-unit id="232741af7d17ce9ccd8416951c9879435db59071" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.incr</source>
          <target state="translated">ngx.shared.DICT.incr</target>
        </trans-unit>
        <trans-unit id="588ae067d3e14102d340579edf3a24af9a1b33b4" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.llen</source>
          <target state="translated">ngx.shared.DICT.llen</target>
        </trans-unit>
        <trans-unit id="c005e013e6aeabe483714f3cfb5c00691f6dfa6b" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.lpop</source>
          <target state="translated">ngx.shared.DICT.lpop</target>
        </trans-unit>
        <trans-unit id="4a59e370692132c85a7ff465c0c1a5e1da22d0b8" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.lpush</source>
          <target state="translated">ngx.shared.DICT.lpush</target>
        </trans-unit>
        <trans-unit id="7e6b7fed98f59a311fce2db85fb64337ab4d9e95" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.replace</source>
          <target state="translated">ngx.shared.DICT.replace</target>
        </trans-unit>
        <trans-unit id="76acea97025dc0812d9efba57588f814351d3174" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.rpop</source>
          <target state="translated">ngx.shared.DICT.rpop</target>
        </trans-unit>
        <trans-unit id="44f8cbfc4d75c6e74e3f53eeb7db4f150ff63506" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.rpush</source>
          <target state="translated">ngx.shared.DICT.rpush</target>
        </trans-unit>
        <trans-unit id="76d63f701199ddf3d6c85f7a449c8e6fac44056a" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.safe_add</source>
          <target state="translated">ngx.shared.DICT.safe_add</target>
        </trans-unit>
        <trans-unit id="7b0391e6b5519b46af295a2b3a8c591fe8130803" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.safe_set</source>
          <target state="translated">ngx.shared.DICT.safe_set</target>
        </trans-unit>
        <trans-unit id="d0650b4010a32afe173bf86b5368bcbcf8166df8" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.set</source>
          <target state="translated">ngx.shared.DICT.set</target>
        </trans-unit>
        <trans-unit id="afefbc0e3bcb2a042f029c24b0027b4bb2c19be7" translate="yes" xml:space="preserve">
          <source>ngx.shared.DICT.ttl</source>
          <target state="translated">ngx.shared.DICT.ttl</target>
        </trans-unit>
        <trans-unit id="33bf65fcfc51920f85ac4c30e752e6b2ef014c20" translate="yes" xml:space="preserve">
          <source>ngx.sleep</source>
          <target state="translated">ngx.sleep</target>
        </trans-unit>
        <trans-unit id="9b31d5d4d87fdbd2aee5a7cf49418c459fc77b0b" translate="yes" xml:space="preserve">
          <source>ngx.socket.connect</source>
          <target state="translated">ngx.socket.connect</target>
        </trans-unit>
        <trans-unit id="cc229e04e97ddc8ccfc2d4717f7b2db172b0c531" translate="yes" xml:space="preserve">
          <source>ngx.socket.stream</source>
          <target state="translated">ngx.socket.stream</target>
        </trans-unit>
        <trans-unit id="8717be9f85aaa838763342c5d9b641af259c0c47" translate="yes" xml:space="preserve">
          <source>ngx.socket.tcp</source>
          <target state="translated">ngx.socket.tcp</target>
        </trans-unit>
        <trans-unit id="af96994306432259d63d411e8ec98f373f15e7cf" translate="yes" xml:space="preserve">
          <source>ngx.socket.udp</source>
          <target state="translated">ngx.socket.udp</target>
        </trans-unit>
        <trans-unit id="b91eea6ec565f2f81785fcabfa5e66539fd4d039" translate="yes" xml:space="preserve">
          <source>ngx.ssl</source>
          <target state="translated">ngx.ssl</target>
        </trans-unit>
        <trans-unit id="7f64d79d871a1f0e7f2dad7281931df252e26270" translate="yes" xml:space="preserve">
          <source>ngx.status</source>
          <target state="translated">ngx.status</target>
        </trans-unit>
        <trans-unit id="1cd6e8d7bb47f32691bf2e88579adbf13d625b76" translate="yes" xml:space="preserve">
          <source>ngx.thread.kill</source>
          <target state="translated">ngx.thread.kill</target>
        </trans-unit>
        <trans-unit id="674d2e7287247a84852631616f9548bfde82557b" translate="yes" xml:space="preserve">
          <source>ngx.thread.spawn</source>
          <target state="translated">ngx.thread.spawn</target>
        </trans-unit>
        <trans-unit id="8802227e3a7a22323e56e19e9c1927b331b021a3" translate="yes" xml:space="preserve">
          <source>ngx.thread.wait</source>
          <target state="translated">ngx.thread.wait</target>
        </trans-unit>
        <trans-unit id="eab1423490f068094a015f07c22e19fc5db84519" translate="yes" xml:space="preserve">
          <source>ngx.time</source>
          <target state="translated">ngx.time</target>
        </trans-unit>
        <trans-unit id="1b7352cf5e4b08a3c8d6e5b4d8ed143d8a59af98" translate="yes" xml:space="preserve">
          <source>ngx.timer.at</source>
          <target state="translated">ngx.timer.at</target>
        </trans-unit>
        <trans-unit id="78f8aca5ce28a34663c685996763b09790da834f" translate="yes" xml:space="preserve">
          <source>ngx.timer.every</source>
          <target state="translated">ngx.timer.every</target>
        </trans-unit>
        <trans-unit id="5ba34e3fd4decb8a1bd9954d98396073f04f79e8" translate="yes" xml:space="preserve">
          <source>ngx.timer.pending_count</source>
          <target state="translated">ngx.timer.pending_count</target>
        </trans-unit>
        <trans-unit id="2db6522a85a08d44e9d2f7b15706791e50e9a8b4" translate="yes" xml:space="preserve">
          <source>ngx.timer.running_count</source>
          <target state="translated">ngx.timer.running_count</target>
        </trans-unit>
        <trans-unit id="901ef3c3ebfddcc2e395b0acf06d2d2930a1b877" translate="yes" xml:space="preserve">
          <source>ngx.today</source>
          <target state="translated">ngx.today</target>
        </trans-unit>
        <trans-unit id="bd745f75f1516730c965d8379cdf3777707315de" translate="yes" xml:space="preserve">
          <source>ngx.unescape_uri</source>
          <target state="translated">ngx.unescape_uri</target>
        </trans-unit>
        <trans-unit id="daa55ffabf48fc2864ac7ba9629babac0d113008" translate="yes" xml:space="preserve">
          <source>ngx.update_time</source>
          <target state="translated">ngx.update_time</target>
        </trans-unit>
        <trans-unit id="1d0bba1cf60fe70cf52cede40ef25aaddaf99a3c" translate="yes" xml:space="preserve">
          <source>ngx.utctime</source>
          <target state="translated">ngx.utctime</target>
        </trans-unit>
        <trans-unit id="426734ed62ec4e434281a665323d18d22b9921ed" translate="yes" xml:space="preserve">
          <source>ngx.var.VARIABLE</source>
          <target state="translated">ngx.var.VARIABLE</target>
        </trans-unit>
        <trans-unit id="cc074be043ae86c60c2115c7f542179320520cbe" translate="yes" xml:space="preserve">
          <source>ngx.worker.count</source>
          <target state="translated">ngx.worker.count</target>
        </trans-unit>
        <trans-unit id="7b6d8a14f6ffa7fc6df9091d975cb77efcad4af2" translate="yes" xml:space="preserve">
          <source>ngx.worker.exiting</source>
          <target state="translated">ngx.worker.exiting</target>
        </trans-unit>
        <trans-unit id="9a6d2e596bc67c6d4206d306c6a06fca94173087" translate="yes" xml:space="preserve">
          <source>ngx.worker.id</source>
          <target state="translated">ngx.worker.id</target>
        </trans-unit>
        <trans-unit id="aa8b1b722eb8dd768c5f56ba809bd48c51ea3f7f" translate="yes" xml:space="preserve">
          <source>ngx.worker.pid</source>
          <target state="translated">ngx.worker.pid</target>
        </trans-unit>
        <trans-unit id="ddb114fd0d4f83c1a44b2bba27370f70325154af" translate="yes" xml:space="preserve">
          <source>ngx_coolkit</source>
          <target state="translated">ngx_coolkit</target>
        </trans-unit>
        <trans-unit id="0f5f22d4c16ee13a0be2a39f05c3b76fb7db1ad1" translate="yes" xml:space="preserve">
          <source>ngx_devel_kit</source>
          <target state="translated">ngx_devel_kit</target>
        </trans-unit>
        <trans-unit id="0909e10267135d50782af4bd0a1092d22c9307b4" translate="yes" xml:space="preserve">
          <source>ngx_drizzle</source>
          <target state="translated">ngx_drizzle</target>
        </trans-unit>
        <trans-unit id="0b0a90c8a256e4ba4da85f7506b18951b31c78d9" translate="yes" xml:space="preserve">
          <source>ngx_echo</source>
          <target state="translated">ngx_echo</target>
        </trans-unit>
        <trans-unit id="6c8456c375b91b372fccfc09853fc425aeb86f68" translate="yes" xml:space="preserve">
          <source>ngx_fastcgi</source>
          <target state="translated">ngx_fastcgi</target>
        </trans-unit>
        <trans-unit id="d1b1d8934a4427bfb25475a9504bf5d7d3856d10" translate="yes" xml:space="preserve">
          <source>ngx_headers_more</source>
          <target state="translated">ngx_headers_more</target>
        </trans-unit>
        <trans-unit id="1e3da698a0af3332a7510735da4e91457ad44ef8" translate="yes" xml:space="preserve">
          <source>ngx_http_lua_module</source>
          <target state="translated">ngx_http_lua_module</target>
        </trans-unit>
        <trans-unit id="580bc8a7dc3a4c961511b34bca9b7ae0667e81f6" translate="yes" xml:space="preserve">
          <source>ngx_http_lua_module - Embed the power of Lua into Nginx HTTP Servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e407165470920fde72ec861517839fc452a2bc28" translate="yes" xml:space="preserve">
          <source>ngx_lua (i.e., this module)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b52732c84ac0b80fb2c8c21b2743da725e18e93" translate="yes" xml:space="preserve">
          <source>ngx_lua_upstream</source>
          <target state="translated">ngx_lua_upstream</target>
        </trans-unit>
        <trans-unit id="02926098407ce1089fa05c715f14b1db1e96d40f" translate="yes" xml:space="preserve">
          <source>ngx_memc</source>
          <target state="translated">ngx_memc</target>
        </trans-unit>
        <trans-unit id="3b0d3668aef479bea674dae89bcb7cb6fcbdcd73" translate="yes" xml:space="preserve">
          <source>ngx_postgres</source>
          <target state="translated">ngx_postgres</target>
        </trans-unit>
        <trans-unit id="f049e5aaf309f56e40afbbc762f2763a50ee1de3" translate="yes" xml:space="preserve">
          <source>ngx_proxy</source>
          <target state="translated">ngx_proxy</target>
        </trans-unit>
        <trans-unit id="35a95f9fb01efe081c5a74a98bdd33a258e290d8" translate="yes" xml:space="preserve">
          <source>ngx_rds_json</source>
          <target state="translated">ngx_rds_json</target>
        </trans-unit>
        <trans-unit id="eb6c8826620913275aa437868ec3e1dd0204bf1f" translate="yes" xml:space="preserve">
          <source>ngx_redis</source>
          <target state="translated">ngx_redis</target>
        </trans-unit>
        <trans-unit id="4e148b6fa581fc123b6146a70245518f3eb11062" translate="yes" xml:space="preserve">
          <source>ngx_redis2</source>
          <target state="translated">ngx_redis2</target>
        </trans-unit>
        <trans-unit id="1be02dc2cd59211a3bc91fc859efc44cf7758b70" translate="yes" xml:space="preserve">
          <source>ngx_set_misc</source>
          <target state="translated">ngx_set_misc</target>
        </trans-unit>
        <trans-unit id="d63b164bf3eb45b7fd9ee4cf76153b953b3d51c3" translate="yes" xml:space="preserve">
          <source>ngx_srcache</source>
          <target state="translated">ngx_srcache</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="48f7d267be52d9743f4765f9d186d854e46048ea" translate="yes" xml:space="preserve">
          <source>or a Lua table holding the query arguments' key-value pairs, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87f65818ff86eedc3fa544bf44c00b87aca2e88" translate="yes" xml:space="preserve">
          <source>or equivalently,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc6d52fe00612a1ae4419574dc67ba9ac3eea09" translate="yes" xml:space="preserve">
          <source>or posting to the &lt;a href=&quot;#community&quot;&gt;OpenResty community&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9f3e687ef3de57814556c261b626f247bdf64f" translate="yes" xml:space="preserve">
          <source>or the request body has zero size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060d4ab793b56f27baf868a8b76aea3cb0584c3e" translate="yes" xml:space="preserve">
          <source>or use Lua's syntactic sugar for method calls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4744dce40223cde6314379671367e50863f19d4" translate="yes" xml:space="preserve">
          <source>outputs something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf3b4e015ee05a6ab3947da89380794ffa1a86d" translate="yes" xml:space="preserve">
          <source>port this module to the &quot;datagram&quot; subsystem of NGINX for implementing general UDP servers instead of HTTP servers in Lua. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ff64ae590a199f0f3d33640713105ba66342d1" translate="yes" xml:space="preserve">
          <source>postgres-nginx-module</source>
          <target state="translated">postgres-nginx-module</target>
        </trans-unit>
        <trans-unit id="6d0d5876e6710ebb4f309b5af01090cb97381d06" translate="yes" xml:space="preserve">
          <source>print</source>
          <target state="translated">print</target>
        </trans-unit>
        <trans-unit id="63847b2d6190ca9f5ea3fdc74111a2f029b68d4a" translate="yes" xml:space="preserve">
          <source>rather than the original &lt;code&gt;&quot;hello&quot;&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1655af968944cb00df7acf9c88447a72068cddc" translate="yes" xml:space="preserve">
          <source>receive</source>
          <target state="translated">receive</target>
        </trans-unit>
        <trans-unit id="fb649a34b4c68bd6b713088832295ec7ad3b945e" translate="yes" xml:space="preserve">
          <source>receiveuntil</source>
          <target state="translated">receiveuntil</target>
        </trans-unit>
        <trans-unit id="a1c710c2b48500ad8ba110160c34595dcc448e11" translate="yes" xml:space="preserve">
          <source>redis: listening on the default port, 6379.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b978fe81f9833dd779ee503bf07b645a0ba7af0" translate="yes" xml:space="preserve">
          <source>regardless of the actual request query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="aeb74889ac047171b3fcfb7f68c9b13b916a948e" translate="yes" xml:space="preserve">
          <source>review and apply vadim-pavlov's patch for &lt;a href=&quot;#ngxlocationcapture&quot;&gt;ngx.location.capture&lt;/a&gt;'s &lt;code&gt;extra_headers&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07d2e9e5a57a09fa0d424572d02175caa6b514e" translate="yes" xml:space="preserve">
          <source>rewrite_by_lua</source>
          <target state="translated">rewrite_by_lua</target>
        </trans-unit>
        <trans-unit id="de507609041b67141f29d6a492aa3bb8ca175394" translate="yes" xml:space="preserve">
          <source>rewrite_by_lua_block</source>
          <target state="translated">rewrite_by_lua_block</target>
        </trans-unit>
        <trans-unit id="4c6db4199abe01ff538bea64ff1ed42356da2bc6" translate="yes" xml:space="preserve">
          <source>rewrite_by_lua_file</source>
          <target state="translated">rewrite_by_lua_file</target>
        </trans-unit>
        <trans-unit id="f2eb1503f25c553983a986fbc8f61578117c1d8b" translate="yes" xml:space="preserve">
          <source>rewrite_by_lua_no_postpone</source>
          <target state="translated">rewrite_by_lua_no_postpone</target>
        </trans-unit>
        <trans-unit id="2e2150107692512f7a1d8703bd9368d6c9448503" translate="yes" xml:space="preserve">
          <source>rpop</source>
          <target state="translated">rpop</target>
        </trans-unit>
        <trans-unit id="728495c88661a13dbac017f8d0b278ab6c2ef895" translate="yes" xml:space="preserve">
          <source>rpush</source>
          <target state="translated">rpush</target>
        </trans-unit>
        <trans-unit id="2b41061dad77cc27ce1f559fc71faa2a2da1b78d" translate="yes" xml:space="preserve">
          <source>safe_add</source>
          <target state="translated">safe_add</target>
        </trans-unit>
        <trans-unit id="983267a75b0051e6f48e072d7fd1cc3f43e348e8" translate="yes" xml:space="preserve">
          <source>safe_set</source>
          <target state="translated">safe_set</target>
        </trans-unit>
        <trans-unit id="37ed539c0cef13959abd980bebf30f4922f606e3" translate="yes" xml:space="preserve">
          <source>send</source>
          <target state="translated">send</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="0fa6bbbda1bcfc8393509eef0be602fa1a8215b1" translate="yes" xml:space="preserve">
          <source>set_by_lua</source>
          <target state="translated">set_by_lua</target>
        </trans-unit>
        <trans-unit id="845a1635041c44d81d9a6ab3ede8a05a8612ce5a" translate="yes" xml:space="preserve">
          <source>set_by_lua_block</source>
          <target state="translated">set_by_lua_block</target>
        </trans-unit>
        <trans-unit id="cdaded440dd96c8598f9deda8da0ae45ace1bc00" translate="yes" xml:space="preserve">
          <source>set_by_lua_file</source>
          <target state="translated">set_by_lua_file</target>
        </trans-unit>
        <trans-unit id="07e170526d18d919978eae425cb8673342c7ebc4" translate="yes" xml:space="preserve">
          <source>set_decode_base32</source>
          <target state="translated">set_decode_base32</target>
        </trans-unit>
        <trans-unit id="0a3ca50d74581c7b1ecbf0be63c0d0291223f156" translate="yes" xml:space="preserve">
          <source>set_decode_base64</source>
          <target state="translated">set_decode_base64</target>
        </trans-unit>
        <trans-unit id="3512e367d4d9ee7105db45f54a9a24f1090ae69c" translate="yes" xml:space="preserve">
          <source>set_decode_hex</source>
          <target state="translated">set_decode_hex</target>
        </trans-unit>
        <trans-unit id="f99ad35e589463a50f73893fee88cbc3e7305288" translate="yes" xml:space="preserve">
          <source>set_decrypt_session</source>
          <target state="translated">set_decrypt_session</target>
        </trans-unit>
        <trans-unit id="f7be445d9232d136d1f1a8f6f1ed45a5d4a36684" translate="yes" xml:space="preserve">
          <source>set_encode_base32</source>
          <target state="translated">set_encode_base32</target>
        </trans-unit>
        <trans-unit id="5f46862808000a0d7f7d7d19183b991f8321f132" translate="yes" xml:space="preserve">
          <source>set_encode_base64</source>
          <target state="translated">set_encode_base64</target>
        </trans-unit>
        <trans-unit id="7c06d3dd05664415b8d500571f4db1251efca2a6" translate="yes" xml:space="preserve">
          <source>set_encode_hex</source>
          <target state="translated">set_encode_hex</target>
        </trans-unit>
        <trans-unit id="1674303370a7e28b5bb66788853c53eb81c8dd9d" translate="yes" xml:space="preserve">
          <source>set_encrypt_session</source>
          <target state="translated">set_encrypt_session</target>
        </trans-unit>
        <trans-unit id="5ac15c777898148d6710110ba69baf985bbb4935" translate="yes" xml:space="preserve">
          <source>set_escape_uri</source>
          <target state="translated">set_escape_uri</target>
        </trans-unit>
        <trans-unit id="5db485756785117d7859d179aa629f6e7e92f325" translate="yes" xml:space="preserve">
          <source>set_md5</source>
          <target state="translated">set_md5</target>
        </trans-unit>
        <trans-unit id="cfde2698f89ba2806a816ef1a07ea7f6401a87e0" translate="yes" xml:space="preserve">
          <source>set_quote_json_str</source>
          <target state="translated">set_quote_json_str</target>
        </trans-unit>
        <trans-unit id="973e7e0c0381f644f16f68482b1a35cd1774c505" translate="yes" xml:space="preserve">
          <source>set_quote_pgsql_str</source>
          <target state="translated">set_quote_pgsql_str</target>
        </trans-unit>
        <trans-unit id="05b1f41a6cfcd5a003d9fc0128913d0b6592a2ec" translate="yes" xml:space="preserve">
          <source>set_quote_sql_str</source>
          <target state="translated">set_quote_sql_str</target>
        </trans-unit>
        <trans-unit id="8f3060fc4741a4402382439546c88cf965d1ca07" translate="yes" xml:space="preserve">
          <source>set_sha1</source>
          <target state="translated">set_sha1</target>
        </trans-unit>
        <trans-unit id="cfcd67708ab82be572523b2f74aa72f1cb53b8e1" translate="yes" xml:space="preserve">
          <source>set_unescape_uri</source>
          <target state="translated">set_unescape_uri</target>
        </trans-unit>
        <trans-unit id="d70fbeeae875517c439178d2e43c8cdd593332c3" translate="yes" xml:space="preserve">
          <source>setkeepalive</source>
          <target state="translated">setkeepalive</target>
        </trans-unit>
        <trans-unit id="727eb69633673afa61898f47afd32bd5df1da49b" translate="yes" xml:space="preserve">
          <source>setoption</source>
          <target state="translated">setoption</target>
        </trans-unit>
        <trans-unit id="35c2c212c792b26cb3e6cf71606cc7b967382e4f" translate="yes" xml:space="preserve">
          <source>setpeername</source>
          <target state="translated">setpeername</target>
        </trans-unit>
        <trans-unit id="c72bedb1e4ee72bceb85c99941aa6068a5ccfc34" translate="yes" xml:space="preserve">
          <source>settimeout</source>
          <target state="translated">settimeout</target>
        </trans-unit>
        <trans-unit id="69cde7f1fd77de0764c3a055c1da3acb036c23dc" translate="yes" xml:space="preserve">
          <source>settimeouts</source>
          <target state="translated">settimeouts</target>
        </trans-unit>
        <trans-unit id="7ec5888b8f9f0b5efe1e27f30e7d8dc363edf97d" translate="yes" xml:space="preserve">
          <source>shm: implement a &quot;shared queue API&quot; to complement the existing &lt;a href=&quot;#lua_shared_dict&quot;&gt;shared dict&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8334436def5a6dbd1777d0344429d6132e68e274" translate="yes" xml:space="preserve">
          <source>some Lua global variable references may include typing errors which make such difficult to debug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c173ccd27bc82e41d221496f26899e6608bbc0c6" translate="yes" xml:space="preserve">
          <source>ssl_certificate_by_lua_block</source>
          <target state="translated">ssl_certificate_by_lua_block</target>
        </trans-unit>
        <trans-unit id="72bfe60daf37e69f0090e5526659b6c116307435" translate="yes" xml:space="preserve">
          <source>ssl_certificate_by_lua_file</source>
          <target state="translated">ssl_certificate_by_lua_file</target>
        </trans-unit>
        <trans-unit id="c8cdd0666f5e05d972c50f361cf355a7b9cc60ab" translate="yes" xml:space="preserve">
          <source>ssl_session_fetch_by_lua_block</source>
          <target state="translated">ssl_session_fetch_by_lua_block</target>
        </trans-unit>
        <trans-unit id="bae86602eaa66537c3039b26f709b8b410517e6a" translate="yes" xml:space="preserve">
          <source>ssl_session_fetch_by_lua_file</source>
          <target state="translated">ssl_session_fetch_by_lua_file</target>
        </trans-unit>
        <trans-unit id="ba33c836c6cb512718b9d5eb4ff3e54eb5bb5e1f" translate="yes" xml:space="preserve">
          <source>ssl_session_store_by_lua_block</source>
          <target state="translated">ssl_session_store_by_lua_block</target>
        </trans-unit>
        <trans-unit id="164b3a4478d10480288cfd820eb6d84904719ab2" translate="yes" xml:space="preserve">
          <source>ssl_session_store_by_lua_file</source>
          <target state="translated">ssl_session_store_by_lua_file</target>
        </trans-unit>
        <trans-unit id="33c616c42f0e8916e82c92101b18760918bd7c20" translate="yes" xml:space="preserve">
          <source>sslhandshake</source>
          <target state="translated">sslhandshake</target>
        </trans-unit>
        <trans-unit id="1208a56d3568e10068b11d51110a1e1721d73743" translate="yes" xml:space="preserve">
          <source>tcpsock:close</source>
          <target state="translated">tcpsock:close</target>
        </trans-unit>
        <trans-unit id="d42b6dc77f8e4fa7dfd01efd7ae6340288241759" translate="yes" xml:space="preserve">
          <source>tcpsock:connect</source>
          <target state="translated">tcpsock:connect</target>
        </trans-unit>
        <trans-unit id="e0ac52881eaea20cacbc423a2baf672b92a84d19" translate="yes" xml:space="preserve">
          <source>tcpsock:getreusedtimes</source>
          <target state="translated">tcpsock:getreusedtimes</target>
        </trans-unit>
        <trans-unit id="bd1cd1c94f3b3d85b1928836269f14ea0fdc497e" translate="yes" xml:space="preserve">
          <source>tcpsock:receive</source>
          <target state="translated">tcpsock:receive</target>
        </trans-unit>
        <trans-unit id="4251f48da6173e5d4fa96db041594f46a46e8dc8" translate="yes" xml:space="preserve">
          <source>tcpsock:receiveuntil</source>
          <target state="translated">tcpsock:receiveuntil</target>
        </trans-unit>
        <trans-unit id="34f70a7562efd1029eed5b09ed9eeb8551cb06cc" translate="yes" xml:space="preserve">
          <source>tcpsock:send</source>
          <target state="translated">tcpsock:send</target>
        </trans-unit>
        <trans-unit id="0a6eda40d769cc9414d6e7371dc2fc962b7a62bc" translate="yes" xml:space="preserve">
          <source>tcpsock:setkeepalive</source>
          <target state="translated">tcpsock:setkeepalive</target>
        </trans-unit>
        <trans-unit id="f138f13e6ca75aa5703a9e5444d2826c24b8cb1e" translate="yes" xml:space="preserve">
          <source>tcpsock:setoption</source>
          <target state="translated">tcpsock:setoption</target>
        </trans-unit>
        <trans-unit id="1dd61d53f3291c62fb99e0cc52cf290e19d6c6f1" translate="yes" xml:space="preserve">
          <source>tcpsock:settimeout</source>
          <target state="translated">tcpsock:settimeout</target>
        </trans-unit>
        <trans-unit id="5b23bd0f7277df31d87cd962b673ee7916a9c932" translate="yes" xml:space="preserve">
          <source>tcpsock:settimeouts</source>
          <target state="translated">tcpsock:settimeouts</target>
        </trans-unit>
        <trans-unit id="2d3ac7362f48edd508b955f22b37f56822d9bfd7" translate="yes" xml:space="preserve">
          <source>tcpsock:sslhandshake</source>
          <target state="translated">tcpsock:sslhandshake</target>
        </trans-unit>
        <trans-unit id="056b9d5affb49e5134c8ec57f25ea602e0c2afb0" translate="yes" xml:space="preserve">
          <source>that is, this method will escape argument keys and values according to URI rules and concatenate them together into a complete query string. The format for the Lua table passed as the &lt;code&gt;args&lt;/code&gt; argument is identical to the format used in the &lt;a href=&quot;#ngxencode_args&quot;&gt;ngx.encode_args&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95772023145059d68f8f73c4c5d9b4685a919a25" translate="yes" xml:space="preserve">
          <source>that writes out &lt;code&gt;88&lt;/code&gt;, the sum of &lt;code&gt;32&lt;/code&gt; and &lt;code&gt;56&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e923dba6bcd9de80383a297e41b68996a9573032" translate="yes" xml:space="preserve">
          <source>the &quot;entry thread&quot; terminates with a Lua error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4617d6a0c05a420a91310882f5c743afb8a61a2e" translate="yes" xml:space="preserve">
          <source>the Lua cosocket object value gets collected by the Lua GC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab112d55164e4303b9ea27d16f1b657c79a52bc5" translate="yes" xml:space="preserve">
          <source>the current &quot;light thread&quot; already terminates (either successfully or with an error),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c62afe8a38ceadb9d6493147401bef264c21825" translate="yes" xml:space="preserve">
          <source>the current request handler completes, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b527babc9c580a95016aa47752366deed00a7e7" translate="yes" xml:space="preserve">
          <source>the misuse of Lua globals has detrimental side effects on concurrent requests when such variables should instead be local in scope,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53543f253256a06466a5af5cfa7555c12423f50" translate="yes" xml:space="preserve">
          <source>the request body has been read into disk temporary files,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f7944aecf56fa75f9c9df123ca67fdb89e4f0b" translate="yes" xml:space="preserve">
          <source>the request body has not been read,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fce008ca6bfca5e71f476046b05bfb0d1d08aad" translate="yes" xml:space="preserve">
          <source>the value of &lt;code&gt;ngx.req.get_headers()[&quot;Foo&quot;]&lt;/code&gt; will be a Lua (array) table such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e0a23421887de144fe1086491322617d63c42f" translate="yes" xml:space="preserve">
          <source>then you can link the &lt;code&gt;myluafiles&lt;/code&gt; archive as a whole to your nginx executable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ac89ed0ae82a67e41510a03f385983eb8e8875" translate="yes" xml:space="preserve">
          <source>then you need to rename the &lt;code&gt;foo.lua&lt;/code&gt; file to &lt;code&gt;resty_foo.lua&lt;/code&gt; before compiling it down to a &lt;code&gt;.o&lt;/code&gt; file with the &lt;code&gt;luajit&lt;/code&gt; command-line utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e0ddf7ffd111405cde5e08e1bcba2c630c88fc" translate="yes" xml:space="preserve">
          <source>this directive does not support extra arguments after the Lua script as in &lt;a href=&quot;#set_by_lua&quot;&gt;set_by_lua&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb7e68868e272c28ed43ecff521c4b35b1dbacc" translate="yes" xml:space="preserve">
          <source>this directive inlines the Lua source directly inside a pair of curly braces (&lt;code&gt;{}&lt;/code&gt;) instead of in an NGINX string literal (which requires special character escaping), and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b7b07b61cf7a7e28c8c3609fa194546c62fb1d" translate="yes" xml:space="preserve">
          <source>timer will be created every &lt;code&gt;delay&lt;/code&gt; seconds until the current Nginx worker process starts exiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f36ca861be69bc63ea6751f27c9147ae27c31d" translate="yes" xml:space="preserve">
          <source>to be returned when reading &lt;code&gt;ngx.header.Foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5263c8ea4d774435db80fc53b9f3671d29abb076" translate="yes" xml:space="preserve">
          <source>to prevent (temporary) memory leaking within the current request's lifetime. Another way of caching the result is to use the &lt;a href=&quot;#ngxctx&quot;&gt;ngx.ctx&lt;/a&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e33266830e76602baef9cc3b70445f3e0fe8b3f" translate="yes" xml:space="preserve">
          <source>ttl</source>
          <target state="translated">ttl</target>
        </trans-unit>
        <trans-unit id="2842d19ba3e63ed13125fe98d238a025894214fb" translate="yes" xml:space="preserve">
          <source>udpsock:close</source>
          <target state="translated">udpsock:close</target>
        </trans-unit>
        <trans-unit id="3844df08601d10dd8ef1feb8b569bd6aac173a6b" translate="yes" xml:space="preserve">
          <source>udpsock:receive</source>
          <target state="translated">udpsock:receive</target>
        </trans-unit>
        <trans-unit id="eb4b4fdc532c4945d7c0691724500508d337d9b9" translate="yes" xml:space="preserve">
          <source>udpsock:send</source>
          <target state="translated">udpsock:send</target>
        </trans-unit>
        <trans-unit id="c3052e9ccfc7864e9b25494bcf50ceca793c248c" translate="yes" xml:space="preserve">
          <source>udpsock:setpeername</source>
          <target state="translated">udpsock:setpeername</target>
        </trans-unit>
        <trans-unit id="ffddb1ac36fc9c37a05c9834196eb76a2e37020a" translate="yes" xml:space="preserve">
          <source>udpsock:settimeout</source>
          <target state="translated">udpsock:settimeout</target>
        </trans-unit>
        <trans-unit id="b3d9fddb78f7fddd68b172f95efb97208b4b93a0" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;ngx_hash_t&lt;/code&gt; to optimize the built-in header look-up process for &lt;a href=&quot;#ngxreqset_header&quot;&gt;ngx.req.set_header&lt;/a&gt;, &lt;a href=&quot;#ngxheaderheader&quot;&gt;ngx.header.HEADER&lt;/a&gt;, and etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30079cac07392d8577790a4ec459b27ba1c7b20" translate="yes" xml:space="preserve">
          <source>using Lua to implement advanced caching mechanism for Nginx's subrequests and arbitrary locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a728d97d235aba8ffad9f33a0b3ac36f12f0ca4a" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$0&lt;/code&gt; referring to the whole substring matched by the pattern and &lt;code&gt;$1&lt;/code&gt; referring to the first parenthesized capturing substring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61b1c7fbd22496c04bfb67d0a4af3e61fc48c0f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;/path/to/lib&lt;/code&gt; is the path of the directory containing the &lt;code&gt;libmyluafiles.a&lt;/code&gt; file. It should be noted that the linker option &lt;code&gt;--whole-archive&lt;/code&gt; is required here because otherwise our archive will be skipped because no symbols in our archive are mentioned in the main parts of the nginx executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f611a88fafc785662f4c8f3f58385eccb255a952" translate="yes" xml:space="preserve">
          <source>where in the latter case, this method will escape argument keys and values according to the URI escaping rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d520bd48adb610a364031fae267bc856cba61030" translate="yes" xml:space="preserve">
          <source>whether the current request body is already larger than the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size&quot;&gt;client_body_buffer_size&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c6ac4120301d7049af98011b0e572414db64b0" translate="yes" xml:space="preserve">
          <source>which is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2ed58b4dae4a231d650f38f1ce68d5651ff36c" translate="yes" xml:space="preserve">
          <source>which is functionally equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46200cef96c0961d87e6a88c9a425a6d717be8f2" translate="yes" xml:space="preserve">
          <source>which will result in a query string like &lt;code&gt;a=3&amp;amp;b=5&amp;amp;b=6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="917ee86398faff0a7c5d2dfa164fcca29f292612" translate="yes" xml:space="preserve">
          <source>will not work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9bfc63b82056a09850870ebe213acc89605927" translate="yes" xml:space="preserve">
          <source>will produce two new request headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35769f887dd5465ff95016a2677fc83c59eed11" translate="yes" xml:space="preserve">
          <source>will result in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b07468e07aae42183959d404cba0617c29e6ae" translate="yes" xml:space="preserve">
          <source>will yield</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219e68a29cda73c921f1171d1c84ef1037462b7f" translate="yes" xml:space="preserve">
          <source>will yield the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b0dddd930529e92c358b4064a2785ef70b93ab" translate="yes" xml:space="preserve">
          <source>will yield the response body like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c475a60ccfd5eb49061a276875f9aa016aef39b" translate="yes" xml:space="preserve">
          <source>will yield:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb0f5b1f639a3886e3180c47fe86c3a6a263842" translate="yes" xml:space="preserve">
          <source>yields</source>
          <target state="translated">yields</target>
        </trans-unit>
        <trans-unit id="0c6a74f768bbdfb3a090fb3dd3d885a9f500fb09" translate="yes" xml:space="preserve">
          <source>yields the output</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
