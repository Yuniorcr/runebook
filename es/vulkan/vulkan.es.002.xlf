<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="vulkan">
    <body>
      <group id="vulkan">
        <trans-unit id="1b9199925d9c49a20d2818f20a1f01da3a4d3add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorAttachmentCount&lt;/code&gt; is the number of color attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2a06d8394900a57b5ee6b6d5db553676115654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorAttachmentCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxColorAttachments&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6e9671163179cca68bc6064f589c410ec3c08f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorBlendOp&lt;/code&gt; selects which blend operation is used to calculate the RGB values to write to the color attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085abfa66fbd4af75163908113fcf3730855e0d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorBlendOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkBlendOp&quot;&gt;VkBlendOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6669b8c80a8d77c1fbe04cbea6ef97807601b451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorWriteMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkColorComponentFlagBits&quot;&gt;VkColorComponentFlagBits&lt;/a&gt; specifying which of the R, G, B, and/or A components are enabled for writing, as described for the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#framebuffer-color-write-mask&quot;&gt;Color Write Mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cf5fd34a8099fd749702b2118ef3abe0727912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;colorWriteMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkColorComponentFlagBits&quot;&gt;VkColorComponentFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4967ea81e884cf70c61169ea30980f631e6ca15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is a handle to a primary command buffer that the secondary command buffers are executed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fee0f2071687f7357a3f2572e2f4226ab42cc44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer in which the push constant update will be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374fbd70264c1c774e7415ffffee240bda8e88ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer in which to end the current render pass instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f158c1a945d8656bc47cc875383172cc60734bf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer in which to record the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ce387488e2d31af8e29da8b508d5cd2b3c4edb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer into which the command is recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a54e7a2604aec44e4fcaeaf40f850ce6fb958dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer into which the command will be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46a0886db5539b3ddf24f92af8fad7b4033a8da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer into which this command will be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc16d7c1d54454081a7eaad31f23f98b4e25c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer that the descriptor sets will be bound to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e35e8d086b0de84f9bc53635d57fa3bad25ecca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer that the pipeline will be bound to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec7b1964d6827f566a52d8a21e00408f80a9584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer to complete recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4155cbc64cb2fff18f13fe199fd0c2c367898dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the command buffer to reset. The command buffer &lt;strong&gt;can&lt;/strong&gt; be in any state other than &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending&lt;/a&gt;, and is moved into the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;initial state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2968459817c0f84b10cb98c22a6da9bc3ca32b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt; is the handle of the command buffer which is to be put in the recording state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97d2f0bd1e1e68ef51fcd9f2cca0219dfffbadc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a primary &lt;code&gt;VkCommandBuffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f31c9f34aacefbb9a7726b99369d080345eff5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkCommandBuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25991bf4dc2daa646aa097d2d371db99cf52a1ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;#commandbuffers-lifecycle&quot;&gt;recording state&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10e5f9c3778b736969c204db527bc35559c8315" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;recording state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a95db8b82878126d23e9a157049a4eb6d043734" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated from a pool that was created with the &lt;code&gt;VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6a5f0c1176e7b08195e7d1f5dbba0fa457ea6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated with a &lt;code&gt;level&lt;/code&gt; of &lt;code&gt;VK_COMMAND_BUFFER_LEVEL_PRIMARY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca6c252a925be7fe705bf356a38e3ea181639d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;pending state&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de58b7359d830a5e6ff94b936063ae543ae5ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#commandbuffers-lifecycle&quot;&gt;recording or pending state&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aade982c52fd92edbae57a5467c6521174ff13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBufferCount&lt;/code&gt; is the length of the &lt;code&gt;pCommandBuffers&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd4aa2fefb8f345b4cd26c0517b661c042d6a1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBufferCount&lt;/code&gt; is the number of command buffers to allocate from the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5723a024166f2da357bc24ce14696af5db84789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBufferCount&lt;/code&gt; is the number of command buffers to execute in the batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90ecbb5fbb9a0b5ebe3abcc8c4e9898755a9430" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandBufferCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ef99dc25669fe9c8ef75c06e2f57fd27884ae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt; is the command pool from which the command buffers are allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a3fc8f1903188ae83e84e640107982078c6d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt; is the command pool from which the command buffers were allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04488257ac360e82ecd7e2f704d07a1c682f28f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt; is the command pool to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c212541272b1a287ba26089ed39cfaa755caa07b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt; is the handle of the command pool to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b39ce46382f589ef32cfbe23f2d6b433ce86508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkCommandPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cb6923d3b4703289a1c7a38f9ad2ca57bdf625" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681bfde1906a6554e5c9195a52a28d1ab2f1a9b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareEnable&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt; to enable comparison against a reference value during lookups, or &lt;code&gt;VK_FALSE&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4af07a51cd0b6e7b518afb502627957b7b2e94e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareEnable&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_FALSE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5329c069281f2babac0e3d7f7988ec3ab90022e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareMask&lt;/code&gt; is the new value to use as the stencil compare mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c475e576811f4ed699536a734da68aec87f24270" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareMask&lt;/code&gt; selects the bits of the unsigned integer stencil values participating in the stencil test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f269bcb30f64b49b570c9b3d0870d5763da1ce64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareOp&lt;/code&gt; is a &lt;a href=&quot;#VkCompareOp&quot;&gt;VkCompareOp&lt;/a&gt; value specifying the comparison function to apply to fetched data before filtering as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#textures-depth-compare-operation&quot;&gt;Depth Compare Operation&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b500c4bf11db5cb2e4ab88caa3d7b9872d7b9182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareOp&lt;/code&gt; is a &lt;a href=&quot;#VkCompareOp&quot;&gt;VkCompareOp&lt;/a&gt; value specifying the comparison operator used in the stencil test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63acfc5150e92e645769e7aa77f08d4912cd6528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkCompareOp&quot;&gt;VkCompareOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae9493102fe1d375afddaa8e1d7c5c89b11f49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;components&lt;/code&gt; is a &lt;a href=&quot;#VkComponentMapping&quot;&gt;VkComponentMapping&lt;/a&gt; specifies a remapping of color components (or of depth or stencil components after they have been converted into color components).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6212ae64212e3e086f86bad0458fdd78cb0811" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;components&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkComponentMapping&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cab61c43469430ccd450d121642b9614b9dc5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;constantID&lt;/code&gt; is the ID of the specialization constant in SPIR-V.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d12c10611412cf851db030da0c6e13c8f593e89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contents&lt;/code&gt; is a &lt;a href=&quot;#VkSubpassContents&quot;&gt;VkSubpassContents&lt;/a&gt; value specifying how the commands in the first subpass will be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4442e6341344caeacc1033995411201f06805f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contents&lt;/code&gt; specifies how the commands in the next subpass will be provided, in the same fashion as the corresponding parameter of &lt;a href=&quot;#vkCmdBeginRenderPass&quot;&gt;vkCmdBeginRenderPass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a5f616eb51b6f2a417077fbb3c26d6e05e885e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contents&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkSubpassContents&quot;&gt;VkSubpassContents&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af851475a280dd6f7f498b925f3cd96f6191c267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createInfoCount&lt;/code&gt; is the length of the &lt;code&gt;pCreateInfos&lt;/code&gt; and &lt;code&gt;pPipelines&lt;/code&gt; arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526be3fbb64e18a9626b77a1fe2367fed1b15ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createInfoCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0fe67d875a309a9e6f53193828edf55431eb88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cullMode&lt;/code&gt; is the triangle facing direction used for primitive culling. See &lt;a href=&quot;#VkCullModeFlagBits&quot;&gt;VkCullModeFlagBits&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe0f7643bd10db7027119cba1be9fbf2d8796d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cullMode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkCullModeFlagBits&quot;&gt;VkCullModeFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31498d25d5c875b132fd1b1a723f8c307a6f243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; is the 4-byte word written repeatedly to the buffer to fill &lt;code&gt;size&lt;/code&gt; bytes of data. The data word is written to memory according to the host endianness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd5ce3a2131a4bf72fc4c84239089cee888b6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt; is the byte size of the &lt;code&gt;pData&lt;/code&gt; buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1892030e3c9f3106adb6bb9d8b631843baf36a32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt; is the number of bytes to update, and &lt;strong&gt;must&lt;/strong&gt; be a multiple of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a357a099e541f989df6cc0f4a316994333a97d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt; is the size in bytes of the buffer pointed to by &lt;code&gt;pData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd825b056a89cb6129ca8d770c6aca375c4a50d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753df5093bed8071385c310d9002497debfcfaea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b860e091f239d10b1f867c38247f175f02e8988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be large enough to contain the result of each query, as described &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-memorylayout&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3374826ade26324a682b938f6952a71da61cd21c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to 65536 bytes. For larger updates, applications &lt;strong&gt;can&lt;/strong&gt; use buffer to buffer &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#copies-buffers&quot;&gt;copies&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c7d760d7abb2d10a820878a2789169fb3ce7ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;65536&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9766739713ebcd07e0131019685a8602b062d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to the size of &lt;code&gt;dstBuffer&lt;/code&gt; minus &lt;code&gt;dstOffset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9a7fbc804f54171e381a327c7b46576c58b9e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dependencyCount&lt;/code&gt; is the number of dependencies between pairs of subpasses, or zero indicating no dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fea79f51f90711eb4b3e3bee18062d4706d9e1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dependencyFlags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkDependencyFlagBits&quot;&gt;VkDependencyFlagBits&lt;/a&gt; specifying how execution and memory dependencies are formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c0a06e160b4338ad72765f3d8fac5fd82e2845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dependencyFlags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkDependencyFlagBits&quot;&gt;VkDependencyFlagBits&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c249cb00c56e76302ea4c6a7b9e3393021bbc2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dependencyFlags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkDependencyFlagBits&quot;&gt;VkDependencyFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab78aaa16125666c9e1df10f77df6f4942e18be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b6f727a1ae8b56cd5d56b2874d198703e0f7b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad222b3126aaf41d5f68447e371315141fd4c4c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; = ci.&lt;code&gt;extent.depth&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d697ece821d8cb79c15f592f87988940afa06f93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; is the clear value for the depth aspect of the depth/stencil attachment. It is a floating-point value which is automatically converted to the attachment&amp;rsquo;s format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092d21f799c1037401584fdc2ee12140f9b91130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; is the depth of the extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b7928a684b202081a4972326da7ee11bd69f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt; of a &lt;a href=&quot;#VkExtent3D&quot;&gt;VkExtent3D&lt;/a&gt; parameter &lt;strong&gt;must&lt;/strong&gt; be an integer multiple of A&lt;sub&gt;z&lt;/sub&gt;, or else &lt;code&gt;z&lt;/code&gt; + &lt;code&gt;depth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; equal the depth of the image subresource corresponding to the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528abb949170943e6b330ce09ab6bb63a922d779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f26de2b3e7332a3d1d630a9fa55438d04ccfc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasClamp&lt;/code&gt; indicates whether depth bias clamping is supported. If this feature is not enabled, the &lt;code&gt;depthBiasClamp&lt;/code&gt; member of the &lt;code&gt;VkPipelineRasterizationStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to 0.0 unless the &lt;code&gt;VK_DYNAMIC_STATE_DEPTH_BIAS&lt;/code&gt; dynamic state is enabled, and the &lt;code&gt;depthBiasClamp&lt;/code&gt; parameter to &lt;code&gt;vkCmdSetDepthBias&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be set to 0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5be0aa0771ed9af934b0ec8a23823e4c4dc2718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasClamp&lt;/code&gt; is the maximum (or minimum) depth bias of a fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfa305c2281d23def6eeb3e71441aa7d6e02b7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasConstantFactor&lt;/code&gt; is a scalar factor controlling the constant depth value added to each fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0289746a443065363684ed4a84b9f7aabde8f5b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasEnable&lt;/code&gt; controls whether to bias fragment depth values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8347a1537dc8299171e08f507401205fde6c27fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasSlopeFactor&lt;/code&gt; is a scalar factor applied to a fragment&amp;rsquo;s slope in depth bias calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b47014f40f62ce5b2d6ca3f3e2c14edee294f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBiasSlopeFactor&lt;/code&gt; scales the maximum depth slope of the polygon, and &lt;code&gt;depthBiasConstantFactor&lt;/code&gt; scales an implementation-dependent constant that relates to the usable resolution of the depth buffer. The resulting values are summed to produce the depth bias value which is then clamped to a minimum or maximum value specified by &lt;code&gt;depthBiasClamp&lt;/code&gt;. &lt;code&gt;depthBiasSlopeFactor&lt;/code&gt;, &lt;code&gt;depthBiasConstantFactor&lt;/code&gt;, and &lt;code&gt;depthBiasClamp&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; each be positive, negative, or zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c26c1937e810ed347eefda3088e6c41cc6db331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBounds&lt;/code&gt; indicates whether depth bounds tests are supported. If this feature is not enabled, the &lt;code&gt;depthBoundsTestEnable&lt;/code&gt; member of the &lt;code&gt;VkPipelineDepthStencilStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;VK_FALSE&lt;/code&gt;. When &lt;code&gt;depthBoundsTestEnable&lt;/code&gt; is set to &lt;code&gt;VK_FALSE&lt;/code&gt;, the &lt;code&gt;minDepthBounds&lt;/code&gt; and &lt;code&gt;maxDepthBounds&lt;/code&gt; members of the &lt;code&gt;VkPipelineDepthStencilStateCreateInfo&lt;/code&gt; structure are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a5d410322644bd3780e17dc58a844256948ed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthBoundsTestEnable&lt;/code&gt; controls whether &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-dbt&quot;&gt;depth bounds testing&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7b6b0e53898135b58e8e87257461b0e638ce36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthClamp&lt;/code&gt; indicates whether depth clamping is supported. If this feature is not enabled, the &lt;code&gt;depthClampEnable&lt;/code&gt; member of the &lt;code&gt;VkPipelineRasterizationStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;VK_FALSE&lt;/code&gt;. Otherwise, setting &lt;code&gt;depthClampEnable&lt;/code&gt; to &lt;code&gt;VK_TRUE&lt;/code&gt; will enable depth clamping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8f70d807f1383c545c91862e69cf449f4972d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthClampEnable&lt;/code&gt; controls whether to clamp the fragment&amp;rsquo;s depth values instead of clipping primitives to the z planes of the frustum, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#vertexpostproc-clipping&quot;&gt;Primitive Clipping&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d726ff6468cb226f643c5953f4d3067547d014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthCompareOp&lt;/code&gt; is the comparison operator used in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-depth&quot;&gt;depth test&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05eabe02b69eb220f0e094e60f03991aa8aea36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthCompareOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkCompareOp&quot;&gt;VkCompareOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a806180090627934afeef186d6b8570519b20ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthFailOp&lt;/code&gt; is a &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value specifying the action performed on samples that pass the stencil test and fail the depth test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18c3191de9e3ffc2fb0b663718ba2e278a002b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthFailOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040fead8026f41e0bfd6a960b248c95c2da27cc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthPitch&lt;/code&gt; describes the number of bytes between each slice of 3D image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dd9b9d6d50c67094f62ce24fa0bd5eba269bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthStencil&lt;/code&gt; specifies the depth and stencil clear values to use when clearing a depth/stencil image or attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91843585faf99c3bfc94b182f1e87b260d06e4ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthStencil&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkClearDepthStencilValue&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923a741db8eaa0bed2114c353b0290d9b7da53bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthTestEnable&lt;/code&gt; controls whether &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-depth&quot;&gt;depth testing&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872063b8f8a2ca4d33eff31b32457d02aaead177" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depthWriteEnable&lt;/code&gt; controls whether &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-depth-write&quot;&gt;depth writes&lt;/a&gt; are enabled when &lt;code&gt;depthTestEnable&lt;/code&gt; is &lt;code&gt;VK_TRUE&lt;/code&gt;. Depth writes are always disabled when &lt;code&gt;depthTestEnable&lt;/code&gt; is &lt;code&gt;VK_FALSE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277aea7e1868230db793a2f09db152e52d08e5fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt; is a null-terminated UTF-8 string providing additional details that &lt;strong&gt;can&lt;/strong&gt; be used by the application to identify the layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa4b9def068bb3ba17fa4f73c4227297e119116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCopyCount&lt;/code&gt; is the number of elements in the &lt;code&gt;pDescriptorCopies&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fffa66adf2de99207354af62914f57846cc4b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCount&lt;/code&gt; is the number of descriptors contained in the binding, accessed in a shader as an array. If &lt;code&gt;descriptorCount&lt;/code&gt; is zero this binding entry is reserved and the resource &lt;strong&gt;must&lt;/strong&gt; not be accessed from any stage via this binding within any pipeline using the set layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cf2f24af4c212e03cbaf486bc97b49cd0fe2eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCount&lt;/code&gt; is the number of descriptors of that type to allocate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a328f94a25e3348f76ec4e0f58e0d8abf03cb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCount&lt;/code&gt; is the number of descriptors to copy from the source to destination. If &lt;code&gt;descriptorCount&lt;/code&gt; is greater than the number of remaining array elements in the source or destination binding, those affect consecutive bindings in a manner similar to &lt;a href=&quot;#VkWriteDescriptorSet&quot;&gt;VkWriteDescriptorSet&lt;/a&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3557c0943ca10690ea2ebc79c094a20ce6ad36f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCount&lt;/code&gt; is the number of descriptors to update (the number of elements in &lt;code&gt;pImageInfo&lt;/code&gt;, &lt;code&gt;pBufferInfo&lt;/code&gt;, or &lt;code&gt;pTexelBufferView&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4606706f098615ff16668d501c9329068543e406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690bca91fd2e192d440ef546b58bf1c73ebb2153" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt; is the descriptor pool from which the descriptor sets were allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1327b8fde2ada250f36bbcf8ac235898eb0eec7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt; is the descriptor pool to be reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefc1c646d7d2e0ff224df2d9d78dbc67aac618b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt; is the descriptor pool to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689815052f48800a2470780c7d191952e7d52c43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt; is the pool which the sets will be allocated from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0d28055ea5c0956cd3390fec703d3474dabc6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDescriptorPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85002c44575c1abb5b5e7f71e0de52a408284f45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with the &lt;code&gt;VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT&lt;/code&gt; flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a877d76b2608a9f391192e54d65fab031e43261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e135225c6ae3ced1d98e470d9be20459109fd540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have enough free descriptor capacity remaining to allocate the descriptor sets of the specified layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e951f3526296fa51755cea7af4be7e642b6381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorSetCount&lt;/code&gt; determines the number of descriptor sets to be allocated from the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e570ca5ae1013768d429d0975f7c6691eb7a7c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorSetCount&lt;/code&gt; is the number of elements in the &lt;code&gt;pDescriptorSets&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02acffddf149c77939304808cbe499a78aa546d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorSetCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0525ac52fbb931693ca38ff0c949b9201fbcc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorSetCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be greater than the number of sets that are currently available for allocation in &lt;code&gt;descriptorPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8fa3e2d66ea691a1e65b753522ba36bd9621ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorSetLayout&lt;/code&gt; is the descriptor set layout to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd606af52ec321d66bd1e09b9e97ebade9024a64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorType&lt;/code&gt; is a &lt;a href=&quot;#VkDescriptorType&quot;&gt;VkDescriptorType&lt;/a&gt; specifying the type of each descriptor in &lt;code&gt;pImageInfo&lt;/code&gt;, &lt;code&gt;pBufferInfo&lt;/code&gt;, or &lt;code&gt;pTexelBufferView&lt;/code&gt;, as described below. It &lt;strong&gt;must&lt;/strong&gt; be the same type as that specified in &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; for &lt;code&gt;dstSet&lt;/code&gt; at &lt;code&gt;dstBinding&lt;/code&gt;. The type of the descriptor also controls which array the descriptors are taken from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe761f0e7e129958ce2ea11a7dd7a412fbaa4f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorType&lt;/code&gt; is a &lt;a href=&quot;#VkDescriptorType&quot;&gt;VkDescriptorType&lt;/a&gt; specifying which type of resource descriptors are used for this binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4f274131a3129b51407994ad986f38fc31d095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkDescriptorType&quot;&gt;VkDescriptorType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68672394743ef4855c307991bfe1af9ad931482" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; match the type of &lt;code&gt;dstBinding&lt;/code&gt; within &lt;code&gt;dstSet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a42a43b9191b5cad0d3a777239dad39bcb84c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptorWriteCount&lt;/code&gt; is the number of elements in the &lt;code&gt;pDescriptorWrites&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0f00cbe8d25ec16385bf2e312a693530943aa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the buffer object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e347b92dcb44b4c5b2a944a07be6ba9407c6f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the buffer view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17abd09f9ff3a176987c1ae294ab2552a490eae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the command pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6269bf3694bad720d4c3e50c8e3994ebf29b757f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the compute pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dccc7047a9dd5b8efd00d055e2fa750f5a810eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the descriptor pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c5ca0800de3ef14a938777e125d512c55fc858" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the descriptor set layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180eecee7593cd00606f9b56e80621a25221ff93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbe98c181dbfe506e3ed3116bac06d0ee0fc434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the fence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2f4f3a81675955a923a348ba1a04efd3edaf3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the framebuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6099a8d5dfefd1a86a0df70904b479ce829e1723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the graphics pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0879aaec305214249ef767966b9c98be31ee15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the image view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b58cf8cab654d26016b1c2b6b01fdb961e4b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39afd552f7e2e9619910460ec40b8ed63791b37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the pipeline cache object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38870b8465b18ef7d3cb12fc42063248d06cbbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the pipeline layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59197053dcff1800251dd0492d8c25a6a99f75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the query pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7845723ac7bbef61d0f0ebb0fe975870ccdadd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2153fcc17aed03adec70670523d34202867b99bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the sampler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2faf6d14a68fce06ace636a14520b2fdf40b7a3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf233d9f67e0eef68afab78a400911c053e0eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that creates the shader module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fffe71f4970d20fdbce192c781d7c2d566946cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the buffer view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f0e0b8daa73e28052c51437cbbd6f23b8a528f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7c9c530ec162f3b5b74004fdf9611e4f9347b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the command pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3429c8e4767021ce24e4aac8dd5dc91bcffaabba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the descriptor pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6010bf28c54ae2d1e05ebdb51ddcbe108ab03969" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the descriptor set layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a1827acfcbc1f49c19e8b5ddd3be158555e017" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea010b45e5be4b9f53d303c84e66174d537570f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the fence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2936bf5a52cd719343bb1a965898857a0b522b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the framebuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b81eb712936e254e770f4c56c5eeb3b491aa775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the image view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e11991f210275fae2e4844df4beab6bbb118be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca33a008a1b0069457e7001e9b46c8e0fddc2f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the pipeline cache object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861b1d14c8e9660c42ae584b272c32a0fd5b5c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the pipeline layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a091e7b939ace166d3ea6c621e6b6a82b8beddf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6279de271ba2f22b312a86c0ccdd322ee0f2bc0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the query pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78f38b4301a09625145bdd0f01e760c57f9bdd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1074767365b12630cbed22f28555df53e1b042" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the sampler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196e2a8856ef8427402325d60d48c6dfa7432ad8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d33f04a5e4101d1f8d15a6e46cebd0fbf4f78e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that destroys the shader module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bc9cdef4b0453577f4b0e3c52a16b1e0009e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the buffer and memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef894d0ccced7b1aca5f29255aed50e8542b9a2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58c6a72db5b5579a31881fc065242386a54158e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the command pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e19f7b513070257b5331afe7b3d0327b0b3310d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the descriptor pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8edf93577bbe7fb9816b43147280f808166d945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546e52036483e27994761e5bc2c58172ee34ce55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the fence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfcf729b76c6da44a0e6fb0c5501eb58da882c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the fences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c65e889a62b3fb43054311386d5c580c6f977c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the image and memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7589170e68bf685c87d7ac883e6cad6e65373af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092cc6714cd48ddcc791a5015e71844533a9ebf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the memory ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d22aaea21984e9044f46379b89eb420293ec01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a93c7c00ee20027092d895aa3170cff7eb05aff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the pipeline cache objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c845b03ae4dd1bdac4815ad4d06deb57292b7cee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the pipeline cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e5210abad9b986c55bef179cf330e511bf4997" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the query pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae88b864e9ea94bd10b30f03494c19ea251564e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c00acadc306fcb14c445d5ebfb75c236e20097d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that owns the render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07128c409c58bd553571566b09e9291dd36b750c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device that updates the descriptor sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e25790a57d423d5b5e0e55a63f21c320d2d6bef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f778b3814dc1e7c3dbaa381d8d1336726bc143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt; is the logical device to idle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4d48ac0a943af632a8dbf3e4518cac8564b557" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDevice&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a823bea5b256deb07727a311378bd7f39cf4a857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deviceID&lt;/code&gt; is a unique identifier for the physical device among devices available from the vendor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91dc52b3a67f927ca894ad214c40f2d55bb300b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deviceName&lt;/code&gt; is a null-terminated UTF-8 string containing the name of the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d3bb48898bcde791bf4a236ffdb21410f24194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deviceType&lt;/code&gt; is a &lt;a href=&quot;#VkPhysicalDeviceType&quot;&gt;VkPhysicalDeviceType&lt;/a&gt; specifying the type of device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4aa9500f5816751c00efbfc043c46ff7308bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;discreteQueuePriorities&lt;/code&gt; is the number of discrete priorities that &lt;strong&gt;can&lt;/strong&gt; be assigned to a queue based on the value of each member of &lt;code&gt;VkDeviceQueueCreateInfo&lt;/code&gt;::&lt;code&gt;pQueuePriorities&lt;/code&gt;. This &lt;strong&gt;must&lt;/strong&gt; be at least 2, and levels &lt;strong&gt;must&lt;/strong&gt; be spread evenly over the range, with at least one level at 1.0, and another at 0.0. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-priority&quot;&gt;html/vkspec.html#devsandqueues-priority&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbd57529404f1253c3ce534c6d0284c4a4c8851" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drawCount&lt;/code&gt; is the number of draws to execute, and &lt;strong&gt;can&lt;/strong&gt; be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96636aeb033405eb2549e366f9f7f3d2f4068df3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drawCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxDrawIndirectCount&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04d2cdcb6979f9e903e563955d4e33e739623db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drawIndirectFirstInstance&lt;/code&gt; indicates whether indirect draw calls support the &lt;code&gt;firstInstance&lt;/code&gt; parameter. If this feature is not enabled, the &lt;code&gt;firstInstance&lt;/code&gt; member of all &lt;code&gt;VkDrawIndirectCommand&lt;/code&gt; and &lt;code&gt;VkDrawIndexedIndirectCommand&lt;/code&gt; structures that are provided to the &lt;code&gt;vkCmdDrawIndirect&lt;/code&gt; and &lt;code&gt;vkCmdDrawIndexedIndirect&lt;/code&gt; commands &lt;strong&gt;must&lt;/strong&gt; be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03c586b109c5e5917579093a748dfbdefc83fe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driverVersion&lt;/code&gt; is the vendor-specified version of the driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b9bffe55a2799df298dce897fba22ac633b18e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstAccessMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkAccessFlagBits&quot;&gt;VkAccessFlagBits&lt;/a&gt; specifying a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-access-masks&quot;&gt;destination access mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2a0c9ecb59e3114b50d76f98b3d084dbcd8749" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstAccessMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkAccessFlagBits&quot;&gt;VkAccessFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0a4b6310393391c7a65a3c42e3b9ef9ee0be62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstAlphaBlendFactor&lt;/code&gt; selects which blend factor is used to determine the destination factor D&lt;sub&gt;a&lt;/sub&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59ae674bba08d1be202a645e56483a51ab5c2c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstAlphaBlendFactor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkBlendFactor&quot;&gt;VkBlendFactor&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0a6e12af0f408244a98adfa9ebaa305cefca63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstArrayElement&lt;/code&gt; is the starting element in that array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb3d61f108876a430c33cecf8bf09be5d3a6f8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBinding&lt;/code&gt; is the descriptor binding within that set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b109d2b0e4a316bfe955f644a4a8a77f33008c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBinding&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a binding with a non-zero &lt;code&gt;descriptorCount&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d9f68e5ed038fb6cca2451494574d49e053a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBinding&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid binding within &lt;code&gt;dstSet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaecad469fa3b6d903da06246f7864eeec85245c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBinding&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to the maximum value of &lt;code&gt;binding&lt;/code&gt; of all &lt;a href=&quot;#VkDescriptorSetLayoutBinding&quot;&gt;VkDescriptorSetLayoutBinding&lt;/a&gt; structures specified when &lt;code&gt;dstSet&lt;/code&gt;&amp;rsquo;s descriptor set layout was created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a528aa3cee18bcf80fa940490b84fdcf73665fc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt; is a &lt;code&gt;VkBuffer&lt;/code&gt; object that will receive the results of the copy command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c064299e56106b733c74aa1760eb101bfb3450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt; is a handle to the buffer to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d44568391b4f7d6e778ed4a84a29f2393b16a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt; is the buffer to be filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d83a4e056932c440e522be024f9319f1c8bb48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt; is the destination buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98088f9a6e3be8aca2f1032c03178c7924ab81ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkBuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b275659d48238509be00f34acbc983932b6f949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_BUFFER_USAGE_TRANSFER_DST_BIT&lt;/code&gt; usage flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87648e917fc25adbced002e436a95056026257fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have enough storage, from &lt;code&gt;dstOffset&lt;/code&gt;, to contain the result of each query, as described &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#queries-operation-memorylayout&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cae733627a21ddd35b20d1db1f9f3cda21e259" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstCache&lt;/code&gt; is the handle of the pipeline cache to merge results into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc134e89f543be10b0a88cf160fc82eb51c0b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPipelineCache&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513b1be2174ee35a9a58a461b2f9065e51f87063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1435b6f5c88163816f83edfddbf9208055ac85a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not appear in the list of source caches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34110aa18f34c78cd9ad86abce72a954157ee950" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstColorBlendFactor&lt;/code&gt; selects which blend factor is used to determine the destination factors (D&lt;sub&gt;r&lt;/sub&gt;,D&lt;sub&gt;g&lt;/sub&gt;,D&lt;sub&gt;b&lt;/sub&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b50badfa442c03000eda4aa41a1b13abf78d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstColorBlendFactor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkBlendFactor&quot;&gt;VkBlendFactor&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4697ab6d4c231cd14d6366bac726d0487eacbac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt; is the destination image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16254a9097a2d76f8f1d239a629618795cd71c0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImage&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77322bfa175cf90faaa4f2dd0f705e6e6c07fc16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have a sample count equal to &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7cf0ede651529b8082893a91199a384932d0b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_TRANSFER_DST_BIT&lt;/code&gt; usage flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bdcc1e0c44a2fa09804e23a63ce2cedb85ab15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;samples&lt;/code&gt; value of &lt;code&gt;VK_SAMPLE_COUNT_1_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2988b8c8ea5b21581d45fdb8e62c300aa73133f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; use a format that supports &lt;code&gt;VK_FORMAT_FEATURE_BLIT_DST_BIT&lt;/code&gt;, which is indicated by &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;linearTilingFeatures&lt;/code&gt; (for linearly tiled images) or &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;optimalTilingFeatures&lt;/code&gt; (for optimally tiled images) - as returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f32d518b88274117f1c66015f22bb3ad06383c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt; is the current layout of the destination image subresource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a7d092e94bb3a9c47a966e4fcecd40a9109cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt; is the layout of the destination image subresources for the blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba52768fa8cb627883e616368c58d5786006ed00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt; is the layout of the destination image subresources for the copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567b6bd3574d32ad109656a3ade0001dea4ec577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt; is the layout of the destination image subresources for the resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62487be8f8eb7c8d3f3885ba401e1aa0f888b422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6cd58d78d9a17cb81c1487351792d9b3a9ce0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbbe4bfa88a42a60a2a1b83e23ddf267c614935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstImageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; specify the layout of the image subresources of &lt;code&gt;dstImage&lt;/code&gt; specified in &lt;code&gt;pRegions&lt;/code&gt; at the time this command is executed on a &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7411f9dc43de2a17871969d719bf17f2037f0c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset.x&lt;/code&gt; and (&lt;code&gt;extent.width&lt;/code&gt; + &lt;code&gt;dstOffset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b0302e4b5cafe8a3a5f81faa4cd0c028faed20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset.y&lt;/code&gt; and (&lt;code&gt;extent.height&lt;/code&gt; + &lt;code&gt;dstOffset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a863c6bef7332547570d7bbad330e10756894df3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset.z&lt;/code&gt; and (&lt;code&gt;extent.depth&lt;/code&gt; + &lt;code&gt;dstOffset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da995efc6725919f4eb9179a4e23c1eeb5f71e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt; is an offset into &lt;code&gt;dstBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192bb8f629421b6bca7b5f358d0c09f68084ab29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt; is the byte offset into the buffer at which to start filling, and &lt;strong&gt;must&lt;/strong&gt; be a multiple of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693054d1d972ab07a62ded983e60404e48988141" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt; is the byte offset into the buffer to start updating, and &lt;strong&gt;must&lt;/strong&gt; be a multiple of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b06bbdc0e9c8d97e9f7aacca574fb96c4a66f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt; is the starting offset in bytes from the start of &lt;code&gt;dstBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dc3c138a626596ee64c935cde45abf59ce8f6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb98ba5b724f60b62274fb8a65650b7c01910ddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of &lt;code&gt;dstBuffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25e08f25387ae57e67d778f925936013267eb54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt;[0].&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;dstOffset&lt;/code&gt;[1].&lt;code&gt;x&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d375fffe61344372d228a5a6c71cb49bbdaf19be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt;[0].&lt;code&gt;y&lt;/code&gt; and &lt;code&gt;dstOffset&lt;/code&gt;[1].&lt;code&gt;y&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ac0f62f09a849bf278ccc3a92fb5067f8bbdf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffset&lt;/code&gt;[0].&lt;code&gt;z&lt;/code&gt; and &lt;code&gt;dstOffset&lt;/code&gt;[1].&lt;code&gt;z&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the destination image subresource depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5c0a908f142e815dced39a96e939d31b12a5bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstOffsets&lt;/code&gt; is an array of two &lt;a href=&quot;#VkOffset3D&quot;&gt;VkOffset3D&lt;/a&gt; structures specifying the bounds of the destination region within &lt;code&gt;dstSubresource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562ac76e7666332041825b9e9d1068f5ee7e68ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstQueueFamilyIndex&lt;/code&gt; is the destination queue family for a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-queue-transfers&quot;&gt;queue family ownership transfer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807f65799a597a1ce3bddffb36428956a636d5af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSet&lt;/code&gt; is the destination descriptor set to update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea168b98bb91de2cedd98f49a17c8cd0695dda44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSet&lt;/code&gt;, &lt;code&gt;dstBinding&lt;/code&gt;, and &lt;code&gt;dstArrayElement&lt;/code&gt; are the destination set, binding, and array element, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feccabea5acfdcdbd17541415c10c70c5b3271c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSet&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkDescriptorSet&quot;&gt;VkDescriptorSet&lt;/a&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d406e4ac23e4f0933b0f1c6bdbeeb70612834c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSet&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDescriptorSet&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aa5102afe7f402a29756a8e34d1499c7af913f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstStageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages&quot;&gt;destination stage mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5897005106bd7201e494a6eec157288c4358aea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstStageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;destination stage mask&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34e3a2b144b30e4701e5a99779fe399d5e2166a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstStageMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; specifying the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-pipeline-stages-masks&quot;&gt;destination stage mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427cde20ee485b1521cce4239cbffebbaf41ca27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkPipelineStageFlagBits&quot;&gt;VkPipelineStageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbb920cbfc130720147df783fedfb03a3478392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstStageMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a41659552a461bb09e72581825ff213178880e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSubpass&lt;/code&gt; is the subpass index of the second subpass in the dependency, or &lt;code&gt;VK_SUBPASS_EXTERNAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a62c54a4afbb62018f8a87c654ab3323338cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSubresource.baseArrayLayer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than and (&lt;code&gt;dstSubresource.layerCount&lt;/code&gt; + &lt;code&gt;dstSubresource.baseArrayLayer&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the number of layers in the destination image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efd2c8d0e5181012d1a0f764652dc62a2479903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSubresource&lt;/code&gt; is the subresource to blit into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6564c2237b24de4cff0123d213ed7e5eb731fdd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dstSubresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageSubresourceLayers&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a20f0d637b64e174bc2ed6539399d1a90a1d316" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dualSrcBlend&lt;/code&gt; indicates whether blend operations which take two sources are supported. If this feature is not enabled, the &lt;code&gt;VK_BLEND_FACTOR_SRC1_COLOR&lt;/code&gt;, &lt;code&gt;VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR&lt;/code&gt;, &lt;code&gt;VK_BLEND_FACTOR_SRC1_ALPHA&lt;/code&gt;, and &lt;code&gt;VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA&lt;/code&gt; enum values &lt;strong&gt;must&lt;/strong&gt; not be used as source or destination blending factors. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#framebuffer-dsb&quot;&gt;html/vkspec.html#framebuffer-dsb&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b1678272c76679b0ed56a81f10702315e41f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamicOffsetCount&lt;/code&gt; is the number of dynamic offsets in the &lt;code&gt;pDynamicOffsets&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58e7af95d805dffebda1139ca715b7ffb3138b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamicOffsetCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be equal to the total number of dynamic descriptors in &lt;code&gt;pDescriptorSets&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ad358857feb636aeedd3e38d49d5421f8f5054" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamicStateCount&lt;/code&gt; is the number of elements in the &lt;code&gt;pDynamicStates&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3ae8e3801f3cfdf085e922e3faf07bbab4d758" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamicStateCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d789e5e317e9a61c331e607ef88c0c68ec195e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enabledExtensionCount&lt;/code&gt; is the number of device extensions to enable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f5f37157522b8fef4c5f9905e3eec64d3370eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enabledExtensionCount&lt;/code&gt; is the number of global extensions to enable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7baea4c2b8e63068d2e16672e48bd60e7885a72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enabledLayerCount&lt;/code&gt; is deprecated and ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee5c4d9c5eeae576a2bb5c3d78674899b6c625e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enabledLayerCount&lt;/code&gt; is the number of global layers to enable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1643c19efecda100031bacd6460f801a3ceb48be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;engineVersion&lt;/code&gt; is an unsigned integer variable containing the developer-supplied version number of the engine used to create the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a3c8633435cbd1713280286607fe1b10b6145e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the event that will be signaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a41c84a9afa7b4a53f1fad470db9407bf92b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the event that will be unsignaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f80552c2ccb63928b17f89d9a77ae49a948b3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the event to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c118ce5429a70badf06975d2ccd8ff6990568eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the event to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c563d71d734fe31df1a250a14f94038f5bd667b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the handle of the event to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cba6f8237250d3667a77e6c6988283a1bcbd4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; is the handle of the event to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13adb219a7c60392283c25fe7e06583a32076eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkEvent&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a43edc440ff5ebae22304a57e85763ba478274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742828a3f5ddeb1049553fc8d4ae6a15f6265a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be waited on by a &lt;code&gt;vkCmdWaitEvents&lt;/code&gt; command that is currently executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68b35874244c0dcaadb4f39996fb5c5d94200d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventCount&lt;/code&gt; is the length of the &lt;code&gt;pEvents&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aa2e4a2927da048d9366f12ce6391669fd4b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eventCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5455946d4f85e92d83e677a32a5825079938639a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extensionName&lt;/code&gt; is a null-terminated string specifying the name of the extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa004c6cd9b49fc75b4bb056193ea68ee87f857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent.depth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either be a multiple of the sparse image block depth of the image, or else (&lt;code&gt;extent.depth&lt;/code&gt; + &lt;code&gt;offset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the depth of the image subresource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3735920e90867a27836ff04f08b0572900521983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent.height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either be a multiple of the sparse image block height of the image, or else (&lt;code&gt;extent.height&lt;/code&gt; + &lt;code&gt;offset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the height of the image subresource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d191692f51468ef3dc94e58cc03423c193369b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent.width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either be a multiple of the sparse image block width of the image, or else (&lt;code&gt;extent.width&lt;/code&gt; + &lt;code&gt;offset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; equal the width of the image subresource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed51bd66dcdffe0c30be3b0a2319a576c3d0e6a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt; is a &lt;a href=&quot;#VkExtent2D&quot;&gt;VkExtent2D&lt;/a&gt; specifying the rectangle extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b666033f180b5f8f55e17ec63e0da3596dd4faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt; is a &lt;a href=&quot;#VkExtent3D&quot;&gt;VkExtent3D&lt;/a&gt; describing the number of data elements in each dimension of the base level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f155e50544dd274fe5bac28f44112948af96b601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt; is the size in texels of the region within the image subresource to bind. The extent &lt;strong&gt;must&lt;/strong&gt; be a multiple of the sparse image block dimensions, except when binding sparse image blocks along the edge of an image subresource it &lt;strong&gt;can&lt;/strong&gt; instead be such that any coordinate of &lt;code&gt;offset&lt;/code&gt; + &lt;code&gt;extent&lt;/code&gt; equals the corresponding dimensions of the image subresource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222f689a7f6d6887eeb061467b8408d8e0a5ee9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt; is the size in texels of the source image to copy in &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;depth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862128590f2c83855c840956e39815146e0ff777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt; is the size in texels of the source image to resolve in &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;depth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3113dfad33d26a44cc02108afd617c8f260fc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt;::&lt;code&gt;depth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bee6000116815e30b0f6547105de620c7903cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt;::&lt;code&gt;height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53541d78ea7737101f4915802dfa7412afa0dce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extent&lt;/code&gt;::&lt;code&gt;width&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2d22b554e1f770ae0927b80b28ddd7fe6b34d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;faceMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkStencilFaceFlagBits&quot;&gt;VkStencilFaceFlagBits&lt;/a&gt; specifying the set of stencil state for which to update the compare mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dbbef4d052288d6a0da9ef965b401c56e042df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;faceMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkStencilFaceFlagBits&quot;&gt;VkStencilFaceFlagBits&lt;/a&gt; specifying the set of stencil state for which to update the reference value, as described above for &lt;a href=&quot;#vkCmdSetStencilCompareMask&quot;&gt;vkCmdSetStencilCompareMask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ae5d5964346b94dc68183d91e28206ecbf1ecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;faceMask&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkStencilFaceFlagBits&quot;&gt;VkStencilFaceFlagBits&lt;/a&gt; specifying the set of stencil state for which to update the write mask, as described above for &lt;a href=&quot;#vkCmdSetStencilCompareMask&quot;&gt;vkCmdSetStencilCompareMask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc32e95f61c475a4b30135c3fd6cab02366ea57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;faceMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkStencilFaceFlagBits&quot;&gt;VkStencilFaceFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf377fa3aea825a6fa5cf81f524a7e556c791591" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;faceMask&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971da09ca749191b9af33ea3b89470b7b6da1961" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;failOp&lt;/code&gt; is a &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value specifying the action performed on samples that fail the stencil test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2185162b27015f6487f90d1a9c75757a2a2b5838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;failOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73986dab72f15c4f36e9033a8220e3abd4148bec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fence&lt;/code&gt; is an optional handle to a fence to be signaled. If &lt;code&gt;fence&lt;/code&gt; is not &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, it defines a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-fences-signaling&quot;&gt;fence signal operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e79a65662587ba3fa776aae8955e574051e416" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fence&lt;/code&gt; is the handle of the fence to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b08790d5306ff80f647d4895a36a3c33c0f7d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fence&lt;/code&gt; is the handle of the fence to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a941b21306c2009df12fe092f1dcfb6372f9eb48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkFence&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10da6475562bafff357765f07f057333ae6c4cc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77de3afd238bdf4204265eb36f94ecadfef92a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fenceCount&lt;/code&gt; is the number of fences to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f3c1ac91c55f4b68a0e20d620ef5af1978a597" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fenceCount&lt;/code&gt; is the number of fences to wait on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e23510b5d6802d30bb297f8d7c9e009e82d660" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fenceCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267b53442725d133a26d4ad02e38e594535ec605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fillModeNonSolid&lt;/code&gt; indicates whether point and wireframe fill modes are supported. If this feature is not enabled, the &lt;code&gt;VK_POLYGON_MODE_POINT&lt;/code&gt; and &lt;code&gt;VK_POLYGON_MODE_LINE&lt;/code&gt; enum values &lt;strong&gt;must&lt;/strong&gt; not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5ba77e636245e350ab4696ac789ac377a7b461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&lt;/code&gt; is a &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; specifying the filter to apply if the blits require scaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e32df22d07e0ff610f6b344ae35946621dfb677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5a0f0aa93b38e133a37de96251fb952707ad1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalLayout&lt;/code&gt; is the layout the attachment image subresource will be transitioned to when a render pass instance ends. During a render pass instance, an attachment &lt;strong&gt;can&lt;/strong&gt; use a different layout in each subpass, if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c407decc67b95214388d8e65ac3d620ba7a89265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0b3f585d9b102c6e591ccda354c2079a11e764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;VK_IMAGE_LAYOUT_UNDEFINED&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_PREINITIALIZED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046680ad20338a467d66cc46ea9da3dcf072ae71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstBinding&lt;/code&gt; is the index of the first vertex input binding whose state is updated by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01a64a35474547bddfa1fe1bc19dba70ae2ccac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstBinding&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputBindings&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7885026ef12d47f17503c3a2f38d753398b20619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstIndex&lt;/code&gt; is the base index within the index buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafe7b243ee0a9c6dba6d665da69f07d42735356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstInstance&lt;/code&gt; is the instance ID of the first instance to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf0f5f85a3b6fb08e611088e3bdcc8697e15317" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstQuery&lt;/code&gt; is the initial query index to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac499fc08b156359606968538300a54f49a89a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstQuery&lt;/code&gt; is the initial query index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aface4a7b02b8d3ade4e2b66c486c1b3dc1e7f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstQuery&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the number of queries in &lt;code&gt;queryPool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c0be25a2e8668ba884019510ebdfce11f84721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstScissor&lt;/code&gt; is the index of the first scissor whose state is updated by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c37d1e388d0e4124578a1a61594804fc8f1d60c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstScissor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewports&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc214a6ebd99acc371960bfc7e5bb6c905cbb00d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstSet&lt;/code&gt; is the set number of the first descriptor set to be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28b8d0517c31fcea076e71a2266db85f5fd7a66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstVertex&lt;/code&gt; is the index of the first vertex to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c418283e5a1312be4468389651576a5558bb5664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstViewport&lt;/code&gt; is the index of the first viewport whose parameters are updated by the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ddd2420258916e0e7cbc8e7325962316900b13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firstViewport&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewports&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650a21cb623bcb08673773460b82c4452054eb3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; = ci.&lt;code&gt;flags&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09b0df6ab6390f67befead618d4fdf832ac153c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; are sparse memory binding flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46620f78e8ba831f137e9b743fc7826ee49e93bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; has the same possible values described above for the &lt;code&gt;flags&lt;/code&gt; parameter of &lt;a href=&quot;#vkGetQueryPoolResults&quot;&gt;vkGetQueryPoolResults&lt;/a&gt;, but the different style of execution causes some subtle behavioral differences. Because &lt;code&gt;vkCmdCopyQueryPoolResults&lt;/code&gt; executes in order with respect to other query commands, there is less ambiguity about which use of a query is being requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff958ce23b987c208f3f5f59cb8ee7395356980b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; includes &lt;code&gt;VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6180b0d5e3427747024ca027eaa54369612a78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkAttachmentDescriptionFlagBits&quot;&gt;VkAttachmentDescriptionFlagBits&lt;/a&gt; specifying additional properties of the attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624b49e7fcbe3f9e534fdc8f809ee2a92430d44a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkBufferCreateFlagBits&quot;&gt;VkBufferCreateFlagBits&lt;/a&gt; specifying additional parameters of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd02c92d5e3e8cb50d518582c8799dc8844ff07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkCommandBufferResetFlagBits&quot;&gt;VkCommandBufferResetFlagBits&lt;/a&gt; controlling the reset operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40089ee5ff28645c6af84343d02e88ff227eeade" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkCommandBufferUsageFlagBits&quot;&gt;VkCommandBufferUsageFlagBits&lt;/a&gt; specifying usage behavior for the command buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2fc35321f06f71b6ef5d893ae94faa23d887c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkCommandPoolCreateFlagBits&quot;&gt;VkCommandPoolCreateFlagBits&lt;/a&gt; indicating usage behavior for the pool and command buffers allocated from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f21b207f4043022cf8f7ff6da27b70a7eaf94a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkCommandPoolResetFlagBits&quot;&gt;VkCommandPoolResetFlagBits&lt;/a&gt; controlling the reset operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008fa481439d73a636cec61b1bd82ad594d8ea9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkDescriptorPoolCreateFlagBits&quot;&gt;VkDescriptorPoolCreateFlagBits&lt;/a&gt; specifying certain supported operations on the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0ef59dfbcad0eab6a37c14588d21130833adf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkFenceCreateFlagBits&quot;&gt;VkFenceCreateFlagBits&lt;/a&gt; specifying the initial state and behavior of the fence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39984f3800fc6bde914ce56391de20834930f368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkImageCreateFlagBits&quot;&gt;VkImageCreateFlagBits&lt;/a&gt; describing additional parameters of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff6d4bc13f208e87e3dc48d60c35c9e6b94fc44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkImageCreateFlagBits&quot;&gt;VkImageCreateFlagBits&lt;/a&gt; specifying additional parameters of the image, corresponding to &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42e83e8fb647105743748316a5800f3240bb7be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkMemoryHeapFlagBits&quot;&gt;VkMemoryHeapFlagBits&lt;/a&gt; specifying attribute flags for the heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ed76cf3508f4fd932f033b2765e3353b199f25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkPipelineCreateFlagBits&quot;&gt;VkPipelineCreateFlagBits&lt;/a&gt; specifying how the pipeline will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c3c06467e39013618dcfccdb47430a1fdcfaf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkQueryControlFlagBits&quot;&gt;VkQueryControlFlagBits&lt;/a&gt; specifying constraints on the types of queries that &lt;strong&gt;can&lt;/strong&gt; be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd5225130f9d2861018c9173103c3d124b4853f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkQueryResultFlagBits&quot;&gt;VkQueryResultFlagBits&lt;/a&gt; specifying how and when results are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4300ff59bb612a5f1014fdf40039be655cdb50e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkSparseImageFormatFlagBits&quot;&gt;VkSparseImageFormatFlagBits&lt;/a&gt; specifying additional information about the sparse resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aebd534c1187ef0740bf928242b4bb808d8b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkSparseMemoryBindFlagBits&quot;&gt;VkSparseMemoryBindFlagBits&lt;/a&gt; specifying usage of the binding operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e87bc50bcfbda7a15f694e6ad04f5117d6220a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkSubpassDescriptionFlagBits&quot;&gt;VkSubpassDescriptionFlagBits&lt;/a&gt; specifying usage of the subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480d2f34adc896c250566d15522eadf21ea7e109" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is a bitmask specifying options for descriptor set layout creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd66f4dd435c8db5594d090aca0d4b6f65749783" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; is reserved for future use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16804ad0a55d0c60b9cac0812e674e29af39504e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb214d81d58da7e140fbfbe9dd2a03a4219065ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkAttachmentDescriptionFlagBits&quot;&gt;VkAttachmentDescriptionFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e0d810edace1fff73bb594c779e637048c2c25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkBufferCreateFlagBits&quot;&gt;VkBufferCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f9d6a640b6ee899c78a98c9a52ffe0b8604cde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkCommandBufferResetFlagBits&quot;&gt;VkCommandBufferResetFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed94fa539d36f316da1d14b9a6260b020811a8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkCommandBufferUsageFlagBits&quot;&gt;VkCommandBufferUsageFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9beca35be1a2f20d2a984c3dc5472ac89f818f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkCommandPoolCreateFlagBits&quot;&gt;VkCommandPoolCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2b33c44e485048669021485c191dcb92201118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkCommandPoolResetFlagBits&quot;&gt;VkCommandPoolResetFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190c712bc41ebefd01186a14779d1ce38825d7bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkDescriptorPoolCreateFlagBits&quot;&gt;VkDescriptorPoolCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d4f382254d12255fcc3c7a07228ad28c313be4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkDescriptorSetLayoutCreateFlagBits&quot;&gt;VkDescriptorSetLayoutCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578f13c92165a0c2146b100360daa92461dfd906" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkFenceCreateFlagBits&quot;&gt;VkFenceCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e332dac7441f3e91558c42663d8c9abb9944edc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkImageCreateFlagBits&quot;&gt;VkImageCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ce972799205962193cb79f013cbcac4f262012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkPipelineCreateFlagBits&quot;&gt;VkPipelineCreateFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096aa4ab562ced4ed9317c3684de48741229792c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkQueryControlFlagBits&quot;&gt;VkQueryControlFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d2490227175e67f8c21e12476b1078bb347f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkQueryResultFlagBits&quot;&gt;VkQueryResultFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041d8c1ded9796376bcd0f4e31c2a383d6d9490d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkSparseMemoryBindFlagBits&quot;&gt;VkSparseMemoryBindFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64a9ee741a942e8e9d66d27bd360cb1bf974b42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid combination of &lt;a href=&quot;#VkSubpassDescriptionFlagBits&quot;&gt;VkSubpassDescriptionFlagBits&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e88f6d471180887fa7944e9b691351bb10d4090" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;float32&lt;/code&gt; are the color clear values when the format of the image or attachment is one of the formats in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-formats-numericformat&quot;&gt;Interpretation of Numeric Format&lt;/a&gt; table other than signed integer (&lt;code&gt;SINT&lt;/code&gt;) or unsigned integer (&lt;code&gt;UINT&lt;/code&gt;). Floating point values are automatically converted to the format of the image, with the clear value being treated as linear if the image is sRGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff34a8346fc6d95b542151d73ea79f902b2ab76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is a &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; describing the format and type of the data elements that will be contained in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795792c582bec53ce3d170671fe5283fdf649b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is a &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; describing the format and type used to interpret data elements in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe9129f52bb8dabba1b32a18996e4e6b539bf1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is a &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; describing the format of the data elements in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524fc7119399ae98a46682ac85de6e2db05a3e9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is a &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; value specifying the format of the image that will be used for the attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b117fca6d7d331f2cf9ec917e1c095583557009c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is a &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; value specifying the image format, corresponding to &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt;::&lt;code&gt;format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54019ddc1bd2ff42d2c8bc0c34b52650b9ebbc0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is not a depth/stencil format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2f67cae642f91c6c8960f58596c7babc434d0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is the format whose properties are queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e266abb41177b580d12d546140fa24555bec1e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is the image format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f931831cbcc1afb64a007e54d78f8e1d2902ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; is the size and type of the vertex attribute data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41eabf7f643aac1ee750ed9f6c74f0439b6f9f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkFormat&quot;&gt;VkFormat&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c406bf90dcde9738aaad337f7ed7213c19596ba8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be allowed as a vertex buffer format, as specified by the &lt;code&gt;VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT&lt;/code&gt; flag in &lt;code&gt;VkFormatProperties&lt;/code&gt;::&lt;code&gt;bufferFeatures&lt;/code&gt; returned by &lt;code&gt;vkGetPhysicalDeviceFormatProperties&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675f012c7ef967f0be3a9652f8121906757ad524" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;VK_FORMAT_UNDEFINED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4033b837f8eccc5804a03ac91f22abe611cf75b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formatProperties.aspectMask&lt;/code&gt; is the set of aspects of the image that this sparse memory requirement applies to. This will usually have a single aspect specified. However, depth/stencil images &lt;strong&gt;may&lt;/strong&gt; have depth and stencil data interleaved in the same sparse block, in which case both &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; and &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt; would be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd618d5cee5671ba8ce43f202fef84ec43efa635" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formatProperties.flags&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkSparseImageFormatFlagBits&quot;&gt;VkSparseImageFormatFlagBits&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8118063248497f1fb61349a8565629f78d71b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formatProperties.imageGranularity&lt;/code&gt; describes the dimensions of a single bindable sparse image block in pixel units. For aspect &lt;code&gt;VK_IMAGE_ASPECT_METADATA_BIT&lt;/code&gt;, all dimensions will be zero pixels. All metadata is located in the mip tail region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c51d24f42ddfd5d514030435a7d87915b62eba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fragmentStoresAndAtomics&lt;/code&gt; indicates whether storage buffers and images support stores and atomic operations in the fragment shader stage. If this feature is not enabled, all storage image, storage texel buffers, and storage buffer variables used by the fragment stage in shader modules &lt;strong&gt;must&lt;/strong&gt; be decorated with the &lt;code&gt;NonWriteable&lt;/code&gt; decoration (or the &lt;code&gt;readonly&lt;/code&gt; memory qualifier in GLSL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adf083d4fdca47842d69b7e0ca31015f92b2b2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebuffer&lt;/code&gt; is the framebuffer containing the attachments that are used with the render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2e71132e23a91ebd1f3d6d3c8a6e1f08297f79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebuffer&lt;/code&gt; is the handle of the framebuffer to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daec67444a764db935588f6363cad609bca82466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebuffer&lt;/code&gt; optionally refers to the &lt;code&gt;VkFramebuffer&lt;/code&gt; object that the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will be rendering to if it is executed within a render pass instance. It &lt;strong&gt;can&lt;/strong&gt; be &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt; if the framebuffer is not known, or if the &lt;code&gt;VkCommandBuffer&lt;/code&gt; will not be executed within a render pass instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f3859c050eb768a85d37d64b490d18a47f8d7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkFramebuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8770c36c717c9654298abd59807f4bbbf1b319a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebufferColorSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the color sample counts that are supported for all framebuffer color attachments with floating- or fixed-point formats. There is no limit that indicates the color sample counts that are supported for all color attachments with integer formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f581092f4b36fdbe79f95387e68d9071175d296e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebufferDepthSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the supported depth sample counts for all framebuffer depth/stencil attachments, when the format includes a depth component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d23966b00c6958c00501df59861b84098519c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebufferNoAttachmentsSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the supported sample counts for a framebuffer with no attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d7a9b982127d401a78b4a12e66bdb65f4890d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;framebufferStencilSampleCounts&lt;/code&gt; is a bitmask&lt;sup&gt;1&lt;/sup&gt; of &lt;a href=&quot;#VkSampleCountFlagBits&quot;&gt;VkSampleCountFlagBits&lt;/a&gt; indicating the supported stencil sample counts for all framebuffer depth/stencil attachments, when the format includes a stencil component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12aff40090f690077e2dbf0f076a3a4e00246a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; control the parameters of the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-stencil&quot;&gt;stencil test&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56a1896e9d31fdb5609fdb553acfadfde9bdb47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;front&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkStencilOpState&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bb0e409e4fe6fc704421f55f77600125a0f4ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;frontFace&lt;/code&gt; is a &lt;a href=&quot;#VkFrontFace&quot;&gt;VkFrontFace&lt;/a&gt; value specifying the front-facing triangle orientation to be used for culling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf88d2ef45f6a0146ec973012624568ef946143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;frontFace&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkFrontFace&quot;&gt;VkFrontFace&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e59735afada49d16b53706985019c4ff3bc57b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fullDrawIndexUint32&lt;/code&gt; indicates the full 32-bit range of indices is supported for indexed draw calls when using a &lt;a href=&quot;#VkIndexType&quot;&gt;VkIndexType&lt;/a&gt; of &lt;code&gt;VK_INDEX_TYPE_UINT32&lt;/code&gt;. &lt;code&gt;maxDrawIndexedIndexValue&lt;/code&gt; is the maximum index value that &lt;strong&gt;may&lt;/strong&gt; be used (aside from the primitive restart index, which is always 2&lt;sup&gt;32&lt;/sup&gt;-1 when the &lt;a href=&quot;#VkIndexType&quot;&gt;VkIndexType&lt;/a&gt; is &lt;code&gt;VK_INDEX_TYPE_UINT32&lt;/code&gt;). If this feature is supported, &lt;code&gt;maxDrawIndexedIndexValue&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be 2&lt;sup&gt;32&lt;/sup&gt;-1; otherwise it &lt;strong&gt;must&lt;/strong&gt; be no smaller than 2&lt;sup&gt;24&lt;/sup&gt;-1. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-limits-maxDrawIndexedIndexValue&quot;&gt;maxDrawIndexedIndexValue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f531f9d971384b47581b6b65753415f80f9211" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt; is a &lt;a href=&quot;#VkComponentSwizzle&quot;&gt;VkComponentSwizzle&lt;/a&gt; specifying the component value placed in the G component of the output vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d754d9a0590647257e4b4fe14e73340a56534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkComponentSwizzle&quot;&gt;VkComponentSwizzle&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542776347ed719733f48dd8c566999e37caf61dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;geometryShader&lt;/code&gt; indicates whether geometry shaders are supported. If this feature is not enabled, the &lt;code&gt;VK_SHADER_STAGE_GEOMETRY_BIT&lt;/code&gt; and &lt;code&gt;VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT&lt;/code&gt; enum values &lt;strong&gt;must&lt;/strong&gt; not be used. This also indicates whether shader modules &lt;strong&gt;can&lt;/strong&gt; declare the &lt;code&gt;Geometry&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d564534f4ace3965a064e39f04200da7bc9ebbec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountX&lt;/code&gt; is the number of local workgroups to dispatch in the X dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf2a64d55817e96feefc8f560218a36eebc157b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountX&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[0]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a1afd927c6505a7a3567f5dbf9743cbdaf1a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountY&lt;/code&gt; is the number of local workgroups to dispatch in the Y dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894b9c8f7d427a1116a8bdd1b66ebf5cc5a6cc6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountY&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a45861deca35054ee8ee5ed9073f3f570c4114a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountZ&lt;/code&gt; is the number of local workgroups to dispatch in the Z dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f8fb7627655b3c4622d395210a5b85521fe99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupCountZ&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[2]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3e174500501077aee95d7bb82d5d6535149f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heapIndex&lt;/code&gt; describes which memory heap this memory type corresponds to, and &lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;memoryHeapCount&lt;/code&gt; from the &lt;code&gt;VkPhysicalDeviceMemoryProperties&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e0bf577d264d552d66bdacb8bb5690a7a452c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313ea8f0dbb9e7af0024237f8415e5a621dfe186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5734ec9a47a8fe2213f9b83363db7ac7c493cef5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; = &lt;code&gt;width&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524b81a0bf6162faf43123f138a3ce8dfb6d36f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; = ci.&lt;code&gt;extent.height&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565772c328448fbb8ff72dd27ad5ea1066a5c8d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; = width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8348316956f7c10fda051b6d0f216f873af6c32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; is the height of the extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767615d83659a03a07e4f353bba4b505a634b606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; of a &lt;a href=&quot;#VkExtent3D&quot;&gt;VkExtent3D&lt;/a&gt; parameter &lt;strong&gt;must&lt;/strong&gt; be an integer multiple of A&lt;sub&gt;y&lt;/sub&gt;, or else &lt;code&gt;y&lt;/code&gt; + &lt;code&gt;height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; equal the height of the image subresource corresponding to the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6831c6c3a0d40c3b38ca2a08da917a209587f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0.0&lt;/code&gt; and less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxViewportDimensions&lt;/code&gt;[1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1550684a8c11f3dbba9aa2c9654dbfc648ea3b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bf6003ee866d6217b571d958dfe214f74f4786" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxFramebufferHeight&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f13e61b59c9036bd782cd60ba1eb0b881ccaa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is a &lt;code&gt;VkImage&lt;/code&gt; on which the view will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae087b3dd92596a9fb98176a51c03559545f662" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is a handle to the image affected by this barrier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d05c7101c905e03f47a4c66fc0d738303f4e65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the &lt;code&gt;VkImage&lt;/code&gt; object to be bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe842bb0e0c81276e129197eb7a16411025086af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the &lt;code&gt;VkImage&lt;/code&gt; object to be bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ee3b91a5af59bee4c9fa189457c662872b4588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the &lt;code&gt;VkImage&lt;/code&gt; object to get the memory requirements for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2d74d5fd61f8c734f77a7f7b83ee7672c97ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the image to be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4bc5c3db73b1d566ab1702bfb911a2ede0fc52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the image to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e050ae6ee018517b0df1133e46b8ef7d7613e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the image to query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16c9354ff908dd3d5e387f7edb496c61147adb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the image whose layout is being queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e60ed52830c5beade0da00a60bbf7ec1323944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b1323b2e579e03cc3439c175d7f9f5d676df4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImage&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1681df089b4223acefdfafa5b27b0868b048f4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have a depth/stencil format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770b1808b86f68645a2565447c8643a41934c8cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;VK_IMAGE_USAGE_TRANSFER_DST_BIT&lt;/code&gt; usage flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c4aa4ca2518cd20ad9ac2b89d0b091d69499e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with &lt;code&gt;tiling&lt;/code&gt; equal to &lt;code&gt;VK_IMAGE_TILING_LINEAR&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d0cc40b1f16d50468ad2ca3136e16f7c532394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a &lt;code&gt;usage&lt;/code&gt; value containing at least one of &lt;code&gt;VK_IMAGE_USAGE_SAMPLED_BIT&lt;/code&gt;, &lt;code&gt;VK_IMAGE_USAGE_STORAGE_BIT&lt;/code&gt;, &lt;code&gt;VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT&lt;/code&gt;, &lt;code&gt;VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT&lt;/code&gt;, or &lt;code&gt;VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062a558df635c36621bf6de7e0e7b96c02471fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59035c34e1c5aab631d41914168adad977770994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not already be backed by a memory object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcbe3180fb019ae5c72442aa03127e7a0e46bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not have a compressed or depth/stencil format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61a788c91828a45c61c6f7ec6e8810092a3c2f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not have been created with any sparse memory binding flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e01613009afc66c585a20ca88a7c12311b047f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageBindCount&lt;/code&gt; is the number of sparse image bindings to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348e050d084acd9446c01015efe8a5554da5d2b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageCubeArray&lt;/code&gt; indicates whether image views with a &lt;a href=&quot;#VkImageViewType&quot;&gt;VkImageViewType&lt;/a&gt; of &lt;code&gt;VK_IMAGE_VIEW_TYPE_CUBE_ARRAY&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be created, and that the corresponding &lt;code&gt;SampledCubeArray&lt;/code&gt; and &lt;code&gt;ImageCubeArray&lt;/code&gt; SPIR-V capabilities &lt;strong&gt;can&lt;/strong&gt; be used in shader code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977162a4ab0154d011ecbb97e06e65a92f8f5215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageExtent&lt;/code&gt; is the size in texels of the image to copy in &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;depth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14db6c7e10c47734aecc34cdd147a464a78ac23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageGranularity&lt;/code&gt; is the width, height, and depth of the sparse image block in texels or compressed texel blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc09266570c51d0daa05030a51e23eb76e8526f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt; is the layout that the image subresources accessible from &lt;code&gt;imageView&lt;/code&gt; will be in at the time this descriptor is accessed. &lt;code&gt;imageLayout&lt;/code&gt; is used in descriptor updates for types &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, and &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f6149ba970c9f44526cf895b083887562a3134" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt; specifies the current layout of the image subresource ranges to be cleared, and &lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7722a8c6450f88eea7a869027a8f017daffbb15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efae42477db52cf3a9d2b2b3cc8ccfb53ce94c43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25f2f009a7a4f50bbde48539881288f1abaaaca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be either of &lt;code&gt;VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_GENERAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecb3ab51580867cabf5b65fd030345af24f29f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; match the actual &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; of each subresource accessible from &lt;code&gt;imageView&lt;/code&gt; at the time this descriptor is accessed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3592bc776ed90087f97e12e54bf45f16bbd53a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; specify the layout of the image subresource ranges of &lt;code&gt;image&lt;/code&gt; specified in &lt;code&gt;pRanges&lt;/code&gt; at the time this command is executed on a &lt;code&gt;VkDevice&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef34eda23e4c40aee38a5066d450d8bace9ae6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMemoryBarrierCount&lt;/code&gt; is the length of the &lt;code&gt;pImageMemoryBarriers&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721b3c20bae7f6ce1ba5f1ad24ba5c5d15e87b18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMipTailFirstLod&lt;/code&gt; is the first mip level at which image subresources are included in the mip tail region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9352efb99f0cc7a047cec8659120532227ca89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMipTailOffset&lt;/code&gt; is the opaque memory offset used with &lt;a href=&quot;#VkSparseImageOpaqueMemoryBindInfo&quot;&gt;VkSparseImageOpaqueMemoryBindInfo&lt;/a&gt; to bind the mip tail region(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdf5859a9122076f20afac121bf0503b531ac19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMipTailSize&lt;/code&gt; is the memory size (in bytes) of the mip tail region. If &lt;code&gt;formatProperties.flags&lt;/code&gt; contains &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT&lt;/code&gt;, this is the size of the whole mip tail, otherwise this is the size of the mip tail of a single array layer. This value is guaranteed to be a multiple of the sparse block size in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd31f1385a0f559970b708534467820c1affd76d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMipTailStride&lt;/code&gt; is considered to be zero for aspects where &lt;code&gt;VkSparseImageMemoryRequirements&lt;/code&gt;::&lt;code&gt;formatProperties.flags&lt;/code&gt; contains &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955569be009244ed11fd30359a5697d7fc46a4ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageMipTailStride&lt;/code&gt; is the offset stride between each array-layer&amp;rsquo;s mip tail, if &lt;code&gt;formatProperties.flags&lt;/code&gt; does not contain &lt;code&gt;VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT&lt;/code&gt; (otherwise the value is undefined).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b80d85fd738943e4c5892a5f201fada812620d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageOffset.x&lt;/code&gt; and (&lt;code&gt;imageExtent.width&lt;/code&gt; + &lt;code&gt;imageOffset.x&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the image subresource width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d849d4a2657d137cd3e896e498661d67633c6793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageOffset.y&lt;/code&gt; and (imageExtent.height + &lt;code&gt;imageOffset.y&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the image subresource height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39edfe4435361aa39d56f603aa2e4522b3f2435f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageOffset.z&lt;/code&gt; and (imageExtent.depth + &lt;code&gt;imageOffset.z&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; both be greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the image subresource depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d52827d34518817920f0561288998078b18e217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageOffset&lt;/code&gt; selects the initial x, y, z offsets in texels of the sub-region of the source or destination image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6db41fa7e2d373e83acd95e12ad9ad34a229d98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageOpaqueBindCount&lt;/code&gt; is the number of opaque sparse image bindings to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13acfee78248b427e38bb7e871eeacdbd3a40ed2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageSubresource&lt;/code&gt; is a &lt;a href=&quot;#VkImageSubresourceLayers&quot;&gt;VkImageSubresourceLayers&lt;/a&gt; used to specify the specific image subresources of the image used for the source or destination image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8f515499e3623c94de773487e40ff3c94e9fa7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageSubresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkImageSubresourceLayers&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330c94566dc2001961e79e6458d92c36c7a6c9ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_TYPE_1D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c48be7063e86544cc4b79192e4e558b4c1fe9c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8f8d886c24e1e312243158577b9f12db398012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; = &lt;code&gt;VK_IMAGE_TYPE_3D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887ccfc15e34d79bc0b459c330be8a3080c373df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; = ci.&lt;code&gt;imageType&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78869dda0d8a6efe2aa9f2bf64761d57dfc7934b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; is &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262f79859991cbc6dd860ea7a52eca9c81ee9b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt; is a &lt;a href=&quot;#VkImageType&quot;&gt;VkImageType&lt;/a&gt; value specifying the basic dimensionality of the image. Layers in array textures do not count as a dimension for the purposes of the image type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a648a6f5f7ca5bbf6d6589e87cec8ae3020c9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageType&quot;&gt;VkImageType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171c6fedbb6f8a6e1b84b7fd91334c476eb983c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageView&lt;/code&gt; is an image view handle, and is used in descriptor updates for types &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, and &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd88a50810bde8a62cc842ff2f35139b0165cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;imageView&lt;/code&gt; is the image view to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be1541d35a62af409dab021ad289ff371f296d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;implementationVersion&lt;/code&gt; is the version of this layer. It is an integer, increasing with backward compatible changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befd20be8f599eed75e3bb42c1ad9ad1e0dc85e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;independentBlend&lt;/code&gt; indicates whether the &lt;code&gt;VkPipelineColorBlendAttachmentState&lt;/code&gt; settings are controlled independently per-attachment. If this feature is not enabled, the &lt;code&gt;VkPipelineColorBlendAttachmentState&lt;/code&gt; settings for all color attachments &lt;strong&gt;must&lt;/strong&gt; be identical. Otherwise, a different &lt;code&gt;VkPipelineColorBlendAttachmentState&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be provided for each bound color attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee413a68f2648dc025e55ded3c2f0baa45ac4a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexCount&lt;/code&gt; is the number of vertices to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9017de6f3cb8fbaba7b59d052b2284b7fb78afaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexType&lt;/code&gt; is a &lt;a href=&quot;#VkIndexType&quot;&gt;VkIndexType&lt;/a&gt; value specifying whether indices are treated as 16 bits or 32 bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef2a7329e5648b346c043d36669689a7c7a2c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexType&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkIndexType&quot;&gt;VkIndexType&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8299fc04a50f5948ab5969d86747d37271ad1d59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inheritedQueries&lt;/code&gt; indicates whether a secondary command buffer &lt;strong&gt;may&lt;/strong&gt; be executed while a query is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fc1596721ac962142766693701599beeed75e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialDataSize&lt;/code&gt; is the number of bytes in &lt;code&gt;pInitialData&lt;/code&gt;. If &lt;code&gt;initialDataSize&lt;/code&gt; is zero, the pipeline cache will initially be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6620830c8ec3561fcea2707f5279442f10aa4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialLayout&lt;/code&gt; is a &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value specifying the initial &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; of all image subresources of the image. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-layouts&quot;&gt;Image Layouts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70406fb1d6f68128e11f5ece9fe3a06c7166dc74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialLayout&lt;/code&gt; is the layout the attachment image subresource will be in when a render pass instance begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba5188babafba9a0df60e2e9b98b19b76513a24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_UNDEFINED&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_PREINITIALIZED&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61a5ab4c10c570c54e3269d47ca5b8e47b6c260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f51f45ec0173e02a17b687cc04bbbcab41ace9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputAttachmentCount&lt;/code&gt; is the number of input attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa312eb294d3609ce6b51ce405a7b32979d88cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputRate&lt;/code&gt; is a &lt;a href=&quot;#VkVertexInputRate&quot;&gt;VkVertexInputRate&lt;/a&gt; value specifying whether vertex attribute addressing is a function of the vertex index or of the instance index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe916a6be1e87de2a312085a751c39ed875f4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputRate&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkVertexInputRate&quot;&gt;VkVertexInputRate&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f547f9963dc03cb2eacb67032169fa3701a8fd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt; is a handle to a Vulkan instance previously created with &lt;a href=&quot;#vkCreateInstance&quot;&gt;vkCreateInstance&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2c19012f0a806678851cdd61c0aceff1b0b80e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt; is the handle of the instance to destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2991b3fca0b8d6cb92ffb53493a300110d2c09d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt; is the instance that the function pointer will be compatible with, or &lt;code&gt;NULL&lt;/code&gt; for commands not dependent on any instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b570b7b59dd36b822d375c45cc26935f1dce05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkInstance&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3952691666e9d0be176eec4223d17c36585edd67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceCount&lt;/code&gt; is the number of instances to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d50ca4b2eada5e81cbd8f1583706633a9b407b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int32&lt;/code&gt; are the color clear values when the format of the image or attachment is signed integer (&lt;code&gt;SINT&lt;/code&gt;). Signed integer values are converted to the format of the image by casting to the smaller type (with negative 32-bit values mapping to negative values in the smaller type). If the integer clear value is not representable in the target type (e.g. would overflow in conversion to that type), the clear value is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b215dcb484b4a8c120acce80e4854baa6e6e1565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;largePoints&lt;/code&gt; indicates whether points with size greater than 1.0 are supported. If this feature is not enabled, only a point size of 1.0 written by a shader is supported. The range and granularity of supported point sizes are indicated by the &lt;code&gt;pointSizeRange&lt;/code&gt; and &lt;code&gt;pointSizeGranularity&lt;/code&gt; members of the &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt; structure, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dda0fa08159129ededb448e0758f2207a0e7611" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de093c393a3e980d8db3a4d531020d8b92d70af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc4c198b9232d7dedf00df2c2e8ab624bd817a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; = 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd4e32e3e2fc5c9edc9953a49fe51904da75c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; = 6 &amp;times; &lt;em&gt;N&lt;/em&gt;, &lt;em&gt;N&lt;/em&gt; &amp;ge; 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af228f7c5cc57cb562eef98ffbc33f4233b89873" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; is the number of array layers (starting from &lt;code&gt;baseArrayLayer&lt;/code&gt;) accessible to the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41be62012c14fc0015c13a549606a6b9f3e40380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerCount&lt;/code&gt; is the number of layers to clear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cab6d8a40fc3ec7fc20a0fa03f70968a4723d72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layerName&lt;/code&gt; is a null-terminated UTF-8 string specifying the name of the layer. Use this name in the &lt;code&gt;ppEnabledLayerNames&lt;/code&gt; array passed in the &lt;a href=&quot;#VkInstanceCreateInfo&quot;&gt;VkInstanceCreateInfo&lt;/a&gt; structure to enable this layer for an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5782f906f53d5b8e7c2974c8024bf482ac6a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a01ebfd4c33d7c58b1c54cee4d034be7ad0b4fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxFramebufferLayers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093e423e7bfd288c316b20e29636c2f3ad655551" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt; is a &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value specifying the layout the attachment uses during the subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af111ae8db73a2395a66b53f3a14ae2ca3050eec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt; is a &lt;code&gt;VkPipelineLayout&lt;/code&gt; object used to program the bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9f4aea730d836d4bb2a769579e0c06a7bf8fb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt; is the description of binding locations used by both the pipeline and descriptor sets used with the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dcbd58acd870bb9056630a62e922bf3e2d7cb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt; is the pipeline layout used to program the push constant updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8aabd28906019666fd14c442af9b8332775d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-pipelinelayout-consistency&quot;&gt;consistent&lt;/a&gt; with all shaders specified in &lt;code&gt;pStages&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5340741480e20e18e5c28650b87da57e84cb90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-pipelinelayout-consistency&quot;&gt;consistent&lt;/a&gt; with the layout of the compute shader specified in &lt;code&gt;stage&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c642230c8e6cdd9356508f3d96671c766396aa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957186fd3f7ab27fdf16d9e9ece17915ac67bad8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkPipelineLayout&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2d066db178e2915c120f3ce430b3e00d5e4a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;layout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;VK_IMAGE_LAYOUT_UNDEFINED&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_PREINITIALIZED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf96145d416c974c32426d48d49510af45fa830" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt; is an &lt;a href=&quot;#VkCommandBufferLevel&quot;&gt;VkCommandBufferLevel&lt;/a&gt; value specifying the command buffer level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104d82b49d6e66c24f0e90046edac82af05e85f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkCommandBufferLevel&quot;&gt;VkCommandBufferLevel&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fdea595ba2334b0087d9691e95b0ad7905816a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;levelCount&lt;/code&gt; is the number of mipmap levels (starting from &lt;code&gt;baseMipLevel&lt;/code&gt;) accessible to the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfcd60d7d23f319050ba56da4cfcfe4c7665ef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limits&lt;/code&gt; is the &lt;a href=&quot;#VkPhysicalDeviceLimits&quot;&gt;VkPhysicalDeviceLimits&lt;/a&gt; structure which specifies device-specific limits of the physical device. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-limits&quot;&gt;Limits&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab658edbcb83f15746213a9e038e4efab54509d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineWidth&lt;/code&gt; is the width of rasterized line segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdac998808b4e6b95ca19399d0b83208935e05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineWidthGranularity&lt;/code&gt; is the granularity of supported line widths. Not all line widths in the range defined by &lt;code&gt;lineWidthRange&lt;/code&gt; are supported. This limit specifies the granularity (or increment) between successive supported line widths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037f4527a55d57920c58b442cd17003446d10f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineWidthRange&lt;/code&gt;[2] is the range [&lt;code&gt;minimum&lt;/code&gt;,&lt;code&gt;maximum&lt;/code&gt;] of supported widths for lines. Values specified by the &lt;code&gt;lineWidth&lt;/code&gt; member of the &lt;code&gt;VkPipelineRasterizationStateCreateInfo&lt;/code&gt; or the &lt;code&gt;lineWidth&lt;/code&gt; parameter to &lt;code&gt;vkCmdSetLineWidth&lt;/code&gt; are clamped to this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30d763cdc423bea901ab1f8714d721b39ad901d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;linearTilingFeatures&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkFormatFeatureFlagBits&quot;&gt;VkFormatFeatureFlagBits&lt;/a&gt; specifying features supported by images created with a &lt;code&gt;tiling&lt;/code&gt; parameter of &lt;code&gt;VK_IMAGE_TILING_LINEAR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb53d802fc720ba4cd0d37716b859c099c345da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loadOp&lt;/code&gt; is a &lt;a href=&quot;#VkAttachmentLoadOp&quot;&gt;VkAttachmentLoadOp&lt;/a&gt; value specifying how the contents of color and depth components of the attachment are treated at the beginning of the subpass where it is first used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aa8f61182881ee230b80fd379a575d4458f951" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loadOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkAttachmentLoadOp&quot;&gt;VkAttachmentLoadOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52dcbf70398e7dff63c8c6bd1f41cda5c35a59d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt; is the shader binding location number for this attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5a8dd642ffba78433c46e95b5a1d9523e8c077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputAttributes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04cd5ef4464681563717fe7e36086c60e405543" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logicOp&lt;/code&gt; indicates whether logic operations are supported. If this feature is not enabled, the &lt;code&gt;logicOpEnable&lt;/code&gt; member of the &lt;code&gt;VkPipelineColorBlendStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;VK_FALSE&lt;/code&gt;, and the &lt;code&gt;logicOp&lt;/code&gt; member is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbc121805786096dc9f2f1ddd888bd0009a4fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logicOp&lt;/code&gt; selects which logical operation to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540efce7b1f7a281615e44df17b17aeb63550bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logicOpEnable&lt;/code&gt; controls whether to apply &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#framebuffer-logicop&quot;&gt;Logical Operations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1dcf77107e54a4d607f874907b284f16b0bc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;magFilter&lt;/code&gt; is a &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; value specifying the magnification filter to apply to lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73f6c6e69b1151795a901b3e3b37198e499e9d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;magFilter&lt;/code&gt; values of &lt;code&gt;VK_FILTER_NEAREST&lt;/code&gt; and &lt;code&gt;VK_FILTER_LINEAR&lt;/code&gt; directly correspond to &lt;code&gt;GL_NEAREST&lt;/code&gt; and &lt;code&gt;GL_LINEAR&lt;/code&gt; magnification filters. &lt;code&gt;minFilter&lt;/code&gt; and &lt;code&gt;mipmapMode&lt;/code&gt; combine to correspond to the similarly named OpenGL minification filter of &lt;code&gt;GL_minFilter_MIPMAP_mipmapMode&lt;/code&gt; (e.g. &lt;code&gt;minFilter&lt;/code&gt; of &lt;code&gt;VK_FILTER_LINEAR&lt;/code&gt; and &lt;code&gt;mipmapMode&lt;/code&gt; of &lt;code&gt;VK_SAMPLER_MIPMAP_MODE_NEAREST&lt;/code&gt; correspond to &lt;code&gt;GL_LINEAR_MIPMAP_NEAREST&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2c7ca3d9b3d294a710b492a583ca3f5ec84fea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;magFilter&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4c3602f300e520c3ee7134f068eb2da299db78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major&lt;/code&gt; is the major version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbcbfe82e4e4559cac7cc826bbd6bd58aac13f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapEntryCount&lt;/code&gt; is the number of entries in the &lt;code&gt;pMapEntries&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eec209a395d76e0b617e7437236229ca9020a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxAnisotropy&lt;/code&gt; is the anisotropy value clamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa087faa2b509b0822890043bb9f3cf7dcd9ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxArrayLayers&lt;/code&gt; is the maximum number of array layers. &lt;code&gt;maxArrayLayers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either be equal to 1 or be greater than or equal to the &lt;code&gt;maxImageArrayLayers&lt;/code&gt; member of &lt;a href=&quot;#VkPhysicalDeviceLimits&quot;&gt;VkPhysicalDeviceLimits&lt;/a&gt;. A value of 1 is valid only if &lt;code&gt;tiling&lt;/code&gt; is &lt;code&gt;VK_IMAGE_TILING_LINEAR&lt;/code&gt; or if &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;VK_IMAGE_TYPE_3D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773ad1905c9ab6997234de5c4a8d24c75660d561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxBoundDescriptorSets&lt;/code&gt; is the maximum number of descriptor sets that &lt;strong&gt;can&lt;/strong&gt; be simultaneously used by a pipeline. All &lt;code&gt;DescriptorSet&lt;/code&gt; decorations in shader modules &lt;strong&gt;must&lt;/strong&gt; have a value less than &lt;code&gt;maxBoundDescriptorSets&lt;/code&gt;. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sets&quot;&gt;html/vkspec.html#descriptorsets-sets&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29220390326d921e7fc040942ca218388bd59d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxClipDistances&lt;/code&gt; is the maximum number of clip distances that &lt;strong&gt;can&lt;/strong&gt; be used in a single shader stage. The size of any array declared with the &lt;code&gt;ClipDistance&lt;/code&gt; built-in decoration in a shader module &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9396254bd0035180619798a237414fe1356c4903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxColorAttachments&lt;/code&gt; is the maximum number of color attachments that &lt;strong&gt;can&lt;/strong&gt; be used by a subpass in a render pass. The &lt;code&gt;colorAttachmentCount&lt;/code&gt; member of the &lt;code&gt;VkSubpassDescription&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a117de166eef03288f76186e1d8e5d61cd06868" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxCombinedClipAndCullDistances&lt;/code&gt; is the maximum combined number of clip and cull distances that &lt;strong&gt;can&lt;/strong&gt; be used in a single shader stage. The sum of the sizes of any pair of arrays declared with the &lt;code&gt;ClipDistance&lt;/code&gt; and &lt;code&gt;CullDistance&lt;/code&gt; built-in decoration used by a single shader stage in a shader module &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc449e893d1fcc408dfcbdc59c7faa351f3c97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxComputeSharedMemorySize&lt;/code&gt; is the maximum total storage size, in bytes, of all variables declared with the &lt;code&gt;WorkgroupLocal&lt;/code&gt; storage class in shader modules (or with the &lt;code&gt;shared&lt;/code&gt; storage qualifier in GLSL) in the compute shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd410e005f15f1cf1a386801e2bc70572d1eb5a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxComputeWorkGroupCount&lt;/code&gt;[3] is the maximum number of local workgroups that &lt;strong&gt;can&lt;/strong&gt; be dispatched by a single dispatch command. These three values represent the maximum number of local workgroups for the X, Y, and Z dimensions, respectively. The workgroup count parameters to the dispatch commands &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the corresponding limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#dispatch&quot;&gt;html/vkspec.html#dispatch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879e84e87736b12657761013cd50310d426b1461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxComputeWorkGroupInvocations&lt;/code&gt; is the maximum total number of compute shader invocations in a single local workgroup. The product of the X, Y, and Z sizes as specified by the &lt;code&gt;LocalSize&lt;/code&gt; execution mode in shader modules and by the object decorated by the &lt;code&gt;WorkgroupSize&lt;/code&gt; decoration &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91aa217eb5752d6b55938cde129291d58193499e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxComputeWorkGroupSize&lt;/code&gt;[3] is the maximum size of a local compute workgroup, per dimension. These three values represent the maximum local workgroup size in the X, Y, and Z dimensions, respectively. The &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; sizes specified by the &lt;code&gt;LocalSize&lt;/code&gt; execution mode and by the object decorated by the &lt;code&gt;WorkgroupSize&lt;/code&gt; decoration in shader modules &lt;strong&gt;must&lt;/strong&gt; be less than or equal to the corresponding limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7094d993f3ee040d07cd024b427518c2477c1e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxCullDistances&lt;/code&gt; is the maximum number of cull distances that &lt;strong&gt;can&lt;/strong&gt; be used in a single shader stage. The size of any array declared with the &lt;code&gt;CullDistance&lt;/code&gt; built-in decoration in a shader module &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd8e23df9684f15496495b7760ad39ac168cc49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDepth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf6248c1a74a8dbaf9cb3a684dc79c3b84d7a88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDepthBounds&lt;/code&gt; is the upper bound of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7280824e8fcab938ae77d1e8b02aebcf3512864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDepthBounds&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ab481154c06ade4b9967a688c8d16ecbb9b4f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetInputAttachments&lt;/code&gt; is the maximum number of input attachments that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-inputattachment&quot;&gt;html/vkspec.html#descriptorsets-inputattachment&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4b9a544685655d866452035f2fc92d56785303" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetSampledImages&lt;/code&gt; is the maximum number of sampled images that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-combinedimagesampler&quot;&gt;html/vkspec.html#descriptorsets-combinedimagesampler&lt;/a&gt;, &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampledimage&quot;&gt;html/vkspec.html#descriptorsets-sampledimage&lt;/a&gt;, and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformtexelbuffer&quot;&gt;html/vkspec.html#descriptorsets-uniformtexelbuffer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7796db297fa65f8dc92a307f1a469e62abc10a97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetSamplers&lt;/code&gt; is the maximum number of samplers that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampler&quot;&gt;html/vkspec.html#descriptorsets-sampler&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-combinedimagesampler&quot;&gt;html/vkspec.html#descriptorsets-combinedimagesampler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4876af77482d7aa821eca0717b9993745e19484b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetStorageBuffers&lt;/code&gt; is the maximum number of storage buffers that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagebuffer&quot;&gt;html/vkspec.html#descriptorsets-storagebuffer&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagebufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-storagebufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ff11b8b0e293b7d0e8126818eaf1afcb82449e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetStorageBuffersDynamic&lt;/code&gt; is the maximum number of dynamic storage buffers that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagebufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-storagebufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32f785f63f5d6ee4644905bbdfe753b2fc9ff73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetStorageImages&lt;/code&gt; is the maximum number of storage images that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storageimage&quot;&gt;html/vkspec.html#descriptorsets-storageimage&lt;/a&gt;, and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagetexelbuffer&quot;&gt;html/vkspec.html#descriptorsets-storagetexelbuffer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14067776652304345cdc501e04281529661cc57b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetUniformBuffers&lt;/code&gt; is the maximum number of uniform buffers that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformbuffer&quot;&gt;html/vkspec.html#descriptorsets-uniformbuffer&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformbufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-uniformbufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1142660d5266acb37a40038f84e2dd04eecc06eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDescriptorSetUniformBuffersDynamic&lt;/code&gt; is the maximum number of dynamic uniform buffers that &lt;strong&gt;can&lt;/strong&gt; be included in descriptor bindings in a pipeline layout across all pipeline shader stages and descriptor set numbers. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformbufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-uniformbufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76736eb2c75929927447b41150cd46476e4d7075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDrawIndexedIndexValue&lt;/code&gt; is the maximum index value that &lt;strong&gt;can&lt;/strong&gt; be used for indexed draw calls when using 32-bit indices. This excludes the primitive restart index value of 0xFFFFFFFF. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-fullDrawIndexUint32&quot;&gt;fullDrawIndexUint32&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c83a42f8457ff8e820dade53182e8c334d4863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDrawIndirectCount&lt;/code&gt; is the maximum draw count that is supported for indirect draw calls. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-multiDrawIndirect&quot;&gt;multiDrawIndirect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c552647b8e9785b245b719ff40d851082e73ddad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxExtent&lt;/code&gt; are the maximum image dimensions. See the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-extentperimagetype&quot;&gt;Allowed Extent Values&lt;/a&gt; section below for how these values are constrained by &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89bdf3b91c1be389397dfda02b6cae4edcf565f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFragmentCombinedOutputResources&lt;/code&gt; is the total number of storage buffers, storage images, and output buffers which &lt;strong&gt;can&lt;/strong&gt; be used in the fragment shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469c1b00ba8fbceeed252a23b5794e51c1a42a02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFragmentDualSrcAttachments&lt;/code&gt; is the maximum number of output attachments which &lt;strong&gt;can&lt;/strong&gt; be written to by the fragment shader stage when blending is enabled and one of the dual source blend modes is in use. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#framebuffer-dsb&quot;&gt;html/vkspec.html#framebuffer-dsb&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features-dualSrcBlend&quot;&gt;dualSrcBlend&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3a9e9200d93958d9f99e7993ac6dc3bdde7845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFragmentInputComponents&lt;/code&gt; is the maximum number of components of input variables which &lt;strong&gt;can&lt;/strong&gt; be provided as inputs to the fragment shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edf393f9efcdc39922141ac0a8409aadfb92cef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFragmentOutputAttachments&lt;/code&gt; is the maximum number of output attachments which &lt;strong&gt;can&lt;/strong&gt; be written to by the fragment shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7317b6f842212338a79a818f682cee053fcef47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFramebufferHeight&lt;/code&gt; is the maximum height for a framebuffer. The &lt;code&gt;height&lt;/code&gt; member of the &lt;code&gt;VkFramebufferCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5223854a60cff6fc0e805877dc88a1ec27f486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFramebufferLayers&lt;/code&gt; is the maximum layer count for a layered framebuffer. The &lt;code&gt;layers&lt;/code&gt; member of the &lt;code&gt;VkFramebufferCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa6163a69d7d6fe93a78d71dd8922b0b2866665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxFramebufferWidth&lt;/code&gt; is the maximum width for a framebuffer. The &lt;code&gt;width&lt;/code&gt; member of the &lt;code&gt;VkFramebufferCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8ad1aa50ae1dd1c45087d3ef75487473a52ee5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxGeometryInputComponents&lt;/code&gt; is the maximum number of components of input variables which &lt;strong&gt;can&lt;/strong&gt; be provided as inputs to the geometry shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e12bb36e0cff950d2d6d0e24304fabb212894f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxGeometryOutputComponents&lt;/code&gt; is the maximum number of components of output variables which &lt;strong&gt;can&lt;/strong&gt; be output from the geometry shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc6d608e33ee6e5ff21b0e5c81d56a4325deded" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxGeometryOutputVertices&lt;/code&gt; is the maximum number of vertices which &lt;strong&gt;can&lt;/strong&gt; be emitted by any geometry shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6496350b01c07ef20bfc28cf274f02829ef4f112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxGeometryShaderInvocations&lt;/code&gt; is the maximum invocation count supported for instanced geometry shaders. The value provided in the &lt;code&gt;Invocations&lt;/code&gt; execution mode of shader modules &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#geometry&quot;&gt;html/vkspec.html#geometry&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf256aff5ab5b19be15814b9d3a2a4b40cac4736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxGeometryTotalOutputComponents&lt;/code&gt; is the maximum total number of components of output, across all emitted vertices, which &lt;strong&gt;can&lt;/strong&gt; be output from the geometry shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31640171e0ac365371c4ff103c28049b90666d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxImageArrayLayers&lt;/code&gt; is the maximum number of layers (&lt;code&gt;arrayLayers&lt;/code&gt;) for an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f093ad851429c3cd89e882480583bdb267fa6157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxImageDimension1D&lt;/code&gt; is the maximum dimension (&lt;code&gt;width&lt;/code&gt;) supported for all images created with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_1D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b2f50b5ba5b5956227a6970720d0332685fe5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxImageDimension2D&lt;/code&gt; is the maximum dimension (&lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;) supported for all images created with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and without &lt;code&gt;VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT&lt;/code&gt; set in &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9018d13b297c10da1811380843a36708069ac669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxImageDimension3D&lt;/code&gt; is the maximum dimension (&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, or &lt;code&gt;depth&lt;/code&gt;) supported for all images created with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_3D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a9db3c3b20f22545f8a32b91313baf56e3ebcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxImageDimensionCube&lt;/code&gt; is the maximum dimension (&lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;) supported for all images created with an &lt;code&gt;imageType&lt;/code&gt; of &lt;code&gt;VK_IMAGE_TYPE_2D&lt;/code&gt; and with &lt;code&gt;VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT&lt;/code&gt; set in &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6c73a334556056b785f100e7390478eb0a5e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxInterpolationOffset&lt;/code&gt; is the maximum positive offset value for the &lt;code&gt;offset&lt;/code&gt; operand of the &lt;code&gt;InterpolateAtOffset&lt;/code&gt; extended instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815cc37fd9b5680e79a4056555b0d8ddd1276a80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxMemoryAllocationCount&lt;/code&gt; is the maximum number of device memory allocations, as created by &lt;a href=&quot;#vkAllocateMemory&quot;&gt;vkAllocateMemory&lt;/a&gt;, which &lt;strong&gt;can&lt;/strong&gt; simultaneously exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad68a5b46e8b82f0bf56018a45c1ffe5aca6576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxMipLevels&lt;/code&gt; is the maximum number of mipmap levels. &lt;code&gt;maxMipLevels&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; either be equal to 1 (valid only if &lt;code&gt;tiling&lt;/code&gt; is &lt;code&gt;VK_IMAGE_TILING_LINEAR&lt;/code&gt;) or be equal to &amp;lceil;log&lt;sub&gt;2&lt;/sub&gt;(max(&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;depth&lt;/code&gt;))&amp;rceil; + 1. &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;depth&lt;/code&gt; are taken from the corresponding members of &lt;code&gt;maxExtent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89994b7cc683bbaf90260f3dbba50105ec6c16f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorInputAttachments&lt;/code&gt; is the maximum number of input attachments that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt; count against this limit. A descriptor is accessible to a pipeline shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. These are only supported for the fragment stage. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-inputattachment&quot;&gt;html/vkspec.html#descriptorsets-inputattachment&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b07a735f9de3572d3f714fa696916911671e25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorSampledImages&lt;/code&gt; is the maximum number of sampled images that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER&lt;/code&gt; count against this limit. A descriptor is accessible to a pipeline shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-combinedimagesampler&quot;&gt;html/vkspec.html#descriptorsets-combinedimagesampler&lt;/a&gt;, &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampledimage&quot;&gt;html/vkspec.html#descriptorsets-sampledimage&lt;/a&gt;, and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformtexelbuffer&quot;&gt;html/vkspec.html#descriptorsets-uniformtexelbuffer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555eaf5fc9148e5ab9e74bb9e8d7d39ab23f2b2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorSamplers&lt;/code&gt; is the maximum number of samplers that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt; count against this limit. A descriptor is accessible to a shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampler&quot;&gt;html/vkspec.html#descriptorsets-sampler&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-combinedimagesampler&quot;&gt;html/vkspec.html#descriptorsets-combinedimagesampler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2997d40c1b671be9ace707b1e94605ca7895dc2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorStorageBuffers&lt;/code&gt; is the maximum number of storage buffers that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. A descriptor is accessible to a pipeline shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagebuffer&quot;&gt;html/vkspec.html#descriptorsets-storagebuffer&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagebufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-storagebufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4c5683168044d9b967b34f604821a29b6a4c1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorStorageImages&lt;/code&gt; is the maximum number of storage images that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER&lt;/code&gt; count against this limit. A descriptor is accessible to a pipeline shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storageimage&quot;&gt;html/vkspec.html#descriptorsets-storageimage&lt;/a&gt;, and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storagetexelbuffer&quot;&gt;html/vkspec.html#descriptorsets-storagetexelbuffer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79130a8d37d03e03485511f869ba8ecb115a8151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageDescriptorUniformBuffers&lt;/code&gt; is the maximum number of uniform buffers that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt; count against this limit. A descriptor is accessible to a shader stage when the &lt;code&gt;stageFlags&lt;/code&gt; member of the &lt;code&gt;VkDescriptorSetLayoutBinding&lt;/code&gt; structure has the bit for that shader stage set. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformbuffer&quot;&gt;html/vkspec.html#descriptorsets-uniformbuffer&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-uniformbufferdynamic&quot;&gt;html/vkspec.html#descriptorsets-uniformbufferdynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5efcbb7163176a5458c168b4775a331ca99c28d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPerStageResources&lt;/code&gt; is the maximum number of resources that &lt;strong&gt;can&lt;/strong&gt; be accessible to a single shader stage in a pipeline layout. Descriptors with a type of &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_IMAGE&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;, &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;, or &lt;code&gt;VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT&lt;/code&gt; count against this limit. For the fragment shader stage the framebuffer color attachments also count against this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae37f790f880737f235835a3cc0145603e6b7ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxPushConstantsSize&lt;/code&gt; is the maximum size, in bytes, of the pool of push constant memory. For each of the push constant ranges indicated by the &lt;code&gt;pPushConstantRanges&lt;/code&gt; member of the &lt;code&gt;VkPipelineLayoutCreateInfo&lt;/code&gt; structure, (&lt;code&gt;offset&lt;/code&gt; + &lt;code&gt;size&lt;/code&gt;) &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176658ea0ee6af1e84d4e35da6c27e5aa396e017" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxResourceSize&lt;/code&gt; is an upper bound on the total image size in bytes, inclusive of all image subresources. Implementations &lt;strong&gt;may&lt;/strong&gt; have an address space limit on total size of a resource, which is advertised by this property. &lt;code&gt;maxResourceSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be at least 2&lt;sup&gt;31&lt;/sup&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c849cecfd01524f7afd2afea568ef6813a5307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSampleMaskWords&lt;/code&gt; is the maximum number of array elements of a variable decorated with the &lt;code&gt;SampleMask&lt;/code&gt; built-in decoration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add83e0ce4ecfba9d270eb2db41641b59996ff6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSamplerAllocationCount&lt;/code&gt; is the maximum number of sampler objects, as created by &lt;a href=&quot;#vkCreateSampler&quot;&gt;vkCreateSampler&lt;/a&gt;, which &lt;strong&gt;can&lt;/strong&gt; simultaneously exist on a device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d77e3715bf083b3317dd112ee422553988906e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSamplerAnisotropy&lt;/code&gt; is the maximum degree of sampler anisotropy. The maximum degree of anisotropic filtering used for an image sampling operation is the minimum of the &lt;code&gt;maxAnisotropy&lt;/code&gt; member of the &lt;code&gt;VkSamplerCreateInfo&lt;/code&gt; structure and this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#samplers-maxAnisotropy&quot;&gt;html/vkspec.html#samplers-maxAnisotropy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eedb0780c23032d1602ad42d268318209adaed0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSamplerLodBias&lt;/code&gt; is the maximum absolute sampler level of detail bias. The sum of the &lt;code&gt;mipLodBias&lt;/code&gt; member of the &lt;code&gt;VkSamplerCreateInfo&lt;/code&gt; structure and the &lt;code&gt;Bias&lt;/code&gt; operand of image sampling operations in shader modules (or 0 if no &lt;code&gt;Bias&lt;/code&gt; operand is provided to an image sampling operation) are clamped to the range [-&lt;code&gt;maxSamplerLodBias&lt;/code&gt;,+&lt;code&gt;maxSamplerLodBias&lt;/code&gt;]. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#samplers-mipLodBias&quot;&gt;html/vkspec.html#samplers-mipLodBias&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd240bbfa25e78f005f465b24dc37fefb0c09fb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSets&lt;/code&gt; is the maximum number of descriptor sets that &lt;strong&gt;can&lt;/strong&gt; be allocated from the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e823552ebae932d42231bead730c82c972caac79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823528440040d596e07513a2fa0133986fa04cee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxStorageBufferRange&lt;/code&gt; is the maximum value that &lt;strong&gt;can&lt;/strong&gt; be specified in the &lt;code&gt;range&lt;/code&gt; member of any &lt;a href=&quot;#VkDescriptorBufferInfo&quot;&gt;VkDescriptorBufferInfo&lt;/a&gt; structures passed to a call to &lt;a href=&quot;#vkUpdateDescriptorSets&quot;&gt;vkUpdateDescriptorSets&lt;/a&gt; for descriptors of type &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e386094eabc52915dc7223a2e3a5a380c17923a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationControlPerPatchOutputComponents&lt;/code&gt; is the maximum number of components of per-patch output variables which &lt;strong&gt;can&lt;/strong&gt; be output from the tessellation control shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c720f52d0f622b394239fbaffe7a694ac15323" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationControlPerVertexInputComponents&lt;/code&gt; is the maximum number of components of input variables which &lt;strong&gt;can&lt;/strong&gt; be provided as per-vertex inputs to the tessellation control shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f27c4f72caa4d807cf18deeb9a63fe875dd789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationControlPerVertexOutputComponents&lt;/code&gt; is the maximum number of components of per-vertex output variables which &lt;strong&gt;can&lt;/strong&gt; be output from the tessellation control shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605a853af18db57c657475fea020d6740d9639ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationControlTotalOutputComponents&lt;/code&gt; is the maximum total number of components of per-vertex and per-patch output variables which &lt;strong&gt;can&lt;/strong&gt; be output from the tessellation control shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6062ffa944396242e4046a94015e8365e2da560" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationEvaluationInputComponents&lt;/code&gt; is the maximum number of components of input variables which &lt;strong&gt;can&lt;/strong&gt; be provided as per-vertex inputs to the tessellation evaluation shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df8acb347560e435e09a3ffd7575a2b8fde0714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationEvaluationOutputComponents&lt;/code&gt; is the maximum number of components of per-vertex output variables which &lt;strong&gt;can&lt;/strong&gt; be output from the tessellation evaluation shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69efa1e456f83165231322dcc9baecf91990bc5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationGenerationLevel&lt;/code&gt; is the maximum tessellation generation level supported by the fixed-function tessellation primitive generator. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#tessellation&quot;&gt;html/vkspec.html#tessellation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96a182127cf98ff7dfa2413ab020ba428a8baf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTessellationPatchSize&lt;/code&gt; is the maximum patch size, in vertices, of patches that &lt;strong&gt;can&lt;/strong&gt; be processed by the tessellation control shader and tessellation primitive generator. The &lt;code&gt;patchControlPoints&lt;/code&gt; member of the &lt;code&gt;VkPipelineTessellationStateCreateInfo&lt;/code&gt; structure specified at pipeline creation time and the value provided in the &lt;code&gt;OutputVertices&lt;/code&gt; execution mode of shader modules &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#tessellation&quot;&gt;html/vkspec.html#tessellation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f1a9b4fad6c2b0847b95769c6286c17a3e40d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTexelBufferElements&lt;/code&gt; is the maximum number of addressable texels for a buffer view created on a buffer which was created with the &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt; or &lt;code&gt;VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt; set in the &lt;code&gt;usage&lt;/code&gt; member of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77edf069d77b5b946978c8d3793c577435490d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTexelGatherOffset&lt;/code&gt; is the maximum offset value for the &lt;code&gt;Offset&lt;/code&gt; or &lt;code&gt;ConstOffsets&lt;/code&gt; image operands of any of the &lt;code&gt;OpImage&lt;/code&gt;*&lt;code&gt;Gather&lt;/code&gt; image instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa31693dd4034dbe68271fcaea960592723b287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTexelOffset&lt;/code&gt; is the maximum offset value for the &lt;code&gt;ConstOffset&lt;/code&gt; image operand of any of the &lt;code&gt;OpImageSample&lt;/code&gt;* or &lt;code&gt;OpImageFetch&lt;/code&gt;* image instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bfcccbe94204aac21d4757a810a2bd4c071609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxUniformBufferRange&lt;/code&gt; is the maximum value that &lt;strong&gt;can&lt;/strong&gt; be specified in the &lt;code&gt;range&lt;/code&gt; member of any &lt;a href=&quot;#VkDescriptorBufferInfo&quot;&gt;VkDescriptorBufferInfo&lt;/a&gt; structures passed to a call to &lt;a href=&quot;#vkUpdateDescriptorSets&quot;&gt;vkUpdateDescriptorSets&lt;/a&gt; for descriptors of type &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a1d8b04abc03ca21cbedf679323764e92394a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxVertexInputAttributeOffset&lt;/code&gt; is the maximum vertex input attribute offset that &lt;strong&gt;can&lt;/strong&gt; be added to the vertex input binding stride. The &lt;code&gt;offset&lt;/code&gt; member of the &lt;code&gt;VkVertexInputAttributeDescription&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-input&quot;&gt;html/vkspec.html#fxvertex-input&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bd8507721a61a614df233fa187e6a57d18f949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxVertexInputAttributes&lt;/code&gt; is the maximum number of vertex input attributes that &lt;strong&gt;can&lt;/strong&gt; be specified for a graphics pipeline. These are described in the array of &lt;code&gt;VkVertexInputAttributeDescription&lt;/code&gt; structures that are provided at graphics pipeline creation time via the &lt;code&gt;pVertexAttributeDescriptions&lt;/code&gt; member of the &lt;code&gt;VkPipelineVertexInputStateCreateInfo&lt;/code&gt; structure. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-attrib&quot;&gt;html/vkspec.html#fxvertex-attrib&lt;/a&gt; and &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-input&quot;&gt;html/vkspec.html#fxvertex-input&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940df5ba31b679ec21ebfcb8ef27095db84fda75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxVertexInputBindingStride&lt;/code&gt; is the maximum vertex input binding stride that &lt;strong&gt;can&lt;/strong&gt; be specified in a vertex input binding. The &lt;code&gt;stride&lt;/code&gt; member of the &lt;code&gt;VkVertexInputBindingDescription&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-input&quot;&gt;html/vkspec.html#fxvertex-input&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8160ca16835f7cfe5ae091e2c503dedc55bf034f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxVertexInputBindings&lt;/code&gt; is the maximum number of vertex buffers that &lt;strong&gt;can&lt;/strong&gt; be specified for providing vertex attributes to a graphics pipeline. These are described in the array of &lt;code&gt;VkVertexInputBindingDescription&lt;/code&gt; structures that are provided at graphics pipeline creation time via the &lt;code&gt;pVertexBindingDescriptions&lt;/code&gt; member of the &lt;code&gt;VkPipelineVertexInputStateCreateInfo&lt;/code&gt; structure. The &lt;code&gt;binding&lt;/code&gt; member of &lt;code&gt;VkVertexInputBindingDescription&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fxvertex-input&quot;&gt;html/vkspec.html#fxvertex-input&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055020ba68800818260f99938fc9c2bd086ce94f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxVertexOutputComponents&lt;/code&gt; is the maximum number of components of output variables which &lt;strong&gt;can&lt;/strong&gt; be output by a vertex shader. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#shaders-vertex&quot;&gt;html/vkspec.html#shaders-vertex&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f91ee3bb42e980455bd826e32328c1361c3e3c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxViewportDimensions&lt;/code&gt;[2] are the maximum viewport dimensions in the X (width) and Y (height) dimensions, respectively. The maximum viewport dimensions &lt;strong&gt;must&lt;/strong&gt; be greater than or equal to the largest image which &lt;strong&gt;can&lt;/strong&gt; be created and used as a framebuffer attachment. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#vertexpostproc-viewport&quot;&gt;Controlling the Viewport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f230612f4758c5ea0b054d2c5d266953f3eea89c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxViewports&lt;/code&gt; is the maximum number of active viewports. The &lt;code&gt;viewportCount&lt;/code&gt; member of the &lt;code&gt;VkPipelineViewportStateCreateInfo&lt;/code&gt; structure that is provided at pipeline creation &lt;strong&gt;must&lt;/strong&gt; be less than or equal to this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e18f25b4c322f28db2dfebf9431353c2ddba454" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; and &lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; match the memory requirements of the calling command&amp;rsquo;s &lt;code&gt;image&lt;/code&gt;, as described in section &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-association&quot;&gt;html/vkspec.html#resources-association&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a70cf6a41fb71fe2aaa4ac9b20a41e45ab6f2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is a &lt;code&gt;VkDeviceMemory&lt;/code&gt; object describing the device memory to attach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f9d687fe50c7add2971f322377d99c7409395c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object describing the device memory to attach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f157d01098f7bd2c2b88264f2d818adeac43722c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object that the range of the resource is bound to. If &lt;code&gt;memory&lt;/code&gt; is &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, the range is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82518f0842300e01ae260300eec50a46589a0c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object that the sparse image blocks of the image are bound to. If &lt;code&gt;memory&lt;/code&gt; is &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, the sparse image blocks are unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4708888be30aa507d1da7c3e269c2b11a276336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object to be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a5132a72c0d70a571d32f04dbd306797ea48b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object to be mapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccbf6c2a71e23cfdd545fd587ff5a1c9a7cbefc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the memory object being queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b852ab3c5a09200359d02c68bc0ce7d8d0de2cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the memory object to be unmapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1ed6158c71f345075fbf64170975cdd2fe5b8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt; is the memory object to which this range belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d47a24bba8e449e7fa3c85d737fc7a2a851956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkDeviceMemory&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014a7d5e25d74b01f9dd2d92d89ece7625ffcd48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; currently be mapped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159feb9a4db146ffdc907a37693dcb0df1b2b8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated using one of the memory types allowed in the &lt;code&gt;memoryTypeBits&lt;/code&gt; member of the &lt;code&gt;VkMemoryRequirements&lt;/code&gt; structure returned from a call to &lt;code&gt;vkGetBufferMemoryRequirements&lt;/code&gt; with &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac46595d84fb5b580e861ef0062b77004461579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been allocated using one of the memory types allowed in the &lt;code&gt;memoryTypeBits&lt;/code&gt; member of the &lt;code&gt;VkMemoryRequirements&lt;/code&gt; structure returned from a call to &lt;code&gt;vkGetImageMemoryRequirements&lt;/code&gt; with &lt;code&gt;image&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a04a3d3b14de29791466ae02f713b5f93cb0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a memory type that reports &lt;code&gt;VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb96e3d515cccab5cce1c024808e3ff1e8a67da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created with a memory type that reports &lt;code&gt;VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd8afa6f693b28fa57d0ee4346b84dd534372e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; have been created, allocated, or retrieved from &lt;code&gt;device&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b020401ad7e16581b7174a13a44423140f1bba0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not currently be mapped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cb25507bc735b65a31dd167b6549f315a98947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryBarrierCount&lt;/code&gt; is the length of the &lt;code&gt;pMemoryBarriers&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb9e8ea36ca5f174d483249f72d8471bf3338a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryHeapCount&lt;/code&gt; is the number of valid elements in the &lt;code&gt;memoryHeaps&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc01f67649d3d0ff03e55001ac0581e46d6b451d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryHeaps&lt;/code&gt; is an array of &lt;a href=&quot;#VkMemoryHeap&quot;&gt;VkMemoryHeap&lt;/a&gt; structures describing the &lt;em&gt;memory heaps&lt;/em&gt; from which memory &lt;strong&gt;can&lt;/strong&gt; be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a35388836fc30046020cb420c5f983a7519e5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt; is an offset into &lt;code&gt;VkDeviceMemory&lt;/code&gt; object. If &lt;code&gt;memory&lt;/code&gt; is &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, this value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5acb9e19c2bf9ce6750b2ffd337989f29ca27a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt; is the offset into the &lt;code&gt;VkDeviceMemory&lt;/code&gt; object to bind the resource range to. If &lt;code&gt;memory&lt;/code&gt; is &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;, this value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ee0451a721d245970faf89535606a5baa040e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt; is the start offset of the region of &lt;code&gt;memory&lt;/code&gt; which is to be bound to the buffer. The number of bytes returned in the &lt;code&gt;VkMemoryRequirements&lt;/code&gt;::&lt;code&gt;size&lt;/code&gt; member in &lt;code&gt;memory&lt;/code&gt;, starting from &lt;code&gt;memoryOffset&lt;/code&gt; bytes, will be bound to the specified buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e2b467aa9f4c180d96df4ed64862237ba0b4af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt; is the start offset of the region of &lt;code&gt;memory&lt;/code&gt; which is to be bound to the image. The number of bytes returned in the &lt;code&gt;VkMemoryRequirements&lt;/code&gt;::&lt;code&gt;size&lt;/code&gt; member in &lt;code&gt;memory&lt;/code&gt;, starting from &lt;code&gt;memoryOffset&lt;/code&gt; bytes, will be bound to the specified image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41311abd210682b25aca2fab08ea14b1ba0dd6d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an integer multiple of the &lt;code&gt;alignment&lt;/code&gt; member of the &lt;code&gt;VkMemoryRequirements&lt;/code&gt; structure returned from a call to &lt;code&gt;vkGetBufferMemoryRequirements&lt;/code&gt; with &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd1e2be207ed651ebcf1b7d01cb506655b623a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an integer multiple of the &lt;code&gt;alignment&lt;/code&gt; member of the &lt;code&gt;VkMemoryRequirements&lt;/code&gt; structure returned from a call to &lt;code&gt;vkGetImageMemoryRequirements&lt;/code&gt; with &lt;code&gt;image&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdee5988c79f10a0c11486f1fbd07f72c7fa12b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryOffset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of &lt;code&gt;memory&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75834150a61936d543c3810f7cfc223e58ce144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryRangeCount&lt;/code&gt; is the length of the &lt;code&gt;pMemoryRanges&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57ed821ccd50b44af969bd93fb97a851d3b3ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryRangeCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22879e5228fb70635ed45b95e4d99198e2a1ca08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryTypeBits&lt;/code&gt; is a bitmask and contains one bit set for every supported memory type for the resource. Bit &lt;code&gt;i&lt;/code&gt; is set if and only if the memory type &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;VkPhysicalDeviceMemoryProperties&lt;/code&gt; structure for the physical device is supported for the resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428e35624b2362c2dbb2c6a7856422ff407aa875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryTypeCount&lt;/code&gt; is the number of valid elements in the &lt;code&gt;memoryTypes&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa61b9d8647ba31c5b1300dd37b20146e6befab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryTypeIndex&lt;/code&gt; is the memory type index, which selects the properties of the memory to be allocated, as well as the heap the memory will come from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e555369aadd8916221fae6ed70afa2b7726a6b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoryTypes&lt;/code&gt; is an array of &lt;a href=&quot;#VkMemoryType&quot;&gt;VkMemoryType&lt;/a&gt; structures describing the &lt;em&gt;memory types&lt;/em&gt; that &lt;strong&gt;can&lt;/strong&gt; be used to access memory allocated from the heaps specified by &lt;code&gt;memoryHeaps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bed54da59b244e0b3521b100b9e2139cc749c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDepth&lt;/code&gt; and &lt;code&gt;maxDepth&lt;/code&gt; are the depth range for the viewport. It is valid for &lt;code&gt;minDepth&lt;/code&gt; to be greater than or equal to &lt;code&gt;maxDepth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada3c83fd255ee7ee02b9a1e3ad00161559d47fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDepth&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5238086c370afd7c25459b894ec38754dc12ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDepthBounds&lt;/code&gt; and &lt;code&gt;maxDepthBounds&lt;/code&gt; define the range of values used in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-dbt&quot;&gt;depth bounds test&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fda8683acfc79ef7ea9a3b9ab0de9af54b4083f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDepthBounds&lt;/code&gt; is the lower bound of the range of depth values used in the depth bounds test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96843e8de49a6afc390708dd1e76a288deb6dc01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDepthBounds&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe7a834c29b611fd9864bb41f23b5c662d310a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minFilter&lt;/code&gt; and &lt;code&gt;magFilter&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570466d17a95450e6f9950570d596911f36b191e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minFilter&lt;/code&gt; is a &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; value specifying the minification filter to apply to lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98605477e0038cd760595c7a0ce5c4f9c997d591" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minFilter&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkFilter&quot;&gt;VkFilter&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc46e4f40826396d5db694ebd67affbd46d03fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minImageTransferGranularity&lt;/code&gt; is the minimum granularity supported for image transfer operations on the queues in this queue family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5ccb49b7085d414948cc00ede4b0731fe78afe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minInterpolationOffset&lt;/code&gt; is the minimum negative offset value for the &lt;code&gt;offset&lt;/code&gt; operand of the &lt;code&gt;InterpolateAtOffset&lt;/code&gt; extended instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145c10464f36bde6864868f2295eae9c3e6501fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minLod&lt;/code&gt; and &lt;code&gt;maxLod&lt;/code&gt; are the values used to clamp the computed level-of-detail value, as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#textures-level-of-detail-operation&quot;&gt;Level-of-Detail Operation&lt;/a&gt; section. &lt;code&gt;maxLod&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than or equal to &lt;code&gt;minLod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875f979f837afbf2d31b411c48d6577b37342685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minLod&lt;/code&gt; and &lt;code&gt;maxLod&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3938cabc1640adf5c2243d4b14ec1a31aff5533e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minMemoryMapAlignment&lt;/code&gt; is the minimum &lt;strong&gt;required&lt;/strong&gt; alignment, in bytes, of host visible memory allocations within the host address space. When mapping a memory allocation with &lt;a href=&quot;#vkMapMemory&quot;&gt;vkMapMemory&lt;/a&gt;, subtracting &lt;code&gt;offset&lt;/code&gt; bytes from the returned pointer will always produce an integer multiple of this limit. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#memory-device-hostaccess&quot;&gt;html/vkspec.html#memory-device-hostaccess&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ee8853cbce4c5a5944868e1c7190b01b685abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minSampleShading&lt;/code&gt; is the minimum fraction of sample shading, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-sampleshading&quot;&gt;Sample Shading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ceb7baa57542d1303a50227279c72989fb00fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minSampleShading&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be in the range [0,1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eebdc53ca81dbaccc6c1051bbc6bf5c62a1beaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minStorageBufferOffsetAlignment&lt;/code&gt; is the minimum &lt;strong&gt;required&lt;/strong&gt; alignment, in bytes, for the &lt;code&gt;offset&lt;/code&gt; member of the &lt;code&gt;VkDescriptorBufferInfo&lt;/code&gt; structure for storage buffers. When a descriptor of type &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC&lt;/code&gt; is updated, the &lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an integer multiple of this limit. Similarly, dynamic offsets for storage buffers &lt;strong&gt;must&lt;/strong&gt; be multiples of this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eba95041ab0b9af7a45c34527a54ab8e9ffe606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minTexelBufferOffsetAlignment&lt;/code&gt; is the minimum &lt;strong&gt;required&lt;/strong&gt; alignment, in bytes, for the &lt;code&gt;offset&lt;/code&gt; member of the &lt;code&gt;VkBufferViewCreateInfo&lt;/code&gt; structure for texel buffers. When a buffer view is created for a buffer which was created with &lt;code&gt;VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT&lt;/code&gt; or &lt;code&gt;VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT&lt;/code&gt; set in the &lt;code&gt;usage&lt;/code&gt; member of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; structure, the &lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an integer multiple of this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dff4f1f9443d968b0ca28f14b46edf159afbfef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minTexelGatherOffset&lt;/code&gt; is the minimum offset value for the &lt;code&gt;Offset&lt;/code&gt; or &lt;code&gt;ConstOffsets&lt;/code&gt; image operands of any of the &lt;code&gt;OpImage&lt;/code&gt;*&lt;code&gt;Gather&lt;/code&gt; image instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2b4f13eb938cf1040df041b00359db37f52cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minTexelOffset&lt;/code&gt; is the minimum offset value for the &lt;code&gt;ConstOffset&lt;/code&gt; image operand of any of the &lt;code&gt;OpImageSample&lt;/code&gt;* or &lt;code&gt;OpImageFetch&lt;/code&gt;* image instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfff8bfc0f3019161e114e45cbb6b3d78d66552f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minUniformBufferOffsetAlignment&lt;/code&gt; is the minimum &lt;strong&gt;required&lt;/strong&gt; alignment, in bytes, for the &lt;code&gt;offset&lt;/code&gt; member of the &lt;code&gt;VkDescriptorBufferInfo&lt;/code&gt; structure for uniform buffers. When a descriptor of type &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC&lt;/code&gt; is updated, the &lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an integer multiple of this limit. Similarly, dynamic offsets for uniform buffers &lt;strong&gt;must&lt;/strong&gt; be multiples of this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fac1647e9443d3027f21824429fe7d8f39e50ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor&lt;/code&gt; is the minor version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca4469a4fdca5ddedd638e04ac64a91c082afb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevel&lt;/code&gt; is the mipmap level to copy from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2695dda85962eb308d2693f4b7a743d51f131a83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevel&lt;/code&gt; selects the mipmap level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed8f9a972237d8eb40f9601947901aafaec4574" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevel&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the &lt;code&gt;mipLevels&lt;/code&gt; specified in &lt;a href=&quot;#VkImageCreateInfo&quot;&gt;VkImageCreateInfo&lt;/a&gt; when the image was created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c13da628d1ee3ab85a0a9165dfc4e4d2ffbe015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevels&lt;/code&gt; describes the number of levels of detail available for minified sampling of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c78d0c967c26ff3d5789fea31c61e079c15e8ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevels&lt;/code&gt; is 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094389c68f245b04f90ac695e0b685a41e01ce45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevels&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be greater than &lt;code&gt;0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86a6e618dbd2ab9ccbba775fe66e1cd7bbefd68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLevels&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &amp;lfloor;log&lt;sub&gt;2&lt;/sub&gt;(max(&lt;code&gt;extent.width&lt;/code&gt;, &lt;code&gt;extent.height&lt;/code&gt;, &lt;code&gt;extent.depth&lt;/code&gt;))&amp;rfloor; + 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d131abfb4c5b578d1ab9e13b9d818b0c3e4ea63b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipLodBias&lt;/code&gt; is the bias to be added to mipmap LOD calculation and bias provided by image sampling functions in SPIR-V, as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#textures-level-of-detail-operation&quot;&gt;Level-of-Detail Operation&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671118e400ca7feb3dc28690e9ac74d99fe0457c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipmapMode&lt;/code&gt; is a &lt;a href=&quot;#VkSamplerMipmapMode&quot;&gt;VkSamplerMipmapMode&lt;/a&gt; value specifying the mipmap filter to apply to lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b895fae7d664bb73b1a0225f90f581141c6a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipmapMode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_SAMPLER_MIPMAP_MODE_NEAREST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d47633c692ca6deb6739731ff6dd6024e5e43da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipmapMode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkSamplerMipmapMode&quot;&gt;VkSamplerMipmapMode&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40192c5bbb1654139091f02dfcc16903f7e16485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mipmapPrecisionBits&lt;/code&gt; is the number of bits of division that the LOD calculation for mipmap fetching get snapped to when determining the contribution from each mip level to the mip filtered results. 2&lt;sup&gt;&lt;code&gt;mipmapPrecisionBits&lt;/code&gt;&lt;/sup&gt; is the actual number of divisions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a9a46b74707eb615e5a8f9b7ce4e154a3de896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; is a &lt;code&gt;VkShaderModule&lt;/code&gt; object that contains the shader for this stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8671c41d90a3fac0493496f6fdc68e7502de5933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;code&gt;VkShaderModule&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbf118705434779d0c800537920246ee1b14ef2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiDrawIndirect&lt;/code&gt; indicates whether multiple draw indirect is supported. If this feature is not enabled, the &lt;code&gt;drawCount&lt;/code&gt; parameter to the &lt;code&gt;vkCmdDrawIndirect&lt;/code&gt; and &lt;code&gt;vkCmdDrawIndexedIndirect&lt;/code&gt; commands &lt;strong&gt;must&lt;/strong&gt; be 0 or 1. The &lt;code&gt;maxDrawIndirectCount&lt;/code&gt; member of the &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; also be 1 if this feature is not supported. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-limits-maxDrawIndirectCount&quot;&gt;maxDrawIndirectCount&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd303795fab681371cddd10daa22878aca885f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiViewport&lt;/code&gt; indicates whether more than one viewport is supported. If this feature is not enabled, the &lt;code&gt;viewportCount&lt;/code&gt; and &lt;code&gt;scissorCount&lt;/code&gt; members of the &lt;code&gt;VkPipelineViewportStateCreateInfo&lt;/code&gt; structure &lt;strong&gt;must&lt;/strong&gt; be set to 1. Similarly, the &lt;code&gt;viewportCount&lt;/code&gt; parameter to the &lt;code&gt;vkCmdSetViewport&lt;/code&gt; command and the &lt;code&gt;scissorCount&lt;/code&gt; parameter to the &lt;code&gt;vkCmdSetScissor&lt;/code&gt; command &lt;strong&gt;must&lt;/strong&gt; be 1, and the &lt;code&gt;firstViewport&lt;/code&gt; parameter to the &lt;code&gt;vkCmdSetViewport&lt;/code&gt; command and the &lt;code&gt;firstScissor&lt;/code&gt; parameter to the &lt;code&gt;vkCmdSetScissor&lt;/code&gt; command &lt;strong&gt;must&lt;/strong&gt; be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150c11cc9f91ca8622310f4b23c3f67065bf964c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newLayout&lt;/code&gt; is the new layout in an &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-image-layout-transitions&quot;&gt;image layout transition&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8d1e58bd6b35d6d9a30a06ea710455c7b59f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4dc73ee0958e021db7fc5c70f46d463072f85f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not be &lt;code&gt;VK_IMAGE_LAYOUT_UNDEFINED&lt;/code&gt; or &lt;code&gt;VK_IMAGE_LAYOUT_PREINITIALIZED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c592bba01f7fc9fe9135368442694694b228466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonCoherentAtomSize&lt;/code&gt; is the size and alignment in bytes that bounds concurrent access to &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#memory-device-hostaccess&quot;&gt;host-mapped device memory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8933462c0596a50af851737c59cbf2f7bb24824a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;object&lt;/code&gt; is the name of the resulting C type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699539cdaa6b4c97b0c6a46db64260cbfde75238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;occlusionQueryEnable&lt;/code&gt; indicates whether the command buffer &lt;strong&gt;can&lt;/strong&gt; be executed while an occlusion query is active in the primary command buffer. If this is &lt;code&gt;VK_TRUE&lt;/code&gt;, then this command buffer &lt;strong&gt;can&lt;/strong&gt; be executed whether the primary command buffer has an occlusion query active or not. If this is &lt;code&gt;VK_FALSE&lt;/code&gt;, then the primary command buffer &lt;strong&gt;must&lt;/strong&gt; not have an occlusion query active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5288e78f48ac5ddabf4f655c0cae73ebfbf595d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;occlusionQueryPrecise&lt;/code&gt; indicates whether occlusion queries returning actual sample counts are supported. Occlusion queries are created in a &lt;code&gt;VkQueryPool&lt;/code&gt; by specifying the &lt;code&gt;queryType&lt;/code&gt; of &lt;code&gt;VK_QUERY_TYPE_OCCLUSION&lt;/code&gt; in the &lt;code&gt;VkQueryPoolCreateInfo&lt;/code&gt; structure which is passed to &lt;code&gt;vkCreateQueryPool&lt;/code&gt;. If this feature is enabled, queries of this type &lt;strong&gt;can&lt;/strong&gt; enable &lt;code&gt;VK_QUERY_CONTROL_PRECISE_BIT&lt;/code&gt; in the &lt;code&gt;flags&lt;/code&gt; parameter to &lt;code&gt;vkCmdBeginQuery&lt;/code&gt;. If this feature is not supported, the implementation supports only boolean occlusion queries. When any samples are passed, boolean queries will return a non-zero result value, otherwise a result value of zero is returned. When this feature is enabled and &lt;code&gt;VK_QUERY_CONTROL_PRECISE_BIT&lt;/code&gt; is set, occlusion queries will report the actual number of samples passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c54cde910f4450ff599ca97b2e0bb2ad90b60b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset.x&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of the sparse image block width (&lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt;::&lt;code&gt;imageGranularity.width&lt;/code&gt;) of the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b81c15256e34f7db663214c38cae8ddd7a154bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset.y&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of the sparse image block height (&lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt;::&lt;code&gt;imageGranularity.height&lt;/code&gt;) of the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030f7246aefa8405eec1eb3a7d369f5601255a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset.z&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of the sparse image block depth (&lt;code&gt;VkSparseImageFormatProperties&lt;/code&gt;::&lt;code&gt;imageGranularity.depth&lt;/code&gt;) of the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3471ad9b3ac1c1e897149133e5741738d0c0ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are the start offset and size, respectively, consumed by the range. Both &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are in units of bytes and &lt;strong&gt;must&lt;/strong&gt; be a multiple of 4. The layout of the push constant variables is specified in the shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c4488e1081fb861339210ace12ffd240dcc0f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; are the coordinates of the first texel within the image subresource to bind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726b8f1f15f05470c9ac0fa5fc608da5cab36257" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is a &lt;a href=&quot;#VkOffset2D&quot;&gt;VkOffset2D&lt;/a&gt; specifying the rectangle offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003472b223896156146833c89d18ee99e07b232d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is a byte offset of this attribute relative to the start of an element in the vertex input binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1706322663c829724eb9c4dfe16474a4df8f456c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is a zero-based byte offset from the beginning of the memory object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ecc3f652313524a6346fe07b26a922d715c91b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is an offset in bytes from the base address of the buffer. Accesses to the buffer view from shaders use addressing that is relative to this starting offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e0f58bf47c0ccf5c16294c0d7f5f6deab81c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is an offset in bytes into the backing memory for &lt;code&gt;buffer&lt;/code&gt;; this is relative to the base offset as bound to the buffer (see &lt;a href=&quot;#vkBindBufferMemory&quot;&gt;vkBindBufferMemory&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647898757c33e3046424d06b380cc4dd5ca6baba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the byte offset from the start of the image where the image subresource begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fadf0fdacf35d8503e2c8adcc860777ff3ef97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the byte offset into &lt;code&gt;buffer&lt;/code&gt; where parameters begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834a3f906188bb1e546762a77050dfa8cdd108a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the byte offset of the specialization constant value within the supplied data buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc53bd1ac6c9dcd0c72af2d16f99f0f2b5e30d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the offset in bytes from the start of &lt;code&gt;buffer&lt;/code&gt;. Access to buffer memory via this descriptor uses addressing that is relative to this starting offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644a9a004d0209000456f0c0859852b84beb7922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the start offset of the push constant range to update, in units of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430822738ef53a0e192df6240dacba9c9f4a2b15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the starting offset in bytes within &lt;code&gt;buffer&lt;/code&gt; used in index buffer address calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6968426cba29f9edad7c46a887b2d4f9263450c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; is the zero-based byte offset from the beginning of the memory object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca693400a763168546c469f3c8b27926a76847c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e38d9f3fc77b9be8cb31b31248b4716804bfe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;minTexelBufferOffsetAlignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eaf8aed766be2752b004dce8973d87b56790eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a multiple of &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;nonCoherentAtomSize&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7ccf10cba1406e3586fb8f107c1a5a45ec02ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxPushConstantsSize&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b80373d8a289ed22f8534bff2b442a7d1ddd96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than or equal to &lt;code&gt;VkPhysicalDeviceLimits&lt;/code&gt;::&lt;code&gt;maxVertexInputAttributeOffset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63c64865fe7a4f0752c459aa3c2e2acd5ee2b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c9c5ff058f5ec082304fb524c62bd7a70b4edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be less than the size of &lt;code&gt;memory&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316430d6cc39d42ab2091b5b33ba437ecb391bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldLayout&lt;/code&gt; is the old layout in an &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-image-layout-transitions&quot;&gt;image layout transition&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93040d80d8593155fab6f8b49f72973ac5779e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;VK_IMAGE_LAYOUT_UNDEFINED&lt;/code&gt; or the current layout of the image subresources affected by the barrier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a61c5152b3b74bda534e01f875275147d129ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkImageLayout&quot;&gt;VkImageLayout&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a4c081963fd0b1b04560a1e57f2f65b236c5a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimalBufferCopyOffsetAlignment&lt;/code&gt; is the optimal buffer offset alignment in bytes for &lt;code&gt;vkCmdCopyBufferToImage&lt;/code&gt; and &lt;code&gt;vkCmdCopyImageToBuffer&lt;/code&gt;. The per texel alignment requirements are enforced, but applications &lt;strong&gt;should&lt;/strong&gt; use the optimal alignment for optimal performance and power use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f35d8217e4cc57533180974a0987d57ebfe8eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimalBufferCopyRowPitchAlignment&lt;/code&gt; is the optimal buffer row pitch alignment in bytes for &lt;code&gt;vkCmdCopyBufferToImage&lt;/code&gt; and &lt;code&gt;vkCmdCopyImageToBuffer&lt;/code&gt;. Row pitch is the number of bytes between texels with the same X coordinate in adjacent rows (Y coordinates differ by one). The per texel alignment requirements are enforced, but applications &lt;strong&gt;should&lt;/strong&gt; use the optimal alignment for optimal performance and power use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421210a91ddb45c39918732f4e4abf33787f9d59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimalTilingFeatures&lt;/code&gt; is a bitmask of &lt;a href=&quot;#VkFormatFeatureFlagBits&quot;&gt;VkFormatFeatureFlagBits&lt;/a&gt; specifying features supported by images created with a &lt;code&gt;tiling&lt;/code&gt; parameter of &lt;code&gt;VK_IMAGE_TILING_OPTIMAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3097b687f7e3fc9742d42ae66270355a94d659" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkDescriptorSetAllocateInfo&quot;&gt;VkDescriptorSetAllocateInfo&lt;/a&gt; structure describing parameters of the allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ec9acc59383c54d35a8f152156d26c2fe2e2da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkMemoryAllocateInfo&quot;&gt;VkMemoryAllocateInfo&lt;/a&gt; structure describing parameters of the allocation. A successful returned allocation &lt;strong&gt;must&lt;/strong&gt; use the requested parameters &amp;mdash; no substitution is permitted by the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5316fa0930278c805bb620810af03ff10de116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkCommandBufferAllocateInfo&lt;/code&gt; structure describing parameters of the allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310124377c5f02336443654e93339e55de2850f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkCommandBufferAllocateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eb50a12c7131cbeda0bd542b1718e42ce75fce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkDescriptorSetAllocateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5702ea030aa204b25fdaa5e1c6f7cff816d7e223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkMemoryAllocateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fd501b03a5792db7f86d9b272190593c33b69a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAllocator&lt;/code&gt; controls host memory allocation as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#memory-allocation&quot;&gt;Memory Allocation&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d16648f8cb1ee7b63783f2a6e23f3ce533f28fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pApplicationInfo&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or a pointer to an instance of &lt;code&gt;VkApplicationInfo&lt;/code&gt;. If not &lt;code&gt;NULL&lt;/code&gt;, this information helps implementations recognize behavior inherent to classes of applications. &lt;a href=&quot;#VkApplicationInfo&quot;&gt;VkApplicationInfo&lt;/a&gt; is defined in detail below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e67f05726aace1a6c00dc15f27169f47f88b6b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pApplicationName&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or is a pointer to a null-terminated UTF-8 string containing the name of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0133aac20d1ecadb3200e9da82c2109aac5b7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAttachments&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkClearAttachment&quot;&gt;VkClearAttachment&lt;/a&gt; structures defining the attachments to clear and the clear values to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0712ac1df11cee847cd4db9741ec3be0ef3f69a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAttachments&lt;/code&gt; is an array of &lt;code&gt;VkImageView&lt;/code&gt; handles, each of which will be used as the corresponding attachment in a render pass instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4c96f4b9a30abc798fd70e6c3345f9f4cdb4cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAttachments&lt;/code&gt; points to an array of &lt;code&gt;attachmentCount&lt;/code&gt; number of &lt;a href=&quot;#VkAttachmentDescription&quot;&gt;VkAttachmentDescription&lt;/a&gt; structures describing properties of the attachments, or &lt;code&gt;NULL&lt;/code&gt; if &lt;code&gt;attachmentCount&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebdf161a7b65712798c1909ef3b4d37c40eff84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAttachments&lt;/code&gt;: is a pointer to array of per target attachment states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6112785241c4e4b0ff0484423094039af7886ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pAttachments&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;attachmentCount&lt;/code&gt; valid &lt;code&gt;VkClearAttachment&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cc330d73f5789a676c201f7ee165ccaea1e166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBeginInfo&lt;/code&gt; is an instance of the &lt;code&gt;VkCommandBufferBeginInfo&lt;/code&gt; structure, which defines additional information about how the command buffer begins recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6de9722c137743fbf1a7c24a621a13e931b9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBeginInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkCommandBufferBeginInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bf3bb98ec3295bce9de7f4e2b69ac84980637e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBindInfo&lt;/code&gt; is an array of &lt;a href=&quot;#VkBindSparseInfo&quot;&gt;VkBindSparseInfo&lt;/a&gt; structures, each specifying a sparse binding submission batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69646013329db392805fb05d89cde2024ee58d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBindings&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkDescriptorSetLayoutBinding&quot;&gt;VkDescriptorSetLayoutBinding&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6827e90beeceb972e8d26e517df89be9dff091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBinds&lt;/code&gt; is a pointer to array of &lt;code&gt;VkSparseImageMemoryBind&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee812fc23497378f4b571259ad9c47d734a3907" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBinds&lt;/code&gt; is a pointer to array of &lt;code&gt;VkSparseMemoryBind&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e718af33b7181b922580f788bd504f6a698a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBinds&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindCount&lt;/code&gt; valid &lt;code&gt;VkSparseImageMemoryBind&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a65452e2945b99d5604f756026c8457a1dea2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBinds&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindCount&lt;/code&gt; valid &lt;code&gt;VkSparseMemoryBind&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99784dab20dc83c49c3f7ddd8956ece2bc7c985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBuffer&lt;/code&gt; points to a &lt;code&gt;VkBuffer&lt;/code&gt; handle in which the resulting buffer object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92956af6e8262a39cba022ebdd18d51278c83b8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkBuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6722964d3ecdbdb8db2fe09a63e16650a13f83a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBufferBinds&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkSparseBufferMemoryBindInfo&quot;&gt;VkSparseBufferMemoryBindInfo&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cc6adc2a145d135b09195505fb6aa055e3f5bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBufferInfo&lt;/code&gt; points to an array of &lt;a href=&quot;#VkDescriptorBufferInfo&quot;&gt;VkDescriptorBufferInfo&lt;/a&gt; structures or is ignored, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a848f3358309b80059a6f098953674bbb1fe74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBufferMemoryBarriers&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkBufferMemoryBarrier&quot;&gt;VkBufferMemoryBarrier&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1babdc5f79cd36ca5bc8336db0ece84ba38d9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBuffers&lt;/code&gt; is a pointer to an array of buffer handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802d3d748418e9cf578565894375619411a5f66f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindingCount&lt;/code&gt; valid &lt;code&gt;VkBuffer&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19438cc58f1655e7fe189a411e732a3abc56cea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pClearValues&lt;/code&gt; is an array of &lt;a href=&quot;#VkClearValue&quot;&gt;VkClearValue&lt;/a&gt; structures that contains clear values for each attachment, if the attachment uses a &lt;code&gt;loadOp&lt;/code&gt; value of &lt;code&gt;VK_ATTACHMENT_LOAD_OP_CLEAR&lt;/code&gt; or if the attachment has a depth/stencil format and uses a &lt;code&gt;stencilLoadOp&lt;/code&gt; value of &lt;code&gt;VK_ATTACHMENT_LOAD_OP_CLEAR&lt;/code&gt;. The array is indexed by attachment number. Only elements corresponding to cleared attachments are used. Other elements of &lt;code&gt;pClearValues&lt;/code&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c0036f3e433637ab04728e18c158ea0705cc27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt; points to code that is used to create the shader module. The type and format of the code is determined from the content of the memory addressed by &lt;code&gt;pCode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2973539c66f6e0357770cc776bb286228bd5ead7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; adhere to the validation rules described by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv-module-validation&quot;&gt;Validation Rules within a Module&lt;/a&gt; section of the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv-capabilities&quot;&gt;SPIR-V Environment&lt;/a&gt; appendix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173aafb25435e5244e174146ca9aed87ac37a427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of \(codeSize \over 4\) &lt;code&gt;uint32_t&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5037a886ba48ed10e42bdf6950c111c57356b810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; declare the &lt;code&gt;Shader&lt;/code&gt; capability for SPIR-V code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bc891246ee484ba501dfeb2246d45f80bf52aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; not declare any capability that is not supported by the API, as described by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv-module-validation&quot;&gt;Capabilities&lt;/a&gt; section of the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv-capabilities&quot;&gt;SPIR-V Environment&lt;/a&gt; appendix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850109a0e97c4c44d9c8ec4d3658edb4e6ef4e1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCode&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; point to valid SPIR-V code, formatted and packed as described by the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirv-spec&quot;&gt;Khronos SPIR-V Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf18af60d5f55b408af0b8d8fbef9b167d656eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pColor&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkClearColorValue&quot;&gt;VkClearColorValue&lt;/a&gt; structure that contains the values the image subresource ranges will be cleared to (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#clears-values&quot;&gt;html/vkspec.html#clears-values&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f9b0c4094b19c4d53dd6029a3f5fd330f2c1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pColor&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkClearColorValue&lt;/code&gt; union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6ed561fff45906f7a0c6799042e31035bb6e8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pColorAttachments&lt;/code&gt; is an array of &lt;code&gt;colorAttachmentCount&lt;/code&gt;&lt;a href=&quot;#VkAttachmentReference&quot;&gt;VkAttachmentReference&lt;/a&gt; structures that lists which of the render pass&amp;rsquo;s attachments will be used as color attachments in the subpass, and what layout each attachment will be in during the subpass. Each element of the array corresponds to a fragment shader output location, i.e. if the shader declared an output variable &lt;code&gt;layout(location=X)&lt;/code&gt; then it uses the attachment provided in &lt;code&gt;pColorAttachments&lt;/code&gt;[X].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5036967e7222d3d1e90d3652e9911bb381c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pColorBlendState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineColorBlendStateCreateInfo&quot;&gt;VkPipelineColorBlendStateCreateInfo&lt;/a&gt; structure, and is ignored if the pipeline has rasterization disabled or if the subpass of the render pass the pipeline is created against does not use any color attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4069d4b94800677077c65baabcd3c5cb13b09a64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkCommandBuffer&lt;/code&gt; handles in which the resulting command buffer objects are returned. The array &lt;strong&gt;must&lt;/strong&gt; be at least the length specified by the &lt;code&gt;commandBufferCount&lt;/code&gt; member of &lt;code&gt;pAllocateInfo&lt;/code&gt;. Each allocated command buffer begins in the initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b40c0b53f8ac71f7d8ebb4ed14b798f2882b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt; is a pointer to an array of command buffers to execute in the batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310d95e4b729cf9a60b63bcddcd4dc7757c180d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt; is an array of handles of command buffers to free.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f073a60809c2464ccb7fb9f432d3550b46f86c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt; is an array of secondary command buffer handles, which are recorded to execute in the primary command buffer in the order they are listed in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649d3ba221e674a6702eaf27e80238d96125197b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;commandBufferCount&lt;/code&gt; valid &lt;code&gt;VkCommandBuffer&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148ec2c5a256715f873cb802df52775b91d88b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;commandBufferCount&lt;/code&gt;&lt;code&gt;VkCommandBuffer&lt;/code&gt; handles, each element of which &lt;strong&gt;must&lt;/strong&gt; either be a valid handle or &lt;code&gt;NULL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d234a25fff4362a743cc518b2f77c9bb26aeab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandBuffers&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;pAllocateInfo&lt;/code&gt;::commandBufferCount &lt;code&gt;VkCommandBuffer&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ba74fc44f71d82eaa292811d5e9661984e9651" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandPool&lt;/code&gt; points to a &lt;code&gt;VkCommandPool&lt;/code&gt; handle in which the created pool is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf822f3210efb8d1162fbcf3c4db23328617205a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommandPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkCommandPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f59b677d0cb5869c51066994b0c70651e48e6dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommittedMemoryInBytes&lt;/code&gt; is a pointer to a &lt;code&gt;VkDeviceSize&lt;/code&gt; value in which the number of bytes currently committed is returned, on success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dad9e99a3e3e3ce93ab3e321cd7a535474eb70f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCommittedMemoryInBytes&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkDeviceSize&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f500a2e39d263b67618f1f3635dcbdd8b64f674" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; contains information used to create the command pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e48607906c3f525671693e4d123c60b59162aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkDeviceCreateInfo&quot;&gt;VkDeviceCreateInfo&lt;/a&gt; structure containing information about how to create the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc9b2be14e3818873e22a2dc0438e4d656519b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to a &lt;code&gt;VkPipelineCacheCreateInfo&lt;/code&gt; structure that contains the initial parameters for the pipeline cache object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efad2e4a86a13adf0824f8eabb17d8fc9710ac86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkDescriptorPoolCreateInfo&quot;&gt;VkDescriptorPoolCreateInfo&lt;/a&gt; structure specifying the state of the descriptor pool object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40ee369b8b2f1f31b6bd4ecce822987b12c837b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkDescriptorSetLayoutCreateInfo&quot;&gt;VkDescriptorSetLayoutCreateInfo&lt;/a&gt; structure specifying the state of the descriptor set layout object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d2956fb955d7f93933622a7e3ed6cec4e76c4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineLayoutCreateInfo&quot;&gt;VkPipelineLayoutCreateInfo&lt;/a&gt; structure specifying the state of the pipeline layout object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee457c3913d73b9e910e3fcf2eb5672a531eab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkRenderPassCreateInfo&quot;&gt;VkRenderPassCreateInfo&lt;/a&gt; structure that describes the parameters of the render pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb1d3552d469da3c64ff6172263abe7a79c816c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkSamplerCreateInfo&quot;&gt;VkSamplerCreateInfo&lt;/a&gt; structure specifying the state of the sampler object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be91d4d11671db066e0b5cf3f50c912f3caa819" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; structure containing parameters affecting creation of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7163997961fdc16432ee163032fc89d97358eeb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkBufferViewCreateInfo&lt;/code&gt; structure containing parameters to be used to create the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22a16c0802212add889f10a98605a0bb4f2b570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkEventCreateInfo&lt;/code&gt; structure which contains information about how the event is to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd906dbf788d45edc90e973852eaa329ddb50fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkFenceCreateInfo&lt;/code&gt; structure which contains information about how the fence is to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810ff9dc73fe10e8356a0d39a54eccb10e69a2cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure containing parameters to be used to create the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850cf73e9abd38a5719e1173aa71cabe37326a76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkImageViewCreateInfo&lt;/code&gt; structure containing parameters to be used to create the image view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32ed27e53f175af8e2722c686c28b53633b372f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkQueryPoolCreateInfo&lt;/code&gt; structure containing the number and type of queries to be managed by the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36380dcfd5742a0a69d63ef443bbb78fedff015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; is a pointer to an instance of the &lt;code&gt;VkSemaphoreCreateInfo&lt;/code&gt; structure which contains information about how the semaphore is to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd7e6395e8a4d15d0d4ee303c0fbfb1f7550562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; parameter is a pointer to an instance of the &lt;code&gt;VkShaderModuleCreateInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff3cb562b731dfdd0bd2afec4e98022894ee0fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; points to a &lt;a href=&quot;#VkFramebufferCreateInfo&quot;&gt;VkFramebufferCreateInfo&lt;/a&gt; structure which describes additional information about framebuffer creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01397da0845d6ecb6552a9bc6b27ca25916825df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt; points to an instance of &lt;a href=&quot;#VkInstanceCreateInfo&quot;&gt;VkInstanceCreateInfo&lt;/a&gt; controlling creation of the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca3c966b4fd69f5fdee1f123c43782094a46737" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkBufferCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba39aad9b100876936d8597a2d768f8a8395a423" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkBufferViewCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19235ab5cb2375661cfbf519a2f06d84923f72b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkCommandPoolCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb54ba902da60856a3a8727b2893027fd749b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkDescriptorPoolCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2492db857afa650e292d124c7f9a2c6a5de45a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkDescriptorSetLayoutCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a44074bca015467561e213ded59eca4fa0ac53f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkDeviceCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6d39e446ea98ce2878e263fcdca813a86be266" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkEventCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c40f7eaf334e114b3f02d15e1e5c789d5f6ddf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkFenceCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423c75dbfcc58a80727f57f6f00e7cfe11e96749" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkFramebufferCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e6be789a4f9d0cd6eb88ab466ae7299cc277b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkImageCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77b13bbe76875cdc7f9c526158b3558ca43f4f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkImageViewCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a246c1bf96b723a645b8c08710da2babc26015c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkInstanceCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2c2b07ef04269c6f6294ed542c7dcce3c2c871" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkPipelineCacheCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e250d68be2c0174200826c03a01bc6ffff6b9abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkPipelineLayoutCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d3ab8d6b98ff4b5fd17d61156fe515a54542ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkQueryPoolCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdf34622496dffb25c7d8da514c83bcb1b2b2f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkRenderPassCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53229998fdb2365e24da1cb1f06c21f9baad7c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkSamplerCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0169f39e9c32c1923d807cafc5f8cebf9082ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkSemaphoreCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0862f707e7bfd4570f4e0ce503d84623fa33b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfo&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkShaderModuleCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6275c6104d67a7d2faebbdc17163613b45d20303" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfos&lt;/code&gt; is an array of &lt;code&gt;VkComputePipelineCreateInfo&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc22bdc9ed088e03e97e126d9eddd2ad18e4622" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfos&lt;/code&gt; is an array of &lt;code&gt;VkGraphicsPipelineCreateInfo&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8ed546eb5b5964e859a02e7c7aac739b7aeedb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfos&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;createInfoCount&lt;/code&gt; valid &lt;code&gt;VkComputePipelineCreateInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df5b74366bc13f55482370450f1536bed52d5e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pCreateInfos&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;createInfoCount&lt;/code&gt; valid &lt;code&gt;VkGraphicsPipelineCreateInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87620ba98922dadb4789c753f81ab1892cbd964a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pData&lt;/code&gt; contains the actual constant values to specialize with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a791033be443d8c35df88db496781360f75899f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pData&lt;/code&gt; is a pointer to a user-allocated buffer where the results will be written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962c023ab8f9ce30e6074906c4e65ba052c5e4dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pData&lt;/code&gt; is a pointer to the source data for the buffer update, and &lt;strong&gt;must&lt;/strong&gt; be at least &lt;code&gt;dataSize&lt;/code&gt; bytes in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83653deff66b7b7f035df240d487325d1a31dbda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pData&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to a buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bff9dd39cf6aae2ffb4c2f1148fa7b185ba7fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pData&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;dataSize&lt;/code&gt; bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a67f4eefd7e64e54167eef61d2b902ab7716bff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDataSize&lt;/code&gt; is a pointer to a value related to the amount of data in the pipeline cache, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c478a0be6748460d74a07bace27e53e6ca39660e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDataSize&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;size_t&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8daa9b688291561d4fa2865399f68872555463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDependencies&lt;/code&gt; points to an array of &lt;code&gt;dependencyCount&lt;/code&gt; number of &lt;a href=&quot;#VkSubpassDependency&quot;&gt;VkSubpassDependency&lt;/a&gt; structures describing dependencies between pairs of subpasses, or &lt;code&gt;NULL&lt;/code&gt; if &lt;code&gt;dependencyCount&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ed31eddaf27b62b185120e424fa4bdccc06027" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDepthStencil&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkClearDepthStencilValue&quot;&gt;VkClearDepthStencilValue&lt;/a&gt; structure that contains the values the depth and stencil image subresource ranges will be cleared to (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#clears-values&quot;&gt;html/vkspec.html#clears-values&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296a503e1711a22c4e732984ab65b81c288c84ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDepthStencil&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkClearDepthStencilValue&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5fb243075a524ca762623c08818fd9f1adf06a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDepthStencilAttachment&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkAttachmentReference&quot;&gt;VkAttachmentReference&lt;/a&gt; specifying which attachment will be used for depth/stencil data and the layout it will be in during the subpass. Setting the attachment index to &lt;code&gt;VK_ATTACHMENT_UNUSED&lt;/code&gt; or leaving this pointer as &lt;code&gt;NULL&lt;/code&gt; indicates that no depth/stencil attachment will be used in the subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25277b27d07e19187532d5f90ef6f546cb78a4df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDepthStencilState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineDepthStencilStateCreateInfo&quot;&gt;VkPipelineDepthStencilStateCreateInfo&lt;/a&gt; structure, and is ignored if the pipeline has rasterization disabled or if the subpass of the render pass the pipeline is created against does not use a depth/stencil attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28596abac20869dee785080e9ab6bf59606682ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorCopies&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkCopyDescriptorSet&quot;&gt;VkCopyDescriptorSet&lt;/a&gt; structures describing the descriptor sets to copy between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00ef2379eae76a95191390ca6308c8b1fd18584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorPool&lt;/code&gt; points to a &lt;code&gt;VkDescriptorPool&lt;/code&gt; handle in which the resulting descriptor pool object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc5d39023bc6745a375673571aafeb5b0591221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkDescriptorPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28b857712ce36a5e5fdf0205830abac19325c6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkDescriptorSet&lt;/code&gt; handles in which the resulting descriptor set objects are returned. The array &lt;strong&gt;must&lt;/strong&gt; be at least the length specified by the &lt;code&gt;descriptorSetCount&lt;/code&gt; member of &lt;code&gt;pAllocateInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcdd732afdf13ec54c8a4d330d73bdce1e347bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt; is an array of handles to &lt;code&gt;VkDescriptorSet&lt;/code&gt; objects describing the descriptor sets to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c829b0dfb247e9d1802b5c8bd8ca4c286ecf37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt; is an array of handles to &lt;code&gt;VkDescriptorSet&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3655a71f9604a51438cfc08e9ebda92f004f93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorSetCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorSet&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95622c72cb5b8d2bd3a6cd14c3349d9080436691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorSetCount&lt;/code&gt;&lt;code&gt;VkDescriptorSet&lt;/code&gt; handles, each element of which &lt;strong&gt;must&lt;/strong&gt; either be a valid handle or &lt;a href=&quot;#VK_NULL_HANDLE&quot;&gt;VK_NULL_HANDLE&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f8ca89d647ba1030a6e72b1fe92de37b4c43fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorSets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;pAllocateInfo&lt;/code&gt;::descriptorSetCount &lt;code&gt;VkDescriptorSet&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a86dcc2267742d4135c292187d747e7a23680af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDescriptorWrites&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkWriteDescriptorSet&quot;&gt;VkWriteDescriptorSet&lt;/a&gt; structures describing the descriptor sets to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fc8a8a68cb0173e34a7f627e0ff04ce27af42d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDevice&lt;/code&gt; points to a handle in which the created &lt;code&gt;VkDevice&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592d93392bc80ef17054e85cddb490b0bfe1af97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDevice&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkDevice&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c30333c76156924a9210e15dd56c6c026a1d97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDynamicOffsets&lt;/code&gt; is a pointer to an array of &lt;code&gt;uint32_t&lt;/code&gt; values specifying dynamic offsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081dee545f42ebbf2db076b179eb56b916b6074e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDynamicState&lt;/code&gt; is a pointer to &lt;a href=&quot;#VkPipelineDynamicStateCreateInfo&quot;&gt;VkPipelineDynamicStateCreateInfo&lt;/a&gt; and is used to indicate which properties of the pipeline state object are dynamic and &lt;strong&gt;can&lt;/strong&gt; be changed independently of the pipeline state. This &lt;strong&gt;can&lt;/strong&gt; be &lt;code&gt;NULL&lt;/code&gt;, which means no state in the pipeline is considered dynamic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc55c52936b61830bc256126f1aea3bf331bdbe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDynamicState&lt;/code&gt; points to a structure of type &lt;a href=&quot;#VkPipelineDynamicStateCreateInfo&quot;&gt;VkPipelineDynamicStateCreateInfo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700d23606fe76f2950024077f50e3375d82e92bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDynamicStates&lt;/code&gt; is an array of &lt;a href=&quot;#VkDynamicState&quot;&gt;VkDynamicState&lt;/a&gt; values specifying which pieces of pipeline state will use the values from dynamic state commands rather than from pipeline state creation info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd5a13a50d6854d67d26b88b6933f30a152fdb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pDynamicStates&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;dynamicStateCount&lt;/code&gt; valid &lt;a href=&quot;#VkDynamicState&quot;&gt;VkDynamicState&lt;/a&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb95b2de6e584480482a8a6900804a26051ae802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEnabledFeatures&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or a pointer to a &lt;a href=&quot;#VkPhysicalDeviceFeatures&quot;&gt;VkPhysicalDeviceFeatures&lt;/a&gt; structure that contains boolean indicators of all the features to be enabled. Refer to the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#features-features&quot;&gt;Features&lt;/a&gt; section for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6b2de47e13b79b65edf298e1ab49d791455e06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEngineName&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or is a pointer to a null-terminated UTF-8 string containing the name of the engine (if any) used to create the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa464fba7e95d9b41a37b74f1f8cceeada5bbd77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEvent&lt;/code&gt; points to a handle in which the resulting event object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca045aa672bf1bc3ebf18504455fc2ac356f598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEvent&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkEvent&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4f76f80f49fb8b3c857a11d2b835d3f3281b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEvents&lt;/code&gt; is an array of event object handles to wait on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0986674286461ec101e78a2464f088c60ae4d2e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pEvents&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;eventCount&lt;/code&gt; valid &lt;code&gt;VkEvent&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e74a2d81da05f3a5eebc92a6478e0363af63186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFeatures&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkPhysicalDeviceFeatures&quot;&gt;VkPhysicalDeviceFeatures&lt;/a&gt; structure in which the physical device features are returned. For each feature, a value of &lt;code&gt;VK_TRUE&lt;/code&gt; indicates that the feature is supported on this physical device, and &lt;code&gt;VK_FALSE&lt;/code&gt; indicates that the feature is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32edc5633edbdb49dc3e8b0fa2c86bf24db9fddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFeatures&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkPhysicalDeviceFeatures&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6d6883b41f05ec2b58047b75cb5f1b4b246314" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFence&lt;/code&gt; points to a handle in which the resulting fence object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc00d439746b135dedb1fdc1a5197a36261fdcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFence&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkFence&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6595834b4957a33985753db6f066eb928b6308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFences&lt;/code&gt; is a pointer to an array of &lt;code&gt;fenceCount&lt;/code&gt; fence handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3336a7e6fd66df78357d78eb708719b81f60dab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFences&lt;/code&gt; is a pointer to an array of fence handles to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe911a2c02320c3c0097c77ebe749a2e177a4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFences&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;fenceCount&lt;/code&gt; valid &lt;code&gt;VkFence&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0891279ce2431867d59707a3a759bd7329798b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFormatProperties&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkFormatProperties&quot;&gt;VkFormatProperties&lt;/a&gt; structure in which physical device properties for &lt;code&gt;format&lt;/code&gt; are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1034149df13c3818d13a4edfa6efb704a4723a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFormatProperties&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkFormatProperties&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46811acfca15f85c724b0fad510d99b55ceac4fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFramebuffer&lt;/code&gt; points to a &lt;code&gt;VkFramebuffer&lt;/code&gt; handle in which the resulting framebuffer object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8254ea9c6664a0081e05cc2ed562db4183a0512" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pFramebuffer&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkFramebuffer&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf3ed8c7a7752af1a097b72502d23d1037e6511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pGranularity&lt;/code&gt; points to a &lt;a href=&quot;#VkExtent2D&quot;&gt;VkExtent2D&lt;/a&gt; structure in which the granularity is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832175a225a3a8ddf8f07b580854331b6358ce47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pGranularity&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkExtent2D&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4149d367bee5c67ae08f8cce240c10e853866a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImage&lt;/code&gt; points to a &lt;code&gt;VkImage&lt;/code&gt; handle in which the resulting image object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5528fc1d150b31d3465de8fc542052b474aea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImage&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkImage&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9575efbc801c10a0de649ae5212c34b1687cea48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageBinds&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkSparseImageMemoryBindInfo&quot;&gt;VkSparseImageMemoryBindInfo&lt;/a&gt; structures, indicating sparse image bindings to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bfbb34c4e89e793391fd2c694bfadd8bcbe90e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageFormatProperties&lt;/code&gt; points to an instance of the &lt;a href=&quot;#VkImageFormatProperties&quot;&gt;VkImageFormatProperties&lt;/a&gt; structure in which capabilities are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6b21fa6433e4156aaa142d45b7305967d533ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageFormatProperties&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkImageFormatProperties&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0df10bdd93dbe62b2c7e9be0b4c7055bb1e049" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageInfo&lt;/code&gt; points to an array of &lt;a href=&quot;#VkDescriptorImageInfo&quot;&gt;VkDescriptorImageInfo&lt;/a&gt; structures or is ignored, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba32f4f86e3148e69cc19dd2952c99bf23696990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageMemoryBarriers&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkImageMemoryBarrier&quot;&gt;VkImageMemoryBarrier&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20d4f4cdd817b2e21c7d478b3948b22eab65813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImageOpaqueBinds&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkSparseImageOpaqueMemoryBindInfo&quot;&gt;VkSparseImageOpaqueMemoryBindInfo&lt;/a&gt; structures, indicating opaque sparse image bindings to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7256fc0d3431d76fe4484cdec0bb82c817a4f40e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pImmutableSamplers&lt;/code&gt; affects initialization of samplers. If &lt;code&gt;descriptorType&lt;/code&gt; specifies a &lt;code&gt;VK_DESCRIPTOR_TYPE_SAMPLER&lt;/code&gt; or &lt;code&gt;VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER&lt;/code&gt; type descriptor, then &lt;code&gt;pImmutableSamplers&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; be used to initialize a set of &lt;em&gt;immutable samplers&lt;/em&gt;. Immutable samplers are permanently bound into the set layout; later binding a sampler into an immutable sampler slot in a descriptor set is not allowed. If &lt;code&gt;pImmutableSamplers&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, then it is considered to be a pointer to an array of sampler handles that will be consumed by the set layout and used for the corresponding binding. If &lt;code&gt;pImmutableSamplers&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, then the sampler slots are dynamic and sampler handles &lt;strong&gt;must&lt;/strong&gt; be bound into descriptor sets using this layout. If &lt;code&gt;descriptorType&lt;/code&gt; is not one of these descriptor types, then &lt;code&gt;pImmutableSamplers&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f701bab709bed28a9d6207fdf0fc4cb5a7ac96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInheritanceInfo&lt;/code&gt; is a pointer to a &lt;code&gt;VkCommandBufferInheritanceInfo&lt;/code&gt; structure, which is used if &lt;code&gt;commandBuffer&lt;/code&gt; is a secondary command buffer. If this is a primary command buffer, then this value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111fdbf72085edc46698a93586fabe166f83cfdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInitialData&lt;/code&gt; is a pointer to previously retrieved pipeline cache data. If the pipeline cache data is incompatible (as defined below) with the device, the pipeline cache will be initially empty. If &lt;code&gt;initialDataSize&lt;/code&gt; is zero, &lt;code&gt;pInitialData&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a19d26958452f48b64a15772dbe89d9234796d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInputAssemblyState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineInputAssemblyStateCreateInfo&quot;&gt;VkPipelineInputAssemblyStateCreateInfo&lt;/a&gt; structure which determines input assembly behavior, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#drawing&quot;&gt;Drawing Commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c9970fe4a3ca6a064e275b4bd210f59865c9e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInputAssemblyState&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkPipelineInputAssemblyStateCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1fec892cfb26405b0e8aa1f0784d101e30d106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInputAttachments&lt;/code&gt; is an array of &lt;a href=&quot;#VkAttachmentReference&quot;&gt;VkAttachmentReference&lt;/a&gt; structures (defined below) that lists which of the render pass&amp;rsquo;s attachments &lt;strong&gt;can&lt;/strong&gt; be read in the shader during the subpass, and what layout each attachment will be in during the subpass. Each element of the array corresponds to an input attachment unit number in the shader, i.e. if the shader declares an input variable &lt;code&gt;layout(input_attachment_index=X, set=Y, binding=Z)&lt;/code&gt; then it uses the attachment provided in &lt;code&gt;pInputAttachments&lt;/code&gt;[X]. Input attachments &lt;strong&gt;must&lt;/strong&gt; also be bound to the pipeline with a descriptor set, with the input attachment descriptor written in the location (set=Y, binding=Z).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae52a2a1a55281756c9e36c75b90c8681cc626c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInstance&lt;/code&gt; points a &lt;code&gt;VkInstance&lt;/code&gt; handle in which the resulting instance is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d4a889e3777463ef50a38fe74dcdd3b5b79fce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pInstance&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkInstance&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1f9f3fbb7fbaac57127d561cb41b6de1bf553a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pLayerName&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to a null-terminated UTF-8 string naming the layer to retrieve extensions from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124dbb145efbc56088dea28a142a1ea4cf0fb43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pLayout&lt;/code&gt; points to a &lt;a href=&quot;#VkSubresourceLayout&quot;&gt;VkSubresourceLayout&lt;/a&gt; structure in which the layout is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc8aec0bdf93d0abbb1638fab007544332b420a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkSubresourceLayout&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90a1a76d4bd330bd6ffaaf2e9314142badd0c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMapEntries&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkSpecializationMapEntry&lt;/code&gt; which maps constant IDs to offsets in &lt;code&gt;pData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed25af45f1703f1f930ee86aac21f8ff4c4eaa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMapEntries&lt;/code&gt; points to a structure of type &lt;a href=&quot;#VkSpecializationMapEntry&quot;&gt;VkSpecializationMapEntry&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e44fc94492c4d127d72bdff8271c3142ea8bf5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemory&lt;/code&gt; is a pointer to a &lt;code&gt;VkDeviceMemory&lt;/code&gt; handle in which information about the allocated memory is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d204ec5707276c62e72628388027a816325cea6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemory&lt;/code&gt; is the allocation to be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec9680fda7e7ae669cfffc03e7f0257c512b617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemory&lt;/code&gt;&lt;strong&gt;may&lt;/strong&gt; be &lt;code&gt;NULL&lt;/code&gt;, which the callback &lt;strong&gt;must&lt;/strong&gt; handle safely. If &lt;code&gt;pMemory&lt;/code&gt; is non-&lt;code&gt;NULL&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; be a pointer previously allocated by &lt;code&gt;pfnAllocation&lt;/code&gt; or &lt;code&gt;pfnReallocation&lt;/code&gt;. The application &lt;strong&gt;should&lt;/strong&gt; free this memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d911a67fe680ccd2d5671b5a1cd5974e40e403d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemory&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkDeviceMemory&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f70fec56c9c06b838365fe6926b883832be118a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryBarriers&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkMemoryBarrier&quot;&gt;VkMemoryBarrier&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d1ccc3146fb200cd908b07d81123e24e989c42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryProperties&lt;/code&gt; points to an instance of &lt;code&gt;VkPhysicalDeviceMemoryProperties&lt;/code&gt; structure in which the properties are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d4d1ffcae2e7d96fa0ec45a176f2ddcc458ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryProperties&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkPhysicalDeviceMemoryProperties&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6323720d83a64baedbacc7c13cdb6afd83436b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRanges&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkMappedMemoryRange&quot;&gt;VkMappedMemoryRange&lt;/a&gt; structures describing the memory ranges to flush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caec3738c9e9417db044a49794d69f6c12ba6811" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRanges&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkMappedMemoryRange&quot;&gt;VkMappedMemoryRange&lt;/a&gt; structures describing the memory ranges to invalidate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d841d29a1f3665e443b8a4967ef2d72ba6b1aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRanges&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;memoryRangeCount&lt;/code&gt; valid &lt;code&gt;VkMappedMemoryRange&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718eebc730f4d52ae43e610b2f1ca3006561f1d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRequirements&lt;/code&gt; points to an instance of the &lt;a href=&quot;#VkMemoryRequirements&quot;&gt;VkMemoryRequirements&lt;/a&gt; structure in which the memory requirements of the buffer object are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b36f2f67a8f1614d651e32955fa6dcc3d70599b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRequirements&lt;/code&gt; points to an instance of the &lt;a href=&quot;#VkMemoryRequirements&quot;&gt;VkMemoryRequirements&lt;/a&gt; structure in which the memory requirements of the image object are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b9191e6fd08316e89160580a2e0875a2c1d0be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMemoryRequirements&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkMemoryRequirements&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f429849864b7c2bd6983f7a578b57b731fbd0c8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pMultisampleState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineMultisampleStateCreateInfo&quot;&gt;VkPipelineMultisampleStateCreateInfo&lt;/a&gt;, and is ignored if the pipeline has rasterization disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d8b3c26ae3ac6f2fc908d2803aa2e4dc10d71c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pName&lt;/code&gt; is a pointer to a null-terminated UTF-8 string specifying the entry point name of the shader for this stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f447dca43bd1e1f442151327e311b99c6b757f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pName&lt;/code&gt; is the name of the command to obtain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a1ae1495cbed08f87c3b24aacce1ae74c630a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pName&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a null-terminated UTF-8 string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc5f4b2ad83c9b0e4eff835d47948ea06f7dd39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pName&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be the name of an &lt;code&gt;OpEntryPoint&lt;/code&gt; in &lt;code&gt;module&lt;/code&gt; with an execution model that matches &lt;code&gt;stage&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83459df2971c4e888399ea47600d84b6f0c6390e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pNext&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or a pointer to an extension-specific structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23257d6b5d12470c5926237fd6e6d71d88ed6e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pNext&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;NULL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5aeeb3acdc170b589d6d8adeeccbf617ad9d608" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pOffsets&lt;/code&gt; is a pointer to an array of buffer offsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83894a1d595055ebb76e033fd326291b70256167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pOffsets&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;bindingCount&lt;/code&gt;&lt;code&gt;VkDeviceSize&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae3d001917e39ed29d3d467f56cad9be7bd5f87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pOriginal&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be either &lt;code&gt;NULL&lt;/code&gt; or a pointer previously returned by &lt;code&gt;pfnReallocation&lt;/code&gt; or &lt;code&gt;pfnAllocation&lt;/code&gt; of the same allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9104bec3a984a6bc35cf84d23b7fedea02491f37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPhysicalDeviceCount&lt;/code&gt; is a pointer to an integer related to the number of physical devices available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99aa0df5ffb54539a17a41a6425bead573fff822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPhysicalDeviceCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;uint32_t&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2467c4ae74c44a81d4b04e318263d65e9a99eb8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPhysicalDevices&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;code&gt;VkPhysicalDevice&lt;/code&gt; handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f6e5c9ac57d1229c88d80045f0453caad7e5af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelineCache&lt;/code&gt; is a pointer to a &lt;code&gt;VkPipelineCache&lt;/code&gt; handle in which the resulting pipeline cache object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac3889bc85614b6b97be914e40b66652281b075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelineCache&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkPipelineCache&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880bd45d1f7f59004e578ea6dba16812b7e00635" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelineLayout&lt;/code&gt; points to a &lt;code&gt;VkPipelineLayout&lt;/code&gt; handle in which the resulting pipeline layout object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65dadf49e7eef1d538cb1206ee34f61d1cd0618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelineLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkPipelineLayout&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6feac28718eeaddf449dc05767a8fb90aa861912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelines&lt;/code&gt; is a pointer to an array in which the resulting compute pipeline objects are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b2d66dfc3426c3c641ec8d70a75be94aaa198c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelines&lt;/code&gt; is a pointer to an array in which the resulting graphics pipeline objects are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15dd1d190377846fc54d4ea601d79b789b88c11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPipelines&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;createInfoCount&lt;/code&gt;&lt;code&gt;VkPipeline&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540d236d29eff218b564266d0f94e22102d135af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPoolSizes&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkDescriptorPoolSize&lt;/code&gt; structures, each containing a descriptor type and number of descriptors of that type to be allocated in the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a238e06fc417cd7ee26bc7301ff98331dec930" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPoolSizes&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;poolSizeCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorPoolSize&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0829b22ed2ccbfe71a52c1952640cd8a2c504ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPreserveAttachments&lt;/code&gt; is an array of &lt;code&gt;preserveAttachmentCount&lt;/code&gt; render pass attachment indices describing the attachments that are not used by a subpass, but whose contents &lt;strong&gt;must&lt;/strong&gt; be preserved throughout the subpass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb85acb6886b69e6339ed60e259d65d05ad4fdb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pProperties&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;a href=&quot;#VkExtensionProperties&quot;&gt;VkExtensionProperties&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d512e828cc3972532d46d315700cb5197f543c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pProperties&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;a href=&quot;#VkLayerProperties&quot;&gt;VkLayerProperties&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671ef4df45fdb393457df6ea0e01cd4aaf340706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pProperties&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;a href=&quot;#VkSparseImageFormatProperties&quot;&gt;VkSparseImageFormatProperties&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7357719ee19c660008a537a74fa8038732ac4c70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pProperties&lt;/code&gt; points to an instance of the &lt;a href=&quot;#VkPhysicalDeviceProperties&quot;&gt;VkPhysicalDeviceProperties&lt;/a&gt; structure, that will be filled with returned information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63ef2f2ac7e1ac1f5492dedde8bf6c28ef1d74d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pProperties&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkPhysicalDeviceProperties&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9eaf39a5502482bcd7cdc5c9e8c507fac336b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of extension properties available or queried, and is treated in the same fashion as the &lt;a href=&quot;#vkEnumerateInstanceExtensionProperties&quot;&gt;vkEnumerateInstanceExtensionProperties&lt;/a&gt;::&lt;code&gt;pPropertyCount&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c598917bb2cc366a0f2182ab593452df5d137e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of extension properties available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f7b6f36c934f0e3a4f549290b60efdb7cb51a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of layer properties available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e999ef73c789c7a27c62072d5312b2b201d4d777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of layer properties available or queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06f4931736e7f020fbaed2968184d92dbcc5d08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of sparse format properties available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390221ce45b52b4446d2410246d72f8f18cffe20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPropertyCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;uint32_t&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0f56bbb5f3b56ffbf086678a578482d80a3eef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pPushConstantRanges&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkPushConstantRange&lt;/code&gt; structures defining a set of push constant ranges for use in a single pipeline layout. In addition to descriptor set layouts, a pipeline layout also describes how many push constants &lt;strong&gt;can&lt;/strong&gt; be accessed by each stage of the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba2c05f1e549d2be8f3d3676aadd2ce771e1b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueryPool&lt;/code&gt; is a pointer to a &lt;code&gt;VkQueryPool&lt;/code&gt; handle in which the resulting query pool object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f3ad0e2abe81950cb9f9789e55e06e71bbfc25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueryPool&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkQueryPool&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9919e14e5ddc1fe505eea3cfc41cdffe86aa5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueue&lt;/code&gt; is a pointer to a &lt;code&gt;VkQueue&lt;/code&gt; object that will be filled with the handle for the requested queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b16463bee2531a12d8dd5dad38bfc241d494ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueue&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkQueue&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad016c2039cf3882d4d86b037bb0f36baefffc31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueCreateInfos&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkDeviceQueueCreateInfo&quot;&gt;VkDeviceQueueCreateInfo&lt;/a&gt; structures describing the queues that are requested to be created along with the logical device. Refer to the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-queue-creation&quot;&gt;Queue Creation&lt;/a&gt; section below for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f64e2826ba47a77a8ec39d823ee15d17d505b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueCreateInfos&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;queueCreateInfoCount&lt;/code&gt; valid &lt;code&gt;VkDeviceQueueCreateInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bc7ca779be9768b20b0bc53eaed18fdd717d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueFamilyIndices&lt;/code&gt; is a list of queue families that will access this buffer (ignored if &lt;code&gt;sharingMode&lt;/code&gt; is not &lt;code&gt;VK_SHARING_MODE_CONCURRENT&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e321247b6f56b3bbb4a0c5b8ff6c711794295daf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueFamilyIndices&lt;/code&gt; is a list of queue families that will access this image (ignored if &lt;code&gt;sharingMode&lt;/code&gt; is not &lt;code&gt;VK_SHARING_MODE_CONCURRENT&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc67d352a076405af638b331e6561cfa5e576044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueFamilyProperties&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;a href=&quot;#VkQueueFamilyProperties&quot;&gt;VkQueueFamilyProperties&lt;/a&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33da04df272fe78f63ff27abd7bbfed2caa31b14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueFamilyPropertyCount&lt;/code&gt; is a pointer to an integer related to the number of queue families available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0ee9d9acbf95e24dc3bed4468cc362fa9f0a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueueFamilyPropertyCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;uint32_t&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b6fbccd9ca6fc6111f42f9861b859a6688eeb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueuePriorities&lt;/code&gt; is an array of &lt;code&gt;queueCount&lt;/code&gt; normalized floating point values, specifying priorities of work that will be submitted to each created queue. See &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#devsandqueues-priority&quot;&gt;Queue Priority&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13dd50c3bd133e3d5ff4808ba23b720b13b8f1a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pQueuePriorities&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;queueCount&lt;/code&gt;&lt;code&gt;float&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61ca22b0a84680c531fd1758b3eff6b2992d412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRanges&lt;/code&gt; points to an array of &lt;a href=&quot;#VkImageSubresourceRange&quot;&gt;VkImageSubresourceRange&lt;/a&gt; structures that describe a range of mipmap levels, array layers, and aspects to be cleared, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-views&quot;&gt;Image Views&lt;/a&gt;. The &lt;code&gt;aspectMask&lt;/code&gt; of all image subresource ranges &lt;strong&gt;must&lt;/strong&gt; only include &lt;code&gt;VK_IMAGE_ASPECT_COLOR_BIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f23b0b7739491050e39977ddbf1eaf9123512c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRanges&lt;/code&gt; points to an array of &lt;a href=&quot;#VkImageSubresourceRange&quot;&gt;VkImageSubresourceRange&lt;/a&gt; structures that describe a range of mipmap levels, array layers, and aspects to be cleared, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-views&quot;&gt;Image Views&lt;/a&gt;. The &lt;code&gt;aspectMask&lt;/code&gt; of each image subresource range in &lt;code&gt;pRanges&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; include &lt;code&gt;VK_IMAGE_ASPECT_DEPTH_BIT&lt;/code&gt; if the image format has a depth component, and &lt;code&gt;VK_IMAGE_ASPECT_STENCIL_BIT&lt;/code&gt; if the image format has a stencil component. &lt;code&gt;pDepthStencil&lt;/code&gt; is a pointer to a &lt;code&gt;VkClearDepthStencilValue&lt;/code&gt; structure that contains the values the image subresource ranges will be cleared to (see &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#clears-values&quot;&gt;html/vkspec.html#clears-values&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f765b4f97e90e4c499639a7f24700a72d973c41b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRanges&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;rangeCount&lt;/code&gt; valid &lt;code&gt;VkImageSubresourceRange&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4f61a3060c2e152214b112fe6498955fdf29ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRasterizationState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineRasterizationStateCreateInfo&quot;&gt;VkPipelineRasterizationStateCreateInfo&lt;/a&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20709105ebd74c57cc8819adb9216f7b1a4f5eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRasterizationState&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkPipelineRasterizationStateCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964680d8f9e1f41f4f16028346ef676b0197fc53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRects&lt;/code&gt; points to an array of &lt;a href=&quot;#VkClearRect&quot;&gt;VkClearRect&lt;/a&gt; structures defining regions within each selected attachment to clear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21476654ec263eb36b23724b0cb278e9fcd2c2f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRects&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;rectCount&lt;/code&gt;&lt;code&gt;VkClearRect&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3d55d7281af41bba94e0c219e9a85fd5def75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkBufferCopy&quot;&gt;VkBufferCopy&lt;/a&gt; structures specifying the regions to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69794dc230c9625c90239c9b9080e62a21c11a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkBufferImageCopy&quot;&gt;VkBufferImageCopy&lt;/a&gt; structures specifying the regions to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189e143720a57e67e1e71fa7cd628f5b7baaa4b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkImageBlit&quot;&gt;VkImageBlit&lt;/a&gt; structures specifying the regions to blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83742f006372342266fac84b310d4a15bdad9794" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkImageCopy&quot;&gt;VkImageCopy&lt;/a&gt; structures specifying the regions to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4eb6d39b58d2bc273c8b3582d31d6aec3ed5fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkImageResolve&quot;&gt;VkImageResolve&lt;/a&gt; structures specifying the regions to resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae9705190f2134da6c4b2dfdb4229f0a5ca0e2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;regionCount&lt;/code&gt; valid &lt;code&gt;VkBufferImageCopy&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057e662043672f8126c8816cf92f02addb06eeaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;regionCount&lt;/code&gt; valid &lt;code&gt;VkImageBlit&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aeb84c527727dc7a477449039fbf77776f04fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;regionCount&lt;/code&gt; valid &lt;code&gt;VkImageCopy&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc02b4a1f8b254cb12aeb3e19e2fd2f9e945165a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;regionCount&lt;/code&gt; valid &lt;code&gt;VkImageResolve&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc90baff1486bc40a56010ebaf77271f71157095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRegions&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;regionCount&lt;/code&gt;&lt;code&gt;VkBufferCopy&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9895d63e995ee7bdc354e93af24fd31f7d547101" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRenderPass&lt;/code&gt; points to a &lt;code&gt;VkRenderPass&lt;/code&gt; handle in which the resulting render pass object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1df97029a11f0439165c17c132c7fe50f9ce1fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRenderPass&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkRenderPass&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f5e8859eaa2e56f14212396b05fd96d03161b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRenderPassBegin&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkRenderPassBeginInfo&quot;&gt;VkRenderPassBeginInfo&lt;/a&gt; structure (defined below) which indicates the render pass to begin an instance of, and the framebuffer the instance uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be019e8d48f49bdbe4651be76d608ae7c38e690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pRenderPassBegin&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkRenderPassBeginInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6514891161d7e326ad8e8b4c91ff5edccfa74745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pResolveAttachments&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt; or an array of &lt;code&gt;colorAttachmentCount&lt;/code&gt;&lt;a href=&quot;#VkAttachmentReference&quot;&gt;VkAttachmentReference&lt;/a&gt; structures that lists which of the render pass&amp;rsquo;s attachments are resolved to at the end of the subpass, and what layout each attachment will be in during the multisample resolve operation. If &lt;code&gt;pResolveAttachments&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, each of its elements corresponds to a color attachment (the element in &lt;code&gt;pColorAttachments&lt;/code&gt; at the same index), and a multisample resolve operation is defined for each attachment. At the end of each subpass, multisample resolve operations read the subpass&amp;rsquo;s color attachments, and resolve the samples for each pixel to the same pixel location in the corresponding resolve attachments, unless the resolve attachment index is &lt;code&gt;VK_ATTACHMENT_UNUSED&lt;/code&gt;. If the first use of an attachment in a render pass is as a resolve attachment, then the &lt;code&gt;loadOp&lt;/code&gt; is effectively ignored as the resolve is guaranteed to overwrite all pixels in the render area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fc554af1185ecc54356e41bb81a6ce995b5a7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSampleMask&lt;/code&gt; is a bitmask of static coverage information that is ANDed with the coverage information generated during rasterization, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#fragops-samplemask&quot;&gt;Sample Mask&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c39d685d7a6cd421daa95841ab9e5a04b0e8789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSampler&lt;/code&gt; points to a &lt;a href=&quot;#VkSampler&quot;&gt;VkSampler&lt;/a&gt; handle in which the resulting sampler object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccef21169592c40d4dcb621a2624c6298d6a320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSampler&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkSampler&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b285d6b50e99cc97a359ed1abb8e26259ffb39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pScissors&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkRect2D&quot;&gt;VkRect2D&lt;/a&gt; structures defining scissor rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aad6e36071b251644471b22741f049692647a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pScissors&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkRect2D&lt;/code&gt; structures which define the rectangular bounds of the scissor for the corresponding viewport. If the scissor state is dynamic, this member is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deac3c9514b771c72a7564ec18efe1c9636b84b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pScissors&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;scissorCount&lt;/code&gt;&lt;code&gt;VkRect2D&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96510d8ed110cb6d4cd55663034ee4396951c6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSemaphore&lt;/code&gt; points to a handle in which the resulting semaphore object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4307f2658fbd84ae71270b8cfc2f5b8ac9387ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSemaphore&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkSemaphore&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa92cf2cbac7a5d7961dc115d768cd4809578488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSetLayout&lt;/code&gt; points to a &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; handle in which the resulting descriptor set layout object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d598c86a78e3ec5a65331ae6aa3d9cf71b3299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSetLayout&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b37a4b4d42da78d7fac514c6e02b16e5ce95d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSetLayouts&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480157e18b442558e3d63862a1634eb9843c870d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSetLayouts&lt;/code&gt; is an array of descriptor set layouts, with each member specifying how the corresponding descriptor set is allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aca71373ccdbf2889f2e11aa03422b939ece7c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSetLayouts&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;descriptorSetCount&lt;/code&gt; valid &lt;code&gt;VkDescriptorSetLayout&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81925d7c8ba0e5053ccda36f71d0641ad8cdb74d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pShaderModule&lt;/code&gt; points to a &lt;code&gt;VkShaderModule&lt;/code&gt; handle in which the resulting shader module object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffc8980d8fae99c0c9b9e8cd12127140100c1d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pShaderModule&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkShaderModule&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a109425dae5a75f7448952dc4e65269aa503d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSignalSemaphores&lt;/code&gt; is a pointer to an array of semaphores which will be signaled when the command buffers for this batch have completed execution. If semaphores to be signaled are provided, they define a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-signaling&quot;&gt;semaphore signal operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beccddf9c1e8f6e7b03c8f523f0ebdb1ccd20c9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSignalSemaphores&lt;/code&gt; is a pointer to an array of semaphores which will be signaled when the sparse binding operations for this batch have completed execution. If semaphores to be signaled are provided, they define a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-signaling&quot;&gt;semaphore signal operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5042447c6faf257aca943a4b3733056d20750642" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSparseMemoryRequirementCount&lt;/code&gt; is a pointer to an integer related to the number of sparse memory requirements available or queried, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4d3f920a75ef3f0bafb3aec3b871d45d0dd293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSparseMemoryRequirementCount&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;uint32_t&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465f3dedd8f0a4506c3fee36a6696299db14e14e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSparseMemoryRequirements&lt;/code&gt; is either &lt;code&gt;NULL&lt;/code&gt; or a pointer to an array of &lt;code&gt;VkSparseImageMemoryRequirements&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655d207bf7306f0bdd4d14dbb81a7823fed1e6ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSpecializationInfo&lt;/code&gt; is a pointer to &lt;a href=&quot;#VkSpecializationInfo&quot;&gt;VkSpecializationInfo&lt;/a&gt;, as described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#pipelines-specialization-constants&quot;&gt;Specialization Constants&lt;/a&gt;, and &lt;strong&gt;can&lt;/strong&gt; be &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed221e244001f216ccd7ea56c840991bf42d418b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSrcCaches&lt;/code&gt; is an array of pipeline cache handles, which will be merged into &lt;code&gt;dstCache&lt;/code&gt;. The previous contents of &lt;code&gt;dstCache&lt;/code&gt; are included after the merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d097043a3e4819062135dde3fcd684fa19e313a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSrcCaches&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;srcCacheCount&lt;/code&gt; valid &lt;code&gt;VkPipelineCache&lt;/code&gt; handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f0a513c9ac465efadee83f605ea9be90ec55b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pStages&lt;/code&gt; is an array of size &lt;code&gt;stageCount&lt;/code&gt; structures of type &lt;a href=&quot;#VkPipelineShaderStageCreateInfo&quot;&gt;VkPipelineShaderStageCreateInfo&lt;/a&gt; describing the set of the shader stages to be included in the graphics pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8eee3f438a0713d443848aa9ff72e06168812c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pStages&lt;/code&gt; points to an array of &lt;a href=&quot;#VkPipelineShaderStageCreateInfo&quot;&gt;VkPipelineShaderStageCreateInfo&lt;/a&gt; structures, which were previously described in &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#pipelines-compute&quot;&gt;Compute Pipelines&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1ee6183d41f7aee88f38c31e0ccda540eb1935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pStages&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;stageCount&lt;/code&gt; valid &lt;code&gt;VkPipelineShaderStageCreateInfo&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab20c5a5ff41f1970f8642f904d3674d42ef596d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSubmits&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkSubmitInfo&quot;&gt;VkSubmitInfo&lt;/a&gt; structures, each specifying a command buffer submission batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd703ca97a57e47c34d473702587f9b447eb274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSubpasses&lt;/code&gt; points to an array of &lt;code&gt;subpassCount&lt;/code&gt; number of &lt;a href=&quot;#VkSubpassDescription&quot;&gt;VkSubpassDescription&lt;/a&gt; structures describing properties of the subpasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dea310eda240a0b913af3ddfbd6880788e1c464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSubpasses&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;subpassCount&lt;/code&gt; valid &lt;code&gt;VkSubpassDescription&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa03ec3afef9a6e7b9ace857199124ce4289e681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSubresource&lt;/code&gt; is a pointer to a &lt;a href=&quot;#VkImageSubresource&quot;&gt;VkImageSubresource&lt;/a&gt; structure selecting a specific image for the image subresource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4870804ac5e18a37c30c21657635f04fccde37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pSubresource&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkImageSubresource&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba37f858830c3387ba9aa62880919748e398d9bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pTessellationState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineTessellationStateCreateInfo&quot;&gt;VkPipelineTessellationStateCreateInfo&lt;/a&gt; structure, and is ignored if the pipeline does not include a tessellation control shader stage and tessellation evaluation shader stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb94961eb397a607bdc4e0690f52f24cdc02904e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pTexelBufferView&lt;/code&gt; points to an array of &lt;a href=&quot;#VkBufferView&quot;&gt;VkBufferView&lt;/a&gt; handles as described in the &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-buffer-views&quot;&gt;Buffer Views&lt;/a&gt; section or is ignored, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775ac2718ab7a846a88100828d8d95ba9fd6332f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pUserData&lt;/code&gt; is a value to be interpreted by the implementation of the callbacks. When any of the callbacks in &lt;code&gt;VkAllocationCallbacks&lt;/code&gt; are called, the Vulkan implementation will pass this value as the first parameter to the callback. This value &lt;strong&gt;can&lt;/strong&gt; vary each time an allocator is passed into a command, even when the same object takes an allocator in multiple commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95582f9493f9badb7ea75f8981e7b8d9088974a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pUserData&lt;/code&gt; is the value specified for &lt;a href=&quot;#VkAllocationCallbacks&quot;&gt;VkAllocationCallbacks&lt;/a&gt;::&lt;code&gt;pUserData&lt;/code&gt; in the allocator specified by the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758f568bc4860b439e37a16502ea7a6068b8b9ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pValues&lt;/code&gt; is an array of &lt;code&gt;size&lt;/code&gt; bytes containing the new push constant values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f3f1bb3c38959d0fe40662e68861881209b1fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pValues&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;size&lt;/code&gt; bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a40629007d5bb31ccef3115186a82805393736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pVertexAttributeDescriptions&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkVertexInputAttributeDescription&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ab2cc8070ca761caa90231a08aefa788ddb975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pVertexBindingDescriptions&lt;/code&gt; is a pointer to an array of &lt;code&gt;VkVertexInputBindingDescription&lt;/code&gt; structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cf8b19c176bc173ce68faddd13cc4c787b935a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pVertexInputState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineVertexInputStateCreateInfo&quot;&gt;VkPipelineVertexInputStateCreateInfo&lt;/a&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb719bdca346f1f7981db204c2104199802291fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pVertexInputState&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a valid &lt;code&gt;VkPipelineVertexInputStateCreateInfo&lt;/code&gt; structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713e6141e2a135e53007af0bcc27ff392df667e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pView&lt;/code&gt; points to a &lt;code&gt;VkBufferView&lt;/code&gt; handle in which the resulting buffer view object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89221e63435e7a2dc3f5385904c58658a924f24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pView&lt;/code&gt; points to a &lt;code&gt;VkImageView&lt;/code&gt; handle in which the resulting image view object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e7ab00c89f838979317b6595223105a6277e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkBufferView&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b9a1afe2bf341ddcb19791d67f2a89678560bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pView&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to a &lt;code&gt;VkImageView&lt;/code&gt; handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554e33a837bf8176647e7f48cd70d6fec444c76e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pViewportState&lt;/code&gt; is a pointer to an instance of the &lt;a href=&quot;#VkPipelineViewportStateCreateInfo&quot;&gt;VkPipelineViewportStateCreateInfo&lt;/a&gt; structure, and is ignored if the pipeline has rasterization disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2d72ae746caf0e8ce5e10bd0474d89cad3c4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pViewports&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkViewport&quot;&gt;VkViewport&lt;/a&gt; structures specifying viewport parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7190e5c5ec9341b25a22fcd965c4de281e47183f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pViewports&lt;/code&gt; is a pointer to an array of &lt;a href=&quot;#VkViewport&quot;&gt;VkViewport&lt;/a&gt; structures, defining the viewport transforms. If the viewport state is dynamic, this member is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c753a859db93ab2687048afa3a1ff0b13acf8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pViewports&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a pointer to an array of &lt;code&gt;viewportCount&lt;/code&gt; valid &lt;code&gt;VkViewport&lt;/code&gt; structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d58bc68b454885c4200ec1291c8bd3a4ca4dbd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pWaitDstStageMask&lt;/code&gt; is a pointer to an array of pipeline stages at which each corresponding semaphore wait will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1394908522d2dbea14154743f40922f379661b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pWaitSemaphores&lt;/code&gt; is a pointer to an array of semaphores upon which to wait before the command buffers for this batch begin execution. If semaphores to wait on are provided, they define a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-waiting&quot;&gt;semaphore wait operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d7e836250c3d8c8a6cb9f99a4772081197b1d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pWaitSemaphores&lt;/code&gt; is a pointer to an array of semaphores upon which to wait on before the sparse binding operations for this batch begin execution. If semaphores to wait on are provided, they define a &lt;a href=&quot;https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-semaphores-waiting&quot;&gt;semaphore wait operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be36aeda8b130cf434991fce7234ff3646b9b7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;passOp&lt;/code&gt; is a &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value specifying the action performed on samples that pass both the depth and stencil tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7dea7a4dd874f72995c611a5c13e0669607ccd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;passOp&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&quot;#VkStencilOp&quot;&gt;VkStencilOp&lt;/a&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c06b7bff871b1dd4930ed327ef59a363fd888f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patch&lt;/code&gt; is the patch version number.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
