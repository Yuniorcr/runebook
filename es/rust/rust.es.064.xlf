<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="6c174314670fbb8ca9af41e353a7d37f74474ae6" translate="yes" xml:space="preserve">
          <source>Standard behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb489760695bfa9f478fd69772c4e317ba3a9fa" translate="yes" xml:space="preserve">
          <source>Standard input and output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f6649ec446e2c763d807852aa11a25d33662f7" translate="yes" xml:space="preserve">
          <source>Standard macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a7de6e270547e88998d71994b1464d01295177" translate="yes" xml:space="preserve">
          <source>Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc06a45889af233b67d13ec72527145846f71d8" translate="yes" xml:space="preserve">
          <source>StarEq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d17ac6abe119c03a2e7c34e6e722552c80eb718" translate="yes" xml:space="preserve">
          <source>Start index bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab874be3b4d7a505778618a8d3c5a56aafc8953" translate="yes" xml:space="preserve">
          <source>Start index bound. &lt;a href=&quot;ops/trait.rangebounds#tymethod.start_bound&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0192a39704590b30caaa8f8d6c7c8c414ba535e1" translate="yes" xml:space="preserve">
          <source>Start index bound. &lt;a href=&quot;trait.rangebounds#tymethod.start_bound&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447181a35b7531af292c46aac14ac19969876dca" translate="yes" xml:space="preserve">
          <source>Start the server using &lt;code&gt;cargo run&lt;/code&gt;. Then open two browser windows: one for &lt;em&gt;http://127.0.0.1:7878/&lt;/em&gt; and the other for &lt;em&gt;http://127.0.0.1:7878/sleep&lt;/em&gt;. If you enter the &lt;em&gt;/&lt;/em&gt; URI a few times, as before, you&amp;rsquo;ll see it respond quickly. But if you enter &lt;em&gt;/sleep&lt;/em&gt; and then load &lt;em&gt;/&lt;/em&gt;, you&amp;rsquo;ll see that &lt;em&gt;/&lt;/em&gt; waits until &lt;code&gt;sleep&lt;/code&gt; has slept for its full 5 seconds before loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428cc22e640b87826434a4a495ceb6040b65a9a0" translate="yes" xml:space="preserve">
          <source>Start the server with &lt;code&gt;cargo run&lt;/code&gt;, and make three requests. The third request should error, and in your terminal you should see output similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9a81402c20cd284251c9fb55edc0c1697b363f" translate="yes" xml:space="preserve">
          <source>Start with a current offset of 0 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8bba1208058efe696e81bdc5118857fa51e35dd" translate="yes" xml:space="preserve">
          <source>Starting Relative Paths with &lt;code id=&quot;starting-relative-paths-with-super&quot;&gt;super&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd0a7574e9c72e101180196def8eeecac06c79" translate="yes" xml:space="preserve">
          <source>State yielded to &lt;a href=&quot;struct.once#method.call_once_force&quot;&gt;&lt;code&gt;call_once_force&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s closure parameter. The state can be used to query the poison status of the &lt;a href=&quot;struct.once&quot;&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72ca256dc49e55a1a57b9a727fbde9834c9a3f7" translate="yes" xml:space="preserve">
          <source>Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dfae0469d7c501e7081ddd478dde8c2f6c23a8" translate="yes" xml:space="preserve">
          <source>Statement and item terminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bca1d95f50392ac0ed6050113b9c83ea3af9cd" translate="yes" xml:space="preserve">
          <source>Statements accept &lt;a href=&quot;attributes&quot;&gt;outer attributes&lt;/a&gt;. The attributes that have meaning on a statement are &lt;a href=&quot;conditional-compilation&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;attributes/diagnostics#lint-check-attributes&quot;&gt;the lint check attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5328a225bf88e0ed36c05ac4a8717682f2fb065b" translate="yes" xml:space="preserve">
          <source>Statements and expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40e54bf50edc38a99ac52fd55c3092c92e9048f" translate="yes" xml:space="preserve">
          <source>Statements do not return values. Therefore, you can&amp;rsquo;t assign a &lt;code&gt;let&lt;/code&gt; statement to another variable, as the following code tries to do; you&amp;rsquo;ll get an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facb5a15d6dd0885bf36056d9434805635421264" translate="yes" xml:space="preserve">
          <source>Statements that define a term contain that term in &lt;em&gt;italics&lt;/em&gt;. Whenever that term is used outside of that chapter, it is usually a link to the section that has this definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097c1fce267f234d7d5279775c0a31c85496187e" translate="yes" xml:space="preserve">
          <source>Static and const variables can refer to other const variables. But a const variable cannot refer to a static variable. For example, &lt;code&gt;Y&lt;/code&gt; cannot refer to &lt;code&gt;X&lt;/code&gt; here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8416ac0abaeec2eceab8c9415ac2b2c1eb6e24" translate="yes" xml:space="preserve">
          <source>Static and dynamic C runtimes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2e223b16328222d733f39da12972def6a791b4" translate="yes" xml:space="preserve">
          <source>Static items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce95bf38ed4ce386c569a1f7a57e8b55dd1d3f81" translate="yes" xml:space="preserve">
          <source>Static variables are similar to constants, which we discussed in the &lt;a href=&quot;ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;&amp;ldquo;Differences Between Variables and Constants&amp;rdquo;&lt;/a&gt; section in Chapter 3. The names of static variables are in &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt; by convention, and we &lt;em&gt;must&lt;/em&gt; annotate the variable&amp;rsquo;s type, which is &lt;code&gt;&amp;amp;'static str&lt;/code&gt; in this example. Static variables can only store references with the &lt;code&gt;'static&lt;/code&gt; lifetime, which means the Rust compiler can figure out the lifetime; we don&amp;rsquo;t need to annotate it explicitly. Accessing an immutable static variable is safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d77600c715736039bd997ada5c68eea041ca2a9" translate="yes" xml:space="preserve">
          <source>Statics allow using paths to statics in the &lt;a href=&quot;../const_eval#constant-expressions&quot;&gt;constant expression&lt;/a&gt; used to initialize them, but statics may not refer to other statics by value, only through a reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc154b2c38fecd71dc8ecca95df6f667bf6f3b7" translate="yes" xml:space="preserve">
          <source>Statics are shared everywhere, and if they refer to mutable data one might violate memory safety since holding multiple mutable references to shared data is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927c0d79b4b2eabe16132d556b905f82babde15d" translate="yes" xml:space="preserve">
          <source>Stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6302b984e7d9ed8f1e191a257882c8172ea8ed" translate="yes" xml:space="preserve">
          <source>Stderr::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85563641ecb80f23eb5cbd9bbb06eddf4662aa8d" translate="yes" xml:space="preserve">
          <source>Stderr::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474f6405e19add88cb891fa2e4aa3ffdefb240cb" translate="yes" xml:space="preserve">
          <source>Stderr::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db528e0d20bcff8e82d9601caae9e4aef510fb51" translate="yes" xml:space="preserve">
          <source>Stderr::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da46b92964abd943a33384f4dce603f2a5354823" translate="yes" xml:space="preserve">
          <source>Stderr::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517549c2161d6f52b9f461dd13dd8e8c7729f340" translate="yes" xml:space="preserve">
          <source>Stderr::flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ba75b17ff297dfaf4a0527514c3d478ade2d49" translate="yes" xml:space="preserve">
          <source>Stderr::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a3c9d634ac76c9b9030f9d8d3706d2353a8a0a" translate="yes" xml:space="preserve">
          <source>Stderr::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c684c943a6b1d337a14841a7ea647535a9bb0b95" translate="yes" xml:space="preserve">
          <source>Stderr::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8208858d92ab6817b775d2430e152ec3cc3b3e01" translate="yes" xml:space="preserve">
          <source>Stderr::lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98051a54f067038874ba138706e1e6fd44c9f2b4" translate="yes" xml:space="preserve">
          <source>Stderr::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d62d22afda5743d43841b4a5046735995fa76f4" translate="yes" xml:space="preserve">
          <source>Stderr::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd68ca6bb94ee34283aa7569beb367afe9623317" translate="yes" xml:space="preserve">
          <source>Stderr::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1075320aa8f2529571fe2535a4137cdbbec0ddbd" translate="yes" xml:space="preserve">
          <source>Stderr::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9603abc737fdbec44d46fb163c0175f84d045d" translate="yes" xml:space="preserve">
          <source>Stderr::write_all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d30e01a80b2009b461e989d006d5118d861cc0" translate="yes" xml:space="preserve">
          <source>Stderr::write_fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8102af94dbbade8c73bce7591908bdb2d062d3e" translate="yes" xml:space="preserve">
          <source>Stderr::write_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3481d44718e0418ee3988039041a7eb18b030e26" translate="yes" xml:space="preserve">
          <source>StderrLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eacb27be541a76d40a13dfddffb0cdb221b2124" translate="yes" xml:space="preserve">
          <source>StderrLock::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e09ea3dbad5ce7aa31cc202bd04b0e0a862951d" translate="yes" xml:space="preserve">
          <source>StderrLock::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e789b85290c0decc9aa44b31f293342f8e082392" translate="yes" xml:space="preserve">
          <source>StderrLock::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90903a281e59bef9565b837c47dcf5a97a080ef0" translate="yes" xml:space="preserve">
          <source>StderrLock::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eda3a3608e82de4f9890eea5eefda36ec233f5f" translate="yes" xml:space="preserve">
          <source>StderrLock::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9c00130afc5c18b6e60244f38b08845eef1135" translate="yes" xml:space="preserve">
          <source>StderrLock::flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2a1dc277ba22a77d08cbbe46d54df3db326747" translate="yes" xml:space="preserve">
          <source>StderrLock::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b408f8496ed3ed8a3a544bf5bfceeac70188374e" translate="yes" xml:space="preserve">
          <source>StderrLock::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3b32b15db51446ada18401c254e72ad033e447" translate="yes" xml:space="preserve">
          <source>StderrLock::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4df6f8758d212feee0abb1c2e4422c3ab5a26c" translate="yes" xml:space="preserve">
          <source>StderrLock::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a86fdcc9cdb13eb6b9354c5e16415eab251694e" translate="yes" xml:space="preserve">
          <source>StderrLock::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a03859add96257d39a6e1351c9ec7a658cb234a" translate="yes" xml:space="preserve">
          <source>StderrLock::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873c214526302553a2b13fbb5f3f0c278fb682d4" translate="yes" xml:space="preserve">
          <source>StderrLock::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9a5488a85d14fb47f8a4f73ae2bfa284dff18c" translate="yes" xml:space="preserve">
          <source>StderrLock::write_all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5d3242672cd0b8c7b76aabed8fb8c44c859e9d" translate="yes" xml:space="preserve">
          <source>StderrLock::write_fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e9b78f52a024e49a5cd2fc9f0cdf5a5fdbb603" translate="yes" xml:space="preserve">
          <source>StderrLock::write_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e24b80fd15f7632d985d906dd107d9681c3bd0" translate="yes" xml:space="preserve">
          <source>Stdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1933688ac548f2bf961df5b2950f6380237a7b2d" translate="yes" xml:space="preserve">
          <source>Stdin::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53343de7dd20e4604b6309317b3252540e3b410" translate="yes" xml:space="preserve">
          <source>Stdin::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a9d936e0244afbcb6d23aa12ade0956e8e6127" translate="yes" xml:space="preserve">
          <source>Stdin::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005e1ba82f298ce07f49c46249f685052bba3428" translate="yes" xml:space="preserve">
          <source>Stdin::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62751225c5309b760c795c80a90a2735a069947" translate="yes" xml:space="preserve">
          <source>Stdin::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0a0f3bdaa461dbf24c9597b09378430cae36ab" translate="yes" xml:space="preserve">
          <source>Stdin::bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bb2afe2cd9c1bb0561b17a793176c9e746c6c9" translate="yes" xml:space="preserve">
          <source>Stdin::chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de0bffa102c12ef8b5496a986470a31a999c293" translate="yes" xml:space="preserve">
          <source>Stdin::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2921f5751057f89ad6078ebeee85234d7bd2c111" translate="yes" xml:space="preserve">
          <source>Stdin::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee8af1847649bb724e7248d7d2e88325c433c03" translate="yes" xml:space="preserve">
          <source>Stdin::initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5568313fe71140e57db48b1699557bb02d50103" translate="yes" xml:space="preserve">
          <source>Stdin::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d357c9fc90eb10d11a17f5c45fa1aaff9a5ed709" translate="yes" xml:space="preserve">
          <source>Stdin::lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5889cf84214c1257410330a9ab841132311f2110" translate="yes" xml:space="preserve">
          <source>Stdin::read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5152028b1b3cbbb2fdf06f62f2f085c9959ec9" translate="yes" xml:space="preserve">
          <source>Stdin::read_exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63af7e3315be1a5fa99992cc46fb76204ba1349" translate="yes" xml:space="preserve">
          <source>Stdin::read_line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a09ae76fcf57592dc91e81ca1ac1226b9755704" translate="yes" xml:space="preserve">
          <source>Stdin::read_to_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd636f4d1b6ad994a50888682cf8862454ecacc" translate="yes" xml:space="preserve">
          <source>Stdin::read_to_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9905aaa956696525ec7cf184f07c959cdbdfada" translate="yes" xml:space="preserve">
          <source>Stdin::read_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbb67ef166dd55bca0b9f39a670b7d781a94a03" translate="yes" xml:space="preserve">
          <source>Stdin::take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9bf5dfc1225f3ee639d075cff4a77b117dcbe2" translate="yes" xml:space="preserve">
          <source>Stdin::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d823a3995138e27d5ac9d3768968e577087031c" translate="yes" xml:space="preserve">
          <source>Stdin::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8bcddff947df1a78463a21a65abdf20bbf0c258" translate="yes" xml:space="preserve">
          <source>Stdin::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb856f5ad121420a3596d225c82f963bb528d1c" translate="yes" xml:space="preserve">
          <source>StdinLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaf35972fd5f3fa6821372e8eb1ba7c596b5173" translate="yes" xml:space="preserve">
          <source>StdinLock::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05772e7144bdd9b5b4b54ce08913c32f1ef74f20" translate="yes" xml:space="preserve">
          <source>StdinLock::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14cedcea00fa4658627acc814401b4287b795bf" translate="yes" xml:space="preserve">
          <source>StdinLock::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd482cd7d2a31f08ff3c3f0305afeb75202640c0" translate="yes" xml:space="preserve">
          <source>StdinLock::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd2a2d1c9b1e1af52b74624a45487a8c27abf7b" translate="yes" xml:space="preserve">
          <source>StdinLock::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923ecce58fe2d05615de010dbe5b7a81c1325056" translate="yes" xml:space="preserve">
          <source>StdinLock::bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cc6b753fa372d7f14bfa79dd3c2a4d370473f9" translate="yes" xml:space="preserve">
          <source>StdinLock::chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f447820700d79199bae88fc353fc00fb0d1bdf" translate="yes" xml:space="preserve">
          <source>StdinLock::consume</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0900f36a4613094d4e1a837251028e00333c2d0" translate="yes" xml:space="preserve">
          <source>StdinLock::fill_buf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764bdee57dc810fc40fdc4f67d2d6232d82b9228" translate="yes" xml:space="preserve">
          <source>StdinLock::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d74bc46cdf5beae2368b0cfe7f2992c154a64a" translate="yes" xml:space="preserve">
          <source>StdinLock::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2544fe915065752c89ffbee6b8df3c3962172e" translate="yes" xml:space="preserve">
          <source>StdinLock::initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf6cc509fc86d976ac9f1a16af9f1fb07b0cbaf" translate="yes" xml:space="preserve">
          <source>StdinLock::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3e130f080ec23676d63f63eaa491872bfbe445" translate="yes" xml:space="preserve">
          <source>StdinLock::lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9d26200d1b7864d5916ef31e9b3c2f39328a45" translate="yes" xml:space="preserve">
          <source>StdinLock::read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81c0aa6f26580c8a62896299cb1e75f7bdd02c8" translate="yes" xml:space="preserve">
          <source>StdinLock::read_exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50d2215915d240e25bdd8d85558699787d6714f" translate="yes" xml:space="preserve">
          <source>StdinLock::read_line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd56f1a1fc7fc2752ea85d1966fcbffe50ee1071" translate="yes" xml:space="preserve">
          <source>StdinLock::read_to_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb994cb400d3138b96c84174968ce682d33fb8a8" translate="yes" xml:space="preserve">
          <source>StdinLock::read_to_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68d3d0efa9fe70dd0e5e0dc0209deb2abf53acb" translate="yes" xml:space="preserve">
          <source>StdinLock::read_until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8796a54d96c9d06bd01d65050b7adf4c2bde28bf" translate="yes" xml:space="preserve">
          <source>StdinLock::read_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1279a22f73c033975c9f2997f4d60a74eb223fd6" translate="yes" xml:space="preserve">
          <source>StdinLock::split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e97f5cb1bed144ad1eadcb309b86d09ceaa09bc" translate="yes" xml:space="preserve">
          <source>StdinLock::take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b75d613ffed1c47dd5f2d3ade6a782357575a8b" translate="yes" xml:space="preserve">
          <source>StdinLock::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2dc01d597eee25edea5058580869a5ee58fd3c" translate="yes" xml:space="preserve">
          <source>StdinLock::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb139e7ba373d1422e05264a61a2abea6a4a85f4" translate="yes" xml:space="preserve">
          <source>StdinLock::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b05fac21d23f288e98f53b690f7b13fd2c19a91" translate="yes" xml:space="preserve">
          <source>Stdio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037c6b222f766d0912ed4f73ede7f0f75f715e51" translate="yes" xml:space="preserve">
          <source>Stdio::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e1a0997b05328c4bb819558495c53a2133b46e" translate="yes" xml:space="preserve">
          <source>Stdio::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9ab237e39a3a73a0a3e00d222ba5f0618db090" translate="yes" xml:space="preserve">
          <source>Stdio::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f70c20ae493888822036f30e8d4e1ca0aa86003" translate="yes" xml:space="preserve">
          <source>Stdio::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bb645c6b7b8e08fe705ec0611bdc7bbe23665d" translate="yes" xml:space="preserve">
          <source>Stdio::from_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d14ef94107d2990340576c7472939432f30831" translate="yes" xml:space="preserve">
          <source>Stdio::from_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0c5e53c5ad767d996c42c5ee99aab770063357" translate="yes" xml:space="preserve">
          <source>Stdio::inherit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4e99a4f75dbb3f5c337cf34ac44a2b7c0e9232" translate="yes" xml:space="preserve">
          <source>Stdio::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd77a6d02d3953374afb7a78871154e7721ac10" translate="yes" xml:space="preserve">
          <source>Stdio::null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849059a121c09ea7402f91dd581a20dda22fdf87" translate="yes" xml:space="preserve">
          <source>Stdio::piped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1740eab120d55834e2851d553351cbad62cfb421" translate="yes" xml:space="preserve">
          <source>Stdio::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a4a3bbb4781d096f80acdadf9797534022215b" translate="yes" xml:space="preserve">
          <source>Stdio::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8d3d7c369fed3e6b0e0820568650d176aa776f" translate="yes" xml:space="preserve">
          <source>Stdio::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8100935a282240c132b02399fce393f72604be" translate="yes" xml:space="preserve">
          <source>Stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998e7e3ff8217038082bef88067abfb398ee094b" translate="yes" xml:space="preserve">
          <source>Stdout::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a0923c058c09275cc8a05448907cdd1a062488" translate="yes" xml:space="preserve">
          <source>Stdout::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e23d08e805fd624efcb34f437175860cfbdf88" translate="yes" xml:space="preserve">
          <source>Stdout::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e5674878ca6c8bed715f9de3150940666e5fcd" translate="yes" xml:space="preserve">
          <source>Stdout::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee31b67b8f1299b1c9955068b336cb0dcb541c56" translate="yes" xml:space="preserve">
          <source>Stdout::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537c47f7f6171cb00a8a196cc89b3d77c561ffc0" translate="yes" xml:space="preserve">
          <source>Stdout::flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f69b98b2e69b43c34750157ff9ea90eae3a41e" translate="yes" xml:space="preserve">
          <source>Stdout::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089f575679f2f21522ebe523aa422a3fa209007b" translate="yes" xml:space="preserve">
          <source>Stdout::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3ffa982389b0693c4a3583ece3879fd11208d3" translate="yes" xml:space="preserve">
          <source>Stdout::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c51b52b45f18caf8930150260ff3be6d724bc44" translate="yes" xml:space="preserve">
          <source>Stdout::lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cff1689c6ccbba2a551ce3f61f6f2ce309b033" translate="yes" xml:space="preserve">
          <source>Stdout::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dc9a2fb69901a68c8c1f5cd9aa4ade2e44f315" translate="yes" xml:space="preserve">
          <source>Stdout::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f288c3783a9736d2ae590fc0b516838faf0ef26" translate="yes" xml:space="preserve">
          <source>Stdout::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19394c43966ca9321a451c1f1fccbe5dabd3aae" translate="yes" xml:space="preserve">
          <source>Stdout::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e321b70af722057fee11773eb24307297d65bfc1" translate="yes" xml:space="preserve">
          <source>Stdout::write_all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c3d09a192d68cafe64fe73265925dd7551eb01" translate="yes" xml:space="preserve">
          <source>Stdout::write_fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b761066d6c4a9a188832c031503f118e445aa67" translate="yes" xml:space="preserve">
          <source>Stdout::write_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be791f2a0f4571d2f6aea5f1d8b2443f1ae83c3" translate="yes" xml:space="preserve">
          <source>StdoutLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7e006580bde6e3f0aa4d9ce1207646e7eb7591" translate="yes" xml:space="preserve">
          <source>StdoutLock::as_raw_fd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d9567f4104f7bf28e4735c6191701127cf2a84" translate="yes" xml:space="preserve">
          <source>StdoutLock::as_raw_handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91abe168be972a24504c6106e846b8f4d13bda83" translate="yes" xml:space="preserve">
          <source>StdoutLock::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1224c73d8b954a67c750d7a2bd6217bb753c4886" translate="yes" xml:space="preserve">
          <source>StdoutLock::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43530fbafdb4a26d76bd0aaf9c1834c92e776e6" translate="yes" xml:space="preserve">
          <source>StdoutLock::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7cbb4cee1d1e089c3ad93704d2e434385984d0" translate="yes" xml:space="preserve">
          <source>StdoutLock::flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfa622aacbdda50f1462ab5c653b4025b835906" translate="yes" xml:space="preserve">
          <source>StdoutLock::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1bb3479f161479110d2fff0c09a1ec07417ec4" translate="yes" xml:space="preserve">
          <source>StdoutLock::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36e48bd01c099691347c68717c09300c0054cc7" translate="yes" xml:space="preserve">
          <source>StdoutLock::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae0635dedc82f4be30f1c09024bceeafad80f3c" translate="yes" xml:space="preserve">
          <source>StdoutLock::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7101350c9ec23077d67f3dc72234c62d887fa6e8" translate="yes" xml:space="preserve">
          <source>StdoutLock::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3d3bd5402c30425231783337877240ac92bd61" translate="yes" xml:space="preserve">
          <source>StdoutLock::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7716551110cb0b42786b50992e19178c225a89" translate="yes" xml:space="preserve">
          <source>StdoutLock::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35950b017afe0ae7c8959fd9c1485308dcb2534e" translate="yes" xml:space="preserve">
          <source>StdoutLock::write_all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1060aeadfb50b224f1e6c391f7d34cd69889ef24" translate="yes" xml:space="preserve">
          <source>StdoutLock::write_fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e180cae96a07fcaf1745aaa16d0fb0aaf51374f" translate="yes" xml:space="preserve">
          <source>StdoutLock::write_vectored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc416e1088e4bf094dfc9abe0210e0288f5a169e" translate="yes" xml:space="preserve">
          <source>Step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74a8e6dbf6121f079033c7ae937d30e84f3751a" translate="yes" xml:space="preserve">
          <source>Step::add_one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932b328f152f36b608be872992f6f43d2567ed8f" translate="yes" xml:space="preserve">
          <source>Step::add_usize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edd1d1a5ea42ac2d42f7bb562d3d7f7da412977" translate="yes" xml:space="preserve">
          <source>Step::replace_one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a138fbc1e2514b5579051761ffc075fe236b7900" translate="yes" xml:space="preserve">
          <source>Step::replace_zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b69aacf972de158091c71b91cd00c8eb2e359f7" translate="yes" xml:space="preserve">
          <source>Step::steps_between</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4706f4c9231c0475100bfe65dd71cc867844d814" translate="yes" xml:space="preserve">
          <source>Step::sub_one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a497f0122b90aacec6611759b169445def69b87" translate="yes" xml:space="preserve">
          <source>Step::sub_usize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8868477b71ec4e8c342418e32a4087bcb724757a" translate="yes" xml:space="preserve">
          <source>StepBy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6be3cc17ab898e3e7addcf01f81f92ace5015f" translate="yes" xml:space="preserve">
          <source>StepBy::all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d166d1ff17b8d0149a329cfacac5a010ef3c777" translate="yes" xml:space="preserve">
          <source>StepBy::any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8c70ddd3e0161f344e5f8c5799ff50d7c3c68" translate="yes" xml:space="preserve">
          <source>StepBy::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d8aabbf773245d97df7abd4d62e783152c65a5" translate="yes" xml:space="preserve">
          <source>StepBy::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a291abe9aa1c46ed8e7ee5a6e2871092132889" translate="yes" xml:space="preserve">
          <source>StepBy::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae7c66970e742eb6d5e1aef8bbb51826c5bbb80" translate="yes" xml:space="preserve">
          <source>StepBy::chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0da818e18c00a4fb7552ea29c4982ea42f5e98f" translate="yes" xml:space="preserve">
          <source>StepBy::clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b49c3a77c07381d6f62ba7b95b2ee707df8ef4e" translate="yes" xml:space="preserve">
          <source>StepBy::clone_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54bbd8ce7269adff2e33088427aec46fcee8e11" translate="yes" xml:space="preserve">
          <source>StepBy::clone_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233d803a79346ceed097af74874b0302b46db11e" translate="yes" xml:space="preserve">
          <source>StepBy::cloned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262841067669f3a037da2bc9ab72e5b4a3927d09" translate="yes" xml:space="preserve">
          <source>StepBy::cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea42cc418e1e5b74dc26f60a0733c23c45f63bc" translate="yes" xml:space="preserve">
          <source>StepBy::collect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3f09fc36f3ae982788577af9a10e6587fb3e8e" translate="yes" xml:space="preserve">
          <source>StepBy::copied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb364a660fdf2ca152924a7e45ebbded5d166aec" translate="yes" xml:space="preserve">
          <source>StepBy::count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0529d8683f7c4fddecd10f36de2c2253213804" translate="yes" xml:space="preserve">
          <source>StepBy::cycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3b2d61d2033ef4976be5dd1194274d353294ed" translate="yes" xml:space="preserve">
          <source>StepBy::enumerate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b916f190de747663e1e0e75d19c12c0c99590d" translate="yes" xml:space="preserve">
          <source>StepBy::eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b366580376de91ae1e16c74373924925cfaa760" translate="yes" xml:space="preserve">
          <source>StepBy::filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b7d4095956a3ce92e53bc1c8a8db29622d6c0b" translate="yes" xml:space="preserve">
          <source>StepBy::filter_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866e8454b224a9329bcd13eb3083f31bad38b0aa" translate="yes" xml:space="preserve">
          <source>StepBy::find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7173fa7cd1fea04ad969cd0db768766fdeee501c" translate="yes" xml:space="preserve">
          <source>StepBy::find_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0e083fee67665e3a2fe8d1e4132a5b6446c288" translate="yes" xml:space="preserve">
          <source>StepBy::flat_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a830965024ad2b8aca419a3c98357944020a19" translate="yes" xml:space="preserve">
          <source>StepBy::flatten</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b63145a49889d60fc0eb9f7514c6b0bce15695a" translate="yes" xml:space="preserve">
          <source>StepBy::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c35dc96c4ba58d51acc9493d42c3eb6ed732b4" translate="yes" xml:space="preserve">
          <source>StepBy::fold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05e74fc3ee2ef6a54758c026a06e108dae42443" translate="yes" xml:space="preserve">
          <source>StepBy::for_each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb0ae13349883ca3896e63d0e1122ff9c5f1055" translate="yes" xml:space="preserve">
          <source>StepBy::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe4cfa5328c3ad77a48c8d077ada55772b53fd2" translate="yes" xml:space="preserve">
          <source>StepBy::fuse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bb740072608ed691a8c9883d38e80b3df8df82" translate="yes" xml:space="preserve">
          <source>StepBy::ge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b673961fb425fc10b4541bf1d94fd1cfa4dcb1d2" translate="yes" xml:space="preserve">
          <source>StepBy::gt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5610df5bd37568c381c41fd6fde75e79647b2c" translate="yes" xml:space="preserve">
          <source>StepBy::inspect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34958616835abb26a6b76099341b544b27170c1" translate="yes" xml:space="preserve">
          <source>StepBy::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbb07965aaeac95336ae23439ecf40aeb90007d" translate="yes" xml:space="preserve">
          <source>StepBy::into_iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247abf02e5c7ba0b7b50689076577f17c161777f" translate="yes" xml:space="preserve">
          <source>StepBy::is_empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40d45dd5dd3e480e3dcf6ac4184cd5ba2c85aac" translate="yes" xml:space="preserve">
          <source>StepBy::is_sorted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e21ca958fbec69653308fe31aefe67ab34c220" translate="yes" xml:space="preserve">
          <source>StepBy::is_sorted_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667bd8f3c6706d2155e9b819ead33637fe80890d" translate="yes" xml:space="preserve">
          <source>StepBy::is_sorted_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6546debd32e8ed488b7db29ea10395384f13feea" translate="yes" xml:space="preserve">
          <source>StepBy::last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856582018b53723466bf00515a60295b484ba5ff" translate="yes" xml:space="preserve">
          <source>StepBy::le</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53033b7ccd3e12dd75f9589d344987aacc5a5624" translate="yes" xml:space="preserve">
          <source>StepBy::len</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf9644effd76e25b5a6112d8a0fed094c04e3c5" translate="yes" xml:space="preserve">
          <source>StepBy::lt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ff407c725de96f3187e87bfd9b2de5961c0d3f" translate="yes" xml:space="preserve">
          <source>StepBy::map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7439dcf27474f1628b5e5aa899c1f548645d58ff" translate="yes" xml:space="preserve">
          <source>StepBy::max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c012bf6bc446e6ba069b5edaf12e0033caf38ec0" translate="yes" xml:space="preserve">
          <source>StepBy::max_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1317c5a1b37afe65155c8f6be807bf48f3b8e571" translate="yes" xml:space="preserve">
          <source>StepBy::max_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e4ee60285ab4df41e01741ca7787d046bbe6e6" translate="yes" xml:space="preserve">
          <source>StepBy::min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48031de458902aa3a0d1bfb8999eff92b9eb166" translate="yes" xml:space="preserve">
          <source>StepBy::min_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c1b57da004afdae7f79f70174b36d2447c9954" translate="yes" xml:space="preserve">
          <source>StepBy::min_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63bcc5742c3ec4cc360688c93a636bcfdf8eadd" translate="yes" xml:space="preserve">
          <source>StepBy::ne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfe614050f3b7b0795c1ca6a7a6830005e9fe12" translate="yes" xml:space="preserve">
          <source>StepBy::next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295815ce232ddf8f7fe8981b306df914e94c1f67" translate="yes" xml:space="preserve">
          <source>StepBy::nth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8518a4c321b097e92cbc2f9c7a98a26d35f6e3" translate="yes" xml:space="preserve">
          <source>StepBy::partial_cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8464743ce78c82486446a1a7112664f3e0603899" translate="yes" xml:space="preserve">
          <source>StepBy::partition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de5b4ee0a0001c95bcd452225cc70d47c937e07" translate="yes" xml:space="preserve">
          <source>StepBy::peekable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fe089d67e2c0e9beec2cd00b944f3ba6c1a5d9" translate="yes" xml:space="preserve">
          <source>StepBy::position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850bbf9034d379e0e6627c2f284f53ed30fb3007" translate="yes" xml:space="preserve">
          <source>StepBy::product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42502922b6cb5132e3fba440cc0d1a76e3bea11f" translate="yes" xml:space="preserve">
          <source>StepBy::rev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf3f8b9506a1a8b591f9616d9149166013246cf" translate="yes" xml:space="preserve">
          <source>StepBy::rposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e603c91925b66cd76ab8add81446394e2a3d4aee" translate="yes" xml:space="preserve">
          <source>StepBy::scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d00037663c35183a619ad107a667ecca1ef612" translate="yes" xml:space="preserve">
          <source>StepBy::size_hint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b489748f3814a86b99b05853b43bb971b67a63" translate="yes" xml:space="preserve">
          <source>StepBy::skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4de98131d7ad00cf4581a947508b87248432baf" translate="yes" xml:space="preserve">
          <source>StepBy::skip_while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcb77d152cc81d427693809a85ba27984d2e31d" translate="yes" xml:space="preserve">
          <source>StepBy::step_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828affbd112aca0702afb1e2c09773b9d7bc74a8" translate="yes" xml:space="preserve">
          <source>StepBy::sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e463258db29527806d7824363334bebf13b3eb8c" translate="yes" xml:space="preserve">
          <source>StepBy::take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9be41d7c8dee08c1d71da68b5834de30f167eca" translate="yes" xml:space="preserve">
          <source>StepBy::take_while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358e905de67d1bbc7253a8d67ef8ca5c586664ac" translate="yes" xml:space="preserve">
          <source>StepBy::to_owned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8194888e6ffd0367a624da0303866aae3e7960f5" translate="yes" xml:space="preserve">
          <source>StepBy::try_fold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1616fd61aeca7a6cd09f4ee68fb63d2aff7f7df" translate="yes" xml:space="preserve">
          <source>StepBy::try_for_each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736680cd4aa89ba295fa51b22ba4a2cd7cecd12d" translate="yes" xml:space="preserve">
          <source>StepBy::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cd381ced697e7d91acda95c7c2cb9a12626ff3" translate="yes" xml:space="preserve">
          <source>StepBy::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9112b833d720823befeb78cb7bd9384fbcb8c5a1" translate="yes" xml:space="preserve">
          <source>StepBy::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b7e447bead25216695ca7ba00082f98dd9f8a2" translate="yes" xml:space="preserve">
          <source>StepBy::unzip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52da1eb2a77eff357cfb18e678c5fa8debfeadc6" translate="yes" xml:space="preserve">
          <source>StepBy::zip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969475faf378b77ee3c7e408e896cd92c2e9ad08" translate="yes" xml:space="preserve">
          <source>Stopping after an initial &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1502397bd60a39f2985f31ce7eca4d3743f94703" translate="yes" xml:space="preserve">
          <source>Stopping at the first &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ded04132fbb8c45ecba42791c73247c4b05174" translate="yes" xml:space="preserve">
          <source>Stopping at the first &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e478687147f835f9942d6328bdd2da0352416a12" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7607db4f31cea38019d111e1f8fb57a140fa3b" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2421011b29fd5fadec2e1553b516f95340bdbe" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8d5bb33c2232e4c55121bd7c0dd22bc9cd48fe" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688cc7e54f9a4d3cfe67311bd7c4d4802b6bfae5" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfd698f3d56ac4ce041dcca8248ed8135ab8118" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761383a44e5bf24b9aaa126b422cb75d07aa6b02" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256416400af020435a41145be63c64c77111324c" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce2018451cd2ecfc6443c717882c59687c5e284" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb9515f8511603aa79ebfc1d113a1687286079f" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe422930cf109442bf2c9b33fa18f3a1af0f9843" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3ad6039a39a1826c9e54d183cc46edbcb431a1" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194ebfc4ae259b15feea5e4e0682017305e95e0c" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e97c08e28bb86f1c88e1a188fa7c5b9799b597" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2844c551e145dda75671a1b7cecbdfb2221897c0" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e32e9756d574e2c0a16f8b0f002968518689fb8" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as both the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a343161a13b4b6e6609728e72eb6f29938f3c9de" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e18480eba37fa387d10791d3f8bb404110a8f9" translate="yes" xml:space="preserve">
          <source>Stores a value if the current value is the same as the &lt;code&gt;old&lt;/code&gt; value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;compare_exchange_weak&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;success&lt;/code&gt; and &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;failure&lt;/code&gt; parameters. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.compare_exchange_weak&quot;&gt;&lt;code&gt;AtomicBool::compare_exchange_weak&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3629e49896de244f0b749b2b80ab967e6e13907" translate="yes" xml:space="preserve">
          <source>Stores a value into the &lt;a href=&quot;../../primitive.bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt; if the current value is the same as the &lt;code&gt;current&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2440803a99a37f281e427320926482fa1071b670" translate="yes" xml:space="preserve">
          <source>Stores a value into the atomic integer if the current value is the same as the &lt;code&gt;current&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dff83f021c06704d81f7c281dbbfa1c1a0fa4b" translate="yes" xml:space="preserve">
          <source>Stores a value into the atomic integer, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2e8fd47d5ccea76ba9ef2fff2f7943d325be41" translate="yes" xml:space="preserve">
          <source>Stores a value into the atomic integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119a4a6c4a69ba768b4e5c897a0faf3142383fef" translate="yes" xml:space="preserve">
          <source>Stores a value into the bool, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29272dc6a58e3d3474e1030f57dba59bbd1d3a5" translate="yes" xml:space="preserve">
          <source>Stores a value into the bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfd98b7f4b5e497204ba7f98e65a034edb49ee9" translate="yes" xml:space="preserve">
          <source>Stores a value into the pointer if the current value is the same as the &lt;code&gt;current&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac55816542b7e159e906f498ff1677175847b62d" translate="yes" xml:space="preserve">
          <source>Stores a value into the pointer, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9024df6eae1ec2fe65ed6f5c3721e34c46186857" translate="yes" xml:space="preserve">
          <source>Stores a value into the pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2ef0b23f6bab94f3144bbbb7ed90bf3f8be2bc" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25121411f237d5a3b255b2caca0635eefaf01e0c" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e81c657d51ede4fa81fe7c21bf4ef26638ca07" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19e5bb9d171d75f586cc61ce664b6a916d5c195" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8030139c4ec8c6025d59d4dcccaedc427bb79f4" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;swap&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.swap&quot;&gt;&lt;code&gt;AtomicBool::swap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d744bfc37a5d4f2faafa00447e2d53a7c11b2dce" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558131953bf9325269bc1604a350cc09ced58086" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef34e9d641cf47db45d02c60f8c82a2fcdade16" translate="yes" xml:space="preserve">
          <source>Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;store&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.store&quot;&gt;&lt;code&gt;AtomicBool::store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f314aeb61dc623d4497c0de13894ab0ff571f4" translate="yes" xml:space="preserve">
          <source>Storing Closures Using Generic Parameters and the &lt;code id=&quot;storing-closures-using-generic-parameters-and-the-fn-traits&quot;&gt;Fn&lt;/code&gt; Traits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe02b32668bde9c8ff5e4581bef9193fc253d29d" translate="yes" xml:space="preserve">
          <source>Storing Keys with Associated Values in Hash Maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39f7b350713a16f3f8768b2cfe5e7693d021c74" translate="yes" xml:space="preserve">
          <source>Storing Lists of Values with Vectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728c950074b55a5d29f5307006ae06f71d6240bb" translate="yes" xml:space="preserve">
          <source>Storing Matching Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb47b032bd26b490525fff9a27fbf5ce74e9cf04" translate="yes" xml:space="preserve">
          <source>Storing UTF-8 Encoded Text with Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca19388c911a2922126ff766a610048a685b77f" translate="yes" xml:space="preserve">
          <source>Storing Values with Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd58be8dd340a08cff3ca0d3b7dbc5ede5e5bd33" translate="yes" xml:space="preserve">
          <source>Storing the Text of the Post Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6389fa677b648ec2037a22fd2933d02038a62780" translate="yes" xml:space="preserve">
          <source>StrSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02b50ff4d2a1be8bf4ce1c9de11bd4f136dd9b8" translate="yes" xml:space="preserve">
          <source>Strict keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96405b6db8c107451efd663eb6153828a87b00e" translate="yes" xml:space="preserve">
          <source>String Literals Are Slices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f268ef3146681d0d16caa50deab692e9515c2b97" translate="yes" xml:space="preserve">
          <source>String Slices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feabc7bee06b98810a70ba78fe6e1a80375ce431" translate="yes" xml:space="preserve">
          <source>String Slices as Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e2a17e33d8e783ffce386be7bcef656dd825a4" translate="yes" xml:space="preserve">
          <source>String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left. If something should be added to a string literal, move the literal to the heap by allocating it with &lt;code&gt;to_owned()&lt;/code&gt; like in &lt;code&gt;&quot;Your text&quot;.to_owned()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938a030a34060e8519b951ba06bff87138fc1669" translate="yes" xml:space="preserve">
          <source>String literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5993cb336c6391ee8eea94b873bb797a1c4d4619" translate="yes" xml:space="preserve">
          <source>String literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a161ce1c4763f5febbf5f15380af558671af91" translate="yes" xml:space="preserve">
          <source>String literals are string slices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd5ca20e7ac140d2e661642c7527b7953c9df0c" translate="yes" xml:space="preserve">
          <source>String slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f02181787c05c748bfcf3b7067c7975b7688853" translate="yes" xml:space="preserve">
          <source>String slices are a UTF-8 representation of characters that have the same layout as slices of type &lt;code&gt;[u8]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba567b37fc5c798886a30798b2a3786a05c4cc3f" translate="yes" xml:space="preserve">
          <source>String slices are always valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899d341c980fba1bcea83c4c6ec606ac089489be" translate="yes" xml:space="preserve">
          <source>String slices, as you might imagine, are specific to strings. But there&amp;rsquo;s a more general slice type, too. Consider this array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bbabd6d5a50fc93350f17cf5e5bf554ce97381" translate="yes" xml:space="preserve">
          <source>String slices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef1c6cb8a46294d0554a32227f24e7301b06aa0" translate="yes" xml:space="preserve">
          <source>String table productions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2e5b468b893ab1c8fcb1d85ff96b1bc638691d" translate="yes" xml:space="preserve">
          <source>String::add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788a03bd027b3412af69c22447c18fd96b22ae38" translate="yes" xml:space="preserve">
          <source>String::add_assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7479152d3e55603723f7f3000f329fd4977b6e2f" translate="yes" xml:space="preserve">
          <source>String::as_bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c86a3d269212b3563e9e4b11db2a1388dc353e" translate="yes" xml:space="preserve">
          <source>String::as_bytes_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cb05e32c2be79106972b9c89e7062730445d76" translate="yes" xml:space="preserve">
          <source>String::as_mut_ptr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc834724e1284798fdf78ba80e6fd1550f5a6b04" translate="yes" xml:space="preserve">
          <source>String::as_mut_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c32205c2389eb0e80a8b11db30cdd6abc876276" translate="yes" xml:space="preserve">
          <source>String::as_mut_vec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667f89de47bb488298c65aeaed3749603f0127d6" translate="yes" xml:space="preserve">
          <source>String::as_ptr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7040a89074711e0dbcf0ec35c710df8a5e8868" translate="yes" xml:space="preserve">
          <source>String::as_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f8221844d2162499926d799d88609c73e22fd4" translate="yes" xml:space="preserve">
          <source>String::as_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f50819041d0c3908e1b2e207f4a85911b48a0f4" translate="yes" xml:space="preserve">
          <source>String::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c08d5b390ede34456ef3bb2b45a1f111b683abd" translate="yes" xml:space="preserve">
          <source>String::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b084774771d122d267bd802663fd547690cf1b3" translate="yes" xml:space="preserve">
          <source>String::bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451cc18839f2782394e6acc826f2847fb6d69b82" translate="yes" xml:space="preserve">
          <source>String::capacity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af3daa5dc07635d76b95e22e01acb04436f557a" translate="yes" xml:space="preserve">
          <source>String::char_indices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114fcc5a2905c1c7231acb2c12a68e9abf30a463" translate="yes" xml:space="preserve">
          <source>String::chars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056689cbdd72c637d46f96bf8036d5ec85eb4e3d" translate="yes" xml:space="preserve">
          <source>String::clamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a44c1970779dc10251e92ede9e57c0101534c36" translate="yes" xml:space="preserve">
          <source>String::clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aa0ee16ad3f624da528410010ba66fd4e66b6b" translate="yes" xml:space="preserve">
          <source>String::clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9f95ddefeb59eac1cb896df4e425701227dfd3" translate="yes" xml:space="preserve">
          <source>String::clone_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501291dd13688c8ea909ba6bc7d4a99ba838f5a9" translate="yes" xml:space="preserve">
          <source>String::clone_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34facccc5b22666a011125b48cecd0c7939e9f59" translate="yes" xml:space="preserve">
          <source>String::cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6abedef5d8066814cd56938c00a919fcf85b04" translate="yes" xml:space="preserve">
          <source>String::contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dc969e3f8c91e53d7114963e4e8bcba6fa5f50" translate="yes" xml:space="preserve">
          <source>String::default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a5efa225be0ff976877254c87bdfac24e6ca5a" translate="yes" xml:space="preserve">
          <source>String::deref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153c399bf402095dbf16e1b374aa464a45101cf4" translate="yes" xml:space="preserve">
          <source>String::deref_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40094b4ddfc929b46b3eabb41ea2646b77bac2a8" translate="yes" xml:space="preserve">
          <source>String::drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25e53252d9bad7cdf38527f1eee626f5e2ad2bc" translate="yes" xml:space="preserve">
          <source>String::encode_utf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff25a9755f3c8135e8632a89c6d92753f69a9ee" translate="yes" xml:space="preserve">
          <source>String::ends_with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09063214f98911ac3d88fcfff8c74179f56c319" translate="yes" xml:space="preserve">
          <source>String::eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af67d6ae0addfc128330f1d9ad4d418756e884c4" translate="yes" xml:space="preserve">
          <source>String::eq_ignore_ascii_case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cda12f4bebd62311067c61c6a0c6769ec482be" translate="yes" xml:space="preserve">
          <source>String::escape_debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de367d2b0759b0e7044b82b45cf73376d9ae879e" translate="yes" xml:space="preserve">
          <source>String::escape_default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ade797341c8c82275212ce3308e43c93165695" translate="yes" xml:space="preserve">
          <source>String::escape_unicode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fc7dc94432731b1c6a21f406528fb4cff9d004" translate="yes" xml:space="preserve">
          <source>String::extend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f654cc21b0e6cefb8e126fd7ad8da237b9b36a5" translate="yes" xml:space="preserve">
          <source>String::find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a6a68095f6f2019105852258308f0b1ac94c41" translate="yes" xml:space="preserve">
          <source>String::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7835621817c44abdd886c6d626e2d5548e1bc8" translate="yes" xml:space="preserve">
          <source>String::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a746105f1948600d13cae37977435fa6c75be7c" translate="yes" xml:space="preserve">
          <source>String::from_iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b5bbb449c41d2c994b0db414a4482ca38ef3cb" translate="yes" xml:space="preserve">
          <source>String::from_raw_parts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2804da55b791c1169015aabcf44002fc5e6da5d" translate="yes" xml:space="preserve">
          <source>String::from_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0998de3003e2b1acda18c19c4f4eedd337db36a4" translate="yes" xml:space="preserve">
          <source>String::from_utf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94901eeb5cf0c746c44133477666e4523df79b22" translate="yes" xml:space="preserve">
          <source>String::from_utf16_lossy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d47f31fe38e1ed8d8d03978b1a5a539ba11d31" translate="yes" xml:space="preserve">
          <source>String::from_utf8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3588059201c42e086c2fcbe8d2f9fee824e03c41" translate="yes" xml:space="preserve">
          <source>String::from_utf8_lossy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc9f78eca0d298464fc6c15774bbd64144bd185" translate="yes" xml:space="preserve">
          <source>String::from_utf8_unchecked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02901bb0e5a2ba5fd17c6b00131f01b2db77c8f" translate="yes" xml:space="preserve">
          <source>String::ge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbe412198a9c557515f0d3dc49ae05ec11aac05" translate="yes" xml:space="preserve">
          <source>String::get</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d338b248e7de4fea2abc13bc133e5d2fb49d6e51" translate="yes" xml:space="preserve">
          <source>String::get_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0f38a2635c3595563de816e726c0608ca39c84" translate="yes" xml:space="preserve">
          <source>String::get_unchecked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de8711f79f0a218619aceed9d81e15e634fbc28" translate="yes" xml:space="preserve">
          <source>String::get_unchecked_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e4e696c5efbb431ef03db35287234832c1d6d4" translate="yes" xml:space="preserve">
          <source>String::gt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921a75b9d42a4bf8baffdf5d679f532c818469a2" translate="yes" xml:space="preserve">
          <source>String::hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70495be3517cacb5b893c493c1ab8c835d2e33e" translate="yes" xml:space="preserve">
          <source>String::hash_slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40305df494d014b81e9ccd6cb0da4eb54e948872" translate="yes" xml:space="preserve">
          <source>String::index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794abde37a6d1ab6b94bba412fe9184516c0d25e" translate="yes" xml:space="preserve">
          <source>String::index_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c561fce314a36478c1810e0005e2465363eeeb5d" translate="yes" xml:space="preserve">
          <source>String::insert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cde3fe0a68617b47b2a7387eede7ff8f90abbb" translate="yes" xml:space="preserve">
          <source>String::insert_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06acd97f08350ebb167d0fa789ca45f68263eb3d" translate="yes" xml:space="preserve">
          <source>String::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0702af6880cd9e9615f242c5f8e48956eec2caeb" translate="yes" xml:space="preserve">
          <source>String::into_boxed_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e3f97d0e5144f44ad830aa3d3f49de27ba0749" translate="yes" xml:space="preserve">
          <source>String::into_bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f5ef6d9371c5b9c2744b77dc1907cb7c359092" translate="yes" xml:space="preserve">
          <source>String::into_searcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821947f727a3f8edb1abe496d48ba16bee5ccc6b" translate="yes" xml:space="preserve">
          <source>String::is_ascii</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ace92ad975aece3ff3f3f8c853975dcb1445a7" translate="yes" xml:space="preserve">
          <source>String::is_char_boundary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde14ef233591f6d048d162aa6f2284271c4acd4" translate="yes" xml:space="preserve">
          <source>String::is_contained_in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d510b8dc7b9c13e875d48252d8ee7e1291e666c4" translate="yes" xml:space="preserve">
          <source>String::is_empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c3e90c17469ca713ff851b5e5a61529c01b332" translate="yes" xml:space="preserve">
          <source>String::is_prefix_of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccbaf22f432e37aae458e500795bcb0031c37eb" translate="yes" xml:space="preserve">
          <source>String::is_suffix_of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abef8d17e14d741fc28011efc958994b2aa4b1c1" translate="yes" xml:space="preserve">
          <source>String::le</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731128f2f032b42e7f3dd7cf5832c47e391fe6b6" translate="yes" xml:space="preserve">
          <source>String::len</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e300afb25cb425712422fa36593f93e98c98b944" translate="yes" xml:space="preserve">
          <source>String::lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe199b1c4e2ca538ae6b7a793c6bc241e8871f1" translate="yes" xml:space="preserve">
          <source>String::lines_any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24922825f222d9141e815f04700a60dc99f3ffc" translate="yes" xml:space="preserve">
          <source>String::lt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23e1a3b38c1d28e9f1929e7cdea287cd131a95b" translate="yes" xml:space="preserve">
          <source>String::make_ascii_lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d85a9bd84a91fc6463e9eacc69cfe3149f62180" translate="yes" xml:space="preserve">
          <source>String::make_ascii_uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f78bb1d3256161acdb23b91b84a86ef9397a87" translate="yes" xml:space="preserve">
          <source>String::match_indices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a019f3bcef675da1f1140b28c947795c203c878f" translate="yes" xml:space="preserve">
          <source>String::matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa48d1a513bea1c953f42ea412aafd4b992e5515" translate="yes" xml:space="preserve">
          <source>String::max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3bc0623e76aafdcd18549f3c890354555e766a" translate="yes" xml:space="preserve">
          <source>String::min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b201502e4ec0bec5080e2526f3b12b7546da3333" translate="yes" xml:space="preserve">
          <source>String::ne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38701de11785858262af84419e2c1656e6cde22a" translate="yes" xml:space="preserve">
          <source>String::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a781adbb7bd74dcf46b5bc09707fe45aa619f2a" translate="yes" xml:space="preserve">
          <source>String::parse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc67436a4e92e41f1c5261fea7c38daf156d0ee" translate="yes" xml:space="preserve">
          <source>String::partial_cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4a1c101d90f5c1fe729374fbee64904544cfa5" translate="yes" xml:space="preserve">
          <source>String::pop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bcb365d76bb7364efe6ecfc6f6e568b0f97fed" translate="yes" xml:space="preserve">
          <source>String::push</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803d91d064d22a5890f9b68979fa411cd735e5ac" translate="yes" xml:space="preserve">
          <source>String::push_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76059783ec5135c457348d44f960f88dfdc3086e" translate="yes" xml:space="preserve">
          <source>String::remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80887ce618e6a345d6289d21a609dbc3fc9516f8" translate="yes" xml:space="preserve">
          <source>String::repeat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c808f58e92761ea751d58f8ab94f35d1a2773ff" translate="yes" xml:space="preserve">
          <source>String::replace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca5f2bdc9df956a26bfbfb3e265edce8e6466e4" translate="yes" xml:space="preserve">
          <source>String::replace_range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1ccccd11b76615c1d7816a54ca015151519531" translate="yes" xml:space="preserve">
          <source>String::replacen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c2af916ed840d050d73a9ce888ba1520751e86" translate="yes" xml:space="preserve">
          <source>String::reserve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f285102dc4085b7a6f368385a47094eb37929d" translate="yes" xml:space="preserve">
          <source>String::reserve_exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1a8e9a62794bbea1cad359c844bce23a14cbe9" translate="yes" xml:space="preserve">
          <source>String::retain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79e871fcbf00ddd5399b798e1c930a7c57ae6ac" translate="yes" xml:space="preserve">
          <source>String::rfind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38df270ee44f8278a7190a9e27db6ae43b1f08b0" translate="yes" xml:space="preserve">
          <source>String::rmatch_indices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67edd0ccda8c44a9181b06dd38f5ac78fe89c037" translate="yes" xml:space="preserve">
          <source>String::rmatches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99d3102824881df2e8fb18721624ec7a0c0ad87" translate="yes" xml:space="preserve">
          <source>String::rsplit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1e98cf35c19e48da4d182a1d74726b6e9448ab" translate="yes" xml:space="preserve">
          <source>String::rsplit_terminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd175b150404c83aca840ddcc283803cfacfaa22" translate="yes" xml:space="preserve">
          <source>String::rsplitn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f909b2e650bcc8325c3716ba1a482047facfcdae" translate="yes" xml:space="preserve">
          <source>String::shrink_to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49c888d124c00b4588732d221d4173737ac4003" translate="yes" xml:space="preserve">
          <source>String::shrink_to_fit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f623f0e513162576f8c9420e71b1a4400fc509b" translate="yes" xml:space="preserve">
          <source>String::slice_mut_unchecked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf0eb3efcfaf7f6fb6a0cf9e74670664789bf1e" translate="yes" xml:space="preserve">
          <source>String::slice_unchecked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05197279a8dc78e914a93317d28a359ca47a42ee" translate="yes" xml:space="preserve">
          <source>String::split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f913c0e892f856a2f34ba1101244d327d67062" translate="yes" xml:space="preserve">
          <source>String::split_ascii_whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17cd1d7a8452579503187eed715a76a484599b0" translate="yes" xml:space="preserve">
          <source>String::split_at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bceac51c03af190728aa73b7c43490797da614cc" translate="yes" xml:space="preserve">
          <source>String::split_at_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8166b9de28f26550fdb546beddbb169aed261c4" translate="yes" xml:space="preserve">
          <source>String::split_off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a306a684497616013b9cb25c63dc4f35dcc123" translate="yes" xml:space="preserve">
          <source>String::split_terminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c36c4bfa9a1d73b22a357146d90f5379355996" translate="yes" xml:space="preserve">
          <source>String::split_whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7af319707310af98dfb6c536a07db49189814a" translate="yes" xml:space="preserve">
          <source>String::splitn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9a9cf91c208665ae321562f65dde7512b9d265" translate="yes" xml:space="preserve">
          <source>String::starts_with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1903b88fca441333bb411d132cff4dfa2e6cc6f8" translate="yes" xml:space="preserve">
          <source>String::to_ascii_lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2f2ca6e9d8577baf789bae5980fee5d1a7d2f6" translate="yes" xml:space="preserve">
          <source>String::to_ascii_uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904c321750988931c2e82eaa4cb157f40efaf2fe" translate="yes" xml:space="preserve">
          <source>String::to_lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b5bbd19adf53481378b689e7e1ef9c3db4159e" translate="yes" xml:space="preserve">
          <source>String::to_owned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a74d6a2255b4d3e11ca9e4e465190a6dfe8ea5" translate="yes" xml:space="preserve">
          <source>String::to_socket_addrs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cb502de1bde44bb7dabb831614f32ffa8c390b" translate="yes" xml:space="preserve">
          <source>String::to_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54db041950df85f091e07a93075a2cee59e11da" translate="yes" xml:space="preserve">
          <source>String::to_uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81123723e4aee5b4d73d320fa76197c5d4a356f" translate="yes" xml:space="preserve">
          <source>String::trim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dc541e099b3b119ebbd818fae831e11973237c" translate="yes" xml:space="preserve">
          <source>String::trim_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e288b4fca1de6e4c78b0fc3d01782434b425dbf" translate="yes" xml:space="preserve">
          <source>String::trim_end_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a56bbb7fdd9341608a87cfd2089807301b8af82" translate="yes" xml:space="preserve">
          <source>String::trim_left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ad2d94edbf1ea089309b58ebf6bb062f4577e0" translate="yes" xml:space="preserve">
          <source>String::trim_left_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd65c54e8668b8ce7efdf7ade4b995559ebe61a9" translate="yes" xml:space="preserve">
          <source>String::trim_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1872c024c70227932a4149749e20d2278dc168d" translate="yes" xml:space="preserve">
          <source>String::trim_right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1e9e8b9d8489a5d7364dcb9e2cbb85ed736eed" translate="yes" xml:space="preserve">
          <source>String::trim_right_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e445d2b5f6625832300a4b8f5f6375b5bafa1ee" translate="yes" xml:space="preserve">
          <source>String::trim_start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f785066af2fba521699166dbf7a1cd6f3f78ae39" translate="yes" xml:space="preserve">
          <source>String::trim_start_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f8e94e619630407a73f926d970192f970e7841" translate="yes" xml:space="preserve">
          <source>String::truncate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f75c5ae5eac00510681413ddb2c8c53ced3446" translate="yes" xml:space="preserve">
          <source>String::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06936c4db7c81a4e7da7935aaea8ff6bec92729" translate="yes" xml:space="preserve">
          <source>String::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034dd39b0e7302d8896842e5e64e149e3e04d442" translate="yes" xml:space="preserve">
          <source>String::try_reserve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd30c1b3bc5cb18d09ae7c90d95a837c332d1ba9" translate="yes" xml:space="preserve">
          <source>String::try_reserve_exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1a7b4be4249331849e2dc81eed0353ba198a75" translate="yes" xml:space="preserve">
          <source>String::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba09ecda8c82bd79ee8e6973ff3c7d239ba2c40" translate="yes" xml:space="preserve">
          <source>String::with_capacity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7721e410d8a2d99dc56d1c29ebb3b22d812b46" translate="yes" xml:space="preserve">
          <source>String::write_char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9e579520b59cb8767f1f4e3461294978861b41" translate="yes" xml:space="preserve">
          <source>String::write_fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0561db84602a627d8d412f468fcf3cbc7b71bbf2" translate="yes" xml:space="preserve">
          <source>String::write_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5779c125057c8b6578a72f5af8dc585c79ee326" translate="yes" xml:space="preserve">
          <source>Stringifies its arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372f7f3b5df083201e60e86cbc80792c48eaeed5" translate="yes" xml:space="preserve">
          <source>Strings Are Not So Simple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e851d308b3d6cc7468dc277143276bf411668c13" translate="yes" xml:space="preserve">
          <source>Strings are compared lexicographically by their byte values. This compares Unicode code points based on their positions in the code charts. This is not necessarily the same as &quot;alphabetical&quot; order, which varies by language and locale. Comparing strings according to culturally-accepted standards requires locale-specific data that is outside the scope of the &lt;code&gt;str&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39a686ab01fe15d1f2b137f885e8d73da23ed29" translate="yes" xml:space="preserve">
          <source>Strings are made of bytes (&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;), and a slice of bytes (&lt;a href=&quot;../primitive.slice&quot;&gt;&lt;code&gt;&amp;amp;[u8]&lt;/code&gt;&lt;/a&gt;) is made of bytes, so this function converts between the two. Not all byte slices are valid strings, however: strings are required to be valid UTF-8. During this conversion, &lt;code&gt;from_utf8_lossy()&lt;/code&gt; will replace any invalid UTF-8 sequences with &lt;a href=&quot;../char/constant.replacement_character&quot;&gt;&lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;&lt;/a&gt;, which looks like this: �</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b01dd0d8f186b5f820ce34a9d2e4129fd568b5" translate="yes" xml:space="preserve">
          <source>Strings are ordered lexicographically by their byte values. This orders Unicode code points based on their positions in the code charts. This is not necessarily the same as &quot;alphabetical&quot; order, which varies by language and locale. Sorting strings according to culturally-accepted standards requires locale-specific data that is outside the scope of the &lt;code&gt;str&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d9b0987606f98984857072fc8e02d1a0bb41f" translate="yes" xml:space="preserve">
          <source>Strings slices are always valid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c99cdc3412974ab6552e069a3e13545cd83d14" translate="yes" xml:space="preserve">
          <source>StripPrefixError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886a20c524ec99241e2ef546dbc107abe2ed00af" translate="yes" xml:space="preserve">
          <source>StripPrefixError::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d441951c7f08b1286ecc9b9b90ff59e1c9ec4c1" translate="yes" xml:space="preserve">
          <source>StripPrefixError::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63028033727e574bbc237dc34a3eb15e43469c13" translate="yes" xml:space="preserve">
          <source>StripPrefixError::cause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bede297a36bc582e9ed41a45334d0991940255" translate="yes" xml:space="preserve">
          <source>StripPrefixError::clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d207c7243f7f456f2006db04dc14157cfda771" translate="yes" xml:space="preserve">
          <source>StripPrefixError::clone_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490a7e576dbbe73ad26f261e982406942967a697" translate="yes" xml:space="preserve">
          <source>StripPrefixError::clone_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae97e782d04e30e2d6d618403551c9e8df74f11" translate="yes" xml:space="preserve">
          <source>StripPrefixError::description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84694ce963b6849b8cab9058e8b1f5c6a93df088" translate="yes" xml:space="preserve">
          <source>StripPrefixError::eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a2591200acb5877eaf4929ba08567e62fd4dd8" translate="yes" xml:space="preserve">
          <source>StripPrefixError::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea87b046d7d22c9bb540bf9126b22ef862de78a" translate="yes" xml:space="preserve">
          <source>StripPrefixError::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8bf39107c2bd80a518eb79b7ce34a96f9ca835" translate="yes" xml:space="preserve">
          <source>StripPrefixError::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e1c3b59467330c43790bb77294a5907660bdf4" translate="yes" xml:space="preserve">
          <source>StripPrefixError::ne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad560b0d31b0d3ad1fc923f96f27a98843e6292b" translate="yes" xml:space="preserve">
          <source>StripPrefixError::source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235061b0d221cd925349e7448a18dfc679ce402b" translate="yes" xml:space="preserve">
          <source>StripPrefixError::to_owned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752a32b331b7588747d5499307a0bc0398b6bbac" translate="yes" xml:space="preserve">
          <source>StripPrefixError::to_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad9d9fb5178f36b9e7459faf6c41d6f43a84b13" translate="yes" xml:space="preserve">
          <source>StripPrefixError::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f356f101a7e58d1240170f57b2362e856743cf7c" translate="yes" xml:space="preserve">
          <source>StripPrefixError::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bf4695472c0b6b81c6a0d721aadb9ae44d55c5" translate="yes" xml:space="preserve">
          <source>StripPrefixError::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6730e4b772b9e8cffed9f3afbaeef16803f9089c" translate="yes" xml:space="preserve">
          <source>Strong references are how you can share ownership of an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; instance. Weak references don&amp;rsquo;t express an ownership relationship. They won&amp;rsquo;t cause a reference cycle because any cycle involving some weak references will be broken once the strong reference count of values involved is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ab848fe5c4b2e5f638f279c7f13cc481bac6da" translate="yes" xml:space="preserve">
          <source>Struct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79895b413b2e2267013db45b292432f8977bafb2" translate="yes" xml:space="preserve">
          <source>Struct expression attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f315afe523e1f9481167bd8c68e89cc1fa49b0" translate="yes" xml:space="preserve">
          <source>Struct expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57731acd8797cd1665eb0fcbf9c5606bade6c378" translate="yes" xml:space="preserve">
          <source>Struct expressions with curly braces can't be used directly in a &lt;a href=&quot;loop-expr&quot;&gt;loop&lt;/a&gt; or &lt;a href=&quot;if-expr#if-expressions&quot;&gt;if&lt;/a&gt; expression's head, or in the &lt;a href=&quot;../glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; of an &lt;a href=&quot;if-expr#if-let-expressions&quot;&gt;if let&lt;/a&gt; or &lt;a href=&quot;match-expr&quot;&gt;match&lt;/a&gt; expression. However, struct expressions can be in used in these situations if they are within another expression, for example inside &lt;a href=&quot;http://localhost:3000/expressions/grouped-expr.html&quot;&gt;parentheses&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98da0696bf34255f5d352fa9ebd0bdeefd03e6fd" translate="yes" xml:space="preserve">
          <source>Struct field init shorthand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab7b07507532a2e880965fc5c7140ffb05e0038" translate="yes" xml:space="preserve">
          <source>Struct field initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5566ab15ed235cee98f88b7b080e39684f217881" translate="yes" xml:space="preserve">
          <source>Struct fields that can be loaned or &quot;taken&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917fbbd69c4b6181cec14941674cc8769fd502f4" translate="yes" xml:space="preserve">
          <source>Struct literal update syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c03ec517fc45b6a0731f643a246f96b2e7852b1" translate="yes" xml:space="preserve">
          <source>Struct patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03ec5b4f08ad6d42a5eff60eccc6c69e104e3be" translate="yes" xml:space="preserve">
          <source>Struct patterns match struct values that match all criteria defined by its subpatterns. They are also used to &lt;a href=&quot;patterns#destructuring&quot;&gt;destructure&lt;/a&gt; a struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e6115e4e92c444d6feb34fbabe10cc0492731f" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::AllocErr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c046a4344583523ec4bb17c8569a9bf0f4ba29d" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::CannotReallocInPlace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1879e44410e0b375d74fa712a80b7d8b974db26" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::Excess</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0312a25e4dfb626a16d9d9160dfc1c9101454af1" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::Global</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bec3fd16134e0295c8637b1e9cc36097a026fb0" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787b24ca2efa27e9d5a7e5a4eb93ca4d639ed923" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::LayoutErr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a998fd2ffa396622309aac3fdabcba01a97c4f8" translate="yes" xml:space="preserve">
          <source>Struct std::alloc::System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a6653f325762b4859e97d8836666a4f7b33825" translate="yes" xml:space="preserve">
          <source>Struct std::any::TypeId</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bf29fdfc4778fe11624757e896ff328f455ecd" translate="yes" xml:space="preserve">
          <source>Struct std::array::TryFromSliceError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182bb1f6e842d3fa74a646c39587d9d1e3f7a663" translate="yes" xml:space="preserve">
          <source>Struct std::ascii::EscapeDefault</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8d3017f6e183016921f1b9e0ffadc29786ccab" translate="yes" xml:space="preserve">
          <source>Struct std::boxed::Box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69d94dba191afc948a144cba7091d76e8d5b849" translate="yes" xml:space="preserve">
          <source>Struct std::cell::BorrowError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69fe57bdc6bfa8afcf92c7aabd4bd616cfda805" translate="yes" xml:space="preserve">
          <source>Struct std::cell::BorrowMutError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ad57c663ef09a8c1f9daffe062017bc63ea9e2" translate="yes" xml:space="preserve">
          <source>Struct std::cell::Cell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31b888d4413cc24fef7c8464f4e13da72171df8" translate="yes" xml:space="preserve">
          <source>Struct std::cell::Ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d1d302e0fd1789c9f9cc227deb3cde2c407c13" translate="yes" xml:space="preserve">
          <source>Struct std::cell::RefCell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c268fd850a09ba2bd385574f90634a756ccdcf54" translate="yes" xml:space="preserve">
          <source>Struct std::cell::RefMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd4fa71f0ca6e15ca49d1215c308891ea8c3c9c" translate="yes" xml:space="preserve">
          <source>Struct std::cell::UnsafeCell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8de31eb6c6626ae00f283d65d5ec9b56a3714a1" translate="yes" xml:space="preserve">
          <source>Struct std::char::CharTryFromError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef143f6fd2e56c75d0ceec4c3f33319b3793fd3" translate="yes" xml:space="preserve">
          <source>Struct std::char::DecodeUtf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3558a72a017c05172763b1b7ceb420dd15749d8" translate="yes" xml:space="preserve">
          <source>Struct std::char::DecodeUtf16Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b777a87e22f964fbc07e43a213a264e8a390e726" translate="yes" xml:space="preserve">
          <source>Struct std::char::EscapeDebug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdba631e4a759ebef7b8b51009eaaad287129c7" translate="yes" xml:space="preserve">
          <source>Struct std::char::EscapeDefault</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9256ca42af2d09d8b0f7718a4d98411382d602d9" translate="yes" xml:space="preserve">
          <source>Struct std::char::EscapeUnicode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c338450b477da8e1b8be61e693bbc3b3118e79f0" translate="yes" xml:space="preserve">
          <source>Struct std::char::ParseCharError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f3976b79a11ff0d10ef7f2f8696c89576fe799" translate="yes" xml:space="preserve">
          <source>Struct std::char::ToLowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3228c47be412608b48f91b3d023e19563ce0964" translate="yes" xml:space="preserve">
          <source>Struct std::char::ToUppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bd9840899c3b8bbdc8951970bf8a62a36a3c49" translate="yes" xml:space="preserve">
          <source>Struct std::char::UnicodeVersion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6123a390e9f84e1b3145d989a687eda4ee4268" translate="yes" xml:space="preserve">
          <source>Struct std::cmp::Reverse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ffdc0b1856783257892fc2a10567d0e48104c3" translate="yes" xml:space="preserve">
          <source>Struct std::collections::BTreeMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d26beb1590e54fc8f027df6da14ed28af0f3bfe" translate="yes" xml:space="preserve">
          <source>Struct std::collections::BTreeSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2700916b9ade2f9f0fc4006ba74a751c0d7d0068" translate="yes" xml:space="preserve">
          <source>Struct std::collections::BinaryHeap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c3eeb74fa3c644c5e793ecc6eefb06a918449e" translate="yes" xml:space="preserve">
          <source>Struct std::collections::HashMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e0d3269fd2b0f0bfe81379b38cad56618adb81" translate="yes" xml:space="preserve">
          <source>Struct std::collections::HashSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3936d143aa13fec9019332916f9a6c31fe0caee1" translate="yes" xml:space="preserve">
          <source>Struct std::collections::LinkedList</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee96353fa112828cab2ec749c1fa91140680bd20" translate="yes" xml:space="preserve">
          <source>Struct std::collections::VecDeque</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3f8d763be6275b4f183f113e127f340f030af3" translate="yes" xml:space="preserve">
          <source>Struct std::collections::binary_heap::BinaryHeap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b96f15b9768830dbc6a50260f13bb8d8eee3d1c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::binary_heap::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd24262e1e518b4b0dee6eb7033a7b1ef677312c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::binary_heap::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b96878031e35bf7522e902c393b2644ffe6a8a4" translate="yes" xml:space="preserve">
          <source>Struct std::collections::binary_heap::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4011b49b195f0c111073c1350ca8f0dafb0964a8" translate="yes" xml:space="preserve">
          <source>Struct std::collections::binary_heap::PeekMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48ffee42b3f6ff97c5e39fc5f11d222b0b79642" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::BTreeMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798aad880a3c9d703e2a5cff25a4ef18c4b47565" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f949219a026c13d98810ca459c47aaea72c2d3ab" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bbb63e5835a2d451b0acef7b961fab390e6701" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e090638527ec4ba03a7197f385f66f929c3f5897" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efa9e0d8c035b6023f823081e92cacdcd58ddc7" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::OccupiedEntry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6371db8d4a820cf9cb6b1184e9dd8389a346009a" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::Range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae4df5b063c45777b10ba20cad20ec5887d6fae" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::RangeMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e01c9cf26d0a6e55098b53017b4ab285806e9a" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::VacantEntry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435147ce3b256ab755fbeb64adfd2ad5bc4b513b" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c0b9981da2db789e1e21d1b52d37469b77716c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_map::ValuesMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7468536d558dc66926b64a0095e066919c0798" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::BTreeSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af31c8ad59ff6f4452b813cd53a6eaa05b4ec08" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::Difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8073d4536cbaaae3a66ee49ede37b4766cc7ed5" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::Intersection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3368b529b54040937351c1a56c5960dcb8c6da19" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8a856a8628040825ada1fbb0f5f316407186a" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee01867f90534a07184e08a8e61ddcf792fbf746" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::Range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe375de0f05c8f02d84808c02e7f5bcb28349c53" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::SymmetricDifference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a706aa896c0904936b97b598fbd851920fac48de" translate="yes" xml:space="preserve">
          <source>Struct std::collections::btree_set::Union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b066343a716e5622b901e0fdabf56a941e392c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::DefaultHasher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8a10d1bbcc21cd2720ea98f04282501c13433c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce27f7e4da2be76bc424632971769bdf3dcbe78" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::HashMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b943e184fc519e8901363749839997943942cea" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7199e7dcfccc5a5a80443c8d103f80e4ca0f55e6" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a06a1276a687e22d7fddc1bebcc92fd7423208" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f777807ede422e9b4564b2a5c93ded9a17dc1a35" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e39c0054522643519390411b2f121e963a4528" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::OccupiedEntry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ff81cb458e012ecbec5148cc9cce44a4063be3" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::RandomState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40a547d51ea03c722a4002767359565a548ff25" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::RawEntryBuilder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa32645707a95a1fe39d0543c1d507fae54d205" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::RawEntryBuilderMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd1016e3f8641df36e94beb9f6c81129f4da5d2" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::RawOccupiedEntryMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80f0fb738b488264da31dda98517446f4d85496" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::RawVacantEntryMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c6bed18b033042f9c4a188ba53d7db2002aa98" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::VacantEntry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23af1901f9794cac3650392ef3ad30c18674305" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073d74abe5a09fcd5e04eb4016dae35d985402a7" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_map::ValuesMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9c025e682ae0b15e1627065571a12990d4a17c" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::Difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e6b6d159691a98bd1708000c4bc7d56eaad5d1" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba9a9816d31ca472b837cafce1b555c6b922002" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::HashSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5feb3cb2206487e24ee972efe679c61a130ae7" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::Intersection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8cd100f88cde50090dd80ab71599f7d93abe3c2" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a55d5bb3d3483daecbd1054e8852bf0ef132271" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc961988c0ecf91f6fd502cfe37ad268e3c8e3a8" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::SymmetricDifference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf176dbc02c5d0955395e79d60bd389939af5c45" translate="yes" xml:space="preserve">
          <source>Struct std::collections::hash_set::Union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b44a9e64f5b4256b41328da250fd36cd973f049" translate="yes" xml:space="preserve">
          <source>Struct std::collections::linked_list::DrainFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8287a637b584295181c6708948f3449473ef30" translate="yes" xml:space="preserve">
          <source>Struct std::collections::linked_list::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9234880a2f2c25faa93a4d12e1a85349ca54de" translate="yes" xml:space="preserve">
          <source>Struct std::collections::linked_list::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bd580966aea8bf209985e35cd4c83c7d8638a8" translate="yes" xml:space="preserve">
          <source>Struct std::collections::linked_list::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2c30e3b6959f08fdc38f7e979fb6438022dbe5" translate="yes" xml:space="preserve">
          <source>Struct std::collections::linked_list::LinkedList</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3dce9afae99805bfb88cf20f67cb428c0f998f" translate="yes" xml:space="preserve">
          <source>Struct std::collections::vec_deque::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13373f55efdb9e803b256c5d56217258d595a7bd" translate="yes" xml:space="preserve">
          <source>Struct std::collections::vec_deque::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398bcaec9f1fdd30fda57f6f3bc7159a9e1dfd49" translate="yes" xml:space="preserve">
          <source>Struct std::collections::vec_deque::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da1f8346372f5d422eb9116edee22b805d6c1ca" translate="yes" xml:space="preserve">
          <source>Struct std::collections::vec_deque::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8bb81c2d4680f1bec762541d677b4c8fe1a24a" translate="yes" xml:space="preserve">
          <source>Struct std::collections::vec_deque::VecDeque</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d63b99acbb0d7922e71c051f054378979d78933" translate="yes" xml:space="preserve">
          <source>Struct std::env::Args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcbd42bbc8a73e79b663d721315a6314ccca8eb" translate="yes" xml:space="preserve">
          <source>Struct std::env::ArgsOs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777f62e9daa5af896139fb4dafccb035bd30db19" translate="yes" xml:space="preserve">
          <source>Struct std::env::JoinPathsError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff319ddd1125abb40d39bb43012154c8f341afc8" translate="yes" xml:space="preserve">
          <source>Struct std::env::SplitPaths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a786a65474b0e06cad363226497f027255fbcb85" translate="yes" xml:space="preserve">
          <source>Struct std::env::Vars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c09b0bf24194b5319d02c973e69e9b63a8d25b" translate="yes" xml:space="preserve">
          <source>Struct std::env::VarsOs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab31a8f4c5f9d6f7ec1a51275d43a9f4f6c3c3b8" translate="yes" xml:space="preserve">
          <source>Struct std::error::ErrorIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc29fc37dc96fd36b777806c694332bbfc000f52" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::CStr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad258072cf657a2e8d1d8378a88828daae90df26" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::CString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c89f9c6094c53da574e562dc6e9d0c5ebe2f747" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::FromBytesWithNulError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befe6e050efc204beebe16b5e1b320699c772859" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::IntoStringError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a20fb1d10ffd9bb545621d4726fec982d832309" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::NulError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f40022e06338e24b5665d6360a33d957a48809" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::OsStr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f17081689c907f674a722e064fd6f9fcb171d4" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::OsString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c274a85b3cc66e57320a3da7f33b59a36256cac0" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::VaList</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e97884438343e170fa4d28fd1ba2e5c7a5baa3d" translate="yes" xml:space="preserve">
          <source>Struct std::ffi::VaListImpl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f946d246f7fed4a0d2a81da1899263637996d7" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46bda8028b8141fb9c788584fd2318b2a99f29d" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::DebugList</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24cf95791d2fdb9b2ef1c88272cd8cab6008160" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::DebugMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09592c0af9185c04e5dfaffead166c251f73787" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::DebugSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4b50f83304c08cae25c28ce1daf53dbfe2c8d1" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::DebugStruct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66ac8ec7683b3eeb1ce143c446adf5233ccc029" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::DebugTuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b95b5666e6e25bdcb4ca236e317ca9bd3e51f17" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6bea76edde9e977f0b5062473251dcb74de881" translate="yes" xml:space="preserve">
          <source>Struct std::fmt::Formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b180752a16e9063ed4f229af4ef799a9437222b0" translate="yes" xml:space="preserve">
          <source>Struct std::fs::DirBuilder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f918cff3a10238d70fa3c252af5d48ad3839017" translate="yes" xml:space="preserve">
          <source>Struct std::fs::DirEntry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0cdfd0797c26b75afa86ddb374c9e6118296bd" translate="yes" xml:space="preserve">
          <source>Struct std::fs::File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa6299ad4f7a4681599543655353d0d9d8da2ce" translate="yes" xml:space="preserve">
          <source>Struct std::fs::FileType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa7d141e3aec27b84da588684d390a4fa226ffb" translate="yes" xml:space="preserve">
          <source>Struct std::fs::Metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39995c0da204a859a79ce48903baeb573db70aad" translate="yes" xml:space="preserve">
          <source>Struct std::fs::OpenOptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e515d581e364791f8aacba83c16ef7cc5fe0782d" translate="yes" xml:space="preserve">
          <source>Struct std::fs::Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1828e209af48e23a36b2e30425859fe23d0cba31" translate="yes" xml:space="preserve">
          <source>Struct std::fs::ReadDir</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac311fa672184c58521ea0357e36bd631cf16e9" translate="yes" xml:space="preserve">
          <source>Struct std::hash::BuildHasherDefault</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb46d75d8efc34ab4c57e9a0e87c6b1740c83d36" translate="yes" xml:space="preserve">
          <source>Struct std::hash::SipHasher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fc5f5d5320b136b889b5e132fdcd5551622e79" translate="yes" xml:space="preserve">
          <source>Struct std::io::BufReader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5fd951e12fda5bd133ec2e26382ee7c41584f7" translate="yes" xml:space="preserve">
          <source>Struct std::io::BufWriter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33310eac0cb6362f55ed66eab35b5184f7bd70ea" translate="yes" xml:space="preserve">
          <source>Struct std::io::Bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6278d5be7830ba676b3bed4f0e6bc85c42aa7223" translate="yes" xml:space="preserve">
          <source>Struct std::io::Chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a2de2bcaca6205de78ed909559ba496991a6f7" translate="yes" xml:space="preserve">
          <source>Struct std::io::Cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6f8d2bbc165d15e801190e6ae2e7272d562fcb" translate="yes" xml:space="preserve">
          <source>Struct std::io::Empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2ed755299889612e7ed0a22f4e697574ba968a" translate="yes" xml:space="preserve">
          <source>Struct std::io::Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dbabf28297bdf729f71e8ea3befb3d41ef7de2" translate="yes" xml:space="preserve">
          <source>Struct std::io::Initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8109edca7710115aab8ef94cdc17cd77c6657843" translate="yes" xml:space="preserve">
          <source>Struct std::io::IntoInnerError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e255a49dfc8280ae96518d3b2451a750b036a6e4" translate="yes" xml:space="preserve">
          <source>Struct std::io::IoSlice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f4145a2ad46b542e28f3ef66193054eff1a508" translate="yes" xml:space="preserve">
          <source>Struct std::io::IoSliceMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e2b39a570a6ef18ba4f4aff4b6e4a064903366" translate="yes" xml:space="preserve">
          <source>Struct std::io::LineWriter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587f3fa53a843cd3b8d5c939636a7f866037ba16" translate="yes" xml:space="preserve">
          <source>Struct std::io::Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af28dc0017813e61cc44528639574e42eb8fcb2b" translate="yes" xml:space="preserve">
          <source>Struct std::io::Repeat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba979f95892a3e59711b0e55ebb6463247a2910" translate="yes" xml:space="preserve">
          <source>Struct std::io::Sink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53a0fe07a7be3102451ab7a7b9c475eaacfbb44" translate="yes" xml:space="preserve">
          <source>Struct std::io::Split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fed858dae172b90998150318e62e9cb00146379" translate="yes" xml:space="preserve">
          <source>Struct std::io::Stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c19fc3f7c2ac9137dfaccd795434daa89ceff1a" translate="yes" xml:space="preserve">
          <source>Struct std::io::StderrLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3e41bdc27fa0d474a5081626aa04a7a2526cca" translate="yes" xml:space="preserve">
          <source>Struct std::io::Stdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2099bbc1ef15bf9cad0bc9dbe922125e67c7083f" translate="yes" xml:space="preserve">
          <source>Struct std::io::StdinLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0657426617ead77c77e7d636429a2faacdb799df" translate="yes" xml:space="preserve">
          <source>Struct std::io::Stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260e6be928ab1dbfa1a58bfd13c5792c5fa4ccec" translate="yes" xml:space="preserve">
          <source>Struct std::io::StdoutLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde9515393b5f8a8863086a8b770a45f7e67f3e1" translate="yes" xml:space="preserve">
          <source>Struct std::io::Take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e26a908b2e8463cf43c0a7383bd50161259c52" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05727add23efa32aa67b7651c6d6242ac67c509" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Cloned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fc68029ec131a9335ecb8245168688adce52f9" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Copied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c43ab037d7e2c47010fef3ed4be7a2c9f1e1db" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Cycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f304b2458a01ae4cb24aadf4b830bb5f5766cb04" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c70ae7faa9e531a86fc0424395f70afa10ee67" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Enumerate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca674fd922ffd3597fd6d75f38892531f90fd83d" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f12e3cd98de8f6d4f4901ddc33c9cca11149b6" translate="yes" xml:space="preserve">
          <source>Struct std::iter::FilterMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e18b38daa18248172193523993ce063f5cc40b4" translate="yes" xml:space="preserve">
          <source>Struct std::iter::FlatMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe92dcabd6d3124e060cc3d12de95b28540dd1b" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Flatten</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f83bc008d7bc4c65f813f63aac984c9092c872" translate="yes" xml:space="preserve">
          <source>Struct std::iter::FromFn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4e421161cc644b132f75789634d65e5f2d5999" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Fuse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3a23b10bd9aca35b3540ccc38df75a15952588" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Inspect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abbd4025861d3e33bf50b3e4d8b875df6a8edfd" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1b276abeb45d4ade7ede1b93e654d5d929babd" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2d38ae213833b72aa2bb2c380790eedce2e521" translate="yes" xml:space="preserve">
          <source>Struct std::iter::OnceWith</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b52552265be022245833ecbcc3571c7847db12" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Peekable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a211e2eaa36b94c8bfa7ec7ed87900b9d40637ff" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Repeat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608765437750c5decfdb3e97e0b441c5e75b5ddd" translate="yes" xml:space="preserve">
          <source>Struct std::iter::RepeatWith</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7a17098c530969d8cb51f10cc474a9da263d49" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Rev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfb48c4c08e50817602abe9105c38cf1711b492" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072434023dff04233f143de9dc12b202cd085c2a" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473c8f92a54a5e2bc9314adcb7754811e0f82801" translate="yes" xml:space="preserve">
          <source>Struct std::iter::SkipWhile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afdadba51133ff2d5fc1fe0975a8c2dc7674558" translate="yes" xml:space="preserve">
          <source>Struct std::iter::StepBy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f545f035f90a15626e4919fbd0ce9b96871ce079" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Successors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9c9ad753826cdc89a8a1684f4cc89a9f1f6af1" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8c3abfda5cf8e15ac6ac155923cb69ea4654a8" translate="yes" xml:space="preserve">
          <source>Struct std::iter::TakeWhile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6211cd10a36f1f30fce3fdccb518ab56b5d6f90d" translate="yes" xml:space="preserve">
          <source>Struct std::iter::Zip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c52abe270a4011f6e216abed2f9da55c548cb9" translate="yes" xml:space="preserve">
          <source>Struct std::marker::PhantomData</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6840695453ddd8d60bed3a1f39a6218c05274a" translate="yes" xml:space="preserve">
          <source>Struct std::marker::PhantomPinned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0660b44ab2e3a8db4c4970e49aca7679a7bfe5" translate="yes" xml:space="preserve">
          <source>Struct std::mem::Discriminant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6768b518564938937fe0b14c7c3e9e975ae8182" translate="yes" xml:space="preserve">
          <source>Struct std::mem::ManuallyDrop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920b01c9abb8ddbaec5b03ca8e3ef6a7d175f162" translate="yes" xml:space="preserve">
          <source>Struct std::net::AddrParseError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec3470ecab71cdbcf638f6b93fbc819ff652b56" translate="yes" xml:space="preserve">
          <source>Struct std::net::Incoming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ab0affeecb25e7e9cd8afd75cab90fdaa16b16" translate="yes" xml:space="preserve">
          <source>Struct std::net::Ipv4Addr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2b78c611c6872c4b2d7e7b1a028406740667a3" translate="yes" xml:space="preserve">
          <source>Struct std::net::Ipv6Addr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84efca3c0cea4acc7cfdeb2380627caf95294cd" translate="yes" xml:space="preserve">
          <source>Struct std::net::SocketAddrV4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b056a38e73e92bde544133efdce3b4cb23893b" translate="yes" xml:space="preserve">
          <source>Struct std::net::SocketAddrV6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e4d82ecbec9299feac765c47d8d878805c2089" translate="yes" xml:space="preserve">
          <source>Struct std::net::TcpListener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3e3e963920f5a4852d94b4e5c109b2ef335375" translate="yes" xml:space="preserve">
          <source>Struct std::net::TcpStream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4523a8acf75f919e79cf24476d67a49171a4755" translate="yes" xml:space="preserve">
          <source>Struct std::net::UdpSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef1f48c0c39e467d26376b849713ce47d18f508" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroI128</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb08c979f0475a0ffea4ba9ade4c7186292649f0" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroI16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f8de002a36dc1cb80cbe96b0c366000769e058" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroI32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a11ea2b8a2f5921e1f044ecfa4befaf68d41db5" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroI64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9ac3226b44e168d13c1ffc71117cbfa9a95bb6" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroI8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd583da9cd700e4ffcbed7284f74f3964e03d575" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroIsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4cd164c1f642ca4d581f4ae525e5521f4ec49f" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroU128</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9610bbae1242252ee2a9a5e57e0b1b93e7d9943" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroU16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5478bc8ca579f44963a28d1130d423f1a81cb6" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroU32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2212b4516d73f31ff85cb3c5c03bac9d213ffff" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroU64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb309a2a2890b7ff0d7bc011d244e815504953f" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroU8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b089882a09ac0c12ab52052d481b044dd4ae1d36" translate="yes" xml:space="preserve">
          <source>Struct std::num::NonZeroUsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6cb97d8a7b112634f39c601284c82ed4443a69" translate="yes" xml:space="preserve">
          <source>Struct std::num::ParseFloatError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ea65809190e67cf5db9aafa462ea05c1f8d9f4" translate="yes" xml:space="preserve">
          <source>Struct std::num::ParseIntError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d8b5e8aef543249a9eda8732908fa0b055424e" translate="yes" xml:space="preserve">
          <source>Struct std::num::TryFromIntError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07fe146fe290d8e17164fb97e3705fe684af9c8" translate="yes" xml:space="preserve">
          <source>Struct std::num::Wrapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f37d464c8aca4be52447db42f4f07daffb34922" translate="yes" xml:space="preserve">
          <source>Struct std::ops::Range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7be1d059b0e8e42c7d0f344768c4eb61d8f5b45" translate="yes" xml:space="preserve">
          <source>Struct std::ops::RangeFrom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea852e2d48173a3e7319a548df392e043ba3d968" translate="yes" xml:space="preserve">
          <source>Struct std::ops::RangeFull</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81738db577420a20a1a82ada74583b1b413aba3" translate="yes" xml:space="preserve">
          <source>Struct std::ops::RangeInclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4215ebbc4c9522f4de9129403055e30f7443f36" translate="yes" xml:space="preserve">
          <source>Struct std::ops::RangeTo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ad443cd04ead588d1f594da1ccf642e68f23d2" translate="yes" xml:space="preserve">
          <source>Struct std::ops::RangeToInclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe4da1765dbf7768fe47f264f7f1504f8e4b23a" translate="yes" xml:space="preserve">
          <source>Struct std::option::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2073d9ea43d259e3de4f04151ef96aac17f8eeae" translate="yes" xml:space="preserve">
          <source>Struct std::option::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48df57d91c67ae6100670860c023904ae283237" translate="yes" xml:space="preserve">
          <source>Struct std::option::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945d14fa7568fe58ddaeca8e87b2c344f7ab5adb" translate="yes" xml:space="preserve">
          <source>Struct std::option::NoneError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be3ab991fe8d485ceaf14ab21f44026e158b6cd" translate="yes" xml:space="preserve">
          <source>Struct std::os::linux::raw::stat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f2abea035fecdf9b190571075d11f70244a437" translate="yes" xml:space="preserve">
          <source>Struct std::os::unix::net::Incoming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceade5f7f0aba15a807ef0382389587799a82df6" translate="yes" xml:space="preserve">
          <source>Struct std::os::unix::net::SocketAddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ededbf19655f3741c073e9e03b170a71038b61" translate="yes" xml:space="preserve">
          <source>Struct std::os::unix::net::UnixDatagram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8dff0cea0f5d1f64d6082785f320458628c7a6" translate="yes" xml:space="preserve">
          <source>Struct std::os::unix::net::UnixListener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c6740ff4206c97794fb9db8aa7cca083d15472" translate="yes" xml:space="preserve">
          <source>Struct std::os::unix::net::UnixStream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea999f1f188483224509df5344caeae76f02145" translate="yes" xml:space="preserve">
          <source>Struct std::os::windows::ffi::EncodeWide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a5573791c7cfa832670cdda123841e4001fd21" translate="yes" xml:space="preserve">
          <source>Struct std::panic::AssertUnwindSafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a9c62be12e658d5b1b1472f06616c6d7c1c3ed" translate="yes" xml:space="preserve">
          <source>Struct std::panic::Location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab4be854e1ed9d23e6a0d9b40942ab5438f5b28" translate="yes" xml:space="preserve">
          <source>Struct std::panic::PanicInfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3badeaa192d886fd1950955daddc20bdb01c4d" translate="yes" xml:space="preserve">
          <source>Struct std::path::Ancestors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53cd45e8d775b96558b760813399667cc3b789f" translate="yes" xml:space="preserve">
          <source>Struct std::path::Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1cb662acec73ae7a55cb26c2dd21a80495ee46" translate="yes" xml:space="preserve">
          <source>Struct std::path::Display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c8237d10c966a9e5b051fecf8164131043bbf6" translate="yes" xml:space="preserve">
          <source>Struct std::path::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc92367a43121f6840577362e69f0525386c1eee" translate="yes" xml:space="preserve">
          <source>Struct std::path::Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab956970e95a95df014f58f64575e8bf23e28da" translate="yes" xml:space="preserve">
          <source>Struct std::path::PathBuf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6674c10f2cdf96722ad17c134c6286ba0dcc53" translate="yes" xml:space="preserve">
          <source>Struct std::path::PrefixComponent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15aeb8b163dd460bec341a18e58cc44cdc0d09be" translate="yes" xml:space="preserve">
          <source>Struct std::path::StripPrefixError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9a25591d95147a49b9db43e65344200b275641" translate="yes" xml:space="preserve">
          <source>Struct std::pin::Pin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0accb668847dcc00cafa85a3d07a332baba803" translate="yes" xml:space="preserve">
          <source>Struct std::process::Child</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dae8ec6f81666b9443d574c7fe4d470547cadc" translate="yes" xml:space="preserve">
          <source>Struct std::process::ChildStderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bfd00cbb38507dde2b49358e600c4a90cac33b" translate="yes" xml:space="preserve">
          <source>Struct std::process::ChildStdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31e9858a35cac280ccfda48ac42d9e5d49368e9" translate="yes" xml:space="preserve">
          <source>Struct std::process::ChildStdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a3f9621c74de75ed59a305309efba521aa665b" translate="yes" xml:space="preserve">
          <source>Struct std::process::Command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923a5d1ceb61c349f0afe77e253239f4f32f6c37" translate="yes" xml:space="preserve">
          <source>Struct std::process::ExitCode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97c44846552b278b51dae4c5485836d95918246" translate="yes" xml:space="preserve">
          <source>Struct std::process::ExitStatus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdf53071f00991a6888b65707f7bcf02e70587c" translate="yes" xml:space="preserve">
          <source>Struct std::process::Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3742d7521682887c13e7e310eb0fd9d6431c6c0" translate="yes" xml:space="preserve">
          <source>Struct std::process::Stdio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43732b35f62b7eab8592fd11864bd2abb5342669" translate="yes" xml:space="preserve">
          <source>Struct std::ptr::NonNull</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc8eb41d7b945a75a76196b4a48b033b62c1d4d" translate="yes" xml:space="preserve">
          <source>Struct std::raw::TraitObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd2d6c124b9f66534b9bad6f7c4223a29c5a584" translate="yes" xml:space="preserve">
          <source>Struct std::rc::Rc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7728e2fddc2834a08633c22ce1d99936dce33a" translate="yes" xml:space="preserve">
          <source>Struct std::rc::Weak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b91bf075a6d3ed1c5f7622a7c8bc444fd813b3f" translate="yes" xml:space="preserve">
          <source>Struct std::result::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb604c3233ca0ce55955a20b8200b78370fcef4" translate="yes" xml:space="preserve">
          <source>Struct std::result::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f30acd30bf579cd2c95b3d09c0979f9af79e25" translate="yes" xml:space="preserve">
          <source>Struct std::result::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d63f1a6a452aa9c5daf7758ec3966807d4e337" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Chunks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0db408f69865cacf401b3f1245a372a01018934" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksExact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828bb2ba2f8a1ba17b0cf2036e81c0f29d724f72" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksExactMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9437610716bf980ff4721ddfe6871477080149b" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4446af0835763a1004007202790870ea1c1e77bd" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a0a7d24a677e1d16acfacd7bdaa1a51e63a277" translate="yes" xml:space="preserve">
          <source>Struct std::slice::IterMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03db1035ff4cb87356538e16998903797462621" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6374ac238e3115dc883b2099980f14b56d87340e" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksExact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fdea0393171a32a6ff0415837787c686723af4" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksExactMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5785f22c53da55b16133a242a3c36ca7106d84c" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999989103ddfd72493daff7bafd3fdf5311e01dc" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ce045f863fabeafa99a313ce72185419a478e9" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a37868d2545ba436e5a2a776f002cad138b086" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f556bed99e1fcda29929f2acf45a100dd306ded0" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitNMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd90ca0f26d8376cfe3c6aad3b5bbcdc02dc504b" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e6c877bb0f82cfaf3e8f9d7fe2c9522aea735c" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7328339c3d1f8cc55b399f636cba95c02bc6b30" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3656498214c39df92138390e2ec775a4224d74d8" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitNMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391b6d24f34473c476c212c5e014927dee22ebf2" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1dbf730ff94b70b5252fc04f9cd337392bd5f3" translate="yes" xml:space="preserve">
          <source>Struct std::str::Bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c3a41920721c88610046b015c41449cb217399" translate="yes" xml:space="preserve">
          <source>Struct std::str::CharIndices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ac685a6d168ecaed19d0fdcbbcdd55d53464b2" translate="yes" xml:space="preserve">
          <source>Struct std::str::Chars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ec6008853839b064030febe66d2d6ff495370d" translate="yes" xml:space="preserve">
          <source>Struct std::str::EncodeUtf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bcda484321f61e411556df3863b952ee317263" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeDebug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb91de0b1b3b20a23dcba5b54ca851b3bb268f7" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeDefault</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631f819b0291d3e6fe85040989a2be695252c97b" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeUnicode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f225634a09fe6ce0f674d48d42bcd7f701b82bd1" translate="yes" xml:space="preserve">
          <source>Struct std::str::Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ede0da507ff1e4f5fe04f364daa147612eac91" translate="yes" xml:space="preserve">
          <source>Struct std::str::LinesAny</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4bb3795a806d49162cc1fe9da887602f4ef363" translate="yes" xml:space="preserve">
          <source>Struct std::str::MatchIndices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0695cc93ce303be7d6881525b7e4260e8b6be96b" translate="yes" xml:space="preserve">
          <source>Struct std::str::Matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968801fbb569383e58549f2b20c19baf3cc1ed69" translate="yes" xml:space="preserve">
          <source>Struct std::str::ParseBoolError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1537dc3305245dae369ed564f2d35665e89709f" translate="yes" xml:space="preserve">
          <source>Struct std::str::RMatchIndices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cac12245cb38a8f65df573f09fc8600719f925" translate="yes" xml:space="preserve">
          <source>Struct std::str::RMatches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abec20bb57e2fee065c550a89666ce9997227e7" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f097e68457988a8d1dee5c71de6b3a97450c1f" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplitN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05c9db487d16fdb172832777d131b44aa3214a7" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplitTerminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e47a22f2f13c05e9e575191b00d982f5e90dd0" translate="yes" xml:space="preserve">
          <source>Struct std::str::Split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b6a167c4b34cf90b54f8b7be62c46172ee0d0a" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitAsciiWhitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4cfb4a2bbe20d9c0ee0f9353a9dcc70a45bbea" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d8ee49b9918bea8c5914efa552deac7843a2da" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitTerminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051309f2ca4f6c8738623e597ca9b6d53ae2b6d2" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitWhitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70077a6ee14f72519b7011d486dabb09767af9eb" translate="yes" xml:space="preserve">
          <source>Struct std::str::Utf8Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854352904a26571ef76150b8c2f15c46a5bd6946" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharPredicateSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef34ab83bb00ae3b679b344e8eecfce05848f337" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd126e20206f0010a3aee5702dfe5bc20cfc09e" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharSliceSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1649327834d9be8f88f05db9689f452628d901cf" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::StrSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9936bd758633d426182d48911b62733384ff4c" translate="yes" xml:space="preserve">
          <source>Struct std::string::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f33707c5f8b3b2e4d99a3afc910947cfdbd80d" translate="yes" xml:space="preserve">
          <source>Struct std::string::FromUtf16Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966d0004aa964825fa07278c3d30ce547ef47fad" translate="yes" xml:space="preserve">
          <source>Struct std::string::FromUtf8Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4a650ec92e51ff051e2809fc2a68c187741f44" translate="yes" xml:space="preserve">
          <source>Struct std::string::String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1454f73dd759188532051fd5439e0182127f76" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Arc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d772816c87a56c50942a18faff03053aec722d4" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Barrier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390518370db175d06729659e79b794a7c8ac8a00" translate="yes" xml:space="preserve">
          <source>Struct std::sync::BarrierWaitResult</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b4a1fbff2dbf16ecf495af221836316173bc52" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Condvar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536a8a5879f7686a6909cb53e05494a3e5d6bcc7" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa0ef3c20392117dec8f339fc78981241396a7f" translate="yes" xml:space="preserve">
          <source>Struct std::sync::MutexGuard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62eb07a6fb3aebb119764adbcde7566b9eed9e54" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd02f760f5c95bd645666796d7753bfbfe50e50" translate="yes" xml:space="preserve">
          <source>Struct std::sync::OnceState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d7c050866684a33fca1627701906d79021be5c" translate="yes" xml:space="preserve">
          <source>Struct std::sync::PoisonError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f28770f850f907c93ba940e71ae1a513c8c57da" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c849b5452919555c722c37abf132419eeffbb6" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLockReadGuard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7233e72711f07314c30b7f8d440a37871643b51" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLockWriteGuard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e3f742108deabaa571d80fe21b7d018faebdef" translate="yes" xml:space="preserve">
          <source>Struct std::sync::WaitTimeoutResult</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4c99aa71747cdd50bac369116a5bd03c625c82" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Weak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1448b79e46c6ee1a76328362aaba6e40a4795478" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicBool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cbc2c7380889bdf43ed108df03f5b32072d18c" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa3c58d3785ea112e299087cb6bfee793fd21d5" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fe8d3aa28575a574ec0320af36ad77af5c3d05" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4286842fc5ccab6b05e92c4568bb207fefa8c08e" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e422c1f950b02778bda29b4c4bd5f9d0bc39a65" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicIsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5b8f3d4df76bc37433fee8c605ff8de649af55" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicPtr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469138022cff51b0dfd929facf1c6028bf93ad7b" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3dc4a84cb9551aa76da63e618398115f60fd51" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b57b0104f3d00a95fb2534c10d6592c21aeacd" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bdf843e25a06371c39f67e7ce378097bdd2bff" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c2a7dd224240256077403242e2254d93bb3697" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicUsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f526c02ca1512c9c64c80ec362c831298f2f9ee" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51df08609ed239a9a834beda58bdeefe230f91a" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0a66a676f3661958efd4588a9d5e268fe117da" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b242709d14922d141508203ec8ac273e2c3e3b08" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::RecvError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d01ad5acb82686c875f9862ed1804bcb3d9cecd" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::SendError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2160212abc0ec98ba14f7e355385ddd0168236d" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Sender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef59a43a3b8a93c0d9c3f40b724d48653e47860" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::SyncSender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed440fff73772586e6e6fdb59a650b026e7fbd3" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::TryIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52da68b959012d76fb29974acd56a3ca361304f" translate="yes" xml:space="preserve">
          <source>Struct std::task::Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec54d9953190c353498a09f39b0fff56cd4bd97" translate="yes" xml:space="preserve">
          <source>Struct std::task::RawWaker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2911efca87aa711ca4bb7e3b1461050df2decd9" translate="yes" xml:space="preserve">
          <source>Struct std::task::RawWakerVTable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c06e10b206bd1110c3b3d1fe70e0f05a11e4a99" translate="yes" xml:space="preserve">
          <source>Struct std::task::Waker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c558edd49e3c9c8574be1bbc7cc973764ec7542" translate="yes" xml:space="preserve">
          <source>Struct std::thread::AccessError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501dfbd503af48b1f73f6ac4e588b52a7d123642" translate="yes" xml:space="preserve">
          <source>Struct std::thread::Builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a2c760d3cbc10fa9a78f8becc3c4bceff46ce9" translate="yes" xml:space="preserve">
          <source>Struct std::thread::JoinHandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629be52433267b26e4d5afbabe5fdc0db1036c2c" translate="yes" xml:space="preserve">
          <source>Struct std::thread::LocalKey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67da77fd5f46c0277094fce0cdf1a587f0a84ad3" translate="yes" xml:space="preserve">
          <source>Struct std::thread::Thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f85fb76924eb7b44f0adcf2ab7609e7a6549750" translate="yes" xml:space="preserve">
          <source>Struct std::thread::ThreadId</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6671a493c6680971b1e677905b877595e0ea2e" translate="yes" xml:space="preserve">
          <source>Struct std::time::Duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e10dd76ff4c3a47f188031b7144673d0b8c548d" translate="yes" xml:space="preserve">
          <source>Struct std::time::Instant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e678a6f7b7cbb191e3a2c16d394e70d47ab631" translate="yes" xml:space="preserve">
          <source>Struct std::time::SystemTime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd5117fe3f65c365391d89d00361ad3d5b596c7" translate="yes" xml:space="preserve">
          <source>Struct std::time::SystemTimeError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf6ea4e4c7964f3a9322c43cdf995ea087efcde" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b093274eff094727dd194650189d7b028a8c702" translate="yes" xml:space="preserve">
          <source>Struct std::vec::DrainFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca64da07eb0498418f45bf2624c59491ddc33954" translate="yes" xml:space="preserve">
          <source>Struct std::vec::IntoIter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7f1532931708095a07346ea4f872c1990c5fef" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Splice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8d10908e6e87558f761c72accbde7c5b585d8f" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Vec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738934014ce4c4cb26f23e895aa9e7f2c100905b" translate="yes" xml:space="preserve">
          <source>Struct types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b9bcf6fa135918752a0ac296373b9fc45c7435" translate="yes" xml:space="preserve">
          <source>Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc36f39977a93539a376dad7b0585ee1bc81f8c" translate="yes" xml:space="preserve">
          <source>Structs are always written in CamelCase, with few exceptions. While the trailing comma on a struct's list of fields can be omitted, it's usually kept for convenience in adding and removing fields down the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0e81bc965812df97e5166f6a2414ac6cd65320" translate="yes" xml:space="preserve">
          <source>Structs are similar to tuples, which were discussed in Chapter 3. Like tuples, the pieces of a struct can be different types. Unlike with tuples, you&amp;rsquo;ll name each piece of data so it&amp;rsquo;s clear what the values mean. As a result of these names, structs are more flexible than tuples: you don&amp;rsquo;t have to rely on the order of the data to specify or access the values of an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad0b5cd60f855ed792d65d8c391c94f9dd3c07d" translate="yes" xml:space="preserve">
          <source>Structs can be instantiated in different ways, all of which can be mixed and matched as needed. The most common way to make a new struct is via a constructor method such as &lt;code&gt;new()&lt;/code&gt;, but when that isn't available (or you're writing the constructor itself), struct literal syntax is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494b25a9d0258011619403c49f519f72ffadc730" translate="yes" xml:space="preserve">
          <source>Structs implementing the &lt;code&gt;Drop&lt;/code&gt; trait have an implicit destructor that gets called when they go out of scope. This destructor gets exclusive access to the fields of the struct when it runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cd7098dee3b6bfe50cd179d3958f5f2f6ae31e" translate="yes" xml:space="preserve">
          <source>Structs implementing the &lt;code&gt;Drop&lt;/code&gt; trait have an implicit destructor that gets called when they go out of scope. This destructor may use the fields of the struct, so moving out of the struct could make it impossible to run the destructor. Therefore, we must think of all values whose type implements the &lt;code&gt;Drop&lt;/code&gt; trait as single units whose fields cannot be moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df4f0cb69b4ef910eaadb62d3d2e59643966196" translate="yes" xml:space="preserve">
          <source>Structs in Rust come in three flavors: Structs with named fields, tuple structs, and unit structs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1888bcc5085fd46bd524fed3e8b1bdd0380571d5" translate="yes" xml:space="preserve">
          <source>Structs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. Methods let you specify the behavior that instances of your structs have, and associated functions let you namespace functionality that is particular to your struct without having an instance available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be697ab09adab4b1b1111418fdbfb8adebe1453a" translate="yes" xml:space="preserve">
          <source>Structs may contain a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bd05235368c18f04f39f89bebb1eb624006d25" translate="yes" xml:space="preserve">
          <source>Structs with this representation have the same layout and ABI as the single non-zero sized field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4635fc5552c9f44a560d156558b99f6867dddb43" translate="yes" xml:space="preserve">
          <source>Structs, enums, unions and tuples implement the trait if all of their fields do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5446c62134967a5ee0599a1267f33136d41dbd5e" translate="yes" xml:space="preserve">
          <source>Structure wrapping a mutable reference to the greatest item on a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfac3efb6ae696fcb48427ff359561932b8f8e8" translate="yes" xml:space="preserve">
          <source>Students</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0fef99f0a9a7fdaa3ababf9d9d842ff23f2ea3" translate="yes" xml:space="preserve">
          <source>Style conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3c17ad45052c3c8faf844ec9d98e802f713c26" translate="yes" xml:space="preserve">
          <source>Sub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344e0db34b072305efef08e85f127b47a1097f24" translate="yes" xml:space="preserve">
          <source>Sub::sub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91799bfee1e7ac0db77205c508cbb0e21ec24d86" translate="yes" xml:space="preserve">
          <source>SubAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4127dc2b967aa8b123dee08c6b45b8b7b285720f" translate="yes" xml:space="preserve">
          <source>SubAssign::sub_assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6279e5a04f27f3e00335f278bf58cb5d62ec8e" translate="yes" xml:space="preserve">
          <source>Submodules in Integration Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a296f80f7b8e8fc60230ee2744b346244f49715f" translate="yes" xml:space="preserve">
          <source>Subpattern binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36deca2a4d52c82f398c08e2c02d7e0958fa511" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f9ee6c62cb68598c5ad04009bdd80654f45782" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98027837928d6092fd168f54912d1740c69bb3c2" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8739440ba7fb4965f945f22a44909ed4049da661" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f7bf7f6931d667bb1df01f2e9b56aaa2bf806d" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b58ce4dec6fe8562096a10da3109ac06c55815" translate="yes" xml:space="preserve">
          <source>Subtraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26b71ada72dda0caa098081b6d86bfd9925fa6e" translate="yes" xml:space="preserve">
          <source>Subtraction assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd46138cf81b5a0258fb4c5654e6615e6cc93a7e" translate="yes" xml:space="preserve">
          <source>Subtracts a &lt;code&gt;usize&lt;/code&gt;, returning &lt;code&gt;None&lt;/code&gt; on underflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827c565210295f9c77c8e5e5bf33ccbc8edebc0c" translate="yes" xml:space="preserve">
          <source>Subtracts from the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3b6bf11e7a8ce5504d4d2280f9a0e61c02e368" translate="yes" xml:space="preserve">
          <source>Subtracts one to this step, returning the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180e17886fcb580556f532c189fc9937395bad22" translate="yes" xml:space="preserve">
          <source>Subtyping and Variance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1243922c971b534b55617d3ded6691678e35c2" translate="yes" xml:space="preserve">
          <source>Subtyping is implicit and can occur at any stage in type checking or inference. Subtyping in Rust is very restricted and occurs only due to variance with respect to lifetimes and between types with higher ranked lifetimes. If we were to erase lifetimes from types, then the only subtyping would be due to type equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fda5eaa5590cd5c050254aecfb70c42e76913f4" translate="yes" xml:space="preserve">
          <source>Success! We now have a thread pool that executes connections asynchronously. There are never more than four threads created, so our system won&amp;rsquo;t get overloaded if the server receives a lot of requests. If we make a request to &lt;em&gt;/sleep&lt;/em&gt;, the server will be able to serve other requests by having another thread run them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f2f5b0033fd69a634f318debaa8c2351d513d8" translate="yes" xml:space="preserve">
          <source>Successfully receiving value before encountering timeout:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847fa24c98d0a37d4056f5d7d9ccf81fcdada47b" translate="yes" xml:space="preserve">
          <source>Successfully receiving value before reaching deadline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7eef3e0063d585532586fa0d72f7e435b01a25" translate="yes" xml:space="preserve">
          <source>Successive calls return the same data. This is accomplished by passing &lt;code&gt;MSG_PEEK&lt;/code&gt; as a flag to the underlying &lt;code&gt;recv&lt;/code&gt; system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847f894ab81be44e9f9e9de3f68a8d00592e1e58" translate="yes" xml:space="preserve">
          <source>Successive calls return the same data. This is accomplished by passing &lt;code&gt;MSG_PEEK&lt;/code&gt; as a flag to the underlying &lt;code&gt;recvfrom&lt;/code&gt; system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47211491c9881e551a7e8ae489bea685499a229a" translate="yes" xml:space="preserve">
          <source>Successors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca25d4e5b9afff3f2cd86209645cf4e82d092c2b" translate="yes" xml:space="preserve">
          <source>Successors::all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff457e55a8b4bd03c19d497ee28adc872da37d85" translate="yes" xml:space="preserve">
          <source>Successors::any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19068f8015c3f904f1bd7981e9ceeacc64fbbba0" translate="yes" xml:space="preserve">
          <source>Successors::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2813bc7e0c6b9d60afa827fb07b672a6e7036d06" translate="yes" xml:space="preserve">
          <source>Successors::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f265020b3bb94fe3479961f558b5c1dda5b404" translate="yes" xml:space="preserve">
          <source>Successors::by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1950b55bb354ba59a99f29bbbd5b49504161636e" translate="yes" xml:space="preserve">
          <source>Successors::chain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592971c89231d9d99ce53dbc7b9bbaeba686dd0f" translate="yes" xml:space="preserve">
          <source>Successors::clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703ab2e668b52465eb6d70c1dd0d66576519b55c" translate="yes" xml:space="preserve">
          <source>Successors::clone_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2468b8c7f3cfe0edf9b6f46db4fc76e9cf1066ac" translate="yes" xml:space="preserve">
          <source>Successors::clone_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8893b95fc9e03ba873d6b635a0a78b49eaa278" translate="yes" xml:space="preserve">
          <source>Successors::cloned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e0ffc137e86b93ab52ec77ee3d102a403d7cd5" translate="yes" xml:space="preserve">
          <source>Successors::cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0769a904821b7c0d6ec5a4620f0701e5fa936b" translate="yes" xml:space="preserve">
          <source>Successors::collect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d856d9673c71e93007edf6f779c192f3280ca2ba" translate="yes" xml:space="preserve">
          <source>Successors::copied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ce543a3e6b6b6e9e54b1b369d3c4e309512981" translate="yes" xml:space="preserve">
          <source>Successors::count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a3b2a0660286d17c4918743cb2faa1664f56ef" translate="yes" xml:space="preserve">
          <source>Successors::cycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e92c1abb5a99cabd4b86b31efcb6be9058297c" translate="yes" xml:space="preserve">
          <source>Successors::enumerate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afd48503e358e66f1596451ff8e2def738bc434" translate="yes" xml:space="preserve">
          <source>Successors::eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0231cc295af44fbf5bf28cb8677dd99e1fa9a062" translate="yes" xml:space="preserve">
          <source>Successors::filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c14a43e966193c0f4eac10e1b0939b3da11439" translate="yes" xml:space="preserve">
          <source>Successors::filter_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872153f57331fb74f2d100ac219a2d37e760619a" translate="yes" xml:space="preserve">
          <source>Successors::find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b06755e12dff22b74f6ddd6579a1ded4e983a52" translate="yes" xml:space="preserve">
          <source>Successors::find_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355469d1e4c6c3f6cf2902dcfc1e83477580193b" translate="yes" xml:space="preserve">
          <source>Successors::flat_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8103f6db8028039a88aaa273d8bd87169300b0" translate="yes" xml:space="preserve">
          <source>Successors::flatten</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274c7ccbbef6d39f929ba4589845a094e5fc62d9" translate="yes" xml:space="preserve">
          <source>Successors::fmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c624e1ca197b76456b272c9cfd948b0520b26a0a" translate="yes" xml:space="preserve">
          <source>Successors::fold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91796388afb397fd0a69d85640f8c9e0303b2d00" translate="yes" xml:space="preserve">
          <source>Successors::for_each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1243b9cf6c69f731fd0ec5014e094c1f65405bdb" translate="yes" xml:space="preserve">
          <source>Successors::from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a361be244af8df3ce6041647a4f9b81d086733" translate="yes" xml:space="preserve">
          <source>Successors::fuse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8be1523044c558e5dd4ce469ad8504d2e46037" translate="yes" xml:space="preserve">
          <source>Successors::ge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd867ab196eafd6588f8ba654366f768105eae70" translate="yes" xml:space="preserve">
          <source>Successors::gt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e6b5226c5e44ff24bd79ccf4e5c1502f278bda" translate="yes" xml:space="preserve">
          <source>Successors::inspect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68571cf85e99f0a5f5085428aba568b08517ae74" translate="yes" xml:space="preserve">
          <source>Successors::into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31b0879744c3b86690779c0e148760d56712ba9" translate="yes" xml:space="preserve">
          <source>Successors::into_iter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a31c20564630d8e7c3126e272ac0a052c8c8cb" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15dd1f0fa665b3d782947b39eea3a7c6f5dd3b4" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d7b167571d745d1ee34d334fd8c828ae1f2240" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8791031eb6a42f7ed0b47791fd730457e0bdab8" translate="yes" xml:space="preserve">
          <source>Successors::last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6220b3fa85ffb780ec1c8363bda735f8ee22e91d" translate="yes" xml:space="preserve">
          <source>Successors::le</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21924b0e549cce2ec00446c1260fd744dcc15192" translate="yes" xml:space="preserve">
          <source>Successors::lt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792431a3440ad278909bb0d25ebace8750c04a5f" translate="yes" xml:space="preserve">
          <source>Successors::map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00dd3b471f9a4897b0a2906faddfa7f75298cd40" translate="yes" xml:space="preserve">
          <source>Successors::max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3170148805e43b5ac70ff2a89be8b3c03c1b000d" translate="yes" xml:space="preserve">
          <source>Successors::max_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db95e90d2f618b6ab956b4be0dd7f93c9b1196c7" translate="yes" xml:space="preserve">
          <source>Successors::max_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049607bba1136e2f23c565b34595db9be7831565" translate="yes" xml:space="preserve">
          <source>Successors::min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3765c3752b9be8d937a4fa74a02fe3bb72a725" translate="yes" xml:space="preserve">
          <source>Successors::min_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a01f97b5790410ef37f0783a0398e17c50ede42" translate="yes" xml:space="preserve">
          <source>Successors::min_by_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d04e1bbd4a48c484ec0611ac64e8670899dda5" translate="yes" xml:space="preserve">
          <source>Successors::ne</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292f225916d80861494f9d1d1b01eb9d6531471e" translate="yes" xml:space="preserve">
          <source>Successors::next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a08af5da1116f074fd02601ed2e14a83af855d" translate="yes" xml:space="preserve">
          <source>Successors::nth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5155b329b92839b0e22419d4fe027e6502ab9d1b" translate="yes" xml:space="preserve">
          <source>Successors::partial_cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07669aa9181901dc27c8580d6cd27e477546e374" translate="yes" xml:space="preserve">
          <source>Successors::partition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8834c0d732d68271e90f63319b2da52d3f633b35" translate="yes" xml:space="preserve">
          <source>Successors::peekable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5998d20fdcbb6c65949fef711e23e3cbde2f72" translate="yes" xml:space="preserve">
          <source>Successors::position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f4c6493271a9afdc6a667ed7dc8d79b67a7c59" translate="yes" xml:space="preserve">
          <source>Successors::product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900d996cb613c9c81f35f0b87aabcf7142891402" translate="yes" xml:space="preserve">
          <source>Successors::rev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116c09cdb2c40a444a38fbcd7af9a0e97032f788" translate="yes" xml:space="preserve">
          <source>Successors::rposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28e122791acd5bc34cc262d7aa19f3d0ddd1f4" translate="yes" xml:space="preserve">
          <source>Successors::scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3324a366d39e3af1db411f7a361b650b92a5dd47" translate="yes" xml:space="preserve">
          <source>Successors::size_hint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32baadec68f1782b1ace8480500781f8de9f5ff0" translate="yes" xml:space="preserve">
          <source>Successors::skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8727799c9c9f57e6ae0cc50ca234e15f521f9dfd" translate="yes" xml:space="preserve">
          <source>Successors::skip_while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69237063777e88f0e21a4057346c126ddb36cda4" translate="yes" xml:space="preserve">
          <source>Successors::step_by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af19ff6a132e4c395abb1af7c0d3080667a6b211" translate="yes" xml:space="preserve">
          <source>Successors::sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c059a7adc65648fe017594a987fb89e95858644" translate="yes" xml:space="preserve">
          <source>Successors::take</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d47d16c9094041820103483f93e81fe1e767f4" translate="yes" xml:space="preserve">
          <source>Successors::take_while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf556d3ee802c95213468ac226384e1b75f3bc8" translate="yes" xml:space="preserve">
          <source>Successors::to_owned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbef85eedec0d9909ac28b24a0e0b85fb7ea34d" translate="yes" xml:space="preserve">
          <source>Successors::try_fold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f747f155cc529abef80f2cdebe7bab3998a867" translate="yes" xml:space="preserve">
          <source>Successors::try_for_each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979e3f5133ee044244f4ed37870b523dd8e6cd96" translate="yes" xml:space="preserve">
          <source>Successors::try_from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1744aeb5a27b2ec2b17c3a76c240c5af0a65fc" translate="yes" xml:space="preserve">
          <source>Successors::try_into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9b9406fe48b3145cd268089ac3d673f1822824" translate="yes" xml:space="preserve">
          <source>Successors::type_id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fc2abf08945584b8a0a65c50ac695c8a146cc7" translate="yes" xml:space="preserve">
          <source>Successors::unzip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364edbaa60d32d7ea8487c2556f482c216f98418" translate="yes" xml:space="preserve">
          <source>Successors::zip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe44407b9a6ddff91d48086518f1cce5d7f23e" translate="yes" xml:space="preserve">
          <source>Such cases can sometimes be resolved by iterating &quot;by value&quot; (or using &lt;code&gt;into_iter()&lt;/code&gt;) to avoid borrowing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c826432dabefc0a6b81fc96080ffac589eb1bc58" translate="yes" xml:space="preserve">
          <source>Such wrap-around never actually occurs mathematically; implementation artifacts make &lt;code&gt;x % y&lt;/code&gt; invalid for &lt;code&gt;MIN / -1&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value). In such a case, this function returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5206a669f42ea76e7f7d41a5b0f6ce4dad1f88" translate="yes" xml:space="preserve">
          <source>Suffixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a2b066a752e79a961a5980aafa67014597a3b9" translate="yes" xml:space="preserve">
          <source>Sum::sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec59543d08ccb5f40fa486ea16a3472f0d6211f" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746ee961f56ea975e3ce42dc870911c3aaaab7a9" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977f83fd581cd632cb9daf954b85476d1f205083" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac744b0b2af4a706a61e699cc4d2f153fd808d0" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bb54ff604716f8ba8c1250d02545ef0630b048" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de708ead25c6586fc3b199bb44ef6303db38e09f" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b25f78b0406aa7e2a88bb5ced9425b4a20e2f6" translate="yes" xml:space="preserve">
          <source>Supertraits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42640d817417171608fd2baec7acce81bc167575" translate="yes" xml:space="preserve">
          <source>Supertraits are declared by trait bounds on the &lt;code&gt;Self&lt;/code&gt; type of a trait and transitively the supertraits of the traits declared in those trait bounds. It is an error for a trait to be its own supertrait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a90d19e495204777b61de87a681a795e0adacd" translate="yes" xml:space="preserve">
          <source>Support for Non-Lexical Lifetimes (NLL) has been included in the Rust compiler since 1.31, and has been enabled on the 2015 edition since 1.36. The new borrow checker for NLL uncovered some bugs in the old borrow checker, which in some cases allowed unsound code to compile, resulting in memory safety issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa06b2fb894619961652b14f2242b6b3ec47a26f" translate="yes" xml:space="preserve">
          <source>Supported arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c51256ed714ac802a5d63dcf74f4ee8d71cb011" translate="yes" xml:space="preserve">
          <source>Supported arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bc56f77e9d18067debc9d58dd2dd8d7d29330e" translate="yes" xml:space="preserve">
          <source>Suppose we have a struct &lt;code&gt;Foo&lt;/code&gt; and we would like to define some methods for it. The following definition leads to a compiler error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad27b6d9aabd435b91994772194c4231b3bd84" translate="yes" xml:space="preserve">
          <source>Suspend execution until the result of a &lt;a href=&quot;future/trait.future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; is ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f344580ac42f760d329f42fd603592846f6ea50b" translate="yes" xml:space="preserve">
          <source>Svenska</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa895abf66c2d0744bbd0ec4bce5f6077898e14" translate="yes" xml:space="preserve">
          <source>Swapping things out of difficult situations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f392569a35880d21c54f7d35309db85e50ed430" translate="yes" xml:space="preserve">
          <source>Swapping two elements across slices:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3678c097c4b9666e143868fcacfcde587989954f" translate="yes" xml:space="preserve">
          <source>Swapping two non-overlapping regions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcac73d2cc64502356e697972853f2c244973ce" translate="yes" xml:space="preserve">
          <source>Swapping two overlapping regions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedeb1e51aacec6141066634cd1988defdb9d0af" translate="yes" xml:space="preserve">
          <source>Swaps &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes between the two regions of memory beginning at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. The two regions must &lt;em&gt;not&lt;/em&gt; overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0aa3523939394db86c348e1e178ef2f7a3ecdf8" translate="yes" xml:space="preserve">
          <source>Swaps all elements in &lt;code&gt;self&lt;/code&gt; with those in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32971ccabef7f3d7a450cb84ee57876533c47c2" translate="yes" xml:space="preserve">
          <source>Swaps elements at indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdce01c6df5169cc9979a89b19125d7bc51ad25e" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations of the same type, without deinitializing either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3027ed7ad2411be1ff24cf181d51bf11eef914e" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike &lt;code&gt;mem::swap&lt;/code&gt; which is otherwise equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5804e2680bbf409e9711fba23da7e1601664574" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations, without deinitializing either one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd8ffb7f815e528ed8af409b60856c93a9a751c" translate="yes" xml:space="preserve">
          <source>Swaps the values of two Cells. Difference with &lt;code&gt;std::mem::swap&lt;/code&gt; is that this function doesn't require &lt;code&gt;&amp;amp;mut&lt;/code&gt; reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd7b5422bbc044c815aff402efd2901b033d656" translate="yes" xml:space="preserve">
          <source>Swaps the wrapped value of &lt;code&gt;self&lt;/code&gt; with the wrapped value of &lt;code&gt;other&lt;/code&gt;, without deinitializing either one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1c8cd4078d42e5c37f2b0d7d1520827b39d7c3" translate="yes" xml:space="preserve">
          <source>Swaps two elements in the slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50323b1221425cdeeb66113fb7b9cdb3a3e5fd7f" translate="yes" xml:space="preserve">
          <source>Swift: optional bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089d821d217b96a759462aabcf6fff5c64ad4ce2" translate="yes" xml:space="preserve">
          <source>Switch to the Rust 2018 edition to use &lt;code&gt;async fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a08ed7860a49ec3205ac0ec2e36be644cf65f0" translate="yes" xml:space="preserve">
          <source>Switching from an &lt;code&gt;expect&lt;/code&gt; call to a &lt;code&gt;match&lt;/code&gt; expression is how you generally move from crashing on an error to handling the error. Remember that &lt;code&gt;parse&lt;/code&gt; returns a &lt;code&gt;Result&lt;/code&gt; type and &lt;code&gt;Result&lt;/code&gt; is an enum that has the variants &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;. We&amp;rsquo;re using a &lt;code&gt;match&lt;/code&gt; expression here, as we did with the &lt;code&gt;Ordering&lt;/code&gt; result of the &lt;code&gt;cmp&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b48261a4e00a734fa110aa9af179acecea010bc" translate="yes" xml:space="preserve">
          <source>SymmetricDifference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905f63092ff26517a7aa8083857b3c8af9707002" translate="yes" xml:space="preserve">
          <source>Sync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acda95d54ba680a07dc8d07beb95e6647f19554c" translate="yes" xml:space="preserve">
          <source>SyncSender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ff11e64d0d6cfc9b8b16408456e9e9c94ecf10" translate="yes" xml:space="preserve">
          <source>Synchronous channels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d920396ab185dc25079a48f6e8d88661b2cc69" translate="yes" xml:space="preserve">
          <source>Synthesizing a trait object with mismatched types&amp;mdash;one where the vtable does not correspond to the type of the value to which the data pointer points&amp;mdash;is highly likely to lead to undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a4090eab26592089b75b988fa31111a7541205" translate="yes" xml:space="preserve">
          <source>System::alloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a4d3554f6cd3709461bf54d436f4c16d2ee0b5" translate="yes" xml:space="preserve">
          <source>System::alloc_array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d6e3c2462c41179417d092e6854a6e9523dfad" translate="yes" xml:space="preserve">
          <source>System::alloc_excess</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a28c8745d715d92a8fc760acf190672373404b3" translate="yes" xml:space="preserve">
          <source>System::alloc_one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557c1b99d016f4bce7bd87785f7d8ff396dfaa5f" translate="yes" xml:space="preserve">
          <source>System::alloc_zeroed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be64b27274e3cecbecd34f9851715a023e7ca3b3" translate="yes" xml:space="preserve">
          <source>System::borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924a5dfdc6246e001f1718787e4f539852b735b5" translate="yes" xml:space="preserve">
          <source>System::borrow_mut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a29409339d6dde8b813fa3dd59d0c508c62c37" translate="yes" xml:space="preserve">
          <source>System::clone</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
