<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="scikit_image">
    <body>
      <group id="scikit_image">
        <trans-unit id="6a91fa632a51751a4af645e7ef13b5a33deeee1b" translate="yes" xml:space="preserve">
          <source>See base Plugin class for additional details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1af62b1a8b0388b9c2363f1932a644df9aab3a" translate="yes" xml:space="preserve">
          <source>See class documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bdabc1bf4d73b1a276985f55b76076d22b63c9" translate="yes" xml:space="preserve">
          <source>See example section for usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8579137d98c0b63ba5f44450629f8ae27afdbb1" translate="yes" xml:space="preserve">
          <source>See return value &lt;code&gt;p&lt;/code&gt; for explanation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98285e262e8f3369777c003ca1e78a8af10c44d" translate="yes" xml:space="preserve">
          <source>See the MCP and MCP_Geometric class documentation for explanation of the path-finding algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0049c56d1c26d9c3705694f3898481d65b239a58" translate="yes" xml:space="preserve">
          <source>See the documentation for MCP for full details. This class differs from MCP in that several methods can be overloaded (from pure Python) to modify the behavior of the algorithm and/or create custom algorithms based on MCP. Note that goal_reached can also be overloaded in the MCP class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb6e14aa6a5f13cde1e6d48e415ffe71cfa044a" translate="yes" xml:space="preserve">
          <source>See the documentation for MCP for full details. This class differs from MCP in that the cost of a path is not simply the sum of the costs along that path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ada432354929346aeccba4108e6f2cb8f4d20c" translate="yes" xml:space="preserve">
          <source>See the examples for clarification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd7488801f19c1cea238cbf15ce7b9074aa857e" translate="yes" xml:space="preserve">
          <source>Seed for the random sampling of the decision pixel-pairs. From a square window with length &lt;code&gt;patch_size&lt;/code&gt;, pixel pairs are sampled using the &lt;code&gt;mode&lt;/code&gt; parameter to build the descriptors using intensity comparison. The value of &lt;code&gt;sample_seed&lt;/code&gt; must be the same for the images to be matched while building the descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aed1adee02b8e61f4d6cc8b7d683cf27722bd26" translate="yes" xml:space="preserve">
          <source>Seed to initialize the random number generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffdc35eff9f542ace14e10e12810655ad7b044e" translate="yes" xml:space="preserve">
          <source>Seed to initialize the random number generator. If &lt;code&gt;None&lt;/code&gt;, a random seed from the operating system is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee30c016e27bebedfb3ebf2809db46d5549b4ef9" translate="yes" xml:space="preserve">
          <source>Segmentation produced by the algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c4c09f26f7e296aab0d91ab09ce34d64e04367" translate="yes" xml:space="preserve">
          <source>Segments image using k-means clustering in Color-(x,y,z) space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8207fd81fd4bf3a8aa7a65fc459b0de66987ab" translate="yes" xml:space="preserve">
          <source>Segments image using quickshift clustering in Color-(x,y) space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c2c519388dfeab1d2da32ad0c3a55d08148aed" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;min_samples&lt;/code&gt; random samples from the original data and check whether the set of data is valid (see &lt;code&gt;is_data_valid&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a504548e01a4424c056dbb28973773f0188bbdba" translate="yes" xml:space="preserve">
          <source>Select image on display using index into image collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc7227551bf772a8c2ede0a97441e09d86d98ee" translate="yes" xml:space="preserve">
          <source>Select the displayed frame of the image collection using the slider or with the following keyboard shortcuts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595b1136a282babf7e914f6887e393225ab4fda5" translate="yes" xml:space="preserve">
          <source>Sensitivity factor to separate corners from edges, typically in range &lt;code&gt;[0, 0.2]&lt;/code&gt;. Small values of k result in detection of sharp corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3c719e0fbc4c845ab059e9736a6724ef4546d2" translate="yes" xml:space="preserve">
          <source>Sequence of image files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17e5892e42fdd695048b20ec9d58198ab08a9d9" translate="yes" xml:space="preserve">
          <source>Set pixel color in the image at the given coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3fef86899d3c422794aeb104bf6ab6bfeec06e" translate="yes" xml:space="preserve">
          <source>Set the bottom-left pixel to black:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab0e7b3d501d83ae39ef753a34db9cb2428160" translate="yes" xml:space="preserve">
          <source>Set the default plugin for a specified operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb9c3584319fa565e48c2354f0e1ec7d96776aa" translate="yes" xml:space="preserve">
          <source>Set the default plugin for a specified operation. The plugin will be loaded if it hasn&amp;rsquo;t been already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb6e802a30765ff54d1367b96e62b87980cfb63" translate="yes" xml:space="preserve">
          <source>Set the ellipse rotation (rotation) in range (-PI, PI) in contra clock wise direction, so PI/2 degree means swap ellipse axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8439def19ee76ca764094b4a5bacc720ee94128" translate="yes" xml:space="preserve">
          <source>Set the percentile value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928c9a3b47c2dc3df36296bf1ef35c1602c3bd80" translate="yes" xml:space="preserve">
          <source>Set the plugin for this function. By default, the plugin is set for all functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224439c19661807bbcd9701ecfc094db061915f2" translate="yes" xml:space="preserve">
          <source>Set the top row to red:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2b1f9aff253d953e96c8064e160152fe2e3c9a" translate="yes" xml:space="preserve">
          <source>Setup the coordinate array, that defines the scaling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e08db58ddb3524c4a1e3b12cbf3e5b2053893d" translate="yes" xml:space="preserve">
          <source>Sezgin M. and Sankur B. (2004) &amp;ldquo;Survey over Image Thresholding Techniques and Quantitative Performance Evaluation&amp;rdquo; Journal of Electronic Imaging, 13(1): 146-165 DOI:10.1117/1.1631315</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dbd81364cb513185a8ff2e00c5bd34d248740b" translate="yes" xml:space="preserve">
          <source>Sezgin M. and Sankur B. (2004) &amp;ldquo;Survey over Image Thresholding Techniques and Quantitative Performance Evaluation&amp;rdquo; Journal of Electronic Imaging, 13(1): 146-165, &lt;a href=&quot;http://www.busim.ee.boun.edu.tr/~sankur/SankurFolder/Threshold_survey.pdf&quot;&gt;http://www.busim.ee.boun.edu.tr/~sankur/SankurFolder/Threshold_survey.pdf&lt;/a&gt; DOI:10.1117/1.1631315</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0f7b32d39da04909b54901125c12a3c001f778" translate="yes" xml:space="preserve">
          <source>Sezgin M. and Sankur B. (2004) &amp;ldquo;Survey over Image Thresholding Techniques and Quantitative Performance Evaluation&amp;rdquo; Journal of Electronic Imaging, 13(1): 146-165, DOI:10.1117/1.1631315 http://www.busim.ee.boun.edu.tr/~sankur/SankurFolder/Threshold_survey.pdf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c545a0b1d8aebd106b793d1877cbeafc8473f8e3" translate="yes" xml:space="preserve">
          <source>Shai Avidan and Ariel Shamir &amp;ldquo;Seam Carving for Content-Aware Image Resizing&amp;rdquo; &lt;a href=&quot;http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Avidan07.pdf&quot;&gt;http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Avidan07.pdf&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5c1a20b7cfcfec8a35fb4c6a419a1314233755" translate="yes" xml:space="preserve">
          <source>Shape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c152cce6cbf5037e0edfebdbb2dd90f956a4ca" translate="yes" xml:space="preserve">
          <source>Shape index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca821ae1e6c1996987e3a993a363fc70ca0dc06" translate="yes" xml:space="preserve">
          <source>Shape of image sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f10c0de472db4f1bb118103b438fe0e812422b" translate="yes" xml:space="preserve">
          <source>Shape of output image &lt;code&gt;(rows, cols[, bands])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e698c7683928cf07e9d93f4bf19077c353f2711" translate="yes" xml:space="preserve">
          <source>Shape of the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1e4042a1a77395a2643b03b78259afee94f717" translate="yes" xml:space="preserve">
          <source>Shape of the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54ab24245e2fc7f0d8784317ebe06fa3e8e1f16" translate="yes" xml:space="preserve">
          <source>Shape of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c16fdf378693bc32762e62cb790ee13b307d8d" translate="yes" xml:space="preserve">
          <source>Shape of the output image generated. By default the shape of the input image is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04baed2e3be8171a45ee4fac2ef499969395422" translate="yes" xml:space="preserve">
          <source>Shape of the output image generated. By default the shape of the input image is preserved. Note that, even for multi-band images, only rows and columns need to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152cda8feb518fa27c7b40d02d85a3c3c9d6384d" translate="yes" xml:space="preserve">
          <source>Shapes have random (row, col) starting coordinates and random sizes bounded by &lt;code&gt;min_size&lt;/code&gt; and &lt;code&gt;max_size&lt;/code&gt;. It can occur that a randomly generated shape will not fit the image at all. In that case, the algorithm will try again with new starting coordinates a certain number of times. However, it also means that some shapes may be skipped altogether. In that case, this function will generate fewer shapes than requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520c6e18a659aab917cfad2cfc389c2eccdd9a4d" translate="yes" xml:space="preserve">
          <source>Sharpening, edge finding, rank filters, thresholding, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f7d42c3202e884e45558b21a44d49696643abf" translate="yes" xml:space="preserve">
          <source>Shear angle in counter-clockwise direction as radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6bb92598b02b765195dc16fd5476c213441ab6" translate="yes" xml:space="preserve">
          <source>Shi, J.; Malik, J., &amp;ldquo;Normalized cuts and image segmentation&amp;rdquo;, Pattern Analysis and Machine Intelligence, IEEE Transactions on, vol. 22, no. 8, pp. 888-905, August 2000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16dd1a00a7c7c6e2d01bfeeec61332224f47bcd2" translate="yes" xml:space="preserve">
          <source>Shi-Tomasi response image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ab5f7536139267bebdd1dfc7bed11728ca8087" translate="yes" xml:space="preserve">
          <source>Shift the projections contained in &lt;code&gt;radon_image&lt;/code&gt; (the sinogram) by this many pixels before reconstructing the image. The i&amp;rsquo;th value defines the shift of the i&amp;rsquo;th column of &lt;code&gt;radon_image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ae92ddabcb6ebc9fb33e20bf9e14f46552b5db" translate="yes" xml:space="preserve">
          <source>Shift vector (in pixels) required to register &lt;code&gt;target_image&lt;/code&gt; with &lt;code&gt;src_image&lt;/code&gt;. Axis ordering is consistent with numpy (e.g. Z, Y, X)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1ae47cb152913797e0c654f7d1876a8d2bb9b5" translate="yes" xml:space="preserve">
          <source>Show ImageViewer and attached plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc04b4d9dfe889efe25ebf8c71c088b00ae2cd46" translate="yes" xml:space="preserve">
          <source>Show a Region Adjacency Graph on an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4218af9fc18930925e117ba6421c7ecdd30064a8" translate="yes" xml:space="preserve">
          <source>Show plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50830c7c424e27e9499e091ca45be3d22daa076" translate="yes" xml:space="preserve">
          <source>Shows the evolution of the &amp;lsquo;energy&amp;rsquo; for each step of the algorithm. This should allow to check whether the algorithm converged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dab879938404df03c34a8823d852356de2e639a" translate="yes" xml:space="preserve">
          <source>Sigma for Gaussian filter. Default is &lt;code&gt;2 * downscale / 6.0&lt;/code&gt; which corresponds to a filter mask twice the size of the scale factor that covers more than 99% of the Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0f3c8406d310d7c7e45555bb44f854280d8d7f" translate="yes" xml:space="preserve">
          <source>Sigma for Gaussian filter. Default is &lt;code&gt;2 * upscale / 6.0&lt;/code&gt; which corresponds to a filter mask twice the size of the scale factor that covers more than 99% of the Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2501e066ed62c0e08a9f012112993efb08cf0744" translate="yes" xml:space="preserve">
          <source>Sigmoid corrected output image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff1da825937508ba77350f370161a15ca94b0a9" translate="yes" xml:space="preserve">
          <source>Significance level for corner classification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9898992d541c66633430f9011663793560c6bd3f" translate="yes" xml:space="preserve">
          <source>SimilarityTransform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07177436d9b1b426e0a090e1c0e719242896ea7" translate="yes" xml:space="preserve">
          <source>Similarly using the &lt;code&gt;visvis&lt;/code&gt; package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8943652a17b6e4003da3edfb50231d0e658992b8" translate="yes" xml:space="preserve">
          <source>Simple example of how to use the MCP and MCP_Geometric classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e33d25438b7c5a1cebf33d5ecd779d447badc7" translate="yes" xml:space="preserve">
          <source>Simplified interface for teaching purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e897da59978f1459eb06863c276264ffa76e80" translate="yes" xml:space="preserve">
          <source>Simply thresholding the image leads either to missing significant parts of the coins, or to merging parts of the background with the coins. This is due to the inhomogeneous lighting of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4601333fb84d718ea54ded21cc48e8d163b4ade" translate="yes" xml:space="preserve">
          <source>Since it does not link to FFmpeg&amp;rsquo;s underlying libraries, it is easier to install but about &lt;a href=&quot;https://gist.github.com/mikeboers/6843684&quot;&gt;half as fast&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5813f0e7bd865fd30fc8fe996ecba7aabe6863" translate="yes" xml:space="preserve">
          <source>Size (in pixels) of a cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37fbd89cd4db6e47972828865e1ca26cbed33ad" translate="yes" xml:space="preserve">
          <source>Size of BRIEF descriptor for each keypoint. Sizes 128, 256 and 512 recommended by the authors. Default is 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2689a9c00c73c8eeeaa059f10ee04087e3c2156b" translate="yes" xml:space="preserve">
          <source>Size of patches used for denoising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a786585f9ce2866cbb12e747c8fd1140fac8096" translate="yes" xml:space="preserve">
          <source>Size of plugin window in pixels. Note that Qt will automatically resize a window to fit components. So if you&amp;rsquo;re adding rows of components, you can leave &lt;code&gt;height = 0&lt;/code&gt; and just let Qt determine the final height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b68651f8efc53106cdb51dd9be407c5ad3799b9" translate="yes" xml:space="preserve">
          <source>Size of the generated output image &lt;code&gt;(rows, cols[, &amp;hellip;][, dim])&lt;/code&gt;. If &lt;code&gt;dim&lt;/code&gt; is not provided, the number of channels is preserved. In case the number of input channels does not equal the number of output channels a n-dimensional interpolation is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ef9f121abd48e069d4e69f9ac1e6cd5e6f220e" translate="yes" xml:space="preserve">
          <source>Size of the squares of the checkerboard. It defaults to 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c732878a0ac73679fc8b5da90c59223185999865" translate="yes" xml:space="preserve">
          <source>Skimage viewer or plot plugin object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57083f4927fd5dbbd5b48af1626f070aad2c83d" translate="yes" xml:space="preserve">
          <source>Sliced binary region image which has the same size as bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46d9246174f6fc1d4c42dd3af7691eb965bfc95" translate="yes" xml:space="preserve">
          <source>Slicing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5db7d82232ee34651eb5adea59b01c839eb843" translate="yes" xml:space="preserve">
          <source>Slider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816a547547cb87044e0a0ff7d78e607f83bf02ed" translate="yes" xml:space="preserve">
          <source>Slider orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa837390fc4b4d230763df624ba373e142c28534" translate="yes" xml:space="preserve">
          <source>Slider widget for adjusting numeric parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa89e2321d0258928b42b9681ddeb80d0c0e06f4" translate="yes" xml:space="preserve">
          <source>Smaller eigen value for each input matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d1cc1250086521c6caaa0228127af56ccce1c6" translate="yes" xml:space="preserve">
          <source>Smooth and then downsample image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab956be94559ec452bce862438d9331de916585" translate="yes" xml:space="preserve">
          <source>Smooth the image using a Gaussian with &lt;code&gt;sigma&lt;/code&gt; width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069d8c99acbcf6f935a628580804d01313802a6e" translate="yes" xml:space="preserve">
          <source>Smoothed and downsampled float image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20045bf57e82e9d044cd6b19f2cc40e7ece4d595" translate="yes" xml:space="preserve">
          <source>Snake length shape parameter. Higher values makes snake contract faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6597d2b6651416e8feba153ad7d5bc1838a784b" translate="yes" xml:space="preserve">
          <source>Snake smoothness shape parameter. Higher values makes snake smoother.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b661e9341fce567b479e1bb90b10989cdb7c1c" translate="yes" xml:space="preserve">
          <source>Soille, P., &amp;ldquo;Morphological Image Analysis: Principles and Applications&amp;rdquo; (Chapter 6), 2nd edition (2003), ISBN 3540429883.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70894bb52a97b36fd99d711a868c5326a16fab9" translate="yes" xml:space="preserve">
          <source>Some ideas taken from Soille, &amp;ldquo;Automated Basin Delineation from Digital Elevation Models Using Mathematical Morphology&amp;rdquo;, Signal Processing 20 (1990) 171-182</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28565c8210b51af7dbee11d0cd1df3d437cad653" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to read a sequence of images from a standard video file, such as .avi and .mov files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c08261fb04748bd58924727c71a12bb71bc7f4" translate="yes" xml:space="preserve">
          <source>Sometimes, however, you have images that should span the entire intensity range but do not. For example, some cameras store images with 10-, 12-, or 14-bit depth per pixel. If these images are stored in an array with dtype uint16, then the image won&amp;rsquo;t extend over the full intensity range, and thus, would appear dimmer than it should. To correct for this, you can use the &lt;code&gt;rescale_intensity&lt;/code&gt; function to rescale the image so that it uses the full dtype range:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9960f604dfa35c8e1f0e91e1620b0b4d61a6d89e" translate="yes" xml:space="preserve">
          <source>Source coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfea9b200a38f4e5c5a98ad7d388eb4b2d743a1" translate="yes" xml:space="preserve">
          <source>Spacing between voxels in each spatial dimension. If &lt;code&gt;None&lt;/code&gt;, then the spacing between pixels/voxels in each dimension is assumed 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae08e2b2d783d193f09eb2170a65319580fc7eb" translate="yes" xml:space="preserve">
          <source>Spacing in (x, y, z) spatial dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a101dc0fa5decb87e63ba6721b836fba09664d14" translate="yes" xml:space="preserve">
          <source>Spatial closeness is measured by considering only the local pixel neighborhood given by a structuring element (selem).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f2f3ad1c1425a3a5a5d16f9e0171a3fd206fe4" translate="yes" xml:space="preserve">
          <source>Spatial closeness is measured by considering only the local pixel neighborhood given by a structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a8ad6840c44efa1bd137ce23c9e2d5825d1cf0" translate="yes" xml:space="preserve">
          <source>Spatial closeness is measured by the Gaussian function of the Euclidean distance between two pixels and a certain standard deviation (&lt;code&gt;sigma_spatial&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8b86ca6f71a67c82b1525af62b7bcf7162e272" translate="yes" xml:space="preserve">
          <source>Spatial coordinates for V unique mesh vertices. Coordinate order matches input &lt;code&gt;volume&lt;/code&gt; (M, N, P).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792255fe1f452e3cb369a4aae6b9567586d8dc96" translate="yes" xml:space="preserve">
          <source>Spatial frequency of the harmonic function. Specified in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1677087051540e9169e21507c6f56524d422c809" translate="yes" xml:space="preserve">
          <source>Spatial moments of intensity image up to 3rd order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4a9ea44ea061f2aaac87def9d07896ab5e195f" translate="yes" xml:space="preserve">
          <source>Spatial moments up to 3rd order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ac76eb4b12c0c0558bcea61030fd3347df7c14" translate="yes" xml:space="preserve">
          <source>Specifies if samples are stored contiguous or in separate planes. By default this setting is inferred from the data shape. If this parameter is set, extra samples are used to store grayscale images. &amp;lsquo;contig&amp;rsquo;: last dimension contains samples. &amp;lsquo;planar&amp;rsquo;: third last dimension contains samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4893ee49bdb9889aacd877ae1574bb75705aa356" translate="yes" xml:space="preserve">
          <source>Specify the V vertices of the polygon, sorted either clockwise or anti-clockwise. The first point may (but does not need to be) duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abaf630d02121b6537f8a5eaebc399638ae8137b" translate="yes" xml:space="preserve">
          <source>Speckle, Poisson, Localvar, and Gaussian noise may generate noise outside the valid image range. The default is to clip (not alias) these values, but they may be preserved by setting &lt;code&gt;clip=False&lt;/code&gt;. Note that in this case the output may contain values outside the ranges [0, 1] or [-1, 1]. Use this option with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4491bb336e19e51e6bffc2cf255266a74b6032" translate="yes" xml:space="preserve">
          <source>Spherical cap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd26e0aefad7c727153bf7d1c6c3efa5b7d25da3" translate="yes" xml:space="preserve">
          <source>Spherical cup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa3f5800b14ba7916e0db524ec23385129e6d95" translate="yes" xml:space="preserve">
          <source>Split an array into possibly overlapping chunks of a given depth and boundary type, call the given function in parallel on the chunks, combine the chunks and return the resulting array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fea9f75f0d05107e4b422a34719122b74146181" translate="yes" xml:space="preserve">
          <source>Stain combination matrices available in the &lt;code&gt;color&lt;/code&gt; module and their respective colorspace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2f84221fa6bdebfd731376b0f1787cde80da9f" translate="yes" xml:space="preserve">
          <source>Stain separation matrices available in the &lt;code&gt;color&lt;/code&gt; module and their respective colorspace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400f161564b7fa03025f59a68d0777cfe4cb648e" translate="yes" xml:space="preserve">
          <source>Stain to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976508bca4f04b99b1b3e2598b809d591c6015ab" translate="yes" xml:space="preserve">
          <source>Standard deviation for Gaussian filtering to avoid aliasing artifacts. By default, this value is chosen as (1 - s) / 2 where s is the down-scaling factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abb99a48990f68f9a1eb8234e42b0b26c7e4366" translate="yes" xml:space="preserve">
          <source>Standard deviation for Gaussian kernel. The standard deviations of the Gaussian filter are given for each axis as a sequence, or as a single number, in which case it is equal for all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc58e7048e5df08dc960174d0bcbf3d4e538f294" translate="yes" xml:space="preserve">
          <source>Standard deviation for grayvalue/color distance (radiometric similarity). A larger value results in averaging of pixels with larger radiometric differences. Note, that the image will be converted using the &lt;code&gt;img_as_float&lt;/code&gt; function and thus the standard deviation is in respect to the range &lt;code&gt;[0, 1]&lt;/code&gt;. If the value is &lt;code&gt;None&lt;/code&gt; the standard deviation of the &lt;code&gt;image&lt;/code&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87cd0125e9a780f033c2330b94107ba50557633" translate="yes" xml:space="preserve">
          <source>Standard deviation for range distance. A larger value results in averaging of pixels with larger spatial differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f88667ec03400dc2258ee836366d17adcb0b8c6" translate="yes" xml:space="preserve">
          <source>Standard deviation in x- and y-directions. These directions apply to the kernel &lt;em&gt;before&lt;/em&gt; rotation. If &lt;code&gt;theta = pi/2&lt;/code&gt;, then the kernel is rotated 90 degrees so that &lt;code&gt;sigma_x&lt;/code&gt; controls the &lt;em&gt;vertical&lt;/em&gt; direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda3ac763026aef41b4de2cb5265bbb4289ee7c4" translate="yes" xml:space="preserve">
          <source>Standard deviation of spatial Gaussian smoothing for the center histogram and for each ring of histograms. The array of sigmas should be sorted from the center and out. I.e. the first sigma value defines the spatial smoothing of the center histogram and the last sigma value defines the spatial smoothing of the outermost ring. Specifying sigmas overrides the following parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8563d63d7f69971c5252edbd0b4e7c40b1589dab" translate="yes" xml:space="preserve">
          <source>Standard deviation of the Gaussian filter applied over the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2207bdbe8a9dca0e8931f61a93ad21cbeda0e10" translate="yes" xml:space="preserve">
          <source>Standard deviation of the Gaussian filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf54f9edd2e8830e20b885951679355f07b91ab" translate="yes" xml:space="preserve">
          <source>Standard deviation of the Gaussian low-pass filter applied to the image to alleviate noise sensitivity, which is strongly recommended to obtain discriminative and good descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6bba3d14262965b10f0713833205828da03f15" translate="yes" xml:space="preserve">
          <source>Standard deviation used for the Gaussian kernel, used for the Hessian matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013afba8dc3caf1fe9bb0c12d1a54b7be8a7bb85" translate="yes" xml:space="preserve">
          <source>Standard deviation used for the Gaussian kernel, which is used as a weighting function for the local summation of squared differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54c9f6c5ab0bbbff451e6132f8abf8fc7738257" translate="yes" xml:space="preserve">
          <source>Standard deviation used for the Gaussian kernel, which is used as weighting function for the auto-correlation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e8cd064f7205d99e47170e63078286671db310" translate="yes" xml:space="preserve">
          <source>Standard deviation used for the Gaussian kernel, which is used for smoothing the input data before Hessian eigen value calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637ed9b282a236fa843334e942855c72aae962fd" translate="yes" xml:space="preserve">
          <source>Standard test images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed39ee70c061d3eb4cbcb90aca24ec69f2841fc1" translate="yes" xml:space="preserve">
          <source>Start Qt mainloop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d62ecc0bffe4f43ab1ecec98307db3a07673fce" translate="yes" xml:space="preserve">
          <source>Start has 8 vertices and is an overlap of square of size &lt;code&gt;2*a + 1&lt;/code&gt; with its 45 degree rotated version. The slanted sides are 45 or 135 degrees to the horizontal axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c213d5945f9070ce853fbde8a2e7995d185b79" translate="yes" xml:space="preserve">
          <source>Starting position (row, column).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb33a6fdfbb78a5d9fc119906c4cd6a186127b2" translate="yes" xml:space="preserve">
          <source>Step size between sigmas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0295f8dee164977431262aa157ae35797bb8ec5" translate="yes" xml:space="preserve">
          <source>Step size in voxels. Default 1. Larger steps yield faster but coarser results. The result will always be topologically correct though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a6e50b1119dc5648f3c425a6b5dee68899e309" translate="yes" xml:space="preserve">
          <source>Stop iteration if at least this number of inliers are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bdc2d5640736522437324781f289845bfea0dc" translate="yes" xml:space="preserve">
          <source>Stop iteration if sum of residuals is less than or equal to this threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee254957de8dca7fbf2216d791df67f6cefa633" translate="yes" xml:space="preserve">
          <source>Subclasses and plugins will likely extend the &lt;code&gt;update_image&lt;/code&gt; method to add custom overlays or filter the displayed image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629c1a1a2141f08382bb319581b7c1a17c1ecc9f" translate="yes" xml:space="preserve">
          <source>Subdivided coordinate array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd34583c0363edc7b87a6101ad38e519d101744" translate="yes" xml:space="preserve">
          <source>Subdivision of polygonal curves using B-Splines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126a9aa6ef12f3b9d039559571a715536deb519d" translate="yes" xml:space="preserve">
          <source>Subpackages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e53ccc91c86aba0911a877e4168ab18d5d482a" translate="yes" xml:space="preserve">
          <source>Subpixel corner positions. NaN for &amp;ldquo;not classified&amp;rdquo; corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635ed448b23596731fad06b11114c88949c38b12" translate="yes" xml:space="preserve">
          <source>Subset of data from the LFW dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3a86791bc2d97fc7b5952bdeb3668de4e1a85c" translate="yes" xml:space="preserve">
          <source>Supports 2D grayscale images only, and does not implement the area term described in the original article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47d0362484f394a13a90663c5f663e6f3f2265e" translate="yes" xml:space="preserve">
          <source>Surface area of mesh. Units now [coordinate units] ** 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b996c773b1274377bf54ea5af395cb94209f93" translate="yes" xml:space="preserve">
          <source>Surface of the moon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fe5c429d9e2f99fc8c1c728f15cb7b1d760666" translate="yes" xml:space="preserve">
          <source>Swirled version of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f95c89c97c7d0a1a5e1f0017091c17650616219" translate="yes" xml:space="preserve">
          <source>Switch between isotropic and anisotropic TV denoising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796b6d038409c886ad714f16aef6aedcf4b20392" translate="yes" xml:space="preserve">
          <source>T. H. Reiss. Recognizing Planar Objects Using Invariant Image Features, from Lecture notes in computer science, p. 676. Springer, Berlin, 1993.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4773870e60fb5d865120e9dc627a557b3c1f93" translate="yes" xml:space="preserve">
          <source>TIFF pages with compatible shapes and types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77724fe9c891f7020eb545e9e32f4e3337b0b3c3" translate="yes" xml:space="preserve">
          <source>Take part in development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2134311123aa6c3516783c58ced756eb1c989cca" translate="yes" xml:space="preserve">
          <source>Take the square root of the sum of the squares of the horizontal and vertical Scharrs to get a magnitude that is somewhat insensitive to direction. The Scharr operator has a better rotation invariance than other edge filters such as the Sobel or the Prewitt operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4f3be9f37354c8f996fac532289ef1c61ce543" translate="yes" xml:space="preserve">
          <source>Take the square root of the sum of the squares of the horizontal and vertical Sobels to get a magnitude that&amp;rsquo;s somewhat insensitive to direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1299314342d601198ea952937cecab314b38da6" translate="yes" xml:space="preserve">
          <source>Target filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814ce05130e0573e0ed28a6f168fb94a028e9ab6" translate="yes" xml:space="preserve">
          <source>Template to locate. It must be &lt;code&gt;(m &amp;lt;= M, n &amp;lt;= N[, d &amp;lt;= D])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2c5f3bfc226792f71228a4860b71eb389c5fd5" translate="yes" xml:space="preserve">
          <source>Test image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70309b1ef883164f4186d457a1566798f375c1e8" translate="yes" xml:space="preserve">
          <source>Test images and example data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569c0927c5e24422c0824a9fff21c882c7d8f554" translate="yes" xml:space="preserve">
          <source>Test whether points lie inside a polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778ae8ff3f86b29a4e645a40f71115141d2b3b38" translate="yes" xml:space="preserve">
          <source>Test whether points on a specified grid are inside a polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ddd2ce2480583ba6e13bb1669802bcc62475c4" translate="yes" xml:space="preserve">
          <source>Text image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41129461cc1c572ed83ae34bbb43e27e3a0e5208" translate="yes" xml:space="preserve">
          <source>Textiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86a0025af9b681a76a3f3792c37fb3eada02aaa" translate="yes" xml:space="preserve">
          <source>That is, returned thresholds are intensities that separate the image into two groups of pixels, where the threshold intensity is midway between the mean intensities of these groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3167670c7c2aa5fca0c6eeaac57136550679a5fe" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;provides&amp;rdquo;-line lists all the functions provided by the plugin. Since our plugin provides &lt;code&gt;imshow&lt;/code&gt;, we have to define it inside &lt;code&gt;mpl.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007ffb5c8ba2ffaff7b6c74e8fd1b9fe8f4c515c" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;energy&amp;rsquo; which this algorithm tries to minimize is defined as the sum of the differences from the average within the region squared and weighed by the &amp;lsquo;lambda&amp;rsquo; factors to which is added the length of the contour multiplied by the &amp;lsquo;mu&amp;rsquo; factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf887d7bf3669166b10a2eca06d30fdfaf49e091" translate="yes" xml:space="preserve">
          <source>The (approximate) number of labels in the segmented output image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e92d53bc550d1904cb3f530342ea0c27f2c498" translate="yes" xml:space="preserve">
          <source>The (approximate) number of points to embed in the space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a4eec6bae92b1029779ed4053a73204d422b22" translate="yes" xml:space="preserve">
          <source>The 2D approximate method uses box filters over integral images to compute the approximate Hessian Determinant, as described in &lt;a href=&quot;#r48e33a732c34-1&quot; id=&quot;id24&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ba09f067b63f0b0c31b5fc21fc8cc149510cd7" translate="yes" xml:space="preserve">
          <source>The 3x3 convolution kernel used in the horizontal and vertical Sobels is an approximation of the gradient of the image (with some slight blurring since 9 pixels are used to compute the gradient at a given pixel). As an approximation of the gradient, the Sobel operator is not completely rotation-invariant. The Scharr operator should be used for a better rotation invariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c096390c13030251834366de005dffa151d4da0f" translate="yes" xml:space="preserve">
          <source>The 8-point algorithm requires at least 8 corresponding point pairs for a well-conditioned solution, otherwise the over-determined solution is estimated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a0e9740e6715ad46f4319f76a9fbb8729cc56b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/skimage.data#module-skimage.data&quot;&gt;&lt;code&gt;skimage.data&lt;/code&gt;&lt;/a&gt; submodule provides a set of functions returning example images, that can be used to get started quickly on using scikit-image&amp;rsquo;s functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7684098a651d9c7b669bb2c224c2baa8f5ea39e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://scikit-image.org/docs/0.14.x/auto_examples/index.html#examples-gallery&quot;&gt;General examples&lt;/a&gt; gallery provides graphical examples of typical image processing tasks. By a quick glance at the different thumbnails, the user may find an example close to a typical use case of interest. Each graphical example page displays an introductory paragraph, a figure, and the source code that generated the figure. Downloading the Python source code enables one to modify quickly the example into a case closer to one&amp;rsquo;s image processing applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39cec3f0b787d735094ff78a5342b43d93d93d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Plugin&lt;/code&gt; assumes the first argument given to the image filter is the image from the image viewer. In the future, this should be changed so you can pass the image to a different argument of the filter function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9510c33c6d654f8229f5df54a06a7b5b83406c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Video&lt;/code&gt; class in &lt;a href=&quot;github.com/soft-matter/pims&quot;&gt;PIMS&lt;/a&gt; invokes PyAV and adds additional functionality to solve a common problem in scientific applications, accessing a video by frame number. Video file formats are designed to be searched in an approximate way, by time, and they do not support an efficient means of seeking a specific frame number. PIMS adds this missing functionality by decoding (but not reading) the entire video at and producing an internal table of contents that supports indexing by frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdae5bd6c6aed5445123dda137555eceaeec0e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; of the new node to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19f8d0a0d2c448af9b4410cbeb301c583a136f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;k&lt;/code&gt; parameter in &lt;code&gt;skimage.feature.corner_harris&lt;/code&gt;. Sensitivity factor to separate corners from edges, typically in range &lt;code&gt;[0, 0.2]&lt;/code&gt;. Small values of &lt;code&gt;k&lt;/code&gt; result in detection of sharp corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018a6e49ff961156b60fa0bb6864b1a6c71cebce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; parameter determines how the array borders are handled, where &lt;code&gt;cval&lt;/code&gt; is the value when mode is equal to &amp;lsquo;constant&amp;rsquo;. Default is &amp;lsquo;nearest&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7498e987267b2908982563391225100959472c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; parameter in &lt;code&gt;skimage.feature.corner_fast&lt;/code&gt;. Minimum number of consecutive pixels out of 16 pixels on the circle that should all be either brighter or darker w.r.t test-pixel. A point c on the circle is darker w.r.t test pixel p if &lt;code&gt;Ic &amp;lt; Ip - threshold&lt;/code&gt; and brighter if &lt;code&gt;Ic &amp;gt; Ip + threshold&lt;/code&gt;. Also stands for the n in &lt;code&gt;FAST-n&lt;/code&gt; corner detector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fb746bc586f1efb027254c8d0ee5cbf9fba13d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; parameter passes an array in which to store the filter output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af138b8cba81a09046e7051af3dc3fb73ad35f2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; attribute contains the parameters in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20eec75301313bf4edf5083287f64c6ce004cf3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quick search&lt;/code&gt; field located in the navigation bar of the html documentation can be used to search for specific keywords (segmentation, rescaling, denoising, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3107eaac1e26010aa08ff0ca3f98c88fc2dee1f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spacing&lt;/code&gt; argument is specifically for anisotropic datasets, where data points are spaced differently in one or more spatial dimensions. Anisotropic data is commonly encountered in medical imaging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21193634588af01968eb201ef369afac9ba27c71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;threshold&lt;/code&gt; parameter in &lt;code&gt;feature.corner_fast&lt;/code&gt;. Threshold used to decide whether the pixels on the circle are brighter, darker or similar w.r.t. the test pixel. Decrease the threshold when more corners are desired and vice-versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493db957f24aeeacb6926adfce39295c003c2006" translate="yes" xml:space="preserve">
          <source>The CIE XYZ color space is derived from the CIE RGB color space. Note however that this function converts from sRGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de41f760e0ee289ec9f2180c5af2347973797764" translate="yes" xml:space="preserve">
          <source>The CIE XYZ color space is derived from the CIE RGB color space. Note however that this function converts to sRGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b671cbcacb1deebcc170f1d36811bf84467ec1" translate="yes" xml:space="preserve">
          <source>The CLAHE algorithm is run on the V (Value) channel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b29a7b6c1edb94791a9c9701cc086e1f0ebe5b" translate="yes" xml:space="preserve">
          <source>The Chan-Vese Algorithm - Project Report, Rami Cohen, &lt;a href=&quot;http://arxiv.org/abs/1107.2782&quot;&gt;http://arxiv.org/abs/1107.2782&lt;/a&gt;, 2011</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563f21993e660e4d21d04b4613c3db081c9fd0e5" translate="yes" xml:space="preserve">
          <source>The Chan-Vese Algorithm is designed to segment objects without clearly defined boundaries. This algorithm is based on level sets that are evolved iteratively to minimize an energy, which is defined by weighted values corresponding to the sum of differences intensity from the average value outside the segmented region, the sum of differences from the average value inside the segmented region, and a term which is dependent on the length of the boundary of the segmented region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cf5f07ddefb0e49ed84d1d46e9d1db539a97c9" translate="yes" xml:space="preserve">
          <source>The Euclidean transformation is a rigid transformation with rotation and translation parameters. The similarity transformation extends the Euclidean transformation with a single scaling factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fe7257a6d411b56bcbd13689e01b9e99b86e2c" translate="yes" xml:space="preserve">
          <source>The FRT has a unique inverse if and only if n is prime. See &lt;a href=&quot;#r3b76f892cb20-1&quot; id=&quot;id15&quot;&gt;[1]&lt;/a&gt; for an overview. The idea for this algorithm is due to Vlad Negnevitski.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df0cc443f1d714ac12bc8638c937ae5311c8acb" translate="yes" xml:space="preserve">
          <source>The FRT has a unique inverse if and only if n is prime. [FRT] The idea for this algorithm is due to Vlad Negnevitski.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f41f341c916b253dcda629aa43057344f3b822" translate="yes" xml:space="preserve">
          <source>The GLCM Tutorial Home Page, &lt;a href=&quot;http://www.fp.ucalgary.ca/mhallbey/tutorial.htm&quot;&gt;http://www.fp.ucalgary.ca/mhallbey/tutorial.htm&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b172b88f009fbbaa091ef6e1e15ffba3ea753b" translate="yes" xml:space="preserve">
          <source>The Hessian matrix is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae458fcbeacc278c887aeebdc68f21d71635b010" translate="yes" xml:space="preserve">
          <source>The Hue is expressed as an angle between &lt;code&gt;(0, 2*pi)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3037ee8e1bf3b6edf4f058a03e30b9dc93d193bc" translate="yes" xml:space="preserve">
          <source>The Laplace edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3864ac18cbaa2363f16d853b23609926299a64b7" translate="yes" xml:space="preserve">
          <source>The Laplacian operator is generated using the function skimage.restoration.uft.laplacian().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ae6b912ff457dfd236d248637e02774d6ad79f" translate="yes" xml:space="preserve">
          <source>The N-D image in CIE-LAB format. The last (&lt;code&gt;N+1&lt;/code&gt;-th) dimension must have at least 3 elements, corresponding to the &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; color channels. Subsequent elements are copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00909e823bcf01f4ed607a15ed63f41a01820db0" translate="yes" xml:space="preserve">
          <source>The N-D image in CIE-LCH format. The last (&lt;code&gt;N+1&lt;/code&gt;-th) dimension must have at least 3 elements, corresponding to the &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; color channels. Subsequent elements are copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a549ca5802cc8ec0bfafb66e5a7e1a42676c4d9" translate="yes" xml:space="preserve">
          <source>The NRMSE metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95444018a0ac297a5ef868e4b80d10855db20947" translate="yes" xml:space="preserve">
          <source>The PSNR metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68a5c8daabc67c9bada4e14c6a613f179de25f1" translate="yes" xml:space="preserve">
          <source>The Poisson distribution is only defined for positive integers. To apply this noise type, the number of unique values in the image is found and the next round power of two is used to scale up the floating-point result, after which it is scaled back down to the floating-point image range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4c737c7acdda5df8779f91ff724a6396b7719b" translate="yes" xml:space="preserve">
          <source>The Prewitt edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b93c6de15610d2026404f8489d3d472e6873f7" translate="yes" xml:space="preserve">
          <source>The QApplication needs to be initialized before creating any QWidgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863807c5693a879ccd2e6d64af06013dd40703e0" translate="yes" xml:space="preserve">
          <source>The RGB color components of the pixel (3 values 0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd388fc326ca3a5f138a47b6c3a2b5920ca387a6" translate="yes" xml:space="preserve">
          <source>The RGBA color components of the pixel (4 values 0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03dd6fac1bc014882dba5acce3e8cafc7483c311" translate="yes" xml:space="preserve">
          <source>The Region Adjacency Graph (RAG) of an image, subclasses &lt;a href=&quot;http://networkx.github.io/documentation/latest/reference/classes/graph.html&quot;&gt;networx.Graph&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36024b38b6d54fe369de2297b3aa8fb659e2f22d" translate="yes" xml:space="preserve">
          <source>The Region Adjacency Graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394d6ebbb8ae533d005aa8f246e47f6ab5ed397e" translate="yes" xml:space="preserve">
          <source>The Robert&amp;rsquo;s edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d376c6c1e12726e1350af5e010e6aef7757b84e8" translate="yes" xml:space="preserve">
          <source>The Roberts&amp;rsquo; Cross edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0265e9be9cac8cefbba2f2c59a7a21074e5ac7f7" translate="yes" xml:space="preserve">
          <source>The Sampson distance is the first approximation to the geometric error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f045b73eea15f9a189a64bd5968a0b3a2ea2b428" translate="yes" xml:space="preserve">
          <source>The Scharr edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05148f1c662c582de7952bc9b67c06eec280814c" translate="yes" xml:space="preserve">
          <source>The Shannon entropy is defined as S = -sum(pk * log(pk)), where pk are frequency/probability of pixels of value k.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9ed8e87241c9c5bf01de735e8b9e6e9789d057" translate="yes" xml:space="preserve">
          <source>The Sobel edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd5d9ca3d9932656e17a1dcc9df94ec9f3bb2f0" translate="yes" xml:space="preserve">
          <source>The TIFF tag Id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1cce472805e48c5d80002dacbf10a92a8799a9" translate="yes" xml:space="preserve">
          <source>The absolute lower bound for scale space maxima. Local maxima smaller than thresh are ignored. Reduce this to detect blobs with less intensities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c1c98bb35e972f140e0944ec2697b05f13e227" translate="yes" xml:space="preserve">
          <source>The absolute lower bound for scale space maxima. Local maxima smaller than thresh are ignored. Reduce this to detect less prominent blobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e684364acf7facd875a2de1c2639cd9ac23b4f10" translate="yes" xml:space="preserve">
          <source>The accuracy must be chosen to produce a peak in the accumulator distribution. In other words, a flat accumulator distribution with low values may be caused by a too low bin size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb6c346598159f43f28214216b34ec99d00000d" translate="yes" xml:space="preserve">
          <source>The algorithm &lt;a href=&quot;#rc75910d539e3-zha84&quot; id=&quot;id9&quot;&gt;[Zha84]&lt;/a&gt; works by making successive passes of the image, removing pixels on object borders. This continues until no more pixels can be removed. The image is correlated with a mask that assigns each pixel a number in the range [0&amp;hellip;255] corresponding to each possible pattern of its 8 neighbouring pixels. A look up table is then used to assign the pixels a value of 0, 1, 2 or 3, which are selectively removed during the iterations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b19024df3b3144d99e22ed8ef970e293a2abc50" translate="yes" xml:space="preserve">
          <source>The algorithm [1] is an improved version of Chernyaev&amp;rsquo;s Marching Cubes 33 algorithm. It is an efficient algorithm that relies on heavy use of lookup tables to handle the many different cases, keeping the algorithm relatively easy. This implementation is written in Cython, ported from Lewiner&amp;rsquo;s C++ implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b6cb38a79d91e80e6ab723d50b210c8c9f23c4" translate="yes" xml:space="preserve">
          <source>The algorithm and its theoretical derivation are described in &lt;a href=&quot;#r81c856a3d0d3-1&quot; id=&quot;id21&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea2c3b53cef6613125cb494c11b8336f3315ca2" translate="yes" xml:space="preserve">
          <source>The algorithm and its theoretical derivation are described in &lt;a href=&quot;#rb6daaf5d7730-1&quot; id=&quot;id18&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b13f2147d159adda3d93f2240fd6d00eaa0fea8" translate="yes" xml:space="preserve">
          <source>The algorithm is taken from &lt;a href=&quot;#r4e1a5d6f491d-1&quot; id=&quot;id18&quot;&gt;[1]&lt;/a&gt;. Applications for greyscale reconstruction are discussed in &lt;a href=&quot;#r4e1a5d6f491d-2&quot; id=&quot;id19&quot;&gt;[2]&lt;/a&gt; and &lt;a href=&quot;#r4e1a5d6f491d-3&quot; id=&quot;id20&quot;&gt;[3]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27095b72889374ef3b9e2bdb7cddf42ddf2d735" translate="yes" xml:space="preserve">
          <source>The algorithm is the rational quadratic algorithm presented in reference &lt;a href=&quot;#r275489368e51-1&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd4295aa5a2af1f457c1aaa95f2167321b9c6ed" translate="yes" xml:space="preserve">
          <source>The algorithm solves the diffusion equation at infinite times for sources placed on markers of each phase in turn. A pixel is labeled with the phase that has the greatest probability to diffuse first to the pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4519787f76e34779b6a733c8fdb26c4477747368" translate="yes" xml:space="preserve">
          <source>The algorithm this function implements is different from the algorithms used by either &lt;code&gt;skeletonize&lt;/code&gt; or &lt;code&gt;medial_axis&lt;/code&gt;, thus for 2D images the results produced by this function are generally different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea5a08266d5d7a67b7ebcb56f8bd6ab6f281d11" translate="yes" xml:space="preserve">
          <source>The algorithm was first proposed in &lt;em&gt;Random walks for image segmentation&lt;/em&gt;, Leo Grady, IEEE Trans Pattern Anal Mach Intell. 2006 Nov;28(11):1768-83.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae484960355bcbc5bffdba3ad333bc98a41828b" translate="yes" xml:space="preserve">
          <source>The algorithm works also for 3-D images, and can be used for example to separate overlapping spheres.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3732ae90b105902352b90adc76b32a313d5cf36" translate="yes" xml:space="preserve">
          <source>The amount of swirling applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3716a3cba1432c5bb81eea218b4a16ad80859a58" translate="yes" xml:space="preserve">
          <source>The aperture angle of the observer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9904c234720a7921c1fecdc90f32a3a92d0481f3" translate="yes" xml:space="preserve">
          <source>The arguments expected by this function are the exact outputs from &lt;code&gt;skimage.measure.marching_cubes_classic&lt;/code&gt;. Only &lt;code&gt;faces&lt;/code&gt; is corrected and returned, as the vertices do not change; only the order in which they are referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447d1b74d4100c36e95b2020f4af376226380d2b" translate="yes" xml:space="preserve">
          <source>The arguments expected by this function are the first two outputs from &lt;code&gt;skimage.measure.marching_cubes&lt;/code&gt;. For unit correct output, ensure correct &lt;code&gt;spacing&lt;/code&gt; was passed to &lt;code&gt;skimage.measure.marching_cubes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbf3987c906c4749370570ac253828fd27d0af2" translate="yes" xml:space="preserve">
          <source>The array containing the connected components of interest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabec0fd2cf03997857fa3838b3a630f037aa6cf" translate="yes" xml:space="preserve">
          <source>The array containing the connected components of interest. If the array type is int, it is assumed that it contains already-labeled objects. The ints must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eef8404241bb7652fab6d7dc540dea480ebf6b0" translate="yes" xml:space="preserve">
          <source>The array of coordinates to be extracted. This is useful when you want to recompute only a subset of features. In this case &lt;code&gt;feature_type&lt;/code&gt; needs to be an array containing the type of each feature, as returned by &lt;a href=&quot;#skimage.feature.haar_like_feature_coord&quot;&gt;&lt;code&gt;haar_like_feature_coord()&lt;/code&gt;&lt;/a&gt;. By default, all coordinates are computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c1f7ce7c72a8e9b46f3ec9b22ff0d42ec92c08" translate="yes" xml:space="preserve">
          <source>The array of labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270de5864c531eb23f970a108f92b2a5c8a39a24" translate="yes" xml:space="preserve">
          <source>The array of the Determinant of Hessians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3d59455a3edc624780651df50a32cc698b9407" translate="yes" xml:space="preserve">
          <source>The array to decide the importance of each pixel. The higher the value corresponding to a pixel, the more the algorithm will try to keep it in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21a52f9e99e3e82c4e262564bc8a1e80ccccc97" translate="yes" xml:space="preserve">
          <source>The array to store the result of the morphology. If None is passed, a new array will be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c07e29b492f8a17ea9d5a9468216b4b45812c70" translate="yes" xml:space="preserve">
          <source>The array to store the result of the morphology. If None, is passed, a new array will be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d861a0d43e8e6d9dcf4a5db31df8dce92ddf659" translate="yes" xml:space="preserve">
          <source>The authors advocate to convert the image to Lab color space prior to segmentation, though this is not strictly necessary. For this to work, the image must be given in RGB format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca2557d491e0dad380073e1b4e2d8849f9c5408" translate="yes" xml:space="preserve">
          <source>The axes to draw on. If not specified, new axes are created and drawn on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef6f9835be38e97cea424ad9b60289753bec2e2" translate="yes" xml:space="preserve">
          <source>The axis along which the path must always move forward (default -1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f4cb16df8166b16f689cc3f6a27ceb034ca2a8" translate="yes" xml:space="preserve">
          <source>The axis currently being calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790ca8320e394e293b572f562ea1ce4580ce7f61" translate="yes" xml:space="preserve">
          <source>The bandwidth captured by the filter. For fixed bandwidth, &lt;code&gt;sigma_x&lt;/code&gt; and &lt;code&gt;sigma_y&lt;/code&gt; will decrease with increasing frequency. This value is ignored if &lt;code&gt;sigma_x&lt;/code&gt; and &lt;code&gt;sigma_y&lt;/code&gt; are set by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8b416e565c5df099a51a8b9b46d1cd7416b5a8" translate="yes" xml:space="preserve">
          <source>The base Plugin class displays the filtered image directly on the viewer. OverlayPlugin will instead overlay an image with a transparent colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f81bbe7fbcf58f550177ec2840075ed14c06857" translate="yes" xml:space="preserve">
          <source>The binary edge map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b7c41f1118dffd5af5e6ac48804462596472e7" translate="yes" xml:space="preserve">
          <source>The black top hat of an image is defined as its morphological closing minus the original image. This operation returns the dark spots of the image that are smaller than the structuring element. Note that dark spots in the original image are bright spots after the black top hat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b490959719f18777a59be30a0a44144db16a99" translate="yes" xml:space="preserve">
          <source>The blue component of the pixel (0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11a39d92a00ec956589929288f08191e997b0c9" translate="yes" xml:space="preserve">
          <source>The center coordinates (cr, cc) can be calculated from the raw moments as: {&lt;code&gt;M[1, 0] / M[0, 0]&lt;/code&gt;, &lt;code&gt;M[0, 1] / M[0, 0]&lt;/code&gt;}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beee890747b5d09fb34fa8af7d12398a29c9183d" translate="yes" xml:space="preserve">
          <source>The choice of the elevation map is critical for good segmentation. Here, the amplitude of the gradient provides a good elevation map. We use the Sobel operator for computing the amplitude of the gradient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a6136f8f3ca568df0be43d52156fc6c26ab7ed" translate="yes" xml:space="preserve">
          <source>The color images in &lt;code&gt;skimage&lt;/code&gt; and OpenCV have 3 dimensions: width, height and color. RGB and BGR use the same color space, except the order of colors is reversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f7985b85a261339b3402dfee327e2220091b6a" translate="yes" xml:space="preserve">
          <source>The color space of the image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1c0ddb17f127d1b9fa06a66ae60a0df56fbb98" translate="yes" xml:space="preserve">
          <source>The color space of the image data. By default this setting is inferred from the data shape and the value of colormap. For CFA images, DNG tags must be specified in extratags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f72713431c67f596e394332342fbba7137c2fec" translate="yes" xml:space="preserve">
          <source>The color space to convert from. Can be specified in lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488cb41e285b9c7f1c5c069b5060f962f67e5315" translate="yes" xml:space="preserve">
          <source>The color space to convert to. Can be specified in lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b3fe84470c5746108a51239092e088e1a5698c" translate="yes" xml:space="preserve">
          <source>The complete path to the image file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4f746051f480ac45410ef18b27cc3fd390728a" translate="yes" xml:space="preserve">
          <source>The computing time depends only weakly on the patch size, thanks to the computation of the integral of patches distances for a given shift, that reduces the number of operations &lt;a href=&quot;#rc9b3919da938-1&quot; id=&quot;id28&quot;&gt;[1]&lt;/a&gt;. Therefore, this algorithm executes faster than the classic algorith (&lt;code&gt;fast_mode=False&lt;/code&gt;), at the expense of using twice as much memory. This implementation has been proven to be more efficient compared to other alternatives, see e.g. &lt;a href=&quot;#rc9b3919da938-3&quot; id=&quot;id29&quot;&gt;[3]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb62b8138b90c733340d80497ed8020ba3acd36" translate="yes" xml:space="preserve">
          <source>The connectivity between pixels in &lt;code&gt;label_image&lt;/code&gt;. For a 2D image, a connectivity of 1 corresponds to immediate neighbors up, down, left, and right, while a connectivity of 2 also includes diagonal neighbors. See &lt;code&gt;scipy.ndimage.generate_binary_structure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ed1d56175d8709112d13813bd547e8c78dcd8a" translate="yes" xml:space="preserve">
          <source>The connectivity defining the neighborhood of a pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a889eedc34d022870e02307ad42bb556527c2e" translate="yes" xml:space="preserve">
          <source>The constant multiplier in exponential&amp;rsquo;s power of sigmoid function. Default value is 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236ff08e068dc026a6a0de44b220e1f100639c50" translate="yes" xml:space="preserve">
          <source>The constant multiplier. Default value is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ce101320e91c641826e127faa0b53594e09c77" translate="yes" xml:space="preserve">
          <source>The contrast determination method. Right now the only available option is &amp;ldquo;linear&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f25edbba939ba159158ab2d836c95fd6df3da3" translate="yes" xml:space="preserve">
          <source>The converted image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d98e6a8927556bd4e4e0e113aefae1442288d8" translate="yes" xml:space="preserve">
          <source>The convex hull is the set of pixels included in the smallest convex polygon that surround all white pixels in the input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c917154a8f2de043b43cf12506721bac1a2698" translate="yes" xml:space="preserve">
          <source>The coordinates of all pixels in the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311ddc2786d7f8675b65a0d4c52eae9e9d4abd27" translate="yes" xml:space="preserve">
          <source>The corner measure is calculated as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9fc26df768ef01150236b39f6c8c81e9c65e8e" translate="yes" xml:space="preserve">
          <source>The corresponding type for each feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6b30ea9223a60d16eab0989b06b8ff6a3e88da" translate="yes" xml:space="preserve">
          <source>The cost of a path is calculated simply as the sum of the values of the &lt;code&gt;costs&lt;/code&gt; array at each point on the path. The class MCP_Geometric, on the other hand, accounts for the fact that diagonal vs. axial moves are of different lengths, and weights the path cost accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957c945fbacf693a3105c139c576e688e10cc7bc" translate="yes" xml:space="preserve">
          <source>The cropped array. If &lt;code&gt;copy=False&lt;/code&gt; (default), this is a sliced view of the input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792db18a9c756e88cffe0ded3b0b086df0427f3e" translate="yes" xml:space="preserve">
          <source>The cropped image with the seams removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e105ad0af475b566d9796a48162fb1b02a7efd" translate="yes" xml:space="preserve">
          <source>The cumulative cost at &lt;code&gt;pos1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934af6b5ba8df3fc8c87c29fb4e3c2f5e53ac22b" translate="yes" xml:space="preserve">
          <source>The cumulative costs at &lt;code&gt;pos2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f19a3f2e3356fa02581751949cf361ab686192e" translate="yes" xml:space="preserve">
          <source>The current behavior is not ideal: It saves the image displayed on screen, so all images will be converted to RGB, and the image size is not preserved (resizing the viewer window will alter the size of the saved image).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512554772eca4f995bf0ed54e9ab2d48b3c1d3d0" translate="yes" xml:space="preserve">
          <source>The current implementation makes use of &lt;code&gt;tifffile&lt;/code&gt; for Tiff files and PIL otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1443f95d0627aa46d306e4d190199b99ad0a1f" translate="yes" xml:space="preserve">
          <source>The current implementation returns one more than the maximum &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4629cf6097e55ffccb1eed21fd770ebae9f4d9a" translate="yes" xml:space="preserve">
          <source>The data describing the histogram and the selected region. The dictionary contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e7584dd2ebd5bb761267855f08a03923fd52f0" translate="yes" xml:space="preserve">
          <source>The data range of the input image (distance between minimum and maximum possible values). By default, this is estimated from the image data-type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c7c74a8bb6346f0292bb6320664ce61072875e" translate="yes" xml:space="preserve">
          <source>The data shape and dtype of all files must match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabfc67bb3d81ca0e4072279d518c4502c669fc1" translate="yes" xml:space="preserve">
          <source>The data type of the structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9616d934dc70b4fa51550b3706b59bca3424d570" translate="yes" xml:space="preserve">
          <source>The deconvolved image (the posterior mean).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efacbef50772ed287e290b8e152a35fdfb867106" translate="yes" xml:space="preserve">
          <source>The deconvolved image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3a2d9f4a585f45a9463409b0cd0159a677d80d" translate="yes" xml:space="preserve">
          <source>The defaults are: dict(move=&amp;rsquo; &amp;lsquo;, clear=&amp;rsquo;escape&amp;rsquo;, square=&amp;rsquo;shift&amp;rsquo;, center=&amp;rsquo;ctrl&amp;rsquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4e280ff8ceb5188a5805988064a5eac62861db" translate="yes" xml:space="preserve">
          <source>The descriptor of feature to visualize. If not provided, the descriptor with 0 value will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930970347d48a451ee601e0fb938c6a07df0aa40" translate="yes" xml:space="preserve">
          <source>The desired data type of the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba5d20e13e5e04877d6a98c9146772735b657fd" translate="yes" xml:space="preserve">
          <source>The desired grid shape for the montage (tiles_y, tiles_x). The default aspect ratio is square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6fc2379a519763215f2b8e066a0afa9d7f470b" translate="yes" xml:space="preserve">
          <source>The desired grid shape for the montage &lt;code&gt;(ntiles_row, ntiles_column)&lt;/code&gt;. The default aspect ratio is square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b522149bd5983e9d6f0321fa41a392799de967" translate="yes" xml:space="preserve">
          <source>The desired image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c13afd698e6ef9574d7e42ab19a52620737e6f" translate="yes" xml:space="preserve">
          <source>The desired intensity range of the input and output, &lt;code&gt;in_range&lt;/code&gt; and &lt;code&gt;out_range&lt;/code&gt; respectively, are used to stretch or shrink the intensity range of the input image. See examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff0a306904ba83fb1befbb69c6faef1f3487eb7" translate="yes" xml:space="preserve">
          <source>The desired number of markers, or an array marking the basins with the values to be assigned in the label matrix. Zero means not a marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286029c158c5edfd75759fcb9df7b6293558eeef" translate="yes" xml:space="preserve">
          <source>The desired number of nonzero points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af1bf932f973fa1235cd010ba7c5f8052c99d37" translate="yes" xml:space="preserve">
          <source>The destination point is included in the profile, in contrast to standard numpy indexing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7d3e756539f46baf13594cfafc76a656b8568d" translate="yes" xml:space="preserve">
          <source>The diameter of a circle with the same area as the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e47e3b8299c2637c0fc098a3226f67cdb0a07a" translate="yes" xml:space="preserve">
          <source>The dict of keyword arguments passed to the &lt;code&gt;weight_func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e75c8ffddfbb108638373856442dd146598f81" translate="yes" xml:space="preserve">
          <source>The different color bands/channels are stored in the third dimension, such that a gray-image is MxN, an RGB-image MxNx3 and an RGBA-image MxNx4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f330369a1fcd235ce7483bef15e4b7a8031aebd" translate="yes" xml:space="preserve">
          <source>The different steps of the algorithm are as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33adb942dd16a4de04a79314c4e0e3d2793df73a" translate="yes" xml:space="preserve">
          <source>The diffusion equation is solved by minimizing x.T L x for each phase, where L is the Laplacian of the weighted graph of the image, and x is the probability that a marker of the given phase arrives first at a pixel by diffusion (x=1 on markers of the phase, x=0 on the other markers, and the other coefficients are looked for). Each pixel is attributed the label for which it has a maximal value of x. The Laplacian L of the image is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b472a429a1d1dd1150886862752ecf9a0fc96d" translate="yes" xml:space="preserve">
          <source>The directory where the memory-mapped file will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4094e83908382f9575f217ee9da25b97aee9bbf0" translate="yes" xml:space="preserve">
          <source>The distance between &lt;code&gt;lab1&lt;/code&gt; and &lt;code&gt;lab2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af53764c43c072f4e393a7c8e5fc84e0d7a136d5" translate="yes" xml:space="preserve">
          <source>The distance transform to the background is computed, as well as the cornerness of the pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a63f8a28f8875e49120ae0f3851d1a4fcd2b3c" translate="yes" xml:space="preserve">
          <source>The eigenvalues of the Hessian matrix, in decreasing order. The eigenvalues are the leading dimension. That is, &lt;code&gt;eigs[i, j, k]&lt;/code&gt; contains the ith-largest eigenvalue at position (j, k).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8179edb013ccb76f78d57abac91f4828b0f80f86" translate="yes" xml:space="preserve">
          <source>The ellipse equation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5206694d1710ef85b9623028cc224875a856918" translate="yes" xml:space="preserve">
          <source>The end point of the scan line. The destination point is &lt;em&gt;included&lt;/em&gt; in the profile, in constrast to standard numpy indexing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f5f4e460881fe4546e97845ae78933a19d1854" translate="yes" xml:space="preserve">
          <source>The endianness of the data in the file. By default this is the system&amp;rsquo;s native byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a1f3623ac92adc209a9b0112bfba1b8cfb265e" translate="yes" xml:space="preserve">
          <source>The entropy is computed using base 2 logarithm i.e. the filter returns the minimum number of bits needed to encode the local greylevel distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbb216d0211319d8322117cb5a59c4a07601a72" translate="yes" xml:space="preserve">
          <source>The essential matrix is only defined for a pair of moving images capturing a non-planar scene. In the case of pure rotation or planar scenes, the homography describes the geometric relation between two images (&lt;code&gt;ProjectiveTransform&lt;/code&gt;). If the intrinsic calibration of the images is unknown, the fundamental matrix describes the projective relation between the two images (&lt;code&gt;FundamentalMatrixTransform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec758ea3e52cc0b3780a760f871f7e111951ba9" translate="yes" xml:space="preserve">
          <source>The essential matrix relates corresponding points between a pair of calibrated images. The matrix transforms normalized, homogeneous image points in one image to epipolar lines in the other image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5af36237cbc2c4ddc2e238390666de9163e99dc" translate="yes" xml:space="preserve">
          <source>The estimated image is design as the posterior mean of a probability law (from a Bayesian analysis). The mean is defined as a sum over all the possible images weighted by their respective probability. Given the size of the problem, the exact sum is not tractable. This algorithm use of MCMC to draw image under the posterior law. The practical idea is to only draw highly probable images since they have the biggest contribution to the mean. At the opposite, the less probable images are drawn less often since their contribution is low. Finally the empirical mean of these samples give us an estimation of the mean, and an exact computation with an infinite sample set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc7f7f371314bcd8365efb76b9a6a88ec052038" translate="yes" xml:space="preserve">
          <source>The estimator is based on a least squares minimization. The optimal solution is computed directly, no iterations are required. This leads to a simple, stable and robust fitting method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf77ae642f3c5e8f338249e5888c469d38d7fa7" translate="yes" xml:space="preserve">
          <source>The extent (size) of the drawn rectangle. E.g., &lt;code&gt;([num_planes,] num_rows, num_cols)&lt;/code&gt;. Either &lt;code&gt;end&lt;/code&gt; or &lt;code&gt;extent&lt;/code&gt; must be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd342281faf7db50375738a941bba4c9a87ece74" translate="yes" xml:space="preserve">
          <source>The extent of the swirl in pixels. The effect dies out rapidly beyond &lt;code&gt;radius&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e42bc3125ca6498180589c89fe820b7a326d7a4" translate="yes" xml:space="preserve">
          <source>The faces were randomly selected from the LFW dataset and the non-faces were extracted from the background of the same dataset. The cropped ROIs have been resized to a 25 x 25 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d2969b116915e6f7aca6dccf7d4621930bc96e" translate="yes" xml:space="preserve">
          <source>The features are calculated similarly to local binary patterns (LBPs), (See &lt;a href=&quot;#skimage.feature.local_binary_pattern&quot;&gt;&lt;code&gt;local_binary_pattern()&lt;/code&gt;&lt;/a&gt;) except that summed blocks are used instead of individual pixel values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0d0b2188bd22e9ef9b33da03c98de1200735a8" translate="yes" xml:space="preserve">
          <source>The filtered image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad030bc855ece1d1eeca529a4a69f343aaa0a28" translate="yes" xml:space="preserve">
          <source>The following algorithms are used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6d71264d5e8771834ac89480d98da8cb227c9f" translate="yes" xml:space="preserve">
          <source>The following image warps are all equal but differ substantially in execution time. The image is shifted to the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d46de201b5ba75c79819d47e38676c126a250d3" translate="yes" xml:space="preserve">
          <source>The following instruction effectively reverses the order of the colors, leaving the rows and columns unaffected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11178c2a3009662c7269e130b4b776ad7ca2e11f" translate="yes" xml:space="preserve">
          <source>The following plug-ins are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9db292e4f2c66a41f5a17a07f9102931322e71" translate="yes" xml:space="preserve">
          <source>The following properties can be accessed as attributes or keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7901b4752095c3c78db83217c3c9d8b4e343d9f" translate="yes" xml:space="preserve">
          <source>The following properties can be calculated from raw image moments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0c5a82cdaad66f9fcf41b06c144c6344333666" translate="yes" xml:space="preserve">
          <source>The following utility functions in the main package are available to developers and users:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19919126bc9aa95601ee611b1e35fa247cb78733" translate="yes" xml:space="preserve">
          <source>The foreground (value of 1) points are ordered by the distance transform, then the cornerness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d9e1892aef5d19c8c5a506448b070196bb76e0" translate="yes" xml:space="preserve">
          <source>The forward map can be extremely big for some inputs, since its length is given by the maximum of the label field. However, in most situations, &lt;code&gt;label_field.max()&lt;/code&gt; is much smaller than &lt;code&gt;label_field.size&lt;/code&gt;, and in these cases the forward map is guaranteed to be smaller than either the input or output images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52800e8ea9f2b8eafde56fa09a07aae6d172b0f6" translate="yes" xml:space="preserve">
          <source>The full SSIM image. This is only returned if &lt;code&gt;full&lt;/code&gt; is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c0e70acac89c976c18fc7e3eb4eda857ee6241" translate="yes" xml:space="preserve">
          <source>The full dataset is available at &lt;a href=&quot;#r9c6d6b06eb8d-2&quot; id=&quot;id1&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378caff365f740259fd248709b52258f4e5c886a" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;../api/skimage.exposure#skimage.exposure.equalize_hist&quot;&gt;&lt;code&gt;equalize_hist()&lt;/code&gt;&lt;/a&gt; maps the cumulative distribution function (cdf) of pixel values onto a linear cdf, ensuring that all parts of the value range are equally represented in the image. As a result, details are enhanced in large regions with poor contrast. As a further refinement, histogram equalization can be performed in subregions of the image with &lt;a href=&quot;../api/skimage.exposure#skimage.exposure.equalize_adapthist&quot;&gt;&lt;code&gt;equalize_adapthist()&lt;/code&gt;&lt;/a&gt;, in order to correct for exposure gradients across the image. See the example &lt;a href=&quot;http://scikit-image.org/docs/0.14.x/auto_examples/color_exposure/plot_equalize.html#sphx-glr-auto-examples-color-exposure-plot-equalize-py&quot;&gt;Histogram Equalization&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45241c8eb77223790d8e1a587af5ba23391607ff" translate="yes" xml:space="preserve">
          <source>The function to compute the new weights of the nodes adjacent to the merged node. This is directly supplied as the argument &lt;code&gt;weight_func&lt;/code&gt; to &lt;code&gt;merge_nodes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8086292aecbedb82d04e4ed00790758a92284def" translate="yes" xml:space="preserve">
          <source>The function will generate a copy of &lt;code&gt;ar&lt;/code&gt; if it is not C-contiguous, which will negatively affect performance for large input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1822bc1609ca41d623f1aeb580dc2ce96c6eb5e5" translate="yes" xml:space="preserve">
          <source>The functional model of the circle is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a217d52fc532a9ca028b6c246bffe736438acde" translate="yes" xml:space="preserve">
          <source>The functional model of the ellipse is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb8f01d8b4262b47bb32bf3c91696209a873652" translate="yes" xml:space="preserve">
          <source>The fundamental matrix is only defined for a pair of moving images. In the case of pure rotation or planar scenes, the homography describes the geometric relation between two images (&lt;code&gt;ProjectiveTransform&lt;/code&gt;). If the intrinsic calibration of the images is known, the essential matrix describes the metric relation between the two images (&lt;code&gt;EssentialMatrixTransform&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e2b8268406efdc55dc79d64c49a5163a2d0c5" translate="yes" xml:space="preserve">
          <source>The fundamental matrix relates corresponding points between a pair of uncalibrated images. The matrix transforms homogeneous image points in one image to epipolar lines in the other image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9387d027866878850738038d52d78f054562a6e8" translate="yes" xml:space="preserve">
          <source>The generated mesh guarantees coherent orientation as of version 0.12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6c7ffd4cc0cb5ef96ba1e4a9f6a2ba3701cbab" translate="yes" xml:space="preserve">
          <source>The gradient of the structural similarity index between X and Y &lt;a href=&quot;#rccea9a164d3e-2&quot; id=&quot;id37&quot;&gt;[2]&lt;/a&gt;. This is only returned if &lt;code&gt;gradient&lt;/code&gt; is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666293464b99e3916153c395b6611e3ba214acba" translate="yes" xml:space="preserve">
          <source>The green component of the pixel (0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7e10af0644bf19573bac01d3adb83e0b1dc5ec" translate="yes" xml:space="preserve">
          <source>The grey-level co-occurrence histogram. The value &lt;code&gt;P[i,j,d,theta]&lt;/code&gt; is the number of times that grey-level &lt;code&gt;j&lt;/code&gt; occurs at a distance &lt;code&gt;d&lt;/code&gt; and at an angle &lt;code&gt;theta&lt;/code&gt; from grey-level &lt;code&gt;i&lt;/code&gt;. If &lt;code&gt;normed&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the output is of type uint32, otherwise it is float64. The dimensions are: levels x levels x number of distances x number of angles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825599259d65768ca125eda4ee725383654db104" translate="yes" xml:space="preserve">
          <source>The height of the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f89b66b27439feb607543cae6644682a6ffb7e" translate="yes" xml:space="preserve">
          <source>The height of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2601bf7aa1c04dd805358379367590cc47c434d6" translate="yes" xml:space="preserve">
          <source>The height or width of the slanted sides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f8563a6fe81210bb4f1636261b38666bec2eb4" translate="yes" xml:space="preserve">
          <source>The histogram is computed on the flattened image: for color images, the function should be used separately on each channel to obtain a histogram for each color channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cc85a549c5eb5eaf6fc3209068d31c7cbb9537" translate="yes" xml:space="preserve">
          <source>The histogram of the input &lt;code&gt;image&lt;/code&gt; is computed and smoothed until there are only two maxima. Then the minimum in between is the threshold value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c419fb9ffbdeb5741d8bf143194b1dec3e287e" translate="yes" xml:space="preserve">
          <source>The id of the new node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247ec8c326b8e7f310a9d64081173d9992da4a2a" translate="yes" xml:space="preserve">
          <source>The image format of the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbea8aaff1f71b16349b3fbf02ebd7b8dc4d0dd" translate="yes" xml:space="preserve">
          <source>The image in CIE-LAB format, in a 3- or 4-D array of shape &lt;code&gt;(.., ..,[ ..,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a9e7d900f33e82133aa5f4e9ce9c32a6d98546" translate="yes" xml:space="preserve">
          <source>The image in HED format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e007b8348c77c17974b6c467dd5daeac25003349" translate="yes" xml:space="preserve">
          <source>The image in HSV format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8494fa19aaa1bb8bfe6b6c90d3c55fea2cf9889c" translate="yes" xml:space="preserve">
          <source>The image in LAB format, with same shape as input &lt;code&gt;lch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cfbafd95ead8e57abe48cfa3e079b1109c78a5" translate="yes" xml:space="preserve">
          <source>The image in LCH format, in a N-D array with same shape as input &lt;code&gt;lab&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e474deeb12af8b558d58f23ed5e1098acd3643" translate="yes" xml:space="preserve">
          <source>The image in Lab format, in a 3- or 4-D array of shape &lt;code&gt;(.., ..,[ ..,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcb70cd8454136969b1fc025071d23a85ce76a9" translate="yes" xml:space="preserve">
          <source>The image in Lab format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a679ad0af95b9a83c7c402ef15adab775c2f8ec" translate="yes" xml:space="preserve">
          <source>The image in RGB CIE format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d95c4021bfebaed764d7d792961934ccbea0dc" translate="yes" xml:space="preserve">
          <source>The image in RGB format, in a 3- or 4-D array of shape &lt;code&gt;(.., ..,[ ..,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a068c92b8b3b2d8ca45a9bc711da987df6bc2e15" translate="yes" xml:space="preserve">
          <source>The image in RGB format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabbf4f4d72e513d06e88783420f48dae08a5288" translate="yes" xml:space="preserve">
          <source>The image in RGB format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77a8d3f78e4476e57dd055a2fc5bd2bd147ce26" translate="yes" xml:space="preserve">
          <source>The image in RGB format, in a 3-D or 4-D array of shape &lt;code&gt;(.., ..,[ ..,] 3)&lt;/code&gt;, or in RGBA format with shape &lt;code&gt;(.., ..,[ ..,] 4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd429071e2019f38775cd20cf10ed015c7fa673" translate="yes" xml:space="preserve">
          <source>The image in RGB, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b2291090a165d463c988799d91234626ff7685" translate="yes" xml:space="preserve">
          <source>The image in XYZ format, in a 3- or 4-D array of shape &lt;code&gt;(.., ..,[ ..,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2956d692bebca470e144bbb6651e1fb5b9018d73" translate="yes" xml:space="preserve">
          <source>The image in XYZ format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b46ea9fda784b20e1ed061f50f12342df14d4b" translate="yes" xml:space="preserve">
          <source>The image in YCbCr format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b8b2acda330283b32bf737d05b5d5857cbe569" translate="yes" xml:space="preserve">
          <source>The image in YDbDr format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c038998f22a32813f34c73102f28e85a80bfc587" translate="yes" xml:space="preserve">
          <source>The image in YIQ format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e5d864a9b9492842386fb1fa111e6ee0ff288a" translate="yes" xml:space="preserve">
          <source>The image in YPbPr format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ca68e46499f95e32b04a1273c0ca532aa7bf57" translate="yes" xml:space="preserve">
          <source>The image in YUV format, in a 3- or 4-D array of shape &lt;code&gt;(M, N, [P,] 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269b6f0bbd74d03b12c998feea6bd38652840e76" translate="yes" xml:space="preserve">
          <source>The image in lab format, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc55997883619780bb6d8db73c121b343a70af0a" translate="yes" xml:space="preserve">
          <source>The image in stain color space, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d8634b7be7dda68bb501ece7ebdb25ac368245" translate="yes" xml:space="preserve">
          <source>The image in the HED color space, in a 3-D array of shape &lt;code&gt;(.., .., 3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b5f9d4adedbe2efa4363575207b5d161e9efd8" translate="yes" xml:space="preserve">
          <source>The image is converted back to RGB space and returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81c358f5041efd590a2f4f5fbf954bc2de78974" translate="yes" xml:space="preserve">
          <source>The image is converted to HSV color space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054242c4c2e95f8aaf8223a72b3bd249e824f826" translate="yes" xml:space="preserve">
          <source>The image is padded using the &lt;code&gt;reflect&lt;/code&gt; mode of &lt;code&gt;skimage.util.pad&lt;/code&gt; before denoising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4d38859590de08b894f08cbc295dd93eecae3c" translate="yes" xml:space="preserve">
          <source>The image is padded with &lt;code&gt;cval&lt;/code&gt; if it is not perfectly divisible by the integer factors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00598adc37a7be0d14c2628fc31d6107456da5a" translate="yes" xml:space="preserve">
          <source>The image is populated with random shapes with random sizes, random locations, and random colors, with or without overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f85e47b46aa74a0a1574f046c269f209c3ad11" translate="yes" xml:space="preserve">
          <source>The image is rescaled to be in [0, 1] prior to processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42050ea6936908173a5b757787e8dc9e45f1c3c" translate="yes" xml:space="preserve">
          <source>The image of the shape to be skeletonized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c9d31dd74ebf78d414277ec06b26e141ef4c52" translate="yes" xml:space="preserve">
          <source>The image over which to compute Hessian Determinant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b305badfa935ddd21506d31e3a974b95f233426" translate="yes" xml:space="preserve">
          <source>The image to be thinned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dddc853e5b2040d31914bd6e13ae5218aaf787" translate="yes" xml:space="preserve">
          <source>The image to convert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86fb1ae61766f1aab3bc57b15570490615f8744" translate="yes" xml:space="preserve">
          <source>The image under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b64389074ded23ac3d93304dd509cb283c1cb3a" translate="yes" xml:space="preserve">
          <source>The image was captured by NASA and &lt;a href=&quot;http://www.nasa.gov/audience/formedia/features/MP_Photo_Guidelines.html&quot;&gt;may be freely used in the public domain&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890ce25e5c84862f770567a628ac2859ebe16d62" translate="yes" xml:space="preserve">
          <source>The image was captured by SpaceX and &lt;a href=&quot;http://arstechnica.com/tech-policy/2015/03/elon-musk-puts-spacex-photos-into-the-public-domain/&quot;&gt;released in the public domain&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25efcc2176ff74888c53379c9ff140952558081c" translate="yes" xml:space="preserve">
          <source>The image, either grayscale (2D array) or multichannel (3D array, where the final axis contains the channel information).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8952eafadbd32c1f014a418cab417306c4ae0611" translate="yes" xml:space="preserve">
          <source>The images included here are down-sampled versions of the default exposure images in the benchmark. The images are down-sampled by a factor of 4 using the function &lt;code&gt;skimage.transform.downscale_local_mean&lt;/code&gt;. The calibration data in the following and the included ground-truth disparity map are valid for the down-sampled images:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d827d6e4d595117d31346f228818ab01c6416dd" translate="yes" xml:space="preserve">
          <source>The images to be concatenated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9327919b912fdff3e10ca159202ccb6a9551b7" translate="yes" xml:space="preserve">
          <source>The implementation follows Tola et al. &lt;a href=&quot;#r3f18658b3c6d-1&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt; but deviate on the following points:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca5448373ef72585becbcbb3e77f4755647a8bb" translate="yes" xml:space="preserve">
          <source>The impulse response (input image&amp;rsquo;s space) or the transfer function (Fourier space). Both are accepted. The transfer function is automatically recognized as being complex (&lt;code&gt;np.iscomplexobj(psf)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7326fad0b524f353217a8bf11e2b225b752a4364" translate="yes" xml:space="preserve">
          <source>The index of of the first neighbour in the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585ef91a22b85f205b2c897420edbe7679d8b31b" translate="yes" xml:space="preserve">
          <source>The index of of the second neighbour in the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405a408cc60d7e8778be5cf349d87bc267790510" translate="yes" xml:space="preserve">
          <source>The input array with small connected components removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e94b204a2f47c2b8dbf4ec4faae474e7e48f6f0" translate="yes" xml:space="preserve">
          <source>The input array with small holes within connected components removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9eebd6f3c2dccb825ca1eb5d3b6fff39eb990c" translate="yes" xml:space="preserve">
          <source>The input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3ee068fae919759c056cbe024e5d2c91f2a4e1" translate="yes" xml:space="preserve">
          <source>The input degraded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fda6f4633fd6e4f74c6d383bc0a9afd0e94965" translate="yes" xml:space="preserve">
          <source>The input image for which the maxima are to be calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebdeacdc1dc2f3903bb439c04cc5623ad3cfb62" translate="yes" xml:space="preserve">
          <source>The input image for which the minima are to be calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005c72cd62bc10f275d99bad56669ce1357bd560" translate="yes" xml:space="preserve">
          <source>The input image is converted to a &lt;code&gt;double&lt;/code&gt; image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f995d326fdcccd292952aee7c5283712228f44d4" translate="yes" xml:space="preserve">
          <source>The input image must be grayscale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f091ee15dc8642d5cced78ad70087d0efa66d92c" translate="yes" xml:space="preserve">
          <source>The input image should contain integers in [0, &lt;code&gt;levels&lt;/code&gt;-1], where levels indicate the number of grey-levels counted (typically 256 for an 8-bit image). This argument is required for 16-bit images or higher and is typically the maximum of the image. As the output matrix is at least &lt;code&gt;levels&lt;/code&gt; x &lt;code&gt;levels&lt;/code&gt;, it might be preferable to use binning of the input image rather than large values for &lt;code&gt;levels&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca199651f111f210dbd3879680bcfd8682e1422" translate="yes" xml:space="preserve">
          <source>The input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7865233b4011e08a8d6ee18e5d3e30f815cc7c94" translate="yes" xml:space="preserve">
          <source>The input label field with labels mapped to {offset, &amp;hellip;, number_of_labels + offset - 1}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2014f5512edbcc24c3cf14ce3f4861d5a017f001" translate="yes" xml:space="preserve">
          <source>The integral image contains the sum of all elements above and to the left of it, i.e.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787d165b30de46f8a870b7dae8629b1b814f6acf" translate="yes" xml:space="preserve">
          <source>The intensity profile along the scan line. The length of the profile is the ceil of the computed length of the scan line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff7addde2b895cd0392576419c56c38d00142a6" translate="yes" xml:space="preserve">
          <source>The join J of S1 and S2 is defined as the segmentation in which two voxels are in the same segment if and only if they are in the same segment in &lt;em&gt;both&lt;/em&gt; S1 and S2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9686c48f081cca1d6610a57b0b951a65608d7915" translate="yes" xml:space="preserve">
          <source>The join segmentation of s1 and s2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40df70cf051473bc12b9682ac192f12838f68293" translate="yes" xml:space="preserve">
          <source>The kernel is applied to the input image to produce separate measurements of the gradient component one orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c5d9818e37c9bc81a02981f5203b3c2ace3fa4" translate="yes" xml:space="preserve">
          <source>The keys &lt;code&gt;noise&lt;/code&gt; and &lt;code&gt;prior&lt;/code&gt; contain the chain list of noise and prior precision respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670f13106d8730b5c524db77ccd32cdc14204a2e" translate="yes" xml:space="preserve">
          <source>The kind of color image desired. &amp;lsquo;overlay&amp;rsquo; cycles over defined colors and overlays the colored labels over the original image. &amp;lsquo;avg&amp;rsquo; replaces each labeled segment with its average color, for a stained-class or pastel painting appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3067aa88057ffa41737352106b7f2bdd68e13616" translate="yes" xml:space="preserve">
          <source>The label 0 is assumed to denote the background and is never remapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8a95cdf20d66e81ac207e310f53a5400cff527" translate="yes" xml:space="preserve">
          <source>The label in the labeled input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59087e297fa02e3021067f173ec30507001fdc57" translate="yes" xml:space="preserve">
          <source>The labelled image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e50698600beb176daab5dea49019dd86e68b0f" translate="yes" xml:space="preserve">
          <source>The labelled image. This should have one dimension less than &lt;code&gt;image&lt;/code&gt;. If &lt;code&gt;image&lt;/code&gt; has dimensions &lt;code&gt;(M, N, 3)&lt;/code&gt;&lt;code&gt;labels&lt;/code&gt; should have dimensions &lt;code&gt;(M, N)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff06be3a2f92d1d48e7096fb0cf128d89cdf4f7e" translate="yes" xml:space="preserve">
          <source>The last accessed frame is cached, all other frames will have to be read from file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842ef963d13450225bf242d0bbccf01f023b3cb1" translate="yes" xml:space="preserve">
          <source>The length of the major axis of the ellipse that has the same normalized second central moments as the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c06f902fdc78870ac20fd220dd97efb2853c4b6" translate="yes" xml:space="preserve">
          <source>The length of the minor axis of the ellipse that has the same normalized second central moments as the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaaab7dd071f828415247555a703e972562fb25" translate="yes" xml:space="preserve">
          <source>The line is drawn with &lt;em&gt;lineprops&lt;/em&gt;; default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5f2c8a053713d1e4e9ea3356630cb14821e563" translate="yes" xml:space="preserve">
          <source>The line scan values across the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d0c3f95637c1593d310fb3e8d4d85257e67acc" translate="yes" xml:space="preserve">
          <source>The linear size of the kernel is n_stds (3 by default) standard deviations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417c97f1924d9f9df3a81946500068ff785d47c2" translate="yes" xml:space="preserve">
          <source>The linear size of the kernel is n_stds (3 by default) standard deviations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9107f101f5e19f23e00333a88a4853f12404e3f" translate="yes" xml:space="preserve">
          <source>The local maxima are defined as connected sets of pixels with equal grey level strictly greater than the grey level of all pixels in direct neighborhood of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3535668d06f1154acaf803360b30e556eb540d" translate="yes" xml:space="preserve">
          <source>The local maxima are defined as connected sets of pixels with equal grey level strictly greater than the grey levels of all pixels in direct neighborhood of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b542c547dbf817933e5db54db572cdd325aea33" translate="yes" xml:space="preserve">
          <source>The local minima are defined as connected sets of pixels with equal grey level strictly smaller than the grey levels of all pixels in direct neighborhood of the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1973e3fe1df84cbeb1f4d53ad2b596d35c4866a2" translate="yes" xml:space="preserve">
          <source>The logarithmic base to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b804cf4cb2c45a5a2f595be842673d8f3d65ef6e" translate="yes" xml:space="preserve">
          <source>The low contrast fraction threshold. An image is considered low- contrast when its range of brightness spans less than this fraction of its data type&amp;rsquo;s full range. &lt;a href=&quot;#re0c68370bb9d-1&quot; id=&quot;id10&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b8471430fab6e35c0204b635c8b41b91ba1995" translate="yes" xml:space="preserve">
          <source>The lower algorithm complexity makes &lt;code&gt;skimage.filters.rank.maximum&lt;/code&gt; more efficient for larger images and structuring elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d9d181e0a45d93a5cd37a25d4637e5aa4d524e" translate="yes" xml:space="preserve">
          <source>The lower algorithm complexity makes &lt;code&gt;skimage.filters.rank.minimum&lt;/code&gt; more efficient for larger images and structuring elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb852e94b5eaa262e91399babaa92a54b7bc7554" translate="yes" xml:space="preserve">
          <source>The luminance image - an array which is the same size as the input array, but with the channel dimension removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd006abfa338b76729fb0bb7115f28d7351e9bd" translate="yes" xml:space="preserve">
          <source>The main package of &lt;code&gt;skimage&lt;/code&gt; only provides a few utilities for converting between image data types; for most features, you need to import one of the following subpackages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5d0d7859d1533c879c1ccd5b2306ad5330ea87" translate="yes" xml:space="preserve">
          <source>The map from the new label space to the original space. This can be used to reconstruct the original label field from the relabeled one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f316d428a600b6e48d3fef883a76879c7ce86462" translate="yes" xml:space="preserve">
          <source>The map from the original label space to the returned label space. Can be used to re-apply the same mapping. See examples for usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d46fb15aee52b4b8912510004efa93a1ed2487c" translate="yes" xml:space="preserve">
          <source>The marching cubes algorithm is implemented as described in &lt;a href=&quot;#r1e43a330a523-1&quot; id=&quot;id31&quot;&gt;[1]&lt;/a&gt;. A simple explanation is available here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4fc7b92d0ad634facc8411a44eb430b28c4583" translate="yes" xml:space="preserve">
          <source>The marching squares algorithm is a special case of the marching cubes algorithm &lt;a href=&quot;#r8ed60f468bf9-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. A simple explanation is available here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345238352d2c57714d3a49d4f5d1c8baa7b83612" translate="yes" xml:space="preserve">
          <source>The maxima of height &amp;gt;= h. The result image is a binary image, where pixels belonging to the selected maxima take value 1, the others take value 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5136f320f3488b4fd36fdc77c9940f1f78ea46dc" translate="yes" xml:space="preserve">
          <source>The maximum (dilation) / minimum (erosion) allowed value at each pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc4c88fa583d5208ea89e1d27b3a5374aa46ba5" translate="yes" xml:space="preserve">
          <source>The maximum area, in pixels, of a contiguous hole that will be filled. Replaces &lt;code&gt;min_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ae472b09c5b5bd312d2f036a92b59989f9bc4a" translate="yes" xml:space="preserve">
          <source>The maximum dimension of each shape to fit into the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3637b8664145e7dcd54d9ca1a67f5da7fcb0b216" translate="yes" xml:space="preserve">
          <source>The maximum number of features to be returned. By default, all features are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14cac4f93349b41075a2248da25a452ee75483a" translate="yes" xml:space="preserve">
          <source>The maximum number of iterations if &lt;code&gt;threshold&lt;/code&gt; is not satisfied. 200 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778e64dcc3858ba2aa03546f1a0b4b5c0390d6f6" translate="yes" xml:space="preserve">
          <source>The maximum number of shapes to (attempt to) fit into the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567bd2ce1bcf16e38004a9eafaaef41d59c7674e" translate="yes" xml:space="preserve">
          <source>The maximum order of moments computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a71a51f51a2fdd2b69a28b2140f8372216dbc03" translate="yes" xml:space="preserve">
          <source>The maximum possible value of an edge in the RAG. This corresponds to an edge between identical regions. This is used to put self edges in the RAG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39e2968439bc537af61b941085275ce9aba0cd1" translate="yes" xml:space="preserve">
          <source>The maximum standard deviation for Gaussian Kernel used to compute Hessian matrix. Keep this high to detect larger blobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84861c4270f276b4c44cbbbda6081c6140925538" translate="yes" xml:space="preserve">
          <source>The maximum standard deviation for Gaussian Kernel. Keep this high to detect larger blobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b8160a22fe77eeb2b99b54004bfd7892f8a5e0" translate="yes" xml:space="preserve">
          <source>The mean structural similarity over the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c4e6dfc8c4aafae8345226f8b91674a55d6ee9" translate="yes" xml:space="preserve">
          <source>The mean-squared error (MSE) metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d200f932cabab2b0b22e40a3313bfe5e3486883c" translate="yes" xml:space="preserve">
          <source>The method of &lt;a href=&quot;#rc9cdb497d267-lee94&quot; id=&quot;id11&quot;&gt;[Lee94]&lt;/a&gt; uses an octree data structure to examine a 3x3x3 neighborhood of a pixel. The algorithm proceeds by iteratively sweeping over the image, and removing pixels at each iteration until the image stops changing. Each iteration consists of two steps: first, a list of candidates for removal is assembled; then pixels from this list are rechecked sequentially, to better preserve connectivity of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca85da16c820e212275147b27619577984825ec7" translate="yes" xml:space="preserve">
          <source>The method used here is that of the golden ratio introduced by T. Kohler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c70067443c7ccd9498cf269b0345bbfc2c33f7" translate="yes" xml:space="preserve">
          <source>The metric to compute the distance between two descriptors. See &lt;code&gt;scipy.spatial.distance.cdist&lt;/code&gt; for all possible types. The hamming distance should be used for binary descriptors. By default the L2-norm is used for all descriptors of dtype float or double and the Hamming distance is used for binary descriptors automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5deb5bce03a52b5aa42debe2aa4f044545007f" translate="yes" xml:space="preserve">
          <source>The minima of depth &amp;gt;= h. The result image is a binary image, where pixels belonging to the selected minima take value 1, the other pixels take value 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5f840bd394da18f34eff670949a05bee415d94" translate="yes" xml:space="preserve">
          <source>The minimal depth of all extracted minima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657a82fd7eb2e0cac604ddb2fed182d1b35c325e" translate="yes" xml:space="preserve">
          <source>The minimal height of all extracted maxima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3954dfa192006a7bc03736911314279db96b69b0" translate="yes" xml:space="preserve">
          <source>The minimum dimension of each shape to fit into the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df77925fdb3530c1c2007cf3cd94d7fa159c78ba" translate="yes" xml:space="preserve">
          <source>The minimum number of data points to fit a model to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32634842fbbb64cd233c245868e48d5b9161992" translate="yes" xml:space="preserve">
          <source>The minimum number of iterations. 30 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30af8fdc6452816f2b4f89623d33267fee5e4bf7" translate="yes" xml:space="preserve">
          <source>The minimum number of shapes to (attempt to) fit into the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184755c358b1cf9a8b2b1be389dcc801efae15a3" translate="yes" xml:space="preserve">
          <source>The minimum standard deviation for Gaussian Kernel used to compute Hessian matrix. Keep this low to detect smaller blobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4903acb9355e1734ba1783087b693ae2661b4d30" translate="yes" xml:space="preserve">
          <source>The minimum standard deviation for Gaussian Kernel. Keep this low to detect smaller blobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16eec08be9d161baf407477eec751573427d493" translate="yes" xml:space="preserve">
          <source>The mode for finding boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134216d8d3ba7cc1c0e8f14652abb91df6eb71e2" translate="yes" xml:space="preserve">
          <source>The mode is the value that appears most often in the local histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fb3638e7e1638b791f0c41dacfaa4b16b6139e" translate="yes" xml:space="preserve">
          <source>The mode parameter determines how the array borders are handled, where cval is the value when mode is equal to &amp;lsquo;constant&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615dcf877c334c2197e0cf182d7903de878752d5" translate="yes" xml:space="preserve">
          <source>The mode parameter determines how the array borders are handled, where cval is the value when mode is equal to &amp;lsquo;constant&amp;rsquo;. Default is &amp;lsquo;reflect&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2a3accfd6c2e6263c98b02783933e7bb12f746" translate="yes" xml:space="preserve">
          <source>The morphological closing on an image is defined as a dilation followed by an erosion. Closing can remove small dark spots (i.e. &amp;ldquo;pepper&amp;rdquo;) and connect small bright cracks. This tends to &amp;ldquo;close&amp;rdquo; up (dark) gaps between (bright) features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a42d2838b4f9ae27e41fd121b9d8740342f841" translate="yes" xml:space="preserve">
          <source>The morphological opening on an image is defined as an erosion followed by a dilation. Opening can remove small bright spots (i.e. &amp;ldquo;salt&amp;rdquo;) and connect small dark cracks. This tends to &amp;ldquo;open&amp;rdquo; up (dark) gaps between (bright) features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63af2412509233883d762761749efd1da6cad0fe" translate="yes" xml:space="preserve">
          <source>The most important insight in the paper is that entry time onto the queue solves two problems: a pixel should be assigned to the neighbor with the largest gradient or, if there is no gradient, pixels on a plateau should be split between markers on opposite sides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a5a27a9385f3f328a074e3786647db96db96a4" translate="yes" xml:space="preserve">
          <source>The multi-dimensional filter is implemented as a sequence of one-dimensional convolution filters. The intermediate arrays are stored in the same data type as the output. Therefore, for output types with a limited precision, the results may be imprecise because intermediate results may be stored with insufficient precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac272a49cdddc89fe1807b344e232650d01f6d39" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.ini&lt;/code&gt; files must correspond. Inside the &lt;code&gt;.ini&lt;/code&gt; file, we give the plugin meta-data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550dcfbbf6063c3774b1fb242613d5e91af46a17" translate="yes" xml:space="preserve">
          <source>The name of the illuminant (the function is NOT case sensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a329f0e9076d3622ccefced5a379b5dcef95a408" translate="yes" xml:space="preserve">
          <source>The name of the shape to generate or &lt;code&gt;None&lt;/code&gt; to pick random ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf184cc2ac5950ef58bd9b5227c246a4c0e1044" translate="yes" xml:space="preserve">
          <source>The neighborhood expressed as a 2-D array of 1&amp;rsquo;s and 0&amp;rsquo;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535a487757b1cd80c6bb86e4d77d977e14c1fafe" translate="yes" xml:space="preserve">
          <source>The neighborhood expressed as a 2-D array of 1&amp;rsquo;s and 0&amp;rsquo;s. If None, a full square of size 3 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c767fae124762e28136688f6b7cf9d88762e27" translate="yes" xml:space="preserve">
          <source>The neighborhood expressed as a 2-D array of 1&amp;rsquo;s and 0&amp;rsquo;s. If None, use cross-shaped structuring element (connectivity=1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f37893c77338f261ee52c2d9b0c3bea351c38a6" translate="yes" xml:space="preserve">
          <source>The neighborhood expressed as an array of 1&amp;rsquo;s and 0&amp;rsquo;s. If None, use cross-shaped structuring element (connectivity=1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477ceffef740e0efe2cfb13f409c3c4ca6f00dcd" translate="yes" xml:space="preserve">
          <source>The neighborhood expressed as an n-D array of 1&amp;rsquo;s and 0&amp;rsquo;s. Default is the ball of radius 1 according to the maximum norm (i.e. a 3x3 square for 2D images, a 3x3x3 cube for 3D images, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488f42b2e9348f763e35d7bb7d991a0b0641ca28" translate="yes" xml:space="preserve">
          <source>The new combined node is adjacent to all the neighbors of &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt;. &lt;code&gt;weight_func&lt;/code&gt; is called to decide the weight of edges incident on the new node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b7596e4a6915b1f76c466e42503db60ab6fa62" translate="yes" xml:space="preserve">
          <source>The new labeled array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cc5b26764a3d01e56270a6267448f50fd6ffc5" translate="yes" xml:space="preserve">
          <source>The new labelled array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e72d1b1ea3a64597530eae6dd95a6e8c34e1d0e" translate="yes" xml:space="preserve">
          <source>The next step is to find markers of the background and the coins based on the extreme parts of the histogram of grey values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88218d5796ff1637feba86d28bdf2be52d0c1cae" translate="yes" xml:space="preserve">
          <source>The noise standard deviation used when computing the wavelet detail coefficient threshold(s). When None (default), the noise standard deviation is estimated via the method in &lt;a href=&quot;#r3b8ec6d23a4e-2&quot; id=&quot;id19&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a88145ef7a9e19312162d20f0e3ea20c287e9f" translate="yes" xml:space="preserve">
          <source>The non-local means algorithm is well suited for denoising images with specific textures. The principle of the algorithm is to average the value of a given pixel with values of other pixels in a limited neighbourhood, provided that the &lt;em&gt;patches&lt;/em&gt; centered on the other pixels are similar enough to the patch centered on the pixel of interest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ea02f92a30fb728315bca289e72d9b0cd9e86f" translate="yes" xml:space="preserve">
          <source>The normal direction at each vertex, as calculated from the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45780945b38ed9940f76ed738a2b4f3467b97403" translate="yes" xml:space="preserve">
          <source>The number of histogram bins. Will default to &lt;code&gt;image.max() + 1&lt;/code&gt; if None is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24cca8ca90b89c4f59093607a345e97a10afcf6" translate="yes" xml:space="preserve">
          <source>The number of intermediate values of standard deviations to consider between &lt;code&gt;min_sigma&lt;/code&gt; and &lt;code&gt;max_sigma&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e806c1430118cddf0e1689ead8b6f56015cb9d" translate="yes" xml:space="preserve">
          <source>The number of parallel threads to use during cycle spinning. If set to &lt;code&gt;None&lt;/code&gt;, the full set of available cores are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd1cbad8b9cab84758dfe3dd53635325ca46fad" translate="yes" xml:space="preserve">
          <source>The number of pixels in the right, left and bottom end of the image to be excluded from being considered for a seam. This is important as certain filters just ignore image boundaries and set them to &lt;code&gt;0&lt;/code&gt;. By default border is set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a72dfec63208ddb5db210739c8930568426ce7" translate="yes" xml:space="preserve">
          <source>The number of pixels is defined as the number of pixels which are included in the structuring element and the mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e22df389d0da199b1057f9b8802f83e17f2c26" translate="yes" xml:space="preserve">
          <source>The number of pixels is defined as the number of pixels which are included in the structuring element and the mask. Additionally pixels must have a greylevel inside the interval [g-s0, g+s1] where g is the greyvalue of the center pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4844d423b2976aa987903b5abceb4b0fa4bcd351" translate="yes" xml:space="preserve">
          <source>The number of produced segments as well as their size can only be controlled indirectly through &lt;code&gt;scale&lt;/code&gt;. Segment size within an image can vary greatly depending on local contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3666e8d13460f3fe7b46b9b1b962aa35041d7e" translate="yes" xml:space="preserve">
          <source>The number of rows and columns of the image to generate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331b55f5c759ffaba9629503995a167fdd9c24fb" translate="yes" xml:space="preserve">
          <source>The number of sample to ignore to start computation of the mean. 15 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572a16482308be0eacbb48fa1ee59ac10ec3dd63" translate="yes" xml:space="preserve">
          <source>The number of spatial dimensions of &lt;code&gt;image&lt;/code&gt;. If ambiguous, the value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e7af6c1c630fc0ede1a20dc95f42287a525e71" translate="yes" xml:space="preserve">
          <source>The number of wavelet decomposition levels to use. The default is three less than the maximum number of possible decomposition levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ac150d8ab04a0c12fe6eed33c5ef2678fb88b9" translate="yes" xml:space="preserve">
          <source>The number or N-cuts to perform before determining the optimal one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707663d23631c9e647f0939e7e3878cf4e23f1a2" translate="yes" xml:space="preserve">
          <source>The order of interpolation. The order has to be in the range 0-5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857ed5c1e103aa7f120907a62c53da72b14065f2" translate="yes" xml:space="preserve">
          <source>The order of the contours in the output list is determined by the position of the smallest &lt;code&gt;x,y&lt;/code&gt; (in lexicographical order) coordinate in the contour. This is a side-effect of how the input array is traversed, but can be relied upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8325b66c31da623b202ec9d08d0ca8f10a8e932" translate="yes" xml:space="preserve">
          <source>The order of the spline interpolation to compute image values at non-integer coordinates. 0 means nearest-neighbor interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4286908d5377687ba920581a42c36596a5bc1c" translate="yes" xml:space="preserve">
          <source>The order of the spline interpolation, default is 1. The order has to be in the range 0-5. See &lt;code&gt;skimage.transform.warp&lt;/code&gt; for detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70a8879a287469b4daa7650af5494cbc972b7dd" translate="yes" xml:space="preserve">
          <source>The orientation of corners is computed using the first order central moment i.e. the center of mass approach. The corner orientation is the angle of the vector from the corner coordinate to the intensity centroid in the local neighborhood around the corner calculated using first order central moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9447395051e8f768393b723f29f0c2ec1d5b2444" translate="yes" xml:space="preserve">
          <source>The origin is the top left corner of the original image. X and Y axis are horizontal and vertical edges respectively. The distance is the minimal algebraic distance from the origin to the detected line. The angle accuracy can be improved by decreasing the step size in the &lt;code&gt;theta&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edab0f5a41a091b42a5c3764fa666fdaebdbbbcf" translate="yes" xml:space="preserve">
          <source>The original resolution images, images with different exposure and lighting, and ground-truth depth maps can be found at the Middlebury website &lt;a href=&quot;#re12479cea6aa-2&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8ef335570ce81aa0947a557899cff3bcc84425" translate="yes" xml:space="preserve">
          <source>The output is a triangular mesh consisting of a set of unique vertices and connecting triangles. The order of these vertices and triangles in the output list is determined by the position of the smallest &lt;code&gt;x,y,z&lt;/code&gt; (in lexicographical order) coordinate in the contour. This is a side-effect of how the input array is traversed, but can be relied upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deee3106d64e454489fae571e93a4732c45889f7" translate="yes" xml:space="preserve">
          <source>The output is an array with values between -1.0 and 1.0. The value at a given position corresponds to the correlation coefficient between the image and the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea79c42710aee92b3c2fd2fc20e0bba932b0aea" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;func(x, **func_kw)&lt;/code&gt; averaged over all combinations of the specified axis shifts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5376da1f8f96959315ac7d54c1764812b7da9d" translate="yes" xml:space="preserve">
          <source>The output type of a function is determined by the function author and is documented for the benefit of the user. While this requires the user to explicitly convert the output to whichever format is needed, it ensures that no unnecessary data copies take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1becb96745a7a95c2bae39a075dbe8c28109091d" translate="yes" xml:space="preserve">
          <source>The overlay currently displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95b4ec171d1bc77f8430ea6669441f89fff631c" translate="yes" xml:space="preserve">
          <source>The p-norm to apply for &lt;code&gt;metric='minkowski'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf6b5bb2a7faf5e888bd6183f4f1bf7246a0c57" translate="yes" xml:space="preserve">
          <source>The padding function, if used, should return a rank 1 array equal in length to the vector argument with padded values replaced. It has the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336812bdfe496c0e6419e951fcae6015b50cabde" translate="yes" xml:space="preserve">
          <source>The path to the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4d6cd95ad9739baafd4cf9e356911a6cef83a4" translate="yes" xml:space="preserve">
          <source>The peak local maximum function returns the coordinates of local peaks (maxima) in an image. A maximum filter is used for finding local maxima. This operation dilates the original image. After comparison of the dilated and original image, this function returns the coordinates or a mask of the peaks where the dilated image equals the original image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d50a4dab54f12898ffef9392e7432f8bffe0570" translate="yes" xml:space="preserve">
          <source>The plugin will automatically delegate parameters to &lt;code&gt;image_filter&lt;/code&gt; based on its parameter type, i.e., &lt;code&gt;ptype&lt;/code&gt; (widgets for required arguments must be added in the order they appear in the function). The image attached to the viewer is &lt;strong&gt;automatically passed as the first argument&lt;/strong&gt; to the filter function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06c1d4782702ee554f75e5b4f45866f7d83d246" translate="yes" xml:space="preserve">
          <source>The point spread function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6bb554feb3ac29367137b8cc710188a0e20162" translate="yes" xml:space="preserve">
          <source>The positions ((x1, y1), (x2, y2)) of the line ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b89e57b04c0cc96621d4d1691b365696a2321dd" translate="yes" xml:space="preserve">
          <source>The presented code implements the HOG extraction method from &lt;a href=&quot;#ra159ccd8c91f-2&quot; id=&quot;id10&quot;&gt;[2]&lt;/a&gt; with the following changes: (I) blocks of (3, 3) cells are used ((2, 2) in the paper; (II) no smoothing within cells (Gaussian spatial window with sigma=8pix in the paper); (III) L1 block normalization is used (L2-Hys in the paper).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed4a003ca3aa70dc17a07fe00f502105b8ddfbf" translate="yes" xml:space="preserve">
          <source>The principle of total variation denoising is explained in &lt;a href=&quot;http://en.wikipedia.org/wiki/Total_variation_denoising&quot;&gt;http://en.wikipedia.org/wiki/Total_variation_denoising&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9360c8a970a83191687f4a4f80bb6ec234971fc" translate="yes" xml:space="preserve">
          <source>The principle of total variation denoising is to minimize the total variation of the image, which can be roughly described as the integral of the norm of the image gradient. Total variation denoising tends to produce &amp;ldquo;cartoon-like&amp;rdquo; images, that is, piecewise-constant images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a089c81cd2b7f0de3cce7780db32cfc64432d3fb" translate="yes" xml:space="preserve">
          <source>The property of the GLCM to compute. The default is &amp;lsquo;contrast&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d3d486c663c28a75000241f713cc0fe55a5653" translate="yes" xml:space="preserve">
          <source>The radius of each blob is approximately &lt;code&gt;sigma&lt;/code&gt;. Computation of Determinant of Hessians is independent of the standard deviation. Therefore detecting larger blobs won&amp;rsquo;t take more time. In methods line &lt;a href=&quot;#skimage.feature.blob_dog&quot;&gt;&lt;code&gt;blob_dog()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#skimage.feature.blob_log&quot;&gt;&lt;code&gt;blob_log()&lt;/code&gt;&lt;/a&gt; the computation of Gaussians for larger &lt;code&gt;sigma&lt;/code&gt; takes more time. The downside is that this method can&amp;rsquo;t be used for detecting blobs of radius less than &lt;code&gt;3px&lt;/code&gt; due to the box filters used in the approximation of Hessian Determinant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77604acb9a9b224dfccfdbcd767d14b63eca70a" translate="yes" xml:space="preserve">
          <source>The radius of each blob is approximately \(\sqrt{2}\sigma\) for a 2-D image and \(\sqrt{3}\sigma\) for a 3-D image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8d85846b6e51651985818c5badb49069cfb768" translate="yes" xml:space="preserve">
          <source>The radius of the ball-shaped structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee51e53970f992f0bd7058c1948d0b68d2e5fe1" translate="yes" xml:space="preserve">
          <source>The radius of the diamond-shaped structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d41e1220e1ddfedd38efb8e23190ad64a636b7" translate="yes" xml:space="preserve">
          <source>The radius of the disk-shaped structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c2fd4afd12de9a96dd48beb8490f16ea54596c" translate="yes" xml:space="preserve">
          <source>The radius of the octahedron-shaped structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad789c7cfb6fdffa843ba9b42ff53a05cf7e9e51" translate="yes" xml:space="preserve">
          <source>The range of a floating point image is [0.0, 1.0] or [-1.0, 1.0] when converting from unsigned or signed datatypes, respectively. If the input image has a float type, intensity values are not modified and can be outside the ranges [0.0, 1.0] or [-1.0, 1.0].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872c0fdc427e533ce060b0c5169bdde867c7ba9f" translate="yes" xml:space="preserve">
          <source>The range of sigmas used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee08a00f5bf593452703254e931adb3519d8526" translate="yes" xml:space="preserve">
          <source>The range of values to sample pixel values from. For grayscale images the format is (min, max). For multichannel - ((min, max),) if the ranges are equal across the channels, and ((min_0, max_0), &amp;hellip; (min_N, max_N)) if they differ. As the function supports generation of uint8 arrays only, the maximum range is (0, 255). If None, set to (0, 254) for each channel reserving color of intensity = 255 for background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d998dd81faea59d6e1f66ed22a367ed0ba8b7f51" translate="yes" xml:space="preserve">
          <source>The ratio between the standard deviation of Gaussian Kernels used for computing the Difference of Gaussians</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2b9e802440ac3dfb2151eb817f92a3431f339e" translate="yes" xml:space="preserve">
          <source>The real and imaginary parts of the Gabor filter kernel are applied to the image and the response is returned as a pair of arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2d0055dfab8a7745aaabc95be11d2aad4a1e3f" translate="yes" xml:space="preserve">
          <source>The reconstructed image (or curve, in this case) is exactly the same as the mask image, except that the peaks are truncated to 0.5 and 0. The middle peak disappears completely: Since there were no seed values in this peak region, its reconstructed value is truncated to the surrounding value (-1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bcde9f4f2ba0b543d6527c7112a7f4d3eb8fe4" translate="yes" xml:space="preserve">
          <source>The rectangle is drawn with &lt;em&gt;rectprops&lt;/em&gt;; default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5fc0c5bc791a64ba2396b2f5ed6c8d69aeeb9b" translate="yes" xml:space="preserve">
          <source>The red component of the pixel (0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dd1479fdc20320b225423a27d535906b859a88" translate="yes" xml:space="preserve">
          <source>The region adjacency graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3eb72cc799b33a11eb9069f3d337366b766c548" translate="yes" xml:space="preserve">
          <source>The region of an integral image for which the features need to be computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d518b2d32f4b6a832b6c99f373b7c6ab8fdf47fa" translate="yes" xml:space="preserve">
          <source>The regularisation operator. The Laplacian by default. It can be an impulse response or a transfer function, as for the psf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb20b332db80e068a7e86986734106ae1c43803a" translate="yes" xml:space="preserve">
          <source>The regularisation operator. The Laplacian by default. It can be an impulse response or a transfer function, as for the psf. Shape constraint is the same as for the &lt;code&gt;psf&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73c94e1384128ca24ebfa02b4e2640a95325161" translate="yes" xml:space="preserve">
          <source>The regularisation parameter value that tunes the balance between the data adequacy that improve frequency restoration and the prior adequacy that reduce frequency restoration (to avoid noise artifacts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76fced1793d17a9f2f50efb5bb39235f82faaeb" translate="yes" xml:space="preserve">
          <source>The result of blending a cycling colormap (&lt;code&gt;colors&lt;/code&gt;) for each distinct value in &lt;code&gt;label&lt;/code&gt; with the image, at a certain alpha value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b3ea05f078586285bc40e6e101a233cb7855f0" translate="yes" xml:space="preserve">
          <source>The result of morphological reconstruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d62008614744b58c86c83bfeee941336d057a1" translate="yes" xml:space="preserve">
          <source>The result of the local enhance_contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193b80cc4b23b06b3569dada0d1de93d6ce54100" translate="yes" xml:space="preserve">
          <source>The result of the morphological black top hat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e826dc7d64da086c75eee552a9295c45991efc0" translate="yes" xml:space="preserve">
          <source>The result of the morphological closing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7340139b02023a7e9c018271ec341a273a2a02d6" translate="yes" xml:space="preserve">
          <source>The result of the morphological dilation with values in &lt;code&gt;[False, True]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1e5e57692632f6530db5f0d7a28aa25d9ad30d" translate="yes" xml:space="preserve">
          <source>The result of the morphological dilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33ab71e58b7e5a00c8fcf178a6ed4e28a6ac122" translate="yes" xml:space="preserve">
          <source>The result of the morphological erosion taking values in &lt;code&gt;[False, True]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72dec77348bc67e8eb2498e276d9e01255bfc67" translate="yes" xml:space="preserve">
          <source>The result of the morphological erosion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a83f277d160f07bfa8a8b7f7df6d15db4f62da" translate="yes" xml:space="preserve">
          <source>The result of the morphological opening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1947f4acdd16bab0284630b593dcf4277fe725" translate="yes" xml:space="preserve">
          <source>The result of the morphological white top hat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1ed897f93ca2f2e5243c6665dd9e51e885c35c" translate="yes" xml:space="preserve">
          <source>The resulting binary mask is True if the greyvalue of the center pixel is greater than the local mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3356cf775bdfd6f3ba4a00f0972bfe61a1aede" translate="yes" xml:space="preserve">
          <source>The resulting image will contain 4 local maxima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bfb51dfa82cfa0b0f125a57c14b701c86186f5" translate="yes" xml:space="preserve">
          <source>The resulting image will contain 4 local minima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13770b22ceb4e3de00a5d1b6383cc52fa11a1f5" translate="yes" xml:space="preserve">
          <source>The resulting image will contain all 6 local maxima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4377474036eb4fb96b94cb9193b04f851481cb" translate="yes" xml:space="preserve">
          <source>The resulting image will contain all 6 local minima.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6055273f9cebb29a9dae056c58121030b285d48f" translate="yes" xml:space="preserve">
          <source>The resulting reconstructed image looks exactly like the original image, but with the peaks of the bumps cut off. Subtracting this reconstructed image from the original image leaves just the peaks of the bumps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52daec4e5781ca845ea7fee57c7a26c190e9f64a" translate="yes" xml:space="preserve">
          <source>The return labels will start at &lt;code&gt;offset&lt;/code&gt;, which should be strictly positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ca14198c675d99a3a4f34311f236c3913f53d4" translate="yes" xml:space="preserve">
          <source>The returned generator yields indices into &lt;code&gt;theta&lt;/code&gt; such that &lt;code&gt;theta[indices]&lt;/code&gt; gives the approximate golden ratio ordering of the projections. In total, &lt;code&gt;len(theta)&lt;/code&gt; indices are yielded. All non-negative integers &amp;lt; &lt;code&gt;len(theta)&lt;/code&gt; are yielded exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9730477463239ba3689b8a9baf40dc1cbd7e7dd3" translate="yes" xml:space="preserve">
          <source>The returned points (as slices) should be as close to cubically-spaced as possible. Essentially, the points are spaced by the Nth root of the input array size, where N is the number of dimensions. However, if an array dimension cannot fit a full step size, it is &amp;ldquo;discarded&amp;rdquo;, and the computation is done for only the remaining dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e70ec43f28cd3cb4c00721a27edcfe4c186f15" translate="yes" xml:space="preserve">
          <source>The returned value is measured in bits or shannon (Sh) for base=2, natural unit (nat) for base=np.e and hartley (Hart) for base=10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17296e6616e96b03a8c42fd4406b6b2bbee68cf8" translate="yes" xml:space="preserve">
          <source>The reverse can be achieved with &lt;code&gt;img_as_ubyte()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7acb2ba9cae14d0164399e85438230749c075f" translate="yes" xml:space="preserve">
          <source>The rotation center. If &lt;code&gt;center=None&lt;/code&gt;, the image is rotated around its center, i.e. &lt;code&gt;center=(cols / 2 - 0.5, rows / 2 - 0.5)&lt;/code&gt;. Please note that this parameter is (cols, rows), contrary to normal skimage ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72da9cf391a9333e14f3734ab7059ab73a7f0bd" translate="yes" xml:space="preserve">
          <source>The scale factors &lt;code&gt;kL&lt;/code&gt;, &lt;code&gt;kC&lt;/code&gt; set the weight given to differences in lightness and chroma relative to differences in hue. The usual values are &lt;code&gt;kL=2&lt;/code&gt;, &lt;code&gt;kC=1&lt;/code&gt; for &amp;ldquo;acceptability&amp;rdquo; and &lt;code&gt;kL=1&lt;/code&gt;, &lt;code&gt;kC=1&lt;/code&gt; for &amp;ldquo;imperceptibility&amp;rdquo;. Colors with &lt;code&gt;dE &amp;gt; 1&lt;/code&gt; are &amp;ldquo;different&amp;rdquo; for the given scale factors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93ee56f94f0eb75094031a36e8fb5f508e8572b" translate="yes" xml:space="preserve">
          <source>The scikit-image mailing-list is &lt;a href=&quot;mailto:scikit-image%40python.org&quot;&gt;scikit-image@python.org&lt;/a&gt; (users should &lt;a href=&quot;https://mail.python.org/mailman/listinfo/scikit-image&quot;&gt;join&lt;/a&gt; before posting). This mailing-list is shared by users and developers, and it is the right place to ask any question about &lt;code&gt;skimage&lt;/code&gt;, or in general, image processing using Python. Posting snippets of code with minimal examples ensures to get more relevant and focused answers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6af9051cb7f9886a4719fe61810130b7eec8748" translate="yes" xml:space="preserve">
          <source>The seed image (a.k.a. marker image), which specifies the values that are dilated or eroded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a15dcc5b8798f443782469b43d3867d1ab2379d" translate="yes" xml:space="preserve">
          <source>The seed point id where the first neighbor originated from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8616305cf0efb5a9e892235f039b9a722eb01de1" translate="yes" xml:space="preserve">
          <source>The seed point id where the second neighbor originated from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409e6176f87b36e8b3006dbec8e65890952e1b1f" translate="yes" xml:space="preserve">
          <source>The segmented regions. If mode is &lt;code&gt;&amp;lsquo;separate&amp;rsquo;&lt;/code&gt;, the leading dimension of the array corresponds to the number of regions that the user drew.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadc5ffeeac42c6cadd7375a6b1eeda563b81db6" translate="yes" xml:space="preserve">
          <source>The selected pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54312798f2f369c7b41a730115abf8f1055dbeeb" translate="yes" xml:space="preserve">
          <source>The sequence of extra positional arguments passed to &lt;code&gt;weight_func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c293379676866c5949353fa674c929f36f55a46a" translate="yes" xml:space="preserve">
          <source>The shape (depth, length, width) of image tiles to write. If None (default), image data are written in one stripe per plane. The tile length and width must be a multiple of 16. If the tile depth is provided, the SGI image_depth and tile_depth tags are used to save volume data. Few software can read the SGI format, e.g. MeVisLab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997910dbca192fc608f27dafbc9e6bf5f51ba861" translate="yes" xml:space="preserve">
          <source>The shape index, as defined by Koenderink &amp;amp; van Doorn &lt;a href=&quot;#rc8faae48965f-1&quot; id=&quot;id26&quot;&gt;[1]&lt;/a&gt;, is a single valued measure of local curvature, assuming the image as a 3D plane with intensities representing heights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b18f397b09d4e5e371ea7b4b3be49967790054" translate="yes" xml:space="preserve">
          <source>The shape of the block. Each dimension must divide evenly into the corresponding dimensions of &lt;code&gt;arr_in&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20121a3997dc3cbf20e628b9891e9059b5e83a3b" translate="yes" xml:space="preserve">
          <source>The shape of the desired output image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bbfe04c83beb5c60e71a14709946c8bcbf545a" translate="yes" xml:space="preserve">
          <source>The shape of the space embedding the grid. &lt;code&gt;len(ar_shape)&lt;/code&gt; is the number of dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bc32f9b86efe1ce78649e081db789e2fe6b890" translate="yes" xml:space="preserve">
          <source>The side-length of the sliding window used in comparison. Must be an odd value. If &lt;code&gt;gaussian_weights&lt;/code&gt; is True, this is ignored and the window size will depend on &lt;code&gt;sigma&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8123847b55d9f278d9c4dbf07810a18952cc65" translate="yes" xml:space="preserve">
          <source>The sigma values of the spatial Gaussian smoothing in this code do not match the sigma values in the original code by Tola et al. &lt;a href=&quot;#r3f18658b3c6d-2&quot; id=&quot;id4&quot;&gt;[2]&lt;/a&gt;. In their code, spatial smoothing is applied to both the input image and the center histogram. However, this smoothing is not documented in &lt;a href=&quot;#r3f18658b3c6d-1&quot; id=&quot;id5&quot;&gt;[1]&lt;/a&gt; and, therefore, it is omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0000d06bbd53ae0ba5268f7ce4c8898089d7f15b" translate="yes" xml:space="preserve">
          <source>The similarity transformation extends the Euclidean transformation with a single scaling factor in addition to the rotation and translation parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c55f00ce3bf80499ba8ae2dd1e0b343e3255a9b" translate="yes" xml:space="preserve">
          <source>The simplest contrast enhancement &lt;a href=&quot;../api/skimage.exposure#skimage.exposure.rescale_intensity&quot;&gt;&lt;code&gt;rescale_intensity()&lt;/code&gt;&lt;/a&gt; consists in stretching pixel values to the whole allowed range, using a linear transformation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bef37468ad30eacaac6f115a85284b2b9a1f4e" translate="yes" xml:space="preserve">
          <source>The size (width, height) of the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12f14d27e7565b64f0e22b3bcc7706559a33df2" translate="yes" xml:space="preserve">
          <source>The size of the horizontal and vertical sides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9635d6e831494bb73efec880e30549740dc78a" translate="yes" xml:space="preserve">
          <source>The size of the spacing between the tiles and between the tiles and the borders. If non-zero, makes the boundaries of individual images easier to perceive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457f8db22f4e30f0000ee414e7b77ad3f30d5dfa" translate="yes" xml:space="preserve">
          <source>The size of the spacing between the tiles to make the boundaries of individual frames easier to see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cff7895747258fcdcd4bae44f51b7a1858d10a" translate="yes" xml:space="preserve">
          <source>The smallest allowable connected component size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d2c388b2988d57cf5bd66de8195489a3c4b243" translate="yes" xml:space="preserve">
          <source>The stain separation matrix as described by G. Landini &lt;a href=&quot;#r33a9a7d2e90f-1&quot; id=&quot;id29&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0ab61d96079ba9af8106fca866f7b275656599" translate="yes" xml:space="preserve">
          <source>The stain separation matrix as described by G. Landini &lt;a href=&quot;#re5603a4e7517-1&quot; id=&quot;id27&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f57aaf0b7d3d2129d15e69db8f831fc414f010" translate="yes" xml:space="preserve">
          <source>The standard deviation of the (Gaussian) noise. If provided, a more robust computation of patch weights is computed that takes the expected noise variance into account (see Notes below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5266147388726f5a72db3db2632fbfc4a94a2dd5" translate="yes" xml:space="preserve">
          <source>The start point of the scan line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e16255e4b764a1f417f813fd3ec408d048efe40" translate="yes" xml:space="preserve">
          <source>The step size for the shifts applied along axis, i, are:: &lt;code&gt;range((0, max_shifts[i]+1, shift_steps[i]))&lt;/code&gt;. If an integer is provided, the same step size is used for all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c3808132cc8cbda13e2cde79ad85d6513b6b8a" translate="yes" xml:space="preserve">
          <source>The steps of the algorithm are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64934135cf306bff9a7a4d8d66dec6e58ebd0344" translate="yes" xml:space="preserve">
          <source>The stopping criterion: the norm of the difference between to successive approximated solution (empirical mean of object samples, see Notes section). 1e-4 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074619243c79f94bd8d0746a4929909c5fe8d95b" translate="yes" xml:space="preserve">
          <source>The strategy to assign edge weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6affbc78ed8bd432cc45aa58eb16f2e7f53e3700" translate="yes" xml:space="preserve">
          <source>The structure tensor A is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f04a913f2d1ce73e5fd23374fb19c98d68ae9f" translate="yes" xml:space="preserve">
          <source>The structuring element where elements of the neighborhood are 1 and 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e7bd5254f0696560d626add3bfc32b3c10e135" translate="yes" xml:space="preserve">
          <source>The subject of the image. Saved with the first page only. Cannot be used with the ImageJ format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae351e65eadd7d272d037c1978ec1549cc7a93c1" translate="yes" xml:space="preserve">
          <source>The thickness of the line can be varied using the mouse scroll wheel, or with the &amp;lsquo;+&amp;rsquo; and &amp;lsquo;-&amp;lsquo; keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f26e828dd0ae464e65b33291ecffbbbf8ef28f" translate="yes" xml:space="preserve">
          <source>The thickness with which the RAG edges are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddff21fd9e10ee9c6ab50a8c69751f2465cdd1ec" translate="yes" xml:space="preserve">
          <source>The thinned image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2759b120b25ca1f6b239e6e579a47ffcbbb57dff" translate="yes" xml:space="preserve">
          <source>The threshold. A subgraph won&amp;rsquo;t be further subdivided if the value of the N-cut exceeds &lt;code&gt;thresh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95dca0c7b1fc733e09945fe69b065e3ac38ce42" translate="yes" xml:space="preserve">
          <source>The threshold. Regions connected by edges with smaller weights are combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f22db05ee00ed782f7b35d8f850a485e21374c5" translate="yes" xml:space="preserve">
          <source>The transformation is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f9501d85b5e49fe642850e17142f22c074e1ea" translate="yes" xml:space="preserve">
          <source>The transparency component of the pixel (0-255).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268333ef1ba4a2a6f615177934ee7c40145c699f" translate="yes" xml:space="preserve">
          <source>The two eigen values of the inertia tensor in decreasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e901786ea3f39dc7858b231577259250b81f64c" translate="yes" xml:space="preserve">
          <source>The two images are part of the Middlebury 2014 stereo benchmark. The dataset was created by Nera Nesic, Porter Westling, Xi Wang, York Kitajima, Greg Krathwohl, and Daniel Scharstein at Middlebury College. A detailed description of the acquisition process can be found in &lt;a href=&quot;#re12479cea6aa-1&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404a666b2a5cf6384faf1186d603bea9e6135ed7" translate="yes" xml:space="preserve">
          <source>The two images are rectified such that every pixel in the left image has its corresponding pixel on the same scanline in the right image. That means that both images are warped such that they have the same orientation but a horizontal spatial offset (baseline). The ground-truth pixel offset in column direction is specified by the included disparity map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88585afc7280f9249ee4d0b13c204a77ae60f57" translate="yes" xml:space="preserve">
          <source>The two-dimensional FRT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e50fb706c7c00aa0051bd45615f650601eefd8f" translate="yes" xml:space="preserve">
          <source>The two-dimensional inverse FRT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab036dda11c78d2f7b46545a7d53fffbb634d51" translate="yes" xml:space="preserve">
          <source>The type of feature to consider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16427a4f9cb46c04b9cf81499b2ffd0ecd0df584" translate="yes" xml:space="preserve">
          <source>The type of wavelet to perform and can be any of the options &lt;code&gt;pywt.wavelist&lt;/code&gt; outputs. The default is &lt;code&gt;&amp;lsquo;db1&amp;rsquo;&lt;/code&gt;. For example, &lt;code&gt;wavelet&lt;/code&gt; can be any of &lt;code&gt;{'db2', 'haar', 'sym9'}&lt;/code&gt; and many more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3a74477e84bb32cf194b58e0bb0e7a1effb45d" translate="yes" xml:space="preserve">
          <source>The upper half of the input dtype&amp;rsquo;s positive range is True, and the lower half is False. All negative values (if present) are False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b125f9693f0e4183fa8f009158b5169cfb72d3cb" translate="yes" xml:space="preserve">
          <source>The upper-diagonal elements of the Hessian matrix, as returned by &lt;code&gt;hessian_matrix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95bade4c6e35709a3e5f9f55c329a32366ccce4" translate="yes" xml:space="preserve">
          <source>The values are scaled between -32768 and 32767. If the input data-type is positive-only (e.g., uint8), then the output image will still only have positive values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba0c3f8ada6167e82300b924d7831f71fd49ad8" translate="yes" xml:space="preserve">
          <source>The values at the center of the bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e634750b41d4a8d475e9ca2c3bcd149a9d6c2cdb" translate="yes" xml:space="preserve">
          <source>The values of the histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb0cfb50d4fd177823fae342d5b059cb2de4c69" translate="yes" xml:space="preserve">
          <source>The values should be in the range [-pi, pi). If a masked array is provided, the masked entries will not be changed, and their values will not be used to guide the unwrapping of neighboring, unmasked values. Masked 1D arrays are not allowed, and will raise a &lt;code&gt;ValueError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37261a7ae77acf287a758d6fd53ac8a24c8df39d" translate="yes" xml:space="preserve">
          <source>The viewer&amp;rsquo;s &lt;code&gt;show()&lt;/code&gt; method returns a list of tuples, one for each attached plugin. Each tuple contains two elements: an overlay of the same shape as the input image, and a data field (which may be &lt;code&gt;None&lt;/code&gt;). A plugin class documents its return value in its &lt;code&gt;output&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5a98720c3de444055d6050a6e6f17fed17f135" translate="yes" xml:space="preserve">
          <source>The voxel spacing along each image dimension. By default, &lt;code&gt;slic&lt;/code&gt; assumes uniform spacing (same voxel resolution along z, y and x). This parameter controls the weights of the distances along z, y, and x during k-means clustering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ad16bad337452684cc1b8ebf25cb6b06e04e6d" translate="yes" xml:space="preserve">
          <source>The warped input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b972210bab3cb19b5e627eebf341fc6046f8c68" translate="yes" xml:space="preserve">
          <source>The watershed algorithm is useful to separate overlapping objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1aa7f30a89a3770f1f28bd97bf6b0add09a8649" translate="yes" xml:space="preserve">
          <source>The wavelet domain is a sparse representation of the image, and can be thought of similarly to the frequency domain of the Fourier transform. Sparse representations have most values zero or near-zero and truly random noise is (usually) represented by many small values in the wavelet domain. Setting all values below some threshold to 0 reduces the noise in the image, but larger thresholds also decrease the detail present in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2206b00ecb81aec044ce790716c3939075d74adb" translate="yes" xml:space="preserve">
          <source>The weight w_ij is a decreasing function of the norm of the local gradient. This ensures that diffusion is easier between pixels of similar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71bdbbe47bfd59dfeda4891c16f61f649354ec9" translate="yes" xml:space="preserve">
          <source>The weights used in this conversion are calibrated for contemporary CRT phosphors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2343cf3297f5bd7a41e7e304d0fb874b78aa7d99" translate="yes" xml:space="preserve">
          <source>The white top hat of an image is defined as the image minus its morphological opening. This operation returns the bright spots of the image that are smaller than the structuring element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6def36bbea88eb95137eccc2c0588254b6fb4d" translate="yes" xml:space="preserve">
          <source>The width and height of the square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170c19a2a507ec67722e4017ad239282d0f16b31" translate="yes" xml:space="preserve">
          <source>The width of the border examined. By default, only objects that touch the outside of the image are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d106e067a8f5f07cd306be41ae67bb502f29a5" translate="yes" xml:space="preserve">
          <source>The width of the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d482e5e872b04d69dfe2157b67334d52a70a7484" translate="yes" xml:space="preserve">
          <source>The width of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45603e6b04ead702e76ec6cfa316ac609614ad37" translate="yes" xml:space="preserve">
          <source>The width, height and depth of the cube.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3d659d8e813e3e360637bba1aada4d616cbf28" translate="yes" xml:space="preserve">
          <source>Then, we create a seed image initialized to the minimum mask value (for reconstruction by dilation, min-intensity values don&amp;rsquo;t spread) and add &amp;ldquo;seeds&amp;rdquo; to the left and right peak, but at a fraction of peak value (1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee18ef76e293bef09b8665ee2783e9c22550211f" translate="yes" xml:space="preserve">
          <source>There are a number of different options to define this map, depending on the dimensionality of the input image. A 2-D image can have 2 dimensions for gray-scale images, or 3 dimensions with color information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1017bd201f44f562cda8d8e91b602a7f0108bf50" translate="yes" xml:space="preserve">
          <source>There are several known ambiguous cases in the marching cubes algorithm. Using point labeling as in &lt;a href=&quot;#r1e43a330a523-1&quot; id=&quot;id32&quot;&gt;[1]&lt;/a&gt;, Figure 4, as shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505958d774d7c97af23c8303aac0ccdb54e2693c" translate="yes" xml:space="preserve">
          <source>There is a single ambiguous case in the marching squares algorithm: when a given &lt;code&gt;2 x 2&lt;/code&gt;-element square has two high-valued and two low-valued elements, each pair diagonally adjacent. (Where high- and low-valued is with respect to the contour value sought.) In this case, either the high-valued elements can be &amp;lsquo;connected together&amp;rsquo; via a thin isthmus that separates the low-valued elements, or vice-versa. When elements are connected together across a diagonal, they are considered &amp;lsquo;fully connected&amp;rsquo; (also known as &amp;lsquo;face+vertex-connected&amp;rsquo; or &amp;lsquo;8-connected&amp;rsquo;). Only high-valued or low-valued elements can be fully-connected, the other set will be considered as &amp;lsquo;face-connected&amp;rsquo; or &amp;lsquo;4-connected&amp;rsquo;. By default, low-valued elements are considered fully-connected; this can be altered with the &amp;lsquo;fully_connected&amp;rsquo; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22375d4e9deacbcccc0d7b2bf09e173371cc68dd" translate="yes" xml:space="preserve">
          <source>Therefore, this segmentation method is not very robust: if we miss a single pixel of the contour of the object, we will not be able to fill it. Of course, we could try to dilate the contours in order to close them. However, it is preferable to try a more robust method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5d82bc6fe1f1608831a8f1c7fd10a96f4addf5" translate="yes" xml:space="preserve">
          <source>These calculations don&amp;rsquo;t make a lot of sense with offsets of magnitude greater than 1. Use the &lt;code&gt;sampling&lt;/code&gt; argument in order to deal with anisotropic data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1300f3a144447812f4df25b641e28226dc85deb2" translate="yes" xml:space="preserve">
          <source>These conventions are summarized below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e823cc66ce28ed0011532d04b325891570e369" translate="yes" xml:space="preserve">
          <source>These equations can be transformed to the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3a2356ed27f1893c86ab17af248ec7f8f4989f" translate="yes" xml:space="preserve">
          <source>These functions convert images to the desired dtype and &lt;em&gt;properly rescale their values&lt;/em&gt;. If conversion reduces the precision of the image, then a warning is issued:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7791b3457cea4275ac76442c15e567781050f641" translate="yes" xml:space="preserve">
          <source>These methods are then specific to a prior model. Consequently, the application or the true image nature must corresponds to the prior model. By default, the prior model (Laplacian) introduce image smoothness or pixel correlation. It can also be interpreted as high-frequency penalization to compensate the instability of the solution with respect to the data (sometimes called noise amplification or &amp;ldquo;explosive&amp;rdquo; solution).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3661ea85a1e75a1656ee3075debdb864cec9b9f0" translate="yes" xml:space="preserve">
          <source>These parameters will typically be implemented as class properties so that they update the image or some other component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e6b78c6731005588df989fb25c8827a4c59ef6" translate="yes" xml:space="preserve">
          <source>These steps are performed either a maximum number of times or until one of the special stop criteria are met. The final model is estimated using all inlier samples of the previously determined best model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26884ed77fa84771128994cb3ac69fd5f4cc16c" translate="yes" xml:space="preserve">
          <source>These widgets should be added to a Plugin subclass using its &lt;code&gt;add_widget&lt;/code&gt; method or calling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97c30a8658b70d2e8b2543df90eac2f943106ac" translate="yes" xml:space="preserve">
          <source>ThickLineTool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61b0aa69144778b6d6a732394d9e728f8351f35" translate="yes" xml:space="preserve">
          <source>Thin potential edges to 1-pixel wide curves. First, find the normal to the edge at each point. This is done by looking at the signs and the relative magnitude of the X-Sobel and Y-Sobel to sort the points into 4 categories: horizontal, vertical, diagonal and antidiagonal. Then look in the normal and reverse directions to see if the values in either of those directions are greater than the point in question. Use interpolation to get a mix of points instead of picking the one that&amp;rsquo;s the closest to the normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50c43c6ed898517565c480c0cad8aa9384773a5" translate="yes" xml:space="preserve">
          <source>Thinned image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8b5af293e43fc2080246639e23c99cc50d1aa6" translate="yes" xml:space="preserve">
          <source>Thinning is used to reduce each connected component in a binary image to a single-pixel wide skeleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40980107b9458ef15d1adb5e2933cdfa9ce82d52" translate="yes" xml:space="preserve">
          <source>This &amp;ldquo;filtered image&amp;rdquo; is used when saving from the plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8049491591a526fbc9980232537e9bf6f8e11c" translate="yes" xml:space="preserve">
          <source>This algorithm &lt;a href=&quot;#r2b353e29d473-1&quot; id=&quot;id13&quot;&gt;[1]&lt;/a&gt; works by making multiple passes over the image, removing pixels matching a set of criteria designed to thin connected regions while preserving eight-connected components and 2 x 2 squares &lt;a href=&quot;#r2b353e29d473-2&quot; id=&quot;id14&quot;&gt;[2]&lt;/a&gt;. In each of the two sub-iterations the algorithm correlates the intermediate skeleton image with a neighborhood mask, then looks up each neighborhood in a lookup table indicating whether the central pixel should be deleted in that sub-iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adfa84f5a01e167b22e0c634d70d96167116bb6" translate="yes" xml:space="preserve">
          <source>This algorithm assumes &lt;code&gt;faces&lt;/code&gt; provided are all triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defbf71035fc5dfcb6d77185b6ba6b964978bd19" translate="yes" xml:space="preserve">
          <source>This algorithm computes the medial axis transform of an image as the ridges of its distance transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77830f61c430f390224c60a8e82b70592c6dd1ee" translate="yes" xml:space="preserve">
          <source>This algorithm does not attempt to resolve such ambiguities; it is a naive implementation of marching cubes as in &lt;a href=&quot;#r1e43a330a523-1&quot; id=&quot;id33&quot;&gt;[1]&lt;/a&gt;, but may be a good beginning for work with more recent techniques (Dual Marching Cubes, Extended Marching Cubes, Cubic Marching Squares, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3549d6a6c93c87a07d239c50ad9bad2be5a8f64" translate="yes" xml:space="preserve">
          <source>This algorithm finds regions where &lt;code&gt;image&lt;/code&gt; is greater than &lt;code&gt;high&lt;/code&gt; OR &lt;code&gt;image&lt;/code&gt; is greater than &lt;code&gt;low&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; that region is connected to a region greater than &lt;code&gt;high&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f7d6ea34b316c3b2e1d4be97e8d89aaf287ee2" translate="yes" xml:space="preserve">
          <source>This algorithm is originally designed for text recognition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7466f63711af28356bce14a893116bdc4737c896" translate="yes" xml:space="preserve">
          <source>This algorithm was first proposed by Tony Chan and Luminita Vese, in a publication entitled &amp;ldquo;An Active Countour Model Without Edges&amp;rdquo; &lt;a href=&quot;#rb5da2c114fc8-1&quot; id=&quot;id13&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1f7a570a556be100b6a7d396ed692eef1819f5" translate="yes" xml:space="preserve">
          <source>This algorithm works properly only if the &lt;code&gt;faces&lt;/code&gt; provided are all triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6600edebbede4ba4175dd867decdbf919d9093" translate="yes" xml:space="preserve">
          <source>This behaves much like &lt;code&gt;matplotlib.pyplot.show&lt;/code&gt; and &lt;code&gt;QWidget.show&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11875acc8aef346ef8bd5809a3b440395be42864" translate="yes" xml:space="preserve">
          <source>This behavior is symmetric: The values in an unsigned dtype are spread over just the positive range of a signed dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94be893d521c153e8c42347769be3a4593f04ae4" translate="yes" xml:space="preserve">
          <source>This class instead assumes that the costs array contains at each position the &amp;ldquo;cost&amp;rdquo; of a unit distance of travel through that position. For example, a move (in 2-d) from (1, 1) to (1, 2) is assumed to originate in the center of the pixel (1, 1) and terminate in the center of (1, 2). The entire move is of distance 1, half through (1, 1) and half through (1, 2); thus the cost of that move is &lt;code&gt;(1/2)*costs[1,1] + (1/2)*costs[1,2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7347f9c6e3e50625e4f961c4dd84c6368fb931" translate="yes" xml:space="preserve">
          <source>This class is a simplification of LinearSegmentedColormap, which doesn&amp;rsquo;t support jumps in color intensities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4df9a3fc3ea8affc003a56e87a8822ed805145" translate="yes" xml:space="preserve">
          <source>This code gives the same precision as the FFT upsampled cross-correlation in a fraction of the computation time and with reduced memory requirements. It obtains an initial estimate of the cross-correlation peak by an FFT and then refines the shift estimation by upsampling the DFT only in a small neighborhood of that estimate by means of a matrix-multiply DFT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3277a7a1d51ead27700974afc6154d4b9f31d9" translate="yes" xml:space="preserve">
          <source>This code is an implementation of the algorithm of Rudin, Fatemi and Osher that was proposed by Chambolle in &lt;a href=&quot;#r3f46bb237e10-1&quot; id=&quot;id15&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60a18a15e687f70a4a4345eabbaaf6feb79410e" translate="yes" xml:space="preserve">
          <source>This color difference was developed by the Colour Measurement Committee (CMC) of the Society of Dyers and Colourists (United Kingdom). It is intended for use in the textile industry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd9eabe14ba1f37bd2b54dc4c2022b24f7d3de8" translate="yes" xml:space="preserve">
          <source>This convenience function reconstructs the the minimum cost path to a given end position from one of the starting indices provided to find_costs(), which must have been called previously. This function can be called as many times as desired after find_costs() has been run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cd67df5c9c8d0ca26fdd3eefc5a76d18d30b81" translate="yes" xml:space="preserve">
          <source>This corner detector uses information from the auto-correlation matrix A:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e88cf27fa3f6ef75281d9851baa6ed231df5a" translate="yes" xml:space="preserve">
          <source>This database is a subset of the LFW database containing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851b7c73bb47e2f17095880d887ca3048c5d06ca" translate="yes" xml:space="preserve">
          <source>This differs from &lt;code&gt;skimage.feature.peak_local_max&lt;/code&gt; in that it suppresses multiple connected peaks with the same accumulator value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493c521d615a21374c9a762d461ec62011f72d41" translate="yes" xml:space="preserve">
          <source>This dtype behavior allows you to string together any &lt;code&gt;skimage&lt;/code&gt; function without worrying about the image dtype. On the other hand, if you want to use a custom function that requires a particular dtype, you should call one of the dtype conversion functions (here, &lt;code&gt;func1&lt;/code&gt; and &lt;code&gt;func2&lt;/code&gt; are &lt;code&gt;skimage&lt;/code&gt; functions):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de94ea3d53191e3a56af2d2fbc0b353066e83861" translate="yes" xml:space="preserve">
          <source>This estimator minimizes the squared distances from all points to the circle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fb678c3da940665d180187334bc511a3d611b7" translate="yes" xml:space="preserve">
          <source>This filter can be used to detect continuous edges, e.g. vessels, wrinkles, rivers. It can be used to calculate the fraction of the whole image containing such objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1ac4febb67836d730e6dedcdd39306caed5388" translate="yes" xml:space="preserve">
          <source>This filter computes the morphological closing of the image and then subtracts the result from the original image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c749fc0a2d5b130f14826fa0efad1a695cb7101" translate="yes" xml:space="preserve">
          <source>This filter computes the morphological opening of the image and then subtracts the result from the original image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c78086baa520f1d50ead9b69c3e56297944bc0" translate="yes" xml:space="preserve">
          <source>This filter locally stretches the histogram of greyvalues to cover the entire range of values from &amp;ldquo;white&amp;rdquo; to &amp;ldquo;black&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c529124b4208c4c1b9f26176445340d0ba2ee122" translate="yes" xml:space="preserve">
          <source>This function also returns the forward map (mapping the original labels to the reduced labels) and the inverse map (mapping the reduced labels back to the original ones).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a718ef6e8e4012f413f40888ff17e74b888fb0" translate="yes" xml:space="preserve">
          <source>This function applies the Wiener filter to a noisy and degraded image by an impulse response (or PSF). If the data model is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b715763c072460311eccb3c15a8dda96ee850b0" translate="yes" xml:space="preserve">
          <source>This function assumes the noise follows a Gaussian distribution. The estimation algorithm is based on the median absolute deviation of the wavelet detail coefficients as described in section 4.2 of &lt;a href=&quot;#rbc448ac95825-1&quot; id=&quot;id36&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e1b5d094c99245f053fe64fd100b79143c8515" translate="yes" xml:space="preserve">
          <source>This function can be applied to N-dimensional images, by passing &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; or &lt;code&gt;extent&lt;/code&gt; as tuples of length N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77181c36d92ea121ddd6c373a4d31c9f14a13682" translate="yes" xml:space="preserve">
          <source>This function implements a watershed algorithm &lt;a href=&quot;#r91cba7b06893-1&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;&lt;a href=&quot;#r91cba7b06893-2&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; that apportions pixels into marked basins. The algorithm uses a priority queue to hold the pixels with the metric for the priority queue being pixel value, then the time of entry into the queue - this settles ties in favor of the closest marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985020e6cdcbf46bc9fb412727aea665a08c7a6a" translate="yes" xml:space="preserve">
          <source>This function implements a watershed algorithm &lt;a href=&quot;#rc8002e235889-1&quot; id=&quot;id8&quot;&gt;[1]&lt;/a&gt;&lt;a href=&quot;#rc8002e235889-2&quot; id=&quot;id9&quot;&gt;[2]&lt;/a&gt; that apportions pixels into marked basins. The algorithm uses a priority queue to hold the pixels with the metric for the priority queue being pixel value, then the time of entry into the queue - this settles ties in favor of the closest marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df6ff81ed53996300db1feb5a8b1f3ff8523894" translate="yes" xml:space="preserve">
          <source>This function is a wrapper around &lt;code&gt;scipy.ndi.gaussian_filter()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2df9ece7d6566c8ddce564f3d9c258ce11697fc" translate="yes" xml:space="preserve">
          <source>This function is adapted from &lt;a href=&quot;#rda90ab4dd09a-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; with the author&amp;rsquo;s permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8477aa89c56e7f5cdc989e30a75f02e1086ed3b" translate="yes" xml:space="preserve">
          <source>This function is called before merging two nodes. For the RAG &lt;code&gt;graph&lt;/code&gt; while merging &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt;, it is called as follows &lt;code&gt;merge_func(graph, src, dst)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf26d5faff8280366b9d98355d6b37b37b3bbdc" translate="yes" xml:space="preserve">
          <source>This function is called with the estimated model and the randomly selected data: &lt;code&gt;is_model_valid(model, *random_data)&lt;/code&gt;, .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3ee328092e8fa0f20fdfad6a8d1454fa6ffa16" translate="yes" xml:space="preserve">
          <source>This function is called with the randomly selected data before the model is fitted to it: &lt;code&gt;is_data_valid(*random_data)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57097029dcc65ec5177d8f634eeac65549368b39" translate="yes" xml:space="preserve">
          <source>This function is deprecated, see &lt;code&gt;relabel_sequential&lt;/code&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a715c58b3be85a971aa3dcc8cd79ce792361ee53" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;code&gt;img_as_float64&lt;/code&gt;, but will not convert lower-precision floating point arrays to &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091c27683fe0f0a26fd3e5c1e7c3c77869771c89" translate="yes" xml:space="preserve">
          <source>This function or a similar one defined by the user should be applied over the image as a preprocessing step before calling &lt;code&gt;morphological_geodesic_active_contour&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787365e1c945407895dc99fc606779b66665fc96" translate="yes" xml:space="preserve">
          <source>This function returns the same result as greyscale closing but performs faster for binary images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1944557011c857b01ccf2d22adb9c1b59b81e6ca" translate="yes" xml:space="preserve">
          <source>This function returns the same result as greyscale dilation but performs faster for binary images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353a65e7501abfc1c5bf212b2327961b534c51d7" translate="yes" xml:space="preserve">
          <source>This function returns the same result as greyscale erosion but performs faster for binary images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b256d0031fc974bfebfe6dba73133e78a29edc" translate="yes" xml:space="preserve">
          <source>This function returns the same result as greyscale opening but performs faster for binary images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cb5fd47c9bb80e35ddc984a0f0583c4ca21121" translate="yes" xml:space="preserve">
          <source>This function transforms the input image pixelwise according to the equation &lt;code&gt;O = gain*log(1 + I)&lt;/code&gt; after scaling each pixel to the range 0 to 1. For inverse logarithmic correction, the equation is &lt;code&gt;O = gain*(2**I - 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4320a7e5b0711e424947b352e6a67a327750be78" translate="yes" xml:space="preserve">
          <source>This function uses lab2xyz and xyz2rgb. By default Observer= 2A, Illuminant= D65. CIE XYZ tristimulus values x_ref=95.047, y_ref=100., z_ref=108.883. See function &lt;code&gt;get_xyz_coords&lt;/code&gt; for a list of supported illuminants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9d9a1c0f7fe4e5af9beefa001afd01ebc0de15" translate="yes" xml:space="preserve">
          <source>This function uses rgb2xyz and xyz2lab. By default Observer= 2A, Illuminant= D65. CIE XYZ tristimulus values x_ref=95.047, y_ref=100., z_ref=108.883. See function &lt;code&gt;get_xyz_coords&lt;/code&gt; for a list of supported illuminants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb18eee41ef94ddc75b3a7357f1041c9529e4d4d" translate="yes" xml:space="preserve">
          <source>This function uses skimage.morphology.label to define unique objects, finds the convex hull of each using convex_hull_image, and combines these regions with logical OR. Be aware the convex hulls of unconnected objects may overlap in the result. If this is suspected, consider using convex_hull_image separately on each object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49fd37743e6fb79812ba5898af492e880c60882" translate="yes" xml:space="preserve">
          <source>This image of printed text is useful for demonstrations requiring uneven background illumination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc846d9eb317494e71dfb084d86ee8e1e7a6c564" translate="yes" xml:space="preserve">
          <source>This image shows several coins outlined against a gray background. It is especially useful in, e.g. segmentation tests, where individual objects need to be identified against a background. The background shares enough grey levels with the coins that a simple segmentation is not sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ed7af21c4e1831241d311aba5aa00660d34131" translate="yes" xml:space="preserve">
          <source>This image was acquired at the Center for Microscopy And Molecular Imaging (CMMI).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3b9b9fc8b64a92eabd88b3e07051ba6df2aeb0" translate="yes" xml:space="preserve">
          <source>This image was downloaded from &lt;a href=&quot;http://hubblesite.org/newscenter/archive/releases/2012/37/image/a/&quot;&gt;HubbleSite&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a303b9a80d7211c8de11319a27ba5af7d2eafe4" translate="yes" xml:space="preserve">
          <source>This image was downloaded from &lt;a href=&quot;https://www.flickr.com/photos/spacexphotos/16511594820/in/photostream/&quot;&gt;SpaceX Photos&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4f3b1ec729257711154f6a88ed158c10105c25" translate="yes" xml:space="preserve">
          <source>This image was downloaded from &lt;code&gt;openclipart &amp;lt;http://openclipart.org/detail/158377/horse-by-marauder&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ed6a424b8a8645a28723f0db1dd3bcec1a65cc" translate="yes" xml:space="preserve">
          <source>This image was downloaded from Wikipedia &amp;lt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:Corner.png&quot;&gt;http://en.wikipedia.org/wiki/File:Corner.png&lt;/a&gt;&amp;gt;`__.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a813dadec136bac701e4ef1ba446471dfa6ef81f" translate="yes" xml:space="preserve">
          <source>This image was downloaded from the &lt;a href=&quot;https://www.brooklynmuseum.org/opencollection/archives/image/51611&quot;&gt;Brooklyn Museum Collection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cefd10c879cf075bb95c80bcc84d24372e05230" translate="yes" xml:space="preserve">
          <source>This image was downloaded from the NASA Great Images database &amp;lt;&lt;a href=&quot;https://flic.kr/p/r9qvLn&quot;&gt;https://flic.kr/p/r9qvLn&lt;/a&gt;&amp;gt;`__.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b337e3a6db1a6d93d177e6022e0f161cf45578e" translate="yes" xml:space="preserve">
          <source>This implementation converts all arguments to specific, lowest common denominator types, then passes these to a C algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a4966ea113d2146bdad883bef74571b3a93394" translate="yes" xml:space="preserve">
          <source>This implementation of the algorithm is somewhat simplified in the sense that the area factor &amp;lsquo;nu&amp;rsquo; described in the original paper is not implemented, and is only suitable for grayscale images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e33a4e47c4c08d62ee3c07b4a153b2e2887aa5" translate="yes" xml:space="preserve">
          <source>This is a lower-level routine that produces the source coordinates for 2-D images used by &lt;code&gt;warp()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d50716f388413ffbfbba2e716682f77e9fe542" translate="yes" xml:space="preserve">
          <source>This is a version of the Chan-Vese algorithm that uses morphological operators instead of solving a partial differential equation (PDE) for the evolution of the contour. The set of morphological operators used in this algorithm are proved to be infinitesimally equivalent to the Chan-Vese PDE (see &lt;a href=&quot;#r81c856a3d0d3-1&quot; id=&quot;id20&quot;&gt;[1]&lt;/a&gt;). However, morphological operators are do not suffer from the numerical stability issues typically found in PDEs (it is not necessary to find the right time step for the evolution), and are computationally faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236ced83f67c2b495d588c2eefce9989bddb3c39" translate="yes" xml:space="preserve">
          <source>This is a version of the Geodesic Active Contours (GAC) algorithm that uses morphological operators instead of solving partial differential equations (PDEs) for the evolution of the contour. The set of morphological operators used in this algorithm are proved to be infinitesimally equivalent to the GAC PDEs (see &lt;a href=&quot;#rb6daaf5d7730-1&quot; id=&quot;id17&quot;&gt;[1]&lt;/a&gt;). However, morphological operators are do not suffer from the numerical stability issues typically found in PDEs (e.g., it is not necessary to find the right time step for the evolution), and are computationally faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f21b2c62b484b58778d27ee7e47ac7503c64cf" translate="yes" xml:space="preserve">
          <source>This is an edge-preserving and noise reducing denoising filter. It averages pixels based on their spatial closeness and radiometric similarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecddf6b5cbdee8593e2d9536f16324b3c19725a" translate="yes" xml:space="preserve">
          <source>This is an edge-preserving, denoising filter. It averages pixels based on their spatial closeness and radiometric similarity &lt;a href=&quot;#rb832e60bc162-1&quot; id=&quot;id17&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a88f9d53c2959e20c752bc9bd5e6e432a2311bd" translate="yes" xml:space="preserve">
          <source>This is one of the simplest corner detectors and is comparatively fast but has several limitations (e.g. not rotation invariant).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29f53b62e046d8bbad753364f8c1f332ccffac3" translate="yes" xml:space="preserve">
          <source>This is required when subclassing Graph with networkx v2 and does not cause problems for v1. Here is more detail from the network migrating from 1.x to 2.x document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373311d44927de5dd4e2fdbce2ce3d33a91b0672" translate="yes" xml:space="preserve">
          <source>This is the 3D equivalent of a diamond. A pixel is part of the neighborhood (i.e. labeled 1) if the city block/Manhattan distance between it and the center of the neighborhood is no greater than radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de384539242ec8a99931c79deee7e874a2800ffb" translate="yes" xml:space="preserve">
          <source>This is the 3D equivalent of a disk. A pixel is within the neighborhood if the euclidean distance between it and the origin is no greater than radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bb1ad21e7e45d05b27effe849f0116744c9de5" translate="yes" xml:space="preserve">
          <source>This is the 3D equivalent of a square. Every pixel along the perimeter has a chessboard distance no greater than radius (radius=floor(width/2)) pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbd7f124c04816df17c776d9cd13da27371af26" translate="yes" xml:space="preserve">
          <source>This is the color space which is commonly used by video codecs, it is also the reversible color transform in JPEG2000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d13fb86b8f62c9b25ef533ed23d9f9958180c42" translate="yes" xml:space="preserve">
          <source>This is the launch photo of Falcon 9 carrying DSCOVR lifted off from SpaceX&amp;rsquo;s Launch Complex 40 at Cape Canaveral Air Force Station, FL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a472a016fd88890074122f194b7830f693e4ca3a" translate="yes" xml:space="preserve">
          <source>This low-contrast image of the surface of the moon is useful for illustrating histogram equalization and contrast stretching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006a5d863d0f773eef556adac56160d55d6d5404" translate="yes" xml:space="preserve">
          <source>This means that to find reasonable contours, it is best to find contours midway between the expected &amp;ldquo;light&amp;rdquo; and &amp;ldquo;dark&amp;rdquo; values. In particular, given a binarized array, &lt;em&gt;do not&lt;/em&gt; choose to find contours at the low or high value of the array. This will often yield degenerate contours, especially around structures that are a single array element wide. Instead choose a middle value, as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765e3d5f7e30bffa55a4bc549032e41dd75aa22a" translate="yes" xml:space="preserve">
          <source>This method calculates the travel cost for going from the current node to the next. The default implementation returns new_cost. Overload this method to adapt the behaviour of the algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd45ef4213dcd4196246f68a71e7f98b0a0bad39" translate="yes" xml:space="preserve">
          <source>This method can be overloaded to keep track of other arrays that are used by a specific implementation of the algorithm. For instance the MCP_Connect class uses it to update an id map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba275ee773493b26b490940e897d995cb4f0939" translate="yes" xml:space="preserve">
          <source>This method can be overloaded to modify the behavior of the MCP algorithm. An example might be to stop the algorithm when a certain cumulative cost is reached, or when the front is a certain distance away from the seed point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddf0a403617e0b5e50842c3f4c71cc2387d3738" translate="yes" xml:space="preserve">
          <source>This method can be overloaded to obtain information about neightboring nodes, and/or to modify the behavior of the MCP algorithm. One example is the MCP_Connect class, which checks for meeting fronts using this hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299d52b453aaa26ffd7ee0dcce412bb6e2f2eb75" translate="yes" xml:space="preserve">
          <source>This method can be overridden or extended in subclasses and plugins to react to image changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82188bcef896639d8b36072cda47bf8c0cb4c1a" translate="yes" xml:space="preserve">
          <source>This method finds the minimum-cost path to the specified ending indices from any one of the specified starting indices. If no end positions are given, then the minimum-cost path to every position in the costs array will be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62862e9ff4de15f3f8f1124eec08431e3c68f58e" translate="yes" xml:space="preserve">
          <source>This method is called once for every pair of neighboring nodes, as soon as both nodes are frozen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc795a6c192a21cfdbbd71e2ae72098bbccf93ca" translate="yes" xml:space="preserve">
          <source>This method is called when a node is updated, right after new_index is pushed onto the heap and the traceback map is updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e326252e12472798d0680e01c5103258f7fd24" translate="yes" xml:space="preserve">
          <source>This method should return 1 if the algorithm should not check the current point&amp;rsquo;s neighbours and 2 if the algorithm is now done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e536caae5bab0cc7407cb25d632bdb858dfcd0ef" translate="yes" xml:space="preserve">
          <source>This minimizes the sum of shortest (orthogonal) distances from the given data points to the estimated line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f2db5d723d469a410a25fc6ca29181fb2d645c" translate="yes" xml:space="preserve">
          <source>This module is primarily intended for teaching and differs significantly from the normal, array-oriented image functions used by scikit-image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b573cab9e0e19b2ee7e84180fb2266cd1343a0" translate="yes" xml:space="preserve">
          <source>This module uses the Cartesian coordinate system, where the origin is at the lower-left corner instead of the upper-right and the order is x, y instead of row, column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6bce17da64e4b628c62d358736ed7774eec42b" translate="yes" xml:space="preserve">
          <source>This operation is known as the h-dome of the image and leaves features of height &lt;code&gt;h&lt;/code&gt; in the subtracted image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cc10d6f8657ad9d86b23e1619ec1386a69f207" translate="yes" xml:space="preserve">
          <source>This parameter allows for the use of reverse or forward order of the image axes in gradient computation. &amp;lsquo;xy&amp;rsquo; indicates the usage of the last axis initially (Hxx, Hxy, Hyy), whilst &amp;lsquo;rc&amp;rsquo; indicates the use of the first axis initially (Hrr, Hrc, Hcc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef1ce51e49ac8af9ee2d6450a1e0acaab4da473" translate="yes" xml:space="preserve">
          <source>This photograph contains the Hubble Telescope&amp;rsquo;s farthest ever view of the universe. It can be useful as an example for multi-scale detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37a70724c85b4d907fa0adf63bb6cf74ea935f8" translate="yes" xml:space="preserve">
          <source>This photograph is courtesy of Pikolo Espresso Bar. It contains several elliptical shapes as well as varying texture (smooth porcelain to course wood grain).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e15906e49bb988ca02d0674ea253ee17a13418" translate="yes" xml:space="preserve">
          <source>This photograph of a wall clock was taken while moving the camera in an aproximately horizontal direction. It may be used to illustrate inverse filters and deconvolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cbe66a269db7f32661109f9a1d0ac281807694" translate="yes" xml:space="preserve">
          <source>This picture shows colonic glands where the IHC expression of FHL2 protein is revealed with DAB. Hematoxylin counterstaining is applied to enhance the negative parts of the tissue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e178a2b237c5f38a26c0908c6428617b1bcc59" translate="yes" xml:space="preserve">
          <source>This replaces each pixel by the local maximum if the pixel greyvalue is closer to the local maximum than the local minimum. Otherwise it is replaced by the local minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48e78480e4a5d87f0e437e89d6104beef310a06" translate="yes" xml:space="preserve">
          <source>This routine &lt;em&gt;does not&lt;/em&gt; generate SIFT/SURF features from an image. These algorithms are patent encumbered. Please use &lt;code&gt;skimage.feature.CENSURE&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b034f9b2c5746b590fbd9d059b8b82095eefaba3" translate="yes" xml:space="preserve">
          <source>This routine reads SIFT or SURF files generated by binary utilities from &lt;a href=&quot;http://people.cs.ubc.ca/~lowe/keypoints/&quot;&gt;http://people.cs.ubc.ca/~lowe/keypoints/&lt;/a&gt; and &lt;a href=&quot;http://www.vision.ee.ethz.ch/~surf/&quot;&gt;http://www.vision.ee.ethz.ch/~surf/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cacd323fa39e19c793bdd7bb3b01eb93f67ad0" translate="yes" xml:space="preserve">
          <source>This sets the image plot&amp;rsquo;s array and updates its shape appropriately</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9f7e8e40b5987d686b8ac119c804600ffd11f1" translate="yes" xml:space="preserve">
          <source>This should have the same shape as that of &lt;code&gt;labels&lt;/code&gt;. For all pixels along the boundary between 2 adjacent regions, the average value of the corresponding pixels in &lt;code&gt;edge_map&lt;/code&gt; is the edge weight between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88681e7370450e480a17a9643a19542a1347a6d5" translate="yes" xml:space="preserve">
          <source>This shows that &lt;code&gt;cat&lt;/code&gt; is a 300-by-451 pixel image with three channels (red, green, and blue). As before, we can get and set pixel values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73080f1e9ab17db4315f2740b809418037e120a0" translate="yes" xml:space="preserve">
          <source>This viewer is a simple container object that holds a Matplotlib axes for showing images. &lt;code&gt;ImageViewer&lt;/code&gt; doesn&amp;rsquo;t subclass the Matplotlib axes (or figure) because of the high probability of name collisions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5770f1b37891f8d88abcea00c4e43a0a5d0c5b" translate="yes" xml:space="preserve">
          <source>Thomas Lewiner, Helio Lopes, Antonio Wilson Vieira and Geovan Tavares. Efficient implementation of Marching Cubes&amp;rsquo; cases with topological guarantees. Journal of Graphics Tools 8(2) pp. 1-15 (december 2003). DOI: 10.1080/10867651.2003.10487582</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51f7b72279e26fd7cf66d9d61e7f7204bf3b26a" translate="yes" xml:space="preserve">
          <source>Threshold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a587b19f267f3c30b6667a449027bf311d9038" translate="yes" xml:space="preserve">
          <source>Threshold for rejecting interest points which have ratio of principal curvatures greater than this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f21b55d5320d73f307f9c0451bdac3db632e4c8" translate="yes" xml:space="preserve">
          <source>Threshold image. All pixels in the input image higher than the corresponding pixel in the threshold image are considered foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ae5e8ee251d5b8ee09032dfe5090c746ef149a" translate="yes" xml:space="preserve">
          <source>Threshold mask. All pixels with an intensity higher than this value are assumed to be foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61abc530e81ef4aeb8231c61edeb505e2dbbd23" translate="yes" xml:space="preserve">
          <source>Threshold used in deciding whether the pixels on the circle are brighter, darker or similar w.r.t. the test pixel. Decrease the threshold when more corners are desired and vice-versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c030da79e9e3b7849be2860b8aed6affa334300" translate="yes" xml:space="preserve">
          <source>Threshold value used to suppress maximas and minimas with a weak magnitude response obtained after Non-Maximal Suppression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc02c11b48346918485d661cb455249ccabad6cf" translate="yes" xml:space="preserve">
          <source>Threshold value(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e75c52025b0f825b2959fe6a5626e27c30f9a20" translate="yes" xml:space="preserve">
          <source>Thresholding method to be used. The currently supported methods are &amp;ldquo;BayesShrink&amp;rdquo; &lt;a href=&quot;#r3b8ec6d23a4e-1&quot; id=&quot;id20&quot;&gt;[1]&lt;/a&gt; and &amp;ldquo;VisuShrink&amp;rdquo; &lt;a href=&quot;#r3b8ec6d23a4e-2&quot; id=&quot;id21&quot;&gt;[2]&lt;/a&gt;. Defaults to &amp;ldquo;BayesShrink&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553658802834fc5fea9e8e25ece41f0e0f1da6ed" translate="yes" xml:space="preserve">
          <source>Through</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028c7d51c03f88867739263168312790f5e507f6" translate="yes" xml:space="preserve">
          <source>TiffFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4d1d849374e255fca3ef2c5ff9cfb7d5401cb7" translate="yes" xml:space="preserve">
          <source>TiffFile instances must be closed using the &amp;lsquo;close&amp;rsquo; method, which is automatically called when using the &amp;lsquo;with&amp;rsquo; context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb30b4525740a5d82f3ce5ccc1e56ef5a804866c" translate="yes" xml:space="preserve">
          <source>TiffSequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8740072d622c5a35dd1bf2e7b383f22e6787b137" translate="yes" xml:space="preserve">
          <source>TiffWriter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31d70c267a5b035455f77568c9ae935229bf5ca" translate="yes" xml:space="preserve">
          <source>TiffWriter instances must be closed using the &amp;lsquo;close&amp;rsquo; method, which is automatically called when using the &amp;lsquo;with&amp;rsquo; context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1aff4c15288f2da947f67f9dc998afbe802d3f6" translate="yes" xml:space="preserve">
          <source>Tinting gray-scale images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0b6fa07de7dbba1877ad66ced4e965173f76fd" translate="yes" xml:space="preserve">
          <source>To actually interact with the filter, you have to add widgets that adjust the parameters of the function. Typically, that means adding a slider widget and connecting it to the filter parameter and the minimum and maximum values of the slider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8371271c239c54447426f4181ec9edc4049002f7" translate="yes" xml:space="preserve">
          <source>To call the function &lt;code&gt;task&lt;/code&gt; on each element of the list &lt;code&gt;pics&lt;/code&gt;, it is usual to write a for loop. To measure the execution time of this loop, you can use ipython and measure the execution time with &lt;code&gt;%timeit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216f44ae686ba7e32e56fb1784794f7d38f30589" translate="yes" xml:space="preserve">
          <source>To create the background image, set the mask image to the original image, and the seed image to the original image with an intensity offset, &lt;code&gt;h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9727d43888d75d56cda3dd8779ee29e1be6618e4" translate="yes" xml:space="preserve">
          <source>To generate Poisson noise against a signed image, the signed image is temporarily converted to an unsigned image in the floating point domain, Poisson noise is generated, then it is returned to the original range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a588905039679d199ed7082a52bd477b5f949fbb" translate="yes" xml:space="preserve">
          <source>To maintain the low contrast of the original, use the &lt;code&gt;in_range&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407cb906cb433540e5e8a45fecb36ef68253161f" translate="yes" xml:space="preserve">
          <source>To match the implementation of Wang et. al. &lt;a href=&quot;#rccea9a164d3e-1&quot; id=&quot;id40&quot;&gt;[1]&lt;/a&gt;, set &lt;code&gt;gaussian_weights&lt;/code&gt; to True, &lt;code&gt;sigma&lt;/code&gt; to 1.5, and &lt;code&gt;use_sample_covariance&lt;/code&gt; to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8117a287b0fcb19f992f378209a039ad5c306a" translate="yes" xml:space="preserve">
          <source>To quantify the area of an isosurface generated by this algorithm, pass outputs directly into &lt;code&gt;skimage.measure.mesh_surface_area&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4618bec23c694ff738e2e63bb2d197cdcc7c01e" translate="yes" xml:space="preserve">
          <source>To quantify the area of an isosurface generated by this algorithm, pass verts and faces to &lt;code&gt;skimage.measure.mesh_surface_area&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a53d2c2ade36fc2d6e8555fff6c2a22abd77548" translate="yes" xml:space="preserve">
          <source>To query a plugin&amp;rsquo;s capabilities, use &lt;code&gt;plugin_info&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3a06afb0b10c2b48a580865009af0528ae58b0" translate="yes" xml:space="preserve">
          <source>To see a list of available plugins run &lt;code&gt;io.available_plugins&lt;/code&gt;. Note that this lists plugins that are defined, but the full list may not be usable if your system does not have the required libraries installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbdfeabe97afeade97b61d24052255b1b128518" translate="yes" xml:space="preserve">
          <source>To use Matplotlib as the default image reader, you would write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f6fe6863e507cdf7864042657c0699f5c2e898" translate="yes" xml:space="preserve">
          <source>Tolerance when determining whether a point is inside the hull. Due to numerical floating point errors, a tolerance of 0 can result in some points erroneously being classified as being outside the hull.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ad75312fdf00e01471feae8cd065534c5797f3" translate="yes" xml:space="preserve">
          <source>Tools for reading video files vary in their ease of installation and use, their disk and memory usage, and their cross-platform compatibility. This is a practical guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b5efef3c07255763c2f75682499bb0f0e6f735" translate="yes" xml:space="preserve">
          <source>Total least squares estimator for 2D circles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb073d7e51b45f3a2cffad9cf994386e9214355e" translate="yes" xml:space="preserve">
          <source>Total least squares estimator for 2D ellipses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d386d636a7d4bf79497461d42156b4f423ea3c84" translate="yes" xml:space="preserve">
          <source>Total least squares estimator for N-dimensional lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5715f9ddfe0bfe8875f11a305caa7fb74b642ea3" translate="yes" xml:space="preserve">
          <source>Total perimeter of all objects in binary image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ff9360c0d18e80724a49215386c09b5140e431" translate="yes" xml:space="preserve">
          <source>Total-variation denoising (also know as total-variation regularization) tries to find an image with less total-variation under the constraint of being similar to the input image, which is controlled by the regularization parameter (&lt;a href=&quot;#rc0e3588f2bc3-1&quot; id=&quot;id7&quot;&gt;[1]&lt;/a&gt;, &lt;a href=&quot;#rc0e3588f2bc3-2&quot; id=&quot;id8&quot;&gt;[2]&lt;/a&gt;, &lt;a href=&quot;#rc0e3588f2bc3-3&quot; id=&quot;id9&quot;&gt;[3]&lt;/a&gt;, &lt;a href=&quot;#rc0e3588f2bc3-4&quot; id=&quot;id10&quot;&gt;[4]&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8935ef4d3aa0444e7f90907a46686a9d404ac09f" translate="yes" xml:space="preserve">
          <source>Trace a minimum cost path through the pre-calculated traceback array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0071c5e7a2d2c5b97bab2c85c1a5fbd783f7e7" translate="yes" xml:space="preserve">
          <source>Transform object containing the transformation parameters and providing access to forward and inverse transformation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1375db6fa4c967f8be2aa5f675ee3433e406c525" translate="yes" xml:space="preserve">
          <source>Transformed coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c3c427bfb640f7cecaed53351c7d2506fe0f03" translate="yes" xml:space="preserve">
          <source>Translation invariant normalized RMS error between &lt;code&gt;src_image&lt;/code&gt; and &lt;code&gt;target_image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb8682c0bcfa696a1192fd7e0c7e8506fd8bbbf" translate="yes" xml:space="preserve">
          <source>Translation parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff956cda780e9e96cbf30fd4bfb1c81dfc3f45b" translate="yes" xml:space="preserve">
          <source>Translation vector of the relative camera motion. The vector must have unit length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b0e7dc87f79da9578244090067937c345b8e5e" translate="yes" xml:space="preserve">
          <source>Transparency value for polygons drawn over the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf0145cffeb164cd575ccd9b4983191449a9efb" translate="yes" xml:space="preserve">
          <source>True by default. If True, pixel values of the result above 1 or under -1 are thresholded for skimage pipeline compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9036c084219024bc792e22afbbae35f3dcb481a" translate="yes" xml:space="preserve">
          <source>True by default. If true, pixel value of the result above 1 or under -1 are thresholded for skimage pipeline compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be47ed4734866a235f16f43adc5147fadbb8261" translate="yes" xml:space="preserve">
          <source>True by default. If true, pixel values of the result above 1 or under -1 are thresholded for skimage pipeline compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590ea42c3458eb76be70b9af89d66b84200059b9" translate="yes" xml:space="preserve">
          <source>True by default. Specify if &lt;code&gt;psf&lt;/code&gt; and &lt;code&gt;reg&lt;/code&gt; are provided with hermitian hypothesis, that is only half of the frequency plane is provided (due to the redundancy of Fourier transform of real signal). It&amp;rsquo;s apply only if &lt;code&gt;psf&lt;/code&gt; and/or &lt;code&gt;reg&lt;/code&gt; are provided as transfer function. For the hermitian property see &lt;code&gt;uft&lt;/code&gt; module or &lt;code&gt;np.fft.rfftn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc729badff1acd71b04f24bbff4aa70c33aad50b" translate="yes" xml:space="preserve">
          <source>True if corresponding point is inside the polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c90c5eb278fbdad70eae7277fbdf16c27db4d8" translate="yes" xml:space="preserve">
          <source>True if the picture has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35d1e3d8a33f6e3e3faca13b5ac8ea6d2aeacd8" translate="yes" xml:space="preserve">
          <source>True when the image is determined to be low contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4f34e301e113b83df110c8a72fbe2c1b53b194" translate="yes" xml:space="preserve">
          <source>True where the grid falls inside the polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fce821c513e99cf5f3d4176c83ea66178e7aff" translate="yes" xml:space="preserve">
          <source>True, if model estimation succeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35374f22e5ab00fe982a050652ee981bcdce9fcb" translate="yes" xml:space="preserve">
          <source>Truncate the filter at this many standard deviations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab98dc8e65a90d5f741f6219cf7dcbff38ca59d" translate="yes" xml:space="preserve">
          <source>Tuple of arguments to be passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b985b1f4fcfbd49cdf6f300617c2e9b4b90e1bce" translate="yes" xml:space="preserve">
          <source>Two pixels are connected when they are neighbors and have the same value. In 2D, they can be neighbors either in a 1- or 2-connected sense. The value refers to the maximum number of orthogonal hops to consider a pixel/voxel a neighbor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09597640864c99d21876d50f510886a115a5c4d5" translate="yes" xml:space="preserve">
          <source>Type of bi-level filter used to get the scales of the input image. Possible values are &amp;lsquo;DoB&amp;rsquo;, &amp;lsquo;Octagon&amp;rsquo; and &amp;lsquo;STAR&amp;rsquo;. The three modes represent the shape of the bi-level filters i.e. box(square), octagon and star respectively. For instance, a bi-level octagon filter consists of a smaller inner octagon and a larger outer octagon with the filter weights being uniformly negative in both the inner octagon while uniformly positive in the difference region. Use STAR and Octagon for better features and DoB for better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ed030024c5d9eefda7af73b82f781b626879b1" translate="yes" xml:space="preserve">
          <source>Type of transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be89e06700455ca618601085aac45dab6f8f27e" translate="yes" xml:space="preserve">
          <source>Typical linear size of blob, as a fraction of &lt;code&gt;length&lt;/code&gt;, should be smaller than 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878ee9611312314d280050c7ac9432114a120b08" translate="yes" xml:space="preserve">
          <source>Typical values for &lt;code&gt;lambda1&lt;/code&gt; and &lt;code&gt;lambda2&lt;/code&gt; are 1. If the &amp;lsquo;background&amp;rsquo; is very different from the segmented object in terms of distribution (for example, a uniform black image with figures of varying intensity), then these values should be different from each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4a660394a271f6b4bca017e109dd95126edef3" translate="yes" xml:space="preserve">
          <source>Typical values for mu are between 0 and 1, though higher values can be used when dealing with shapes with very ill-defined contours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef51aade34572453c6f5e7649bb0807f874ab954" translate="yes" xml:space="preserve">
          <source>Unique original values of &lt;code&gt;image&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700b334abbcee3a100dc342692ec3566b8139bce" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;numpy.histogram&lt;/code&gt;, this function returns the centers of bins and does not rebin integer arrays. For integer arrays, each integer value has its own bin, which improves speed and intensity-resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02222e2359bb2b1f89f2bf22f863b394d5ba5458" translate="yes" xml:space="preserve">
          <source>Unlike pyplot.figimage, this actually plots onto an axes object, which fills the figure. Plotting the image onto an axes allows for subsequent overlays of axes artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b058ac742dee641e44d87d8b57433fb363e65e6b" translate="yes" xml:space="preserve">
          <source>Unsupervised Wiener-Hunt deconvolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466ce98cf4ecac166960c385e250b79e79b1d311" translate="yes" xml:space="preserve">
          <source>Unwrapped image of the same shape as the input. If the input &lt;code&gt;image&lt;/code&gt; was a masked array, the mask will be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7294689a3ad15ae0daa3b6cc7a98f6fcad8f752f" translate="yes" xml:space="preserve">
          <source>Unwrapping 2D or 3D images uses random initialization. This sets the seed of the PRNG to achieve deterministic behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789265162a8371af2fbd64272d76b048ae29691e" translate="yes" xml:space="preserve">
          <source>Update displayed image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc252d0938677f3ce56488a801718fc9f935c017" translate="yes" xml:space="preserve">
          <source>Update keyword parameters of the plugin itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa8d09ededd90fbf2549d8e78fbffeada987ebf" translate="yes" xml:space="preserve">
          <source>Update the image displayed by an image plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3dc32cac5964517c9f258ab9763864c096b76b" translate="yes" xml:space="preserve">
          <source>Upper bound for hysteresis thresholding (linking edges). If None, high_threshold is set to 20% of dtype&amp;rsquo;s max.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6d1b4bb379864ec54bdb09d021cc3ba6aa57fb" translate="yes" xml:space="preserve">
          <source>Upper threshold value. All pixels with an intensity higher than this value are assumed to be foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c64245c0e3cc4c0e9d949751f9eab7a726557e" translate="yes" xml:space="preserve">
          <source>Upsample and then smooth image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6ca93693a6ab4d5a175ba3e7dc12652a8f3b95" translate="yes" xml:space="preserve">
          <source>Upsampled and smoothed float image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1685586e92d04fd58cd5854e113556720dd6aa3d" translate="yes" xml:space="preserve">
          <source>Upsampling factor. Images will be registered to within &lt;code&gt;1 / upsample_factor&lt;/code&gt; of a pixel. For example &lt;code&gt;upsample_factor == 20&lt;/code&gt; means the images will be registered within 1/20th of a pixel. Default is 1 (no upsampling)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9796e71a2bad5b51e1ad7f967faeb42a4eeacfee" translate="yes" xml:space="preserve">
          <source>Upscale factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2eb560b823e87c66b063178720a298a3b2f04d1" translate="yes" xml:space="preserve">
          <source>Usage guidelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c23d92e313b664caac6f6e2eb0244df0c9b232e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;range_values&lt;/code&gt; as explicit min/max intensities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a173c97266586d5ce5a43a2d0842647a4f97f59b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rescale_intensity&lt;/code&gt; to rescale to the proper range for float dtypes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aada8884c7736c4fe325779193ed93efc25538" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;drawtype&lt;/em&gt; if you want the mouse to draw a line, a box or nothing between click and actual position by setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796415c1a49c129d7062fb62b2f4cbb01be64f4c" translate="yes" xml:space="preserve">
          <source>Use a callable (slow):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6150bc90f60252aade9d7398e63a944cc2711229" translate="yes" xml:space="preserve">
          <source>Use a geometric transform to warp an image (fast):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ab73e9aed7e86f60c10770741291f0203962d4" translate="yes" xml:space="preserve">
          <source>Use a transformation matrix to warp an image (fast):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0868b2ecb483207a10ea262edba456572a7fcaf2" translate="yes" xml:space="preserve">
          <source>Use an integral image to integrate over a given window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308cecfa656d579c11e313b382643f36de357847" translate="yes" xml:space="preserve">
          <source>Use compact watershed &lt;a href=&quot;#r91cba7b06893-3&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt; with given compactness parameter. Higher values result in more regularly-shaped watershed basins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45922665a6f8605be3d8cf060126b7a644255b33" translate="yes" xml:space="preserve">
          <source>Use compact watershed &lt;a href=&quot;#rc8002e235889-3&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; with given compactness parameter. Higher values result in more regularly-shaped watershed basins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6fbe6c14735a1af478d925ad2650beb369969a" translate="yes" xml:space="preserve">
          <source>Use image min/max as the intensity range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab15872153972f943811f67f9c543c031b80389e" translate="yes" xml:space="preserve">
          <source>Use intensity range based on desired &lt;code&gt;dtype&lt;/code&gt;. Must be valid key in &lt;code&gt;DTYPE_RANGE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83ed4dbdaa1c9266c34292ad200853de6b80a02" translate="yes" xml:space="preserve">
          <source>Use left click to select the vertices of the polygon and right click to confirm the selection once all vertices are selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fffd166cabc9d2d524eeddbac78717c39dee972" translate="yes" xml:space="preserve">
          <source>Use min/max of the image&amp;rsquo;s dtype as the intensity range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dda8cbd1cf6113f0b1f8431dda01b25479fd2dd" translate="yes" xml:space="preserve">
          <source>Use numpy to make an RGB byte array (shape is height x width x 3):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f9612e5279e416433553c4a5f6b5d0e7178a1b" translate="yes" xml:space="preserve">
          <source>Used for computation when &lt;code&gt;mode&lt;/code&gt; is &amp;ldquo;similarity&amp;rdquo;. It governs how close to each other two colors should be, for their corresponding edge weight to be significant. A very large value of &lt;code&gt;sigma&lt;/code&gt; could make any two colors behave as though they were similar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1278433c263cdbbd69170e679d3f52bb78e816" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;constant&amp;rsquo;. The values to set the padded values for each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465b8fcd19cd5e2ed77adff74f2ff5a3fc18db79" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;linear_ramp&amp;rsquo;. The values used for the ending value of the linear_ramp and that will form the edge of the padded array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71d6f65b16e9b35cb9fcf9b7569838936b2caa2" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;maximum&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;, &amp;lsquo;median&amp;rsquo;, and &amp;lsquo;minimum&amp;rsquo;. Number of values at edge of each axis used to calculate the statistic value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3af9798237aadd862a2fa5a51007c978f7333ef" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;reflect&amp;rsquo;, and &amp;lsquo;symmetric&amp;rsquo;. The &amp;lsquo;even&amp;rsquo; style is the default with an unaltered reflection around the edge value. For the &amp;lsquo;odd&amp;rsquo; style, the extented part of the array is created by subtracting the reflected values from two times the edge value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6735bd225a00b04ecfae7bd2db4266856bbc7f01" translate="yes" xml:space="preserve">
          <source>Used in conjunction with mode &amp;lsquo;constant&amp;rsquo;, the value outside the image boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23a9114fd8ee58dd7d5d9c22b96d5bc5bf5af00" translate="yes" xml:space="preserve">
          <source>Users are warmly encouraged to report on their use of &lt;code&gt;skimage&lt;/code&gt; on the &lt;a href=&quot;#mailing-list&quot;&gt;Mailing-list&lt;/a&gt;, in order to propose more examples in the future. Contributing examples to the gallery can be done on github (see &lt;a href=&quot;http://scikit-image.org/docs/0.14.x/contribute.html#howto-contribute&quot;&gt;How to contribute to skimage&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a6c7a90dc1bb24f3d8cead1128ec20b81e7bf1" translate="yes" xml:space="preserve">
          <source>Uses the &amp;ldquo;marching squares&amp;rdquo; method to compute a the iso-valued contours of the input 2D array for a particular level value. Array values are linearly interpolated to provide better precision for the output contours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f380daaf0da15229e8c9f8dd8bbd08178d2e60" translate="yes" xml:space="preserve">
          <source>Using a 2D mask on a 2D color image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e6e79e093b908b20f63cfb88a01291230819a9" translate="yes" xml:space="preserve">
          <source>Using an image from &lt;code&gt;skimage&lt;/code&gt; with OpenCV</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49a71278724cc05f94c94f4f897e583db516fb4" translate="yes" xml:space="preserve">
          <source>Using an image from OpenCV with &lt;code&gt;skimage&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba147eb069929850efd3f375376707b6ff947f1" translate="yes" xml:space="preserve">
          <source>Using masks, especially, is very useful to select a set of pixels on which to perform further manipulations. The mask can be any boolean array of same shape as the image (or a shape broadcastable to the image shape). This can be useful to define a region of interest, such as a disk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd904775ddea64e357e5a75b09b452ab9aa7aab" translate="yes" xml:space="preserve">
          <source>Utilities to read and write images in various formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f8666f040f001743239e02d31a91329db2c5b6" translate="yes" xml:space="preserve">
          <source>Valid color spaces are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe73c0d4cd48174f80012e62a8dec19353cc4df3" translate="yes" xml:space="preserve">
          <source>Value along which to find contours in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3f4a24be2baee3c7661aa0d1cbf4e65d2699c1" translate="yes" xml:space="preserve">
          <source>Value in the range [0, 1] that specifies opacity of visualization. 1 - fully transparent, 0 - opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f2bdc3f25e18f336b5cd1720f8681518ac1ef8" translate="yes" xml:space="preserve">
          <source>Value of R, the dynamic range of standard deviation. If None, set to the half of the image dtype range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d26d9494f49f71e3fa4d1e58325c8849257368" translate="yes" xml:space="preserve">
          <source>Value of parameter k in threshold formula.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b743f512de08a860f512b6571647a7324503046" translate="yes" xml:space="preserve">
          <source>Value of the positive parameter k.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5440daed836cbab1c7adbf9ceed1553adcb4cb" translate="yes" xml:space="preserve">
          <source>Value to fill past edges of input if &lt;code&gt;mode&lt;/code&gt; is &amp;lsquo;constant&amp;rsquo;. Default is 0.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8fe532be9106bb44aab0b5110575787be0d844" translate="yes" xml:space="preserve">
          <source>Value to fill past edges of input if &lt;code&gt;mode&lt;/code&gt; of convolution is &amp;lsquo;constant&amp;rsquo;. The parameter is passed to &lt;code&gt;ndi.convolve&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d3b0efd87e6b28dbb98ccf883d5e7b633b9d4" translate="yes" xml:space="preserve">
          <source>Value to fill past edges of input if mode is &amp;lsquo;constant&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86a9675563f61d54010cba7ba0a442340edbaba" translate="yes" xml:space="preserve">
          <source>Value to fill the padding areas and/or the extra tiles in the output array. Has to be &lt;code&gt;float&lt;/code&gt; for single channel collections. For multichannel collections has to be an array-like of shape of number of channels. If &lt;code&gt;mean&lt;/code&gt;, uses the mean value over all images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1f49d5534c82934245d24d6d9b44790b97bdc6" translate="yes" xml:space="preserve">
          <source>Value with the greatest intensity in the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6b903b850f6dd17a58ff717a704a1e40b14bd8" translate="yes" xml:space="preserve">
          <source>Value with the least intensity in the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acba6284487e6a1adb8ff925a1b5fea9d2142d93" translate="yes" xml:space="preserve">
          <source>Value with the mean intensity in the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3171cf9a20e159f5c56f131fb089d0f76101e269" translate="yes" xml:space="preserve">
          <source>Values from 0 to 9 controlling the level of zlib compression. If 0, data are written uncompressed (default). Compression cannot be used to write contiguous files. If &amp;lsquo;lzma&amp;rsquo;, LZMA compression is used, which is not available on all platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003bd85be966be72b54e6bbc00cb21e9640bf36b" translate="yes" xml:space="preserve">
          <source>Values of cumulative distribution function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ad4ea5a758d4a00a7bd9e87b03e965d6700268" translate="yes" xml:space="preserve">
          <source>Variance of random distribution. Used in &amp;lsquo;gaussian&amp;rsquo; and &amp;lsquo;speckle&amp;rsquo;. Note: variance = (standard deviation) ** 2. Default : 0.01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9998b910de11b9ea56482c2afe4d3e9c9b6281c5" translate="yes" xml:space="preserve">
          <source>Vertices of the polygon, sorted either clockwise or anti-clockwise. The first point may (but does not need to be) duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce875273e646797a39d1a62d1655769e348334a1" translate="yes" xml:space="preserve">
          <source>Viewer for displaying image collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256b5803da9354ef00249346835412cb0ca07caf" translate="yes" xml:space="preserve">
          <source>Viewer for displaying images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5e47f23a4d67bd7e89f935360f4feb05ebea0c" translate="yes" xml:space="preserve">
          <source>Viola, Paul, and Michael J. Jones. &amp;ldquo;Robust real-time face detection.&amp;rdquo; International journal of computer vision 57.2 (2004): 137-154. &lt;a href=&quot;http://www.merl.com/publications/docs/TR2004-043.pdf&quot;&gt;http://www.merl.com/publications/docs/TR2004-043.pdf&lt;/a&gt; DOI: 10.1109/CVPR.2001.990517</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1660cc6c08aea3b76acc71a90972c6a9b73ee7f1" translate="yes" xml:space="preserve">
          <source>Visualization of Haar-like features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acb2b5706fab7b417aa69a4a474bc4eea819f17" translate="yes" xml:space="preserve">
          <source>Visualization of the DAISY descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742579615abdd2d8b7f4b6edbf97f04d78e7955b" translate="yes" xml:space="preserve">
          <source>Voxel spacing in spatial dimensions corresponding to numpy array indexing dimensions (M, N, P) as in &lt;code&gt;volume&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b44481b25099acf997fa28097f0bfa973a0214" translate="yes" xml:space="preserve">
          <source>Warnings can be locally ignored with a context manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afc29798cb5bbcbe0ac35b5eed78b7aac84367b" translate="yes" xml:space="preserve">
          <source>Warp an image according to a given coordinate transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c5e46c245b9292b8d1351d00f0e0839ba91874" translate="yes" xml:space="preserve">
          <source>We can also use 2D boolean masks for a 2D color image, as we did with the grayscale image above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1beebf6362e5f032193f8422626385a69d3efa4c" translate="yes" xml:space="preserve">
          <source>We can calculate all local maxima:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa45e08a0e7fb6d3aedb035f44b3cdbf98d92d6" translate="yes" xml:space="preserve">
          <source>We can calculate all local minima:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370ee3ca16f9b26640975e2dec374de258a434b4" translate="yes" xml:space="preserve">
          <source>We can calculate all maxima with a height of at least 40:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98152b13787ec1c5479f8384ba9bf847f6fdd7f4" translate="yes" xml:space="preserve">
          <source>We can calculate all minima with a depth of at least 40:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a662ef077274051c3f487b158ad223e0cdeb6d02" translate="yes" xml:space="preserve">
          <source>We can create a Picture object open opening an image file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c7ab2dad0283dd91fa583e66b75a082df4222c" translate="yes" xml:space="preserve">
          <source>We can display pictures (after running this command, close the window to access the prompt again):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6172788b3a0e529f382f51beb705f3b748712df" translate="yes" xml:space="preserve">
          <source>We can now label all the coins one by one using &lt;code&gt;ndi.label&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a184c094e0b96677f0858b4248af0a1aa7f51cbe" translate="yes" xml:space="preserve">
          <source>We can preview the changes we made to the picture with the &lt;code&gt;compare&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e511860b84843d5684235ae0dedbc1f6a375640" translate="yes" xml:space="preserve">
          <source>We can then supplement the above table as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99c03a6df5aa30149cc804fb83c3d2193fd4c54" translate="yes" xml:space="preserve">
          <source>We create an image (quadratic function with a maximum in the center and 4 additional constant maxima. The heights of the maxima are: 1, 21, 41, 61, 81, 101</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f5b9ebbd1c0f2fd37bd4f752db4ce1731e6e03" translate="yes" xml:space="preserve">
          <source>We create an image (quadratic function with a minimum in the center and 4 additional constant maxima. The depth of the minima are: 1, 21, 41, 61, 81, 101</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12428e575b0067558c4d20c670962e0043a2525f" translate="yes" xml:space="preserve">
          <source>We first generate an initial image with two overlapping circles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b4f0148fa9a939b0ce725ac45a0280d9ef9c00" translate="yes" xml:space="preserve">
          <source>We remove a few small holes with mathematical morphology:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58d8fb90bf010690ffdf3a3943b25d9d9b2b7fa" translate="yes" xml:space="preserve">
          <source>We use the following kernel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8543ad7127a9f5fb61b52b8da19670fe4a3c55b8" translate="yes" xml:space="preserve">
          <source>We will use these markers in a watershed segmentation. The name watershed comes from an analogy with hydrology. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Watershed_%28image_processing%29&quot;&gt;watershed transform&lt;/a&gt; floods an image of elevation starting from markers, in order to determine the catchment basins of these markers. Watershed lines separate these catchment basins, and correspond to the desired segmentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6117b4e2c2f0f2b3c934d05094b14f04fb554b7" translate="yes" xml:space="preserve">
          <source>We would love to hear from how you use &lt;code&gt;skimage&lt;/code&gt; for your work on the mailing-list!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545fc94abb547ad4143328cb0fdff2c169e0363c" translate="yes" xml:space="preserve">
          <source>Weight parameter for the inner region. If &lt;code&gt;lambda2&lt;/code&gt; is larger than &lt;code&gt;lambda1&lt;/code&gt;, the inner region will contain a larger range of values than the outer region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14356d7621661cf28eb92cf94237d8fa6373a288" translate="yes" xml:space="preserve">
          <source>Weight parameter for the outer region. If &lt;code&gt;lambda1&lt;/code&gt; is larger than &lt;code&gt;lambda2&lt;/code&gt;, the outer region will contain a larger range of values than the inner region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88578e72f91ce8fd4a3208f1f2ddf96ab64979e2" translate="yes" xml:space="preserve">
          <source>Wheels are also available for OSX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95154cee4600a454abfc9169c39007799c8398d4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;sigma&lt;/code&gt; is provided, a smaller &lt;code&gt;h&lt;/code&gt; should typically be used to avoid oversmoothing. The optimal value for &lt;code&gt;h&lt;/code&gt; depends on the image content and noise level, but a reasonable starting point is &lt;code&gt;h = 0.8 * sigma&lt;/code&gt; when &lt;code&gt;fast_mode&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, or &lt;code&gt;h = 0.6 * sigma&lt;/code&gt; when &lt;code&gt;fast_mode&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e660aeda6b73686e9dbfe3cbfe6e4702693b37d6" translate="yes" xml:space="preserve">
          <source>When True (the default), the filter detects black ridges; when False, it detects white ridges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c82283d526d6fd3fbdd8efce9d797062eb1738" translate="yes" xml:space="preserve">
          <source>When YCbCr conversion is done, every color channel is scaled between 0 and 1, and &lt;code&gt;sigma&lt;/code&gt; values are applied to these scaled color channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0a668a16aa104d37191e5931c225bbdd5e02bd" translate="yes" xml:space="preserve">
          <source>When an element of the sequence is &lt;code&gt;True&lt;/code&gt;, the unwrapping process will regard the edges along the corresponding axis of the image to be connected and use this connectivity to guide the phase unwrapping process. If only a single boolean is given, it will apply to all axes. Wrap around is not supported for 1D arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2918dade29f07efc7de782b3878b0cd6ec4c3ec" translate="yes" xml:space="preserve">
          <source>When extracting those features in parallel, be aware that the choice of the backend (i.e. multiprocessing vs threading) will have an impact on the performance. The rule of thumb is as follows: use multiprocessing when extracting features for all possible ROI in an image; use threading when extracting the feature at specific location for a limited number of ROIs. Refer to the example &lt;a href=&quot;http://scikit-image.org/docs/0.14.x/auto_examples/xx_applications/plot_haar_extraction_selection_classification.html#sphx-glr-auto-examples-xx-applications-plot-haar-extraction-selection-classification-py&quot;&gt;Face classification using Haar-like feature descriptor&lt;/a&gt; for more insights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a03c9e732a5d333c0624506087de2618c3a3d4" translate="yes" xml:space="preserve">
          <source>When possible, functions should avoid blindly stretching image intensities (e.g. rescaling a float image so that the min and max intensities are 0 and 1), since this can heavily distort an image. For example, if you&amp;rsquo;re looking for bright markers in dark images, there may be an image where no markers are present; stretching its input intensity to span the full range would make background noise look like markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d262e757bc9a2040287951fe805d4956e926f2" translate="yes" xml:space="preserve">
          <source>When saving a JPEG, the compression ratio may be controlled using the &lt;code&gt;quality&lt;/code&gt; keyword argument which is an integer with values in [1, 100] where 1 is worst quality and smallest file size, and 100 is best quality and largest file size (default 75). This is only available when using the PIL and imageio plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176ac46ff123544cbdca93ef63145be688b60db2" translate="yes" xml:space="preserve">
          <source>When the Laplacian is decomposed into blocks of marked and unmarked pixels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d4e206222da203370cd9d86b7e597e9e0886ef" translate="yes" xml:space="preserve">
          <source>When the last/rightmost dimension becomes even larger, the speedup is even more dramatic. It is worth thinking about &lt;em&gt;data locality&lt;/em&gt; when writing algorithms. In particular, know that scikit-image uses C-contiguous arrays unless otherwise specified. When using nested loops, the last/rightmost dimension of the array should be in the innermost loop of the computation. In the example above, the &lt;code&gt;*=&lt;/code&gt; numpy operator iterates over all remaining dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b5ec790cb97095b8c8557fd3a8c574dd93112b" translate="yes" xml:space="preserve">
          <source>When using SART, a single iteration is usually sufficient to obtain a good reconstruction. Further iterations will tend to enhance high-frequency information, but will also often increase the noise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6579c1d05c0abc6f521b2860ee576d26d9619ccb" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;(yc, xc)&lt;/code&gt; is the center, &lt;code&gt;(a, b)&lt;/code&gt; the major and minor axes, respectively. The &lt;code&gt;orientation&lt;/code&gt; value follows &lt;code&gt;skimage.draw.ellipse_perimeter&lt;/code&gt; convention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c4ba9357fdc5f28f5b505997e4b1018e673ffe" translate="yes" xml:space="preserve">
          <source>Where imx and imy are first derivatives, averaged with a gaussian filter. The corner measure is then defined as the smaller eigenvalue of A:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a407ae264b9ad4404b8711d8a1e4c928d135cb6e" translate="yes" xml:space="preserve">
          <source>Where imx and imy are first derivatives, averaged with a gaussian filter. The corner measure is then defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad20bda5d2273ad759c0e5e3061ac4456bfd1f00" translate="yes" xml:space="preserve">
          <source>Where imx and imy are the first and imxx, imxy, imyy the second derivatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde8bfc64cb4432fad6805a20519403f0a3caa07" translate="yes" xml:space="preserve">
          <source>Where the &amp;lsquo;*&amp;rsquo; patch will be determined by the &lt;code&gt;fill&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad5c04b418a160231210bdb33fc02f7c9f04d1" translate="yes" xml:space="preserve">
          <source>Whether or not to manipulate the labels array in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704ce79831b9f690ce0b18ce00838857313b98d0" translate="yes" xml:space="preserve">
          <source>Whether the generated segments are connected or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9b6bb0904f563720e7cbf5a626a2f69587ee17" translate="yes" xml:space="preserve">
          <source>Whether the input should be converted to Lab colorspace prior to segmentation. For this purpose, the input is assumed to be RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf5ae700dadfe8cee9d69345df84baf01f136e3" translate="yes" xml:space="preserve">
          <source>Whether the input should be converted to Lab colorspace prior to segmentation. The input image &lt;em&gt;must&lt;/em&gt; be RGB. Highly recommended. This option defaults to &lt;code&gt;True&lt;/code&gt; when &lt;code&gt;multichannel=True&lt;/code&gt;&lt;em&gt;and&lt;/em&gt;&lt;code&gt;image.shape[-1] == 3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a4890e9a95e089f27baf86658ff2dd03c85fca" translate="yes" xml:space="preserve">
          <source>Whether the last axis of the image is to be interpreted as multiple channels or another spatial dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c63ceb8f4714dc7320a37e8d03c7d6999b3707" translate="yes" xml:space="preserve">
          <source>Whether the last axis of the image is to be interpreted as multiple channels or another spatial dimension. By default, is set to True for 3D (2D+color) inputs, and False for others. Starting in release 0.16, this will always default to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69f8ae1391f1f0d3c09290ef717534412cef69f" translate="yes" xml:space="preserve">
          <source>Whether the last axis of the image is to be interpreted as multiple channels or another spatial dimension. Set to &lt;code&gt;False&lt;/code&gt; for 3-D images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c07a215e31c3ea9624a3c43a8a51710d34cfd6" translate="yes" xml:space="preserve">
          <source>Whether the last axis of the image is to be interpreted as multiple channels. A value of False, for a 3D image, is not currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7198f69972be7697573f7515dda908fbc0ca3eb9" translate="yes" xml:space="preserve">
          <source>Whether the last axis of the image is to be interpreted as multiple channels. If True, each channel is filtered separately (channels are not mixed together). Only 3 channels are supported. If &lt;code&gt;None&lt;/code&gt;, the function will attempt to guess this, and raise a warning if ambiguous, when the array has shape (M, N, 3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72c0eeaa7f6ef83bd116bed3f15aa2749a28158" translate="yes" xml:space="preserve">
          <source>Whether to allow degenerate (i.e. zero-area) triangles in the end-result. Default True. If False, degenerate triangles are removed, at the cost of making the algorithm slower.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da553cfda0775cb8a3b700049481d0c57b3b1fe7" translate="yes" xml:space="preserve">
          <source>Whether to apply a Gaussian filter to smooth the image prior to down-scaling. It is crucial to filter when down-sampling the image to avoid aliasing artifacts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220c3166147a435200c1c908ac82686cbf50e504" translate="yes" xml:space="preserve">
          <source>Whether to clip the output to the range of values of the input image. This is enabled by default, since higher order interpolation may produce values outside the given input range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0d0cc6c4fb320368e8d29739c724cf732bd2b2" translate="yes" xml:space="preserve">
          <source>Whether to clip the polygon to the provided shape. If this is set to True, the drawn figure will always be a closed polygon with all edges visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1840af49672c4c818332a5a1638e181c164fc9f" translate="yes" xml:space="preserve">
          <source>Whether to conserve memory by only caching a single frame. Default is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89804687c0d6ddccb67217073cd038b75132e318" translate="yes" xml:space="preserve">
          <source>Whether to keep the original range of values. Otherwise, the input image is converted according to the conventions of &lt;code&gt;img_as_float&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a350681bd605233c4d9215708db60891d09765c" translate="yes" xml:space="preserve">
          <source>Whether to only plot matches and not plot the keypoint locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f0b03cdbdfb11dc898b3cd1b6eb3ed4a980cfe" translate="yes" xml:space="preserve">
          <source>Whether to rescale the intensity of each image to [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af44861ffcf6ce38dc4cfc42339528d3a934d1a" translate="yes" xml:space="preserve">
          <source>Whether to return the full segmentation hierarchy tree and distances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5896d9f3c75c757ffd9d7f0aac1649f5e61e5d00" translate="yes" xml:space="preserve">
          <source>Whether to return the number of assigned labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156a1ce3d791e07f52c28ee8245e0b68ca289c89" translate="yes" xml:space="preserve">
          <source>Whether to show images side by side, &lt;code&gt;'horizontal'&lt;/code&gt;, or one above the other, &lt;code&gt;'vertical'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52168fbe5c39351aa0bc828a552d3bb820ba597" translate="yes" xml:space="preserve">
          <source>Whether to treat the final axis as channels (no cycle shifts are performed over the channels axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2170ae329eb6839b31828701a405b0cdb918ff0" translate="yes" xml:space="preserve">
          <source>Whether to use 4- or 8-&amp;ldquo;connectivity&amp;rdquo;. In 3D, 4-&amp;ldquo;connectivity&amp;rdquo; means connected pixels have to share face, whereas with 8-&amp;ldquo;connectivity&amp;rdquo;, they have to share only edge or vertex. &lt;strong&gt;Deprecated, use ``connectivity`` instead.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d932a91406d68fc6dfbf8fdbeb461b59f08b1793" translate="yes" xml:space="preserve">
          <source>Whether to use 4- or 8-connectivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7ac369d278cd4d2368c0304ff8f22de801529c" translate="yes" xml:space="preserve">
          <source>Which label to consider background (this is only useful for modes &lt;code&gt;inner&lt;/code&gt; and &lt;code&gt;outer&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1074dd24e867f693aab7404359b923ad235007" translate="yes" xml:space="preserve">
          <source>Widget for line selection in a plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321f502a267af41d13e8439df0de9aec98dba2e3" translate="yes" xml:space="preserve">
          <source>Widget for painting on top of a plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58189ad096567e3d85df84cd88b0096b624aea77" translate="yes" xml:space="preserve">
          <source>Widget for selecting a rectangular region in a plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61010c8cc2aa13b0b7b239c539e725a863d6924" translate="yes" xml:space="preserve">
          <source>Widgets can adjust required or optional arguments of filter function or parameters for the plugin. This is specified by the Widget&amp;rsquo;s &lt;code&gt;ptype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8acf87cb3e4be37f6affb716902f08bee828558" translate="yes" xml:space="preserve">
          <source>Widgets for interacting with ImageViewer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ceabcde633946b7167f28a2988e9c5ba979de6" translate="yes" xml:space="preserve">
          <source>Width and height of the picture in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2732aca7b74aae859e116542cd3a3bcdd68b44" translate="yes" xml:space="preserve">
          <source>Width for Gaussian smoothing as preprocessing. Zero means no smoothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3fcfbae480e3404287238d5bd2ddd8b191110f" translate="yes" xml:space="preserve">
          <source>Width of Gaussian kernel used in preprocessing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b559f533866e67ef05e0c0558c2d8091aee7527" translate="yes" xml:space="preserve">
          <source>Width of Gaussian kernel used in smoothing the sample density. Higher means fewer clusters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a54800d4eed4c33273de0601fcaf9b87310b204" translate="yes" xml:space="preserve">
          <source>Width of Gaussian smoothing kernel for pre-processing for each dimension of the image. The same sigma is applied to each dimension in case of a scalar value. Zero means no smoothing. Note, that &lt;code&gt;sigma&lt;/code&gt; is automatically scaled if it is scalar and a manual voxel spacing is provided (see Notes section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfdda643323da07b559013a005d552c43cd74b9" translate="yes" xml:space="preserve">
          <source>Width of one of 9 equal rectangles that will be used to compute a feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474943ab530e1e16989cd2638250c7054aad3d29" translate="yes" xml:space="preserve">
          <source>Width of one of the 9 equal rectangles that will be used to compute a feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1471840336e2edd15337553021c8db2f7e0f318c" translate="yes" xml:space="preserve">
          <source>Width of the detection window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b933797b6a8252827a6d29f680f8f6988acbf93d" translate="yes" xml:space="preserve">
          <source>Width of the scan, perpendicular to the line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0738db358896b40f50f8bc01ac8e3f8dc31878e6" translate="yes" xml:space="preserve">
          <source>Wiener-Hunt deconvolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c8dd0d341d52734869299385c331737c132fdf" translate="yes" xml:space="preserve">
          <source>Wikipedia, &amp;ldquo;Features from accelerated segment test&amp;rdquo;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test&quot;&gt;https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf84fd66b408adc45e7b4a1762eb2f9d070a795" translate="yes" xml:space="preserve">
          <source>Wikipedia, &lt;a href=&quot;http://en.wikipedia.org/wiki/Co-occurrence_matrix&quot;&gt;http://en.wikipedia.org/wiki/Co-occurrence_matrix&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245b317878e79cfa6ba8de500d3787f0d1040b48" translate="yes" xml:space="preserve">
          <source>Wikipedia, &lt;a href=&quot;http://en.wikipedia.org/wiki/Otsu's_Method&quot;&gt;http://en.wikipedia.org/wiki/Otsu&amp;rsquo;s_Method&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d3ca09cc82bfd3a62912bf2efab99809f79711" translate="yes" xml:space="preserve">
          <source>Wilhelm Burger, Mark Burge. Principles of Digital Image Processing: Core Algorithms. Springer-Verlag, London, 2009.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebc0212acb8871174b5d18965d163505255d2a2" translate="yes" xml:space="preserve">
          <source>William Green&amp;rsquo;s Canny tutorial &lt;a href=&quot;http://dasl.unlv.edu/daslDrexel/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html&quot;&gt;http://dasl.unlv.edu/daslDrexel/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dfc5a3dfc583232a25c7bc42e758e4aaf948fa" translate="yes" xml:space="preserve">
          <source>Window and subplot title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de6d00ea9077d4f862464f7f8d6f299c62acd64" translate="yes" xml:space="preserve">
          <source>Window containing image used in measurement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84336753a5b1694823e7525a511146885eb443b8" translate="yes" xml:space="preserve">
          <source>Window containing image used in measurement/manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5ce377af2ef4f98b6057a336f4bd525eab5ea5" translate="yes" xml:space="preserve">
          <source>Window size for filtering. If win_size is not specified, it is calculated as &lt;code&gt;max(5, 2 * ceil(3 * sigma_spatial) + 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329defe4c102d6957f008b0cd94b6e3c3d64b3ea" translate="yes" xml:space="preserve">
          <source>Window size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7e4a0a24bca0445c88e9e3a4a5712fd1cd1831" translate="yes" xml:space="preserve">
          <source>Windows are overlapping views of the input array, with adjacent windows shifted by a single row or column (or an index of a higher dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44d18a393caa98beb6d62c347678ecd86f95eee" translate="yes" xml:space="preserve">
          <source>Winkelmann, Stefanie, et al. &amp;ldquo;An optimal radial profile order based on the Golden Ratio for time-resolved MRI.&amp;rdquo; Medical Imaging, IEEE Transactions on 26.1 (2007): 68-76.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3743c7ee4202f6c0da19060901a57ef3276e3d" translate="yes" xml:space="preserve">
          <source>With this method, the result is satisfying for all coins. Even if the markers for the background were not well distributed, the barriers in the elevation map were high enough for these markers to flood the entire background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c05d1c17d3a3053bd99c8ca0e4ee79df4ad6bf" translate="yes" xml:space="preserve">
          <source>Within scikit-image, images are represented as NumPy arrays, for example 2-D arrays for grayscale 2-D images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584d7ea695f3616c6a3c50427aa6774f2d6880ed" translate="yes" xml:space="preserve">
          <source>Words to look for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888356ef9ca56a564d95fb338efbf6eae2bc9b71" translate="yes" xml:space="preserve">
          <source>Working with OpenCV</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d6e2126db92399a1de1b1a1f4c4f6b8cbd5584" translate="yes" xml:space="preserve">
          <source>Write image data and tags to TIFF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c1753618249e0ad0279ec757697e1510ecb78c" translate="yes" xml:space="preserve">
          <source>Write image data to TIFF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd7eb2c49a6170b573e2c4da94837e3f8304cf5" translate="yes" xml:space="preserve">
          <source>Write remaining pages (if not truncate) and close file handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acfa7ecdbba6066688cd8f583d6a5147d2d6f52" translate="yes" xml:space="preserve">
          <source>Written by Marc Schrijver, 2/11/2001 Re-Written by D. J. Kroon University of Twente (May 2009)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c10626e93b0e99846d78a67cfd71a2a402eee9" translate="yes" xml:space="preserve">
          <source>Wu&amp;rsquo;s method draws anti-aliased circle. This implementation doesn&amp;rsquo;t use lookup table optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7372cec90983d145974970343db533ca445d85" translate="yes" xml:space="preserve">
          <source>X and Y resolutions in pixels per resolution unit as float or rational numbers. A third, optional parameter specifies the resolution unit, which must be None (default for ImageJ), &amp;lsquo;inch&amp;rsquo; (default), or &amp;lsquo;cm&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3138b185032ff8c19fcab7c9183f5ba542ec94fc" translate="yes" xml:space="preserve">
          <source>X. Wu, &amp;ldquo;An efficient antialiasing technique&amp;rdquo;, In ACM SIGGRAPH Computer Graphics, 25 (1991) 143-152.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e205ecc00dbfcbbe2dfcaba1ef20fd33ea27ad" translate="yes" xml:space="preserve">
          <source>XYZ to CIE-LAB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56eb24a641497c34bf0cdd502dae06d8cca602b1" translate="yes" xml:space="preserve">
          <source>XYZ to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff5fde14d596c81ecdd9cf88ed636a21e0a297f" translate="yes" xml:space="preserve">
          <source>Xie, Yonghong, and Qiang Ji. &amp;ldquo;A new efficient ellipse detection method.&amp;rdquo; Pattern Recognition, 2002. Proceedings. 16th International Conference on. Vol. 2. IEEE, 2002</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044ef83918be918b121c3c39b59552eb1ec69967" translate="yes" xml:space="preserve">
          <source>Y is between 0 and 1. Use YCbCr instead of YUV for the color space which is commonly used by video codecs (where Y ranges from 16 to 235)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3527404fafcc2456aae1afa6ac2d0cc5302cc3da" translate="yes" xml:space="preserve">
          <source>Y is between 16 and 235. This is the color space which is commonly used by video codecs, it is sometimes incorrectly called &amp;ldquo;YUV&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441f5dfb36ee9835c071dd914723089659e422f1" translate="yes" xml:space="preserve">
          <source>YCbCr to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f4e2d6152a3981faa756820c096b32ee8817f6" translate="yes" xml:space="preserve">
          <source>YDbDr to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b247170bde03ff312c06a54728c642ef558fbf26" translate="yes" xml:space="preserve">
          <source>YIQ to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46974b33b797f8de93d165845ee3f285a7c01540" translate="yes" xml:space="preserve">
          <source>YPbPr to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777d0fadd09eb8af2f918d40c429ea63f51533b3" translate="yes" xml:space="preserve">
          <source>YUV to RGB color space conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef8030b2636de67f31f468f63fcbfa4818d802d" translate="yes" xml:space="preserve">
          <source>Yen J.C., Chang F.J., and Chang S. (1995) &amp;ldquo;A New Criterion for Automatic Multilevel Thresholding&amp;rdquo; IEEE Trans. on Image Processing, 4(3): 370-378. DOI:10.1109/83.366472</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5986d4e0810b0b092ccb27c01946f7df1263fb" translate="yes" xml:space="preserve">
          <source>Yield images of the Gaussian pyramid formed by the input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfc886626c3cf938d87b6cfee0423b43ad286e2" translate="yes" xml:space="preserve">
          <source>Yield images of the laplacian pyramid formed by the input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49aef3d27de052e4da99725ec33063718bcc2085" translate="yes" xml:space="preserve">
          <source>You can also use the inverse of a geometric transformation (fast):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6845a6019e56b87cce4894bbea73f6aaa3218059" translate="yes" xml:space="preserve">
          <source>You can compute the feature for some pre-computed coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad3de86d5b06f329fc0f9ef3c1eddc53aacb384" translate="yes" xml:space="preserve">
          <source>You can determine the over-, well- and under-determined parameters with the total least-squares method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3d39a30e1c45fc122842f47ada0ffdbd4df1e5" translate="yes" xml:space="preserve">
          <source>You can iterate over pixels, which have RGB values between 0 and 255, and know their location in the picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3ce65d48c88b6fbe15104e6e5e8ab64bee670c" translate="yes" xml:space="preserve">
          <source>Zack, G. W., Rogers, W. E. and Latt, S. A., 1977, Automatic Measurement of Sister Chromatid Exchange Frequency, Journal of Histochemistry and Cytochemistry 25 (7), pp. 741-753 DOI:10.1177/25.7.70454</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5cb88ceba29a4aafd77b4497f4402a2f7c350d" translate="yes" xml:space="preserve">
          <source>[ -1, -7/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734ed3adf1e0f40642b86a94046dcb4ba6170ed2" translate="yes" xml:space="preserve">
          <source>[+1/8, +3/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341b71ad59bd4f2f38bf6e19d94c9e239b6ccff7" translate="yes" xml:space="preserve">
          <source>[+3/8, +5/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74152fd47e9804775d64a8ad64ae4bee6e61b5a1" translate="yes" xml:space="preserve">
          <source>[+5/8, +7/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ce012f10ed91b4ca67aba4d407b7ad5515abb4" translate="yes" xml:space="preserve">
          <source>[+7/8, +1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d05451207f80ef5665dd36c7c755839f926df7" translate="yes" xml:space="preserve">
          <source>[-1/8, +1/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5677fb27358c8fd32a40f7868a774dc6a11114f9" translate="yes" xml:space="preserve">
          <source>[-3/8, -1/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c884f02b4a40e1586120c4bc71fd3eb6c58c49e5" translate="yes" xml:space="preserve">
          <source>[-5/8, -3/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24be5f6f3cc2e2495fa5de2073da3de24ee981a3" translate="yes" xml:space="preserve">
          <source>[-7/8, -5/8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a353e7d9c0e0bdda0e4835849990dc7a1c0c86" translate="yes" xml:space="preserve">
          <source>[FRT]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea54c8f9810aa768fbe9a72a02b15e73a52d226" translate="yes" xml:space="preserve">
          <source>[Lee94]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735d89b7f9e943d966176b0c91a06dacb6c9d22d" translate="yes" xml:space="preserve">
          <source>[Zha84]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf7d9fb28572f10f2f7026c1b7e0bd591c98868" translate="yes" xml:space="preserve">
          <source>\[S[m, n] = \sum_{i \leq m} \sum_{j \leq n} X[i, j]\]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8a6b2a298e437ee571bd14ea7aeba724d168d4" translate="yes" xml:space="preserve">
          <source>\[\hat x = F^\dagger (|\Lambda_H|^2 + \lambda |\Lambda_D|^2) \Lambda_H^\dagger F y\]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e0756e3f5409df78ed7f464dac6cd0192d72e8" translate="yes" xml:space="preserve">
          <source>\[\sum_{i,j=0}^{levels-1} P_{i,j}\left[\frac{(i-\mu_i) \ (j-\mu_j)}{\sqrt{(\sigma_i^2)(\sigma_j^2)}}\right]\]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e634012089cb5761659205ee3b700abddcc0987" translate="yes" xml:space="preserve">
          <source>\[y = Hx + n\]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ff35fc51fcaed6590dee563dd13acaadf4ddc9" translate="yes" xml:space="preserve">
          <source>active_contour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c2ada1a1a7dd6e2f9f00fdc25ba6b0554193d3" translate="yes" xml:space="preserve">
          <source>adjust_gamma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925567d1b8c0023ef6294ff4e546b84bd2a795bf" translate="yes" xml:space="preserve">
          <source>adjust_log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1795a636dfa87a7a09bfccc08c1fd5a209f912b0" translate="yes" xml:space="preserve">
          <source>adjust_sigmoid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f400752e8c3f75018b1942ec47c4cab9c06ffe" translate="yes" xml:space="preserve">
          <source>algorithm parameter, K1 (small constant, see &lt;a href=&quot;#rccea9a164d3e-1&quot; id=&quot;id38&quot;&gt;[1]&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b363ff925b573746a013d2eafa863858398bfc" translate="yes" xml:space="preserve">
          <source>algorithm parameter, K2 (small constant, see &lt;a href=&quot;#rccea9a164d3e-1&quot; id=&quot;id39&quot;&gt;[1]&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cab5d8a77b270fd7a4ddc499c8021b14c754b41" translate="yes" xml:space="preserve">
          <source>and clear the drawn box/line. The &lt;code&gt;pos_1&lt;/code&gt; and &lt;code&gt;pos_2&lt;/code&gt; are arrays of length 2 containing the x- and y-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6e08c28ebae7f9eeb787cbe6d4c7a93b05fbb7" translate="yes" xml:space="preserve">
          <source>and here is the corresponding 2-D plot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6a9f2f35955862ae561681469f73517208d4c5" translate="yes" xml:space="preserve">
          <source>and pip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85050b8e61800674c8830a0b23af3e63039389a9" translate="yes" xml:space="preserve">
          <source>apply_hysteresis_threshold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d728a9e1c2a2fe68835241490af78a005531761" translate="yes" xml:space="preserve">
          <source>apply_parallel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba9f58ec04f5436e1d5f4c28f4cd083cd9f4768" translate="yes" xml:space="preserve">
          <source>approximate_polygon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f83b95350925c0c53cae9f6e3900e0d6cbe77b" translate="yes" xml:space="preserve">
          <source>astronaut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1241884f3b179cad6c22f791cc2459967137773d" translate="yes" xml:space="preserve">
          <source>autolevel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81810e63494b90b6c9190774e399d26e03272ef4" translate="yes" xml:space="preserve">
          <source>autolevel_percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bec0406497ccf8bb93933005b504d85785dfc14" translate="yes" xml:space="preserve">
          <source>ball</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a349933444aa49fa8227686cab324e7c87f24942" translate="yes" xml:space="preserve">
          <source>bezier_curve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2881339a5782907fa20db25cd84f9f448026e0d" translate="yes" xml:space="preserve">
          <source>binary_blobs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b0d7caf1596f5e4b79bf9d854c029bb1ee786e" translate="yes" xml:space="preserve">
          <source>binary_closing</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
