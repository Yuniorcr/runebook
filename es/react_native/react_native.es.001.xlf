<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="2591813530e6a042f3e4368f8631aaa2429f3899" translate="yes" xml:space="preserve">
          <source>&quot;Attractive&quot;</source>
          <target state="translated">&quot;Attractive&quot;</target>
        </trans-unit>
        <trans-unit id="424e049218f78575665fb240a0cc67a900d8b37a" translate="yes" xml:space="preserve">
          <source>&quot;Slow Navigator transitions&quot; is the most common manifestation of this, but there are other times this can happen. Using InteractionManager can be a good approach, but if the user experience cost is too high to delay work during an animation, then you might want to consider LayoutAnimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8249e0064881697f9053980132d1e4f99c733b" translate="yes" xml:space="preserve">
          <source>$Enum</source>
          <target state="translated">$Enum</target>
        </trans-unit>
        <trans-unit id="15592fda29ecdb7787d77de06ea1384ff4216371" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015&amp;ndash;2018 Facebook Inc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4400070c3a87bfdb1b9337243aa40e6674739417" translate="yes" xml:space="preserve">
          <source>&amp;gt;) =&amp;gt; void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00784714dd685f1086cd3a873f78203bb82bfb5" translate="yes" xml:space="preserve">
          <source>'animated' (boolean) - Whether the list should do an animation while scrolling. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103e34b186dc14acd70ff84c85c9fcb1c0162de6" translate="yes" xml:space="preserve">
          <source>'calendar': Show a date picker in calendar mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d3e3ed2b8f0ae14c660ce742104605c2af31ab" translate="yes" xml:space="preserve">
          <source>'changed' (array of &lt;code&gt;ViewToken&lt;/code&gt;s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4450afca7dc97dfbaf0689ef06a77fd1bb876e5" translate="yes" xml:space="preserve">
          <source>'clock': Show a time picker in clock mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d5428947f8e52531874160ec7eb1fb4b6a1e8f" translate="yes" xml:space="preserve">
          <source>'default': Show a default native date picker(spinner/calendar) based on android versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44cc1e85d83f6ad423c4af52fed39eafce3ba3a" translate="yes" xml:space="preserve">
          <source>'default': Show a default time picker based on Android versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe78190b04f6daeac8c14acaeae3dc81ed04f33" translate="yes" xml:space="preserve">
          <source>'dialog': Show a modal dialog. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dcb8e4f638788d1365e051c603c48737ac2e53" translate="yes" xml:space="preserve">
          <source>'dropdown': Shows a dropdown anchored to the picker view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f58d7807cc64e8d6ec568375d7da40a1f050e9" translate="yes" xml:space="preserve">
          <source>'highlight' (function) - &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db816252a5693150d328105a8db89fb13c1b8b24" translate="yes" xml:space="preserve">
          <source>'index' (number) - Item's index within the section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c642c45216c6cbed3529a967c85529a58a3cc2a1" translate="yes" xml:space="preserve">
          <source>'index' (number) - The index to scroll to. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14c8a7ea7f3efdf7cb8e8a3d9abcdeb66f710db" translate="yes" xml:space="preserve">
          <source>'item' (object) - The item to scroll to. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa98fb71ef27ea6816ae9c03cfb44d49726a75d0" translate="yes" xml:space="preserve">
          <source>'item' (object) - the item object as specified in this section's &lt;code&gt;data&lt;/code&gt; key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c12ee08b902b0f6d497ec7298587d2530297a67" translate="yes" xml:space="preserve">
          <source>'itemIndex' (number) - Index within section for the item to scroll to. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17729d9106d3148857c031b3bfa416898de67294" translate="yes" xml:space="preserve">
          <source>'newProps' (object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390d94f0483c19da11361dc6770c6f6cfa1bb507" translate="yes" xml:space="preserve">
          <source>'none' (the default), drags do not dismiss the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5fc3373fb2b5d6762adb4ddd5532c9322a84fa" translate="yes" xml:space="preserve">
          <source>'offset' (number) - The offset to scroll to. In case of &lt;code&gt;horizontal&lt;/code&gt; being true, the offset is the x-value, in any other case the offset is the y-value. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e88f103828e43f392c7794b86f47ce2b261bd5" translate="yes" xml:space="preserve">
          <source>'on-drag', the keyboard is dismissed when a drag begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8a393711eb000b296402f624c41108fe96c1a0" translate="yes" xml:space="preserve">
          <source>'section' (object) - The full section object as specified in &lt;code&gt;sections&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d35f2c4610d0378709349e745788fd3a91a971" translate="yes" xml:space="preserve">
          <source>'sectionIndex' (number) - Index for section that contains the item to scroll to. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab26e83d8aabe12740583a554fe7f5b50082b9e9" translate="yes" xml:space="preserve">
          <source>'select' (enum) - possible values are 'leading', 'trailing'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb974fe37d6a9ea8e96db2b6bfccdfb449bd1a8" translate="yes" xml:space="preserve">
          <source>'separators' (object) - An object with the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f01225e79f79e854a25b83a5a2a29c60b6e3121" translate="yes" xml:space="preserve">
          <source>'spinner': Show a date picker in spinner mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664788e769c8baf44bcc75df3d26c6a145143557" translate="yes" xml:space="preserve">
          <source>'spinner': Show a time picker in spinner mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5295820984ab784cfd97d72be99a4fe4e7b185" translate="yes" xml:space="preserve">
          <source>'unhighlight' (function) - &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668d87cf507e475ad4823ceccc291b6b2472983e" translate="yes" xml:space="preserve">
          <source>'updateProps' (function) - &lt;code&gt;(select, newProps) =&amp;gt; void&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215f6d8d762739ca5665682120065cb5ce5019c3" translate="yes" xml:space="preserve">
          <source>'viewOffset' (number) - A fixed number of pixels to offset the final target position, e.g. to compensate for sticky headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29804b845b0085ae71ee14d7df17aa4f87263393" translate="yes" xml:space="preserve">
          <source>'viewOffset' (number) - A fixed number of pixels to offset the final target position. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd35a8959eb182836884c7640925d44709d0777" translate="yes" xml:space="preserve">
          <source>'viewPosition' (number)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404d820aec3a4df8341744fc8c827382aa94908d" translate="yes" xml:space="preserve">
          <source>'viewPosition' (number) - A value of &lt;code&gt;0&lt;/code&gt; places the item specified by index at the top, &lt;code&gt;1&lt;/code&gt; at the bottom, and &lt;code&gt;0.5&lt;/code&gt; centered in the middle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2d69203c7fc90701a15ed5002d3da6acb2796a" translate="yes" xml:space="preserve">
          <source>'viewableItems' (array of &lt;code&gt;ViewToken&lt;/code&gt;s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06797d453d4b2f57f6c87d40d4a8780895b47b05" translate="yes" xml:space="preserve">
          <source>() =&amp;gt; renderable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3725fa6f06c2d492033a13b5e7a0071c5aad835b" translate="yes" xml:space="preserve">
          <source>(Android-only) Sets the elevation of a view, using Android's underlying &lt;a href=&quot;https://developer.android.com/training/material/shadows-clipping.html#Elevation&quot;&gt;elevation API&lt;/a&gt;. This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b63dc52473b9a18dd26b1f495f7f89b0d0d4e3" translate="yes" xml:space="preserve">
          <source>(Apple TV only)* When set to true, this view will be focusable and navigable using the Apple TV remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095eb16bae39f2a55d42581cc38ebf5f9667414e" translate="yes" xml:space="preserve">
          <source>(Developer) React components are designed with strong isolation in mind: You should be able to drop a component anywhere in your application, trusting that as long as the props are the same, it will look and behave the same way. Text properties that could inherit from outside of the props would break this isolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02a30f022e73e1089b4bc5b7e587346dad50369" translate="yes" xml:space="preserve">
          <source>(Implementor) The implementation of React Native is also simplified. We do not need to have a &lt;code&gt;fontFamily&lt;/code&gt; field on every single element, and we do not need to potentially traverse the tree up to the root every time we display a text node. The style inheritance is only encoded inside of the native Text component and doesn't leak to other components or the system itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c1735060d5c254357f443bed4c62f3292e1ff3" translate="yes" xml:space="preserve">
          <source>(Others)</source>
          <target state="translated">(Others)</target>
        </trans-unit>
        <trans-unit id="10910835dac06afc048a9db2cb2a48700e640c88" translate="yes" xml:space="preserve">
          <source>(item: Item, index: number) =&amp;gt; string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1694290cc3aa691445ed23c8dad1d3bfb3ac73c9" translate="yes" xml:space="preserve">
          <source>(props) =&amp;gt; renderable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1c9522ebf541b245e58c52a98554a64982f5e1" translate="yes" xml:space="preserve">
          <source>(rowData, sectionID, rowID, highlightRow) =&amp;gt; renderable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58749be7266ca21fdb0aa150d934debe861c5b31" translate="yes" xml:space="preserve">
          <source>(sectionData, sectionID) =&amp;gt; renderable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a23bd569288081b820ae2643f404b5d89b784ec" translate="yes" xml:space="preserve">
          <source>(sectionID, rowID, adjacentRowHighlighted) =&amp;gt; renderable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67f1b9b89973a083cf51e10e9e25f592171fd9d" translate="yes" xml:space="preserve">
          <source>(visibleRows, changedRows) =&amp;gt; void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c84433ef1998dc1e29bbf549ee3f33dec9914e" translate="yes" xml:space="preserve">
          <source>) =&amp;gt; void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dab0023e499ad68b923d523a2973ec7a096a1cc" translate="yes" xml:space="preserve">
          <source>, result: ?Array&amp;lt;Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122fd022cee342765ceb21ce497963e20c816263" translate="yes" xml:space="preserve">
          <source>...and &lt;code&gt;button.js&lt;/code&gt; code contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a308b9c52057380a14629a0e94f043a8d82659c2" translate="yes" xml:space="preserve">
          <source>...the packager will bundle and serve the image corresponding to device's screen density. For example, &lt;code&gt;check@2x.png&lt;/code&gt;, will be used on an iPhone 7, while&lt;code&gt;check@3x.png&lt;/code&gt; will be used on an iPhone 7 Plus or a Nexus 5. If there is no image matching the screen density, the closest best option will be selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ce78d86ede6d7664cd643617f88807f3bab7f2" translate="yes" xml:space="preserve">
          <source>// No-op for iOS, but used on the web. Should not be documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c15e7147ddeb59729812cef3637100a45cfb6ea" translate="yes" xml:space="preserve">
          <source>1. Add App Transport Security exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a1f5ce1f015155cdb2dc8db5e1eddf87d040c3" translate="yes" xml:space="preserve">
          <source>1. Collecting a trace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42ef9e267f18289ac2df296b1cd09b2e90825f2" translate="yes" xml:space="preserve">
          <source>1. Create a &lt;code&gt;index.js&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1c71302039e8d8fa01db25400203b290628c6f" translate="yes" xml:space="preserve">
          <source>1. Create an Event Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd217a1b2ed69c9a9528569dcd58f35a0905ec1" translate="yes" xml:space="preserve">
          <source>1. Create the &lt;code&gt;ViewManager&lt;/code&gt; subclass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22fe5bda2f2d242d0773f526fd4c20f85bb6634" translate="yes" xml:space="preserve">
          <source>1. Enable App Transport Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c9869a851cf7d123f8270adc28a67ff217cbcd" translate="yes" xml:space="preserve">
          <source>1. Enable Debugging over USB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4771e44a3718eb70299910135c209f7eb6f5a63" translate="yes" xml:space="preserve">
          <source>1. Install Android Studio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74416e8346b3f1004ea8c96c3417587477d3f79e" translate="yes" xml:space="preserve">
          <source>1. Install Git</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edae085d1968c8fddc579bf25e708b4ea01b3f2" translate="yes" xml:space="preserve">
          <source>1. Installing the fork</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ca7494da294cc46e3e6708e0470c1d878d0eab" translate="yes" xml:space="preserve">
          <source>1. Plug in your device via USB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a35dfe19165d6d77e8b6e623d94820141e557c1" translate="yes" xml:space="preserve">
          <source>1. Run the packager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b517b18a319c3c4a79acece93402da0bdf97df99" translate="yes" xml:space="preserve">
          <source>1. Set up directory structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ea9f197787bf49664a87675040527264eb77ee" translate="yes" xml:space="preserve">
          <source>1. Upgrade the &lt;code&gt;react-native&lt;/code&gt; dependency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bce1e6a19a9ca54a5372d9d211435a284090031" translate="yes" xml:space="preserve">
          <source>1. Wi-Fi network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1174078d33f03ee53dabbc132d5d180d397bf5ca" translate="yes" xml:space="preserve">
          <source>100 character line length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa9dc3c7bee9e3cd97593da8cd50329dad257a4" translate="yes" xml:space="preserve">
          <source>2 spaces for indentation (no tabs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5de82f3d483da66b6cbe96eae94c5c023e9c7f" translate="yes" xml:space="preserve">
          <source>2. Add your React Native code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2adfcce7e1e99f110be6b74d8f71353e9d082e9" translate="yes" xml:space="preserve">
          <source>2. Adding gradle dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb874387f630d6a5b86291b8304a08a4f64f624" translate="yes" xml:space="preserve">
          <source>2. Configure code signing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9994f05075f3b59b69ee6433e79b4613b574007e" translate="yes" xml:space="preserve">
          <source>2. Configure release scheme</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb39c760db01f22dede966f57dc455d18bde56a" translate="yes" xml:space="preserve">
          <source>2. Event Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55762bb9cfb85020ca99cd5e6ae4894ac705641c" translate="yes" xml:space="preserve">
          <source>2. IP address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02f64d9988cfa53d3bff02abb3a4a0b39d5fa20" translate="yes" xml:space="preserve">
          <source>2. Implement method &lt;code&gt;createViewInstance&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60de64df0432d843872cd8315cd887c0551427fb" translate="yes" xml:space="preserve">
          <source>2. Install JavaScript dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7c1cfd3702593e3554d9b3791bc21943ebf5bd" translate="yes" xml:space="preserve">
          <source>2. Install the &lt;code&gt;react-native-git-upgrade&lt;/code&gt; module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4f5e89f7184f15d6d8296a9e34a80a076ed3d2" translate="yes" xml:space="preserve">
          <source>2. Install the Android SDK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bef5ac7e4b88c0c01d644a8b14d54c0657749e" translate="yes" xml:space="preserve">
          <source>2. Plug in your device via USB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3aaf97f137c974718636106399fb12422538a1" translate="yes" xml:space="preserve">
          <source>2. Reading the trace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72b8a27b0b55465d185d8094c3f2fd8de3a79c7" translate="yes" xml:space="preserve">
          <source>2. Run the app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b366d2deeb9c20614f1a0326e7efb97460a51e" translate="yes" xml:space="preserve">
          <source>2. Run the packager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1a60a650908515decfee4758150778a7d0e48" translate="yes" xml:space="preserve">
          <source>2. Upgrade your project templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5b898cee6a60f00da6d4242ccecb976bcdde14" translate="yes" xml:space="preserve">
          <source>3. Adding the &lt;code&gt;:ReactAndroid&lt;/code&gt; project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e195927ac074c5f710b24c602a1d0add0ebc512a" translate="yes" xml:space="preserve">
          <source>3. Build and Run your app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5162a46f58d2ab79978380c03db84d5ccd4c15" translate="yes" xml:space="preserve">
          <source>3. Configure app to use static bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e437883105300be1aa0a618093c3ed9c31b871" translate="yes" xml:space="preserve">
          <source>3. Configure permissions for development error overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0de8dfe190ccc00ebbdeb3fc3a2b4eca7cc9d4c" translate="yes" xml:space="preserve">
          <source>3. Configure the ANDROID_HOME environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb5e7bf7c136e4f503eff46336d62e3fd6bddf8" translate="yes" xml:space="preserve">
          <source>3. Expose view property setters using &lt;code&gt;@ReactProp&lt;/code&gt; (or &lt;code&gt;@ReactPropGroup&lt;/code&gt;) annotation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7c8c165e5ec4ae73fc6d87f1d6da5cb1730b59" translate="yes" xml:space="preserve">
          <source>3. Find your process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb91b2c182d5fd2f10c002cd6153a11f404f716" translate="yes" xml:space="preserve">
          <source>3. Install CocoaPods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a083dedf6422b430a1c662867fc3a774ec87aca7" translate="yes" xml:space="preserve">
          <source>3. Network/router configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dd5c7f66be7bfb2bd824724c8b0feafd57a6b4" translate="yes" xml:space="preserve">
          <source>3. Run the app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2f469b1d769ace8a324ed56d223f5204764e2c" translate="yes" xml:space="preserve">
          <source>3. Run the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fce02b6d0843a910e4d81844c56fbee0e5c5a94" translate="yes" xml:space="preserve">
          <source>3. Run your app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9153c74e05ad30caa9b3dbcc65f0fd1248662a6" translate="yes" xml:space="preserve">
          <source>3. Wire Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bdb1505e412e41588d6e3076e0d3faa4a5c433" translate="yes" xml:space="preserve">
          <source>4. Build app for release</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33105543cc50cf75c28020f23db907880edeb19" translate="yes" xml:space="preserve">
          <source>4. Making 3rd-party modules use your fork</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cad682dcff535850c02ca7ec43e00aa685122b3" translate="yes" xml:space="preserve">
          <source>4. Register the &lt;code&gt;ViewManager&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a488696b4f67585f352e88f9cf4c137e27d96156" translate="yes" xml:space="preserve">
          <source>4. Resolve the conflicts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf860b4b86ed371538e2d3858196b29d710cda7" translate="yes" xml:space="preserve">
          <source>5. Implement the JavaScript module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8128646ca19941278cbb64800995b0349505cdbe" translate="yes" xml:space="preserve">
          <source>80 character line length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2238313638e0052638b0adf46c3bbb1c154229" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#createanimatedcomponent&quot;&gt;&lt;code&gt;createAnimatedComponent()&lt;/code&gt;&lt;/a&gt; can be used to make a component animatable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f68930f10f48ad766545daf49f8ac3ab2d4d86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#decay&quot;&gt;&lt;code&gt;Animated.decay()&lt;/code&gt;&lt;/a&gt; starts with an initial velocity and gradually slows to a stop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a807a5fe8afa1414e4295ea78ee69c8488ab67f6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#delay&quot;&gt;&lt;code&gt;Animated.delay()&lt;/code&gt;&lt;/a&gt; starts an animation after a given delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3594b5ad2cced8f77b46632f477b322e5ed3e366" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#interpolate&quot;&gt;&lt;code&gt;interpolate()&lt;/code&gt;&lt;/a&gt; supports multiple range segments as well, which is handy for defining dead zones and other handy tricks. For example, to get an negation relationship at -300 that goes to 0 at -100, then back up to 1 at 0, and then back down to zero at 100 followed by a dead-zone that remains at 0 for everything beyond that, you could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064ee5d8882f73e712c3a633cb8c0e3ca7239ef6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#parallel&quot;&gt;&lt;code&gt;Animated.parallel()&lt;/code&gt;&lt;/a&gt; starts a number of animations at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ffd063dff89ff0b14d3eaceb5af6602fa10e6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#sequence&quot;&gt;&lt;code&gt;Animated.sequence()&lt;/code&gt;&lt;/a&gt; starts the animations in order, waiting for each to complete before starting the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65a4cefd4578616301a2778b545a2bb5991ce10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#spring&quot;&gt;&lt;code&gt;Animated.spring()&lt;/code&gt;&lt;/a&gt; provides a simple spring physics model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbec3f3483ce2a1582c8e4889536e9e827ec4fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#stagger&quot;&gt;&lt;code&gt;Animated.stagger()&lt;/code&gt;&lt;/a&gt; starts animations in order and in parallel, but with successive delays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef2fc06940efaa33449bf07e8cd41a293737232" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#timing&quot;&gt;&lt;code&gt;Animated.timing()&lt;/code&gt;&lt;/a&gt; animates a value over time using &lt;a href=&quot;easing&quot;&gt;easing functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a72bc65f21d13ce334c0da6147ac55cf3a3079" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#value&quot;&gt;&lt;code&gt;Animated.Value()&lt;/code&gt;&lt;/a&gt; for single values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bd1624f8a26aa6fcdaadfdfe2236ed6f5e8f53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#valuexy&quot;&gt;&lt;code&gt;Animated.ValueXY()&lt;/code&gt;&lt;/a&gt; for vectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d0cf5cedca9e2f4f2308c99e6acb669eb7d03b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;button&quot;&gt;Button&lt;/a&gt; provides a basic button component that is rendered nicely on all platforms. The minimal example to display a button looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf753f6a7eace68449d1abfdd8aaf4404e988790" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#back&quot;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt; provides a simple animation where the object goes slightly back before moving forward</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6757caa3994cf6516f4348a59951a8b8dfb7d053" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#bezier&quot;&gt;&lt;code&gt;bezier&lt;/code&gt;&lt;/a&gt; provides a cubic bezier curve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6775b4f8784c53f3d0f130f93103c3aadfe82c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#bounce&quot;&gt;&lt;code&gt;bounce&lt;/code&gt;&lt;/a&gt; provides a bouncing animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9110c659fa7f3c65a5a86682ea939f29e74c0597" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#circle&quot;&gt;&lt;code&gt;circle&lt;/code&gt;&lt;/a&gt; provides a circular function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded9971857233cdc7c27eb22413349ee882e094c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#ease&quot;&gt;&lt;code&gt;ease&lt;/code&gt;&lt;/a&gt; provides a simple inertial animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f6066918cba4706067b7c4df8b84c064c679b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#elastic&quot;&gt;&lt;code&gt;elastic&lt;/code&gt;&lt;/a&gt; provides a simple spring interaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d0bd59d95b07f2b04e2abe111faf7cc27e9b7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#exp&quot;&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/a&gt; provides an exponential function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c53aeab229762fd588842a26c245608b087fd42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; runs an easing function forwards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae7df9d4435a84333c0b0e4bc4079f4bb5efc6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#inout&quot;&gt;&lt;code&gt;inOut&lt;/code&gt;&lt;/a&gt; makes any easing function symmetrical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a883d34d1b1decb7113501e639b20efdb65adc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#out&quot;&gt;&lt;code&gt;out&lt;/code&gt;&lt;/a&gt; runs an easing function backwards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398168e2afbddc4b69a4e7807a25cf88ebe69fbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#sin&quot;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt; provides a sinusoidal function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6104e626da4667c0d92ac46c5ceb25887862148" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#arrows&quot;&gt;Arrow functions&lt;/a&gt;: &lt;code&gt;&amp;lt;C onPress={() =&amp;gt; this.setState({pressed: true})}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386abb514bd7fa1ae8b0ce3d20f9198c4e76a1fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#classes&quot;&gt;Classes&lt;/a&gt;: &lt;code&gt;class C extends React.Component { render() { return &amp;lt;View /&amp;gt;; } }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166de4327bb5305a72ef43bc538b64b3067520cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#default-rest-spread&quot;&gt;Call spread&lt;/a&gt;: &lt;code&gt;Math.max(...array);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5675829d9957604c68024baceb3c6b1e3f736774" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#destructuring&quot;&gt;Destructuring&lt;/a&gt;: &lt;code&gt;var {isActive, style} = this.props;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e718897aedc2a8fd945fff683e3da3edefc75f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Computed Properties&lt;/a&gt;: &lt;code&gt;var key = 'abc'; var obj = {[key]: 10};&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83a27e53e966e0752649a4c07be87539792a118" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Object Concise Method&lt;/a&gt;: &lt;code&gt;var obj = { method() { return 10; } };&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4461d381467a631dbabe2376ded1ea3eec97c96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Object Short Notation&lt;/a&gt;: &lt;code&gt;var name = 'vjeux'; var obj = { name };&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc07add00548e2b0432051b51bc7676989142665" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#modules&quot;&gt;Modules&lt;/a&gt;: &lt;code&gt;import React, { Component } from 'react';&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8263315e4d74233620154e9e122c5d1c1a4a99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#template-strings&quot;&gt;Template Literals&lt;/a&gt;: &lt;code&gt;var who = 'world'; var str = `Hello ${who}`;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9313bb66a336bc9f9bfa64921eaf4ca224988bfb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a package management tool for iOS and macOS development. We use it to add the actual React Native framework code locally into your current project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fce302d6ed6d4cf692bda1f39cc62ba417795c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;: &lt;code&gt;function foo(x: ?number): string {}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68caeb98ca3b7ee0895e87be64674d6a1a11ac78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;Block scoping&lt;/a&gt;: &lt;code&gt;let greeting = 'hi';&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f39e102dbf6964a4286c6d5d5195995bb641add" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;Constants&lt;/a&gt;: &lt;code&gt;const answer = 42;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef452f1782fe7e745d5da8f31633cce5649a814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.android.com/studio/index.html&quot;&gt;Download and install Android Studio&lt;/a&gt;. Choose a &quot;Custom&quot; setup when prompted to select an installation type. Make sure the boxes next to all of the following are checked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52093488d8aa24c42b2323dbe14ac4269ee4aad7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for...of&lt;/a&gt;: &lt;code&gt;for (var num of [1, 2, 3]) {}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5220ecff86bb4743806cdccf1aca79310a7bbc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZjGY5n&quot;&gt;Reactiflux&lt;/a&gt; is a Discord chat where a lot of React-related discussion happens, including React Native. Discord is just like Slack except it works better for open source projects with a zillion contributors. Check out the #react-native channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91586fd799e2ae47a04a0cd563a3d0036cb4f3f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.expo.io&quot;&gt;Expo&lt;/a&gt; is a development environment plus application that focuses on letting you build React Native apps in the Expo development environment, without ever touching Xcode or Android Studio. If you wish React Native was even more JavaScripty and webby, check out Expo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3331b312f2a57317a3a563576633ce2bcfdbc7c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/watchman&quot;&gt;Watchman&lt;/a&gt; is a tool by Facebook for watching changes in the filesystem. It is highly recommended you install it for better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c62232de56ec2d3fcffa6882c15a06d7b88346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt; is a tool by Facebook for watching changes in the filesystem. It is highly recommended you install it for better performance, but it's alright to skip this if you find the process to be tedious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409978e60800b80cb711c36fc3dd80b7ffdf2d68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/TouchableOpacity.js&quot;&gt;TouchableOpacity&lt;/a&gt; uses &lt;code&gt;setNativeProps&lt;/code&gt; internally to update the opacity of its child component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a9f4caf15f6ce804d085f883a959dd4c67f5c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/react-native/issues/12793&quot;&gt;ListView scrolling&lt;/a&gt;. The issue can be easily worked around by setting &lt;code&gt;removeClippedSubviews&lt;/code&gt; to false in ListView and similar components. For more discussion of this issue, see &lt;a href=&quot;https://github.com/facebook/react-native/pull/12944&quot;&gt;this PR&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cc49dc5ff03915051483fde92cdb134eb565cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/infinitered/ignite&quot;&gt;Ignite&lt;/a&gt; is a starter kit that uses Redux and a few different common UI libraries. It has a CLI to generate apps, components, and containers. If you like all of the individual tech choices, Ignite could be perfect for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b8c1c55f4bb4f178484399ff7133b1be3300ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;Function Trailing Comma&lt;/a&gt;: &lt;code&gt;function f(a, b, c,) { }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffaa9f3398712ab1629ac0377a21a9b1f25a9ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/react-community/create-react-native-app&quot;&gt;Create React Native App&lt;/a&gt; is the easiest way to start building a new React Native application. It allows you to start a project without installing or configuring any tools to build native code - no Xcode or Android Studio installation required (see &lt;a href=&quot;getting-started#caveats&quot;&gt;Caveats&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6fab1a30f64caa8c29a3cf88fa77364f1f5ffb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Object Spread&lt;/a&gt;: &lt;code&gt;var extended = { ...obj, a: 10 };&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1074d13e8c1a20671f6101b43413b2bfa8f2e1e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Rest Params&lt;/a&gt;: &lt;code&gt;function(type, ...args) { }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388b29fbab338d2e301fe32df45265f901707b34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tc39/ecmascript-asyncawait&quot;&gt;Async Functions&lt;/a&gt;: &lt;code&gt;async function doStuffAsync() { const foo = await doOtherStuffAsync(); }&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695afaddeabeffd0340a9b91f422e9825c348dd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/design-principles/&quot;&gt;Human Interface Guidelines&lt;/a&gt; are great resources for learning more about designing for mobile platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea06439d7609db29f6736fe5ee62b8b4f65973c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;CodePush&lt;/a&gt; is a service from Microsoft that makes it easy to deploy live updates to your React Native app. If you don't like going through the app store process to deploy little tweaks, and you also don't like setting up your own backend, give CodePush a try.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9719ef1757e6aef726df518e7870c14f5248eef0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; is the IDE that Facebook uses internally for JavaScript development. The killer feature of Nuclide is its debugging ability. It also has great inline Flow support. &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; is another IDE that is popular with JavaScript developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9adc5d5315a7c9d71f4aa31f13a51b784d905d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;: &lt;code&gt;&amp;lt;View style={{color: 'red'}} /&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc4c1210482753e2f8af07a8f44dccfe096eb9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;Manually link&lt;/a&gt; the PushNotificationIOS library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c91a0248d96f87448057060bfeddc164d9f3110" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;textinput#content&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; is a basic component that allows the user to enter text. It has an &lt;code&gt;onChangeText&lt;/code&gt; prop that takes a function to be called every time the text changed, and an &lt;code&gt;onSubmitEditing&lt;/code&gt; prop that takes a function to be called when the text is submitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c88c78a48df2279c6930dabdd2f77ed8dd645b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;touchableopacity&quot;&gt;&lt;strong&gt;TouchableOpacity&lt;/strong&gt;&lt;/a&gt; can be used to provide feedback by reducing the opacity of the button, allowing the background to be seen through while the user is pressing down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66c3881cb3ab33f33fe2715c9d64b94141c050b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; vs &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt;&lt;/a&gt; - which one to use?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cdf0b4a1f2f1046195786d83cbf4b353c993e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#f0f'&lt;/code&gt; (#rgb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f38447a58e9873faf5b532701e1ea9cb8e20bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#f0ff'&lt;/code&gt; (#rgba)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39cdb9b0c290b0eee57e9e525b1d55eef8c9209" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#ff00ff'&lt;/code&gt; (#rrggbb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ea4ae9b4c9d198f920808cf115bd1fc51480c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#ff00ff00'&lt;/code&gt; (#rrggbbaa)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db39c6cf3d93a55f34b02cbd398a2dad7d55db25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'adjustable'&lt;/code&gt; - The element allows adjustment over a range of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2246b0d4b0a94637ab98e04797ae3431ce93d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'allowsDirectInteraction'&lt;/code&gt; - The element allows direct touch interaction for VoiceOver users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749c16630825145aa74c7ff083c82d345fc7c493" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt; - Always allow a user to over-scroll this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b4290d0eae18e86e0abcc329487dcd6127a8f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt; - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5538bb01a4445151cc3154d54888cf0d9145e3e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt;, the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e667937a43bd7978dac77f5481a83b3bd11f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'assertive'&lt;/code&gt; - Accessibility services should interrupt ongoing speech to immediately announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0438bf2c5f32541892c4255d21ef0d9530bd436" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt; - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2997c0e62014324405c5a6ca7f2f441c989e49fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt; - The system determines whether the view is important for accessibility - default (recommended).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4465292d7b7bba4f25bee4dac05d3b7222387d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt;: The View can be the target of touch events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cde7102825602a0f3aa507cacc0f9529730063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'black'&lt;/code&gt;, scroll indicator is black. This style is good against a light background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ca268e335f907834308bbe96f67c1cbcdbd7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'box-none'&lt;/code&gt;: The View is never the target of touch events but it's subviews can be. It behaves like if the view had the following classes in CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701def4653bca55a7c16fad3659f670ecb6c31ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'box-only'&lt;/code&gt;: The view can be the target of touch events but it's subviews cannot be. It behaves like if the view had the following classes in CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac552f0fadc1686998588cb22f1da94df792b59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'button'&lt;/code&gt; - The element should be treated as a button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82e5edd8cedbf416fa4943e17d2602a49267eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'center'&lt;/code&gt; will align the snap in the center</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa5672317917033645d6b65aba6e1a9c4048391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'compatibility'&lt;/code&gt; - WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53263bd97caae25d73bbbc1c3796f7ca0a2e1ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'default'&lt;/code&gt; (the default), same as &lt;code&gt;black&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79cc1b3ace92b3532d4a92503a51c1552da82d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'disabled'&lt;/code&gt; - The element is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dee7c6295f2814b12d8efc690b23d33372cb05d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'end'&lt;/code&gt; will align the snap at the right (horizontal) or bottom (vertical)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36f203c27c137b3c97804fbbf1720fe04cafeef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'fast'&lt;/code&gt;: 0.99</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f5e204965e2779e477f6e3d05a24aba6245273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'frequentUpdates'&lt;/code&gt; - The element frequently changes its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0905e707a47c2b50dfa6054fe898efe24a22d128" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'handled'&lt;/code&gt;, the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d69f8e50a6fdad985a8fa9936c913fdf1cfe7d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'header'&lt;/code&gt; - The element is a header that divides content into sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ba0d9b7d0d5f4f8bfebc40da342b4e936b9d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'image'&lt;/code&gt; - The element should be treated as an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef38a966f4f65bbbf40b44db282115d57709d6de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'interactive'&lt;/code&gt;, the keyboard is dismissed interactively with the drag and moves in synchrony with the touch; dragging upwards cancels the dismissal. On android this is not supported and it will have the same behavior as 'none'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0534497399f938aad1ec559136e84664fa1a9cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'key'&lt;/code&gt; - The element should be treated like a keyboard key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c0842dfb1480adf83cd51e4f16123e6aa8e8a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'link'&lt;/code&gt; - The element should be treated as a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddc0c6ec59a83ddec76f12a701160eae7fbb3f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; (default) - WebView will not allow a secure origin to load content from an insecure origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a008bbf8bc3af4106ad91a5b446ddfcf05d830e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won't receive the tap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7dd5b71130d4cc7e902d906ad1eb529fabacde8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; - Never allow a user to over-scroll this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7064eefdaf8a26b1d4e61df25b34f406041b2467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'no'&lt;/code&gt; - The view is not important for accessibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d375aebd80817aa391b2c55d59d7c9184469790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'no-hide-descendants'&lt;/code&gt; - The view is not important for accessibility, nor are any of its descendant views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5c726879b881c0b3d2c148d09ab6de21de5f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; (the default), drags do not dismiss the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cc2e79a8a9e1946cb9431c69ceefbab25c82c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; - Accessibility services should not announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb74b9a6b1ed9818c0f5dd6e960446f2884857f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; - The element has no traits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7a625cefb8b6402eb26703a5dabea4254c5738" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt;: The View is never the target of touch events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e055e0abb767499a572d49786d4927954bd37d94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'normal'&lt;/code&gt;: 0.998 (the default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64146c996a1d184683e9420d5bd07f1d95261775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'on-drag'&lt;/code&gt;, the keyboard is dismissed when a drag begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e5b35483a30e62d77a4b1e93c5f9bff1bab613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'pageTurn'&lt;/code&gt; - Informs VoiceOver that it should scroll to the next page when it finishes reading the contents of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deee1c650e8a2a012005a22ff281eab6123bd4bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'plays'&lt;/code&gt; - The element plays sound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6d75c2654c1ace9bace0d00237004e431f636a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'polite'&lt;/code&gt;- Accessibility services should announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3753c023085340ae47caf775ce65715438a0f4de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'search'&lt;/code&gt; - The element should be treated as a search field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3da0411705b8e9e33c1b1fa947873cdab0fc726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'selected'&lt;/code&gt; - The element is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce00fac7232d1c2a2646c05450b56a3c4615332e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'start'&lt;/code&gt; (the default) will align the snap at the left (horizontal) or top (vertical)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0769c856f6f7d22d1ffc9de4e24f5050b97bc183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'startsMedia'&lt;/code&gt; - The element starts a media session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9a76fef1f670cde6b158eeb596bb182ea68783" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'summary'&lt;/code&gt; - The element provides app summary information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15571c121035c716d0ebef297f3ce541f1b77c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'text'&lt;/code&gt; - The element should be treated as text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836383dc6583fbf2939494d1b9e23935f2a0be22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'white'&lt;/code&gt;, scroll indicator is white. This style is good against a dark background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812d57b875c207198f2220535560463458d64ff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'yes'&lt;/code&gt; - The view is important for accessibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857b160cda3795e849bb775a5a7306c66059bf29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; operator goes with the variable name (e.g. &lt;code&gt;NSObject *variableName;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff04b673d53568fb804c69921d74258335744e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;- method&lt;/code&gt;, &lt;code&gt;@interface&lt;/code&gt;, and &lt;code&gt;@implementation&lt;/code&gt; brackets on the following line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7148a23ae447b7e7e1f3c5e71140c187235ae251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a &amp;lt;your_package_name&amp;gt;&lt;/code&gt; enables app-specific markers, specifically the ones built into the React Native framework. &lt;code&gt;your_package_name&lt;/code&gt; can be found in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; of your app and looks like &lt;code&gt;com.example.app&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4b1c8e7d03a53b0126852dbdadc66c493fe02b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.bash_profile&lt;/code&gt; is specific to &lt;code&gt;bash&lt;/code&gt;. If you're using another shell, you will need to edit the appropriate shell-specific config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62606f04bef3c53b4a8ebecbd9dac0839eb1fac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ACCESS_COARSE_LOCATION&lt;/code&gt;: 'android.permission.ACCESS_COARSE_LOCATION'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9902c6e7dfedafe264b8c7f9c8c1e131a967fc1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ACCESS_FINE_LOCATION&lt;/code&gt;: 'android.permission.ACCESS_FINE_LOCATION'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4303650fe6179ca1b7b18a16c9f1fe7ac94895c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ADD_VOICEMAIL&lt;/code&gt;: 'com.android.voicemail.permission.ADD_VOICEMAIL'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e897997f39acfdffb108095382d44cdfb2b7c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AlertIOS&lt;/code&gt; provides functionality to create an iOS alert dialog with a message or create a prompt for user input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec68ee027e8abe1d5019fd39fe3371633ebda008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated.Value&lt;/code&gt; can bind to style properties or other props, and can be interpolated as well. A single &lt;code&gt;Animated.Value&lt;/code&gt; can drive any number of properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85af542169f0021f8c831993ab8804ae3fe226d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faae5d0a870386061a81d7ab2d8f13af2e646cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; exports four animatable component types: &lt;code&gt;View&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, and &lt;code&gt;ScrollView&lt;/code&gt;, but you can also create your own using &lt;code&gt;Animated.createAnimatedComponent()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1acc6290ad377cd53054e47a056ab5f22dbbe26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; exports the following animatable components using the above wrapper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2efb61ca6fd17b5a66b67eccfd32af82e2b556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; is designed to be fully serializable so that animations can be run in a high performance way, independent of the normal JavaScript event loop. This does influence the API, so keep that in mind when it seems a little trickier to do something compared to a fully synchronous system. Check out &lt;code&gt;Animated.Value.addListener&lt;/code&gt; as a way to work around some of these limitations, but use it sparingly since it might have performance implications in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b3de3a5d6df28886821c04a1bf445a11da862a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; provides several animation types, the most commonly used one being &lt;a href=&quot;animated#timing&quot;&gt;&lt;code&gt;Animated.timing()&lt;/code&gt;&lt;/a&gt;. It supports animating a value over time using one of various predefined easing functions, or you can use your own. Easing functions are typically used in animation to convey gradual acceleration and deceleration of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31fa14aaa6c35594fa4b0af14e7ed7ddcb72706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; provides three types of animation types. Each animation type provides a particular animation curve that controls how your values animate from their initial value to the final value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7130e78cc3e183361ad668d511dab8b32ab534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppRegistry&lt;/code&gt; is the JS entry point to running all React Native apps. App root components should register themselves with &lt;code&gt;AppRegistry.registerComponent&lt;/code&gt;, then the native system can load the bundle for the app and then actually run the app when it's ready by invoking &lt;code&gt;AppRegistry.runApplication&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4252d98078a297e3bf0c78a9e84cefa15890c463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppRegistry&lt;/code&gt; should be &lt;code&gt;require&lt;/code&gt;d early in the &lt;code&gt;require&lt;/code&gt; sequence to make sure the JS execution environment is setup before other modules are &lt;code&gt;require&lt;/code&gt;d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d93f133bced2b3301df6f038fefab2b033f97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppState&lt;/code&gt; can tell you if the app is in the foreground or background, and notify you when the state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bfbd4d7586aac3950b7b9a1bb6c2dd33430798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncStorage&lt;/code&gt; is a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc3c3807cd7cd8eb4b3a55779f592be06a21dea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BODY_SENSORS&lt;/code&gt;: 'android.permission.BODY_SENSORS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682bb4be482a5dc53ad9e99ec797e9da83ba9c25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CALL_PHONE&lt;/code&gt;: 'android.permission.CALL_PHONE'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8990182cc6559546a71ea51a7d9a9cd6bb6312cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CAMERA&lt;/code&gt;: 'android.permission.CAMERA'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b368b885889768e515b5597e475982484dffa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CameraRoll&lt;/code&gt; provides access to the local camera roll or photo library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba0f3e3068de06af3c51057c00d5e8649c58957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Clipboard&lt;/code&gt; gives you an interface for setting and getting content from Clipboard on both iOS and Android</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ad1f404f6d1bf694946da894bc704f62c32208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConnectionType&lt;/code&gt; describes the type of connection the device is using to communicate with the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56c0da1dd0fcce5609a7384421961ea5419e25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DENIED&lt;/code&gt;: 'denied'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a290321d417d666f6f1e92de9434ced454bde7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FlatList&lt;/code&gt; is also handy if you want to render separators between your items, multiple columns, infinite scroll loading, or any number of other features it supports out of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852756916c7ef8b2e1dbc46f613e69fd1dcc7a23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET_ACCOUNTS&lt;/code&gt;: 'android.permission.GET_ACCOUNTS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d6f2d8d7f65ae02f6e0ff796dd42b8fbc226bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GRANTED&lt;/code&gt;: 'granted'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde7ddaa3ab4b6edc779747d445f750aead3ba66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImageResizeMode&lt;/code&gt; is an &lt;code&gt;Enum&lt;/code&gt; for different image resizing modes, set via the &lt;code&gt;resizeMode&lt;/code&gt; style property on &lt;code&gt;Image&lt;/code&gt; components. The values are &lt;code&gt;contain&lt;/code&gt;, &lt;code&gt;cover&lt;/code&gt;, &lt;code&gt;stretch&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c673c507277c72a05c551e4be335b7522ab8c4bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImageSource&lt;/code&gt; is an object like &lt;code&gt;{ uri: '&amp;lt;http location || file path&amp;gt;' }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f224f46da67abe6c64414911739578902d95b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InputText&lt;/code&gt; components do not work for now (i.e. they cannot receive focus).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f913cd52f2d9c32cd47af469c3c9424e3fe1c02a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Keyboard&lt;/code&gt; module to control keyboard events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a903b3efbc768854d4d7e347cda447a2ca661743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LayoutAnimation&lt;/code&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6e764c979dbb8da35c92ba7da787773d761c30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LayoutAnimation&lt;/code&gt; allows you to globally configure &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; animations that will be used for all views in the next render/layout cycle. This is useful for doing flexbox layout updates without bothering to measure or calculate specific properties in order to animate them directly, and is especially useful when layout changes may affect ancestors, for example a &quot;see more&quot; expansion that also increases the size of the parent and pushes down the row below which would otherwise require explicit coordination between the components in order to animate them all in sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9444080d485aab84fc5e506ce38ae60e9ebf2a96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Linking&lt;/code&gt; gives you a general interface to interact with both incoming and outgoing app links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea6f18c6130e319efac3a70615d724228d99cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListView&lt;/code&gt; initial rendering is too slow or scroll performance is bad for large lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b74ecb3100e9cf90eb23759b7eed920b75119eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEVER_ASK_AGAIN&lt;/code&gt;: 'never_ask_again'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c5ca2db39a7eaa5c1695664b393bf5cb276397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NavigatorIOS&lt;/code&gt; is a wrapper around &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt;&lt;code&gt;UINavigationController&lt;/code&gt;&lt;/a&gt;, enabling you to implement a navigation stack. It works exactly the same as it would on a native app using &lt;code&gt;UINavigationController&lt;/code&gt;, providing the same animations and behavior from UIKit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99964f3596d1c48786d441f0ce2a87e18f29c3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NavigatorIOS&lt;/code&gt; looks and feels just like &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt;&lt;code&gt;UINavigationController&lt;/code&gt;&lt;/a&gt;, because it is actually built on top of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e43df36bac598ec372cbb4e5aaeab55fb61748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PROCESS_OUTGOING_CALLS&lt;/code&gt;: 'android.permission.PROCESS_OUTGOING_CALLS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cf6697c662f7828fe70541922df8cbab80c88d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PanResponder&lt;/code&gt; reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize simple multi-touch gestures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35a393844438e78b458f400d6f84097a2da54bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PermissionsAndroid&lt;/code&gt; provides access to Android M's new permissions model. The so-called &quot;normal&quot; permissions are granted by default when the application is installed so long as they appear in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. However, &quot;dangerous&quot; permissions require a dialog prompt. You should use this module for those permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f287954582de63ef076b698764f68e8ea4911fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Photos&lt;/code&gt; // default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86eec165f74cc410507ce8216d1228eca841ff35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Platform.OS&lt;/code&gt; will be &lt;code&gt;ios&lt;/code&gt; when running on iOS and &lt;code&gt;android&lt;/code&gt; when running on Android.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61811820eb25e7646075a971b510e3ceb13cf194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTResponseSenderBlock&lt;/code&gt; accepts only one argument - an array of parameters to pass to the JavaScript callback. In this case we use Node's convention to make the first parameter an error object (usually &lt;code&gt;null&lt;/code&gt; when there is no error) and the rest are the results of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2868225fdda3c200512a96de4aa25115c2526d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; also provides a read-write property &lt;code&gt;appProperties&lt;/code&gt;. After &lt;code&gt;appProperties&lt;/code&gt; is set, the React Native app is re-rendered with new properties. The update is only performed when the new updated properties differ from the previous ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70e777758a8ef5b4fd699f0639924449916d8fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; has an initializer that allows you to pass arbitrary properties down to the React Native app. The &lt;code&gt;initialProperties&lt;/code&gt; parameter has to be an instance of &lt;code&gt;NSDictionary&lt;/code&gt;. The dictionary is internally converted into a JSON object that the top-level JS component can reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e0f63e11d62cb5532695e76954a36849ce2710" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; supports 4 different size flexibility modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f98fd865fec26339f5c990530596d2f5222cf36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootViewSizeFlexibilityNone&lt;/code&gt; is the default value, which makes a root view's size fixed (but it still can be updated with &lt;code&gt;setFrame:&lt;/code&gt;). The other three modes allow us to track React Native content's size updates. For instance, setting mode to &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt; will cause React Native to measure the content's height and pass that information back to &lt;code&gt;RCTRootView&lt;/code&gt;'s delegate. An arbitrary action can be performed within the delegate, including setting the root view's frame, so the content fits. The delegate is called only when the size of the content has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38d72efd67ab9f4508e0c33fb5fb49a5eb72ed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCT_EXPORT_METHOD&lt;/code&gt; supports all standard JSON object types, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33fa8901194cfb3be1b1423bf78a31e786f8119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CALENDAR&lt;/code&gt;: 'android.permission.READ_CALENDAR'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dff09ba64f6e89f162352fce6dfab31723795d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CALL_LOG&lt;/code&gt;: 'android.permission.READ_CALL_LOG'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074b5d356af195130bd0e18d50321d6ab18ac66d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CONTACTS&lt;/code&gt;: 'android.permission.READ_CONTACTS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ca38def1223e769e06ae9667e87a39b125494b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;: 'android.permission.READ_EXTERNAL_STORAGE'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8511e8a8e09d3de898ea6bed64c58ab6798454ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_PHONE_STATE&lt;/code&gt;: 'android.permission.READ_PHONE_STATE'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c13d7b13d84f74e535ff6a34a4da5082a7f0af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_SMS&lt;/code&gt;: 'android.permission.READ_SMS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6155cb614ddc663ce1011186eecb851d4cc852c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_MMS&lt;/code&gt;: 'android.permission.RECEIVE_MMS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2cb5772e4bb5e19dc9e29024709f42e3716ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_SMS&lt;/code&gt;: 'android.permission.RECEIVE_SMS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13137e730b49365e92b21ea8960ff3e0eaad7356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_WAP_PUSH&lt;/code&gt;: 'android.permission.RECEIVE_WAP_PUSH'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ee95e5bf78071b6871531b5669ef390a10b7e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECORD_AUDIO&lt;/code&gt;: 'android.permission.RECORD_AUDIO'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a414f651dab3b0ba51734119ce920cd0eb48ce7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RNHighScores&lt;/code&gt; is the name of your module that will be used when you add a view to React Native from within your iOS application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c3db8677e0ac4d77736dc02bf22da0c60e3f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactContextBaseJavaModule&lt;/code&gt; requires that a method called &lt;code&gt;getName&lt;/code&gt; is implemented. The purpose of this method is to return the string name of the &lt;code&gt;NativeModule&lt;/code&gt; which represents this class in JavaScript. So here we will call this &lt;code&gt;ToastExample&lt;/code&gt; so that we can access it through &lt;code&gt;React.NativeModules.ToastExample&lt;/code&gt; in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbafb3b1d687d0c403440159724f04d32fddc20b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SEND_SMS&lt;/code&gt;: 'android.permission.SEND_SMS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8b4039254b0a3d2e68ae57298a078c6c094901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SafeAreaView&lt;/code&gt; renders nested content and automatically applies paddings reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect the physical limitation of the screen, such as rounded corners or camera notches (i.e. the sensor housing area on iPhone X).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044bf55832cff3edc30fb6111b4514e9a3bb9f6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SavedPhotos&lt;/code&gt; // default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230b868cecf9e47d19ddf6137d2ed6972876842b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScrollView&lt;/code&gt; props...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12454e6a159e27c3e57b1d3e173c1058f9c54323" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScrollView&lt;/code&gt; simply renders all its react child components at once. That makes it very easy to understand and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13789791d06667647a56d4a91e0488b6e53f1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text&lt;/code&gt; supports nesting, styling, and touch handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6857a026937a1d49959278b1ef135486c26f55b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TextInput&lt;/code&gt; has by default a border at the bottom of its view. This border has its padding set by the background image provided by the system, and it cannot be changed. Solutions to avoid this is to either not set height explicitly, case in which the system will take care of displaying the border in the correct position, or to not display the border by setting &lt;code&gt;underlineColorAndroid&lt;/code&gt; to transparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95dfb51a598839a7ed79f52bf07adbcd9dd7f02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USE_SIP&lt;/code&gt;: 'android.permission.USE_SIP'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e208470eac19080a629ae9a7253b46527e5bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f14af35d37874f30e724b1e853104ef77a9521c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; - Called for every touch move on the View when it is not the responder: does this view want to &quot;claim&quot; touch responsiveness?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dd01c4835d5d54a7ec499e9254f5bafaf47ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769394f7ff30ef98f5192cddd5ecfadba660c42f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderGrant: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1d1cb3d23d489f81ce25a7a291247276bc6098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderGrant: (evt) =&amp;gt; {}&lt;/code&gt; - The View is now responding for touch events. This is the time to highlight and show the user what is happening</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058dfe244882b6bbbe4198de3f444bf0c76967c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderMove: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cde9775c99dd71cc888cc8d7dda76d1b2c42471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderMove: (evt) =&amp;gt; {}&lt;/code&gt; - The user is moving their finger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a9ac9793e9feb948485c01a27f4248b755899b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderReject: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eaac65d218c1c0e2080d6f98543e512d6276f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderReject: (evt) =&amp;gt; {}&lt;/code&gt; - Something else is the responder right now and will not release it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd389b718fb3a8a4e78dadcc4acd6463475d28ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderRelease: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d14dddc5af7645460ad8e2f9d6bfc5625c5f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderRelease: (evt) =&amp;gt; {}&lt;/code&gt; - Fired at the end of the touch, ie &quot;touchUp&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5558c0160ada184023e2682fe550cad337722b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminate: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061a0a26e944568a78b87dadb4b3ca0046545ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminate: (evt) =&amp;gt; {}&lt;/code&gt; - The responder has been taken from the View. Might be taken by other views after a call to &lt;code&gt;onResponderTerminationRequest&lt;/code&gt;, or might be taken by the OS without asking (happens with control center/ notification center on iOS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b5828b16f8ef9e00030c292f55b532d4a76209" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminationRequest: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c690779d792536e17899bfe992586081659245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminationRequest: (evt) =&amp;gt; true&lt;/code&gt; - Something else wants to become responder. Should this view release the responder? Returning true allows release</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0a6d78f68ed36df58beccab79e8208840c7c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a76ec7ec4f4eea57450bf1b44f1a9c7c43bd875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; - Does this view want to become responder on the start of a touch?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071079ad2744af54c77f9144a29bced9a205b0aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec0e49aa840ffca924e4a4f173d29ffee96d628" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; is designed to be nested inside other views and can have 0 to many children of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16206a26f6f6b2c3b5492ee5e6b7eefa9399850b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt;s are designed to be used with &lt;a href=&quot;style&quot;&gt;&lt;code&gt;StyleSheet&lt;/code&gt;&lt;/a&gt; for clarity and performance, although inline styles are also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea222cfc32c00ce827409644702b31f0eea9f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VirtualizedList&lt;/code&gt; props...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9179cd153f9f08a0d6c47ced674919e1ad63ad36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CALENDAR&lt;/code&gt;: 'android.permission.WRITE_CALENDAR'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389b2b8c8eee837de87da9cac082c1c9696ec894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CALL_LOG&lt;/code&gt;: 'android.permission.WRITE_CALL_LOG'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd91b170ab8220c0146f0e0952f5fd454895437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CONTACTS&lt;/code&gt;: 'android.permission.WRITE_CONTACTS'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b25581641d424f9d3389a335f1c0590b4a71ab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;: 'android.permission.WRITE_EXTERNAL_STORAGE'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2e4b131b7abc0794f29704fcb65053c2fac2b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WebView&lt;/code&gt; renders web content in a native view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a8888b57f2d29a7158fd2b67e28d20e3af39a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; - The app is running in the foreground</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb2c1fef4699c5a01537a92d00f2fdb426fae58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;after&lt;/code&gt; : {string} : A cursor that matches &lt;code&gt;page_info { end_cursor }&lt;/code&gt; returned from a previous call to &lt;code&gt;getPhotos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b95a98a608cffc83cdef5bb24f8e1a2842fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alert&lt;/code&gt; :boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1e43b18afc088caeb29f9a43de45c10944be8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertAction&lt;/code&gt; : The &quot;action&quot; displayed beneath an actionable notification. Defaults to &quot;view&quot;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc86b4fdd32456de85f68e9a2b386dace17115e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertBody&lt;/code&gt; : The message displayed in the notification alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a67f42e6ec04dccb3bdb969ace7496578ccc885" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertTitle&lt;/code&gt; : The text displayed as the title of the notification alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a95b5a71f011a89f0914e2e72a7ab9a7d81cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignContent&lt;/code&gt; controls how rows align in the cross direction, overriding the &lt;code&gt;alignContent&lt;/code&gt; of the parent. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7d94d4913ddaff7d01d6ee67ac812515f9c4f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignItems&lt;/code&gt; aligns children in the cross direction. For example, if children are flowing vertically, &lt;code&gt;alignItems&lt;/code&gt; controls how they align horizontally. It works like &lt;code&gt;align-items&lt;/code&gt; in CSS (default: stretch). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560954ae705ecf10bf4a389189d7958dae3925b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignSelf&lt;/code&gt; controls how a child aligns in the cross direction, overriding the &lt;code&gt;alignItems&lt;/code&gt; of the parent. It works like &lt;code&gt;align-self&lt;/code&gt; in CSS (default: auto). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5f3010a2d199b73c707b317b1a8b54b2d4d897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;altitude&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4241db4d39cb85295423006b826c4d1157fae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;announcement&lt;/code&gt;: The string announced by the screen reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169504b547b2798e93815625803d006a0eb4d9a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;announcementFinished&lt;/code&gt;: iOS-only event. Fires when the screen reader has finished making an announcement. The argument to the event handler is a dictionary with these keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cff87245279eb2869128ff45ee9cc5d6155fd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad018ad045d09fee7ae8ddd22000ce099184f9ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fea321f21a0bba006024a64fd962b820fc0c9dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assetType&lt;/code&gt; : {string} : Specifies filter on asset type. Valid values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00807487a5faad3732ecc289505d9f9a4eea09d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: Use heuristics to pick between &lt;code&gt;resize&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab8a89b676eaa292675ea44743664fce4a35518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;background&lt;/code&gt; - The app is running in the background. The user is either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec01b7d247cd75e28fbf37fbe0af5d1152caecea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badge&lt;/code&gt; :boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d719280cdc66b354bdfb537f6c1b3e654ba3a9a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bluetooth&lt;/code&gt; - device is connected via Bluetooth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d17cbb79eace59c8d442f556e8783f072190d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;body&lt;/code&gt; : The body of this notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c05458ada702cb04313c4d15371209ec0b877bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderBottomWidth&lt;/code&gt; works like &lt;code&gt;border-bottom-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe0b63b47838d7280a214748de61989a056212b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderLeftWidth&lt;/code&gt; works like &lt;code&gt;border-left-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd26aadf37f2659148623383aff0686feb2385b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderRightWidth&lt;/code&gt; works like &lt;code&gt;border-right-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ddbf99242467ace304177b85105076ffc83d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderTopWidth&lt;/code&gt; works like &lt;code&gt;border-top-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4d44fb5026b55a385b712cb76423bf73c5cb3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderWidth&lt;/code&gt; works like &lt;code&gt;border-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9078aeb175f8ae7d9d39c131083ec8654a1cbac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bottom&lt;/code&gt; is the number of logical pixels to offset the bottom edge of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8492f768b394dbdc9eec8d9b3f76c44ce2149ccd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bounciness&lt;/code&gt;: Controls bounciness. Default 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2def52c698136016247c32ef7f66073b55329616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; will be invoked with a &lt;code&gt;permissions&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0d5ade1a5d2b9c30ce27bc25cf3d90f44281c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelButtonIndex&lt;/code&gt; (int) - index of cancel button in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eadd624376825399c6e25e4c7f5b56a240e6c7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;category&lt;/code&gt; : The category of this notification, if has one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8596bfef774e4904f12d11b3c80ee0906e90e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;category&lt;/code&gt; : The category of this notification, required for actionable notifications (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46a4f2576ee9a197aee18cca3eee19e6e259e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cellular&lt;/code&gt; - device is connected via Edge, 3G, WiMax, or LTE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022033db1446b77cf82a2a56c38db3d509c44d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;center&lt;/code&gt;: Center the image in the view along both dimensions. If the image is larger than the view, scale it down uniformly so that it is contained in the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9e5fb9de2621e2a0549e5d8a2471205585e70b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: Fires when a property within the &lt;code&gt;Dimensions&lt;/code&gt; object changes. The argument to the event handler is an object with &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt; properties whose values are the same as the return values of &lt;code&gt;Dimensions.get('window')&lt;/code&gt; and &lt;code&gt;Dimensions.get('screen')&lt;/code&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a68b958589b998cf8a44610fa3402f8de7e5b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: Fires when the state of the screen reader changes. The argument to the event handler is a boolean. The boolean is &lt;code&gt;true&lt;/code&gt; when a screen reader is enabled and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd40e46f686b396cb4cf3905a87b5564c75a0b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: This event is deprecated. Listen to &lt;code&gt;connectionChange&lt;/code&gt; instead. Fires when the network status changes. The argument to the event handler is one of the deprecated connectivity types listed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d8a49d76576b31d63c0ac7fe216186e460f7b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changedTouches&lt;/code&gt; - Array of all touch events that have changed since the last event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6c11e187794a6f5ee3bf059789c076577697e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changedTouches&lt;/code&gt; - Array of all touch events that have changed since the last event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6480cfba0a6e4989a952fe3067cdc35b9a6f3e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;characters&lt;/code&gt;: all characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5fc96bfece7b2f20dcf0006579b2ed174877ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clip&lt;/code&gt; - Lines are not drawn past the edge of the text container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49ddbe6d05848b032def56a0a268018f30fc805" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connectionChange&lt;/code&gt;: Fires when the network status changes. The argument to the event handler is an object with keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e4d43318d654a28e83132c3b8302942a99be01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contain&lt;/code&gt;: Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3febcb6e41f928672a6f96863595d2c94b592415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cover&lt;/code&gt;: Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf251dcf43e2047c2e7eaa9db47215e601ac937" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&lt;/code&gt;, config for animating in new views (see &lt;code&gt;Anim&lt;/code&gt; type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e23e3ed2f9fde8ea51d57be2eb4da49c48d04b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentHeight&lt;/code&gt; (Android only) The height of the status bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc17b2c4a526836cb70f4e915f760f43e5c77e8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;damping&lt;/code&gt;: Defines how the spring&amp;rsquo;s motion should be damped due to the forces of friction. Default 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc429b4f84224e8e605756a4a2b40df412ba392f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; object or timestamp in milliseconds) - date to show by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff12c2d17c16d1336e15f49ce915cb25d17a668d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt; will turn on extra logging and visual overlays to aid with debugging both usage and implementation, but with a significant perf hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bea0c5aed56454320413a4ca7773801a1a5c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deceleration&lt;/code&gt;: Rate of decay. Default 0.997.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2823fb4cdf5b7f93fc7101db3e9e42cd14037a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;: Use the native platforms default strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578b1e2180c6371d05471a81ff8c7914b443fc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delay&lt;/code&gt;: Start the animation after delay (milliseconds). Default 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9febc79594a3bbf1cd02433822081036e59afd44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destructiveButtonIndex&lt;/code&gt; (int) - index of destructive button in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513cc85138ba0418c776085a17d0edd247c1d409" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;direction&lt;/code&gt; specifies the directional flow of the user interface. The default is &lt;code&gt;inherit&lt;/code&gt;, except for root node which will have value based on the current locale. See &lt;a href=&quot;https://facebook.github.io/yoga/docs/rtl/&quot;&gt;https://facebook.github.io/yoga/docs/rtl/&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e288105a864383db30ba75512fdf1594b690779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display&lt;/code&gt; sets the display type of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e44a944f88b32bb93e523b58b2a6781f343a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;distanceFilter&lt;/code&gt; (m)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936f68a2c1f88fa1a79adac8933514e7daf0e5f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration&lt;/code&gt; in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731a92ea87d2fce924499e16a443df426da8fc84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration&lt;/code&gt;: Length of animation (milliseconds). Default 500.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0288ee9b9277785a8bdaa70d3693f5a47abb0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dx&lt;/code&gt; - accumulated distance of the gesture since the touch started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ea1031c8f495ca5299613440265af289c0d580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dy&lt;/code&gt; - accumulated distance of the gesture since the touch started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7014f92b9f223547d1034a4d149e94a6748699d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;easing&lt;/code&gt;: Easing function to define curve. Default is &lt;code&gt;Easing.inOut(Easing.ease)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a4cdbc05be8d15d3b502abb990216728efdb79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edges&lt;/code&gt; : {Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa2cf160366e43edaff25832d29066d197635cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;effectiveType&lt;/code&gt;: An &lt;code&gt;EffectiveConnectionType&lt;/code&gt; (listed above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1ce89573931e74345114cf96f540fd61d7d707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enableHighAccuracy&lt;/code&gt; (bool)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d3c7d2c0724bc156bf74d7f33324fc06f4b30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enableHighAccuracy&lt;/code&gt; (bool) - On Android, if the location is cached this can return almost immediately, or it will request an update which might take a while.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04ef4cb89528e0aac54fc18491249998f62c4e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_cursor&lt;/code&gt;: {string}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4d42c207b8380fbdafa81bffcaeec86a7e3bd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ethernet&lt;/code&gt; - device is connected via Ethernet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e181b739d2a4ba4c5881d76a9fe26f73269538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;evt&lt;/code&gt; is a synthetic touch event with the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3463a977fb161be864f04c11085e5405d5f3d579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;excludedActivityTypes&lt;/code&gt; (array) - the activities to exclude from the ActionSheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f66995f09877092eccf53eae795b62182dbe45e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fade&lt;/code&gt; fades into view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fdeaed3f52a00254d081c7c3af1521f9e75f12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;, deprecated, use 'never' instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b1764971e51ba4d2c873b14d7e453911e97136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fireDate&lt;/code&gt; : The date and time when the system should deliver the notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a680d2ab071c3e47472942026e3da453885e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first&lt;/code&gt; : {number} : The number of photos wanted in reverse order of the photo application (i.e. most recent first for SavedPhotos).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7171b54c433fac49d69a7c13128ac33126a261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flexDirection&lt;/code&gt; controls which directions children of a container go. &lt;code&gt;row&lt;/code&gt; goes left to right, &lt;code&gt;column&lt;/code&gt; goes top to bottom, and you may be able to guess what the other two do. It works like &lt;code&gt;flex-direction&lt;/code&gt; in CSS, except the default is &lt;code&gt;column&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bbeb1a6ef8ec8a9081640850fb3d5774ded5db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flexWrap&lt;/code&gt; controls whether children can wrap around after they hit the end of a flex container. It works like &lt;code&gt;flex-wrap&lt;/code&gt; in CSS (default: nowrap). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&lt;/a&gt; for more details. Note it does not work anymore with &lt;code&gt;alignItems: stretch&lt;/code&gt; (the default), so you may want to use &lt;code&gt;alignItems: flex-start&lt;/code&gt; for example (breaking change details: &lt;a href=&quot;https://github.com/facebook/react-native/releases/tag/v0.28.0&quot;&gt;https://github.com/facebook/react-native/releases/tag/v0.28.0&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010da56b26e6d7f0a066f7f204c17efd70f802af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force-cache&lt;/code&gt;: The existing cached data will be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189426dc7f54c6a9e3c44537b119c362156bad9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formSheet&lt;/code&gt; covers narrow-width view centered (only on larger devices)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a892cb8cb9568f62431de88a2f46aa15fbc0b80d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;friction&lt;/code&gt;: Controls &quot;bounciness&quot;/overshoot. Default 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cb5bdba49364bbe04d27773ce94ddee45ba412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fullScreen&lt;/code&gt; covers the screen completely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33511df82d4d13fa4fa57fb8e6013f6a3130024f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getItemLayout&lt;/code&gt; is an optional optimization that let us skip the measurement of dynamic content if you know the height of items ahead of time. &lt;code&gt;getItemLayout&lt;/code&gt; is both efficient and easy to use if you have fixed height items, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def09feb858fb2e4fb959cdd28abad0a5c9eff1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupName&lt;/code&gt; : {string} : Specifies filter on group names, like 'Recent Photos' or custom album titles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e9d66a6e9249d97be9857ff9dfb4c5c6f382c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupTypes&lt;/code&gt; : {string} : Specifies which group types to filter the results to. Valid values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af48fcd6260fd973848b7316e47e557ddcb80a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;group_name&lt;/code&gt;: {string}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235860b30f7ca1dc0bb773514ccde23583f4a36d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;has_next_page&lt;/code&gt;: {boolean}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1d7aa058eef876669e1c91971c1a04c54c4d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head&lt;/code&gt; - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., &quot;...wxyz&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3b5ff57b244330bfe44b9adfb960ba2cdd2a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heading&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1f461ccbff85537bec3069278ca3460f227ff7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; sets the height of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8865ec9d236b857229eda0cdb5a393c3d3fbc5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732b98fc6632b46637beaa65e094ed7c337d9298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt; (0-23) - the hour to show, defaults to the current time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbc650670e57a81bf61c970c31bf283b38d4f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsl()&lt;/code&gt; and &lt;code&gt;hsla()&lt;/code&gt; is supported in functional notation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b52fdf9a38a29f7710313bf26b99e4f0c6315c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;icon&lt;/code&gt;: the icon for this action, e.g. &lt;code&gt;require('./some_icon.png')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5ead0ca1bba539a9c1e3b47ed2a252186c5e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; - The ID of the touch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6641467ba9c6bdab811e032987c74a8d1f95a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; - The ID of the touch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa9d63b366cb93cab5736e9520dae4af1708fe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; : The identifier of this notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a673af677e17add4a63c88564a24de9b545575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;: {object} : An object with the following shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8d055c79513f6b67d09b0d6372424f9600a0a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inactive&lt;/code&gt; - This is a state that occurs when transitioning between foreground &amp;amp; background, and during periods of inactivity such as entering the Multitasking view or in the event of an incoming call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386b21eb987063ce6aab7cb497d42671b05b0edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index.js&lt;/code&gt; is the starting point for React Native applications, and it is always required. It can be a small file that &lt;code&gt;require&lt;/code&gt;s other file that are part of your React Native component or application, or it can contain all the code that is needed for it. In our case, we will just put everything in &lt;code&gt;index.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd8c4407a8189ec1fa493948ee5e30863a3a837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interpolate()&lt;/code&gt; also supports arbitrary easing functions, many of which are already implemented in the &lt;a href=&quot;easing&quot;&gt;&lt;code&gt;Easing&lt;/code&gt;&lt;/a&gt; module. &lt;code&gt;interpolate()&lt;/code&gt; also has configurable behavior for extrapolating the &lt;code&gt;outputRange&lt;/code&gt;. You can set the extrapolation by setting the &lt;code&gt;extrapolate&lt;/code&gt;, &lt;code&gt;extrapolateLeft&lt;/code&gt;, or &lt;code&gt;extrapolateRight&lt;/code&gt; options. The default value is &lt;code&gt;extend&lt;/code&gt; but you can use &lt;code&gt;clamp&lt;/code&gt; to prevent the output value from exceeding &lt;code&gt;outputRange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f62ca9fbf7d35dde0c6da0ab9f608b8064e4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interpolate()&lt;/code&gt; also supports mapping to strings, allowing you to animate colors as well as values with units. For example, if you wanted to animate a rotation you could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137d4ba81a07e8fe7ac2883b5126475cc470cdc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is24Hour&lt;/code&gt; (boolean) - If &lt;code&gt;true&lt;/code&gt;, the picker uses the 24-hour format. If &lt;code&gt;false&lt;/code&gt;, the picker shows an AM/PM chooser. If undefined, the default for the current locale is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aba406e0372a17638b5defaf70c9a5c500da67c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isInteraction&lt;/code&gt;: Whether or not this animation creates an &quot;interaction handle&quot; on the &lt;code&gt;InteractionManager&lt;/code&gt;. Default true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba5984269442b3e61fd5614bcc840a48abe294f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isSilent&lt;/code&gt; : If true, the notification will appear without sound (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d361b08f337e6c799a012fc66390d3b37d3ca8d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isStored&lt;/code&gt;: {boolean}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33b07c23e59cb67aae3abb98c1446ca4149cea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemPosition&lt;/code&gt;: the index of the selected item in this picker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7672972d472ae55057faac841cba434dfcae752b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemValue&lt;/code&gt;: the &lt;code&gt;value&lt;/code&gt; prop of the item that was selected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d16308a96394206a751998ff38da21be3bac87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;justifyContent&lt;/code&gt; aligns children in the main direction. For example, if children are flowing vertically, &lt;code&gt;justifyContent&lt;/code&gt; controls how they align vertically. It works like &lt;code&gt;justify-content&lt;/code&gt; in CSS (default: flex-start). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b152d2cf68462291122082a59f86151bd3ae169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyExtractor&lt;/code&gt; tells the list to use the &lt;code&gt;id&lt;/code&gt;s for the react keys instead of the default &lt;code&gt;key&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c067bc24c521de200289e5250d2f5434581647d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latitude&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6223dfdbb6dad8a72796d824ae1242adc81b57c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left&lt;/code&gt; is the number of logical pixels to offset the left edge of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb103bbc97c507021dc3c13531325166eec6a22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listener&lt;/code&gt;: Optional async listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3e2f63dd7f533461f8c31af0f9d57763fd9fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localNotification&lt;/code&gt; : Fired when a local notification is received. The handler will be invoked with an instance of &lt;code&gt;PushNotificationIOS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b4ed4fcc67992e10883ab34944ca555c8d54d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;: {object} : An object with the following shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c53b39c29af8e48aab2e1eb41f80ac587bd1d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationX&lt;/code&gt; - The X position of the touch, relative to the element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13f6f70663248e13187d0307e87f1a9289d855b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationX&lt;/code&gt; - The X position of the touch, relative to the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864bd30de29ff945ed8aaa5041b70560d94c501e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationY&lt;/code&gt; - The Y position of the touch, relative to the element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b28b2671bfa773a3620e26ecc07937d368cdcd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationY&lt;/code&gt; - The Y position of the touch, relative to the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f225e61ad50bee05a6398c088ea16248ea449c0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longitude&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65963e0128bde8ab5124eae168fe10782d756d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginBottom&lt;/code&gt; works like &lt;code&gt;margin-bottom&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9d1c179a0731dc662b938f9d944dd9ad1ea4e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginLeft&lt;/code&gt; works like &lt;code&gt;margin-left&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65495c38aeb2986cc50bc6892fd4043246858f62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginRight&lt;/code&gt; works like &lt;code&gt;margin-right&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5a26ce0e8d8fc7f8c6a2d080292d7331877b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginTop&lt;/code&gt; works like &lt;code&gt;margin-top&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2683214d4b9937533236ec00a67a00f44388c7fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mass&lt;/code&gt;: The mass of the object attached to the end of the spring. Default 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156a0a8a7003011156a7fd3debe97424b4692558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDate&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; object or timestamp in milliseconds) - maximum date that can be selected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf562c7c0cab3df3bde2ee0f54bf77d58bd950db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxHeight&lt;/code&gt; is the maximum height for this component, in logical pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc5649abcca39f63f1307854545cff8f5e5ba0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxWidth&lt;/code&gt; is the maximum width for this component, in logical pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3d02fc20b4f00b9598569e1529fc1e608e0809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maximumAge&lt;/code&gt; (ms) - Defaults to INFINITY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ccbb977af4e60115316299193d2f48e72fcac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; (string) - a message to share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3214e961cef4d8be1d6e8ce9be119d4212f105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; (string) - a message to show below the title</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168582eefc8cfce63b0eb0e9d05977a9c356d73b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - a message to share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2575351790cec7f09d130a6223b3b7a8beb69b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;middle&lt;/code&gt; - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. &quot;ab...yz&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab5b1d6303ce209aa7dbbbdb8dd0d927f829695" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mimeTypes&lt;/code&gt; : {Array} : Filter by mimetype (e.g. image/jpeg).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a2c9bad5d5721b1a3a0c28e43d1e55b9e4e484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDate&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; or timestamp in milliseconds) - minimum date that can be selected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92703c208cc1a02d0d9400710e78457954b2a236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minHeight&lt;/code&gt; is the minimum height for this component, in logical pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd98c8d0499b145e761958bc2b157806a9a903f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minWidth&lt;/code&gt; is the minimum width for this component, in logical pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715b23cbe8198f096a8ea441e1429d97b9e84dfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minute&lt;/code&gt; (0-59) - the minute to show, defaults to the current time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed2a4d22e80055261eba7fd7181c71e80ca1860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; (&lt;code&gt;enum('calendar', 'spinner', 'default')&lt;/code&gt;) - To set the date-picker mode to calendar/spinner/default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c1ea217fd2a6e58338b23ead35943d8d27b4e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; (&lt;code&gt;enum('clock', 'spinner', 'default')&lt;/code&gt;) - set the time picker mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fce8627c362472b3b516c01ddb7d1c43ab3d39d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;moveX&lt;/code&gt; - the latest screen coordinates of the recently-moved touch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923f4597505948a396697652c56bd99ae28e20d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;moveY&lt;/code&gt; - the latest screen coordinates of the recently-moved touch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591546f1807dd2e4f0db914a9024e4626ee030c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt;: {object} An object with the following shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7896bd61695429613d711bc4ef75441d54b72766" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - device is offline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87fdbc1484427355840331ad747a8413b65ccb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; appears without an animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50193e861007b33905a29cd0514a5ce8dc03ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt;: don't auto capitalize anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e66a56f3596f0babd9099e804149dfac3b874ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notification&lt;/code&gt; : Fired when a remote notification is received. The handler will be invoked with an instance of &lt;code&gt;PushNotificationIOS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81e5d19b64745b6f0bc5e57cb71c0be2cafbeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt; - Opaque type returned by something like &lt;code&gt;require('./image.jpg')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8ea72a96f07c67e13b99418bb9259c41643f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numberActiveTouches&lt;/code&gt; - Number of touches currently on screen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e465867441abb93cad1a831a62851daeff18ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onStartShouldSetResponder&lt;/code&gt; and &lt;code&gt;onMoveShouldSetResponder&lt;/code&gt; are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for &lt;code&gt;*ShouldSetResponder&lt;/code&gt; handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba87096c0a7c2f4b09857c1404ef7bf97661d302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;only-if-cached&lt;/code&gt;: The existing cache data will be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2285e71d4e181cbdc03866fe2cebedd2c20163fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; (array of strings) - a list of button titles (required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b40ba992d7cb9d3af50de345a5874be4734f2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overFullScreen&lt;/code&gt; covers the screen completely, but allows transparency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add0e8cd8a61dbd6ea84698db55a1ae025b9c3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overflow&lt;/code&gt; controls how children are measured and displayed. &lt;code&gt;overflow: hidden&lt;/code&gt; causes views to be clipped while &lt;code&gt;overflow: scroll&lt;/code&gt; causes views to be measured independently of their parents main axis. It works like &lt;code&gt;overflow&lt;/code&gt; in CSS (default: visible). See &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/overflow&quot;&gt;https://developer.mozilla.org/en/docs/Web/CSS/overflow&lt;/a&gt; for more details. &lt;code&gt;overflow: visible&lt;/code&gt; only works on iOS. On Android, all views will clip their children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75594efb591c8f5e49cc4aa354993ee9213402f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overshootClamping&lt;/code&gt;: Boolean indiciating whether the spring should be clamped and not bounce. Default false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b64c54bd7859b4aa56df433b5327cc11bfbeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingBottom&lt;/code&gt; works like &lt;code&gt;padding-bottom&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5258dd4cb2c28009f4e4d27c40acdd30bf3b69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingLeft&lt;/code&gt; works like &lt;code&gt;padding-left&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbaea6509352dae5b9b5c516d121b66ea8209d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingRight&lt;/code&gt; works like &lt;code&gt;padding-right&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc3529c2fdca211f3d4c7fbdd6c1bb1b390f1c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingTop&lt;/code&gt; works like &lt;code&gt;padding-top&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85dcfa4c69472b497a7bd09c395b4eb5d14817e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageSheet&lt;/code&gt; covers portrait-width view centered (only on larger devices)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8264271b7c3826fcb9f8819f98feb22c34867e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageX&lt;/code&gt; - The X position of the touch, relative to the root element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edca18f823af0057ba5ed227ff45f2d4e5a38b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageX&lt;/code&gt; - The X position of the touch, relative to the root element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fba8b27a948dec21805e1c39b15e453ab55bd20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageY&lt;/code&gt; - The Y position of the touch, relative to the root element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb79fb934b1a2e252fb774e54b5f067f3ded9ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageY&lt;/code&gt; - The Y position of the touch, relative to the root element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940a339e2f8926fa10679aef45b2c1ee1abe2368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;page_info&lt;/code&gt; : {object} : An object with the following shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a30245c76fe573dd12014d5739cdd875a14270f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;playableDuration&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75759e980b27702bff80d3ca0375d738ac69fadc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt; in React Native is similar to regular CSS, but everything is set to &lt;code&gt;relative&lt;/code&gt; by default, so &lt;code&gt;absolute&lt;/code&gt; positioning is always just relative to the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454de999bf7533cf8147dd1dd5d030b675bc57d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-native run-android&lt;/code&gt; is just one way to run your app - you can also run it directly from within Android Studio or &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9dd2819f98c724bc864fce5a8cbed9a2f2e8a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-native run-ios&lt;/code&gt; is just one way to run your app. You can also run it directly from within Xcode or &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d37bfe240d61aa652f7c71fbee92e55f0dc859" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register&lt;/code&gt;: Fired when the user registers for remote notifications. The handler will be invoked with a hex string representing the deviceToken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e7a637360815c48a6e06e59032ea2dcf35fda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registrationError&lt;/code&gt;: Fired when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. The handler will be invoked with {message: string, code: number, details: any}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bd1a82e79902bb364a4e119175a2e975f92d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reload&lt;/code&gt;: The data for the URL will be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abae89f6bdf2540afa73c2ff29f0e39502f20fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat&lt;/code&gt;: Repeat the image to cover the frame of the view. The image will keep its size and aspect ratio, unless it is larger than the view, in which case it will be scaled down uniformly so that it is contained in the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0291799412c73acf58a9799e203ad8ab9506e442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeatInterval&lt;/code&gt; : The interval to repeat as a string. Possible values: &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;week&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9791562e02937e4099cf256efee1dc706d03db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requestAnimationFrame(fn)&lt;/code&gt; is not the same as &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; - the former will fire after all the frame has flushed, whereas the latter will fire as quickly as possible (over 1000x per second on a iPhone 5S).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254c77899dafd1ec02af887ade4cbdb65b72cd06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requestAnimationFrame&lt;/code&gt; is a polyfill from the browser that you might be familiar with. It accepts a function as its only argument and calls that function before the next repaint. It is an essential building block for animations that underlies all of the JavaScript-based animation APIs. In general, you shouldn't need to call this yourself - the animation APIs will manage frame updates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3de6fadac1347a00156afc60bc01ddcda8bf3dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requireNativeComponent&lt;/code&gt; commonly takes two parameters, the first is the name of the native view and the second is an object that describes the component interface. The component interface should declare a friendly &lt;code&gt;name&lt;/code&gt; for use in debug messages and must declare the &lt;code&gt;propTypes&lt;/code&gt; reflected by the Native View. The &lt;code&gt;propTypes&lt;/code&gt; are used for checking the validity of a user's use of the native view. Note that if you need your JavaScript component to do more than just specify a name and propTypes, like do custom event handling, you can wrap the native component in a normal react component. In that case, you want to pass in the wrapper component instead of &lt;code&gt;iface&lt;/code&gt; to &lt;code&gt;requireNativeComponent&lt;/code&gt;. This is illustrated in the &lt;code&gt;MyCustomView&lt;/code&gt; example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fa96393b28c337baf21b4ef63224f6a5afeed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resize&lt;/code&gt;: A software operation which changes the encoded image in memory before it gets decoded. This should be used instead of &lt;code&gt;scale&lt;/code&gt; when the image is much larger than the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11802d312d78c2338fed6bb93b5c51abf69da36d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restDisplacementThreshold&lt;/code&gt;: The threshold of displacement from rest below which the spring should be considered at rest. Default 0.001.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af6e2ceb4e5e062da3e8dc1fb1b760a999c9b08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restSpeedThreshold&lt;/code&gt;: The speed at which the spring should be considered at rest in pixels per second. Default 0.001.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0fac05a98f08c4290a535fe199ac7b990701db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right&lt;/code&gt; is the number of logical pixels to offset the right edge of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0afcbb9cc0884252dad0bcd28aa1ec0688cb85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runAfterInteractions&lt;/code&gt; takes either a plain callback function, or a &lt;code&gt;PromiseTask&lt;/code&gt; object with a &lt;code&gt;gen&lt;/code&gt; method that returns a &lt;code&gt;Promise&lt;/code&gt;. If a &lt;code&gt;PromiseTask&lt;/code&gt; is supplied, then it is fully resolved (including asynchronous dependencies that also schedule more tasks via &lt;code&gt;runAfterInteractions&lt;/code&gt;) before starting on the next task that might have been queued up synchronously earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5600a2ca1524e6a09b24456d5e5daf6936987f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale&lt;/code&gt; - used to indicate the scale factor of the image. Defaults to 1.0 if unspecified, meaning that one image pixel equates to one display point / DIP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82fbdde5977cc88bb41f8dfee61b8646e13318d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale&lt;/code&gt;: The image gets drawn downscaled or upscaled. Compared to &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; is faster (usually hardware accelerated) and produces higher quality images. This should be used if the image is smaller than the view. It should also be used if the image is slightly bigger than the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e606d170945c4ffa0aac26e2e0fc1d090e8494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sched&lt;/code&gt;, &lt;code&gt;gfx&lt;/code&gt;, and &lt;code&gt;view&lt;/code&gt; are the android SDK tags (collections of markers) we care about: &lt;code&gt;sched&lt;/code&gt; gives you information about what's running on each core of your phone, &lt;code&gt;gfx&lt;/code&gt; gives you graphics info such as frame boundaries, and &lt;code&gt;view&lt;/code&gt; gives you information about measure, layout, and draw passes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd3fa68216a7f891600504a920104167d8b8e45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sectionIdentities&lt;/code&gt; is an array of identifiers for sections. ie. ['s1', 's2', ...]. The identifiers should correspond to the keys or array indexes of the data you wish to include. If not provided, it's assumed that the keys of dataBlob are the section identities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1884a0136f167f3a04e685d5e45be949143a395c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sentences&lt;/code&gt;: first letter of each sentence (&lt;em&gt;default&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856cf0b71ecd517d89f191c3dbf3a829783fbbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setImmediate&lt;/code&gt; is executed at the end of the current JavaScript execution block, right before sending the batched response back to native. Note that if you call &lt;code&gt;setImmediate&lt;/code&gt; within a &lt;code&gt;setImmediate&lt;/code&gt; callback, it will be executed right away, it won't yield back to native in between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44a7795a15ff52d4995e6d365e2a1d1883a9773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show&lt;/code&gt;: when to show this action as an icon or hide it in the overflow menu: &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;ifRoom&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd323290316cb619f7faa5347ed5fddb1cd80a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showWithText&lt;/code&gt;: boolean, whether to show text alongside the icon or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfb8d652bc010eeaa7a7b4ce3db045db7284fd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipPermissionRequests&lt;/code&gt; (boolean, iOS-only) - Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, you must request permissions before using Geolocation APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd7eb116b1ea53249ed1e6acf8118cb7e39e6a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slide&lt;/code&gt; slides in from the bottom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d673fc07be538dad6f6fab1b91066f891c50d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sound&lt;/code&gt; :boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7262863c38e19b5f444c084133a83c71574f3b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;soundName&lt;/code&gt; : The sound played when the notification is fired (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8bc2c1f2d954a2f3dc66b5d02484e48b612cce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;speed&lt;/code&gt;: Controls speed of the animation. Default 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c79b4e086429df16252c25a2757ee64d4dc4ad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;speed&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bdba600abe7b8728a7b92461d8ee7350b65689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spring.addListener(callback)&lt;/code&gt; will invoke &lt;code&gt;callback&lt;/code&gt; asynchronously while the animation is running, providing a recent value. This is useful for triggering state changes, for example snapping a bobble to a new option as the user drags it closer, because these larger state changes are less sensitive to a few frames of lag compared to continuous gestures like panning which need to run at 60 fps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb9a3d00f5585e29891514ddec2b0c2379f0ee7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spring.stopAnimation(callback)&lt;/code&gt; will stop the animation and invoke &lt;code&gt;callback&lt;/code&gt; with the final value. This is useful when making gesture transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a33f03849f36586d3a2749c71ece4e2fb8833f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_cursor&lt;/code&gt;: {string}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b941f22737fb04122fbd0d8f788c8bb2811db646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stateID&lt;/code&gt; - ID of the gestureState- persisted as long as there at least one touch on screen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b18f556d25009c5f1f9b916b3e42e78d74f5cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stiffness&lt;/code&gt;: The spring stiffness coefficient. Default 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258a345ea671667933dd8f99cc0fe690cb994249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stretch&lt;/code&gt;: Scale width and height independently, This may change the aspect ratio of the src.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34a13545f9e47512eed2a88c8c86a38f7acba52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subject&lt;/code&gt; (string) - a subject for the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdddeec889f0f3f916e2c25e2a1aa20cd8ba14d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subject&lt;/code&gt; - a subject to share via email</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcfb1d5585e89836490ec412ed0e63667a83888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt;: A boolean indicating whether the announcement was successfully made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0d6a025e3527d03a63730fef96c02430e51b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;systrace&lt;/code&gt; is a standard Android marker-based profiling tool (and is installed when you install the Android platform-tools package). Profiled code blocks are surrounded by start/end markers which are then visualized in a colorful chart format. Both the Android SDK and React Native framework provide standard markers that you can visualize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3288c34d8638ac04b0ad486c3ae5bd490e277a25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tail&lt;/code&gt; - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., &quot;abcd...&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b4251f9a6016377431e2ac733ac5836c1b4dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; - The node id of the element receiving the touch event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a1e7d6e6e67b5c9baf6c3aab5d3d120aef106b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; - The node id of the element receiving the touch event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584c13d1e77692004cb3596c57888db2146a5a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tension&lt;/code&gt;: Controls speed. Default 40.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c4a1f20fe744c7ab0de4792cc8e1703cbfb2b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread-id&lt;/code&gt; : The thread identifier of this notification, if has one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea688c08d5f8b5e94d35759fc52b7481c843b1a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; is the length of time the trace will be collected in seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb990a568a3792cdc0a0106fdffbe6bc588120d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; (ms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a684a47546a4af612d36c020a75e16ef3560b62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - A time identifier for the touch, useful for velocity calculation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a24a804af82d38874b6be2fc2b480b87d6d021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - A time identifier for the touch, useful for velocity calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a2e044a3e806b27a774af4af2cb4fb0bc16971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c362392f5dde1f44384785999de438dec0117eb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tintColor&lt;/code&gt; (string) - the &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt; used for non-destructive button titles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6488b85c4d0b50a40f1d7acd8c5fdea4aeb1a9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; (string) - a title to show above the action sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecff45165f79578b57efabf064c8e5559b324cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; - title of the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa8777efee25368991b0707e251b185f3d6da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; : The title of this notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1afd75be655de8c22c860e081dd86b05df039a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt;, the title of this action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca247a8501ebdc52d299172e6e636b4fe7163009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;top&lt;/code&gt; is the number of logical pixels to offset the top edge of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc115ebfb5f393cefec466ecdc84a55662f2367b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandleActivePressIn&lt;/code&gt; will be executed when the touchable view goes into focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d198b21e0226ef734461988f6ef225ee271b8b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandleActivePressOut&lt;/code&gt; will be executed when the touchable view goes out of focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc369ccc759680815951393642dddf785868d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandlePress&lt;/code&gt; will be executed when the touchable view is actually selected by pressing the &quot;select&quot; button on the TV remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620806885ae88566fa550f616936d2e73a23b515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touches&lt;/code&gt; - Array of all current touches on the screen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2feed898a1a5b8bf60a2f542e7ee23e01b985dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touches&lt;/code&gt; - Array of all current touches on the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd5d7925f1ab9c4928b87aa22176eb6c67fab83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; accepts an array of transformation objects. Each object specifies the property that will be transformed as the key, and the value to use in the transformation. Objects should not be combined. Use a single key/value pair per object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7f131fe82f9be7fbeeee1ad273daa2befa272a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;, deprecated, use 'always' instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93270b1e2879dfe65ffa086c2fc1f98dbe419d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;: A &lt;code&gt;ConnectionType&lt;/code&gt; (listed above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3ad1d794a8be38f047f0903c995b26e44ceee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;: {string}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3a7282d3edcafac762df3491764ad15cd19b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unknown&lt;/code&gt; - error case and the network status is unknown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9238dd4aba5205d4ca38207fe802333410bcd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update&lt;/code&gt;, config for animating views that have been updated (see &lt;code&gt;Anim&lt;/code&gt; type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a260a8ae11ddd1e8e9dbd0d1b34f5dbd19d4e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; - a string representing the resource identifier for the image, which should be either a local file path or the name of a static image resource (which should be wrapped in the &lt;code&gt;require('./path/to/image.png')&lt;/code&gt; function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb8e21447e189e7e164f38f4bc50f59bc05371a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt;: {string}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f514a0bb1144dec5b80efb69ede79b90f72c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; (string) - a URL to share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba927ea1dcf8ca789b8c39137eeff39fbd13a7ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; - an URL to share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2173d969d8af86ce58663db738863c672acedbf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useNativeDriver&lt;/code&gt;: Uses the native driver when true. Default false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dabea4087609d3cb497483938a9577b99f7fc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useSignificantChanges&lt;/code&gt; (bool)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1879908634b30e95106b4744cd51572e3315eec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;userInfo&lt;/code&gt; : An optional object containing additional notification data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d82b1aedde516c20a0818e509a65402a32919fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt;: Initial velocity. Required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a136c8362fddf8ded9c202177531f6a2c22e64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt;: The initial velocity of the object attached to the spring. Default 0 (object is at rest).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b208ed8df34c5f8eeec195e03d696c268fc40dbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewabilityConfig&lt;/code&gt; takes a type &lt;code&gt;ViewabilityConfig&lt;/code&gt; an object with following properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c819ee0362eef5787e1d2699b35289f92c36a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vx&lt;/code&gt; - current velocity of the gesture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbf6ac88d0c82819a0f2d64f4551d1d94c263f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vy&lt;/code&gt; - current velocity of the gesture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45613ba12e2f057981563181e1a8ba1a3b6ebe38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; sets the width of this component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a07b2ded200a22c3fd462faeda527ab85d77a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; - can be specified if known at build time, in which case these will be used to set the default &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; component dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8eb230fa88ab95341bda78327c04b3ad704802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;: {number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdbe97f730b46b3713411feb19e3c4eebf74994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wifi&lt;/code&gt; - device is online and connected via wifi, or is the iOS simulator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510ba45326914a69226abee2488406b4f8b4aa95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wimax&lt;/code&gt; - device is connected via WiMAX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab6beb3b8b8889e28c68cfa6320b668155800b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window.postMessage&lt;/code&gt; accepts one argument, &lt;code&gt;data&lt;/code&gt;, which will be available on the event object, &lt;code&gt;event.nativeEvent.data&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; must be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639c20c5cd22155b2d5087c03acb9313dd0d449c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;words&lt;/code&gt;: first letter of each word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113d38a784a94afcbde0b086ec92966a6a1536a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x0&lt;/code&gt; - the screen coordinates of the responder grant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e078cdb57b71aa9f49aa854b488045b571b203" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y0&lt;/code&gt; - the screen coordinates of the responder grant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886c373552b57b21661083045cfc074c537785f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zIndex&lt;/code&gt; controls which components display on top of others. Normally, you don't use &lt;code&gt;zIndex&lt;/code&gt;. Components render according to their order in the document tree, so later components draw over earlier ones. &lt;code&gt;zIndex&lt;/code&gt; may be useful if you have animations or custom modal interfaces where you don't want this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181b423dc40ea467b49ec432041c248fbc5d5d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{}&lt;/code&gt; of props should hug their values (no spaces)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e41d76b84e251119ba5cd6a620480d951b559df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Apple TV only)&lt;/em&gt; Object with properties to control Apple TV parallax effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0478b26f059b91c6eea04db019aa266f71571fac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Apple TV only)&lt;/em&gt; TV preferred focus (see documentation for the View component).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c240a6750a27915ff88d71033af1448025f1f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Make sure to thoroughly test your app if you've enabled Proguard. Proguard often requires configuration specific to each native library you're using. See &lt;code&gt;app/proguard-rules.pro&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600d822541859731fa9a0b0984548f59f1cf41fa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Access to touchable controls&lt;/em&gt;: When running on Android TV the Android framework will automatically apply a directional navigation scheme based on relative position of focusable elements in your views. The &lt;code&gt;Touchable&lt;/code&gt; mixin has code added to detect focus changes and use existing methods to style the components properly and initiate the proper actions when the view is selected using the TV remote, so &lt;code&gt;TouchableHighlight&lt;/code&gt;, &lt;code&gt;TouchableOpacity&lt;/code&gt; and &lt;code&gt;TouchableNativeFeedback&lt;/code&gt; will &quot;just work&quot;. In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5e422d5c166220e8910453f532e8fbf6c186ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Access to touchable controls&lt;/em&gt;: When running on Apple TV, the native view class is &lt;code&gt;RCTTVView&lt;/code&gt;, which has additional methods to make use of the tvOS focus engine. The &lt;code&gt;Touchable&lt;/code&gt; mixin has code added to detect focus changes and use existing methods to style the components properly and initiate the proper actions when the view is selected using the TV remote, so &lt;code&gt;TouchableHighlight&lt;/code&gt; and &lt;code&gt;TouchableOpacity&lt;/code&gt; will &quot;just work&quot;. In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d913fe4df6084733a78c172d1eaff390ba81a95c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All the libraries we ship with React Native live on the &lt;code&gt;Libraries&lt;/code&gt; folder in the root of the repository. Some of them are pure JavaScript, and you only need to &lt;code&gt;require&lt;/code&gt; it. Other libraries also rely on some native code, in that case you'll have to add these files to your app, otherwise the app will throw an error as soon as you try to use the library.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3d3e21f94f0f7977ae5cffd1059229c560ad11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Android Only&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ca505c74037636f201cc94e8a0e43383d3fe43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Back navigation with the TV remote menu button&lt;/em&gt;: The &lt;code&gt;BackHandler&lt;/code&gt; component, originally written to support the Android back button, now also supports back navigation on the Apple TV using the menu button on the TV remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fb6792d14faf2b5fad4e6278fc847109952a39" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Common codebase&lt;/em&gt;: Since tvOS and iOS share most Objective-C and JavaScript code in common, most documentation for iOS applies equally to tvOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360cd818eb177c052a26811e23931460c49ffd04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Cross platform&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17cdd5ed24f7ed88470caf8d285befb249b4597" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dev Menu support&lt;/em&gt;: On the simulator, cmd-D will bring up the developer menu, just like on iOS. To bring it up on a real Apple TV device, make a long press on the play/pause button on the remote. (Please do not shake the Apple TV device, that will not work :) )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b78d01f8b3c74c413c8d48822ac4dc7bd4c2b2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dev Menu support&lt;/em&gt;: On the simulator, cmd-M will bring up the developer menu, just like on Android. To bring it up on a real Android TV device, make a long press on the play/pause button on the remote. (Please do not shake the Android TV device, that will not work :) )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60cf587277802a427776343523c6fcc96298462" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Do I need to know the contents of the library at compile time?&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782c9f1c37f2a30b68f0a9fc45ea6a42661f5af5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;General support for tvOS&lt;/em&gt;: Apple TV specific changes in native code are all wrapped by the TARGET_OS_TV define. These include changes to suppress APIs that are not supported on tvOS (e.g. web views, sliders, switches, status bar, etc.), and changes to support user input from the TV remote or keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add494e1d6d36156c9f455a296b083786cd9a9f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In React Native&lt;/em&gt; this behavior is intentionally not implemented. It is more work for the developer to know the dimensions (or aspect ratio) of the remote image in advance, but we believe that it leads to a better user experience. Static images loaded from the app bundle via the &lt;code&gt;require('./my-icon.png')&lt;/code&gt; syntax &lt;em&gt;can be automatically sized&lt;/em&gt; because their dimensions are available immediately at the time of mounting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db1d313a9ba4a6373e1c40843c476bc53783c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In the browser&lt;/em&gt; if you don't give a size to an image, the browser is going to render a 0x0 element, download the image, and then render the image based with the correct size. The big issue with this behavior is that your UI is going to jump all around as images load, this makes for a very bad user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a8437d61e43874c107a2978c50475b0e41f229" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;JavaScript layer&lt;/em&gt;: Support for Android TV has been added to &lt;code&gt;Platform.android.js&lt;/code&gt;. You can check whether code is running on Android TV by doing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea85ea5d0b969638afbf120791a78039092cd2e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;JavaScript layer&lt;/em&gt;: Support for Apple TV has been added to &lt;code&gt;Platform.ios.js&lt;/code&gt;. You can check whether code is running on AppleTV by doing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955eb741784d92aad4548a43f57cd785a3ed710d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Known issues&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d063abc086117781d87d7e9de29797d3bf5ee6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: Exercise caution as abusing this can tax you in terms of optimizations. IDs enable optimizations through the bridge and memory in general. Refering to style objects directly will deprive you of these optimizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267f88e7e63dacb3c07e54cf0399038151929358" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Native layer&lt;/em&gt;: React Native Xcode projects all now have Apple TV build targets, with names ending in the string '-tvOS'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efed9328653de8412b8d6402ab17896ea54487e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Native layer&lt;/em&gt;: To run React Native project on Android TV make sure to make the following changes to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff64be88525c4e7a92d9682b55068c003837d23" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note about security: If you are not keen on storing your passwords in plaintext and you are running OSX, you can also &lt;a href=&quot;https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/&quot;&gt;store your credentials in the Keychain Access app&lt;/a&gt;. Then you can skip the two last rows in &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2262ea0b4bd38e56d0634b940debe6a22bd8742" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Android and iOS both interact with this prop differently.&lt;/em&gt;&lt;em&gt;Android may behave better when given no behavior prop at all, whereas iOS is the opposite.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5451a51abcb899bd2bd4892022ff7e6f18da6c98" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote animations&lt;/em&gt;: &lt;code&gt;RCTTVView&lt;/code&gt; native code implements Apple-recommended parallax animations to help guide the eye as the user navigates through views. The animations can be disabled or adjusted with new optional view properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3538c8bfcadaf0082e58951eae68014879fd1d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote/keyboard input&lt;/em&gt;: A new native class, &lt;code&gt;RCTTVRemoteHandler&lt;/code&gt;, sets up gesture recognizers for TV remote events. When TV remote events occur, this class fires notifications that are picked up by &lt;code&gt;RCTTVNavigationEventEmitter&lt;/code&gt; (a subclass of &lt;code&gt;RCTEventEmitter&lt;/code&gt;), that fires a JS event. This event will be picked up by instances of the &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript object. Application code that needs to implement custom handling of TV remote events can create an instance of &lt;code&gt;TVEventHandler&lt;/code&gt; and listen for these events, as in the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0ebfa9323e046379704cc6eba3192849f502d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote/keyboard input&lt;/em&gt;: A new native class, &lt;code&gt;ReactAndroidTVRootViewHelper&lt;/code&gt;, sets up key events handlers for TV remote events. When TV remote events occur, this class fires a JS event. This event will be picked up by instances of the &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript object. Application code that needs to implement custom handling of TV remote events can create an instance of &lt;code&gt;TVEventHandler&lt;/code&gt; and listen for these events, as in the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffef31fcff49df156c13b48243d0701131d73d6d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TabBarIOS behavior&lt;/em&gt;: The &lt;code&gt;TabBarIOS&lt;/code&gt; component wraps the native &lt;code&gt;UITabBar&lt;/code&gt; API, which works differently on Apple TV. To avoid jittery rerendering of the tab bar in tvOS (see &lt;a href=&quot;https://github.com/facebook/react-native/issues/15081&quot;&gt;this issue&lt;/a&gt;), the selected tab bar item can only be set from Javascript on initial render, and is controlled after that by the user through native code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d295a282499cc828753536d44055fe15b6eee8d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This is not a controlled component&lt;/em&gt;, you don't need to update the value during dragging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998804bd465f908567b06a0781d8d09c95f93d01" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Try&lt;/em&gt; to keep it around 80 characters line length (sometimes it's just not possible...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ac8dcc54397c2ace5139a65e74acc60cc01db2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;iOS Only&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd1a6177d04e3cd7a1b34276c347974cf71287d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;react-native init&lt;/em&gt;: New React Native projects created with &lt;code&gt;react-native init&lt;/code&gt; will have Apple TV target automatically created in their XCode projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb35a096afbbbb0074bfc656f5c3d478bd505fc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;backfaceVisibility&lt;/code&gt;&lt;/strong&gt;: enum('visible', 'hidden')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fe1b8edec03b27d5c6841868ffaf9c356fe835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bb748d444e1891325cc297c844cebcde1111fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderBottomLeftRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38aa30c80439e79922b708885f2ca025f217cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderBottomRightRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488ed166bf478b3dc101863343042173ce5d33b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e57ac91e16dd517950c39c9d82c5de0557f87b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74114470f2a0ab5730c8569b4ccdce4ad58ce532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderTopLeftRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b7a25307488113b0f7109af6ad745d7279e7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderTopRightRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d358f3ee8370bc5f7e3b778252b78c18e4efb62f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311c5ad764d28cbe2ffd1ababb06cf6666267708" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;color&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda3165d95099b3b0f5825285800c427e9fe6c39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontFamily&lt;/code&gt;&lt;/strong&gt;: string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c8a0c6cc0e3007d38b3e5b96b62d6e47cc953d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontSize&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705b2209ce078e900e3c52e4fbaaf19ec1c05af9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontStyle&lt;/code&gt;&lt;/strong&gt;: enum('normal', 'italic')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4b8dfceca9bcefddd92d3b8950d6cc0d8dfdaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontVariant&lt;/code&gt;&lt;/strong&gt;: array of enum('small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3888d84dcac3d019e7d4833427898e61804283bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontWeight&lt;/code&gt;&lt;/strong&gt;: enum('normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e3056cac72b0f11ee6c65e9099b4e667e9374a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;includeFontPadding&lt;/code&gt;&lt;/strong&gt;: bool (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ce441f74f0eb51b4e9fada9c21665997c8758c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;letterSpacing&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9a466687b418dfdc91ee5646bc62d596c5971d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;lineHeight&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff06a3400481e28cd22d493bf92a948f5aabf01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cde23478110349ebacc20f03084360c6d895e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;overflow&lt;/code&gt;&lt;/strong&gt;: enum('visible', 'hidden')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39f79cc6acbd9c9af7a46a3d36a3b7d4a1674e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;overlayColor&lt;/code&gt;&lt;/strong&gt;: string (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320c03689638e7816cca896d29a2a2a812e054c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;resizeMode&lt;/code&gt;&lt;/strong&gt;: Object.keys(ImageResizeMode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15167eff4d70a4d484e61ea1e124dc5f69c1f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textAlign&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'left', 'right', 'center', 'justify')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3205b151c63e363940195851dbcfafaa278ca63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textAlignVertical&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'top', 'bottom', 'center') (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8defe62b2a9ca6df98759993e6ea3f0786f81bab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt; (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22a4f5a3d9524ae864218b4d7ac26a5997a5415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationLine&lt;/code&gt;&lt;/strong&gt;: enum('none', 'underline', 'line-through', 'underline line-through')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633773601b0990195b47a4dcdabd322ad4bb39bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationStyle&lt;/code&gt;&lt;/strong&gt;: enum('solid', 'double', 'dotted', 'dashed') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f515852768bc12312fd299cddb5af2f2c19cb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba6a5efa3ae6f4af57063d3b2958cc06cfae28f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowOffset&lt;/code&gt;&lt;/strong&gt;: object: {width: number,height: number}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405ab4857a7d1aeb3c84631bfdf244fe479f47f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8566cc8067aa8923393cedbf29800f3605dcbf1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textTransform&lt;/code&gt;&lt;/strong&gt;: enum('none', 'uppercase', 'lowercase', 'capitalize') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98756f804a2d68b2641b076b256825113642e523" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;tintColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f52f7630cb7a5da59a1ca1f38f9008e546d4f3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;writingDirection&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'ltr', 'rtl') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba60a9ef71114d1bc0e5a2622d7a74353cb27ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Currently, JS functions &lt;code&gt;componentWillReceiveProps&lt;/code&gt; and &lt;code&gt;componentWillUpdateProps&lt;/code&gt; of the top level RN component will not be called after a prop update. However, you can access the new props in &lt;code&gt;componentWillMount&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01a3a44d4fcb53cfc168b115c700c9b94187385" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; If your iOS project is using CocoaPods (contains &lt;code&gt;Podfile&lt;/code&gt;) and linked library has &lt;code&gt;podspec&lt;/code&gt; file, then &lt;code&gt;react-native link&lt;/code&gt; will link library using Podfile. To support non-trivial Podfiles add &lt;code&gt;# Add new pods below this line&lt;/code&gt; comment to places where you expect pods to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2794923881d5b552e6280f394a6172219225b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; React Native does not perform any layout calculations until the root view becomes a subview of some other views. If you want to hide React Native view until its dimensions are known, add the root view as a subview and make it initially hidden (use &lt;code&gt;UIView&lt;/code&gt;'s &lt;code&gt;hidden&lt;/code&gt; property). Then change its visibility in the delegate method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f08969f170a1e1b7b3ff5c58ae61f5c130dcf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; React Native layout calculation is performed on a special thread, while native UI view updates are done on the main thread. This may cause temporary UI inconsistencies between native and React Native. This is a known problem and our team is working on synchronizing UI updates coming from different sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd0b90ca1195d98455128984582d19f974d4390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt; flag is very important for this step. React Native will link your libs based on &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;devDependencies&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c097ef16556d721ace3b6690c1c262fa02c8cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt; Making a dimension flexible in both JS and native leads to undefined behavior. For example - don't make a top-level React component's width flexible (with &lt;code&gt;flexbox&lt;/code&gt;) while you're using &lt;code&gt;RCTRootViewSizeFlexibilityWidth&lt;/code&gt; on the hosting &lt;code&gt;RCTRootView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3312dfda74f7daace53b755d40233551d914037" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning&lt;/em&gt;&lt;/strong&gt;: All native modules share the same namespace. Watch out for name collisions when creating new ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226b0fd6c21469dbb2d8520690d88f48afd6712c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus: Render Thread.&lt;/strong&gt; If you're using Android L (5.0) and up, you will also have a render thread in your application. This thread generates the actual OpenGL commands used to draw your UI. The thread name will be either &lt;code&gt;RenderThread&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;. To identify it in the latter case, look for things like &lt;code&gt;DrawFrame&lt;/code&gt; and &lt;code&gt;queueBuffer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00294a185f06e851204850411e8e5589bd890dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can the issue be reliably reproduced?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d233d192e085ed080aff4b6dd4a10af1b549261a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Close&lt;/strong&gt; the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d612f53da3f1ad73c2ca3385a1ec6fc098ec1649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Constants:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98fddc35eeb6696ca5d22ae8aa9b24891f85eb34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED.&lt;/strong&gt; Virtualization provides significant performance and memory optimizations, but fully unmounts react instances that are outside of the render window. You should only need to disable this for debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f5c199a5aef4635c66b91b4457dabf6bc3ed78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use the &lt;code&gt;source&lt;/code&gt; prop instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cc6473b064c507b8d9e7a5b531471db41382f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the code style match the &lt;a href=&quot;contributing#style-guide&quot;&gt;Style guide&lt;/a&gt;?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817b84e577beb244ccf40456cbca7e716348cb7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the issue include a Snack or list of steps to reproduce the issue?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c387ff3290cbf4f5ce463bab277de35a9d162" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the issue need more information?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716b4a5a5925c51d310690b44ad8b97c8ca3494c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the pull request add a completely new feature we don't want to add to the core and maintain?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b19c9a26031f1e70a3501657920a9dc4bd62a37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the pull request do several unrelated things at the same time?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7951b71c79710c6d25076d2d52c9faa8b0d63e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enable VSync highlighting&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1cac0c321d0c0541894492791de778177e56b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explain why&lt;/strong&gt; it doesn't fit into the scope of the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68847114f71639ada1b9e324ec7ca08f86fc6f19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HINT&lt;/strong&gt;: Use the WASD keys to strafe and zoom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3661ee8f9da1e9b389819f67b4b05559c33f6b4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Has the issue been resolved already in the comments?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ba9a871f714dde2cd0f7ecc91125447587b520" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to Contribute to an Open Source Project on GitHub&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d553f6cc32126072a31a45f3949306eb04c4ec1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT!&lt;/strong&gt; in ReactJS updating the property value will result in setter method call. Note that one of the ways we can update component is by removing properties that have been set before. In that case setter method will be called as well to notify view manager that property has changed. In that case &quot;default&quot; value will be provided (for primitive types &quot;default&quot; can value can be specified using &lt;code&gt;defaultBoolean&lt;/code&gt;, &lt;code&gt;defaultFloat&lt;/code&gt;, etc. arguments of &lt;code&gt;@ReactProp&lt;/code&gt; annotation, for complex types setter will be called with value set to &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451790cdceba20b50fc41f08dac996452c4cbc88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT:&lt;/strong&gt; You don't have to install the new version of the &lt;code&gt;react-native&lt;/code&gt; package, it will be installed automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f1d28f431835884e68d92f634388e020e94480" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important when making third party modules&lt;/strong&gt;: Static libraries with Swift are only supported in Xcode 9 and later. In order for the Xcode project to build when you use Swift in the iOS static library you include in the module, your main app project must contain Swift code and a bridging header itself. If your app project does not contain any Swift code, a workaround can be a single empty .swift file and an empty bridging header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c2b3e7c695651c83e1b241712bc85e47f80670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is a pull request waiting for a response from author?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999a02462e7604fb27384707e110501ee07960cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the issue a duplicate of an existing, open issue?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cc116b3240d49593d1e49505f84cfb6001878c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the issue for an old release of React Native?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c07a185f55d5c21bdbe5cfae6512bec8b56f607" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request missing information?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0255488621745bb0f7d7868102a1261f101ade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request old and need rebasing?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a8a39c32c58d144387b4089cf73d0ced50f065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request old and waiting for review?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7bdc9570c91d6631bbdde19b271ca6a48a29a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is this issue a feature request?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dd7fff5448e3a5655e22c5741c06e62a60e122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is this issue a request for help?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ea43acb2cd230fcfeebcbd23b0d02157ac29f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS Thread.&lt;/strong&gt; This is where JavaScript is executed. The thread name will be either &lt;code&gt;mqt_js&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; depending on how cooperative the kernel on your device is being. To identify it if it doesn't have a name, look for things like &lt;code&gt;JSCall&lt;/code&gt;, &lt;code&gt;Bridge.executeJSCall&lt;/code&gt;, etc:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be24f8249da2832b75664e72da0ce307d4847918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Link to relevant documentation&lt;/strong&gt;, if you have it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0696fd0b8bc4d0c5e3e3f946b7980755a82b85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Most important: Look around.&lt;/strong&gt; Match the style you see used in the rest of the project. This includes formatting, naming things in code, naming things in documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93850fe8d6048bf67a7a36db8e12128b1f2581a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; This is not supported by all native implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e04ca96baaa9deec9655ab37a911f64435783" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; : In order for video to play inline, not only does this property need to be set to &lt;code&gt;true&lt;/code&gt;, but the video element in the HTML document must also include the &lt;code&gt;webkit-playsinline&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a16336108d52b9dd56df151a78a130f3361c040" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: About array and map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3247ae2ec2bb9379177e6d5e46ceaaa11dada8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: It is important to use the @objc modifiers to ensure the class and functions are exported properly to the Objective-C runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c85e4aae22bfd53f1ed3ca8577954dda2af8cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: JavaScript method names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4f177fa39ef792bc0f310ec4cb92a9d74d41f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Sharing dispatch queues between modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea12e47faef483743a9437da1c5e87b0deea1aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: This is not supported by all native implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350a09972d0a15d926f202c4e7ff37b2021450de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Native Modules Thread.&lt;/strong&gt; This is where native module calls (e.g. the &lt;code&gt;UIManager&lt;/code&gt;) are executed. The thread name will be either &lt;code&gt;mqt_native_modules&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;. To identify it in the latter case, look for things like &lt;code&gt;NativeCall&lt;/code&gt;, &lt;code&gt;callJavaModuleMethod&lt;/code&gt;, and &lt;code&gt;onBatchComplete&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b174e637a99c959acedd2e085ae198d4923a1b21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note about saving the keystore:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1674a715614154ac6289ba71e4b85e3d2f98e48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note for Android:&lt;/strong&gt; add &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&amp;gt;&lt;/code&gt; to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be4ffdddb8b9573bfe7619a952594de97734c23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not attempt to set the &lt;code&gt;frame&lt;/code&gt; or &lt;code&gt;backgroundColor&lt;/code&gt; properties on the &lt;code&gt;UIView&lt;/code&gt; instance that you expose through the &lt;code&gt;-view&lt;/code&gt; method. React Native will overwrite the values set by your custom class in order to match your JavaScript component's layout props. If you need this granularity of control it might be better to wrap the &lt;code&gt;UIView&lt;/code&gt; instance you want to style in another &lt;code&gt;UIView&lt;/code&gt; and return the wrapper &lt;code&gt;UIView&lt;/code&gt; instead. See &lt;a href=&quot;https://github.com/facebook/react-native/issues/2948&quot;&gt;Issue 2948&lt;/a&gt; for more context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07b97f70a7823eaa15bdf836c1df537b0f49504" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is not necessary to keep clicking &lt;code&gt;Merge master to your branch&lt;/code&gt; on the PR page. You would want to merge master if there are conflicts or tests are failing. The Facebook-GitHub-Bot ultimately squashes all commits to a single one before merging your PR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce480223b46f1bdb75af809152112deb7ecd52d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When rendering, don't forget to stretch the view, otherwise you'll be staring at a blank screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e837e9d97c46ec660f3f92466fc99cb3fc3a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;refreshing&lt;/code&gt; is a controlled prop, this is why it needs to be set to true in the &lt;code&gt;onRefresh&lt;/code&gt; function otherwise the refresh indicator will stop immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afec4757738ed089345fc87d59852c21cf30688" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One issue, one bug:&lt;/strong&gt; Please report a single bug per issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Parameters:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12dd8e61ba852c1ce0bccefae413e8c66850ca3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Properties:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Properties:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9850c7d140af7598e8fa8b5482778306197994b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Provide a Snack:&lt;/strong&gt; The best way to get attention on your issue is to provide a reduced test case. You can use &lt;a href=&quot;https://snack.expo.io/&quot;&gt;Snack&lt;/a&gt; to demonstrate the issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9534fe3662923da56f1da1f5a1a4727588b02983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Provide reproduction steps:&lt;/strong&gt; List all the steps necessary to reproduce the issue. Provide a Snack or upload a sample project to GitHub. The person reading your bug report should be able to follow these steps to reproduce your issue with minimal effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9625ccedbac5e1c3e43830419c371d5089c27e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reopening a closed issue:&lt;/strong&gt; Sometimes it's necessary to reopen an issue. For example, if an issue was closed waiting for the author, then the author replied and it turns out this is indeed a bug, maintainers can reopen the issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01bfbced6ea3dc7a3670cf94ad2ba2845dde8de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security Warning:&lt;/strong&gt; Currently, &lt;code&gt;onMessage&lt;/code&gt; and &lt;code&gt;postMessage&lt;/code&gt; do not allow specifying an origin. This can lead to cross-site scripting attacks if an unexpected document is loaded within a &lt;code&gt;WebView&lt;/code&gt; instance. Please refer to the MDN documentation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code&gt;Window.postMessage()&lt;/code&gt;&lt;/a&gt; for more details on the security implications of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d7a775ee526d4f487f64da53f7c8fb76bd2753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Set environment variables through your local shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e4c3527154de063c5d2d7831d287303e0666f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Create a &lt;code&gt;local.properties&lt;/code&gt; file in the &lt;code&gt;android&lt;/code&gt; directory of your react-native app with the following contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7c71e9c9c6cbf85b43d351794f447a4f52bbe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Thank&lt;/strong&gt; them for their contribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db78fbedcf96c64deccf79f27b9dadcd96fc12e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The alpha channel of the view rendered by the &lt;code&gt;maskElement&lt;/code&gt; prop determines how much of the view's content and background shows through.&lt;/strong&gt; Fully or partially opaque pixels allow the underlying content to show through but fully transparent pixels block that content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acda93e0731199644b2b506bceefbecec207c048" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The vibration duration in iOS is not configurable&lt;/strong&gt;, so there are some differences with Android. In Android, if &lt;code&gt;pattern&lt;/code&gt; is a number, it specifies the vibration duration in ms. If &lt;code&gt;pattern&lt;/code&gt; is an array, those odd indices are the vibration duration, while the even ones are the separation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a849a2441be83a5b5bb89b84ceb349782e094f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try out the latest version:&lt;/strong&gt; Verify that the issue can be reproduced locally by updating your project to use &lt;a href=&quot;http://facebook.github.io/react-native/versions.html&quot;&gt;React Native from &lt;code&gt;master&lt;/code&gt;&lt;/a&gt;. The bug may have already been fixed!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e1ec8479c938f51d0e86b7d8d2cb8c18b5fb63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UI Thread.&lt;/strong&gt; This is where standard android measure/layout/draw happens. The thread name on the right will be your package name (in my case book.adsmanager) or UI Thread. The events that you see on this thread should look something like this and have to do with &lt;code&gt;Choreographer&lt;/code&gt;, &lt;code&gt;traversals&lt;/code&gt;, and &lt;code&gt;DispatchUI&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61fe7dcc9b944b7aa4bb3863418ae332c93ffba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;WARNING&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6ae8d9c3245259c6783ec0a6a8282c22223fc76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Was the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;Issue Template&lt;/a&gt; used to fill out the issue? Did the author answer Yes to both questions at the top?&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955663bfdafcf8e588727b759a8a0cae5c86172e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;adjustable&lt;/strong&gt; Used when an element can be &quot;adjusted&quot; (e.g. a slider).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa770326ebf6886a4f4e3970c551bfb003e4995" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allowsDirectInteraction&lt;/strong&gt; Used when an element allows direct touch interaction for VoiceOver users (for example, a view representing a piano keyboard).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cb7e53233000710e0cd20800024d1229206811" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assertive&lt;/strong&gt; Accessibility services should interrupt ongoing speech to immediately announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97abc1d53ef7358c7d1e48501e2baf4d8675234" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;button&lt;/strong&gt; Used when the element should be treated as a button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ae2102a86aef1f0ea9c57cf978f2e4dacab0b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;disabled&lt;/strong&gt; Used when the control is not enabled and does not respond to user input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623718018c1976dc7cb018eac7be138c2289c595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;frequentUpdates&lt;/strong&gt; Used when the element frequently updates its label or value, but too often to send notifications. Allows an accessibility client to poll for changes. A stopwatch would be an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d46bd5de68bb9e0de4f4aa274b60c00c50cb262" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; Used when an element acts as a header for a content section (e.g. the title of a navigation bar).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67171c73db0f03c23ed330eebcf08212b783b898" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;image&lt;/strong&gt; Used when the element should be treated as an image. Can be combined with button or link, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17338e17149cec2e0f91c0ddc5b7acccf3299b36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; Used when the element acts as a keyboard key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb68825282764664f021b10715c75bc1598c30f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;link&lt;/strong&gt; Used when the element should be treated as a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cd51a113f7d06e77c42bc108fb590897b58f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;none&lt;/strong&gt; Accessibility services should not announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c571475085ab7686f1624eec81d1f6fbf867e9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;none&lt;/strong&gt; Used when the element has no traits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f90c6f6ecfc85f3539818ee1cf3b4422eb808f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pageTurn&lt;/strong&gt; Informs VoiceOver that it should scroll to the next page when it finishes reading the contents of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055e3ac86bfdc54152f2209612c3fb6cc36b2566" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;plays&lt;/strong&gt; Used when the element plays its own sound when activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7771ce8358bc3b5ba46bd8855ea1ed9a2b8bf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;polite&lt;/strong&gt; Accessibility services should announce changes to this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2875ac36111f2bec92389b6b3b4440d19375b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;search&lt;/strong&gt; Used when the text field element should also be treated as a search field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ede3829af0f6f09350b08d1e211282e1dd3264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;selected&lt;/strong&gt; Used when the element is selected. For example, a selected row in a table or a selected button within a segmented control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bf1b98822f376c3cc097dfff36a50ad1600c7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;startsMedia&lt;/strong&gt; Used when activating an element starts a media session (e.g. playing a movie, recording audio) that should not be interrupted by output from an assistive technology, like VoiceOver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1694d38578965d2cff52ae39937dbdf958b4dbe7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;summary&lt;/strong&gt; Used when an element can be used to provide a quick summary of current conditions in the app when the app first launches. For example, when Weather first launches, the element with today's weather conditions is marked with this trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86ff4a1317ed6881d4465e1f5b871f9689dc5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;text&lt;/strong&gt; Used when the element should be treated as static text that cannot change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0a9a6bbdc27942100f8f60e9f0060fffd79c5f" translate="yes" xml:space="preserve">
          <source>?(() =&amp;gt; void),&lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8c1e683078e6d3e4a9c2ada7a307bf284ac90d" translate="yes" xml:space="preserve">
          <source>?((text: string) =&amp;gt; void),&lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e406c4711ff6c42a7908aed1907cc13072898efe" translate="yes" xml:space="preserve">
          <source>?(error: ?Error) =&amp;gt; void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87705ce5a9b16fb2fcf9c469fb7b5feda34aeb73" translate="yes" xml:space="preserve">
          <source>?(error: ?Error, keys: ?Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538b9650307f6f96842b1be1b717922bfe7c5078" translate="yes" xml:space="preserve">
          <source>?(error: ?Error, result: ?string) =&amp;gt; void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8836a69e2d4409fbe47ef07e8bddcb7d788f43b7" translate="yes" xml:space="preserve">
          <source>?(errors: ?Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08752e551e2e2ba935d7cf167052d0eed1ec746" translate="yes" xml:space="preserve">
          <source>@deprecated</source>
          <target state="translated">@deprecated</target>
        </trans-unit>
        <trans-unit id="81fa55d50be6fb46c1d469383fcf49714600da45" translate="yes" xml:space="preserve">
          <source>@keyword checkbox @keyword toggle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16464ddad1cc4d8d36bae3d13fadc3129b1bfca7" translate="yes" xml:space="preserve">
          <source>@param objName @param fnName @param {function} func @return {function} replacement function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3618818333feb7f4764c81c4da2a78b256f4a8" translate="yes" xml:space="preserve">
          <source>@param object @param objectName @param methodNames Map from method names to method display names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4b85dd6d4cc6ebd732d232d951cea4c84f9db5" translate="yes" xml:space="preserve">
          <source>@param taskId the native id for this task instance to keep track of its execution @param taskKey the key for the task to start @param data the data to pass to the task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56037c72516f19e995509d02c9c82ef986a63085" translate="yes" xml:space="preserve">
          <source>@param the content to be stored in the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1be8eadbdb68bfb210e72c6149dc1e19f4eb40d" translate="yes" xml:space="preserve">
          <source>@param {function} callback function to be called when the event fires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2b3dc926ca275308996b63aa373ea2eeb35202" translate="yes" xml:space="preserve">
          <source>@param {object} config Enhanced versions of all of the responder callbacks that provide not only the typical &lt;code&gt;ResponderSyntheticEvent&lt;/code&gt;, but also the &lt;code&gt;PanResponder&lt;/code&gt; gesture state. Simply replace the word &lt;code&gt;Responder&lt;/code&gt; with &lt;code&gt;PanResponder&lt;/code&gt; in each of the typical &lt;code&gt;onResponder*&lt;/code&gt; callbacks. For example, the &lt;code&gt;config&lt;/code&gt; object would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1935d6a746f30c386323abd90437a390197828" translate="yes" xml:space="preserve">
          <source>@param {object} dims Simple string-keyed object of dimensions to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40d3c15c84908436991d4f0f855e807a5619866" translate="yes" xml:space="preserve">
          <source>@param {string} dim Name of dimension as defined when calling &lt;code&gt;set&lt;/code&gt;. @returns {Object?} Value for the dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3081eb28c72be8dde440fb3118bd28d7db4d0679" translate="yes" xml:space="preserve">
          <source>@param {string} eventName The &lt;code&gt;nativeEvent&lt;/code&gt; is the string that identifies the event you're listening for. @param {function} callback function to be called when the event fires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cacdb0b9fc8e7728d9cee9f7661f3875f98d71" translate="yes" xml:space="preserve">
          <source>@param {string} eventName The &lt;code&gt;nativeEvent&lt;/code&gt; is the string that identifies the event you're listening for. This can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c063b71fd1e576a00cfad6709f419b673ecc6e" translate="yes" xml:space="preserve">
          <source>@param {string} eventType The native event string listeners are watching which will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeb466b9ccfb915bbcbf3ac1626e13e1f4e32fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReactInstanceManager&lt;/code&gt; can be shared by multiple activities and/or fragments. You will want to make your own &lt;code&gt;ReactFragment&lt;/code&gt; or &lt;code&gt;ReactActivity&lt;/code&gt; and have a singleton &lt;em&gt;holder&lt;/em&gt; that holds a &lt;code&gt;ReactInstanceManager&lt;/code&gt;. When you need the &lt;code&gt;ReactInstanceManager&lt;/code&gt; (e.g., to hook up the &lt;code&gt;ReactInstanceManager&lt;/code&gt; to the lifecycle of those Activities or Fragments) use the one provided by the singleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ed1350cf233a2333ae79a10f3f9d01ded49693" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gestureState&lt;/code&gt; object has the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019956b19386766d9f33d8d381edb0f9b3a3c751" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0857bf536fa638eb2ae129a502367d125bed411d" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19ed506b716c1a127e33b0f405eb55bc6a1780d" translate="yes" xml:space="preserve">
          <source>A Boolean value that indicates whether the tab bar is translucent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36f3099aca06eb285221ea19ab89b4c0853b217" translate="yes" xml:space="preserve">
          <source>A Mac is required in order to build your app for iOS devices. Alternatively, you can refer to the &lt;a href=&quot;getting-started&quot;&gt;Quick Start instructions&lt;/a&gt; to learn how to build your app using Create React Native App, which will allow you to run your app using the Expo client app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a432a28a726bf50ff20fb56f3178405c6d988f1" translate="yes" xml:space="preserve">
          <source>A Mac is required to build projects with native code for iOS. You can follow the &lt;a href=&quot;index&quot;&gt;Quick Start&lt;/a&gt; to learn how to build your app using Create React Native App instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdec57fd28ad4fda7bbc10bde95f2248352eaa2" translate="yes" xml:space="preserve">
          <source>A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74da5c8728b041b234ef5c7a8a4b062d4efc521" translate="yes" xml:space="preserve">
          <source>A React component for displaying text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391623f7b64b41249909875b47c88f67fe6a2e1d" translate="yes" xml:space="preserve">
          <source>A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. Only works for vertical ScrollViews (&lt;code&gt;horizontal&lt;/code&gt; prop must be &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1f41a955fde9875adab7a627cde7895072ca15" translate="yes" xml:space="preserve">
          <source>A ScrollView with a single item can be used to allow the user to zoom content. Set up the &lt;code&gt;maximumZoomScale&lt;/code&gt; and &lt;code&gt;minimumZoomScale&lt;/code&gt; props and your user will be able to use pinch and expand gestures to zoom in and out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa023eae2cf3911e8d2f35cad5e3fe35e7f4d673" translate="yes" xml:space="preserve">
          <source>A StyleSheet is an abstraction similar to CSS StyleSheets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57a0dd6c20fdf56d1ac254722472f0e17114b31" translate="yes" xml:space="preserve">
          <source>A basic button component for handling touches that should render nicely on any platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6994b3393ad14c12f76de0587a5f29e1c0eecf10" translate="yes" xml:space="preserve">
          <source>A basic button component that should render nicely on any platform. Supports a minimal level of customization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7b8cf5b3f88586c77b787e0a4521c96dfe4be6" translate="yes" xml:space="preserve">
          <source>A caveat is that videos must use absolute positioning instead of &lt;code&gt;flexGrow&lt;/code&gt;, since size info is not currently passed for non-image assets. This limitation doesn't occur for videos that are linked directly into Xcode or the Assets folder for Android.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf41feb76c065b633d179bb1de00be54c27de3b" translate="yes" xml:space="preserve">
          <source>A circular function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff8104e13e8be4bb1296f0decc50b026beb2d09" translate="yes" xml:space="preserve">
          <source>A common feature request from developers familiar with the web is &lt;code&gt;background-image&lt;/code&gt;. To handle this use case, you can use the &lt;code&gt;&amp;lt;ImageBackground&amp;gt;&lt;/code&gt; component, which has the same props as &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;, and add whatever children to it you would like to layer on top of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148d65bf70cfb542e473c42899f18003cde9065a" translate="yes" xml:space="preserve">
          <source>A common type of integration test is the snapshot test. These tests render a component, and verify snapshots of the screen against reference images using &lt;code&gt;TestModule.verifySnapshot()&lt;/code&gt;, using the &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt;&lt;code&gt;FBSnapshotTestCase&lt;/code&gt;&lt;/a&gt; library behind the scenes. Reference images are recorded by setting &lt;code&gt;recordMode = YES&lt;/code&gt; on the &lt;code&gt;RCTTestRunner&lt;/code&gt;, then running the tests. Snapshots will differ slightly between 32 and 64 bit, and various OS versions, so it's recommended that you enforce tests are run with the correct configuration. It's also highly recommended that all network data be mocked out, along with other potentially troublesome dependencies. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/IntegrationTests/SimpleSnapshotTest.js&quot;&gt;&lt;code&gt;SimpleSnapshotTest&lt;/code&gt;&lt;/a&gt; for a basic example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fabd7a8b91843c73ea699b12a71ff2cf5f2838" translate="yes" xml:space="preserve">
          <source>A common way to use this API is to call it before calling &lt;code&gt;setState&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e166634f29fa3f7bd1450542ce8992c1f1f1d1e" translate="yes" xml:space="preserve">
          <source>A compelling reason for using React Native instead of WebView-based tools is to achieve 60 frames per second and a native look and feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we're not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary. We try our best to deliver buttery-smooth UI performance by default, but sometimes that just isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c72b300f82ed6aae6f87e302bd6cb762c3cf2c" translate="yes" xml:space="preserve">
          <source>A component can only expand to fill available space if its parent has dimensions greater than 0. If a parent does not have either a fixed &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; or &lt;code&gt;flex&lt;/code&gt;, the parent will have dimensions of 0 and the &lt;code&gt;flex&lt;/code&gt; children will not be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97c0667d0d75bd0214ef42fba808bab5450a07f" translate="yes" xml:space="preserve">
          <source>A component can specify the layout of its children using the flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06735076c496345cae3048cf34389709e4415031" translate="yes" xml:space="preserve">
          <source>A component for displaying images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67972ace285ed8abce4e083b79016d95ffe9de8b" translate="yes" xml:space="preserve">
          <source>A component for displaying text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d1701ead7bb9571a92f5b6cc9da4e2ea0ffc41" translate="yes" xml:space="preserve">
          <source>A component for inputting text into the app via a keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ecc2fc2ab8dfc7b7db8375d3ed7546e59f2796" translate="yes" xml:space="preserve">
          <source>A component for rendering performant scrollable lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f89baec7c67a355729763bbe8177ca6c24897f" translate="yes" xml:space="preserve">
          <source>A component that renders web content in a native view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6068a182acfc5f22574e692c18af5c440d06c2de" translate="yes" xml:space="preserve">
          <source>A component used to select a single value from a range of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594f7edda2ed9f5769f0b371380d9a6ee419e75b" translate="yes" xml:space="preserve">
          <source>A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a &lt;code&gt;TextInput&lt;/code&gt; has focus. This component can be used to create custom toolbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acc9dd9779be5c018184fb35c071244d38d0edc" translate="yes" xml:space="preserve">
          <source>A component's height and width determine its size on the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10930e64cc380172b35c276d9fe5f969c9e898db" translate="yes" xml:space="preserve">
          <source>A couple of contributors making a good case may be all that is needed to reopen the issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303a8001aac6c16d65eb120b672e32bcb2b6e650" translate="yes" xml:space="preserve">
          <source>A cubic function, &lt;code&gt;f(t) = t * t * t&lt;/code&gt;. Position equals the cube of elapsed time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2885d6d19389a48e74a01a988a62fa8735af2301" translate="yes" xml:space="preserve">
          <source>A custom icon for the tab. It is ignored when a system icon is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163bad88bdebb163cd974f2a6bf5d3f5779b1f73" translate="yes" xml:space="preserve">
          <source>A custom icon when the tab is selected. It is ignored when a system icon is defined. If left empty, the icon will be tinted in blue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632daea69dbaf163a844ebab613e866bbb9bd00b" translate="yes" xml:space="preserve">
          <source>A date has been selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0998357d3fb0b8e3e9a9ab65e27b112c82ae07" translate="yes" xml:space="preserve">
          <source>A delivered notification is an object containing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c70bd301dae61f565fe4f3c3802f7cc92e061f3" translate="yes" xml:space="preserve">
          <source>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts &lt;code&gt;&quot;normal&quot;&lt;/code&gt; and &lt;code&gt;&quot;fast&quot;&lt;/code&gt; which match the underlying iOS settings for &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; and &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b5bbe8424a18f4d2b594a7d9f8fe312c46a844" translate="yes" xml:space="preserve">
          <source>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use the string shortcuts &lt;code&gt;&quot;normal&quot;&lt;/code&gt; and &lt;code&gt;&quot;fast&quot;&lt;/code&gt; which match the underlying iOS settings for &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; and &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16daa06c0c4fb2f6604d2e7bb18408b251ba933c" translate="yes" xml:space="preserve">
          <source>A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a1ac6167af060d434ebb64924c01f7d8329b90" translate="yes" xml:space="preserve">
          <source>A function that is invoked when the webview calls &lt;code&gt;window.postMessage&lt;/code&gt;. Setting this property will inject a &lt;code&gt;postMessage&lt;/code&gt; global into your webview, but will still call pre-existing values of &lt;code&gt;postMessage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97251288c8999e4d7ca28b1fb79fa3eeccfdc665" translate="yes" xml:space="preserve">
          <source>A function that returns the scrollable component in which the list rows are rendered. Defaults to returning a ScrollView with the given props.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482fdf43966153203b04c87da6e3f742feea4f17" translate="yes" xml:space="preserve">
          <source>A function that will be passed an array of objects describing local notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a68ebbb4f3a0eb13f35f632f353223c1577d9" translate="yes" xml:space="preserve">
          <source>A function that will be passed the current badge number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcabf91db2b15c0c0e1d1421d04d26f05c41dce" translate="yes" xml:space="preserve">
          <source>A generic accessor for extracting an item from any sort of data blob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d113bdcc341fe15908a1a5daf690ad88708e5a39" translate="yes" xml:space="preserve">
          <source>A good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI or updates the website.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1dde56c95c364a2dd916abcba5b5623dcdd74c0" translate="yes" xml:space="preserve">
          <source>A helper function to scroll to a specific page in the ViewPager. The transition between pages will &lt;em&gt;not&lt;/em&gt; be animated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0913c2a4db0d2eb222d5b024a7c9e98522f02260" translate="yes" xml:space="preserve">
          <source>A helper function to scroll to a specific page in the ViewPager. The transition between pages will be animated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83100667498d38ece33a90030de72ca32af3952f" translate="yes" xml:space="preserve">
          <source>A library for creating fluid, powerful animations that are easy to build and maintain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0d111d00e97556b82df40173ce3f060c84c313" translate="yes" xml:space="preserve">
          <source>A line with hairline width may not be visible if your simulator is downscaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017e21380565f3d0850da48eedc3a6f5213dab59" translate="yes" xml:space="preserve">
          <source>A linear function, &lt;code&gt;f(t) = t&lt;/code&gt;. Position correlates to elapsed time one to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2767fcb7d2bb22c48ef8b8fab649a90980a218ef" translate="yes" xml:space="preserve">
          <source>A maintainer will add a comment, &lt;code&gt;Duplicate of #123&lt;/code&gt;, which will mark the issue as a duplicate of issue #123. They will then close the issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faebbe4463593be1781261ed5bd1cebfcff2004" translate="yes" xml:space="preserve">
          <source>A marker property for telling the list to re-render (since it implements &lt;code&gt;PureComponent&lt;/code&gt;). If any of your &lt;code&gt;renderItem&lt;/code&gt;, Header, Footer, etc. functions depend on anything outside of the &lt;code&gt;data&lt;/code&gt; prop, stick it here and treat it immutably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5575aa78c318423bd450894291d2f95c522df37b" translate="yes" xml:space="preserve">
          <source>A native event is a synthetic touch event with the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f004e9ea3b85c5d65c73d05c1663b717bfce52" translate="yes" xml:space="preserve">
          <source>A native module can export constants that are immediately available to JavaScript at runtime. This is useful for communicating static data that would otherwise require a round-trip through the bridge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d20fd55ebf941b9595eec282dfe9c4767d42f8c" translate="yes" xml:space="preserve">
          <source>A native module is just an Objective-C class that implements the &lt;code&gt;RCTBridgeModule&lt;/code&gt; protocol. If you are wondering, RCT is an abbreviation of ReaCT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124a960de7dd34cee290dd418b0c6316e900165e" translate="yes" xml:space="preserve">
          <source>A native module is supposed to invoke its callback only once. It can, however, store the callback and invoke it later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1dbea2ff0b6381f5366edd9c45819f901216135" translate="yes" xml:space="preserve">
          <source>A native module should invoke its callback exactly once. It's okay to store the callback and invoke it later. This pattern is often used to wrap iOS APIs that require delegates - see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Modules/RCTAlertManager.m&quot;&gt;&lt;code&gt;RCTAlertManager&lt;/code&gt;&lt;/a&gt; for an example. If the callback is never invoked, some memory is leaked. If both &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onFail&lt;/code&gt; callbacks are passed, you should only invoke one of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1864cc3b9e403eefa32ec078bdf1b0f3487499f4" translate="yes" xml:space="preserve">
          <source>A number (opaque type returned by require('./foo.png')) or an &lt;code&gt;ImageSource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578458acdb7a59534cf04aa05d1439351ba3e10b" translate="yes" xml:space="preserve">
          <source>A performance optimization for improving scroll perf of large lists, used in conjunction with overflow: 'hidden' on the row containers. This is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a0a83fd3a5edf779c5f843bf824236c9ee5b61" translate="yes" xml:space="preserve">
          <source>A performant interface for rendering sectioned lists, supporting the most handy features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41959416ca8549d42043c008aa48b269f664a86a" translate="yes" xml:space="preserve">
          <source>A performant interface for rendering simple, flat lists, supporting the most handy features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7df7e3afc97f44bad8933ea0bde59cb6bf70e8" translate="yes" xml:space="preserve">
          <source>A positive number will use setTimeout to schedule any tasks after the eventLoopRunningTime hits the deadline value, otherwise all tasks will be executed in one setImmediate batch (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bbb6d72ce5f84d837c54902a18c75a92fffb7e" translate="yes" xml:space="preserve">
          <source>A power function. Position is equal to the Nth power of elapsed time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb47a278799c6aae215fdb0c91b2565f1d4e6615" translate="yes" xml:space="preserve">
          <source>A quadratic function, &lt;code&gt;f(t) = t * t&lt;/code&gt;. Position equals the square of elapsed time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e085ebbfc48600e656be2ba95c9cae3601973a7b" translate="yes" xml:space="preserve">
          <source>A quick breakdown of this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd6c0a77e3adf4e6a0d1220298522a487be6f5c" translate="yes" xml:space="preserve">
          <source>A simple elastic interaction, similar to a spring oscillating back and forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0ad65732344dff27843a455a3c4e2d0962c255" translate="yes" xml:space="preserve">
          <source>A simple inertial interaction, similar to an object slowly accelerating to speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abbc177f291ccfbae328d4ddded2298ef9d521d" translate="yes" xml:space="preserve">
          <source>A simple mapping to convert a 0-1 range to a 0-100 range would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18e2c43dfc1ce54352dd88c57fdb59d2d37a2f3" translate="yes" xml:space="preserve">
          <source>A sinusoidal function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a91e9ac50bea28846689bef3d55b0fe2097449f" translate="yes" xml:space="preserve">
          <source>A smooth animation should look something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23e512a887cb55a89d4aa1713041b1b009d2d22" translate="yes" xml:space="preserve">
          <source>A static image to display while loading the image source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2d7d08501956fc2c57139fb06826c23e1e8c32" translate="yes" xml:space="preserve">
          <source>A stepping function, returns 1 for any positive value of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e112672b401efdb1a8ed2ef65c9516e2a11d489f" translate="yes" xml:space="preserve">
          <source>A stepping function, returns 1 if &lt;code&gt;n&lt;/code&gt; is greater than or equal to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ed0ab51f78ccc9b21f94e6b6baf14e30113037" translate="yes" xml:space="preserve">
          <source>A stretchable image to display as the progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf817e0804a7cee0ca43cbcf43546a26c743bb0" translate="yes" xml:space="preserve">
          <source>A stretchable image to display behind the progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470cb7dddeed4e81a62183fcda110f7105f0aa54" translate="yes" xml:space="preserve">
          <source>A task is a simple async function that you register on &lt;code&gt;AppRegistry&lt;/code&gt;, similar to registering React applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3424e7b25380caf6c2d3375912fe515935adadb" translate="yes" xml:space="preserve">
          <source>A test plan is required! Add the labels 'Needs revision' and 'Needs response from author'. You can then follow up with a response like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a49c084c7743ce5b3db42b00ffbed194cc26694" translate="yes" xml:space="preserve">
          <source>A time has been selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295a5567a5c7b8b03b93f04200d8189c4afa89d3" translate="yes" xml:space="preserve">
          <source>A typical way to use this prop is with images displayed on a solid background and setting the &lt;code&gt;overlayColor&lt;/code&gt; to the same color as the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4289bb22e2134d8b06c9b9f1985d2693f1cbc433" translate="yes" xml:space="preserve">
          <source>A unique identifier for this element to be used in UI Automation testing scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc9d1e74feee7151391148a4d702a234b6cd59d" translate="yes" xml:space="preserve">
          <source>A useful tool to visualize cubic bezier curves can be found at &lt;a href=&quot;http://cubic-bezier.com/&quot;&gt;http://cubic-bezier.com/&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513db7f631fd2fb38caa053662a837994954f48f" translate="yes" xml:space="preserve">
          <source>A value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a86e10d90734bd66304d1ea5063302520b5687" translate="yes" xml:space="preserve">
          <source>A value indicating whether the accessibility elements contained within this accessibility element are hidden. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8a91d9f4d7faedd095aede69c5cbc90a78979e" translate="yes" xml:space="preserve">
          <source>A very common pattern is to create overlays with position absolute and zero positioning, so &lt;code&gt;absoluteFill&lt;/code&gt; can be used for convenience and to reduce duplication of these repeated styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350ac36cbfb6c21608597caec6cb12ee201bd3b8" translate="yes" xml:space="preserve">
          <source>A view can become the touch responder by implementing the correct negotiation methods. There are two methods to ask the view if it wants to become responder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2a16269e7a18bc6cb96c9edb985d59ea02403b" translate="yes" xml:space="preserve">
          <source>A wrapper around &lt;code&gt;UINavigationController&lt;/code&gt;, enabling you to implement a navigation stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8cff30cc6dac9f1c628e3debdbb92ec8ba8df1" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches (Android only). On Android this component uses native state drawable to display touch feedback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080ef16368c837465ac83f9eb3bb25651e09f94a" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7a3d3fcca42ae325205f7773e82950fa4cbba7" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, which allows the underlay color to show through, darkening or tinting the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3d258d550d68ba1be5f0d3012a9f3d92e426f3" translate="yes" xml:space="preserve">
          <source>API to display an iOS action sheet or share sheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca0a1dafaea5e84f002eb1c3a7a92dd033b7a8c" translate="yes" xml:space="preserve">
          <source>APIs</source>
          <target state="translated">APIs</target>
        </trans-unit>
        <trans-unit id="26376cc81dd35204671d2646c0c88e1aba13fe50" translate="yes" xml:space="preserve">
          <source>Abort prefetch request. Android-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d264807d480b8f702eda60d3b1d2123383b568" translate="yes" xml:space="preserve">
          <source>Accent color of the control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="e0caf26de2b0a085bfe73345602971dce84595cd" translate="yes" xml:space="preserve">
          <source>Accessibility properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b04f0a7c190693f97621bb7532c9adadc0484d8" translate="yes" xml:space="preserve">
          <source>Accessibility traits tell a person using VoiceOver what kind of element they have selected. Is this element a label? A button? A header? These questions are answered by &lt;code&gt;accessibilityTraits&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98874c69821f85830f96eca165391792a838543d" translate="yes" xml:space="preserve">
          <source>AccessibilityComponentTypes</source>
          <target state="translated">AccessibilityComponentTypes</target>
        </trans-unit>
        <trans-unit id="69b45888e33a406a042374f7ee398eab71d9e6e3" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo</source>
          <target state="translated">AccessibilityInfo</target>
        </trans-unit>
        <trans-unit id="bcc30d6184b0dcc29e02b6dd954ec394032d6cb2" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.addEventListener()</source>
          <target state="translated">AccessibilityInfo.addEventListener()</target>
        </trans-unit>
        <trans-unit id="f3aa241aa5219144ce5b7d1803a12622733162fc" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.announceForAccessibility()</source>
          <target state="translated">AccessibilityInfo.announceForAccessibility()</target>
        </trans-unit>
        <trans-unit id="fb0d0a907d76c14892e7ab25824065b041330d66" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.fetch()</source>
          <target state="translated">AccessibilityInfo.fetch()</target>
        </trans-unit>
        <trans-unit id="30cc8bc69a34da6cd4bae1e0e929842cf37e3e14" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.removeEventListener()</source>
          <target state="translated">AccessibilityInfo.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="5ef4ffa8374c254c0b68a314429a989d868f256c" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.setAccessibilityFocus()</source>
          <target state="translated">AccessibilityInfo.setAccessibilityFocus()</target>
        </trans-unit>
        <trans-unit id="020e913444b32a432faba0ce18d89add018d6ddb" translate="yes" xml:space="preserve">
          <source>AccessibilityTraits, ,array of AccessibilityTraits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58a854150d51363a38b795c21756c41aaaf0440" translate="yes" xml:space="preserve">
          <source>Accessing console logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6269a323cfd3c8afe205ce18533af4f7ff9832f2" translate="yes" xml:space="preserve">
          <source>Accessing the In-App Developer Menu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82091c0c7be8459e23be522b4faffbb21088bc1b" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS</source>
          <target state="translated">ActionSheetIOS</target>
        </trans-unit>
        <trans-unit id="b0d26927f7c53d7af37be63f6ff6ce3a01a1ab8e" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS.showActionSheetWithOptions()</source>
          <target state="translated">ActionSheetIOS.showActionSheetWithOptions()</target>
        </trans-unit>
        <trans-unit id="500a9340f24268187ac5e0fc15d8ace1136b78c9" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS.showShareActionSheetWithOptions()</source>
          <target state="translated">ActionSheetIOS.showShareActionSheetWithOptions()</target>
        </trans-unit>
        <trans-unit id="5c380b342d5d754ff5004fa64e6bfdbf794f4c9b" translate="yes" xml:space="preserve">
          <source>ActivityIndicator</source>
          <target state="translated">ActivityIndicator</target>
        </trans-unit>
        <trans-unit id="4cc6ecb653844c7270d40b1bee8d5bfa426c5732" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#animating</source>
          <target state="translated">ActivityIndicator#animating</target>
        </trans-unit>
        <trans-unit id="b412131bfd8829f6cc3a255ddc6ffb59e0868c30" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#color</source>
          <target state="translated">ActivityIndicator#color</target>
        </trans-unit>
        <trans-unit id="876990e6c94686c0b0a62088c84496abc7ecd026" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#hidesWhenStopped</source>
          <target state="translated">ActivityIndicator#hidesWhenStopped</target>
        </trans-unit>
        <trans-unit id="022fa8f22e3fc5e4e3eb1f3f7df0c78d70384011" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#size</source>
          <target state="translated">ActivityIndicator#size</target>
        </trans-unit>
        <trans-unit id="63fa68e1f9e6b22efcefbd65b0388cad561a15c8" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;gradle-download-task&lt;/code&gt; as dependency in &lt;code&gt;android/build.gradle&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc4610629383cb36bd03eacb7dd59fb9467c2e9" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;node_modules/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2d1cf5d2c70af125b1d4750697da42441f32ee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;RCTRootView&lt;/code&gt; to your iOS app. This view will serve as the container for your React Native component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916590042278c3d21aeb86381c87071eacb7b34c" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;ReactRootView&lt;/code&gt; to your Android app. This view will serve as the container for your React Native component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7136a70dc962575062ede102ec6cedc3d0db0a9" translate="yes" xml:space="preserve">
          <source>Add a handler to AppState changes by listening to the &lt;code&gt;change&lt;/code&gt; event type and providing the handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce8c1a1ea252bfa6eca12a162dfc71a42d1dc60" translate="yes" xml:space="preserve">
          <source>Add a handler to Linking changes by listening to the &lt;code&gt;url&lt;/code&gt; event type and providing the handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c1f3027be2d1297e41c31914d28badd36421d2" translate="yes" xml:space="preserve">
          <source>Add an entry for the local React Native maven directory to &lt;code&gt;build.gradle&lt;/code&gt;. Be sure to add it to the &quot;allprojects&quot; block, above other maven repositories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ba4707ba4cc17c0e74f136ab669037ac565ff4" translate="yes" xml:space="preserve">
          <source>Add an event handler. Supported events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f303f4327ec2a57555287d2aebee3c2bc26d3f6f" translate="yes" xml:space="preserve">
          <source>Add relevant labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074c612537d6150278f9e572a2905863092b0b0a" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;:ReactAndroid&lt;/code&gt; project in &lt;code&gt;android/settings.gradle&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac1017be497071a089a0ae525f02abd1c1c799c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; marker macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7577945c194a9ae90a1862498e32b45c859f912b" translate="yes" xml:space="preserve">
          <source>Add the React Native dependency to your app's &lt;code&gt;build.gradle&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2963b0257cb6c0d07ed24bfd1cb0460cb508b8b1" translate="yes" xml:space="preserve">
          <source>Add the copyright notice to the top of any new files you've added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a4f72ae8deaa5b81c4bd4a83091036a3b3dca3" translate="yes" xml:space="preserve">
          <source>Add the following lines to your &lt;code&gt;$HOME/.bash_profile&lt;/code&gt; config file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5a2b8b6cdd3f4ade54c21adb21982f1917e19e" translate="yes" xml:space="preserve">
          <source>Add the following to &lt;code&gt;Link Binary With Libraries&lt;/code&gt;: &lt;code&gt;libRCTPushNotification.a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a6546ce6f3182347d06c181addea11df21a115" translate="yes" xml:space="preserve">
          <source>Add the following to your Project: &lt;code&gt;node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotification.xcodeproj&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d616e5291badd62b4e7a9ee2b837059d33b27a2e" translate="yes" xml:space="preserve">
          <source>Add these components as dependencies using CocoaPods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d52590470cf0c91606faff5ecdbdb6fed300941" translate="yes" xml:space="preserve">
          <source>Add trailing commas,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de6a0ee1053f262231bdac88a9eb2c5bed4956d" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;alignItems&lt;/code&gt; to a component's style determines the &lt;strong&gt;alignment&lt;/strong&gt; of children along the &lt;strong&gt;secondary axis&lt;/strong&gt; (if the primary axis is &lt;code&gt;row&lt;/code&gt;, then the secondary is &lt;code&gt;column&lt;/code&gt;, and vice versa). Should children be aligned at the start, the center, the end, or stretched to fill? Available options are &lt;code&gt;flex-start&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;flex-end&lt;/code&gt;, and &lt;code&gt;stretch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b705d4b8a52fdf872808a18710afded6391c16" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;flexDirection&lt;/code&gt; to a component's &lt;code&gt;style&lt;/code&gt; determines the &lt;strong&gt;primary axis&lt;/strong&gt; of its layout. Should the children be organized horizontally (&lt;code&gt;row&lt;/code&gt;) or vertically (&lt;code&gt;column&lt;/code&gt;)? The default is &lt;code&gt;column&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1070fdbefd559aa13da043f9303321d241c711" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;getItemLayout&lt;/code&gt; can be a great performance boost for lists of several hundred items. Remember to include separator length (height or width) in your offset calculation if you specify &lt;code&gt;ItemSeparatorComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6c176af6548817af9fc6625215cd776e1c7ea5" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;justifyContent&lt;/code&gt; to a component's style determines the &lt;strong&gt;distribution&lt;/strong&gt; of children along the &lt;strong&gt;primary axis&lt;/strong&gt;. Should children be distributed at the start, the center, the end, or spaced evenly? Available options are &lt;code&gt;flex-start&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;flex-end&lt;/code&gt;, &lt;code&gt;space-around&lt;/code&gt;, &lt;code&gt;space-between&lt;/code&gt; and &lt;code&gt;space-evenly&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4195b3d05331174fae8d0e5e75a87f2fbe08cdb7" translate="yes" xml:space="preserve">
          <source>Adding React Native to your app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280406c715a147e4dab05a4132d28e39dd6ba2a9" translate="yes" xml:space="preserve">
          <source>Adding a packager config file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a856a9d71d35f891815e17f6414297e234c8ee" translate="yes" xml:space="preserve">
          <source>Adding and changing images doesn't require app recompilation, just refresh the simulator as you normally do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214cdb151befd0f57a160c861c003b38b5edb8ba" translate="yes" xml:space="preserve">
          <source>Adding signing config to your app's gradle config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea5ef09a89f93581e248dcc20539555e85c3a48" translate="yes" xml:space="preserve">
          <source>Additional examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56b8c19348d98277a2ab2565fe432ec6f0edd2e" translate="yes" xml:space="preserve">
          <source>Additional functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dde6c66311d292f27e518eed3a47f1a7e03d5c7" translate="yes" xml:space="preserve">
          <source>Additional mathematical functions are provided by the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b5f2e6aebc43182a4eee3c33dbf7e657d4ea1a" translate="yes" xml:space="preserve">
          <source>Additional notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7510927c2aa72376fc39878e290f2e3536722ddd" translate="yes" xml:space="preserve">
          <source>Adds an event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c69bb24702905cdf642515a4592dfd88d53d84" translate="yes" xml:space="preserve">
          <source>Advanced imperative API for snooping on animated events that are passed in through props. It permits to add a new javascript listener to an existing &lt;code&gt;AnimatedEvent&lt;/code&gt;. If &lt;code&gt;animatedEvent&lt;/code&gt; is a simple javascript listener, it will merge the 2 listeners into a single one, and if &lt;code&gt;animatedEvent&lt;/code&gt; is null/undefined, it will assign the javascript listener directly. Use values directly where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a309f95fac40f55a77533521adc602cc620c60a0" translate="yes" xml:space="preserve">
          <source>After opening the trace in your browser (preferably Chrome), you should see something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42db79116697318c59fd84d7b3fbb6259975222" translate="yes" xml:space="preserve">
          <source>After you can control a component's size, the next step is to &lt;a href=&quot;flexbox&quot;&gt;learn how to lay it out on the screen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10bb943b12fdd5453cec9e91c3860b00c664a1f" translate="yes" xml:space="preserve">
          <source>After you have created your &lt;code&gt;Podfile&lt;/code&gt;, you are ready to install the React Native pod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b969680a4943d3e0dd28ec47387f131504ca1678" translate="yes" xml:space="preserve">
          <source>Alert</source>
          <target state="translated">Alert</target>
        </trans-unit>
        <trans-unit id="79e896d799c53c217163b021439a66fef710dca8" translate="yes" xml:space="preserve">
          <source>Alert.alert()</source>
          <target state="translated">Alert.alert()</target>
        </trans-unit>
        <trans-unit id="df25fd19aa260cbda6c684347060b289f8aac360" translate="yes" xml:space="preserve">
          <source>AlertButtonStyle</source>
          <target state="translated">AlertButtonStyle</target>
        </trans-unit>
        <trans-unit id="d8b72e570dc926d8b316198d23d63599457447b5" translate="yes" xml:space="preserve">
          <source>AlertIOS</source>
          <target state="translated">AlertIOS</target>
        </trans-unit>
        <trans-unit id="55bd194949a8cde1dc1992e05552e642bdef3c2d" translate="yes" xml:space="preserve">
          <source>AlertIOS.alert()</source>
          <target state="translated">AlertIOS.alert()</target>
        </trans-unit>
        <trans-unit id="204e0cb06b9654a5aa24e905cfe3c0478e7f638a" translate="yes" xml:space="preserve">
          <source>AlertIOS.prompt()</source>
          <target state="translated">AlertIOS.prompt()</target>
        </trans-unit>
        <trans-unit id="3f23184d3dacf8f4fb6470a31ea0912c1f168fa0" translate="yes" xml:space="preserve">
          <source>AlertType</source>
          <target state="translated">AlertType</target>
        </trans-unit>
        <trans-unit id="34adacaf51bbf3bed523354f7b789bd245e81207" translate="yes" xml:space="preserve">
          <source>Align Items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d1fe0625bf44e9d6b31ac45520f31de2a3642c" translate="yes" xml:space="preserve">
          <source>All elements in the document will inherit this font unless they or one of their parents specifies a new rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20406b744679254a8a2d5fa7aa117f500bc57d84" translate="yes" xml:space="preserve">
          <source>All pull requests should be opened against the &lt;code&gt;master&lt;/code&gt; branch. After opening your pull request, ensure &lt;a href=&quot;contributing#contrinuous-integration-tests&quot;&gt;&lt;strong&gt;all tests pass&lt;/strong&gt;&lt;/a&gt; on Circle CI. If a test fails and you believe it is unrelated to your change, leave a comment on the pull request explaining why.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17ad7f883e3804d64a4f5c91f8f7f5eeb5a7887" translate="yes" xml:space="preserve">
          <source>All we need to do is provide a &lt;code&gt;setNativeProps&lt;/code&gt; method on our component that calls &lt;code&gt;setNativeProps&lt;/code&gt; on the appropriate child with the given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b816d968fb4616ce124639458b9c411b2af71c6" translate="yes" xml:space="preserve">
          <source>Also inherits &lt;a href=&quot;scrollview#props&quot;&gt;ScrollView Props&lt;/a&gt;, unless it is nested in another FlatList of same orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="e1388482402bd31bffda429da2b45a801887004e" translate="yes" xml:space="preserve">
          <source>Alternative use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b0e0b3b5899ff415ee10cb8e7acc1fe28a4d28" translate="yes" xml:space="preserve">
          <source>Alternatively, select &quot;Dev Settings&quot; from the Developer Menu, then update the &quot;Debug server host for device&quot; setting to match the IP address of your computer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acee9402e60cbbc82c8c94eee405711b0ac54397" translate="yes" xml:space="preserve">
          <source>Alternatively, the dismissing behavior can be disabled altogether by providing an optional &lt;code&gt;options&lt;/code&gt; parameter with the &lt;code&gt;cancelable&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt; i.e. &lt;code&gt;{ cancelable: false }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df2e3db0b97d56099d6d160609304e633921fda" translate="yes" xml:space="preserve">
          <source>Alternatively, you can clone the repo to your &lt;code&gt;node_modules&lt;/code&gt; directory and run &lt;code&gt;npm install&lt;/code&gt; inside the cloned repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf2b3f05dce307c23a3ffc8ef3d3979ef42a72a" translate="yes" xml:space="preserve">
          <source>Although the Toolbar supports remote images for the logo, navigation and action icons, this should only be used in DEV mode where &lt;code&gt;require('./some_icon.png')&lt;/code&gt; translates into a packager URL. In release mode you should always use a drawable resource for these icons. Using &lt;code&gt;require('./some_icon.png')&lt;/code&gt; will do this automatically for you, so as long as you don't explicitly use e.g. &lt;code&gt;{uri: 'http://...'}&lt;/code&gt;, you will be good.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034c454efe83e2c65ff9691e7f12eeae8394c1ea" translate="yes" xml:space="preserve">
          <source>Although this solution is complex, it is used in &lt;code&gt;RCTUIManager&lt;/code&gt;, which is an internal React Native class that manages all React Native views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27127b22d4171c1709437d6d968320c1476238c" translate="yes" xml:space="preserve">
          <source>Although we have a flavor of cross-language callbacks (&lt;a href=&quot;native-modules-ios#callbacks&quot;&gt;described here&lt;/a&gt;), these callbacks are not always the thing we need. The main problem is that they are not intended to be passed as properties. Rather, this mechanism allows us to trigger a native action from JS, and handle the result of that action in JS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9959f087a71e49ec9ede4d2cf7d591bd3a8154" translate="yes" xml:space="preserve">
          <source>Always make sure to test your app extensions in a real device, but be aware that this may not be sufficient, especially when dealing with Today widgets. Debug-configured builds are more likely to exceed the memory limits, while release-configured builds don't fail right away. We highly recommend that you use &lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&quot;&gt;Xcode's Instruments&lt;/a&gt; to analyze your real world memory usage, as it's very likely that your release-configured build is very close to the 16 MB limit. In situations like these, it is easy to go over the 16 MB limit by performing common operations, such as fetching data from an API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d48e94690a25a9fc6614d178fc7d55cddd86b2f" translate="yes" xml:space="preserve">
          <source>Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off screen. Similar fill rate/responsiveness tradeoff as &lt;code&gt;maxToRenderPerBatch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f36d0d32a28adf2f3ddf21558719dd4387518d7" translate="yes" xml:space="preserve">
          <source>An Alert button style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fb546a4e5173057393237941be56f2dc2b24ed" translate="yes" xml:space="preserve">
          <source>An Alert button type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b3fd96dbb16c1641358343d1463fe891fc8954" translate="yes" xml:space="preserve">
          <source>An ID which is used to associate this &lt;code&gt;InputAccessoryView&lt;/code&gt; to specified TextInput(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41984ee14abf658a322341e9fdcf6e0645b5ade5" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;getAlert&lt;/code&gt; to get the notification's main message string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76724469185b353f9acef0af89ecfece51dd23ea" translate="yes" xml:space="preserve">
          <source>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing &lt;code&gt;stickyHeaderIndices={[0]}&lt;/code&gt; will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with &lt;code&gt;horizontal={true}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f725a499ae5becf588cd0249c0318d3e7c6682d7" translate="yes" xml:space="preserve">
          <source>An exception can be made for proposals and long-running discussions, though these should be rare. If you have been contributing to the project long enough, you will probably already have access to the &lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/&quot;&gt;React Native Core Contributors&lt;/a&gt; Facebook Group, where this sort of discussion is usually held.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981710fcb3f4620321c5420deb8735e7ab1e1f6e" translate="yes" xml:space="preserve">
          <source>An exponential function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cea3f87bde99b15df5de781ecfd0d90a175d3a" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;listviewdatasource&quot;&gt;ListView.DataSource&lt;/a&gt; to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94b1d0cae7c725683dd20c7f8fa029ca475b666" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;DocumentSelectionState&lt;/code&gt;, this is some state that is responsible for maintaining selection information for a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62604565379796378e4f88c415806563425c43cb" translate="yes" xml:space="preserve">
          <source>An object that identifies the data to be rendered for a given section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d85b0a9dc7d9238ceef4c0bad355550211f9dc" translate="yes" xml:space="preserve">
          <source>An optional message that appears above the text input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100b2c227025f0bbafce2d1538757d23bb2d1c4d" translate="yes" xml:space="preserve">
          <source>An optional message that appears below the dialog's title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b5ac1d977d301eda1fe9cf552450d90bc3f5aa" translate="yes" xml:space="preserve">
          <source>An optional method called &lt;code&gt;getConstants&lt;/code&gt; returns the constant values exposed to JavaScript. Its implementation is not required but is very useful to key pre-defined values that need to be communicated from JavaScript to Java in sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65cdd40f486811dca77fed7d311ab2ad01c7185" translate="yes" xml:space="preserve">
          <source>And both values would get converted correctly to the native &lt;code&gt;NSDate&lt;/code&gt;. A bad value, like an &lt;code&gt;Array&lt;/code&gt;, would generate a helpful &quot;RedBox&quot; error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cbc089f1d8b7cd88652d0099a7ca3b0e723883" translate="yes" xml:space="preserve">
          <source>And then in your AppDelegate implementation add the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09655531b7fe85aa499df4fa3914b542b698a481" translate="yes" xml:space="preserve">
          <source>And then on your React component you'll be able to listen to the events on &lt;code&gt;Linking&lt;/code&gt; as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="c1fedc7ad3eb75e5247c7d6573777ec7109c8c47" translate="yes" xml:space="preserve">
          <source>Android (Java)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158ef2b0224946c5cf5ac420b1b126af3795ca1f" translate="yes" xml:space="preserve">
          <source>Android API &amp;gt;= 18 Positions will also contain a &lt;code&gt;mocked&lt;/code&gt; boolean to indicate if position was created from a mock provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567830a4ab339e68ec6acff6208cdb40d647193e" translate="yes" xml:space="preserve">
          <source>Android API &amp;gt;= 23 Requires an additional step to check for, and request the ACCESS_FINE_LOCATION permission using the &lt;a href=&quot;permissionsandroid&quot;&gt;PermissionsAndroid API&lt;/a&gt;. Failure to do so may result in a hard crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712717b810c5fa4733db5419291e5f4b57838493" translate="yes" xml:space="preserve">
          <source>Android API 21+ uses the material design ripple to provide user with feedback when they touch an interactable area on the screen. React Native exposes this through the &lt;a href=&quot;touchablenativefeedback&quot;&gt;&lt;code&gt;TouchableNativeFeedback&lt;/code&gt; component&lt;/a&gt;. Using this touchable effect instead of opacity or highlight will often make your app feel much more fitting on the platform. That said, you need to be careful when using it because it doesn't work on iOS or on Android API &amp;lt; 21, so you will need to fallback to using one of the other Touchable components on iOS. You can use a library like &lt;a href=&quot;https://github.com/react-community/react-native-platform-touchable&quot;&gt;react-native-platform-touchable&lt;/a&gt; to handle the platform differences for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732ba4b5e7a873beeb555fdb428575d7b23b0113" translate="yes" xml:space="preserve">
          <source>Android Components and APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05d295ead2e2538cc44366f376d8f774befc43b" translate="yes" xml:space="preserve">
          <source>Android NDK (download links and installation instructions below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f343d8305efd8ee6b8433767144ff4e9f3060ea" translate="yes" xml:space="preserve">
          <source>Android SDK version 26 (compileSdkVersion in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c47570e28a741377a4d405e37b43625f6502fa4" translate="yes" xml:space="preserve">
          <source>Android Studio installs the latest Android SDK by default. Building a React Native app with native code, however, requires the &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; SDK in particular. Additional Android SDKs can be installed through the SDK Manager in Android Studio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119a24ff4b90a19b4f8aad0877a225ac9af2d52f" translate="yes" xml:space="preserve">
          <source>Android Support Repository &amp;gt;= 26 (for Android Support Library)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b9b34cc6f2a09467345d27ebf1c818b61a38e9" translate="yes" xml:space="preserve">
          <source>Android development environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cd2dec3702f4a6464cccbfa51bc70730077b2d" translate="yes" xml:space="preserve">
          <source>Android only. By default, it is 300ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a22278e118a42040b99c4dc90c943ea81d4ab0a" translate="yes" xml:space="preserve">
          <source>Android requires that all apps be digitally signed with a certificate before they can be installed, so to distribute your Android application via &lt;a href=&quot;https://play.google.com/store&quot;&gt;Google Play store&lt;/a&gt;, you'll need to generate a signed release APK. The &lt;a href=&quot;https://developer.android.com/tools/publishing/app-signing.html&quot;&gt;Signing Your Applications&lt;/a&gt; page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to package the JavaScript bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e36f7b43eb5d9efa837b1daa26e7bd56ba4eff" translate="yes" xml:space="preserve">
          <source>Android supports 10k+ different phones and is generalized to support software rendering: the framework architecture and need to generalize across many hardware targets unfortunately means you get less for free relative to iOS. But sometimes, there are things you can improve -- and many times it's not native code's fault at all!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edc25d5c41c7e739c1d05e685c70482b92231b5" translate="yes" xml:space="preserve">
          <source>Android, Platform.isTVOS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebf2f15fba317dd7435b57168f729ae2f48cd7a" translate="yes" xml:space="preserve">
          <source>Android-only React component used to indicate that the app is loading or there is some activity in the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9c5b9f226999765b7bfc332e00f3ea1fc3e488" translate="yes" xml:space="preserve">
          <source>Android-only values for &lt;code&gt;ConnectionType&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12c1d13d502721ea025df651e34d045e40d176a" translate="yes" xml:space="preserve">
          <source>Android-specific</source>
          <target state="translated">Android-specific</target>
        </trans-unit>
        <trans-unit id="58b438d28fa6dd247b7f2f61962f4d45e0c19040" translate="yes" xml:space="preserve">
          <source>Android: Detect hardware back button presses, and programmatically invoke the default back button functionality to exit the app if there are no listeners or if none of the listeners return true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e252fcb3b3c73ba40a78e9c929c0e65e7051958d" translate="yes" xml:space="preserve">
          <source>Android: Only supported since Android 5.0 - older versions will ignore this attribute. Please note that additional space will be added &lt;em&gt;around&lt;/em&gt; the glyphs (half on each side), which differs from the iOS rendering. It is possible to emulate the iOS rendering by using layout attributes, e.g. negative margins, as appropriate for your situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24af0c4febad200ecfcee8d6dad59f89faf5c6d" translate="yes" xml:space="preserve">
          <source>Animatable components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7f27f688d2406ea815b0d94411ae6e147d139d" translate="yes" xml:space="preserve">
          <source>Animate the style change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efbc522088a67f31a5e6714ebb340452a57172d" translate="yes" xml:space="preserve">
          <source>Animate the touchable to a new opacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dbdd70502ea39b116a520ceaf2fbd1f05c61d7" translate="yes" xml:space="preserve">
          <source>Animated</source>
          <target state="translated">Animated</target>
        </trans-unit>
        <trans-unit id="c687f70be6954dc09f5b730532adb29619119e0a" translate="yes" xml:space="preserve">
          <source>Animated GIFs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e5bdd04035feb1d503dd408262067782af0092" translate="yes" xml:space="preserve">
          <source>Animated values are only compatible with one driver so if you use native driver when starting an animation on a value, make sure every animation on that value also uses the native driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daf09cee4c9a1e0a748bcf9f64d09f261d36e36" translate="yes" xml:space="preserve">
          <source>Animated values can also track other values. Just set the &lt;code&gt;toValue&lt;/code&gt; of an animation to another animated value instead of a plain number. For example, a &quot;Chat Heads&quot; animation like the one used by Messenger on Android could be implemented with a &lt;code&gt;spring()&lt;/code&gt; pinned on another animated value, or with &lt;code&gt;timing()&lt;/code&gt; and a &lt;code&gt;duration&lt;/code&gt; of 0 for rigid tracking. They can also be composed with interpolations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505d3ff8797e1a6bf379c622243df8684325e754" translate="yes" xml:space="preserve">
          <source>Animated.add()</source>
          <target state="translated">Animated.add()</target>
        </trans-unit>
        <trans-unit id="ced8a48a68d75d7c64b480a5499ad1b7b37231f7" translate="yes" xml:space="preserve">
          <source>Animated.decay()</source>
          <target state="translated">Animated.decay()</target>
        </trans-unit>
        <trans-unit id="09f9d9e7212befef126d5fdc50f8ac27698b026f" translate="yes" xml:space="preserve">
          <source>Animated.delay()</source>
          <target state="translated">Animated.delay()</target>
        </trans-unit>
        <trans-unit id="d8caf79cdf4257443c1b6b097f2b2b44900a173f" translate="yes" xml:space="preserve">
          <source>Animated.diffClamp()</source>
          <target state="translated">Animated.diffClamp()</target>
        </trans-unit>
        <trans-unit id="203a460f1de1bb25de8774682d1da8674894e1f1" translate="yes" xml:space="preserve">
          <source>Animated.divide()</source>
          <target state="translated">Animated.divide()</target>
        </trans-unit>
        <trans-unit id="4a4cbe7e3326f448f56fc22a75d05d5a8c65fb2c" translate="yes" xml:space="preserve">
          <source>Animated.event()</source>
          <target state="translated">Animated.event()</target>
        </trans-unit>
        <trans-unit id="dcd4881c67351593d388a082962748981e62f20d" translate="yes" xml:space="preserve">
          <source>Animated.forkEvent()</source>
          <target state="translated">Animated.forkEvent()</target>
        </trans-unit>
        <trans-unit id="7e5dda553507ab1f32af5fb1525bef8b5ce834d3" translate="yes" xml:space="preserve">
          <source>Animated.loop()</source>
          <target state="translated">Animated.loop()</target>
        </trans-unit>
        <trans-unit id="67914976dd67068a607243070f1d013379609cfc" translate="yes" xml:space="preserve">
          <source>Animated.modulo()</source>
          <target state="translated">Animated.modulo()</target>
        </trans-unit>
        <trans-unit id="ad33ce01e3c5d34f3beaee4e18f4f18b601692e9" translate="yes" xml:space="preserve">
          <source>Animated.multiply()</source>
          <target state="translated">Animated.multiply()</target>
        </trans-unit>
        <trans-unit id="a374bb3f17aea8a695cd2c394830e2153b447ffc" translate="yes" xml:space="preserve">
          <source>Animated.parallel()</source>
          <target state="translated">Animated.parallel()</target>
        </trans-unit>
        <trans-unit id="7ef324eb74926c8c0b06d1d1c41ff5a7879458f9" translate="yes" xml:space="preserve">
          <source>Animated.sequence()</source>
          <target state="translated">Animated.sequence()</target>
        </trans-unit>
        <trans-unit id="2c9ac9c14d8f268d1749a2725bbd9894fb719a20" translate="yes" xml:space="preserve">
          <source>Animated.spring()</source>
          <target state="translated">Animated.spring()</target>
        </trans-unit>
        <trans-unit id="74dcf3199ae6a54d0bd5e63eb7545b4e2fe7a4f4" translate="yes" xml:space="preserve">
          <source>Animated.stagger()</source>
          <target state="translated">Animated.stagger()</target>
        </trans-unit>
        <trans-unit id="7b91507d53a4c1bfda7d9790c5805523b8a2b692" translate="yes" xml:space="preserve">
          <source>Animated.subtract()</source>
          <target state="translated">Animated.subtract()</target>
        </trans-unit>
        <trans-unit id="17f0bc76c15ce3db8c54103ba37f963b5749c0df" translate="yes" xml:space="preserve">
          <source>Animated.timing()</source>
          <target state="translated">Animated.timing()</target>
        </trans-unit>
        <trans-unit id="3cc504dd9cad0fd5bfd495eebca3f8e7bc2bfc77" translate="yes" xml:space="preserve">
          <source>Animated.unforkEvent()</source>
          <target state="translated">Animated.unforkEvent()</target>
        </trans-unit>
        <trans-unit id="ca6dcd341ad002fa9d0a559d4cf7015019876fb9" translate="yes" xml:space="preserve">
          <source>AnimatedGratuitousApp</source>
          <target state="translated">AnimatedGratuitousApp</target>
        </trans-unit>
        <trans-unit id="65fae40a69f32e96f079fa849e5c24d1ac1b0a7a" translate="yes" xml:space="preserve">
          <source>Animates a value according to an analytical spring model based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;damped harmonic oscillation&lt;/a&gt;. Tracks velocity state to create fluid motions as the &lt;code&gt;toValue&lt;/code&gt; updates, and can be chained together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1171f77e28cc3c5098c84e2d4392fe67d496508b" translate="yes" xml:space="preserve">
          <source>Animates a value along a timed easing curve. The &lt;a href=&quot;easing&quot;&gt;&lt;code&gt;Easing&lt;/code&gt;&lt;/a&gt; module has tons of predefined curves, or you can use your own function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0364cac8675d55bbeaa3c83d28471ae6f28697b5" translate="yes" xml:space="preserve">
          <source>Animates a value from an initial velocity to zero based on a decay coefficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acc7e79a762d1e6a015ef7397c215154f9575a2" translate="yes" xml:space="preserve">
          <source>Animating the size of an image drops UI thread FPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="55b89f417cc7a3500208d5eb659d2d0456937a5d" translate="yes" xml:space="preserve">
          <source>Animations are heavily configurable. Custom and predefined easing functions, delays, durations, decay factors, spring constants, and more can all be tweaked depending on the type of animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36498870d4bf61bd5ef374b97c61df4bdef4b903" translate="yes" xml:space="preserve">
          <source>Animations are started by calling &lt;code&gt;start()&lt;/code&gt; on your animation. &lt;code&gt;start()&lt;/code&gt; takes a completion callback that will be called when the animation is done. If the animation finished running normally, the completion callback will be invoked with &lt;code&gt;{finished: true}&lt;/code&gt;. If the animation is done because &lt;code&gt;stop()&lt;/code&gt; was called on it before it could finish (e.g. because it was interrupted by a gesture or another animation), then it will receive &lt;code&gt;{finished: false}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e45e759ee5e37eccbd44f60396ce46bc7e41409" translate="yes" xml:space="preserve">
          <source>Animations are very important to create a great user experience. Stationary objects must overcome inertia as they start moving. Objects in motion have momentum and rarely come to a stop immediately. Animations allow you to convey physically believable motion in your interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6450d7a7d867e4140d1f5621f6007cc166b9bf7" translate="yes" xml:space="preserve">
          <source>Animations can also be chained together simply by setting the &lt;code&gt;toValue&lt;/code&gt; of one animation to be another &lt;code&gt;Animated.Value&lt;/code&gt;. See &lt;a href=&quot;animations#tracking-dynamic-values&quot;&gt;Tracking dynamic values&lt;/a&gt; in the Animations guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79feb872f385ec41c1d5df5b989889284cc475e9" translate="yes" xml:space="preserve">
          <source>Animations can also be combined in complex ways using composition functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b98ae9b72b2b2c18beb39da3d9023f90f1eaa01" translate="yes" xml:space="preserve">
          <source>Animations can be combined and played in sequence or in parallel. Sequential animations can play immediately after the previous animation has finished, or they can start after a specified delay. The &lt;code&gt;Animated&lt;/code&gt; API provides several methods, such as &lt;code&gt;sequence()&lt;/code&gt; and &lt;code&gt;delay()&lt;/code&gt;, each of which simply take an array of animations to execute and automatically calls &lt;code&gt;start()&lt;/code&gt;/&lt;code&gt;stop()&lt;/code&gt; as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4809aa0328d56ab70f72d54d2955afe4a6dbeea2" translate="yes" xml:space="preserve">
          <source>Animations#requestAnimationFrame</source>
          <target state="translated">Animations#requestAnimationFrame</target>
        </trans-unit>
        <trans-unit id="f03768be9ac019705780bbcee81c3a5b270398f9" translate="yes" xml:space="preserve">
          <source>Animations#setNativeProps</source>
          <target state="translated">Animations#setNativeProps</target>
        </trans-unit>
        <trans-unit id="877d801bd6d113fe98e54b06ea41c02c6804bbb8" translate="yes" xml:space="preserve">
          <source>Annotation &lt;code&gt;@ReactProp&lt;/code&gt; has one obligatory argument &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;String&lt;/code&gt;. Name assigned to the &lt;code&gt;@ReactProp&lt;/code&gt; annotation linked to the setter method is used to reference the property on JS side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645a5dfadaaf392ed6b4446887d107ed8fe6019e" translate="yes" xml:space="preserve">
          <source>Another example is responding to touches: if you are doing work across multiple frames on the JavaScript thread, you might notice a delay in responding to &lt;code&gt;TouchableOpacity&lt;/code&gt;, for example. This is because the JavaScript thread is busy and cannot process the raw touch events sent over from the main thread. As a result, &lt;code&gt;TouchableOpacity&lt;/code&gt; cannot react to the touch events and command the native view to adjust its opacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd16bd2b361f58e81a3a116772f71c9fd91c29a" translate="yes" xml:space="preserve">
          <source>Another gesture commonly used in mobile apps is the swipe or pan. This gesture allows the user to scroll through a list of items, or swipe through pages of content. In order to handle these and other gestures, we'll learn &lt;a href=&quot;using-a-scrollview&quot;&gt;how to use a ScrollView&lt;/a&gt; next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4035eeb54c1e45afe78501009d55880ef0d6a9af" translate="yes" xml:space="preserve">
          <source>Another responder is already active and will not release it to that &lt;code&gt;View&lt;/code&gt; asking to be the responder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851c8725e140140ad7c343787ce5709b06446736" translate="yes" xml:space="preserve">
          <source>Another very common use case of &lt;code&gt;setNativeProps&lt;/code&gt; is to clear the value of a TextInput. The &lt;code&gt;controlled&lt;/code&gt; prop of TextInput can sometimes drop characters when the &lt;code&gt;bufferDelay&lt;/code&gt; is low and the user types very quickly. Some developers prefer to skip this prop entirely and instead use &lt;code&gt;setNativeProps&lt;/code&gt; to directly manipulate the TextInput value when necessary. For example, the following code demonstrates clearing the input when you tap a button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e1be6b44cd4717015f2daae07956f18a26a3f3" translate="yes" xml:space="preserve">
          <source>Another way to profile JavaScript is to use the Chrome profiler while debugging. This won't give you accurate results as the code is running in Chrome but will give you a general idea of where bottlenecks might be. Run the profiler under Chrome's &lt;code&gt;Performance&lt;/code&gt; tab. A flame graph will appear under &lt;code&gt;User Timing&lt;/code&gt;. To view more details in tabular format, click at the &lt;code&gt;Bottom Up&lt;/code&gt; tab below and then select &lt;code&gt;DedicatedWorker Thread&lt;/code&gt; at the top left menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b596718c904f9b501d94c971887a679c2829e445" translate="yes" xml:space="preserve">
          <source>App Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09c6ece1a3d3fcafa4019157dbbce31ee676694" translate="yes" xml:space="preserve">
          <source>App States</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc57876bae07f5406f7985ecbdd3b69f48ec1e7" translate="yes" xml:space="preserve">
          <source>App Transport Security is a security feature introduced in iOS 9 that rejects all HTTP requests that are not sent over HTTPS. This can result in HTTP traffic being blocked, including the developer React Native server. ATS is disabled for &lt;code&gt;localhost&lt;/code&gt; by default in React Native projects in order to make development easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37a1f4ed2e289d66a0af5b68f21ccc575ec98a4" translate="yes" xml:space="preserve">
          <source>App Transport Security is good for your users. Make sure to re-enable it prior to releasing your app for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b42b464cdd2bf187496fb03ad8f4fbfae50d9e4" translate="yes" xml:space="preserve">
          <source>App extensions let you provide custom functionality and content outside of your main app. There are different types of app extensions on iOS, and they are all covered in the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1&quot;&gt;App Extension Programming Guide&lt;/a&gt;. In this guide, we'll briefly cover how you may take advantage of app extensions on iOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb948289cb08389afe1d053e65eb27722e4d0f2" translate="yes" xml:space="preserve">
          <source>AppRegistry</source>
          <target state="translated">AppRegistry</target>
        </trans-unit>
        <trans-unit id="4e3790bd33e3b960ecf5df793f3b2e2296c38b43" translate="yes" xml:space="preserve">
          <source>AppRegistry.getAppKeys()</source>
          <target state="translated">AppRegistry.getAppKeys()</target>
        </trans-unit>
        <trans-unit id="76c635be39405a1c76c92a04c0bda42249f78d05" translate="yes" xml:space="preserve">
          <source>AppRegistry.getRegistry()</source>
          <target state="translated">AppRegistry.getRegistry()</target>
        </trans-unit>
        <trans-unit id="aef3901f647d3d433c378e040fe5656b82efcd7e" translate="yes" xml:space="preserve">
          <source>AppRegistry.getRunnable()</source>
          <target state="translated">AppRegistry.getRunnable()</target>
        </trans-unit>
        <trans-unit id="93e30f9a55a64523bce0b68d6d2b436855b82bd0" translate="yes" xml:space="preserve">
          <source>AppRegistry.getSectionKeys()</source>
          <target state="translated">AppRegistry.getSectionKeys()</target>
        </trans-unit>
        <trans-unit id="a8505618a6e745d10f525c3af7f24571fac88b8d" translate="yes" xml:space="preserve">
          <source>AppRegistry.getSections()</source>
          <target state="translated">AppRegistry.getSections()</target>
        </trans-unit>
        <trans-unit id="42c1d3bb65daa9de3cdb03f075bc03e0efeee059" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerComponent()</source>
          <target state="translated">AppRegistry.registerComponent()</target>
        </trans-unit>
        <trans-unit id="d94e82e8a9a41fbca2f92698f8a93c580278e83f" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerConfig()</source>
          <target state="translated">AppRegistry.registerConfig()</target>
        </trans-unit>
        <trans-unit id="4a9c9e4b8c20f29bd0f79d3909aa63631e516ebc" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerHeadlessTask()</source>
          <target state="translated">AppRegistry.registerHeadlessTask()</target>
        </trans-unit>
        <trans-unit id="7bb00aee94e0d17e8b25acf042c20f72b6e369aa" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerRunnable()</source>
          <target state="translated">AppRegistry.registerRunnable()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
