<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="backbone">
    <body>
      <group id="backbone">
        <trans-unit id="ae7cdd0ab4dbd4035b5027e1b323f5df065253e5" translate="yes" xml:space="preserve">
          <source>&quot;sortBy&quot; comparator functions take a model and return a numeric or string value by which the model should be ordered relative to others. &quot;sort&quot; comparator functions take two models, and return &lt;code&gt;-1&lt;/code&gt; if the first model should come before the second, &lt;code&gt;0&lt;/code&gt; if they are of the same rank and &lt;code&gt;1&lt;/code&gt; if the first model should come after.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e34c27878242e948c2bad4b3affbb46b908699" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2010&amp;ndash;2019 Jeremy Ashkenas, DocumentCloud</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efbb87a169eb91af64301b9f5bbd37630f81bf7" translate="yes" xml:space="preserve">
          <source>, perhaps even never, a good idea. Passing through a specific flag in the options for your event callback to look at, and choose to ignore, will usually work out better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6b2b1e09f43b60282b171b69eee8bbb51b2945" translate="yes" xml:space="preserve">
          <source>.extend</source>
          <target state="translated">.extend</target>
        </trans-unit>
        <trans-unit id="2972a1dbf4d1e04984682a704577c154d4e85e45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;add&quot;&lt;/b&gt; (model, collection, options) &amp;mdash; when a model is added to a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3f309439107da23a47da1b7cdf18687bbe90c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;all&quot;&lt;/b&gt; &amp;mdash; this special event fires for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3ab1f9cea3241b04d37eb1e45c9914da8a6500" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;change&quot;&lt;/b&gt; (model, options) &amp;mdash; when a model's attributes have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e296308849e40643e4c9ec48e0979e652c273489" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;change:[attribute]&quot;&lt;/b&gt; (model, value, options) &amp;mdash; when a specific attribute has been updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f139c8dfdcac358667d494a4c8ba9fcd04f2aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;destroy&quot;&lt;/b&gt; (model, collection, options) &amp;mdash; when a model is &lt;a href=&quot;#Model-destroy&quot;&gt;destroyed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0847e17ab8b7620b2a0086e79cd9ef0bd63d945" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;error&quot;&lt;/b&gt; (model_or_collection, xhr, options) &amp;mdash; when a model's or collection's request to the server has failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f670e67d657596b3c50bcb8407b4ee30857175e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;invalid&quot;&lt;/b&gt; (model, error, options) &amp;mdash; when a model's &lt;a href=&quot;#Model-validate&quot;&gt;validation&lt;/a&gt; fails on the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18c789b8171c5afd538c4c64a7136ccf8faff92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;remove&quot;&lt;/b&gt; (model, collection, options) &amp;mdash; when a model is removed from a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c73c0d80934a14930bfba5c8837e2869d3491df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;request&quot;&lt;/b&gt; (model_or_collection, xhr, options) &amp;mdash; when a model or collection has started a request to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a4ffa8c4d9beea05e03303ef7fc70f502f8c92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;reset&quot;&lt;/b&gt; (collection, options) &amp;mdash; when the collection's entire contents have been &lt;a href=&quot;#Collection-reset&quot;&gt;reset&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba3873539b946784bff463f4642d930394d2b7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;route&quot;&lt;/b&gt; (route, params) &amp;mdash; Fired by the router when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5621e74a8df763ccb9cd3f2110ea28067a6c313" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;route&quot;&lt;/b&gt; (router, route, params) &amp;mdash; Fired by history when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33abf7336cc3c6f8b9508b333ab10508d0127d1a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;route:[name]&quot;&lt;/b&gt; (params) &amp;mdash; Fired by the router when a specific route is matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2e622fe439f811b6670e45e40c6c3d63b75a73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;sort&quot;&lt;/b&gt; (collection, options) &amp;mdash; when the collection has been re-sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6594346ef49a94c782f7e40754f0d6cbbb6b9e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;sync&quot;&lt;/b&gt; (model_or_collection, response, options) &amp;mdash; when a model or collection has been successfully synced with the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4860723923ed9612c735453d26742eb503ed5545" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&quot;update&quot;&lt;/b&gt; (collection, options) &amp;mdash; single event triggered after any number of models have been added, removed or changed in a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1871be567f5c635608d35490e9dd7aa18c4ce52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;$ (jQuery)&lt;/b&gt;&lt;code&gt;view.$(selector)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8724fdddad7f65777aa3f401642c868e24dfaa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;$el&lt;/b&gt;&lt;code&gt;view.$el&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;$el&lt;/b&gt;&lt;code&gt;view.$el&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df0a2fb2c11e9887785b767c630fda11d95f0b56" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Backbone.$&lt;/b&gt;&lt;code&gt;Backbone.$ = $;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fef81ba2b9508fbf40c282bf8e0924317751350" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Backbone.noConflict&lt;/b&gt;&lt;code&gt;var backbone = Backbone.noConflict();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dfdbb70c1482703bea076a97f72ffdc3ea3f92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Backbone.sync&lt;/b&gt; is the function that Backbone calls every time it attempts to read or save a model to the server. By default, it uses &lt;code&gt;jQuery.ajax&lt;/code&gt; to make a RESTful JSON request and returns a &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/#jqXHR&quot;&gt;jqXHR&lt;/a&gt;. You can override it in order to use a different persistence strategy, such as WebSockets, XML transport, or Local Storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16e4c4ccb3099a7d5c2513822fde5aead9ee460" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Catalog of Events&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8cadd3cbbba85fe7655334e4e9bc3a63050794" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Events&lt;/b&gt; is a module that can be mixed in to any object, giving the object the ability to bind and trigger custom named events. Events do not have to be declared before they are bound, and may take passed arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739a5f007870e22b05fc907cd5a6ee2b8bbb3f04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;History&lt;/b&gt; serves as a global router (per frame) to handle &lt;code&gt;hashchange&lt;/code&gt; events or &lt;code&gt;pushState&lt;/code&gt;, match the appropriate route, and trigger callbacks. You shouldn't ever have to create one of these yourself since &lt;code&gt;Backbone.history&lt;/code&gt; already contains one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5d3f09b9d9573533d3437ee4d18a320a47d79d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Models&lt;/b&gt; are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control. You extend &lt;b&gt;Backbone.Model&lt;/b&gt; with your domain-specific methods, and &lt;b&gt;Model&lt;/b&gt; provides a basic set of functionality for managing changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32640683960d575902ad3452c2375bf32a96b79e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Underscore Methods (46)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f622648f9b21b900954d0a52b007d80670d9e6c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Underscore Methods (9)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738d6f001f4efe13497f050a08c159defa588161" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;add&lt;/b&gt;&lt;code&gt;collection.add(models, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa60878424f5e273a8dd4eb34e8b3af9352eab93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ajax&lt;/b&gt;&lt;code&gt;Backbone.ajax = function(request) { ... };&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bfa1a2b473bb15c35bf33d90621200612a247f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;at&lt;/b&gt;&lt;code&gt;collection.at(index)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;at&lt;/b&gt;&lt;code&gt;collection.at(index)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e8dfe94bb0312a66734f23c0ad62ffbfa953f0c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;attributes&lt;/b&gt;&lt;code&gt;model.attributes&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;attributes&lt;/b&gt;&lt;code&gt;model.attributes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95f491596efe419e2aa2afbdac0a625ffa845385" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;attributes&lt;/b&gt;&lt;code&gt;view.attributes&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;attributes&lt;/b&gt;&lt;code&gt;view.attributes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06e77f7d75053e72514e522aea25663e9f8f58ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;changed&lt;/b&gt;&lt;code&gt;model.changed&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;changed&lt;/b&gt;&lt;code&gt;model.changed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bf81ac68cad5ad589efe4e530fc270629aef506" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;changedAttributes&lt;/b&gt;&lt;code&gt;model.changedAttributes([attributes])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;changedAttributes&lt;/b&gt;&lt;code&gt;model.changedAttributes([attributes])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="841cffc7cae7fc2ae92d8192cdc250f2773a0a9c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cid&lt;/b&gt;&lt;code&gt;model.cid&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;cid&lt;/b&gt;&lt;code&gt;model.cid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="494d063dcfd7260f50014500b84112d7d6bdf46f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;clear&lt;/b&gt;&lt;code&gt;model.clear([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;clear&lt;/b&gt;&lt;code&gt;model.clear([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa0b33b926ef91fa9a35258458926de7fc8a8f04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;clone&lt;/b&gt;&lt;code&gt;collection.clone()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;clone&lt;/b&gt;&lt;code&gt;collection.clone()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="59d63b72b096b0b9e9facb0e16c687f217711443" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;clone&lt;/b&gt;&lt;code&gt;model.clone()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;clone&lt;/b&gt;&lt;code&gt;model.clone()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cefabed95a78434ec9b0600bf27173b14bb04d76" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;comparator&lt;/b&gt;&lt;code&gt;collection.comparator&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;comparator&lt;/b&gt;&lt;code&gt;collection.comparator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc440bb72e6825afa939c088c0de11147f142c7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;constructor / initialize&lt;/b&gt;&lt;code&gt;new Backbone.Collection([models], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3abbc6e81da081306f8d1736ce4368f1b19a771" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;constructor / initialize&lt;/b&gt;&lt;code&gt;new Model([attributes], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14bdd1d5759476d0220e56fa646dade3ebc2f9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;constructor / initialize&lt;/b&gt;&lt;code&gt;new Router([options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757c589daf5f778bbb2eca7d777b6c03137d2855" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;constructor / initialize&lt;/b&gt;&lt;code&gt;new View([options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928d5303ac65f95f1d7f4f6c9472fb87b38ecb65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;create &amp;rarr; POST &lt;/b&gt;&lt;code&gt;/collection&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cafd491e7e37fa159a3d50d9ad4cad0637ed1f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;create&lt;/b&gt;&lt;code&gt;collection.create(attributes, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e6e8b890b5a801c7ba67383ea4b767e3097cdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;defaults&lt;/b&gt;&lt;code&gt;model.defaults or model.defaults()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78b073d07c37fa0be6f377bd336b7e3d22c085e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;delegateEvents&lt;/b&gt;&lt;code&gt;delegateEvents([events])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;delegateEvents&lt;/b&gt;&lt;code&gt;delegateEvents([events])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c01009f5780365b39947cd539f5c2e765ee18820" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;delete &amp;rarr; DELETE &lt;/b&gt;&lt;code&gt;/collection/id&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0d23e652bca0c00ae0ff6921cde3f5c345a641" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;destroy&lt;/b&gt;&lt;code&gt;model.destroy([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;destroy&lt;/b&gt;&lt;code&gt;model.destroy([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9132524e3a4003bcbc64deb84757fd3720508a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;el&lt;/b&gt;&lt;code&gt;view.el&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;el&lt;/b&gt;&lt;code&gt;view.el&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c1286ff0a937763c39979147fc85210847042c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;emulateHTTP&lt;/b&gt;&lt;code&gt;Backbone.emulateHTTP = true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10b2e438f22458dd3c56a46f79698c408ffe2f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;emulateJSON&lt;/b&gt;&lt;code&gt;Backbone.emulateJSON = true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f6b29e60136e35d4066d04c779a8f8deb27066" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;escape&lt;/b&gt;&lt;code&gt;model.escape(attribute)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;escape&lt;/b&gt;&lt;code&gt;model.escape(attribute)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d8a9a45c5e9400b7087f13148e0732867ef6262" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;events&lt;/b&gt;&lt;code&gt;view.events or view.events()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcea4644991171ee1b90ae2039f2849c2a965a92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;execute&lt;/b&gt;&lt;code&gt;router.execute(callback, args, name)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fda6096d98158a3bda10ef13f9ca95ee63b4e35" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extend&lt;/b&gt; correctly sets up the prototype chain, so subclasses created with &lt;b&gt;extend&lt;/b&gt; can be further extended and subclassed as far as you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0c43e8a51fa64c07f536dd9d6a67be1b92982d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extend&lt;/b&gt;&lt;code&gt;Backbone.Collection.extend(properties, [classProperties])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9612ef81aa58da986a60ec9874c32e8119ecdf7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extend&lt;/b&gt;&lt;code&gt;Backbone.Model.extend(properties, [classProperties])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8017ccc94d35ef692fa5dc50eb45d5babfab63f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extend&lt;/b&gt;&lt;code&gt;Backbone.Router.extend(properties, [classProperties])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12af92683462abf31cfa212c0e53606c4cc2e4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extend&lt;/b&gt;&lt;code&gt;Backbone.View.extend(properties, [classProperties])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7c824f2a0dccdba9e27b3f7c71871556aa7a23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;fetch&lt;/b&gt;&lt;code&gt;collection.fetch([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;fetch&lt;/b&gt;&lt;code&gt;collection.fetch([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7785f43fe926204ffecfa30126dda06becaf3c37" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;fetch&lt;/b&gt;&lt;code&gt;model.fetch([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;fetch&lt;/b&gt;&lt;code&gt;model.fetch([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2200d8b87bfc596cbe0b48400447870379027341" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;findWhere&lt;/b&gt;&lt;code&gt;collection.findWhere(attributes)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;findWhere&lt;/b&gt;&lt;code&gt;collection.findWhere(attributes)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80bce2e82ce172409b91d0694e78efeb7072dfa6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;get&lt;/b&gt;&lt;code&gt;collection.get(id)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;get&lt;/b&gt;&lt;code&gt;collection.get(id)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c129b63ab174bf2c827e87ce378985d16ee14857" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;get&lt;/b&gt;&lt;code&gt;model.get(attribute)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;get&lt;/b&gt;&lt;code&gt;model.get(attribute)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38e507e48df7201b70f1d97778f5b52dcae20ef8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;has&lt;/b&gt;&lt;code&gt;model.has(attribute)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;has&lt;/b&gt;&lt;code&gt;model.has(attribute)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="34bc329f86592891d72557c332224da370b0acc3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;hasChanged&lt;/b&gt;&lt;code&gt;model.hasChanged([attribute])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;hasChanged&lt;/b&gt;&lt;code&gt;model.hasChanged([attribute])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06ba79043d26c10c248cefc8641dd2c48276f6c7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;id&lt;/b&gt;&lt;code&gt;model.id&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;id&lt;/b&gt;&lt;code&gt;model.id&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b979c077d525eb23abc4d33fad85fa45a07233e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;idAttribute&lt;/b&gt;&lt;code&gt;model.idAttribute&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;idAttribute&lt;/b&gt;&lt;code&gt;model.idAttribute&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="257d25254f8189d9d6351dbee315b3159ec9e98a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;isNew&lt;/b&gt;&lt;code&gt;model.isNew()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;isNew&lt;/b&gt;&lt;code&gt;model.isNew()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2c0bfc27da459c4c9758fe417e5d8956ab2989d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;isValid&lt;/b&gt;&lt;code&gt;model.isValid(options)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;isValid&lt;/b&gt;&lt;code&gt;model.isValid(options)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b40f9a92e784836e917f29bc18f1ec5899b0c59f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;jQuery.ajax&lt;/b&gt; options can also be passed directly as &lt;b&gt;fetch&lt;/b&gt; options, so to fetch a specific page of a paginated collection: &lt;code&gt;Documents.fetch({data: {page: 3}})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5099e3ff40c5f83f05e34b91ec3c75368753a39c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;length&lt;/b&gt;&lt;code&gt;collection.length&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;length&lt;/b&gt;&lt;code&gt;collection.length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d34fdf19285e0427053c8c39fa902bcb2ddae71d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;listenTo&lt;/b&gt;&lt;code&gt;object.listenTo(other, event, callback)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0589a5223bb11e0b2bbf852becfa21a6b49afc7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;listenToOnce&lt;/b&gt;&lt;code&gt;object.listenToOnce(other, event, callback)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e5c5accb835f5043ed31f775f66c821aa448ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;method&lt;/b&gt; &amp;ndash; the CRUD method (&lt;code&gt;&quot;create&quot;&lt;/code&gt;, &lt;code&gt;&quot;read&quot;&lt;/code&gt;, &lt;code&gt;&quot;update&quot;&lt;/code&gt;, or &lt;code&gt;&quot;delete&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f39e6b7c654b1a0880c86317f50b6d59208796a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mixin&lt;/b&gt;&lt;code&gt;Backbone.Collection.mixin(properties)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;mixin&lt;/b&gt;&lt;code&gt;Backbone.Collection.mixin(properties)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2e3c401ee4edbc53fde944ef8c3ad6a9d269cbb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;model&lt;/b&gt; &amp;ndash; the model to be saved (or collection to be read)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7f31653f0c4ba919a216167a37e3b8a0e5d010" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;model&lt;/b&gt;&lt;code&gt;collection.model([attrs], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00c4051338ecf7b2b880c7b195e17c8dbed41c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;modelId&lt;/b&gt;&lt;code&gt;collection.modelId(attrs)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;modelId&lt;/b&gt;&lt;code&gt;collection.modelId(attrs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea27af80b698af7d4a2e8c940e484fc9cadd4e5a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;models&lt;/b&gt;&lt;code&gt;collection.models&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;models&lt;/b&gt;&lt;code&gt;collection.models&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3f0b320af0e1b923cf81e90c5288c2344c53111" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;navigate&lt;/b&gt;&lt;code&gt;router.navigate(fragment, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700c984991448f31201f10123544621e3b7a21e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;off&lt;/b&gt;&lt;code&gt;object.off([event], [callback], [context])&lt;/code&gt;Alias: unbind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acea248de65a1623ac27eb4f86dea826955188ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;on&lt;/b&gt;&lt;code&gt;object.on(event, callback, [context])&lt;/code&gt;Alias: bind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e29e7741fd80c0b07fe060a21c62d59e27b2fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;once&lt;/b&gt;&lt;code&gt;object.once(event, callback, [context])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7e2347697e3c1fc088213b62a3de2131714ec7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;options&lt;/b&gt; &amp;ndash; success and error callbacks, and all other jQuery request options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e902999eaf42dfa526c16465747a19adb854ebfb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;parse&lt;/b&gt; is called by Backbone whenever a collection's models are returned by the server, in &lt;a href=&quot;#Collection-fetch&quot;&gt;fetch&lt;/a&gt;. The function is passed the raw &lt;code&gt;response&lt;/code&gt; object, and should return the array of model attributes to be &lt;a href=&quot;#Collection-add&quot;&gt;added&lt;/a&gt; to the collection. The default implementation is a no-op, simply passing through the JSON response. Override this if you need to work with a preexisting API, or better namespace your responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d97d3c684d259cfff64ae366e04be0c85ee887c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;parse&lt;/b&gt; is called whenever a model's data is returned by the server, in &lt;a href=&quot;#Model-fetch&quot;&gt;fetch&lt;/a&gt;, and &lt;a href=&quot;#Model-save&quot;&gt;save&lt;/a&gt;. The function is passed the raw &lt;code&gt;response&lt;/code&gt; object, and should return the attributes hash to be &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt; on the model. The default implementation is a no-op, simply passing through the JSON response. Override this if you need to work with a preexisting API, or better namespace your responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06458269178ca4f02ca568ef1542eb95b8969b1e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;parse&lt;/b&gt;&lt;code&gt;collection.parse(response, options)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887ac3b1fa81e8ca50b644597b04a66abb344c2f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;parse&lt;/b&gt;&lt;code&gt;model.parse(response, options)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35f7df117f8a2e7bcb6d2b78547658814f967cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;patch &amp;rarr; PATCH &lt;/b&gt;&lt;code&gt;/collection/id&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea87df4a235a86e75dca52bffb3cac480e1d2328" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;pluck&lt;/b&gt;&lt;code&gt;collection.pluck(attribute)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;pluck&lt;/b&gt;&lt;code&gt;collection.pluck(attribute)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53633ec28ba5ff24999f3a0765f4d8d66d02f1c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;pop&lt;/b&gt;&lt;code&gt;collection.pop([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;pop&lt;/b&gt;&lt;code&gt;collection.pop([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae3a7421b2d6c8dd76a6396247594c0eaa01c4b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;preinitialize&lt;/b&gt;&lt;code&gt;new Backbone.Collection([models], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606e5f6b87d3c575f0751deb73409d934f95e2e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;preinitialize&lt;/b&gt;&lt;code&gt;new Backbone.Router([options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1aacaba61f2ccca1e1f052c4672ae76453e81c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;preinitialize&lt;/b&gt;&lt;code&gt;new Model([attributes], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9ce05638cad7eea55650a116936423b9c62b66" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;preinitialize&lt;/b&gt;&lt;code&gt;new View([options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd4b7c370bf2c6317f1ef6fa5180977198fff51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;previous&lt;/b&gt;&lt;code&gt;model.previous(attribute)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;previous&lt;/b&gt;&lt;code&gt;model.previous(attribute)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="486b472ef5f6f44a834cbff5be96ced4bae796c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;previousAttributes&lt;/b&gt;&lt;code&gt;model.previousAttributes()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;previousAttributes&lt;/b&gt;&lt;code&gt;model.previousAttributes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77e134aa5c865d457b8852cb745c5947e914f5ea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;push&lt;/b&gt;&lt;code&gt;collection.push(model, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f7ee1d4e0b3ccce692c1a87cb86bb52bd91b29" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;pushState&lt;/b&gt; support exists on a purely opt-in basis in Backbone. Older browsers that don't support &lt;code&gt;pushState&lt;/code&gt; will continue to use hash-based URL fragments, and if a hash URL is visited by a &lt;code&gt;pushState&lt;/code&gt;-capable browser, it will be transparently upgraded to the true URL. Note that using real URLs requires your web server to be able to correctly render those pages, so back-end changes are required as well. For example, if you have a route of &lt;code&gt;/documents/100&lt;/code&gt;, your web server must be able to serve that page, if the browser visits that URL directly. For full search-engine crawlability, it's best to have the server generate the complete HTML for the page ... but if it's a web application, just rendering the same content you would have for the root URL, and filling in the rest with Backbone Views and JavaScript works fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95614d1c647acab42810ca12105aa9cf1c7c5b27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;read &amp;rarr; GET &lt;/b&gt;&lt;code&gt;/collection[/id]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c6dfa826d9ef5b064b39e31c4db433f9eaa236" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;remove&lt;/b&gt;&lt;code&gt;collection.remove(models, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242f836a78affa584be96ebd8ea68ea4092fefe2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;remove&lt;/b&gt;&lt;code&gt;view.remove()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;remove&lt;/b&gt;&lt;code&gt;view.remove()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aac145d5798cea19792ec4fdfeb0379d64985c7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;render&lt;/b&gt;&lt;code&gt;view.render()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;render&lt;/b&gt;&lt;code&gt;view.render()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2dea6586b9e2d1958c9d9fd7a577b27ce565966d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;reset&lt;/b&gt;&lt;code&gt;collection.reset([models], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966927c95e629514b7c1060211652d6fbca4fe92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;route&lt;/b&gt;&lt;code&gt;router.route(route, name, [callback])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255a0113596d572360930ac2d561c6440268da26" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;routes&lt;/b&gt;&lt;code&gt;router.routes&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;routes&lt;/b&gt;&lt;code&gt;router.routes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84b35da5b5eb5d61f4e80c1d04d6e6190ebb99e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;save&lt;/b&gt; accepts &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; callbacks in the options hash, which will be passed the arguments &lt;code&gt;(model, response, options)&lt;/code&gt;. If a server-side validation fails, return a non-&lt;code&gt;200&lt;/code&gt; HTTP response code, along with an error response in text or JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a3eb86243c991d052ddefb8cd45eb1e7d48639" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;save&lt;/b&gt;&lt;code&gt;model.save([attributes], [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b99670c16bf09fbebb656df027a08d219ea77e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;set&lt;/b&gt;&lt;code&gt;collection.set(models, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5bc59a6e039a89f6889b858bfc3cdbc29ddc82" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;set&lt;/b&gt;&lt;code&gt;model.set(attributes, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a394b2c37e8b06ee9e646cec9095482da0b15c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;setElement&lt;/b&gt;&lt;code&gt;view.setElement(element)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;setElement&lt;/b&gt;&lt;code&gt;view.setElement(element)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1fb8a2008ddd15498726da4011bdb53d7dcde958" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;shift&lt;/b&gt;&lt;code&gt;collection.shift([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;shift&lt;/b&gt;&lt;code&gt;collection.shift([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2dd94074289036e5e4bd97fe30487d0b9c6f06f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;slice&lt;/b&gt;&lt;code&gt;collection.slice(begin, end)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56bbde28d8bc7d2e7e89d9b1eaa57e70083f19a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sort&lt;/b&gt;&lt;code&gt;collection.sort([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;sort&lt;/b&gt;&lt;code&gt;collection.sort([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="819ae85b23d8702f12990fe03b8462c667cf85c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;start&lt;/b&gt;&lt;code&gt;Backbone.history.start([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;start&lt;/b&gt;&lt;code&gt;Backbone.history.start([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18fc77a704ed9d050bcf36bf428e15b762e5f503" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;stopListening&lt;/b&gt;&lt;code&gt;object.stopListening([other], [event], [callback])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be537f28f2980f0a9e5f926f90007bde29a25da2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sync&lt;/b&gt;&lt;code&gt;collection.sync(method, collection, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3d73a06b32c7f1563872f3b117cdded2960c06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sync&lt;/b&gt;&lt;code&gt;model.sync(method, model, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadec0812d8113771ef2fe7223621c882847ecc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;template&lt;/b&gt;&lt;code&gt;view.template([data])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;template&lt;/b&gt;&lt;code&gt;view.template([data])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e4c5c7b66beeccbf20fd2227c914b2137a99ee1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;toJSON&lt;/b&gt;&lt;code&gt;collection.toJSON([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;toJSON&lt;/b&gt;&lt;code&gt;collection.toJSON([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03e436f5e7771e1f9f99d4ac5c260304bccf0430" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;toJSON&lt;/b&gt;&lt;code&gt;model.toJSON([options])&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;toJSON&lt;/b&gt;&lt;code&gt;model.toJSON([options])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35b6638d53186f824173d7a6540681ab2bbbf57b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;trigger&lt;/b&gt;&lt;code&gt;object.trigger(event, [*args])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c198409dbc55b014da1c8415f722325d21d0e7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;undelegateEvents&lt;/b&gt;&lt;code&gt;undelegateEvents()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;undelegateEvents&lt;/b&gt;&lt;code&gt;undelegateEvents()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e32eb8f3572ace367e99a7e7513689996a04167e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unset&lt;/b&gt;&lt;code&gt;model.unset(attribute, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ad4d048eca2d6ffc6304b3de081fc9a1bd6cfc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unshift&lt;/b&gt;&lt;code&gt;collection.unshift(model, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ff8cfa3e1624f64551f81758b012660ec57b67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;update &amp;rarr; PUT &lt;/b&gt;&lt;code&gt;/collection/id&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a78a1240acb307d3f31427695aa563a79a7ca19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;url&lt;/b&gt;&lt;code&gt;collection.url or collection.url()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc14e45fccd4870f6808238dd9b4ceaf477e72aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;url&lt;/b&gt;&lt;code&gt;model.url()&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;url&lt;/b&gt;&lt;code&gt;model.url()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbf5cbd9421be50738c5f4f8314d072e7aeded06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;urlRoot&lt;/b&gt;&lt;code&gt;model.urlRoot or model.urlRoot()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3face0894637b55b1eb7432fe02d15329b9d74" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;validate&lt;/b&gt;&lt;code&gt;model.validate(attributes, options)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e8d23dd339a3a901955fc05f51cb4ae724cb8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;validationError&lt;/b&gt;&lt;code&gt;model.validationError&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;validationError&lt;/b&gt;&lt;code&gt;model.validationError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47d39e21ea3ec887dea0ab0346ad6030f7301157" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;where&lt;/b&gt;&lt;code&gt;collection.where(attributes)&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;where&lt;/b&gt;&lt;code&gt;collection.where(attributes)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c5bd3108cb476f70476475699cc9c1fbfc79da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;invalid&quot;&lt;/code&gt; events are useful for providing coarse-grained error messages at the model or collection level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d4e438b3463d2ab5b64e0e6079ad89a42dc936" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mixin&lt;/code&gt; provides a way to enhance the base &lt;b&gt;Backbone.Collection&lt;/b&gt; and any collections which extend it. This can be used to add generic methods (e.g. additional &lt;a href=&quot;#Collection-Underscore-Methods&quot;&gt;&lt;b&gt;Underscore Methods&lt;/b&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed05ae66b302030d921c8117f60cc37aeb4aac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this.el&lt;/code&gt; can be resolved from a DOM selector string or an Element; otherwise it will be created from the view's &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &lt;a href=&quot;#View-attributes&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; properties. If none are set, &lt;code&gt;this.el&lt;/code&gt; is an empty &lt;code&gt;div&lt;/code&gt;, which is often just fine. An &lt;b&gt;el&lt;/b&gt; reference may also be passed in to the view's constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac984b9d453adc83b5a6c620682eb042ae26beb" translate="yes" xml:space="preserve">
          <source>A cached jQuery object for the view's element. A handy reference instead of re-wrapping the DOM element all the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745c735a687447779deb641c2b12e98667d23ec7" translate="yes" xml:space="preserve">
          <source>A collection can also contain polymorphic models by overriding this property with a constructor that returns a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e933372a9361c0a1187bff79b4e23e90a539297" translate="yes" xml:space="preserve">
          <source>A hash of attributes that will be set as HTML DOM element attributes on the view's &lt;code&gt;el&lt;/code&gt; (id, class, data-properties, etc.), or a function that returns such a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994293e5a50c7e1241e3249aa317c9ed340e986e" translate="yes" xml:space="preserve">
          <source>A model's unique identifier is stored under the &lt;code&gt;id&lt;/code&gt; attribute. If you're directly communicating with a backend (CouchDB, MongoDB) that uses a different unique key, you may set a Model's &lt;code&gt;idAttribute&lt;/code&gt; to transparently map from that key to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0a8f1db525d38282c30a9208f5e961e4fb7282" translate="yes" xml:space="preserve">
          <source>A nested optional route of &lt;code&gt;&quot;docs(/:section)(/:subsection)&quot;&lt;/code&gt; will match &lt;code&gt;#docs&lt;/code&gt;, &lt;code&gt;#docs/faq&lt;/code&gt;, and &lt;code&gt;#docs/faq/installing&lt;/code&gt;, passing &lt;code&gt;&quot;faq&quot;&lt;/code&gt; to the action in the second case, and passing &lt;code&gt;&quot;faq&quot;&lt;/code&gt; and &lt;code&gt;&quot;installing&quot;&lt;/code&gt; to the action in the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c019a7d54de829e8d9a290046e393bbd246962b3" translate="yes" xml:space="preserve">
          <source>A route of &lt;code&gt;&quot;docs/:section(/:subsection)&quot;&lt;/code&gt; will match &lt;code&gt;#docs/faq&lt;/code&gt; and &lt;code&gt;#docs/faq/installing&lt;/code&gt;, passing &lt;code&gt;&quot;faq&quot;&lt;/code&gt; to the action in the first case, and passing &lt;code&gt;&quot;faq&quot;&lt;/code&gt; and &lt;code&gt;&quot;installing&quot;&lt;/code&gt; to the action in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363cc1213d13f1ad183cd5beff4f9f4cff78443a" translate="yes" xml:space="preserve">
          <source>A route of &lt;code&gt;&quot;file/*path&quot;&lt;/code&gt; will match &lt;code&gt;#file/folder/file.txt&lt;/code&gt;, passing &lt;code&gt;&quot;folder/file.txt&quot;&lt;/code&gt; to the action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbcda5618b824e30305a2fd9660495d5ad1736" translate="yes" xml:space="preserve">
          <source>A single-event version of &lt;b&gt;delegateEvents&lt;/b&gt; is available as &lt;code&gt;delegate&lt;/code&gt;. In fact, &lt;b&gt;delegateEvents&lt;/b&gt; is simply a multi-event wrapper around &lt;code&gt;delegate&lt;/code&gt;. A counterpart to &lt;code&gt;undelegateEvents&lt;/code&gt; is available as &lt;code&gt;undelegate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613b690cc1266f21ff371bf328425292e1e7482f" translate="yes" xml:space="preserve">
          <source>A special property of models, the &lt;b&gt;cid&lt;/b&gt; or client id is a unique identifier automatically assigned to all models when they're first created. Client ids are handy when the model has not yet been saved to the server, and does not yet have its eventual true &lt;b&gt;id&lt;/b&gt;, but already needs to be visible in the UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9f1e3977f811b878022686a6821c145a8a0705" translate="yes" xml:space="preserve">
          <source>A special property of models, the &lt;b&gt;id&lt;/b&gt; is an arbitrary string (integer id or UUID). If you set the &lt;b&gt;id&lt;/b&gt; in the attributes hash, it will be copied onto the model as a direct property. &lt;code&gt;model.id&lt;/code&gt; should not be manipulated directly, it should be modified only via &lt;code&gt;model.set('id', &amp;hellip;)&lt;/code&gt;. Models can be retrieved by id from collections, and the id is used to generate model URLs by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44a748efd5b0590baaffcc715a1d64a38b4fc15" translate="yes" xml:space="preserve">
          <source>A view that displays a document in a search result might look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970f8265899599b77070d80ea7920f3dcf818ed7" translate="yes" xml:space="preserve">
          <source>Add a model (or an array of models) to the collection, firing an &lt;code&gt;&quot;add&quot;&lt;/code&gt; event for each model, and an &lt;code&gt;&quot;update&quot;&lt;/code&gt; event afterwards. If a &lt;a href=&quot;#Collection-model&quot;&gt;model&lt;/a&gt; property is defined, you may also pass raw attributes objects and options, and have them be vivified as instances of the model using the provided options. Returns the added (or preexisting, if duplicate) models. Pass &lt;code&gt;{at: index}&lt;/code&gt; to splice the model into the collection at the specified &lt;code&gt;index&lt;/code&gt;. If you're adding models to the collection that are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30030792d1f896e901d8936bd72f20be7617fba7" translate="yes" xml:space="preserve">
          <source>Add a model at the beginning of a collection. Takes the same options as &lt;a href=&quot;#Collection-add&quot;&gt;add&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761b7b2e7a3bd49e1d3d8e4a29540e13c6774cad" translate="yes" xml:space="preserve">
          <source>Add a model at the end of a collection. Takes the same options as &lt;a href=&quot;#Collection-add&quot;&gt;add&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27de69d5ae79c999e2d02aee7b146a76966121e1" translate="yes" xml:space="preserve">
          <source>Adding and removing models one at a time is all well and good, but sometimes you have so many models to change that you'd rather just update the collection in bulk. Use &lt;b&gt;reset&lt;/b&gt; to replace a collection with a new list of models (or attribute hashes), triggering a single &lt;code&gt;&quot;reset&quot;&lt;/code&gt; event on completion, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0221a7706a379a5e8c51af3335d13abbe55e12" translate="yes" xml:space="preserve">
          <source>All Backbone event methods also support an event map syntax, as an alternative to positional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f916790eab7539680103e85fa5fba77610911fe" translate="yes" xml:space="preserve">
          <source>All views have a DOM element at all times (the &lt;b&gt;el&lt;/b&gt; property), whether they've already been inserted into the page or not. In this fashion, views can be rendered at any time, and inserted into the DOM all at once, in order to get high-performance UI rendering with as few reflows and repaints as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd9e125138e4a125f826ba4fda16f592fa84923" translate="yes" xml:space="preserve">
          <source>Any event that is triggered on a model in a collection will also be triggered on the collection directly, for convenience. This allows you to listen for changes to specific attributes in any model in a collection, for example: &lt;code&gt;documents.on(&quot;change:selected&quot;, ...)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790609d643ada0f420ef0d5719c9734962f9bc43" translate="yes" xml:space="preserve">
          <source>As an example, a Rails 4 handler responding to an &lt;code&gt;&quot;update&quot;&lt;/code&gt; call from &lt;code&gt;Backbone&lt;/code&gt; might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd0e50b3d2e609b7a5c709227afc792d333a959" translate="yes" xml:space="preserve">
          <source>Backbone is agnostic with respect to your preferred method of HTML templating. Your &lt;b&gt;render&lt;/b&gt; function could even munge together an HTML string, or use &lt;code&gt;document.createElement&lt;/code&gt; to generate a DOM tree. However, we suggest choosing a nice JavaScript templating library. &lt;a href=&quot;https://github.com/janl/mustache.js&quot;&gt;Mustache.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/creationix/haml-js&quot;&gt;Haml-js&lt;/a&gt;, and &lt;a href=&quot;https://github.com/sstephenson/eco&quot;&gt;Eco&lt;/a&gt; are all fine alternatives. Because &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt; is already on the page, &lt;a href=&quot;http://underscorejs.org/#template&quot;&gt;_.template&lt;/a&gt; is available, and is an excellent choice if you prefer simple interpolated-JavaScript style templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d48cc69614c3078ae091fdc8a0c4ed01829ef0e" translate="yes" xml:space="preserve">
          <source>Backbone proxies to &lt;b&gt;Underscore.js&lt;/b&gt; to provide 46 iteration functions on &lt;b&gt;Backbone.Collection&lt;/b&gt;. They aren't all documented here, but you can take a look at the Underscore documentation for the full details&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3d4571c337c8ec0ed277dcd0ff157ce7df2dfe" translate="yes" xml:space="preserve">
          <source>Backbone proxies to &lt;b&gt;Underscore.js&lt;/b&gt; to provide 9 object functions on &lt;b&gt;Backbone.Model&lt;/b&gt;. They aren't all documented here, but you can take a look at the Underscore documentation for the full details&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63b052def5a04897a51b2af764a53069cd22f7c" translate="yes" xml:space="preserve">
          <source>Backbone views are almost more convention than they are code &amp;mdash; they don't determine anything about your HTML or CSS for you, and can be used with any JavaScript templating library. The general idea is to organize your interface into logical views, backed by models, each of which can be updated independently when the model changes, without having to redraw the page. Instead of digging into a JSON object, looking up an element in the DOM, and updating the HTML by hand, you can bind your view's &lt;code&gt;render&lt;/code&gt; function to the model's &lt;code&gt;&quot;change&quot;&lt;/code&gt; event &amp;mdash; and now everywhere that model data is displayed in the UI, it is always immediately up to date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f8b1c4eac3167f1b7274099371dd3b700cbbf6" translate="yes" xml:space="preserve">
          <source>Backbone will automatically attach the event listeners at instantiation time, right before invoking &lt;a href=&quot;#View-constructor&quot;&gt;initialize&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14331bc3b66f354ed4ac731f338fd2249bd588e5" translate="yes" xml:space="preserve">
          <source>Backbone.$</source>
          <target state="translated">Backbone.$</target>
        </trans-unit>
        <trans-unit id="4e0c0c378e8a6daf5498eee09ab6c9905fd8cf52" translate="yes" xml:space="preserve">
          <source>Backbone.Collection</source>
          <target state="translated">Backbone.Collection</target>
        </trans-unit>
        <trans-unit id="8ce498223aa4c3e3f236fb3578ed20fc707d735a" translate="yes" xml:space="preserve">
          <source>Backbone.Events</source>
          <target state="translated">Backbone.Events</target>
        </trans-unit>
        <trans-unit id="0616de6f2a1ac5028d0daed7b2aeee07a4fc33df" translate="yes" xml:space="preserve">
          <source>Backbone.Model</source>
          <target state="translated">Backbone.Model</target>
        </trans-unit>
        <trans-unit id="b62027524fa39bf6d9161faf55e936ffd3ffe4b0" translate="yes" xml:space="preserve">
          <source>Backbone.Router</source>
          <target state="translated">Backbone.Router</target>
        </trans-unit>
        <trans-unit id="d8f5c62dae3c2b06e5d7c6bc45d904e20b0ef0a2" translate="yes" xml:space="preserve">
          <source>Backbone.View</source>
          <target state="translated">Backbone.View</target>
        </trans-unit>
        <trans-unit id="ae732af1fc303d716dfed5424e8a454b972771ba" translate="yes" xml:space="preserve">
          <source>Backbone.ajax</source>
          <target state="translated">Backbone.ajax</target>
        </trans-unit>
        <trans-unit id="895287cbfa1addf11d5ff46fdf07468adee9a9ac" translate="yes" xml:space="preserve">
          <source>Backbone.emulateHTTP</source>
          <target state="translated">Backbone.emulateHTTP</target>
        </trans-unit>
        <trans-unit id="191183d3e6fd7b7000cfb360ba0383d8a110c0e5" translate="yes" xml:space="preserve">
          <source>Backbone.emulateJSON</source>
          <target state="translated">Backbone.emulateJSON</target>
        </trans-unit>
        <trans-unit id="6636d8bbddfba508ac78efab44c61843a81308d3" translate="yes" xml:space="preserve">
          <source>Backbone.history</source>
          <target state="translated">Backbone.history</target>
        </trans-unit>
        <trans-unit id="3aa4e319c38bfa1be7c1da73c5f7087ae132be85" translate="yes" xml:space="preserve">
          <source>Backbone.history.start</source>
          <target state="translated">Backbone.history.start</target>
        </trans-unit>
        <trans-unit id="a9fefc1708b009551dfe5243e39f9eaa73a80f29" translate="yes" xml:space="preserve">
          <source>Backbone.js</source>
          <target state="translated">Backbone.js</target>
        </trans-unit>
        <trans-unit id="51ef6f7ec395b405b1547cb25f9700e413fb94fb" translate="yes" xml:space="preserve">
          <source>Backbone.listenTo</source>
          <target state="translated">Backbone.listenTo</target>
        </trans-unit>
        <trans-unit id="947da3110e8122a90b3bfd82250b26ef70efef1a" translate="yes" xml:space="preserve">
          <source>Backbone.listenToOnce</source>
          <target state="translated">Backbone.listenToOnce</target>
        </trans-unit>
        <trans-unit id="6bf3f4c58e7cf796677b306f9de519f313f31df5" translate="yes" xml:space="preserve">
          <source>Backbone.noConflict</source>
          <target state="translated">Backbone.noConflict</target>
        </trans-unit>
        <trans-unit id="34e8964fb733ec470e94102676c3efa24d2e211e" translate="yes" xml:space="preserve">
          <source>Backbone.off</source>
          <target state="translated">Backbone.off</target>
        </trans-unit>
        <trans-unit id="854faaf5a842f8ec4e5105ca61dd18fb27245f13" translate="yes" xml:space="preserve">
          <source>Backbone.on</source>
          <target state="translated">Backbone.on</target>
        </trans-unit>
        <trans-unit id="d5895bf3d4714831e4fb7c25d74052c3bf73f971" translate="yes" xml:space="preserve">
          <source>Backbone.once</source>
          <target state="translated">Backbone.once</target>
        </trans-unit>
        <trans-unit id="977f8b83847d5db140f5816358a0011578bb1906" translate="yes" xml:space="preserve">
          <source>Backbone.stopListening</source>
          <target state="translated">Backbone.stopListening</target>
        </trans-unit>
        <trans-unit id="bc2320217ab5bafe4cc224b08de59c6f063687c6" translate="yes" xml:space="preserve">
          <source>Backbone.sync</source>
          <target state="translated">Backbone.sync</target>
        </trans-unit>
        <trans-unit id="0b9b6f40e16cefda154affbe0fc71596352ed1fb" translate="yes" xml:space="preserve">
          <source>Backbone.trigger</source>
          <target state="translated">Backbone.trigger</target>
        </trans-unit>
        <trans-unit id="fabe8d8ca0f9cea65496645617e4886e79491862" translate="yes" xml:space="preserve">
          <source>Because hash-based history in Internet Explorer relies on an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, be sure to call &lt;code&gt;start()&lt;/code&gt; only after the DOM is ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241f29d30cd32863ada981bcbf2139f1876afac3" translate="yes" xml:space="preserve">
          <source>Bind a &lt;b&gt;callback&lt;/b&gt; function to an object. The callback will be invoked whenever the &lt;b&gt;event&lt;/b&gt; is fired. If you have a large number of different events on a page, the convention is to use colons to namespace them: &lt;code&gt;&quot;poll:start&quot;&lt;/code&gt;, or &lt;code&gt;&quot;change:selection&quot;&lt;/code&gt;. The event string may also be a space-delimited list of several events...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc0ee3e6459cb2260a672010f97b8022bd59cf0" translate="yes" xml:space="preserve">
          <source>Brief aside on &lt;code&gt;super&lt;/code&gt;: JavaScript does not provide a simple way to call super &amp;mdash; the function of the same name defined higher on the prototype chain. If you override a core function like &lt;code&gt;set&lt;/code&gt;, or &lt;code&gt;save&lt;/code&gt;, and you want to invoke the parent object's implementation, you'll have to explicitly call it, along these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d36f938d61bb86a34a47ac5588505af65f772f" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;save&lt;/code&gt; checks &lt;b&gt;validate&lt;/b&gt; before setting any attributes but you may also tell &lt;code&gt;set&lt;/code&gt; to validate the new attributes by passing &lt;code&gt;{validate: true}&lt;/code&gt; as an option. The &lt;b&gt;validate&lt;/b&gt; method receives the model attributes as well as any options passed to &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;save&lt;/code&gt;, if &lt;b&gt;validate&lt;/b&gt; returns an error, &lt;code&gt;save&lt;/code&gt; does not continue, the model attributes are not modified on the server, an &lt;code&gt;&quot;invalid&quot;&lt;/code&gt; event is triggered, and the &lt;code&gt;validationError&lt;/code&gt; property is set on the model with the value returned by this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed4c097550112ea9724bd83ad572a804340d2ab" translate="yes" xml:space="preserve">
          <source>By default returns the value of the attributes' &lt;a href=&quot;#Model-idAttribute&quot;&gt;&lt;code&gt;idAttribute&lt;/code&gt;&lt;/a&gt; from the collection's model class or failing that, &lt;code&gt;id&lt;/code&gt;. If your collection uses a &lt;a href=&quot;#Collection-model&quot;&gt;model factory&lt;/a&gt; and those models have an &lt;code&gt;idAttribute&lt;/code&gt; other than &lt;code&gt;id&lt;/code&gt; you must override this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818cedcd716ab3fa6e753244344a49d1abe3a9b3" translate="yes" xml:space="preserve">
          <source>By default there is no &lt;b&gt;comparator&lt;/b&gt; for a collection. If you define a comparator, it will be used to sort the collection any time a model is added. A comparator can be defined as a &lt;a href=&quot;http://underscorejs.org/#sortBy&quot;&gt;sortBy&lt;/a&gt; (pass a function that takes a single argument), as a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;sort&lt;/a&gt; (pass a comparator function that expects two arguments), or as a string indicating the attribute to sort by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a070c85e08718ffc2355b87ba749f094995203a5" translate="yes" xml:space="preserve">
          <source>Callbacks bound to the special &lt;code&gt;&quot;all&quot;&lt;/code&gt; event will be triggered when any event occurs, and are passed the name of the event as the first argument. For example, to proxy all events from one object to another:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e1b156aeed0a885a0cc46ee53666bc0aff0536" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;collection.reset()&lt;/code&gt; without passing any models as arguments will empty the entire collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4d3e1ba6718d8fb27200918718ef4b4885d2a3" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;save&lt;/code&gt; with new attributes will cause a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event immediately, a &lt;code&gt;&quot;request&quot;&lt;/code&gt; event as the Ajax request begins to go to the server, and a &lt;code&gt;&quot;sync&quot;&lt;/code&gt; event after the server has acknowledged the successful change. Pass &lt;code&gt;{wait: true}&lt;/code&gt; if you'd like to wait for the server before setting the new attributes on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c54a96f8011b39819ba18bcb53fcbb092d650d" translate="yes" xml:space="preserve">
          <source>Collection</source>
          <target state="translated">Collection</target>
        </trans-unit>
        <trans-unit id="3028b4ff2d95c4c2dfc25c2dd188f3262b93575d" translate="yes" xml:space="preserve">
          <source>Collections are ordered sets of models. You can bind &lt;code&gt;&quot;change&quot;&lt;/code&gt; events to be notified when any model in the collection has been modified, listen for &lt;code&gt;&quot;add&quot;&lt;/code&gt; and &lt;code&gt;&quot;remove&quot;&lt;/code&gt; events, &lt;code&gt;fetch&lt;/code&gt; the collection from the server, and use a full suite of &lt;a href=&quot;#Collection-Underscore-Methods&quot;&gt;Underscore.js methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a784532da930f896f528ec441531ab9c454e102e" translate="yes" xml:space="preserve">
          <source>Collections with a comparator will not automatically re-sort if you later change model attributes, so you may wish to call &lt;code&gt;sort&lt;/code&gt; after changing model attributes that would affect the order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed72e5b2e74e367ce92e78b2ad8d22d9bc321a3a" translate="yes" xml:space="preserve">
          <source>Convenience to create a new instance of a model within a collection. Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. Returns the new model. If client-side validation failed, the model will be unsaved, with validation errors. In order for this to work, you should set the &lt;a href=&quot;#Collection-model&quot;&gt;model&lt;/a&gt; property of the collection. The &lt;b&gt;create&lt;/b&gt; method can accept either an attributes hash and options to be passed down during model instantiation or an existing, unsaved model object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1de1362e3fd9f1da6db26242bab368b2b1e603" translate="yes" xml:space="preserve">
          <source>Creating a model will cause an immediate &lt;code&gt;&quot;add&quot;&lt;/code&gt; event to be triggered on the collection, a &lt;code&gt;&quot;request&quot;&lt;/code&gt; event as the new model is sent to the server, as well as a &lt;code&gt;&quot;sync&quot;&lt;/code&gt; event, once the server has responded with the successful creation of the model. Pass &lt;code&gt;{wait: true}&lt;/code&gt; if you'd like to wait for the server before adding the new model to the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07dbb34b45fca1abd67fd423ae41adec006ef7d" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;#Collection-url&quot;&gt;Collection#url&lt;/a&gt; to generate the URL, so make sure that you have it defined, or a &lt;a href=&quot;#Model-urlRoot&quot;&gt;urlRoot&lt;/a&gt; property, if all models of this class share a common root URL. A model with an id of &lt;code&gt;101&lt;/code&gt;, stored in a &lt;a href=&quot;#Collection&quot;&gt;Backbone.Collection&lt;/a&gt; with a &lt;code&gt;url&lt;/code&gt; of &lt;code&gt;&quot;/documents/7/notes&quot;&lt;/code&gt;, would have this URL: &lt;code&gt;&quot;/documents/7/notes/101&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9f3533b3aec9e9b4c67248c279b5465380d31e" translate="yes" xml:space="preserve">
          <source>Destroys the model on the server by delegating an HTTP &lt;code&gt;DELETE&lt;/code&gt; request to &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt;. Returns a &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/#jqXHR&quot;&gt;jqXHR&lt;/a&gt; object, or &lt;code&gt;false&lt;/code&gt; if the model &lt;a href=&quot;#Model-isNew&quot;&gt;isNew&lt;/a&gt;. Accepts &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; callbacks in the options hash, which will be passed &lt;code&gt;(model, response, options)&lt;/code&gt;. Triggers a &lt;code&gt;&quot;destroy&quot;&lt;/code&gt; event on the model, which will bubble up through any collections that contain it, a &lt;code&gt;&quot;request&quot;&lt;/code&gt; event as it begins the Ajax request to the server, and a &lt;code&gt;&quot;sync&quot;&lt;/code&gt; event, after the server has successfully acknowledged the model's deletion. Pass &lt;code&gt;{wait: true}&lt;/code&gt; if you'd like to wait for the server to respond before removing the model from the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ed862159d5394b98645396a1ebdcc1297651e9" translate="yes" xml:space="preserve">
          <source>Due to the fact that &lt;a href=&quot;#Events&quot;&gt;Events&lt;/a&gt; accepts space separated lists of events, attribute names should not include spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf208352c8b84be22ae7807686596afc50face4" translate="yes" xml:space="preserve">
          <source>During a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event, this method can be used to get the previous value of a changed attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b156ba8078aba7951e9f232e37f2a7a3226a84" translate="yes" xml:space="preserve">
          <source>During page load, after your application has finished creating all of its routers, be sure to call &lt;code&gt;Backbone.history.start()&lt;/code&gt; or &lt;code&gt;Backbone.history.start({pushState: true})&lt;/code&gt; to route the initial URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="c4464e7c53efbaabe7dad3f86d13d450b2f482fa" translate="yes" xml:space="preserve">
          <source>Fetch the default set of models for this collection from the server, &lt;a href=&quot;#Collection-set&quot;&gt;setting&lt;/a&gt; them on the collection when they arrive. The &lt;b&gt;options&lt;/b&gt; hash takes &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; callbacks which will both be passed &lt;code&gt;(collection, response, options)&lt;/code&gt; as arguments. When the model data returns from the server, it uses &lt;a href=&quot;#Collection-set&quot;&gt;set&lt;/a&gt; to (intelligently) merge the fetched models, unless you pass &lt;code&gt;{reset: true}&lt;/code&gt;, in which case the collection will be (efficiently) &lt;a href=&quot;#Collection-reset&quot;&gt;reset&lt;/a&gt;. Delegates to &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt; under the covers for custom persistence strategies and returns a &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/#jqXHR&quot;&gt;jqXHR&lt;/a&gt;. The server handler for &lt;b&gt;fetch&lt;/b&gt; requests should return a JSON array of models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061c059f471afb3de5215ab224a2373b1f876eac" translate="yes" xml:space="preserve">
          <source>For example, a route of &lt;code&gt;&quot;search/:query/p:page&quot;&lt;/code&gt; will match a fragment of &lt;code&gt;#search/obama/p2&lt;/code&gt;, passing &lt;code&gt;&quot;obama&quot;&lt;/code&gt; and &lt;code&gt;&quot;2&quot;&lt;/code&gt; to the action as positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141e99b4ff8c34505cc302490ca53bfa83f10273" translate="yes" xml:space="preserve">
          <source>For example, to make a handy event dispatcher that can coordinate events among different areas of your application: &lt;code&gt;var dispatcher = _.clone(Backbone.Events)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63aae9003207ae92979d7ce14bdabcdc2d4de205" translate="yes" xml:space="preserve">
          <source>For use with collections as ES classes. If you define a &lt;b&gt;preinitialize&lt;/b&gt; method, it will be invoked when the Collection is first created and before any instantiation logic is run for the Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084214ecb94a266f19fa6fb6f2eef8ff8c17bf67" translate="yes" xml:space="preserve">
          <source>For use with models as ES classes. If you define a &lt;b&gt;preinitialize&lt;/b&gt; method, it will be invoked when the Model is first created, before any instantiation logic is run for the Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8882422c68acae5bdff6cc8ce8fbd6fb2b3c94" translate="yes" xml:space="preserve">
          <source>For use with routers as ES classes. If you define a &lt;b&gt;preinitialize&lt;/b&gt; method, it will be invoked when the Router is first created and before any instantiation logic is run for the Router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a56d44618e6833f36ff9b8927a1540932fc678" translate="yes" xml:space="preserve">
          <source>For use with views as ES classes. If you define a &lt;b&gt;preinitialize&lt;/b&gt; method, it will be invoked when the view is first created, before any instantiation logic is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad70732810f38182fbdb746141452d20b8cff0d" translate="yes" xml:space="preserve">
          <source>Force a collection to re-sort itself. Note that a collection with a &lt;a href=&quot;#Collection-comparator&quot;&gt;comparator&lt;/a&gt; will sort itself automatically whenever a model is added. To disable sorting when adding a model, pass &lt;code&gt;{sort: false}&lt;/code&gt; to &lt;code&gt;add&lt;/code&gt;. Calling &lt;b&gt;sort&lt;/b&gt; triggers a &lt;code&gt;&quot;sort&quot;&lt;/code&gt; event on the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc23315a58675669406bf270639aea6b95d8a637" translate="yes" xml:space="preserve">
          <source>Generally speaking, when calling a function that emits an event (&lt;code&gt;model.set&lt;/code&gt;, &lt;code&gt;collection.add&lt;/code&gt;, and so on...), if you'd like to prevent the event from being triggered, you may pass &lt;code&gt;{silent: true}&lt;/code&gt; as an option. Note that this is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefa5a0cb4250760da8f65e5a2986108d50caa92" translate="yes" xml:space="preserve">
          <source>Get a model from a collection, specified by an &lt;a href=&quot;#Model-id&quot;&gt;id&lt;/a&gt;, a &lt;a href=&quot;#Model-cid&quot;&gt;cid&lt;/a&gt;, or by passing in a &lt;b&gt;model&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05fc31310b70c128c9e416536a91ff4776354fc" translate="yes" xml:space="preserve">
          <source>Get a model from a collection, specified by index. Useful if your collection is sorted, and if your collection isn't sorted, &lt;b&gt;at&lt;/b&gt; will still retrieve models in insertion order. When passed a negative index, it will retrieve the model from the back of the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004bbee64353e3c31a0e5d4fdbe3f66a6256e374" translate="yes" xml:space="preserve">
          <source>Get started by creating a custom router class. Define action functions that are triggered when certain URL fragments are matched, and provide a &lt;a href=&quot;#Router-routes&quot;&gt;routes&lt;/a&gt; hash that pairs routes to actions. Note that you'll want to avoid using a leading slash in your route definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86559bc0ebacc3bc2d811a63c6c1ae38986f6a0f" translate="yes" xml:space="preserve">
          <source>Get started with views by creating a custom view class. You'll want to override the &lt;a href=&quot;#View-render&quot;&gt;render&lt;/a&gt; function, specify your declarative &lt;a href=&quot;#View-delegateEvents&quot;&gt;events&lt;/a&gt;, and perhaps the &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;className&lt;/code&gt;, or &lt;code&gt;id&lt;/code&gt; of the View's root element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0c6d9bc9c6574a38edf59a6aaa8bb5766cd465" translate="yes" xml:space="preserve">
          <source>Get the current value of an attribute from the model. For example: &lt;code&gt;note.get(&quot;title&quot;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42477693dbf61ffe505d7b2149a65f47fba51c72" translate="yes" xml:space="preserve">
          <source>Has the model changed since its last &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt;? If an &lt;b&gt;attribute&lt;/b&gt; is passed, returns &lt;code&gt;true&lt;/code&gt; if that specific attribute has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ba63965d5b31703c0e85195c1ca45d04d65d78" translate="yes" xml:space="preserve">
          <source>Has this model been saved to the server yet? If the model does not yet have an &lt;code&gt;id&lt;/code&gt;, it is considered to be new.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962bc2959adf9332d4072694eb20511f05b78d4d" translate="yes" xml:space="preserve">
          <source>Here's an example using &lt;b&gt;reset&lt;/b&gt; to bootstrap a collection during initial page load, in a Rails application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f1a8f2fdde34ecaa149c597b15f2a241dea854" translate="yes" xml:space="preserve">
          <source>Here's the complete list of built-in Backbone events, with arguments. You're also free to trigger your own events on Models, Collections and Views as you see fit. The &lt;code&gt;Backbone&lt;/code&gt; object itself mixes in &lt;code&gt;Events&lt;/code&gt;, and can be used to emit any global events that your application needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="c3cbdb1710673dea79522e4e07a968e2e26fd064" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{parse: true}&lt;/code&gt; is passed as an &lt;b&gt;option&lt;/b&gt;, the &lt;b&gt;attributes&lt;/b&gt; will first be converted by &lt;a href=&quot;#Model-parse&quot;&gt;parse&lt;/a&gt; before being &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt; on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f62e1be84472a3fa6a140e0fb24825af4ef5e9" translate="yes" xml:space="preserve">
          <source>If instead, you'd only like the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50910633ec1733c8d357b257f33603b5732296a" translate="yes" xml:space="preserve">
          <source>If jQuery is included on the page, each view has a &lt;b&gt;$&lt;/b&gt; function that runs queries scoped within the view's element. If you use this scoped jQuery function, you don't have to use model ids as part of your query to pull out specific elements in a list, and can rely much more on HTML class attributes. It's equivalent to running: &lt;code&gt;view.$el.find(selector)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff89fc61fa270dd42cf314fc55c2c9bfdb9e2b4" translate="yes" xml:space="preserve">
          <source>If the server has already rendered the entire page, and you don't want the initial route to trigger when starting History, pass &lt;code&gt;silent: true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576a2fc90dca2584a09c812f6180b9ee2773559d" translate="yes" xml:space="preserve">
          <source>If you have multiple copies of &lt;code&gt;jQuery&lt;/code&gt; on the page, or simply want to tell Backbone to use a particular object as its DOM / Ajax library, this is the property for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a7fbada7b2def0331943ed25dbc4da2b216180" translate="yes" xml:space="preserve">
          <source>If you pass a &lt;code&gt;{collection: ...}&lt;/code&gt; as the &lt;b&gt;options&lt;/b&gt;, the model gains a &lt;code&gt;collection&lt;/code&gt; property that will be used to indicate which collection the model belongs to, and is used to help compute the model's &lt;a href=&quot;#Model-url&quot;&gt;url&lt;/a&gt;. The &lt;code&gt;model.collection&lt;/code&gt; property is normally created automatically when you first add a model to a collection. Note that the reverse is not true, as passing this option to the constructor will not automatically add the model to the collection. Useful, sometimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f021e60ae958de20e30e078636092d3f9038e953" translate="yes" xml:space="preserve">
          <source>If you want to use a custom AJAX function, or your endpoint doesn't support the &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;jQuery.ajax&lt;/a&gt; API and you need to tweak things, you can do so by setting &lt;code&gt;Backbone.ajax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d6b97243de5e28771b66425159f71760140193" translate="yes" xml:space="preserve">
          <source>If you want to work with a legacy web server that doesn't support Backbone's default REST/HTTP approach, you may choose to turn on &lt;code&gt;Backbone.emulateHTTP&lt;/code&gt;. Setting this option will fake &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; requests with a HTTP &lt;code&gt;POST&lt;/code&gt;, setting the &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; header with the true method. If &lt;code&gt;emulateJSON&lt;/code&gt; is also on, the true method will be passed as an additional &lt;code&gt;_method&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eed7d3f718be1b577f45772b6153c8d4436b66" translate="yes" xml:space="preserve">
          <source>If you'd like to apply a Backbone view to a different DOM element, use &lt;b&gt;setElement&lt;/b&gt;, which will also create the cached &lt;code&gt;$el&lt;/code&gt; reference and move the view's delegated events from the old element to the new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bddb4d3c7571d4012fe2ab1d3104f1dd0a3085" translate="yes" xml:space="preserve">
          <source>If you're working with a Rails backend that has a version prior to 3.1, you'll notice that its default &lt;code&gt;to_json&lt;/code&gt; implementation includes a model's attributes under a namespace. To disable this behavior for seamless Backbone integration, set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc3abbb2ab9dba4f23bdfda90d7d6d70a8e61c1" translate="yes" xml:space="preserve">
          <source>If you're working with a legacy web server that can't handle requests encoded as &lt;code&gt;application/json&lt;/code&gt;, setting &lt;code&gt;Backbone.emulateJSON = true;&lt;/code&gt; will cause the JSON to be serialized under a &lt;code&gt;model&lt;/code&gt; parameter, and the request to be made with a &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; MIME type, as if from an HTML form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2920ea2fcffe54127bb59dd4af9178a37891b64a" translate="yes" xml:space="preserve">
          <source>If your application is not being served from the root url &lt;code&gt;/&lt;/code&gt; of your domain, be sure to tell History where the root really is, as an option: &lt;code&gt;Backbone.history.start({pushState: true, root: &quot;/public/search/&quot;})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602e045b1c8cbdb70a248efe718870519885374e" translate="yes" xml:space="preserve">
          <source>In rare cases, if you're looking to get fancy, you may want to override &lt;b&gt;constructor&lt;/b&gt;, which allows you to replace the actual constructor function for your model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef423d5b0c43f62fe926d2014cd51703c243a9de" translate="yes" xml:space="preserve">
          <source>In the following example, notice how our overridden version of &lt;code&gt;Backbone.sync&lt;/code&gt; receives a &lt;code&gt;&quot;create&quot;&lt;/code&gt; request the first time the model is saved and an &lt;code&gt;&quot;update&quot;&lt;/code&gt; request the second time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96631d884972c0251cbcd554055e24c7f3c90998" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#Collection-where&quot;&gt;where&lt;/a&gt;, but directly returns only the first model in the collection that matches the passed &lt;b&gt;attributes&lt;/b&gt;. If no model matches returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026f19aee03482a9c8727ea372aa282cbb296e3d" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#Events-listenTo&quot;&gt;listenTo&lt;/a&gt;, but causes the bound callback to fire only once before being removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87a59cee37340535f529270c8b661f1f7c37ebc" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#Events-on&quot;&gt;on&lt;/a&gt;, but causes the bound callback to fire only once before being removed. Handy for saying &quot;the next time that X happens, do this&quot;. When multiple events are passed in using the space separated syntax, the event will fire once for every event you passed in, not once for a combination of all events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5ad21b4ae2ad2b6fa733f61cebba0c2ec4b216" translate="yes" xml:space="preserve">
          <source>Like an array, a Collection maintains a &lt;code&gt;length&lt;/code&gt; property, counting the number of models it contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c282426994a10bf58976f64c5f3137e805ac99" translate="yes" xml:space="preserve">
          <source>Manually create a route for the router, The &lt;code&gt;route&lt;/code&gt; argument may be a &lt;a href=&quot;#Router-routes&quot;&gt;routing string&lt;/a&gt; or regular expression. Each matching capture from the route or regular expression will be passed as an argument to the callback. The &lt;code&gt;name&lt;/code&gt; argument will be triggered as a &lt;code&gt;&quot;route:name&quot;&lt;/code&gt; event whenever the route is matched. If the &lt;code&gt;callback&lt;/code&gt; argument is omitted &lt;code&gt;router[name]&lt;/code&gt; will be used instead. Routes added later may override previously declared routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d5e84ecc09a818a14227f2825766f02cff0556" translate="yes" xml:space="preserve">
          <source>Merges the model's state with attributes fetched from the server by delegating to &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt;. Returns a &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/#jqXHR&quot;&gt;jqXHR&lt;/a&gt;. Useful if the model has never been populated with data, or if you'd like to ensure that you have the latest server state. Triggers a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event if the server's state differs from the current attributes. &lt;code&gt;fetch&lt;/code&gt; accepts &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; callbacks in the options hash, which are both passed &lt;code&gt;(model, response, options)&lt;/code&gt; as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="6619faf547d1f9d5b79a151d77d57eebc5992abb" translate="yes" xml:space="preserve">
          <source>Most methods can take an object or string to support model-attribute-style predicates or a function that receives the model instance as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce93f95463310388e48780d16759f230d8532f62" translate="yes" xml:space="preserve">
          <source>Normally, you won't need to define this. Note that &lt;code&gt;urlRoot&lt;/code&gt; may also be a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6584e7cd8e89229a9f0504b922b0331f5aff75" translate="yes" xml:space="preserve">
          <source>Note how even though all of the chapters in this example are added backwards, they come out in the proper order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816e7ae21520ede3ed4a6c3090f85db72bcbe5be" translate="yes" xml:space="preserve">
          <source>Note that &lt;b&gt;fetch&lt;/b&gt; should not be used to populate collections on page load &amp;mdash; all models needed at load time should already be &lt;a href=&quot;#FAQ-bootstrap&quot;&gt;bootstrapped&lt;/a&gt; in to place. &lt;b&gt;fetch&lt;/b&gt; is intended for lazily-loading models for interfaces that are not needed immediately: for example, documents with collections of notes that may be toggled open and closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c6a870f1e53eb6cb70e10284f9fdcb2e3fc91e" translate="yes" xml:space="preserve">
          <source>Note that Backbone depends on the arity of your comparator function to determine between the two styles, so be careful if your comparator function is bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3413092fdb7ce0b3107b5f981c64b4a1fccdb431" translate="yes" xml:space="preserve">
          <source>Note that adding the same model (a model with the same &lt;code&gt;id&lt;/code&gt;) to a collection more than once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce281522ff03df01c38d9e59466a4310402ab9f" translate="yes" xml:space="preserve">
          <source>Note that calling &lt;code&gt;model.off()&lt;/code&gt;, for example, will indeed remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec678c097379ca56a0d570fb2f6bae117a9f2da" translate="yes" xml:space="preserve">
          <source>Note that this method, and the following change-related ones, are only useful during the course of a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e9263ffa2edc9fa99b8f861d7c99207ce48a6d" translate="yes" xml:space="preserve">
          <source>One more tip for integrating Rails versions prior to 3.1 is to disable the default namespacing for &lt;code&gt;to_json&lt;/code&gt; calls on models by setting &lt;code&gt;ActiveRecord::Base.include_root_in_json = false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8143de0ef05e69ac6dfa28cd339ef9567e6bf39" translate="yes" xml:space="preserve">
          <source>Override this method to return the value the collection will use to identify a model given its attributes. Useful for combining models from multiple tables with different &lt;a href=&quot;#Model-idAttribute&quot;&gt;&lt;code&gt;idAttribute&lt;/code&gt;&lt;/a&gt; values into a single collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9038d49406ee1feb64f56b6cc726ade0c9f1008" translate="yes" xml:space="preserve">
          <source>Override this property to specify the model class that the collection contains. If defined, you can pass raw attributes objects (and arrays) and options to &lt;a href=&quot;#Collection-add&quot;&gt;add&lt;/a&gt;, &lt;a href=&quot;#Collection-create&quot;&gt;create&lt;/a&gt;, and &lt;a href=&quot;#Collection-reset&quot;&gt;reset&lt;/a&gt;, and the attributes will be converted into a model of the proper type using the provided options, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdc86f276e3613a968cc46e7ac9ba1f013344b5" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;models&lt;/code&gt; to create an empty Collection with &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd7c8496572e37807bc0291861f2155e655d01a" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;models&lt;/code&gt; to empty your Collection with &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9156401acb2ac2777e197dc18aae6cc73fecc29" translate="yes" xml:space="preserve">
          <source>Please use &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt; to update the &lt;b&gt;attributes&lt;/b&gt; instead of modifying them directly. If you'd like to retrieve and munge a copy of the model's attributes, use &lt;code&gt;_.clone(model.attributes)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed705dd908499e574615c02606b12fb9884af6d" translate="yes" xml:space="preserve">
          <source>Pluck an attribute from each model in the collection. Equivalent to calling &lt;code&gt;map&lt;/code&gt; and returning a single attribute from the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab373aec274c5f7fae526cc7fce4d2f24b367209" translate="yes" xml:space="preserve">
          <source>Properties like &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;, and &lt;code&gt;events&lt;/code&gt; may also be defined as a function, if you want to wait to define them until runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816f784694fbdde7cd27d918dc1ee314aadb163d" translate="yes" xml:space="preserve">
          <source>Raw access to the JavaScript array of models inside of the collection. Usually you'll want to use &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;at&lt;/code&gt;, or the &lt;b&gt;Underscore methods&lt;/b&gt; to access model objects, but occasionally a direct reference to the array is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311dc760d0ab9f23e6c1e12c1355ffeba23eb937" translate="yes" xml:space="preserve">
          <source>Remember that in JavaScript, objects are passed by reference, so if you include an object as a default value, it will be shared among all instances. Instead, define &lt;b&gt;defaults&lt;/b&gt; as a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30204688fc436f8770132b7ddc4e90f8a9eb9f5c" translate="yes" xml:space="preserve">
          <source>Remove a model (or an array of models) from the collection, and return them. Each model can be a Model instance, an &lt;code&gt;id&lt;/code&gt; string or a JS object, any value acceptable as the &lt;code&gt;id&lt;/code&gt; argument of &lt;a href=&quot;#Collection-get&quot;&gt;&lt;code&gt;collection.get&lt;/code&gt;&lt;/a&gt;. Fires a &lt;code&gt;&quot;remove&quot;&lt;/code&gt; event for each model, and a single &lt;code&gt;&quot;update&quot;&lt;/code&gt; event afterwards, unless &lt;code&gt;{silent: true}&lt;/code&gt; is passed. The model's index before removal is available to listeners as &lt;code&gt;options.index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf6255bec00d6fe5995dbbcea5446d5c3b3e4ba" translate="yes" xml:space="preserve">
          <source>Remove a previously-bound &lt;b&gt;callback&lt;/b&gt; function from an object. If no &lt;b&gt;context&lt;/b&gt; is specified, all of the versions of the callback with different contexts will be removed. If no callback is specified, all callbacks for the &lt;b&gt;event&lt;/b&gt; will be removed. If no event is specified, callbacks for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a569c3229d18da8f36f3489c6488cbc2aec99a19" translate="yes" xml:space="preserve">
          <source>Remove an attribute by deleting it from the internal attributes hash. Fires a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event unless &lt;code&gt;silent&lt;/code&gt; is passed as an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64ab9fae815d0fe93f48dd16e746b9286db7bb8" translate="yes" xml:space="preserve">
          <source>Remove and return the first model from a collection. Takes the same options as &lt;a href=&quot;#Collection-remove&quot;&gt;remove&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b248f8cb1097c49aacf5650ebf1d0a9f1b63f68" translate="yes" xml:space="preserve">
          <source>Remove and return the last model from a collection. Takes the same options as &lt;a href=&quot;#Collection-remove&quot;&gt;remove&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cb2c4bc32a2b3820d238965143e6e745d3c41c" translate="yes" xml:space="preserve">
          <source>Removes a view and its &lt;code&gt;el&lt;/code&gt; from the DOM, and calls &lt;a href=&quot;#Events-stopListening&quot;&gt;stopListening&lt;/a&gt; to remove any bound events that the view has &lt;a href=&quot;#Events-listenTo&quot;&gt;listenTo&lt;/a&gt;'d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8775ff393939cd75c2940c3434ecd42a4a5a424" translate="yes" xml:space="preserve">
          <source>Removes all attributes from the model, including the &lt;code&gt;id&lt;/code&gt; attribute. Fires a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event unless &lt;code&gt;silent&lt;/code&gt; is passed as an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac569c5305267060e1b190efcb91e8f94b9f4d31" translate="yes" xml:space="preserve">
          <source>Removes all of the view's delegated events. Useful if you want to disable or remove a view from the DOM temporarily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9e9b02f15945ca47758775fb0613bddb57750c" translate="yes" xml:space="preserve">
          <source>Retrieve a hash of only the model's attributes that have changed since the last &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt;, or &lt;code&gt;false&lt;/code&gt; if there are none. Optionally, an external &lt;b&gt;attributes&lt;/b&gt; hash can be passed in, returning the attributes in that hash which differ from the model. This can be used to figure out which portions of a view should be updated, or what calls need to be made to sync the changes to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5074ead64a4773b41e923a44e517850770e9ef58" translate="yes" xml:space="preserve">
          <source>Return a copy of the model's previous attributes. Useful for getting a diff between versions of a model, or getting back to a valid state after an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618dd2038d93f03bacbe7d505dfe8e187c397cd1" translate="yes" xml:space="preserve">
          <source>Return a shallow copy of the model's &lt;a href=&quot;#Model-attributes&quot;&gt;attributes&lt;/a&gt; for JSON stringification. This can be used for persistence, serialization, or for augmentation before being sent to the server. The name of this method is a bit confusing, as it doesn't actually return a JSON string &amp;mdash; but I'm afraid that it's the way that the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON_behavior&quot;&gt;JavaScript API for &lt;b&gt;JSON.stringify&lt;/b&gt;&lt;/a&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b487923587307710493adf2c8ddbe426018be07" translate="yes" xml:space="preserve">
          <source>Return a shallow copy of this collection's models, using the same options as native &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;Array#slice&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4a1393f2082721babb5488bb5a3c13af2898a1" translate="yes" xml:space="preserve">
          <source>Return an array containing the attributes hash of each model (via &lt;a href=&quot;#Model-toJSON&quot;&gt;toJSON&lt;/a&gt;) in the collection. This can be used to serialize and persist the collection as a whole. The name of this method is a bit confusing, because it conforms to &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON_behavior&quot;&gt;JavaScript's JSON API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0c0f3b00548ecea6a50221d56bdb2246e559f0" translate="yes" xml:space="preserve">
          <source>Return an array of all the models in a collection that match the passed &lt;b&gt;attributes&lt;/b&gt;. Useful for simple cases of &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206448343bca860c97677f5a5aa97c8790f0cbd8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the attribute is set to a non-null or non-undefined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1615682aed85aa5cdb46a0dbc065539c51c3c0" translate="yes" xml:space="preserve">
          <source>Returns a new instance of the collection with an identical list of models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586f2d59bbad1c21cfaddc2b51ede877cbc71661" translate="yes" xml:space="preserve">
          <source>Returns a new instance of the model with identical attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf65fe0726b7ee24fff8b1e8daeb002f133ac5f" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;Backbone&lt;/code&gt; object back to its original value. You can use the return value of &lt;code&gt;Backbone.noConflict()&lt;/code&gt; to keep a local reference to Backbone. Useful for embedding Backbone on third-party websites, where you don't want to clobber the existing Backbone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef9d14b97e329267f7e9f68d4deaae4958c4da9" translate="yes" xml:space="preserve">
          <source>Returns the relative URL where the model's resource would be located on the server. If your models are located somewhere else, override this method with the correct logic. Generates URLs of the form: &lt;code&gt;&quot;[collection.url]/[id]&quot;&lt;/code&gt; by default, but you may override by specifying an explicit &lt;code&gt;urlRoot&lt;/code&gt; if the model's collection shouldn't be taken into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="d22be1ea710ce48ea86a651888cfdffd235590f8" translate="yes" xml:space="preserve">
          <source>Run &lt;a href=&quot;#Model-validate&quot;&gt;validate&lt;/a&gt; to check the model state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3175b0ef9fa6cc8d79e846a306dafddeb5655e" translate="yes" xml:space="preserve">
          <source>Save a model to your database (or alternative persistence layer), by delegating to &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt;. Returns a &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/#jqXHR&quot;&gt;jqXHR&lt;/a&gt; if validation is successful and &lt;code&gt;false&lt;/code&gt; otherwise. The &lt;b&gt;attributes&lt;/b&gt; hash (as in &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt;) should contain the attributes you'd like to change &amp;mdash; keys that aren't mentioned won't be altered &amp;mdash; but, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6260ad4e35401a8d0831c03da9a826b4df6f51a" translate="yes" xml:space="preserve">
          <source>Set a hash of attributes (one or many) on the model. If any of the attributes change the model's state, a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event will be triggered on the model. Change events for specific attributes are also triggered, and you can bind to those as well, for example: &lt;code&gt;change:title&lt;/code&gt;, and &lt;code&gt;change:content&lt;/code&gt;. You may also pass individual keys and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e932ef6b4116846daef404608ab862a22efb10" translate="yes" xml:space="preserve">
          <source>Set the &lt;b&gt;url&lt;/b&gt; property (or function) on a collection to reference its location on the server. Models within the collection will use &lt;b&gt;url&lt;/b&gt; to construct URLs of their own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7634c3c28b410ca710ee26f8581bde5c5b0a916" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#Model-get&quot;&gt;get&lt;/a&gt;, but returns the HTML-escaped version of a model's attribute. If you're interpolating data from the model into HTML, using &lt;b&gt;escape&lt;/b&gt; to retrieve attributes will prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9984c7b593f45b6c3ce3051a605f389f07f0f5" translate="yes" xml:space="preserve">
          <source>Specify a &lt;code&gt;urlRoot&lt;/code&gt; if you're using a model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905f63092ff26517a7aa8083857b3c8af9707002" translate="yes" xml:space="preserve">
          <source>Sync</source>
          <target state="translated">Sync</target>
        </trans-unit>
        <trans-unit id="c469afbc6a61be8941dba92302888cde2fc8c8e0" translate="yes" xml:space="preserve">
          <source>Tell an &lt;b&gt;object&lt;/b&gt; to listen to a particular event on an &lt;b&gt;other&lt;/b&gt; object. The advantage of using this form, instead of &lt;code&gt;other.on(event, callback, object)&lt;/code&gt;, is that &lt;b&gt;listenTo&lt;/b&gt; allows the &lt;b&gt;object&lt;/b&gt; to keep track of the events, and they can be removed all at once later on. The &lt;b&gt;callback&lt;/b&gt; will always be called with &lt;b&gt;object&lt;/b&gt; as context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26303fcdf70dcf877ae0bdca9a3b915009f2ab2" translate="yes" xml:space="preserve">
          <source>Tell an &lt;b&gt;object&lt;/b&gt; to stop listening to events. Either call &lt;b&gt;stopListening&lt;/b&gt; with no arguments to have the &lt;b&gt;object&lt;/b&gt; remove all of its &lt;a href=&quot;#Events-listenTo&quot;&gt;registered&lt;/a&gt; callbacks ... or be more precise by telling it to remove just the events it's listening to on a specific object, or a specific event, or just a specific callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3bc429514d862e37bec18f4fbffeb1caff4dee" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;attributes&lt;/b&gt; property is the internal hash containing the model's state &amp;mdash; usually (but not necessarily) a form of the JSON object representing the model data on the server. It's often a straightforward serialization of a row from the database, but it could also be client-side computed state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5217d24647d81ada34e52c6ea75c61018e57d062" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;changed&lt;/b&gt; property is the internal hash containing all the attributes that have changed since its last &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt;. Please do not update &lt;b&gt;changed&lt;/b&gt; directly since its state is internally maintained by &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt;. A copy of &lt;b&gt;changed&lt;/b&gt; can be acquired from &lt;a href=&quot;#Model-changedAttributes&quot;&gt;changedAttributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eb75d7e4ab2760015f63bf9e384b701a171042" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;defaults&lt;/b&gt; hash (or function) can be used to specify the default attributes for your model. When creating an instance of the model, any unspecified attributes will be set to their default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ac7aa5d591a4c194b04c01cb14c8265ae7f66a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;events&lt;/b&gt; hash (or method) can be used to specify a set of DOM events that will be bound to methods on your View through &lt;a href=&quot;#View-delegateEvents&quot;&gt;delegateEvents&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b2b6e2fc663b0705ec1edbc029fd15764880e3" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;set&lt;/b&gt; method performs a &quot;smart&quot; update of the collection with the passed list of models. If a model in the list isn't yet in the collection it will be added; if the model is already in the collection its attributes will be merged; and if the collection contains any models that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c71cd1aed88db277990e9fd21081682933cc7f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;sync&lt;/b&gt; function may be overridden globally as &lt;code&gt;Backbone.sync&lt;/code&gt;, or at a finer-grained level, by adding a &lt;code&gt;sync&lt;/code&gt; function to a Backbone collection or to an individual model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ac000e408aafb78a0459b0c3724e71e7ee1862" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; property may also be defined as a function that returns an &lt;b&gt;events&lt;/b&gt; hash, to make it easier to programmatically define your events, as well as inherit them from parent views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96932a5496e6ec776b5284da2794cb2c2909674a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validate&lt;/code&gt; method receives the model attributes as well as any options passed to &lt;b&gt;isValid&lt;/b&gt;, if &lt;code&gt;validate&lt;/code&gt; returns an error an &lt;code&gt;&quot;invalid&quot;&lt;/code&gt; event is triggered, and the error is set on the model in the &lt;code&gt;validationError&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9f5fcbe324d7a41d63d12de12c2a7928893160" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;b&gt;fetch&lt;/b&gt; can be customized by using the available &lt;a href=&quot;#Collection-set&quot;&gt;set&lt;/a&gt; options. For example, to fetch a collection, getting an &lt;code&gt;&quot;add&quot;&lt;/code&gt; event for every new model, and a &lt;code&gt;&quot;change&quot;&lt;/code&gt; event for every changed existing model, without removing anything: &lt;code&gt;collection.fetch({remove: false})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0baf796a1b28106e12d08141b9ef37e40353f8" translate="yes" xml:space="preserve">
          <source>The default &lt;b&gt;sync&lt;/b&gt; handler maps CRUD to REST like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa5d3bafe75c4094a75e3321eaa0ca92ac661dc" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;b&gt;render&lt;/b&gt; is a no-op. Override this function with your code that renders the view template from model data, and updates &lt;code&gt;this.el&lt;/code&gt; with the new HTML. A good convention is to &lt;code&gt;return this&lt;/code&gt; at the end of &lt;b&gt;render&lt;/b&gt; to enable chained calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf95551d5ecd5c5845ac3f240c4422014b23c285" translate="yes" xml:space="preserve">
          <source>The following is a contrived example, but it demonstrates defining a model with a custom method, setting an attribute, and firing an event keyed to changes in that specific attribute. After running this code once, &lt;code&gt;sidebar&lt;/code&gt; will be available in your browser's console, so you can play around with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3425c803b6ce6e981d1fcacec99fe7c3a77665a3" translate="yes" xml:space="preserve">
          <source>The method signature of &lt;b&gt;Backbone.sync&lt;/b&gt; is &lt;code&gt;sync(method, model, [options])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b16c01bef60d6767e0aaa20a4f5e3825aa44ca3" translate="yes" xml:space="preserve">
          <source>The routes hash maps URLs with parameters to functions on your router (or just direct function definitions, if you prefer), similar to the &lt;a href=&quot;#View&quot;&gt;View&lt;/a&gt;'s &lt;a href=&quot;#View-delegateEvents&quot;&gt;events hash&lt;/a&gt;. Routes can contain parameter parts, &lt;code&gt;:param&lt;/code&gt;, which match a single URL component between slashes; and splat parts &lt;code&gt;*splat&lt;/code&gt;, which can match any number of URL components. Part of a route can be made optional by surrounding it in parentheses &lt;code&gt;(/:optional)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fbc750bff856a8b21098d6f85969bb94cb4375" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;a href=&quot;#Model-validate&quot;&gt;validate&lt;/a&gt; during the last failed validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8cf2897aa54b61916aa04c0df6b0f2e016b0b6" translate="yes" xml:space="preserve">
          <source>There are several special options that, if passed, will be attached directly to the view: &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;collection&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;events&lt;/code&gt;. If the view defines an &lt;b&gt;initialize&lt;/b&gt; function, it will be called when the view is first created. If you'd like to create a view that references an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c862c33561e331040fc96b6b75310fbd3c1b2f" translate="yes" xml:space="preserve">
          <source>This method is called internally within the router, whenever a route matches and its corresponding &lt;b&gt;callback&lt;/b&gt; is about to be executed. Return &lt;b&gt;false&lt;/b&gt; from execute to cancel the current transition. Override it to perform custom parsing or wrapping of your routes, for example, to parse query strings before handing them to your route callback, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f5b72fc5fdc7368766a8acb177d44e811851ba" translate="yes" xml:space="preserve">
          <source>This method is left undefined and you're encouraged to override it with any custom validation logic you have that can be performed in JavaScript. If the attributes are valid, don't return anything from &lt;b&gt;validate&lt;/b&gt;; if they are invalid return an error of your choosing. It can be as simple as a string error message to be displayed, or a complete error object that describes the error programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112b98800649e089688cf56552b754e654730e54" translate="yes" xml:space="preserve">
          <source>To create a &lt;b&gt;Collection&lt;/b&gt; class of your own, extend &lt;b&gt;Backbone.Collection&lt;/b&gt;, providing instance &lt;b&gt;properties&lt;/b&gt;, as well as optional &lt;b&gt;classProperties&lt;/b&gt; to be attached directly to the collection's constructor function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b178b0ffc074c90c4d702ce68eef1f8adf23f08" translate="yes" xml:space="preserve">
          <source>To create a &lt;b&gt;Model&lt;/b&gt; class of your own, you extend &lt;b&gt;Backbone.Model&lt;/b&gt; and provide instance &lt;b&gt;properties&lt;/b&gt;, as well as optional &lt;b&gt;classProperties&lt;/b&gt; to be attached directly to the constructor function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe99748d555e99422adcc833c046e9afc8aa91f" translate="yes" xml:space="preserve">
          <source>To indicate that you'd like to use HTML5 &lt;code&gt;pushState&lt;/code&gt; support in your application, use &lt;code&gt;Backbone.history.start({pushState: true})&lt;/code&gt;. If you'd like to use &lt;code&gt;pushState&lt;/code&gt;, but have browsers that don't support it natively use full page refreshes instead, you can add &lt;code&gt;{hashChange: false}&lt;/code&gt; to the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970c5f5c20f2ca9384bb122c759451c3ef8a8349" translate="yes" xml:space="preserve">
          <source>To supply a &lt;b&gt;context&lt;/b&gt; value for &lt;code&gt;this&lt;/code&gt; when the callback is invoked, pass the optional last argument: &lt;code&gt;model.on('change', this.render, this)&lt;/code&gt; or &lt;code&gt;model.on({change: this.render}, this)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454a5e24e687c97d19a7cb33028728b1c34b56b5" translate="yes" xml:space="preserve">
          <source>Trailing slashes are treated as part of the URL, and (correctly) treated as a unique route when accessed. &lt;code&gt;docs&lt;/code&gt; and &lt;code&gt;docs/&lt;/code&gt; will fire different callbacks. If you can't avoid generating both types of URLs, you can define a &lt;code&gt;&quot;docs(/)&quot;&lt;/code&gt; matcher to capture both cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7166550bb92fb763fa72fdc43209034e61f3ae81" translate="yes" xml:space="preserve">
          <source>Trigger callbacks for the given &lt;b&gt;event&lt;/b&gt;, or space-delimited list of events. Subsequent arguments to &lt;b&gt;trigger&lt;/b&gt; will be passed along to the event callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b495655e4c590d1d4d31ca2fe370ae5aef5e33" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt; to persist the state of a collection to the server. Can be overridden for custom behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed1a3cb224b7d3b4578fab6788a5fba69de001b" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#Sync&quot;&gt;Backbone.sync&lt;/a&gt; to persist the state of a model to the server. Can be overridden for custom behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8839637c6e3824322b1889cdc536aaaf67fd8549" translate="yes" xml:space="preserve">
          <source>Uses jQuery's &lt;code&gt;on&lt;/code&gt; function to provide declarative callbacks for DOM events within a view. If an &lt;b&gt;events&lt;/b&gt; hash is not passed directly, uses &lt;code&gt;this.events&lt;/code&gt; as the source. Events are written in the format &lt;code&gt;{&quot;event selector&quot;: &quot;callback&quot;}&lt;/code&gt;. The callback may be either the name of a method on the view, or a direct function body. Omitting the &lt;code&gt;selector&lt;/code&gt; causes the event to be bound to the view's root element (&lt;code&gt;this.el&lt;/code&gt;). By default, &lt;code&gt;delegateEvents&lt;/code&gt; is called within the View's constructor for you, so if you have a simple &lt;code&gt;events&lt;/code&gt; hash, all of your DOM events will always already be connected, and you will never have to call this function yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612a1664886451f505699ad860215ed2925e7156" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;delegateEvents&lt;/b&gt; provides a number of advantages over manually using jQuery to bind events to child elements during &lt;a href=&quot;#View-render&quot;&gt;render&lt;/a&gt;. All attached callbacks are bound to the view before being handed off to jQuery, so when the callbacks are invoked, &lt;code&gt;this&lt;/code&gt; continues to refer to the view object. When &lt;b&gt;delegateEvents&lt;/b&gt; is run again, perhaps with a different &lt;code&gt;events&lt;/code&gt; hash, all callbacks are removed and delegated afresh &amp;mdash; useful for views which need to behave differently when in different modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89189507b2a074e98b2e877227343a6e1f27b3ab" translate="yes" xml:space="preserve">
          <source>Utility</source>
          <target state="translated">Utility</target>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="translated">View</target>
        </trans-unit>
        <trans-unit id="f46d76aa7762b52aa94bf3d4f283cd03112a0fe4" translate="yes" xml:space="preserve">
          <source>Web applications often provide linkable, bookmarkable, shareable URLs for important locations in the app. Until recently, hash fragments (&lt;code&gt;#page&lt;/code&gt;) were used to provide these permalinks, but with the arrival of the History API, it's now possible to use standard URLs (&lt;code&gt;/page&lt;/code&gt;). &lt;b&gt;Backbone.Router&lt;/b&gt; provides methods for routing client-side pages, and connecting them to actions and events. For browsers which don't yet support the History API, the Router handles graceful fallback and transparent translation to the fragment version of the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1dc09225f02e34deab11363b7b87bf38c153d4" translate="yes" xml:space="preserve">
          <source>Whatever templating strategy you end up with, it's nice if you</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7137ae29b593ac4c5b9034c600fc5bda86da13" translate="yes" xml:space="preserve">
          <source>When all of your &lt;a href=&quot;#Router&quot;&gt;Routers&lt;/a&gt; have been created, and all of the routes are set up properly, call &lt;code&gt;Backbone.history.start()&lt;/code&gt; to begin monitoring &lt;code&gt;hashchange&lt;/code&gt; events, and dispatching routes. Subsequent calls to &lt;code&gt;Backbone.history.start()&lt;/code&gt; will throw an error, and &lt;code&gt;Backbone.History.started&lt;/code&gt; is a boolean value indicating whether it has already been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae02b1022f2d07a5c8c936ea0bc8e77d35d9f1d6" translate="yes" xml:space="preserve">
          <source>When called, if a route succeeds with a match for the current URL, &lt;code&gt;Backbone.history.start()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. If no defined route matches the current URL, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e21cbdf11abc08bbe2a22907830f29d88d45e9b" translate="yes" xml:space="preserve">
          <source>When creating a Collection, you may choose to pass in the initial array of &lt;b&gt;models&lt;/b&gt;. The collection's &lt;a href=&quot;#Collection-comparator&quot;&gt;comparator&lt;/a&gt; may be included as an option. Passing &lt;code&gt;false&lt;/code&gt; as the comparator option will prevent sorting. If you define an &lt;b&gt;initialize&lt;/b&gt; function, it will be invoked when the collection is created. There are a couple of options that, if provided, are attached to the collection directly: &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;comparator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e7711025337d2fb9a868da39c0a3cd6012187c" translate="yes" xml:space="preserve">
          <source>When creating a new router, you may pass its &lt;a href=&quot;#Router-routes&quot;&gt;routes&lt;/a&gt; hash directly as an option, if you choose. All &lt;code&gt;options&lt;/code&gt; will also be passed to your &lt;code&gt;initialize&lt;/code&gt; function, if defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0e50281e3472f82257de0c21b183dd2779493d" translate="yes" xml:space="preserve">
          <source>When creating an instance of a model, you can pass in the initial values of the &lt;b&gt;attributes&lt;/b&gt;, which will be &lt;a href=&quot;#Model-set&quot;&gt;set&lt;/a&gt; on the model. If you define an &lt;b&gt;initialize&lt;/b&gt; function, it will be invoked when the model is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4111a9df7aed2cc1d25bc219fd09fa7109b2b52" translate="yes" xml:space="preserve">
          <source>When the visitor presses the back button, or enters a URL, and a particular route is matched, the name of the action will be fired as an &lt;a href=&quot;#Events&quot;&gt;event&lt;/a&gt;, so that other objects can listen to the router, and be notified. In the following example, visiting &lt;code&gt;#help/uploading&lt;/code&gt; will fire a &lt;code&gt;route:help&lt;/code&gt; event from the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858913b6e3181b1493e1581a8f43e94f280c1104" translate="yes" xml:space="preserve">
          <source>Whenever a model or collection begins a &lt;b&gt;sync&lt;/b&gt; with the server, a &lt;code&gt;&quot;request&quot;&lt;/code&gt; event is emitted. If the request completes successfully you'll get a &lt;code&gt;&quot;sync&quot;&lt;/code&gt; event, and an &lt;code&gt;&quot;error&quot;&lt;/code&gt; event if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74511392439881b23d325427c46d38ea0808811b" translate="yes" xml:space="preserve">
          <source>Whenever you reach a point in your application that you'd like to save as a URL, call &lt;b&gt;navigate&lt;/b&gt; in order to update the URL. If you also wish to call the route function, set the &lt;b&gt;trigger&lt;/b&gt; option to &lt;code&gt;true&lt;/code&gt;. To update the URL without creating an entry in the browser's history, set the &lt;b&gt;replace&lt;/b&gt; option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1d2196ae4cfc31c7f1a87cbf21864d0d25fd75" translate="yes" xml:space="preserve">
          <source>While templating for a view isn't a function provided directly by Backbone, it's often a nice convention to define a &lt;b&gt;template&lt;/b&gt; function on your views. In this way, when rendering your view, you have convenient access to instance data. For example, using Underscore templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf10440c149bf219181789472ead538906a3b92" translate="yes" xml:space="preserve">
          <source>With the default implementation, when &lt;b&gt;Backbone.sync&lt;/b&gt; sends up a request to save a model, its attributes will be passed, serialized as JSON, and sent in the HTTP body with content-type &lt;code&gt;application/json&lt;/code&gt;. When returning a JSON response, send down the attributes of the model that have been changed by the server, and need to be updated on the client. When responding to a &lt;code&gt;&quot;read&quot;&lt;/code&gt; request from a collection (&lt;a href=&quot;#Collection-fetch&quot;&gt;Collection#fetch&lt;/a&gt;), send down an array of model attribute objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dd6eae239fba2dba0734d91bf3a607b5640259" translate="yes" xml:space="preserve">
          <source>add event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="5a4ffb943e9c3e065c2d06778f9b66f296c8f4c7" translate="yes" xml:space="preserve">
          <source>all event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bc90edb138e8f4c8ffbf2dafc9da25a28b7308" translate="yes" xml:space="preserve">
          <source>already</source>
          <target state="translated">already</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="624cd1f425ffb0afe6e743d09639a61c5ac6e5af" translate="yes" xml:space="preserve">
          <source>aren't</source>
          <target state="translated">aren't</target>
        </trans-unit>
        <trans-unit id="56e8b2977b7bfce1a127023a511363d8711b91a2" translate="yes" xml:space="preserve">
          <source>attributes to be sent to the server, call &lt;code&gt;model.save(attrs, {patch: true})&lt;/code&gt;. You'll get an HTTP &lt;code&gt;PATCH&lt;/code&gt; request to the server with just the passed-in attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf64e447b84b497b2491b7af072a229eefe2651" translate="yes" xml:space="preserve">
          <source>chain</source>
          <target state="translated">chain</target>
        </trans-unit>
        <trans-unit id="5428e1cde55353c79c8599be5c296f3356bf321a" translate="yes" xml:space="preserve">
          <source>change event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684882bf986f803263ffb902a72ad009a8937b32" translate="yes" xml:space="preserve">
          <source>change:[attribute] event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c6c57bedf4305ef41249c1794760b5cb8fad17" translate="yes" xml:space="preserve">
          <source>changed</source>
          <target state="translated">changed</target>
        </trans-unit>
        <trans-unit id="b3e0b17eee97448da25d7e95d0320a9cb1f62f53" translate="yes" xml:space="preserve">
          <source>collection.add</source>
          <target state="translated">collection.add</target>
        </trans-unit>
        <trans-unit id="31aabf6f06c92ff42bdf8fa6490eee921e94f9fe" translate="yes" xml:space="preserve">
          <source>collection.at</source>
          <target state="translated">collection.at</target>
        </trans-unit>
        <trans-unit id="9561948719b901cdad61fc7ac5ef77bbf8912a8d" translate="yes" xml:space="preserve">
          <source>collection.chain</source>
          <target state="translated">collection.chain</target>
        </trans-unit>
        <trans-unit id="a8dfa57ba0f81b74c9c974c56937d9f719bfd13c" translate="yes" xml:space="preserve">
          <source>collection.clone</source>
          <target state="translated">collection.clone</target>
        </trans-unit>
        <trans-unit id="2bfdacf8b96061853f25d3c62fe444ec993badc7" translate="yes" xml:space="preserve">
          <source>collection.comparator</source>
          <target state="translated">collection.comparator</target>
        </trans-unit>
        <trans-unit id="073a5dea7df67666360991b4d38f2b64767b7edc" translate="yes" xml:space="preserve">
          <source>collection.contains</source>
          <target state="translated">collection.contains</target>
        </trans-unit>
        <trans-unit id="0f34f40849627999fc8594e7b1656e329d43e97d" translate="yes" xml:space="preserve">
          <source>collection.countBy</source>
          <target state="translated">collection.countBy</target>
        </trans-unit>
        <trans-unit id="fc328a3c9ac189fc91dcfffac1abf5dec8949bee" translate="yes" xml:space="preserve">
          <source>collection.create</source>
          <target state="translated">collection.create</target>
        </trans-unit>
        <trans-unit id="7a358e56a34a55f8a8a9aee98c2907a695756158" translate="yes" xml:space="preserve">
          <source>collection.difference</source>
          <target state="translated">collection.difference</target>
        </trans-unit>
        <trans-unit id="109e0f19fabe5c679242aad88f5424a27d078f30" translate="yes" xml:space="preserve">
          <source>collection.every</source>
          <target state="translated">collection.every</target>
        </trans-unit>
        <trans-unit id="a5f294e9e6d70dc07897ac91a1ad883891c5f9c3" translate="yes" xml:space="preserve">
          <source>collection.fetch</source>
          <target state="translated">collection.fetch</target>
        </trans-unit>
        <trans-unit id="0be8929f82c2e82d6624cc34824940891d9062bb" translate="yes" xml:space="preserve">
          <source>collection.filter</source>
          <target state="translated">collection.filter</target>
        </trans-unit>
        <trans-unit id="432e5d3b6096d27776dd8465a45f5799911e2ffa" translate="yes" xml:space="preserve">
          <source>collection.find</source>
          <target state="translated">collection.find</target>
        </trans-unit>
        <trans-unit id="ae81aa8d4de5e9b8099784923b7dc8c9bc5cb83e" translate="yes" xml:space="preserve">
          <source>collection.findIndex</source>
          <target state="translated">collection.findIndex</target>
        </trans-unit>
        <trans-unit id="51b4bb3dd4d7b722bf84b949b844c06314ddd67f" translate="yes" xml:space="preserve">
          <source>collection.findLastIndex</source>
          <target state="translated">collection.findLastIndex</target>
        </trans-unit>
        <trans-unit id="13c9002b38f36bf7d3b3f5c2d04f440e835467bf" translate="yes" xml:space="preserve">
          <source>collection.findWhere</source>
          <target state="translated">collection.findWhere</target>
        </trans-unit>
        <trans-unit id="a595f31fbf1697c7dcd5fd2ef8fc2028972fd724" translate="yes" xml:space="preserve">
          <source>collection.first</source>
          <target state="translated">collection.first</target>
        </trans-unit>
        <trans-unit id="0eeef7ce129477d287568b589f73375bf714090a" translate="yes" xml:space="preserve">
          <source>collection.forEach</source>
          <target state="translated">collection.forEach</target>
        </trans-unit>
        <trans-unit id="8d00962442d74c51960b3b1ac8c6e901ba335f3c" translate="yes" xml:space="preserve">
          <source>collection.get</source>
          <target state="translated">collection.get</target>
        </trans-unit>
        <trans-unit id="17e97e06e3341e842544a0fcebeef05c05383b34" translate="yes" xml:space="preserve">
          <source>collection.groupBy</source>
          <target state="translated">collection.groupBy</target>
        </trans-unit>
        <trans-unit id="50d6043934efe1822ac2b4085063c5d7561292cf" translate="yes" xml:space="preserve">
          <source>collection.indexBy</source>
          <target state="translated">collection.indexBy</target>
        </trans-unit>
        <trans-unit id="9cd60cd72da2a83a8b5225d4cc343ca243ce525b" translate="yes" xml:space="preserve">
          <source>collection.indexOf</source>
          <target state="translated">collection.indexOf</target>
        </trans-unit>
        <trans-unit id="d5dd19c06a03847eefc8a0997600a2cd55b89e8d" translate="yes" xml:space="preserve">
          <source>collection.initial</source>
          <target state="translated">collection.initial</target>
        </trans-unit>
        <trans-unit id="be88c7883f856dc008259775845c8db77a80b4b9" translate="yes" xml:space="preserve">
          <source>collection.invoke</source>
          <target state="translated">collection.invoke</target>
        </trans-unit>
        <trans-unit id="bcbfa04a4c35f0369a56bf4ff9cca46d6ec8b78a" translate="yes" xml:space="preserve">
          <source>collection.isEmpty</source>
          <target state="translated">collection.isEmpty</target>
        </trans-unit>
        <trans-unit id="ee8bc2186f5d2346da10bb2c293e9484b8fecb3b" translate="yes" xml:space="preserve">
          <source>collection.last</source>
          <target state="translated">collection.last</target>
        </trans-unit>
        <trans-unit id="6a15a3ccd95158fc62974663cd3e97012c0e245f" translate="yes" xml:space="preserve">
          <source>collection.lastIndexOf</source>
          <target state="translated">collection.lastIndexOf</target>
        </trans-unit>
        <trans-unit id="9acb17a0c3f63a2b24163624e100dfd1d9b56836" translate="yes" xml:space="preserve">
          <source>collection.length</source>
          <target state="translated">collection.length</target>
        </trans-unit>
        <trans-unit id="8e84237beea9a853d7a1df3689fb67a537e63c17" translate="yes" xml:space="preserve">
          <source>collection.map</source>
          <target state="translated">collection.map</target>
        </trans-unit>
        <trans-unit id="240fd23ef9fa0436cb23366b47fd6ededea79edb" translate="yes" xml:space="preserve">
          <source>collection.max</source>
          <target state="translated">collection.max</target>
        </trans-unit>
        <trans-unit id="014fbb2d5c840b5db048c316d8ef2fc7b2e93aea" translate="yes" xml:space="preserve">
          <source>collection.min</source>
          <target state="translated">collection.min</target>
        </trans-unit>
        <trans-unit id="b936d5d785c01de7d3be632abda45954686dc60d" translate="yes" xml:space="preserve">
          <source>collection.mixin</source>
          <target state="translated">collection.mixin</target>
        </trans-unit>
        <trans-unit id="b97617226cefc5b1f3d439dd3c55f556f36da7cd" translate="yes" xml:space="preserve">
          <source>collection.model</source>
          <target state="translated">collection.model</target>
        </trans-unit>
        <trans-unit id="e427dbc7e9cb528db69696b912cade4b021cc448" translate="yes" xml:space="preserve">
          <source>collection.modelId</source>
          <target state="translated">collection.modelId</target>
        </trans-unit>
        <trans-unit id="1665e5f0349868d8a7b1c82a9ebe3f813a2bd853" translate="yes" xml:space="preserve">
          <source>collection.models</source>
          <target state="translated">collection.models</target>
        </trans-unit>
        <trans-unit id="8e2a7b20fff4a02c07cb3fed18ca26b674c20a01" translate="yes" xml:space="preserve">
          <source>collection.parse</source>
          <target state="translated">collection.parse</target>
        </trans-unit>
        <trans-unit id="0b523b4ad65386c8974c9f69a5d4ef123ed602be" translate="yes" xml:space="preserve">
          <source>collection.partition</source>
          <target state="translated">collection.partition</target>
        </trans-unit>
        <trans-unit id="27fc6108f48c8e5eba02e5f49b27c7f7d9540045" translate="yes" xml:space="preserve">
          <source>collection.pluck</source>
          <target state="translated">collection.pluck</target>
        </trans-unit>
        <trans-unit id="2732f5d4c35e5a5196eaa544723c24146ce52623" translate="yes" xml:space="preserve">
          <source>collection.pop</source>
          <target state="translated">collection.pop</target>
        </trans-unit>
        <trans-unit id="6a7338993d65d30ce9e779efcad4f172096d6265" translate="yes" xml:space="preserve">
          <source>collection.preinitialize</source>
          <target state="translated">collection.preinitialize</target>
        </trans-unit>
        <trans-unit id="6925b3f09144223d5bebbadb00c30b6c7a7aec81" translate="yes" xml:space="preserve">
          <source>collection.push</source>
          <target state="translated">collection.push</target>
        </trans-unit>
        <trans-unit id="f9d0a87cdbfb4872fb6f48e07a4b6fe1f415e334" translate="yes" xml:space="preserve">
          <source>collection.reduce</source>
          <target state="translated">collection.reduce</target>
        </trans-unit>
        <trans-unit id="b90ea78fc26c8238c9bb40ca1d0da99135973660" translate="yes" xml:space="preserve">
          <source>collection.reduceRight</source>
          <target state="translated">collection.reduceRight</target>
        </trans-unit>
        <trans-unit id="6d7f52880f0b76fc98e2504b439bad7680092d3f" translate="yes" xml:space="preserve">
          <source>collection.reject</source>
          <target state="translated">collection.reject</target>
        </trans-unit>
        <trans-unit id="3bf7c9a2a62bb5b1239446698cdcbd2a9f7a2254" translate="yes" xml:space="preserve">
          <source>collection.remove</source>
          <target state="translated">collection.remove</target>
        </trans-unit>
        <trans-unit id="2f7a64642919e0f350c690b5b72e9b16d743f024" translate="yes" xml:space="preserve">
          <source>collection.reset</source>
          <target state="translated">collection.reset</target>
        </trans-unit>
        <trans-unit id="48ed52022025a1f92f36aa393cf96f8513e12a3b" translate="yes" xml:space="preserve">
          <source>collection.rest</source>
          <target state="translated">collection.rest</target>
        </trans-unit>
        <trans-unit id="70c81315336ddd1c2ced4e25a01c3427815174d4" translate="yes" xml:space="preserve">
          <source>collection.sample</source>
          <target state="translated">collection.sample</target>
        </trans-unit>
        <trans-unit id="adc3ff270951fb70e2b462eaff8f826b3a24af46" translate="yes" xml:space="preserve">
          <source>collection.set</source>
          <target state="translated">collection.set</target>
        </trans-unit>
        <trans-unit id="71f6dbe6758cf42529ff35f822ae94d090abc152" translate="yes" xml:space="preserve">
          <source>collection.shift</source>
          <target state="translated">collection.shift</target>
        </trans-unit>
        <trans-unit id="9c7bfc2c203b4a4f2a208d6af19cceb9c89111ee" translate="yes" xml:space="preserve">
          <source>collection.shuffle</source>
          <target state="translated">collection.shuffle</target>
        </trans-unit>
        <trans-unit id="27c587381bd4395c261754dffc2f07a88fa0c26b" translate="yes" xml:space="preserve">
          <source>collection.size</source>
          <target state="translated">collection.size</target>
        </trans-unit>
        <trans-unit id="097b79a40ae267a80dcdd567544501d7c246f426" translate="yes" xml:space="preserve">
          <source>collection.slice</source>
          <target state="translated">collection.slice</target>
        </trans-unit>
        <trans-unit id="6875ca8eb109b0efad890b28f12156199cd31c39" translate="yes" xml:space="preserve">
          <source>collection.some</source>
          <target state="translated">collection.some</target>
        </trans-unit>
        <trans-unit id="b22bc8b87709783a7d1e6e146da03d8bf14656fe" translate="yes" xml:space="preserve">
          <source>collection.sort</source>
          <target state="translated">collection.sort</target>
        </trans-unit>
        <trans-unit id="218659f7315fd8bbe734559c8485aa4f6a6f5242" translate="yes" xml:space="preserve">
          <source>collection.sortBy</source>
          <target state="translated">collection.sortBy</target>
        </trans-unit>
        <trans-unit id="2757342fc163e28b083fee379b1c30f99347e4a5" translate="yes" xml:space="preserve">
          <source>collection.sync</source>
          <target state="translated">collection.sync</target>
        </trans-unit>
        <trans-unit id="1a7b49983318fc806885198f40923209ead30b35" translate="yes" xml:space="preserve">
          <source>collection.toArray</source>
          <target state="translated">collection.toArray</target>
        </trans-unit>
        <trans-unit id="963f7f5d8bea3923ff370a5aa2a7d745612461cd" translate="yes" xml:space="preserve">
          <source>collection.toJSON</source>
          <target state="translated">collection.toJSON</target>
        </trans-unit>
        <trans-unit id="15ff7b84b592203b65c342410e2e802804d42811" translate="yes" xml:space="preserve">
          <source>collection.unshift</source>
          <target state="translated">collection.unshift</target>
        </trans-unit>
        <trans-unit id="0e1f387f5945c1ba017981caad0a1ca505d7aece" translate="yes" xml:space="preserve">
          <source>collection.url</source>
          <target state="translated">collection.url</target>
        </trans-unit>
        <trans-unit id="a809c1a664a628980de990024a05a872d1033ebd" translate="yes" xml:space="preserve">
          <source>collection.where</source>
          <target state="translated">collection.where</target>
        </trans-unit>
        <trans-unit id="21355deb471fd755f3473ddc8f02213e9e992a8e" translate="yes" xml:space="preserve">
          <source>collection.without</source>
          <target state="translated">collection.without</target>
        </trans-unit>
        <trans-unit id="9a7b6ec3ef2ad86cdee034ea6412de11b6c4adf2" translate="yes" xml:space="preserve">
          <source>complete representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadce51a8e1a4e25ccbcde19962ce3c5d9d6d856" translate="yes" xml:space="preserve">
          <source>contains (includes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf1cf92b6eaab689c15a4690ef463d689cb78dc" translate="yes" xml:space="preserve">
          <source>countBy</source>
          <target state="translated">countBy</target>
        </trans-unit>
        <trans-unit id="539775b0710b9cccd1cde47ea839e88e77bef756" translate="yes" xml:space="preserve">
          <source>destroy event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d53c6e22192bbaaff43be3456d5f6f5d82da6f" translate="yes" xml:space="preserve">
          <source>difference</source>
          <target state="translated">difference</target>
        </trans-unit>
        <trans-unit id="821e8af60105677524be99b9b333b1f940ca456f" translate="yes" xml:space="preserve">
          <source>error event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f8bd6f668cac73fd3d031b3be6b31a895aea47" translate="yes" xml:space="preserve">
          <source>events on the model &amp;mdash; including events that Backbone uses for internal bookkeeping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b483abcc859d6c60d83d0f60949ba009be3e5620" translate="yes" xml:space="preserve">
          <source>events will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8386350732bdf6c2880855a0c1307612f076d82" translate="yes" xml:space="preserve">
          <source>every (all)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bd4fbdaf485e907db1728b1d635fb80408d514" translate="yes" xml:space="preserve">
          <source>filter (select)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efedb7fa87505087c10fa8992fd54a7fa5b10fec" translate="yes" xml:space="preserve">
          <source>find (detect)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201f7c33b08faf0c85da688358d022dbeafe0e29" translate="yes" xml:space="preserve">
          <source>findIndex</source>
          <target state="translated">findIndex</target>
        </trans-unit>
        <trans-unit id="599f366bf40c6cebd33562b050a7d04e031741f2" translate="yes" xml:space="preserve">
          <source>findLastIndex</source>
          <target state="translated">findLastIndex</target>
        </trans-unit>
        <trans-unit id="d1473bf170e9605e24655ae1a59253c5e981ebb8" translate="yes" xml:space="preserve">
          <source>first (head, take)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85699fc1b46da6055488a09a90a5e7d01dcd4e1c" translate="yes" xml:space="preserve">
          <source>forEach (each)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb22615df12aa7f71e4c5d9ccbcd20e67a8dacd" translate="yes" xml:space="preserve">
          <source>groupBy</source>
          <target state="translated">groupBy</target>
        </trans-unit>
        <trans-unit id="2f0d9dab9acccd8e8dc198ad47f1abc967c44b99" translate="yes" xml:space="preserve">
          <source>have to put strings of HTML in your JavaScript. At DocumentCloud, we use &lt;a href=&quot;https://documentcloud.github.com/jammit/&quot;&gt;Jammit&lt;/a&gt; in order to package up JavaScript templates stored in &lt;code&gt;/app/views&lt;/code&gt; as part of our main &lt;code&gt;core.js&lt;/code&gt; asset package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66704db1384f35bfe53021f5cbce833b846e7df" translate="yes" xml:space="preserve">
          <source>in the DOM, pass in the element as an option: &lt;code&gt;new View({el: existingElement})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3080ec0c625182c211d2a75f13126fd95fca788f" translate="yes" xml:space="preserve">
          <source>in the collection, they'll be ignored, unless you pass &lt;code&gt;{merge: true}&lt;/code&gt;, in which case their attributes will be merged into the corresponding models, firing any appropriate &lt;code&gt;&quot;change&quot;&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd85c321422288af137b973c56bd2f3fdbda0c3d" translate="yes" xml:space="preserve">
          <source>indexBy</source>
          <target state="translated">indexBy</target>
        </trans-unit>
        <trans-unit id="a35568315c1ca43522c11c18e4a77538f03287b9" translate="yes" xml:space="preserve">
          <source>indexOf</source>
          <target state="translated">indexOf</target>
        </trans-unit>
        <trans-unit id="8ad7d21c71b049b7003ba31b5f1322974df77ac8" translate="yes" xml:space="preserve">
          <source>initial</source>
          <target state="translated">initial</target>
        </trans-unit>
        <trans-unit id="0abcfb24a77d93af644e15715d8f9d7fdd227e75" translate="yes" xml:space="preserve">
          <source>invalid event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1754a8aa1386d7939bfddd474cd0652882671b3" translate="yes" xml:space="preserve">
          <source>invert</source>
          <target state="translated">invert</target>
        </trans-unit>
        <trans-unit id="d6aa1f3a789f3f3108666e0ac807ca5ca7dc5fa5" translate="yes" xml:space="preserve">
          <source>invoke</source>
          <target state="translated">invoke</target>
        </trans-unit>
        <trans-unit id="9611215f9484350846c7d50f3601caf95592bb96" translate="yes" xml:space="preserve">
          <source>is a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5490fcfb3b65c57bc1ad63914e1bd391595b83d4" translate="yes" xml:space="preserve">
          <source>isEmpty</source>
          <target state="translated">isEmpty</target>
        </trans-unit>
        <trans-unit id="5944ae25418ceabcf285dca1d721b77888dac89b" translate="yes" xml:space="preserve">
          <source>keys</source>
          <target state="translated">keys</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="b90022c7f8857940906b0f5a2ecd8468d086fac9" translate="yes" xml:space="preserve">
          <source>lastIndexOf</source>
          <target state="translated">lastIndexOf</target>
        </trans-unit>
        <trans-unit id="50060ea6c9be1940c38276846888b369ce7d05d8" translate="yes" xml:space="preserve">
          <source>map (collect)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0706025b2bbcec1ed8d64822f4eccd96314938d0" translate="yes" xml:space="preserve">
          <source>max</source>
          <target state="translated">max</target>
        </trans-unit>
        <trans-unit id="b6c935d4f3c7b220fa038613a1f9c1b56b255a86" translate="yes" xml:space="preserve">
          <source>min</source>
          <target state="translated">min</target>
        </trans-unit>
        <trans-unit id="cdd3ff005fe3c4541c0ccae5ddf98876f1a0ee3f" translate="yes" xml:space="preserve">
          <source>model.attributes</source>
          <target state="translated">model.attributes</target>
        </trans-unit>
        <trans-unit id="430d5bed2f2ff66e4f26ec607c68aace89985272" translate="yes" xml:space="preserve">
          <source>model.chain</source>
          <target state="translated">model.chain</target>
        </trans-unit>
        <trans-unit id="637331f8c87573ead3962829bd656c7f1da9d70d" translate="yes" xml:space="preserve">
          <source>model.changed</source>
          <target state="translated">model.changed</target>
        </trans-unit>
        <trans-unit id="a2dbaf149ec6c548c498c8570eae55d980bc5dcd" translate="yes" xml:space="preserve">
          <source>model.changedAttributes</source>
          <target state="translated">model.changedAttributes</target>
        </trans-unit>
        <trans-unit id="0a8e296dc5ccc4c8e5457473707b72eaf6abccb1" translate="yes" xml:space="preserve">
          <source>model.cid</source>
          <target state="translated">model.cid</target>
        </trans-unit>
        <trans-unit id="2773ce167f8b995e08f7e476e4af1dcc1f1de7bf" translate="yes" xml:space="preserve">
          <source>model.clear</source>
          <target state="translated">model.clear</target>
        </trans-unit>
        <trans-unit id="648abb567ceb560cfd36ab145ee27219d6afe428" translate="yes" xml:space="preserve">
          <source>model.clone</source>
          <target state="translated">model.clone</target>
        </trans-unit>
        <trans-unit id="dfdbc3b01ba55a8673ee2df35a70b62d34283ee2" translate="yes" xml:space="preserve">
          <source>model.defaults</source>
          <target state="translated">model.defaults</target>
        </trans-unit>
        <trans-unit id="69f1d4a2cc33fdef3ce8ea5dc87b9293643feed9" translate="yes" xml:space="preserve">
          <source>model.destroy</source>
          <target state="translated">model.destroy</target>
        </trans-unit>
        <trans-unit id="166e485c2cbeb90726baf0e1035ef72a55b12dc3" translate="yes" xml:space="preserve">
          <source>model.escape</source>
          <target state="translated">model.escape</target>
        </trans-unit>
        <trans-unit id="02a6dc46deb1df7ce05b958c939d06e9e768e59c" translate="yes" xml:space="preserve">
          <source>model.fetch</source>
          <target state="translated">model.fetch</target>
        </trans-unit>
        <trans-unit id="2151018341f4c53528351b0b376015ff8dd89e49" translate="yes" xml:space="preserve">
          <source>model.get</source>
          <target state="translated">model.get</target>
        </trans-unit>
        <trans-unit id="a2cf11e90313747a1429911d0ec3c0934c528f18" translate="yes" xml:space="preserve">
          <source>model.has</source>
          <target state="translated">model.has</target>
        </trans-unit>
        <trans-unit id="ae2b7c664d8b6808264fa6e7bfa6bd435490b4cc" translate="yes" xml:space="preserve">
          <source>model.hasChanged</source>
          <target state="translated">model.hasChanged</target>
        </trans-unit>
        <trans-unit id="47415ea8e5702c04017f32222789c13db6ca1e76" translate="yes" xml:space="preserve">
          <source>model.id</source>
          <target state="translated">model.id</target>
        </trans-unit>
        <trans-unit id="7deaef6b2da0ac7c2681a0bcd133b4785ef5ff4d" translate="yes" xml:space="preserve">
          <source>model.idAttribute</source>
          <target state="translated">model.idAttribute</target>
        </trans-unit>
        <trans-unit id="efc29ada8b34802763abcdcac67263942dddd3d6" translate="yes" xml:space="preserve">
          <source>model.invert</source>
          <target state="translated">model.invert</target>
        </trans-unit>
        <trans-unit id="8c345fa6e7c3aae84a75fc87e33f491edfeaea03" translate="yes" xml:space="preserve">
          <source>model.isEmpty</source>
          <target state="translated">model.isEmpty</target>
        </trans-unit>
        <trans-unit id="4bde4c96ed7e6874726d3a5f412f2508a56b1500" translate="yes" xml:space="preserve">
          <source>model.isNew</source>
          <target state="translated">model.isNew</target>
        </trans-unit>
        <trans-unit id="5750ed39a80ef28f1d171cdfb355107b91e609e2" translate="yes" xml:space="preserve">
          <source>model.isValid</source>
          <target state="translated">model.isValid</target>
        </trans-unit>
        <trans-unit id="0c9add782cb04eb7435e604bcde670a135c26e00" translate="yes" xml:space="preserve">
          <source>model.keys</source>
          <target state="translated">model.keys</target>
        </trans-unit>
        <trans-unit id="1fb3a2d7e105d103804eb034da32b752479821ae" translate="yes" xml:space="preserve">
          <source>model.omit</source>
          <target state="translated">model.omit</target>
        </trans-unit>
        <trans-unit id="8655e0fe0bfeada49d8cc90e758756602fc0787c" translate="yes" xml:space="preserve">
          <source>model.pairs</source>
          <target state="translated">model.pairs</target>
        </trans-unit>
        <trans-unit id="cd2ee573aebeab1cd7ea522899a8c8f340affdbd" translate="yes" xml:space="preserve">
          <source>model.parse</source>
          <target state="translated">model.parse</target>
        </trans-unit>
        <trans-unit id="6d905bad9f0f32e20d8a065005cd255b637ab53e" translate="yes" xml:space="preserve">
          <source>model.pick</source>
          <target state="translated">model.pick</target>
        </trans-unit>
        <trans-unit id="df44f38ca871f47ce7131f595f9c2b166db87a05" translate="yes" xml:space="preserve">
          <source>model.preinitialize</source>
          <target state="translated">model.preinitialize</target>
        </trans-unit>
        <trans-unit id="34296468534059d431a787971e580b048a1cf154" translate="yes" xml:space="preserve">
          <source>model.previous</source>
          <target state="translated">model.previous</target>
        </trans-unit>
        <trans-unit id="fc59a8f450b57be2cab84f0a352b24aeb9465189" translate="yes" xml:space="preserve">
          <source>model.previousAttributes</source>
          <target state="translated">model.previousAttributes</target>
        </trans-unit>
        <trans-unit id="70714f0ffb2e2018399f8189847141bb2de8e909" translate="yes" xml:space="preserve">
          <source>model.save</source>
          <target state="translated">model.save</target>
        </trans-unit>
        <trans-unit id="b9ca8a0f8cc18bd72f124064e98f5e836b68de47" translate="yes" xml:space="preserve">
          <source>model.set</source>
          <target state="translated">model.set</target>
        </trans-unit>
        <trans-unit id="f3ac62f517247c95d879a8390988d16670a65d1b" translate="yes" xml:space="preserve">
          <source>model.sync</source>
          <target state="translated">model.sync</target>
        </trans-unit>
        <trans-unit id="c6c34e9c50869f710176e4627636b4a9028b6ac2" translate="yes" xml:space="preserve">
          <source>model.toJSON</source>
          <target state="translated">model.toJSON</target>
        </trans-unit>
        <trans-unit id="5ec01255617f6e29c77e64515ebdb7b1d6e43d76" translate="yes" xml:space="preserve">
          <source>model.unset</source>
          <target state="translated">model.unset</target>
        </trans-unit>
        <trans-unit id="f42151ac2e631d0049f7ff1707c89da13846fc3c" translate="yes" xml:space="preserve">
          <source>model.url</source>
          <target state="translated">model.url</target>
        </trans-unit>
        <trans-unit id="139efa37a9150ff20d239d9e697ffda0d77a677b" translate="yes" xml:space="preserve">
          <source>model.urlRoot</source>
          <target state="translated">model.urlRoot</target>
        </trans-unit>
        <trans-unit id="392f324a8392468558342425020731ed5ed052a2" translate="yes" xml:space="preserve">
          <source>model.validate</source>
          <target state="translated">model.validate</target>
        </trans-unit>
        <trans-unit id="cbec776e7ffba37534ca4b81de61a4934028ec0f" translate="yes" xml:space="preserve">
          <source>model.validationError</source>
          <target state="translated">model.validationError</target>
        </trans-unit>
        <trans-unit id="077e6d864db911059d8566fbcd8932b143caa980" translate="yes" xml:space="preserve">
          <source>model.values</source>
          <target state="translated">model.values</target>
        </trans-unit>
        <trans-unit id="85777c03b72554cd08e721b6148dc27d2a50a7a6" translate="yes" xml:space="preserve">
          <source>never</source>
          <target state="translated">never</target>
        </trans-unit>
        <trans-unit id="41085728ba657f666d5fd38eb81307aace813752" translate="yes" xml:space="preserve">
          <source>of a collection, to enable the default &lt;a href=&quot;#Model-url&quot;&gt;url&lt;/a&gt; function to generate URLs based on the model id. &lt;code&gt;&quot;[urlRoot]/id&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b638de5623a4b39d745b0264ac02b86b38c02c7" translate="yes" xml:space="preserve">
          <source>of the resource will be sent to the server. As with &lt;code&gt;set&lt;/code&gt;, you may pass individual keys and values instead of a hash. If the model has a &lt;a href=&quot;#Model-validate&quot;&gt;validate&lt;/a&gt; method, and validation fails, the model will not be saved. If the model &lt;a href=&quot;#Model-isNew&quot;&gt;isNew&lt;/a&gt;, the save will be a &lt;code&gt;&quot;create&quot;&lt;/code&gt; (HTTP &lt;code&gt;POST&lt;/code&gt;), if the model already exists on the server, the save will be an &lt;code&gt;&quot;update&quot;&lt;/code&gt; (HTTP &lt;code&gt;PUT&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f189b4a857c01fc184fa0a206d26a49a6fa2d5e" translate="yes" xml:space="preserve">
          <source>omit</source>
          <target state="translated">omit</target>
        </trans-unit>
        <trans-unit id="45e18dad51fd9e8869897fba48fa93d118e5e404" translate="yes" xml:space="preserve">
          <source>outside</source>
          <target state="translated">outside</target>
        </trans-unit>
        <trans-unit id="5e0327f3ea73cf88b0f10d01c7514331e769140a" translate="yes" xml:space="preserve">
          <source>pairs</source>
          <target state="translated">pairs</target>
        </trans-unit>
        <trans-unit id="88faac11dac221116e7705b81a183fd08668de4b" translate="yes" xml:space="preserve">
          <source>partition</source>
          <target state="translated">partition</target>
        </trans-unit>
        <trans-unit id="4c2e8554e331d42c11b4f804c340783b34447b3c" translate="yes" xml:space="preserve">
          <source>pick</source>
          <target state="translated">pick</target>
        </trans-unit>
        <trans-unit id="c327534a38907a5b182d1146e8eee57fb7e9380e" translate="yes" xml:space="preserve">
          <source>present in the list, they'll be removed. All of the appropriate &lt;code&gt;&quot;add&quot;&lt;/code&gt;, &lt;code&gt;&quot;remove&quot;&lt;/code&gt;, and &lt;code&gt;&quot;change&quot;&lt;/code&gt; events are fired as this happens. Returns the touched models in the collection. If you'd like to customize the behavior, you can disable it with options: &lt;code&gt;{add: false}&lt;/code&gt;, &lt;code&gt;{remove: false}&lt;/code&gt;, or &lt;code&gt;{merge: false}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc87c943c94f10d8c3076ae73fa9ec72f775ff06" translate="yes" xml:space="preserve">
          <source>rarely</source>
          <target state="translated">rarely</target>
        </trans-unit>
        <trans-unit id="b725c4d0c0f1ac764c4dec513bb7126365681ef4" translate="yes" xml:space="preserve">
          <source>reduce (foldl, inject)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a9798598debc0de9e258a6eeadb00d535d07bb" translate="yes" xml:space="preserve">
          <source>reduceRight (foldr)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90afb8c10d80d7b84837590eb43cb0b81ca22390" translate="yes" xml:space="preserve">
          <source>reject</source>
          <target state="translated">reject</target>
        </trans-unit>
        <trans-unit id="462b9ee4c3ab5cfada6cc98e21b8b28c4cce887a" translate="yes" xml:space="preserve">
          <source>remove event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c4bf5b318efd2ed9332f4009dc94c7ef69cc87" translate="yes" xml:space="preserve">
          <source>request event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719cca222b99b85d178dd1e6bc8a6e933fbbeb57" translate="yes" xml:space="preserve">
          <source>reset event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bd104b24faa09c6056bee216fa33c66baa1245" translate="yes" xml:space="preserve">
          <source>rest (tail, drop)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5207896bbc9929eda6952f7dcd3bc3f7964da04c" translate="yes" xml:space="preserve">
          <source>route event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e831499991ff3be0c6d1a9412de0d97088914f" translate="yes" xml:space="preserve">
          <source>route has been matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753160e02cebc8d384d0356224b4428deb9a4cc4" translate="yes" xml:space="preserve">
          <source>route:[name] event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7cd9cf84b9acbaced7ec211c30f66febb699a1" translate="yes" xml:space="preserve">
          <source>router.execute</source>
          <target state="translated">router.execute</target>
        </trans-unit>
        <trans-unit id="b790e1d1a338e2cd8c20788e46e8c55cac0db4da" translate="yes" xml:space="preserve">
          <source>router.navigate</source>
          <target state="translated">router.navigate</target>
        </trans-unit>
        <trans-unit id="d9a3e00d46a291833e5c53385bd529930f511f7f" translate="yes" xml:space="preserve">
          <source>router.preinitialize</source>
          <target state="translated">router.preinitialize</target>
        </trans-unit>
        <trans-unit id="befbcd200005ebe5050723177c299a10ca1f78f0" translate="yes" xml:space="preserve">
          <source>router.route</source>
          <target state="translated">router.route</target>
        </trans-unit>
        <trans-unit id="70b4a98876cf480cb5c877f9fc4af042b172019b" translate="yes" xml:space="preserve">
          <source>router.routes</source>
          <target state="translated">router.routes</target>
        </trans-unit>
        <trans-unit id="8151325dcdbae9e0ff95f9f9658432dbedfdb209" translate="yes" xml:space="preserve">
          <source>sample</source>
          <target state="translated">sample</target>
        </trans-unit>
        <trans-unit id="187dc5704ade702282b5b98eb42eca8f784f7977" translate="yes" xml:space="preserve">
          <source>shuffle</source>
          <target state="translated">shuffle</target>
        </trans-unit>
        <trans-unit id="89368e1d68015693ab48ee189d0632cb5d6edfb3" translate="yes" xml:space="preserve">
          <source>size</source>
          <target state="translated">size</target>
        </trans-unit>
        <trans-unit id="cbcb86952ff64e2a49b48f901e151fd6e1f72502" translate="yes" xml:space="preserve">
          <source>some (any)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c9e0e6d22233b6f6fc5f6531f63df7a945e540" translate="yes" xml:space="preserve">
          <source>sort event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3adc28a9a4a7af6e6ec2bb0968554d049edb777" translate="yes" xml:space="preserve">
          <source>sortBy</source>
          <target state="translated">sortBy</target>
        </trans-unit>
        <trans-unit id="86e69f09d98ac7459f2a4e2280bc6f6bda6d8a10" translate="yes" xml:space="preserve">
          <source>sync event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2041cc0f86fcee4fbf0ccd352e5593da8c9c14a8" translate="yes" xml:space="preserve">
          <source>toArray</source>
          <target state="translated">toArray</target>
        </trans-unit>
        <trans-unit id="a793a20392fc3b7cc23f3ef00dcdcac16dea82c6" translate="yes" xml:space="preserve">
          <source>triggered event, passing the event name as the first argument followed by all trigger arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32755fb1b267b692a7ca8397c482d34f5b72879d" translate="yes" xml:space="preserve">
          <source>triggering any add or remove events on any models. Returns the newly-set models. For convenience, within a &lt;code&gt;&quot;reset&quot;&lt;/code&gt; event, the list of any previous models is available as &lt;code&gt;options.previousModels&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e80e112d626605f74fe213bff693cc9147d2d3" translate="yes" xml:space="preserve">
          <source>update event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048b0cb1b94379c74e7e8c8ede496e3edbea3386" translate="yes" xml:space="preserve">
          <source>values</source>
          <target state="translated">values</target>
        </trans-unit>
        <trans-unit id="f874504e552780b8af2753abb8f253d2664e6dab" translate="yes" xml:space="preserve">
          <source>view.$</source>
          <target state="translated">view.$</target>
        </trans-unit>
        <trans-unit id="721f530e25813fdfcd8ccce7d773aeaa032613d4" translate="yes" xml:space="preserve">
          <source>view.$el</source>
          <target state="translated">view.$el</target>
        </trans-unit>
        <trans-unit id="7262cf227c2d9a5604121c68930a2e27884d583c" translate="yes" xml:space="preserve">
          <source>view.attributes</source>
          <target state="translated">view.attributes</target>
        </trans-unit>
        <trans-unit id="178b6b1b923d15264f321ae4ed1b852966f2a472" translate="yes" xml:space="preserve">
          <source>view.delegateEvents</source>
          <target state="translated">view.delegateEvents</target>
        </trans-unit>
        <trans-unit id="b94117fb7102295f852b15780528e1ecd4017461" translate="yes" xml:space="preserve">
          <source>view.el</source>
          <target state="translated">view.el</target>
        </trans-unit>
        <trans-unit id="01fa2c92d205e82ee83d163f875127f033bbe1d8" translate="yes" xml:space="preserve">
          <source>view.events</source>
          <target state="translated">view.events</target>
        </trans-unit>
        <trans-unit id="c272bb69885549b02d7e6d3b4067822e8d821a5a" translate="yes" xml:space="preserve">
          <source>view.preinitialize</source>
          <target state="translated">view.preinitialize</target>
        </trans-unit>
        <trans-unit id="3dbb4ee8c9ebee23c786cb9c3c5b59a9ff0c23b7" translate="yes" xml:space="preserve">
          <source>view.remove</source>
          <target state="translated">view.remove</target>
        </trans-unit>
        <trans-unit id="cfde327fefb17ba14c7eefbea0ae90211600cfff" translate="yes" xml:space="preserve">
          <source>view.render</source>
          <target state="translated">view.render</target>
        </trans-unit>
        <trans-unit id="b9b322fb6b02ce3d603e8ee2610aabc0227c8ed0" translate="yes" xml:space="preserve">
          <source>view.setElement</source>
          <target state="translated">view.setElement</target>
        </trans-unit>
        <trans-unit id="7df2870af483da89cb42598a53120c4d47c6ead1" translate="yes" xml:space="preserve">
          <source>view.template</source>
          <target state="translated">view.template</target>
        </trans-unit>
        <trans-unit id="5f69f367213bf342a4bd98cc337573665bbe6917" translate="yes" xml:space="preserve">
          <source>view.undelegateEvents</source>
          <target state="translated">view.undelegateEvents</target>
        </trans-unit>
        <trans-unit id="0d4e654c613ea68bffeeab1587b7dbac44826c2b" translate="yes" xml:space="preserve">
          <source>without</source>
          <target state="translated">without</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
