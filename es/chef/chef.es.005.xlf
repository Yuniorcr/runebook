<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="chef">
    <body>
      <group id="chef">
        <trans-unit id="1829eb861868bf19f93a3a0aa51c618ee98521b1" translate="yes" xml:space="preserve">
          <source>Run chef-zero in socketless mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0979d438b33e66e25e93ce0152f07b64fedbd19" translate="yes" xml:space="preserve">
          <source>Run chef-zero in socketless mode. Set to &lt;code&gt;false&lt;/code&gt; to disable port binding and HTTP requests on localhost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0079f02552a36538d2a0b30994d1a158e59ff04a" translate="yes" xml:space="preserve">
          <source>Run dpkg or RPM Package Manager on all servers. For dpkg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f521c43449627522fc406d697962c5f9e6f7dc32" translate="yes" xml:space="preserve">
          <source>Run dpkg or RPM Package Manager on the server to install Chef server 12. For dpkg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5c36c31cdac4b7b6b6e4a83947506109692804" translate="yes" xml:space="preserve">
          <source>Run dpkg or RPM Package Manager. For dpkg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6b4bcbd52e5321cdcc14df57429d0c631731d4" translate="yes" xml:space="preserve">
          <source>Run from Recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542d1c1c3e07791d05cd7e030bddecacb62f9fde" translate="yes" xml:space="preserve">
          <source>Run from client.rb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786151b29663a8501c002e5ccb5ebc939ed0d3e7" translate="yes" xml:space="preserve">
          <source>Run ifconfig to disable a network interface and (on some platforms) delete that network interface&amp;rsquo;s configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f95cb19dc0aff54ac3e3075aa57914367f1efa" translate="yes" xml:space="preserve">
          <source>Run ifconfig to disable a network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6208e856a51026b4af782cdeed37342e74c7c47e" translate="yes" xml:space="preserve">
          <source>Run ifconfig to enable a network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66350016d9de5925cace3365be4dc8525801a6df" translate="yes" xml:space="preserve">
          <source>Run in Audit Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b58797a5d325aa1df543d2446f9dd0659a7bb46" translate="yes" xml:space="preserve">
          <source>Run in Compile Phase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc3a3d72008181e48b8dfb538d87e49dfa14583" translate="yes" xml:space="preserve">
          <source>Run in FIPS Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fb481ffdb415a73249722209d36a338f103fdd" translate="yes" xml:space="preserve">
          <source>Run in Local Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7314e347756babd98a8aa19aaad12872c895d427" translate="yes" xml:space="preserve">
          <source>Run on IBM AIX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66c7d8161c6ec6d5043e99f713f5aee1ca9f74d" translate="yes" xml:space="preserve">
          <source>Run tests with full output. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711a08fcf8a06591f1df93ec100c95690a515788" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;knife ssl check&lt;/code&gt; subcommand to verify the state of the SSL certificate, and then use the reponse to help troubleshoot issues that may be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e3bb1a66dbd49f765436acf65e1dfdb11bf283" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;knife ssl fetch&lt;/code&gt; to download the self-signed certificate from the Chef server to the &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory on a workstation. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1530797fef488a1b51e19851cf611f62cd10cb32" translate="yes" xml:space="preserve">
          <source>Run the Chef server in a high availability topology. When &lt;code&gt;topology&lt;/code&gt; is set to &lt;code&gt;ha&lt;/code&gt;, this setting defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a37ea044e5df7432d2ad7f1f9005b94ab675b5" translate="yes" xml:space="preserve">
          <source>Run the Chef server in a high availability topology. When &lt;code&gt;topology&lt;/code&gt; is set to &lt;code&gt;ha&lt;/code&gt;, this setting defaults to &lt;code&gt;true&lt;/code&gt;. Default value: &lt;code&gt;'false'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8d380483f53072912bacfff9f0199ae21672d2" translate="yes" xml:space="preserve">
          <source>Run the Chef server in a high availability topology. When &lt;code&gt;topology&lt;/code&gt; is set to &lt;code&gt;ha&lt;/code&gt;, this setting defaults to &lt;code&gt;true&lt;/code&gt;. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5451385932fec221ba650b6bd1115d72f8618d" translate="yes" xml:space="preserve">
          <source>Run the MSI package and use all the default options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdc0252a583dfa18026591761ece7cf0d763aaf" translate="yes" xml:space="preserve">
          <source>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to &lt;code&gt;true&lt;/code&gt; during integration testing to speed up test cycles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f219ed301bf7391e3e2fe01be28a4dba6bb6da9" translate="yes" xml:space="preserve">
          <source>Run the chef-client in chef-solo mode. This setting determines if the chef-client is to attempt to communicate with the Chef server. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cb1365ad38be7bec1a36a91a949bbf00b2fd26" translate="yes" xml:space="preserve">
          <source>Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819114c803348cb8f1f0c23db0ec26e62178d5c2" translate="yes" xml:space="preserve">
          <source>Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f137e4057d090ed6665bbc71707856b9b90bee" translate="yes" xml:space="preserve">
          <source>Run the chef-client only once and cancel &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;splay&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5b11529990cf60b68dfdde6491bb2389f06482" translate="yes" xml:space="preserve">
          <source>Run the chef-client process from the administrator account while being logged into another account. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cbde95862336380fa19f0cffed0a27b30ff780" translate="yes" xml:space="preserve">
          <source>Run the executable as a daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc18089155ab509ef866985b9c4c10c1896b3d8" translate="yes" xml:space="preserve">
          <source>Run the executable as a daemon. This option may not be used in the same command with the &lt;code&gt;--[no-]fork&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa8148de027b2ff6b340ce4d3107566521acc53" translate="yes" xml:space="preserve">
          <source>Run the executable as a daemon. Use &lt;code&gt;SECONDS&lt;/code&gt; to specify the number of seconds to wait before the first daemonized chef-client run. &lt;code&gt;SECONDS&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dec7ddc73c7836652e1c8b7e69c5f4558daa21f" translate="yes" xml:space="preserve">
          <source>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354f4dbd0b77077e5510662223cc8065bdc7f50b" translate="yes" xml:space="preserve">
          <source>Run the following command on all front end servers and the primary back end server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187703478e15d85ad0eacf88f9bd62270c3feb79" translate="yes" xml:space="preserve">
          <source>Run the following command on each of the back end servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283882f163bcd2e6a8594ecc55e41c611c3cca42" translate="yes" xml:space="preserve">
          <source>Run the following command on each of the backend servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272f0397c525224239ce9996dd91e9efa65c91bf" translate="yes" xml:space="preserve">
          <source>Run the following command on the secondary backend server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b666749678e5c5e02f42e1af6cb85de71842767" translate="yes" xml:space="preserve">
          <source>Run the following command to create an administrator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb89adbd751a4263a571204abc1413e5d866fdc0" translate="yes" xml:space="preserve">
          <source>Run the following command to create an organization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bead26913741ee04100669287e4c1a625c06b11d" translate="yes" xml:space="preserve">
          <source>Run the following command to make sure all services are in a sane state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fded7ef0deb57b9e5c011cae951ed20627a1ec3d" translate="yes" xml:space="preserve">
          <source>Run the following command, Chef server-generated SSL certificates will automatically be created if necessary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bc9f3b3c3bc1f4e68429d60ce154eff1b5501e" translate="yes" xml:space="preserve">
          <source>Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866fddcfb70b2cdecc832551eecb0b1420fbed8b" translate="yes" xml:space="preserve">
          <source>Run the following from a &lt;code&gt;.chef&lt;/code&gt; directory that contains a &lt;code&gt;pivotal.rb&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a37f7f49a1e4fb7d79f7ced1b08635c1fddef6" translate="yes" xml:space="preserve">
          <source>Run the following on all servers to make sure all services are in a sane state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e31deb79b11c8af14975c5ef47c906cfd816de" translate="yes" xml:space="preserve">
          <source>Run the following to make sure all services are in a sane state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16af47c50e0f704203f153921e855d228ddfe00" translate="yes" xml:space="preserve">
          <source>Run the following to start all of the services:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6560b0c1b615f3c8a5849eaa392e157f698460" translate="yes" xml:space="preserve">
          <source>Run the initial chef-client run at the &lt;code&gt;debug&lt;/code&gt; log-level (e.g. &lt;code&gt;chef-client -l debug&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9645d0a422ee7293e6474f264ac4e0ef2f51b369" translate="yes" xml:space="preserve">
          <source>Run the omnibus installer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2e607698d8c8bb71c79f0224c4d55856767b7d" translate="yes" xml:space="preserve">
          <source>Run the print command on the command line. Default: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342417f24cfcdf71ecd648ea7c035bb89d03521e" translate="yes" xml:space="preserve">
          <source>Run with Elevated Privileges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797444e05c29e0c4bb475565ddbc48e5402fca81" translate="yes" xml:space="preserve">
          <source>Run-list Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea8ff7e015872bec1facc710b79c03f9d455530" translate="yes" xml:space="preserve">
          <source>Run-lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf104b6c3578a8b66f7a1b5e9e1fe76904746786" translate="yes" xml:space="preserve">
          <source>Running a fast network between the primary and secondary hosts, and keeping it full throttle for DRBD transfers, will go a long way to mitigating the any damage that may be done in the event of a loss of the primary from an un-synced cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad14520723d8da5163562cd43de9c2e9f13859c7" translate="yes" xml:space="preserve">
          <source>Running this argument will invalidate the previous RSA key pair, making it unusable during authentication to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70976565e97ad2e3a9b98f95455f892257756bba" translate="yes" xml:space="preserve">
          <source>Runs &lt;code&gt;Gem.clear_paths&lt;/code&gt; after the action, ensuring that gem is aware of changes so that it can be required immediately after it is installed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660927e926859cdef8b9eb9abca0c77d49e866a7" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;Gem.configuration&lt;/code&gt; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829e322164283d55302d1f001d696dee02377110" translate="yes" xml:space="preserve">
          <source>Runs its actions immediately, before convergence, allowing a gem to be used in a recipe immediately after it is installed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a88290930b8b72a374d64ab37cacfef45b3f11" translate="yes" xml:space="preserve">
          <source>Runs the chef-client on a local machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11441e8b3cc5627260019912d289284711abbad" translate="yes" xml:space="preserve">
          <source>SELinux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1829ada247c797cff33833bf1504a90966ad9c62" translate="yes" xml:space="preserve">
          <source>SELinux environments only. Cause the chef-client to attempt to apply the correct file permissions to an updated file via the &lt;code&gt;restorecon&lt;/code&gt; command. Set this value to &lt;code&gt;false&lt;/code&gt; to prevent the chef-client from attempting this action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14d3b1405adce3749c6f78def02dd037f658726" translate="yes" xml:space="preserve">
          <source>SNS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167bd6182100989e39aab5fcf981d035ea73dcc7" translate="yes" xml:space="preserve">
          <source>SSL Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5fad5494fa30beb1cd6ec7f02e20086c1b74ad" translate="yes" xml:space="preserve">
          <source>SSL Protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb1145682d6d302ff80dd7c225477baa0e963ad" translate="yes" xml:space="preserve">
          <source>SSL Verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97019f872709f7e5a6674067bb21221c48d15f9" translate="yes" xml:space="preserve">
          <source>SSL certificates should be regenerated periodically. This is an important part of protecting the Chef server from vulnerabilities and helps to prevent the information stored on the Chef server from being compromised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c84dbeae3cb27dea56879c8dfdd6ec25218870" translate="yes" xml:space="preserve">
          <source>SSL_CERT_FILE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b3e6aa62af80819eb7c9ef1d6043d090249190" translate="yes" xml:space="preserve">
          <source>Same as node_name. Recommended configuration is to allow Ohai to collect this value during each chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ab7e339bc9b005380c060f3a89cc99eb4e03e1" translate="yes" xml:space="preserve">
          <source>Same delete as before:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a343911aa02e72afd70d0c51ffb726d6cf8ba470" translate="yes" xml:space="preserve">
          <source>Sandboxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef626107fbe3d9afafd844cd751ff97384b2ca7a" translate="yes" xml:space="preserve">
          <source>Save a private key to the specified file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bd994473871b648651ff698c30b336f68aa92a" translate="yes" xml:space="preserve">
          <source>Save a private key to the specified file name. If the &lt;code&gt;--public-key&lt;/code&gt; option is not specified the Chef server will generate a private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7c578885cdeaa8c58c7a3663f194e9c1cf16d9" translate="yes" xml:space="preserve">
          <source>Save a public key to the specified file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8281c91a2620e121b9927bf1226879166ffb55b5" translate="yes" xml:space="preserve">
          <source>Save it as a Ruby script&amp;mdash;&lt;code&gt;chef_server_permissions.rb&lt;/code&gt;, for example&amp;mdash;in the &lt;code&gt;.chef/scripts&lt;/code&gt; directory located in the chef-repo, and then run a knife command similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed097e4cbf02e519f786bfe9b6f75a588f4d099" translate="yes" xml:space="preserve">
          <source>Save the file, and then run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cba685434989b35b922c6b0ed3ac2f22a22399e" translate="yes" xml:space="preserve">
          <source>Save the file. Because we are using the vi editor, you can save your changes in vi with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4626afc7a9263883025448e3321df3242a9e15" translate="yes" xml:space="preserve">
          <source>Save these results to compare them to the same data post-resize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2482b22b5746b6b32296f9cf41499d7adcea7f9" translate="yes" xml:space="preserve">
          <source>Save those changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a574679958dede2ce5fcb39b1c78069f6c5364" translate="yes" xml:space="preserve">
          <source>Scaling the Chef Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569aae5b47e464b83049959de67717fbf2ff4407" translate="yes" xml:space="preserve">
          <source>Scenario</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3506bcbdcf6d13edc09a2e4bef7635c9510b3b14" translate="yes" xml:space="preserve">
          <source>Scenario 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f330360775f9449122333054258222bcbf2a8d8" translate="yes" xml:space="preserve">
          <source>Scenario 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c787e9d80ac68f9bb798bab829888f0730540ad4" translate="yes" xml:space="preserve">
          <source>Scenario 5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e807cfdfc4d1f976fc0a451b82d2771c1ccd30" translate="yes" xml:space="preserve">
          <source>Scenario: website Resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f74889555b774b79b4d68522d975c09ca21dba" translate="yes" xml:space="preserve">
          <source>Scenarios 1 and 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce06414177f72ab70e6387b6af9f8ceef0d6049" translate="yes" xml:space="preserve">
          <source>Search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a8927a56dd8fc8b2507fad8d4ebf9ee33d1a67" translate="yes" xml:space="preserve">
          <source>Search Index Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8167243dcd20dbb80e80c0725a7d1ff1596582a4" translate="yes" xml:space="preserve">
          <source>Search Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba022a67ef84a490df4172de1e45603d91e57ec" translate="yes" xml:space="preserve">
          <source>Search and &lt;code&gt;partial_search&lt;/code&gt; are utilized, but not heavily</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999469e392fe3cea3f0ebb3e9cb2680fcea3f997" translate="yes" xml:space="preserve">
          <source>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the &lt;code&gt;search&lt;/code&gt; subcommand in knife, the &lt;code&gt;search&lt;/code&gt; method in the Recipe DSL, the search box in the Chef management console, and by using the &lt;code&gt;/search&lt;/code&gt; or &lt;code&gt;/search/INDEX&lt;/code&gt; endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7e871ee377c9368e594dd6c8a1ac02fbeb518a" translate="yes" xml:space="preserve">
          <source>Search queries may not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8186f238756f93b1e1d6851b84e3606a5422f504" translate="yes" xml:space="preserve">
          <source>Searching of indexed data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7283dd84903defc4c3d954ad382a97d1bc567b9f" translate="yes" xml:space="preserve">
          <source>Searching of indexed data on the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dc244a20ce6fafa0ed57e699c4b5d809fed8d2" translate="yes" xml:space="preserve">
          <source>Secondary Backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a66498f36bcb72d1d4ada74d27f8bd93b9fecec" translate="yes" xml:space="preserve">
          <source>Secret Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41f0a55aa31a34e5c6243c73789c06058249b66" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;config_rb_knife_optional_settings&quot;&gt;knife.rb&lt;/a&gt; for more information about how to add certain knife options as settings in the knife.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6550b59609c940f092f1c1d9c80fb88ecced3160" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb490880.aspx&quot;&gt;http://technet.microsoft.com/en-us/library/bb490880.aspx&lt;/a&gt; for more information about the cmd.exe interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03226a944867d67007386e5c6a7647fb04f4ad8b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;https://wiki.mozilla.org/Security/Server_Side_TLS&lt;/a&gt; for more information about the values used with the &lt;code&gt;nginx['ssl_ciphers']&lt;/code&gt; and &lt;code&gt;nginx['ssl_protocols']&lt;/code&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a82445b0383118667058b7072d7d496c8cdbb16" translate="yes" xml:space="preserve">
          <source>See GitHub issues &lt;a href=&quot;https://github.com/chef/chef/issues/3232&quot;&gt;https://github.com/chef/chef/issues/3232&lt;/a&gt; and &lt;a href=&quot;https://github.com/chef/chef/pull/3693&quot;&gt;https://github.com/chef/chef/pull/3693&lt;/a&gt; for more information about these differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1291781b364b34d189768fd65afdac7102bda33f" translate="yes" xml:space="preserve">
          <source>See SSL Certificates for more information about how knife and the chef-client use SSL certificates generated by the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed0aeef683b8a9d10803132c74d4fb6cc6e69ac" translate="yes" xml:space="preserve">
          <source>See below for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1211d81e8127688787abb6454e6c04abcf649eb" translate="yes" xml:space="preserve">
          <source>See for more information about how to use the &lt;code&gt;chef&lt;/code&gt; command-line tool that is packaged with the Chef development kit to build the chef-repo, plus related cookbook sub-directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14841d0cf4a2057bf2821bacad970d5fba44a16a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;proxies&quot;&gt;proxies&lt;/a&gt; documentation for information on how to configure Knife to use a proxy server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d07afc68171949b8314bc3a1602f295334a1951" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;proxies&quot;&gt;proxies&lt;/a&gt; documentation for information on how to configure chef-client to use a proxy server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c49f930ccc6df6b0802b9c6ed3de11d08bb2d1b" translate="yes" xml:space="preserve">
          <source>See the description above for this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883bca4589566e8c9e09baf6f771a94d97a740e0" translate="yes" xml:space="preserve">
          <source>See the following sections for more information about each step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b928c274f5afaac7aab98ae94214534f704526" translate="yes" xml:space="preserve">
          <source>See the list of error messages that may be present when configuring the Chef server to use a remote PostgreSQL server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624ab4448d75b0d377880a595abcee44a06064dd" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;http://jtimberman.housepub.org/blog/2015/03/20/chef-gem-compile-time-compatibility/&quot;&gt;blog post&lt;/a&gt; for more background on this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee5d9e1b531600f289c60c777f095b9db3bcde3" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Add Additional Language Environments&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt;. A screen similar to the following is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e8c87951643aac493f684164798ca180a849e7" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Windows&lt;/strong&gt;, a version, and an architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654aea23c4b93f2e229ce4c1a41452eaa5aca402" translate="yes" xml:space="preserve">
          <source>Select a chef-validator key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3340a7989aaf084cca280c1c8e536fc9269bb047" translate="yes" xml:space="preserve">
          <source>Select a client key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a668060ac3d532c37174c80e5c94cbfd4e26403" translate="yes" xml:space="preserve">
          <source>Select a cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f08104398a90857a33ca4292a689aca4e14ce0d" translate="yes" xml:space="preserve">
          <source>Select a data bag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da454b610d82079c37e5aa30aa324e7215043317" translate="yes" xml:space="preserve">
          <source>Select a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d28e98fdd18d133248055141ca606ffd235883" translate="yes" xml:space="preserve">
          <source>Select a file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df08eaba028dc6a1988c751b6d4b659718799ab9" translate="yes" xml:space="preserve">
          <source>Select a node (or a group of nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3848ec9a2ab9028e54f0e81f83d1c10fd12188b3" translate="yes" xml:space="preserve">
          <source>Select a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cc1a4438364b48a8121b6e670a1f59d6fd0342" translate="yes" xml:space="preserve">
          <source>Select a platform, and then a package. (chef-docs uses the Mac OS X setup within the documentation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e853c48fb9954de2c79fc24ffa5eb56956527f" translate="yes" xml:space="preserve">
          <source>Select a role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e37ffd1be7d067c16d88eed09f37c9801716b30" translate="yes" xml:space="preserve">
          <source>Select a user to be removed from the &lt;strong&gt;Groups&lt;/strong&gt; group:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b77db1c322b15c8a7e631e1b7e5e00aa4bbdc1" translate="yes" xml:space="preserve">
          <source>Select a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c88ceb23c8f2f672ef8b81632044646cfa74cf" translate="yes" xml:space="preserve">
          <source>Select an enviromnent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0dd70bc1ef133b28ad83ca09dbee5371a6f23c" translate="yes" xml:space="preserve">
          <source>Select an environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803762a449787e320cd3cc9bd0343dbf54820214" translate="yes" xml:space="preserve">
          <source>Select only files that have been added (&lt;code&gt;A&lt;/code&gt;), deleted (&lt;code&gt;D&lt;/code&gt;), modified (&lt;code&gt;M&lt;/code&gt;), and/or have had their type changed (&lt;code&gt;T&lt;/code&gt;). Any combination of filter characters may be used, including no filter characters. Use &lt;code&gt;*&lt;/code&gt; to select all paths if a file matches other criteria in the comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb61b139bc0d46ad214388921cba450639a2c07" translate="yes" xml:space="preserve">
          <source>Select only files that have been added (&lt;code&gt;A&lt;/code&gt;), deleted (&lt;code&gt;D&lt;/code&gt;), modified (&lt;code&gt;M&lt;/code&gt;), and/or have had their type changed (&lt;code&gt;T&lt;/code&gt;). Any combination of filter characters may be used, including no filter characters. Use &lt;code&gt;*&lt;/code&gt; to select all paths if a file matches other criteria in the comparison. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211e60731862d4cd65a7be244bdb077c90d7d79f" translate="yes" xml:space="preserve">
          <source>Select or de-select &lt;strong&gt;Delete&lt;/strong&gt;, &lt;strong&gt;Grant&lt;/strong&gt;, &lt;strong&gt;Read&lt;/strong&gt;, and/or &lt;strong&gt;Update&lt;/strong&gt; to update the permissions list for the user or group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7174b7f6f9e87403229ebf1d5a0ba5800b2b1a7e" translate="yes" xml:space="preserve">
          <source>Select or de-select &lt;strong&gt;Read&lt;/strong&gt;, &lt;strong&gt;Update&lt;/strong&gt;, &lt;strong&gt;Delete&lt;/strong&gt;, and &lt;strong&gt;Grant&lt;/strong&gt; to update the permissions list for the user or group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16cf8c4301ef0b68f5796220e2484d2c62608be" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;Details&lt;/strong&gt; tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f451cb0c162f32fab35681f5a91c8ddf4fc8a8" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;Groups&lt;/strong&gt; group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46c9b46b004270e7e64827ac3682a3f7253eefe" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;Items&lt;/strong&gt; tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8b466eca55c2b9f48abb9d6cd2ef7b3a42ce00" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;Validation Client&lt;/strong&gt; option. Click &lt;strong&gt;Create Client&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2c5fb5f099697bdf3b8019356374ea36fd8a95" translate="yes" xml:space="preserve">
          <source>Select the file type: &lt;strong&gt;Attributes&lt;/strong&gt;, &lt;strong&gt;Definitions&lt;/strong&gt;, &lt;strong&gt;Files&lt;/strong&gt;, &lt;strong&gt;Recipes&lt;/strong&gt;, &lt;strong&gt;Templates&lt;/strong&gt;, or &lt;strong&gt;Root Files&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfddd75a04d31035609883d6928e71d06f9c4685" translate="yes" xml:space="preserve">
          <source>Select the omnibus installer for the desired platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4e8e2d0338ca30919508fcd48c7041e43bf54a" translate="yes" xml:space="preserve">
          <source>Send Email</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1f2e1e67e6a25f817e04ac2f6aae00be3b70fb" translate="yes" xml:space="preserve">
          <source>Send a &lt;code&gt;DELETE&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b4dfde1907208a3154c477f724ba318f3d38bd" translate="yes" xml:space="preserve">
          <source>Send a &lt;code&gt;HEAD&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d77bdf19cfacdeba99c8fd9b0f813eff97672d3" translate="yes" xml:space="preserve">
          <source>Send a &lt;code&gt;POST&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a530526ab8ca0a1d37797afa35cdcfbffbffeec" translate="yes" xml:space="preserve">
          <source>Send a &lt;code&gt;PUT&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2748e7c95240ac26b28c0aed077c40e4f0a6573" translate="yes" xml:space="preserve">
          <source>Send a GitHub pull request for the changes, and then update the Chef ticket with the appropriate information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4300bd38ab98928c215ee201f0aa639442c1d4fd" translate="yes" xml:space="preserve">
          <source>Send an &lt;code&gt;OPTIONS&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0353f5b06b03b7a196606c4ca4ee9e7bc48b84" translate="yes" xml:space="preserve">
          <source>Send the output of the command run by this &lt;strong&gt;execute&lt;/strong&gt; resource block to the chef-client event stream. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108133b4c773c491f1451785e5db6f543039c245" translate="yes" xml:space="preserve">
          <source>SendGrid Mail Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e059360b7cd52b05445605448b016cdd63d296" translate="yes" xml:space="preserve">
          <source>Sending a notification to chat application if an audit run fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05932c0bb4e63ed4c0ee194eb83fa3938b778585" translate="yes" xml:space="preserve">
          <source>Sending email if a chef-client run fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482b424c47940c9424b61e40a3d16a26b12d18b8" translate="yes" xml:space="preserve">
          <source>Server Admins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798d6016f1b93c295aa47aeab76fc1b351c35723" translate="yes" xml:space="preserve">
          <source>Server Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa0fc8b389078292a95c0615f072b7760770238" translate="yes" xml:space="preserve">
          <source>Server Data Storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b07c25a5d20b4b20726b1ddc846747a3a1bdee" translate="yes" xml:space="preserve">
          <source>Server Tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f20796d34fdef538eae233f2493e71fb9e3bff4" translate="yes" xml:space="preserve">
          <source>Service Name, Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfd0bbe9114d101fcbbb4bb130507c478f7edf1" translate="yes" xml:space="preserve">
          <source>Service Subcommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6928af6d355b370132b226734d131d17d4fd9332" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;http_proxy&lt;/code&gt; and &lt;code&gt;https_proxy&lt;/code&gt; to the location of your proxy server. This value &lt;strong&gt;MUST&lt;/strong&gt; be lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d49104df9919d74ba54be85ec3eb9662f54e5e" translate="yes" xml:space="preserve">
          <source>Set System Ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04176336d8d9b0b04615804b02ca7b231b22866a" translate="yes" xml:space="preserve">
          <source>Set Up Repo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2edf38cb3dc08f5d2c6a8a6de405fa02f1e99b" translate="yes" xml:space="preserve">
          <source>Set a timeout for a command. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29a7b5d0e13027620b64cfed29c929616f59b7f" translate="yes" xml:space="preserve">
          <source>Set for more verbose outputs. Use &lt;code&gt;-VV&lt;/code&gt; for maximum verbosity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636f038b5f542e5014c6c1c631b5d9785ac55386" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;HOME&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41de4adbbb4da2e99849d84b08bedcfd5f66222" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;MAILTO&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341e5797da6954ee927ac7a990582d54c9027cb0" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;PATH&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d6fbba7bc53355888db054e9cd5be798a43d9" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;SHELL&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1016ba0b38ba67c0116a062baf24bda88e27fd" translate="yes" xml:space="preserve">
          <source>Set the Cache Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc09e893100bc49b6b26131086fe70b0510439f1" translate="yes" xml:space="preserve">
          <source>Set the Text Editor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e11a116d0672d6e9daf07cd0c43b0d2bf5c5e03" translate="yes" xml:space="preserve">
          <source>Set the appropriate permissions: &lt;strong&gt;Delete&lt;/strong&gt;, &lt;strong&gt;Grant&lt;/strong&gt;, &lt;strong&gt;Read&lt;/strong&gt;, and/or &lt;strong&gt;Update&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f673e3c316ad4dd71bd0b6c344221fc850e9aca5" translate="yes" xml:space="preserve">
          <source>Set the appropriate permissions: &lt;strong&gt;Read&lt;/strong&gt;, &lt;strong&gt;Update&lt;/strong&gt;, &lt;strong&gt;Delete&lt;/strong&gt;, and &lt;strong&gt;Grant&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8c75485d38a60ca9576e01d73dd5663cb9436d" translate="yes" xml:space="preserve">
          <source>Set the clone depth to &lt;code&gt;5&lt;/code&gt;. If a depth other than &lt;code&gt;5&lt;/code&gt; is required, use the &lt;code&gt;depth&lt;/code&gt; property instead of &lt;code&gt;shallow_clone&lt;/code&gt;. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7525d21f290b4e741462589771757917f07577e" translate="yes" xml:space="preserve">
          <source>Set the current working directory before running a command. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69545335b1178ff1c12a5c60bbd9d85fd38a4937" translate="yes" xml:space="preserve">
          <source>Set the following in &lt;code&gt;/etc/opscode/chef-server.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fa58de6bb88dacada5463a7169fa35ba7a5309" translate="yes" xml:space="preserve">
          <source>Set the log level. Options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;. When this is set to &lt;code&gt;false&lt;/code&gt;, notifications about individual resources being processed are suppressed (and are output at the &lt;code&gt;:info&lt;/code&gt; logging level). Setting this to &lt;code&gt;false&lt;/code&gt; can be useful when a chef-client is run as a daemon. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cac112a5f3a84b30f1e4453b1f5ba0dfefc53b" translate="yes" xml:space="preserve">
          <source>Set the priority mapping for a provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa868c384113f4fc06d506790d5b2e087afc8c7" translate="yes" xml:space="preserve">
          <source>Set the priority mapping for a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e57ff7a0d5512fc9d5dce74b2156abf8c11eeef" translate="yes" xml:space="preserve">
          <source>Set the save frequency. Pattern: &lt;code&gt;{ &quot;seconds&quot; =&amp;gt; &quot;keys&quot;, &quot;seconds&quot; =&amp;gt; &quot;keys&quot;, &quot;seconds&quot; =&amp;gt; &quot;keys&quot; }&lt;/code&gt;. Default value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb3f1fcb6820dc4b00d567e855ccb4db001f380" translate="yes" xml:space="preserve">
          <source>Set the system Ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2730a009a127ae9e74c56d7a5684e73d261039d3" translate="yes" xml:space="preserve">
          <source>Set the verify mode for HTTPS requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996b8aef8b9040c790745fe67fff6e90741c1845" translate="yes" xml:space="preserve">
          <source>Set this header to the following value: &lt;code&gt;version=1.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253d8f1411f74d6d91a6a7e6c14f2e421f3600a8" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to download a gem from the path specified by the &lt;code&gt;source&lt;/code&gt; property (and not from RubyGems). Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010cc05490d38e23b6e668da26d82bd8dd80ca19" translate="yes" xml:space="preserve">
          <source>Set up a GitHub account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20f6524c8ca6bf6b47ae2e3ca9e585a3f6646b5" translate="yes" xml:space="preserve">
          <source>Set up a topic branch to track &lt;code&gt;chef/master&lt;/code&gt;. This allows commits to be easily rebased prior to merging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855e8a0003edad0269eb03857af48a834550cdf8" translate="yes" xml:space="preserve">
          <source>Set up the chef-repo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e52f510ba71ef3469fe021b15f6e4d93ec3550" translate="yes" xml:space="preserve">
          <source>Set up the cookbook file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726324297d0901ec7afc3600b406517c13f5849d" translate="yes" xml:space="preserve">
          <source>Sets the log mask to &lt;code&gt;LOG_DEBUG&lt;/code&gt; for this job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb449f71834cd30ec14d00c9d50ba85c232186d3" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8541bd3f55e0b3588015b59483cf2f910d6fdba6" translate="yes" xml:space="preserve">
          <source>Setup &amp;amp; Config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f668572456b5b6966001ecb6caeb9e975ad37e1b" translate="yes" xml:space="preserve">
          <source>Several factors may influence server scalability. All server sizing recommendations are based on these assumptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db36c5eec99ca603f9ef4649b2d8f6dd72538630" translate="yes" xml:space="preserve">
          <source>Shell commands will be run from a management workstation. For example, something like &lt;code&gt;%x[ls -lash /opt/only-on-a-node]&lt;/code&gt; would give you the directory listing for the &amp;ldquo;opt/only-on-a-node&amp;rdquo; directory or a &amp;ldquo;No such file or directory&amp;rdquo; error if the file does not already exist locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d4b7775b82290e4f84de4f6d245d5b06e390e6" translate="yes" xml:space="preserve">
          <source>Shelling Out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb5a924ee9a768944d8839a304bda640ca279e2" translate="yes" xml:space="preserve">
          <source>Short name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f575c18dabb465d5418cbcc7201727d737c2b4e" translate="yes" xml:space="preserve">
          <source>Should not be run in a Chef server configuration with an external PostgreSQL database; &lt;a href=&quot;https://github.com/chef/knife-ec-backup&quot;&gt;use knife ec backup&lt;/a&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b545e0036464a2b8e8ef2d089cf7da86cfc60f3" translate="yes" xml:space="preserve">
          <source>Should not be used in a production environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffef68f7e67ae842ae1695eac25ec3c2d5378f9a" translate="yes" xml:space="preserve">
          <source>Should only be enabled for environments that require FIPS 140-2 compliance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d724d391cc99c662849f3521f6d0d8a7411d2d02" translate="yes" xml:space="preserve">
          <source>Should the &lt;code&gt;database.yml&lt;/code&gt; file be in a &lt;code&gt;.gitignore&lt;/code&gt; file?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553fb5db8fee02242582a7eba1683e95e1ac392e" translate="yes" xml:space="preserve">
          <source>Show a &lt;code&gt;NULL&lt;/code&gt; character (&lt;code&gt;\0&lt;/code&gt;) instead of white space as the separator. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6562a1200b1cfc81b2256430263f2e4131602d3f" translate="yes" xml:space="preserve">
          <source>Show a diff when a file changes. Default: &lt;code&gt;--diff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cc8b9e83d29db6aefd724bb69461d9e136e761" translate="yes" xml:space="preserve">
          <source>Show a list of file names. Set to &lt;code&gt;false&lt;/code&gt; to view &lt;code&gt;ls&lt;/code&gt;-like output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ac11d8ac309de8509d51481dbb5a6af485a512" translate="yes" xml:space="preserve">
          <source>Show a list of file names. Set to &lt;code&gt;false&lt;/code&gt; to view &lt;code&gt;ls&lt;/code&gt;-like output. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efb344c43b37595854d88891eef3e2493280038" translate="yes" xml:space="preserve">
          <source>Show a list of public keys that have expired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24c3a05e46cee38535dd304311b8140254dbdf0" translate="yes" xml:space="preserve">
          <source>Show a list of public keys that have not expired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf8799b1ba65d66b7c82476deadf63a39b4cd66" translate="yes" xml:space="preserve">
          <source>Show a list of public keys, including URIs and expiration status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099b50df69108d9eb7fdfa2ec6397641915675a1" translate="yes" xml:space="preserve">
          <source>Show all organizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474c4cffde3caa4cd06abfd4874ed1465b783d7f" translate="yes" xml:space="preserve">
          <source>Show data after a destructive operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e333e8028caf1db35ff1b57d1ae689495939ee1" translate="yes" xml:space="preserve">
          <source>Show dependencies in a visual tree structure (including duplicates, if they exist).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b83405d08ad6ede3f3d804143315d78d8f6b21" translate="yes" xml:space="preserve">
          <source>Show dependencies in a visual tree structure (including duplicates, if they exist). Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8086f58d58c0f32d0d215deae0c3defd41818f" translate="yes" xml:space="preserve">
          <source>Show directories with trailing slashes (/). Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d4d4b98bfbce032cb3c3fed28758f66f9a6525" translate="yes" xml:space="preserve">
          <source>Show files in the local chef-repo instead of a remote location. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5b4edbe2cfb7415c685bfe0e114bcdfc23aff4" translate="yes" xml:space="preserve">
          <source>Show formatter output instead of logger output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512ec8e537eeaf02dc1fa911ad4b5d6d5b5a73b3" translate="yes" xml:space="preserve">
          <source>Show help for the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d90d7587e107b11f816add2986a275d2c50f2db" translate="yes" xml:space="preserve">
          <source>Show if a group belongs to a system group. Set to &lt;code&gt;true&lt;/code&gt; if the group belongs to a system group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4509ae3ec11111163529be22f79237cd16c332d5" translate="yes" xml:space="preserve">
          <source>Show local files instead of remote files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb963edd41a291deb975c4e6dfe9f8130e252dca" translate="yes" xml:space="preserve">
          <source>Show logger output instead of formatter output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7999857aeb685aa6f7ea34eeec38f505a838e7" translate="yes" xml:space="preserve">
          <source>Show only matching object IDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97661f6750df208b58041f3d2d04cdbbc2531695" translate="yes" xml:space="preserve">
          <source>Show only matching versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb404becdeb3d8224603418d9f6063e262881680" translate="yes" xml:space="preserve">
          <source>Show only one column of results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8154f441ad6b08d107eb684062d3c8c0e6f44b8c" translate="yes" xml:space="preserve">
          <source>Show only one column of results. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e27ca6fc33a4404f30a933c017e6ed6190db14d" translate="yes" xml:space="preserve">
          <source>Show only the names of files with a status of &lt;code&gt;Added&lt;/code&gt;, &lt;code&gt;Deleted&lt;/code&gt;, &lt;code&gt;Modified&lt;/code&gt;, or &lt;code&gt;Type Changed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92a562e2c94dcd763f84b92a4c1c1aa611a23e4" translate="yes" xml:space="preserve">
          <source>Show only the names of modified files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10f3cd250d08ac716ca78ea207f8fec35500fcb" translate="yes" xml:space="preserve">
          <source>Show only the run-list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60af610d88f8359e892b60f4f5022e21daf24caa" translate="yes" xml:space="preserve">
          <source>Show that a chef-client run has failed when uncaught exceptions were raised during a chef-client run. An exception handler runs when the &lt;code&gt;failed?&lt;/code&gt; indicator is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b51f08d06fb86e1e1cf2508316a01d485fc4ffe" translate="yes" xml:space="preserve">
          <source>Show that a chef-client run succeeded when uncaught exceptions were not raised during a chef-client run. A report handler runs when the &lt;code&gt;success?&lt;/code&gt; indicator is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34cc1fb4f8de7edb1cf12749e3fa38b2c6fe38c" translate="yes" xml:space="preserve">
          <source>Show that a cookbook has a dependency on another cookbook. Use a version constraint to define dependencies for cookbook versions: &lt;code&gt;&amp;lt;&lt;/code&gt; (less than), &lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal to), &lt;code&gt;=&lt;/code&gt; (equal to), &lt;code&gt;&amp;gt;=&lt;/code&gt; (greater than or equal to; also known as &amp;ldquo;optimistically greater than&amp;rdquo;, or &amp;ldquo;optimistic&amp;rdquo;), &lt;code&gt;~&amp;gt;&lt;/code&gt; (approximately greater than; also known as &amp;ldquo;pessimistically greater than&amp;rdquo;, or &amp;ldquo;pessimistic&amp;rdquo;), or &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than). This field requires that a cookbook with a matching name and version exists on the Chef server. When the match exists, the Chef server includes the dependency as part of the set of cookbooks that are sent to the node when the chef-client runs. It is very important that the &lt;code&gt;depends&lt;/code&gt; field contain accurate data. If a dependency statement is inaccurate, the chef-client may not be able to complete the configuration of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bdca8d2abffc91a090f07c2637feea7bceca36" translate="yes" xml:space="preserve">
          <source>Show that a cookbook has a dependency on another cookbook. Use a version constraint to define dependencies for cookbook versions: &lt;code&gt;&amp;lt;&lt;/code&gt; (less than), &lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal to), &lt;code&gt;=&lt;/code&gt; (equal to), &lt;code&gt;&amp;gt;=&lt;/code&gt; (greater than or equal to; also known as &amp;ldquo;optimistically greater than&amp;rdquo;, or &amp;ldquo;optimistic&amp;rdquo;), &lt;code&gt;~&amp;gt;&lt;/code&gt; (approximately greater than; also known as &amp;ldquo;pessimistically greater than&amp;rdquo;, or &amp;ldquo;pessimistic&amp;rdquo;), or &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than). This field requires that a cookbook with a matching name and version exists on the Chef server. When the match exists, the Chef server includes the dependency as part of the set of cookbooks that are sent to the node when the chef-client runs. It is very important that the &lt;code&gt;depends&lt;/code&gt; field contain accurate data. If a dependency statement is inaccurate, the chef-client may not be able to complete the configuration of the system. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af25dd9cfd1e1ef6266d407680a5796b0069bcb" translate="yes" xml:space="preserve">
          <source>Show that a cookbook has a supported platform. Use a version constraint to define dependencies for platform versions: &lt;code&gt;&amp;lt;&lt;/code&gt; (less than), &lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal to), &lt;code&gt;=&lt;/code&gt; (equal to), &lt;code&gt;&amp;gt;=&lt;/code&gt; (greater than or equal to), &lt;code&gt;~&amp;gt;&lt;/code&gt; (approximately greater than), or &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than). To specify more than one platform, use more than one &lt;code&gt;supports&lt;/code&gt; field, once for each platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f8acd6fffa6e54b878ac16d687c628c615d679" translate="yes" xml:space="preserve">
          <source>Show the corresponding URIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058a533f71ffd6860b08092512e1e3e44ed22a33" translate="yes" xml:space="preserve">
          <source>Signed Headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ca69b379c43e849aa9dacd43ed849c1765b0f1" translate="yes" xml:space="preserve">
          <source>Signed header authentication is used to validate communications between the Chef server and any node that is being managed by the Chef server. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the Chef server. The private key is stored locally on each node and is kept separate from node data (typically in the &lt;code&gt;/etc/chef/client.pem&lt;/code&gt; directory). Each request to the Chef server by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870745091e7a088cf7be5f53451e681936d2ca8c" translate="yes" xml:space="preserve">
          <source>Simple Email</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee9293a410f208b7d0c9fa6300a2cb0904c2ad9" translate="yes" xml:space="preserve">
          <source>Since recipes are written in Ruby, they can be written to attempt to handle error conditions using the &lt;code&gt;rescue&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941bd22a52d10dd66ba9a8053fd99a9013103004" translate="yes" xml:space="preserve">
          <source>Single (&amp;lsquo; &amp;lsquo;) vs. double (&amp;rdquo; &amp;rdquo;) is important. This is because a backslash () needs to be included in the string, instead of having Ruby interpret it as an escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4d4454fa542020010dcc0941f74a0287267e60" translate="yes" xml:space="preserve">
          <source>Single digit cookbook versions are not allowed. Cookbook versions must specify at least the major and minor version. For example, use &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;1.0.1&lt;/code&gt;; do not use &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18429c4c179ce1645210720ee02cbb2c376c42f7" translate="yes" xml:space="preserve">
          <source>Six methods are present in the Recipe DSL to help verify the registry during a chef-client run on the Microsoft Windows platform&amp;mdash;&lt;code&gt;registry_data_exists?&lt;/code&gt;, &lt;code&gt;registry_get_subkeys&lt;/code&gt;, &lt;code&gt;registry_get_values&lt;/code&gt;, &lt;code&gt;registry_has_subkeys?&lt;/code&gt;, &lt;code&gt;registry_key_exists?&lt;/code&gt;, and &lt;code&gt;registry_value_exists?&lt;/code&gt;&amp;mdash;these helpers ensure the &lt;strong&gt;powershell_script&lt;/strong&gt; resource is idempotent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430b38bf6daa7f9164b164b2ffd540b5a3afe2fd" translate="yes" xml:space="preserve">
          <source>Slack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc4b78c9038d599cbfa936b3456725d6245f245" translate="yes" xml:space="preserve">
          <source>Slackware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff64b5b1b7e8429a28976d4ee46fc392389f6234" translate="yes" xml:space="preserve">
          <source>So far, the scenarios have not described any data loss. When the hosts in the high availability pair are synced, either can be lost and the data will be safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce21aaa43c133c340f3613ee36321445059b9b48" translate="yes" xml:space="preserve">
          <source>So how does the chef-client determine which value should be applied? Keep reading to learn more about how attributes work, including more about the types of attributes, where attributes are saved, and how the chef-client chooses which attribute to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef895ea098bd4e3eeda56127f371ccd7b3a3543" translate="yes" xml:space="preserve">
          <source>Software Requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c844467c29184f3927eee863e39e0d8b31248fec" translate="yes" xml:space="preserve">
          <source>Solaris. For Solaris-related platforms, the &lt;code&gt;platform_family&lt;/code&gt; method does not support the Solaris platform family and will default back to &lt;code&gt;platform_family = platform&lt;/code&gt;. For example, if the platform is OmniOS, the &lt;code&gt;platform_family&lt;/code&gt; is &lt;code&gt;omnios&lt;/code&gt;, if the platform is SmartOS, the &lt;code&gt;platform_family&lt;/code&gt; is &lt;code&gt;smartos&lt;/code&gt;, and so on. All platform variants of Solaris return &lt;code&gt;solaris&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc93acaa44f3f647fae2ed40110f88b9561a474" translate="yes" xml:space="preserve">
          <source>Solo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ba66b00d2116c0456b1cfb49cfbdde085296a7" translate="yes" xml:space="preserve">
          <source>Some commands should not be entered when interacting with a running service while using the command shell, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309eaa10ae0445ed83f56d09502af5e9b8c657a2" translate="yes" xml:space="preserve">
          <source>Some important aspects of policy include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3056afb0e98b38bae729cd79c00c846606c7c7cd" translate="yes" xml:space="preserve">
          <source>Some important components of cookbooks include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5726d4961bdf1c20ef98ce7bf3130ddc666c5ab" translate="yes" xml:space="preserve">
          <source>Some important components of workstations include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faad69683434d3f0ae3ea82d2a61811b447269d4" translate="yes" xml:space="preserve">
          <source>Some knife commands, such as &lt;code&gt;knife data bag edit&lt;/code&gt;, require that information be edited as JSON data using a text editor. For example, the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d9415bcfef97af650abde4e489f0e0f6ac314b" translate="yes" xml:space="preserve">
          <source>Some more complex ways to debug issues with a chef-client run include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91de22f8f64ecf72d6dcb622de7640d11b03e037" translate="yes" xml:space="preserve">
          <source>Some of the optional knife.rb settings are used often, such as the template file used in a bootstrap operation. The frequency of use of any option varies from organization to organization, so even though the following settings are often added to a knife.rb file, they may not be the right settings to add for every organization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b1aa5e25b2012945a2c4c565d1ec4250e986fb" translate="yes" xml:space="preserve">
          <source>Some of the settings are included only because knife checks for a value in the knife.rb file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8653006c96ce144ba3df487124fe238396ac2535" translate="yes" xml:space="preserve">
          <source>Some organizations choose to have all data bags use the same secret and secret file, rather than have a unique secret and secret file for each data bag. To use the same secret and secret file for all data bags, add the following to knife.rb:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d400b929e737e7dd81b8cdf75b98f6c716cdeba8" translate="yes" xml:space="preserve">
          <source>Some other important things to know when using the &lt;code&gt;rights&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d53a498ecb934434c4a991425558b3ddbf5323c" translate="yes" xml:space="preserve">
          <source>Some settings are better left to Ohai, which will get the value at the start of the chef-client run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5dd92abaca2e0f36774336b1eca2a88492fe624" translate="yes" xml:space="preserve">
          <source>Some simple ways to quickly identify common issues that can trigger recipe and/or chef-client run failures include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65da55d4917c106520483a90ca26de2074e859a9" translate="yes" xml:space="preserve">
          <source>Sometimes DRBD hedges its bets, and puts both nodes in a pair into secondary mode. When this happens, you can look at the contents of &lt;code&gt;/proc/drbd&lt;/code&gt; on both hosts and see if either of them is showing out of sync. If they are both &lt;code&gt;oos:0&lt;/code&gt;, just pick one and promote it to primary using the &lt;code&gt;drbdadm primary pc0&lt;/code&gt; command. If one or both of the hosts is out of sync, choose the one with the lower amount of &lt;code&gt;oos&lt;/code&gt; and promote it to primary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036ba04b504c4ffcb4809eb22ce0be12cbbe40a8" translate="yes" xml:space="preserve">
          <source>Sometimes a resource needs to be run before every other resource or after all resources have been added to the resource collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e20502f3ac3e048d38a06be55eb38337438b0f9" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to ensure that an operating system&amp;rsquo;s package cache is up to date before installing packages. For example, on Debian or Ubuntu systems, the Apt cache should be updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43110635e937fe0aaa38d7f582d14842805dc0eb" translate="yes" xml:space="preserve">
          <source>Sometimes it may be necessary to stop processing a recipe and/or stop processing the entire chef-client run. There are a few ways to do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9354741637844ffb945153f939c3136391dae47b" translate="yes" xml:space="preserve">
          <source>Sometimes when a role isn&amp;rsquo;t fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153d9b3ec9966cd20d2473ea154ddc251ce16673" translate="yes" xml:space="preserve">
          <source>Sort a list by last run time, descending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c797a85a14b3b2ad693969b2aa7643d90e12de7d" translate="yes" xml:space="preserve">
          <source>Spaces and Directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8151c23c073cec08422521c2f183a0461f435f" translate="yes" xml:space="preserve">
          <source>Special Characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78757c8805b3a35326ae8a0d77ca7d729992df5" translate="yes" xml:space="preserve">
          <source>Specifies a gem dependency to be installed via the &lt;strong&gt;chef_gem&lt;/strong&gt; resource after all cookbooks are synchronized, but before any other cookbook loading is done. Use this attribute once per gem dependency. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab49d5658ca6eed9b28ff9867b2adbfa943cf53" translate="yes" xml:space="preserve">
          <source>Specifies a resource type&amp;mdash;such as &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, or &lt;code&gt;service&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ef6fe4b18733ea14448df15e487627133acd2" translate="yes" xml:space="preserve">
          <source>Specifies if a daemon expects to be run as if it were launched from &lt;code&gt;inetd&lt;/code&gt;. Set to &lt;code&gt;wait =&amp;gt; true&lt;/code&gt; to pass standard input, output, and error file descriptors. Set to &lt;code&gt;wait =&amp;gt; false&lt;/code&gt; to call the &lt;code&gt;accept&lt;/code&gt; system call on behalf of the job, and then pass standard input, output, and error file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605ca6c1bd8063871b1b3150929be8a675834796" translate="yes" xml:space="preserve">
          <source>Specifies that a notification should be run immediately, per resource notified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a90723e27b34074de86b6f49ddacffc8f65b8ee" translate="yes" xml:space="preserve">
          <source>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1c178e4ab6ce9b4a445043f7580e1b07941cc6" translate="yes" xml:space="preserve">
          <source>Specify Resource Action?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17686fac62dfc0eb2f44dd0502cc682c732c5bc9" translate="yes" xml:space="preserve">
          <source>Specify a Hash of environment variables to be set. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16dfe36a709164e4e9e488681b65ad1a1fe984e" translate="yes" xml:space="preserve">
          <source>Specify how permissions are applied to children. Possible values: &lt;code&gt;true&lt;/code&gt; to inherit both child directories and files; &lt;code&gt;false&lt;/code&gt; to not inherit any child directories or files; &lt;code&gt;:containers_only&lt;/code&gt; to inherit only child directories (and not files); &lt;code&gt;:objects_only&lt;/code&gt; to recursively inherit files (and not child directories).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5794f8322b6b7b973ac18a0644c3230b8e876f" translate="yes" xml:space="preserve">
          <source>Specify if &lt;code&gt;initgroups&lt;/code&gt; is called before running a job. Default value: &lt;code&gt;true&lt;/code&gt; (starting with Mac OS X 10.5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209ec2f6f6b32254ae3c9e6d9f74f8a7c915faa1" translate="yes" xml:space="preserve">
          <source>Specify if a job can be run only one time. Set this value to &lt;code&gt;true&lt;/code&gt; if a job cannot be restarted without a full machine reboot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dd98470870efef8938ec85280ef0314676bdf3" translate="yes" xml:space="preserve">
          <source>Specify if launchd has a job wait for a debugger to attach before executing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae93a1ad3396e034dede7a829b3b0bd1966f449f" translate="yes" xml:space="preserve">
          <source>Specify if messages will stop being sent to the RabbitMQ queue when it is at capacity. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fa2441ae8ea873ac2aa0c47542057fabb65541" translate="yes" xml:space="preserve">
          <source>Specify if the &lt;code&gt;_status&lt;/code&gt; endpoint in the Chef server API will fail if the monitored queue is at capacity. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8b90ea6a81d45e884e6ab0b9c4869f963cc197" translate="yes" xml:space="preserve">
          <source>Specify if the Chef server will start when the monitored RabbitMQ queue is full. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c973ef7c2aa84f71b3c50b3facc9a58598ac2cb" translate="yes" xml:space="preserve">
          <source>Specify if the kernel on the node should consider this daemon to be low priority during file system I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7ddca2511472ac28b233447c3d269c78432ae4" translate="yes" xml:space="preserve">
          <source>Specify if the queue length monitor is enabled. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de62c967710d51b28ed39962682e2493a9bb5b33" translate="yes" xml:space="preserve">
          <source>Specify if the rabbitmq-management plugin is enabled. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d51664adce098c95e2846fc8d7fdf96f9fd3a9" translate="yes" xml:space="preserve">
          <source>Specify services to be registered with the bootstrap subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a7437ef82fdd84050f3f4085b7a95af4cdebe0" translate="yes" xml:space="preserve">
          <source>Specify that a cookbook is private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb9c7dd3da4a06c9e9e38690d30883e8a1e3d71" translate="yes" xml:space="preserve">
          <source>Specify that a lower priority machine maintains the master role, even if a higher priority machine is available. (This setting configures the &lt;code&gt;noprempt&lt;/code&gt; value in VRRP.) Default value: &lt;code&gt;'true'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5914e65b232d42a3fb670fab1b6bb31afe0d3891" translate="yes" xml:space="preserve">
          <source>Specify the group that a command will run as. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd8357b5fe59cdfce3c7420019d3b89583cc7f5" translate="yes" xml:space="preserve">
          <source>Specify the location to which the file should be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc645980f9477aff5e34296a48fad663e6e11cf" translate="yes" xml:space="preserve">
          <source>Specify the user that a command will run as. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77f578c80d27fdb59ed9e2e8448894bc14b8e04" translate="yes" xml:space="preserve">
          <source>Specify with .gemrc File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f0ee1ecb682132114e66150371af0761840812" translate="yes" xml:space="preserve">
          <source>Specify with Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a215ce5b3479443bc212de87568131d10601f5f" translate="yes" xml:space="preserve">
          <source>Specify with String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279ae3102def70c97f0550b16f1bc89b82bd38e7" translate="yes" xml:space="preserve">
          <source>Split Brains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204ad2c9fccd09d57ab83acd1deaffe69d45f449" translate="yes" xml:space="preserve">
          <source>Split the Tmux window. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e104fb11279a35cd0d10a8515188ad6edf2acad9" translate="yes" xml:space="preserve">
          <source>Splunk Storm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d33ad534e80dbf8995043931d7f963edea08ce" translate="yes" xml:space="preserve">
          <source>Stages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d10323c27ec5f9982ad73377fd582ff949840f8" translate="yes" xml:space="preserve">
          <source>Standalone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952f375412e89ff213a8aca383d18e5691354347" translate="yes" xml:space="preserve">
          <source>Start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae01930c3f98c3a13a9231bde13fb082772dcf71" translate="yes" xml:space="preserve">
          <source>Start Chef server 12:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccccc8242f46e5fb619cf87e6aa790f107a011c" translate="yes" xml:space="preserve">
          <source>Start Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa897f6537b11570d4ab73b1c404c9e3480b580b" translate="yes" xml:space="preserve">
          <source>Start a job every time a file system is mounted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15e19e435bd8cf3289c038866d44f6259852941" translate="yes" xml:space="preserve">
          <source>Start a service, and keep it running until stopped or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3206b178b43c9b13b3ea952fcc5cbbeb4706d51d" translate="yes" xml:space="preserve">
          <source>Start handler functionality was added when Chef started building add-ons for the Chef server. The Reporting add-on is designed to create reporting data based on a chef-client run. And since Reporting needs to be able to collect data for the entire chef-client run, Reporting needs to be enabled before anything else happens at the start of the chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439e635867b3244a82673b9700d7073a4aa4c5f2" translate="yes" xml:space="preserve">
          <source>Start handlers are made available to the chef-client run in one of the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6872f7bd43501264f897719703181b58055f594d" translate="yes" xml:space="preserve">
          <source>Start handlers can be distributed using the &lt;strong&gt;chef-client&lt;/strong&gt; cookbook, which will install the handler on the target node during the initial configuration of the node. This ensures that the start handler is always present on the node so that it is available to the chef-client at the start of every run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eddf7da1c67c1b35f245b92438931bb91d3dd96" translate="yes" xml:space="preserve">
          <source>Start the &lt;strong&gt;postgresql&lt;/strong&gt; service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0913bdaca423d1106ac39ccd2d24e2f5125545" translate="yes" xml:space="preserve">
          <source>Start the &lt;strong&gt;redis_lb&lt;/strong&gt; service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa6dc3036342b4a03011b03ca4178853231d781" translate="yes" xml:space="preserve">
          <source>Start the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51e9f3220d1ba7f23586abd85466f045e06392a" translate="yes" xml:space="preserve">
          <source>Start with 2 CPU cores and 8GB of RAM, which is equivalent to an Amazon EC2 &lt;code&gt;m3.large&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a8c66efaa7504d9cd2ba867f0faef750911d87" translate="yes" xml:space="preserve">
          <source>Start with 4 CPU cores and 16GB of RAM, which is equivalent to an Amazon EC2 &lt;code&gt;m3.xlarge&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aee0771bc6b2c7fcc2616e331cfeddb28ae185e" translate="yes" xml:space="preserve">
          <source>Start with 8 CPU cores and 32GB of RAM for each host, which is equivalent to an Amazon EC2 &lt;code&gt;m3.2xlarge&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8daa8e106d36043fbf7702c01cd690d3a0716718" translate="yes" xml:space="preserve">
          <source>Start with 8 CPU cores and 32GB of RAM, which is equivalent to an Amazon EC2 &lt;code&gt;m3.2xlarge&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3049b2e0322c0aa99ba5c84d27f8a1a9c98f22" translate="yes" xml:space="preserve">
          <source>Starter Kit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e549f75542f8d472dd70b7ec673af2662fb55e" translate="yes" xml:space="preserve">
          <source>Starting all of the back-end services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac3111ccb261cd3ddc6eaf909d07c38df9ceb4b" translate="yes" xml:space="preserve">
          <source>Starting with Chef server 12.0, this functionality is built into the chef-server-ctl command-line tool as part of the following arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52c803e67cd23d324ca8b04375210b37cae8845" translate="yes" xml:space="preserve">
          <source>Starting with Chef server 12.4.1, users who are members of the server-admins group may use the &lt;code&gt;user-create&lt;/code&gt;, &lt;code&gt;user-delete&lt;/code&gt;, &lt;code&gt;user-edit&lt;/code&gt;, &lt;code&gt;user-list&lt;/code&gt;, and &lt;code&gt;user-show&lt;/code&gt; arguements to manage user accounts on the Chef server via the &lt;code&gt;knife user&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bef82228e7acb3556796899155a03830fc8e87" translate="yes" xml:space="preserve">
          <source>Starting with Reporting 1.6.0, the Chef MLSA must be accepted when reconfiguring the product. If the Chef MLSA has not already been accepted, the reconfigure process will prompt for a &lt;code&gt;yes&lt;/code&gt; to accept it. Or run &lt;code&gt;opscode-reporting-ctl reconfigure --accept-license&lt;/code&gt; to automatically accept the license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a760c90acc023f05c9d70237d1b27fc138c0eecb" translate="yes" xml:space="preserve">
          <source>Starting with chef-client 12, SSL certificate validation is enabled by default and the &lt;code&gt;knife ssl fetch&lt;/code&gt; is a necessary &lt;a href=&quot;install_dk#install-dk-get-ssl-certificates&quot;&gt;part of the setup process&lt;/a&gt; for every workstation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c1eb143cb9c2d1e704f3a8d0e5d0d72a851ad2" translate="yes" xml:space="preserve">
          <source>Starting with chef-client 12.0, attribute precedence levels may be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25d958a0946987465f71c74c45b100bc549eeb2" translate="yes" xml:space="preserve">
          <source>Starting with chef-client 12.0, use the &lt;a href=&quot;knife_ssl_fetch&quot;&gt;knife ssl_fetch&lt;/a&gt; command to pull down the SSL certificates from the on-premises Chef server and add them to the &lt;code&gt;/trusted_certs_dir&lt;/code&gt; on the workstation. This certificates is used during a knife bootstrap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870fe5ea608aa6aac7f5f6fcbd06d038db108ab9" translate="yes" xml:space="preserve">
          <source>Starting with chef-client 12.5, it is recommended to &lt;a href=&quot;custom_resources&quot;&gt;build custom resources&lt;/a&gt; instead of definitions. While the use of definitions is not deprecated&amp;mdash;all existing definitions will continue to work&amp;mdash;it is recommended to also migrate existing definitions to the new custom resource patterns. This topic introduces definitions as they once were (and still can be, if desired), but deprecates all but one example of using them in favor of showing how to migrate an existing definition to the new custom resource pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded936d665efead9765bac74461dcc8d7c111589" translate="yes" xml:space="preserve">
          <source>Starting with chef-client 12.5, it is recommended to build custom resources instead of definitions and to migrate existing definitions to be custom resources .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009c78cd61e0ea30653980f46cfd90473f9e1e82" translate="yes" xml:space="preserve">
          <source>Starting with chef-client version 12.0 you can use the &lt;code&gt;shell_out&lt;/code&gt;, &lt;code&gt;shell_out!&lt;/code&gt; and &lt;code&gt;shell_out_with_system_locale&lt;/code&gt;&lt;a href=&quot;dsl_recipe&quot;&gt;Recipe DSL methods&lt;/a&gt; to interface directly with &lt;code&gt;mixlib-shellout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bfcaf3e691967dad3b37c11fd0a204751afcd6" translate="yes" xml:space="preserve">
          <source>Starting with chef-client version 12.4.1, the &lt;code&gt;knife user&lt;/code&gt; functionality is restored for the following arguments: &lt;code&gt;user-edit&lt;/code&gt;, &lt;code&gt;user-list&lt;/code&gt;, and &lt;code&gt;user-show&lt;/code&gt; for Chef server version 12.0 (and higher).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1125ce6380d2874c04bc787e6aa00aa1e1fe602d" translate="yes" xml:space="preserve">
          <source>Starting with the Chef management console 2.3.0, the Chef MLSA must be accepted when reconfiguring the product. If the Chef MLSA has not already been accepted, the reconfigure process will prompt for a &lt;code&gt;yes&lt;/code&gt; to accept it. Or run &lt;code&gt;chef-manage-ctl reconfigure --accept-license&lt;/code&gt; to automatically accept the license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5241e11c6b9a57b18823cbf18aa02a83b298d573" translate="yes" xml:space="preserve">
          <source>Starting with the release of Chef server 11, the front-end for the Chef server is written using &lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt;, which is a programming language that &lt;a href=&quot;http://en.wikipedia.org/wiki/Erlang_%28programming_language%29&quot;&gt;first appeared in 1986&lt;/a&gt;, was open sourced in 1998, and is excellent with critical enterprise concerns like concurrency, fault-tolerance, and distributed environments. The Chef server can scale to the size of any enterprise and is sometimes referred to as Erchef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd13e1988b1b30f8cf56831cb5330e878615659" translate="yes" xml:space="preserve">
          <source>Starts the website using systemd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df06d027fc5f7594363b6d089080884683b00183" translate="yes" xml:space="preserve">
          <source>Step Through Run-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cb29138a950fdac83be5837636b276b6f54ebc" translate="yes" xml:space="preserve">
          <source>Stop Keepalived on the original non-bootstrap backend server. This will ensure that the bootstrap back end server is the active server. This action may trigger a failover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb74b5c17016e9ab4f6491499c978d4be5a15aaf" translate="yes" xml:space="preserve">
          <source>Stop Keepalived on the primary backend server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357ecc973f77c9d2e49d9f3857024ab5f9dd30c7" translate="yes" xml:space="preserve">
          <source>Stop a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a9a4ef4c3cc3686aa79e914fce1fbdb3f0c07e" translate="yes" xml:space="preserve">
          <source>Stop all of the front end servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30afd5164b78d3a6d7ef1b2da0f4ad45e58a1a45" translate="yes" xml:space="preserve">
          <source>Stop an active array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54e0415c072cc6ee3c3acceae3dfe6bb718a1bf" translate="yes" xml:space="preserve">
          <source>Stop the &lt;strong&gt;redis_lb&lt;/strong&gt; service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a98caeb67d57ae8155c2dd98503aa8b7697939" translate="yes" xml:space="preserve">
          <source>Stop the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ee9213f64cb92b58dae4b98d619d5c4654ea18" translate="yes" xml:space="preserve">
          <source>Stop the Open Source Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6913a98db06cd4adfe750e9124ff5ad2ad63b2c1" translate="yes" xml:space="preserve">
          <source>Stop the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da94320d7d4348bc531df0d91a44ac5ce462309" translate="yes" xml:space="preserve">
          <source>Store Keys on Nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e408b80910dc76ce86a420ca3d7834d7a98d3462" translate="yes" xml:space="preserve">
          <source>Store the private key in a safe place. It will be required later (along with the client name) to access the Chef server when using the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a775ff653036f45f0df73fa5c8ef5a32c3967a" translate="yes" xml:space="preserve">
          <source>Stored as part of the node object on the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912c579b4b7b0b0a0f89ca98cd674c6788a7817f" translate="yes" xml:space="preserve">
          <source>Stores data bags (and data bag items) in JSON (.json).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c5d4e629e0c5dd1f8355c190f5d933375fe366" translate="yes" xml:space="preserve">
          <source>Stores environment in Ruby (.rb) or JSON (.json).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4a1826da108e74190024a753ab58bb0e1ed54e" translate="yes" xml:space="preserve">
          <source>Stores of JSON data (data bags), including encrypted data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dcc80f4e2f13e121d4ddbf090425ac1cad0680" translate="yes" xml:space="preserve">
          <source>Stores roles in Ruby (.rb) or JSON (.json).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df59db8ffc7efc317bf9ae212a2fcb9447d7ea2c" translate="yes" xml:space="preserve">
          <source>String Quoting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf0755099066d1764b11a6c3821c552e8c28913" translate="yes" xml:space="preserve">
          <source>String defining the name of your new key for this client. If not passed, it will default to the fingerprint of the public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbf9ddf2378fd7d2ef6601d0f6034710e56bed3" translate="yes" xml:space="preserve">
          <source>String defining the name of your new key for this user. If not passed, it will default to the fingerprint of the public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1746930baf8ef4516f12972bc2a6ab4978228297" translate="yes" xml:space="preserve">
          <source>Subcommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8cf84261f17414d41a19324152deb0638ecb13" translate="yes" xml:space="preserve">
          <source>Subcommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdff3619c3ebed69f6fcf6be548c8fe53836e49" translate="yes" xml:space="preserve">
          <source>Subscribes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bf457162f63b50618924af308876b888280d7c" translate="yes" xml:space="preserve">
          <source>Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ee278d2d191d6e87e60c82fa80874730b9da9e" translate="yes" xml:space="preserve">
          <source>Success! The client is authorized to view the content of the &lt;code&gt;sea:power&lt;/code&gt; databag item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42612f93a026a490db6a49addec3c063e88ce4a" translate="yes" xml:space="preserve">
          <source>Superuser Accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bea9498c50df87c6a2896a52619f8ca186488c8" translate="yes" xml:space="preserve">
          <source>Superuser accounts may not be managed by users who belong to the &lt;code&gt;server-admins&lt;/code&gt; group. For example, Alice attempts to delete the &lt;code&gt;pivotal&lt;/code&gt; superuser account:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd4fa195ed5b220930149c31cc72fbb131921db" translate="yes" xml:space="preserve">
          <source>Supervisor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fedf4c8134556a7498d14f3965c4328f4144d3" translate="yes" xml:space="preserve">
          <source>Supervisor logs are available for the following services:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4fb8b48a45b1c6aa7407a20b9635a63ba664b3" translate="yes" xml:space="preserve">
          <source>Supervisor logs are created and managed directly by the service supervisor, and are automatically rotated when a the current log file reaches 1,000,000 bytes. 10 log files are kept. The latest supervisor log is always located in &lt;code&gt;/var/log/chef-server/service_name/current&lt;/code&gt; and rotated logs have a filename starting with &lt;code&gt;@&lt;/code&gt; followed by a precise &lt;code&gt;tai64n&lt;/code&gt; timestamp based on when the file was rotated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94953259f301716c9d4e360d7be8365af9d6ecf6" translate="yes" xml:space="preserve">
          <source>Support for using file names to install packages (as in &lt;code&gt;yum_package &quot;/bin/sh&quot;&lt;/code&gt;) is not available because the volume of data required to parse for this is excessive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48012bbbd369e7cf9dbf01a37cf616f579aef634" translate="yes" xml:space="preserve">
          <source>Supported Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9dfe86c112a6878282820ee7be098eb751636ff" translate="yes" xml:space="preserve">
          <source>Supports all common testing frameworks that are used by the Ruby community</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3269ced9c045235f8d9b92ecb1048b038e6d46be" translate="yes" xml:space="preserve">
          <source>Supports cookbook testing across many cloud providers and virtualization technologies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0679c1594137bf610304dce58e8f5e6e4e0f6292" translate="yes" xml:space="preserve">
          <source>Switch back to recipe_mode context and use the attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72e54913df4ef3e65f5ea0ec0fc6c9b585bee4d" translate="yes" xml:space="preserve">
          <source>Symbols may be used to reference attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11decfc35e6a3a6fa79bb32c671b37c287875429" translate="yes" xml:space="preserve">
          <source>Symbols or Strings?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c39494111184c7563a859515adaf0db7d8856b" translate="yes" xml:space="preserve">
          <source>Sync Master</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7e8313f0f30ee30b608b63538839e89b951967" translate="yes" xml:space="preserve">
          <source>Synchronization is complete hen the &lt;code&gt;ds:&lt;/code&gt; section reads &lt;code&gt;UpToDate/UpToDate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c79ac4d3315d9f6afc4187fe437f7f01f2392e" translate="yes" xml:space="preserve">
          <source>Synchronize DRBD. This process &lt;strong&gt;MUST&lt;/strong&gt; be allowed to complete to ensure that DRBD is synchronized with all devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b3bf7a24e8b488c3b1dd1231fe25835d5d6601" translate="yes" xml:space="preserve">
          <source>Synchronize the local master:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480afe1760f41ebeb25395736875a6fd40826c91" translate="yes" xml:space="preserve">
          <source>Synchronize to make sure that all of the data is present on-disk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5f85b15c5ba99dc6217df9d14ddf1c705352d1" translate="yes" xml:space="preserve">
          <source>Synchronizing cookbooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554a419ceca30630f54de07d6c1285624a937250" translate="yes" xml:space="preserve">
          <source>Syntax (pre-12.5)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b4eb8fef9948c1652bed26fa9b2907fff946a2" translate="yes" xml:space="preserve">
          <source>Syslog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09cd13307c0dd34500214e3c674ba4a35cde6e0" translate="yes" xml:space="preserve">
          <source>System Checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454e5495a48b74f01faa0505ab1bbf6f2f716b63" translate="yes" xml:space="preserve">
          <source>System attributes are collected by Ohai at the start of every chef-client run. By design, the actions available to the &lt;strong&gt;user&lt;/strong&gt; resource are processed &lt;strong&gt;after&lt;/strong&gt; the start of the chef-client run. This means that system attributes added or modified by the &lt;strong&gt;user&lt;/strong&gt; resource during the chef-client run must be reloaded before they can be available to the chef-client. These system attributes can be reloaded in two ways: by picking up the values at the start of the (next) chef-client run or by using the &lt;a href=&quot;resource_ohai&quot;&gt;ohai resource&lt;/a&gt; to reload the system attributes during the current chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57a2a6538ebd8d590731679acdb2f0a67fcdb68" translate="yes" xml:space="preserve">
          <source>System-level checks should be done for the following components: ports, services, and high availability status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55b56948c4d2bf0a40b21b91f57640506ebc0bc" translate="yes" xml:space="preserve">
          <source>TCP protocol ports 10000 and 10002. TCP/10000 is the default heartbeat port. TCP/10002 is the command port. It may be configured in the Chef push jobs configuration file . This port allows Chef push jobs clients to communicate with the Chef push jobs server. In a configuration with both front and back ends, this port only needs to be open on the back end servers. The Chef push jobs server waits for connections from the Chef push jobs client, and never initiates a connection to a Chef push jobs client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac02cd4f449097d2fdcf3c8c4de59c49601dba9" translate="yes" xml:space="preserve">
          <source>TCP protocol ports 10000 and 10003 must be open. These are the heartbeat and command ports respectively. They allow the Chef push jobs server to communicate with the Chef push jobs clients. In a configuration with both frontend and backend servers, these ports only need to be open on the backend servers. The Chef push jobs server waits for connections from the Chef push jobs client (and never makes a connection to a Chef push jobs client).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b105d817ac04b1dc02101b9a12f5c8482824d0c" translate="yes" xml:space="preserve">
          <source>TCP protocol ports 10000-10003 must be open. This allows the Chef push jobs clients to communicate with the Chef push jobs server. In a configuration with both front and back ends, these ports only need to be open on the back end servers. The Chef push jobs server waits for connections from the Chef push jobs client (and never makes a connection to a Chef push jobs client).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2e4611ae57b791da9a1c1542429c02d94d3a78" translate="yes" xml:space="preserve">
          <source>Tags can be added and removed. Machines can be checked to see if they already have a specific tag. To use tags in your recipe simply add the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f538a0ac8edd3e1f1e012a28c8ae120956ace51a" translate="yes" xml:space="preserve">
          <source>Take no action and only print out results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b58c838773342984cc59e14e578293ef76696b" translate="yes" xml:space="preserve">
          <source>Take no action and only print out results. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fc7848798315c5061d2f2450eabc25a890df1f" translate="yes" xml:space="preserve">
          <source>Taking the appropriate and required actions to configure the node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0852bca3c1dc18bc84b05631decbb932ad8de323" translate="yes" xml:space="preserve">
          <source>Talk to an LDAP provider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8595baee21a18be726b28d38bffac5462f5dda" translate="yes" xml:space="preserve">
          <source>Talk with your systems administrators about disk configuration if you are at all uncertain of how to configure a new logical volume with logical volume manager (LVM), as the operations can be destructive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de00d84fb1c49ed5961665e46a2aea19e17ba88d" translate="yes" xml:space="preserve">
          <source>Template Helper Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94aad6826bfe742afd2543a33ca81166d8fa29a" translate="yes" xml:space="preserve">
          <source>Template Locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c9bcdeb3826f2a1efe477c86c883dae3af6389" translate="yes" xml:space="preserve">
          <source>Template Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b4e566a47c5613c734080d5ef2338098a62263" translate="yes" xml:space="preserve">
          <source>Test LDAP Connectivity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f2abc309b3b2254a73a83ade1ec1932ea22f6d" translate="yes" xml:space="preserve">
          <source>Test all cookbooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff813fc36735e7196431a0454b697bf22b7537e" translate="yes" xml:space="preserve">
          <source>Test the Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8189d2cdf19649e4022f07dbe0980735cc342337" translate="yes" xml:space="preserve">
          <source>Testing cookbooks improves the quality of those cookbooks by ensuring they are doing what they are supposed to do and that they are authored in a consistent manner. Unit and integration testing validates the recipes in cookbooks. Syntax testing&amp;mdash;often called linting&amp;mdash;validates the quality of the code itself. The following tools are popular tools used for testing Chef recipes: Kitchen, ChefSpec, and Foodcritic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3112bc90eb283cabfc78ee2123900f121acb0e03" translate="yes" xml:space="preserve">
          <source>Testing tools like Kitchen, ChefSpec, and Foodcritic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18e530936fe6cbb745a03c31316939e569fed82" translate="yes" xml:space="preserve">
          <source>That said, it&amp;rsquo;s best to isolate failure domains with their own Chef server, rather than trying to run every node in an infrastructure from a single central, monolithic Chef server instance/cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f04e5506fae6701c1c235363c5c1a5e14fadaf0" translate="yes" xml:space="preserve">
          <source>That will tell DRBD to abandon what is on the node and start over, and should allow it to sync with the primary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f6b11071fd8865e6eceaaa4fccbb7369a825c4" translate="yes" xml:space="preserve">
          <source>The $EDITOR that is used for all interactive commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee2bda7c44949e9b630a41edfbb04feff0074e6" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;meta root&amp;rdquo; for the application, if different from the path that is used to specify the name of a resource. Default value: the &lt;code&gt;name&lt;/code&gt; of the resource block See &amp;ldquo;Syntax&amp;rdquo; section above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca1095e3201b2fc2e64e7ea1c3a8257fe86bafc" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;pristine copy&amp;rdquo; branch is merged into the master branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a36f64085749c76da1cc86a0f2ca714b456f6b2" translate="yes" xml:space="preserve">
          <source>The (currently) hardcoded version of PostgreSQL. Default value: &lt;code&gt;'9.2'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33f1344d97001fb0231c30097e4e984d1e8d7ba" translate="yes" xml:space="preserve">
          <source>The .chef directory is a hidden directory that is used to store validation key files and the knife.rb file. These files are required for interaction with a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097d1ab83b9f35111f48afffe76d398aa2939498" translate="yes" xml:space="preserve">
          <source>The .chef directory is used to store three files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529c505823d396e3c24f0d110758b260c0fd711" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb&quot;&gt;error_report&lt;/a&gt; handler is built into the chef-client and can be used for both exceptions and reports. It serializes error report data to a JSON file. This handler may be enabled in one of the following ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3e6b52aa97bd4d95435f2c583d0317c04b9b78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb&quot;&gt;error_report&lt;/a&gt; handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f2aec15cee363da4ac99ce854c04e21635df9a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb&quot;&gt;json_file&lt;/a&gt; handler is available from the &lt;strong&gt;chef_handler&lt;/strong&gt; cookbook and can be used with exceptions and reports. It serializes run status data to a JSON file. This handler may be enabled in one of the following ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba33513ebf2ecc5ae078d2aff94ae2dd62a0d363" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb&quot;&gt;json_file&lt;/a&gt; handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed24a67daa57828bba918f09ce1bfd0b3438b85" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/chef/mixlib-shellout/blob/master/README.md&quot;&gt;mixlib-shellout module&lt;/a&gt; provides a simplified interface to shelling out while still collecting both standard out and standard error and providing full control over environment, working directory, uid, gid, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7ef00fadc9a0a5f7eca50193bcae293696a09b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#{ENV['HOME']}&lt;/code&gt; relative path can be used with any resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d01199f1b583fb3742450e3b52ecf160a7ca05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%w&lt;/code&gt; syntax is a Ruby shortcut for creating an array without requiring quotes and commas around the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7316740b02909b4a4b73968fa81f35deb2ed9723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'!'&lt;/code&gt; caused the entire &amp;lsquo;bar&amp;rsquo; key to be overwritten: .. code-block:: ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2f7e93ed35b7612e304e631828fc759ede851b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'!'&lt;/code&gt; write overwrote the &amp;ldquo;cookbook-default&amp;rdquo; value of &lt;code&gt;'bar'&lt;/code&gt;, but since role data is later in the resolution list, it was unaffected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1627763147e882889e41f014769f118824ee61f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--association_user&lt;/code&gt; option will associate the &lt;code&gt;user_name&lt;/code&gt; with the &lt;code&gt;admins&lt;/code&gt; security group on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9573d7f9688c7a114fa857ee2eb718663d516b75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--bootstrap-vault-*&lt;/code&gt; options add the client identify of the bootstrapping node to the permissions list of the specified vault item. This enables the newly-bootstrapped chef-client to be able to read items from the vault. Only a single client is authorized at a time for acces to the vault. (The &lt;code&gt;-S&lt;/code&gt; search query option with the &lt;code&gt;knife vault create&lt;/code&gt; subcommand does the same.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83a3311a41d711af14427b6bc015f1068619f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory stores trusted SSL certificates used to access the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b104e35f382b8567746dad3f40487b5493aaaf6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/_status&lt;/code&gt; endpoint can be used to check the status of communications between the front and back end servers. This endpoint is located at &lt;code&gt;/_status&lt;/code&gt; on the front end servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7443f17837d1d1fd18d090cbe53b64bd6364e5d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/association_requests&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f6a5d6af7230b97eebde29f837a69960fa7817" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/authenticate_user&lt;/code&gt; endpoint has the following methods: &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3116b52cd76df0fc1502e1dc35939e6cc6ca63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/client/CLIENT/keys&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e95863d572fef7b7002392151a1840a2e24cc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/clients/CLIENT/keys/KEY&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98d7b7233450c03205091b1144d68b5967fc518" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/clients/NAME&lt;/code&gt; endpoint is used to manage a specific API client. This endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7225c320397418e3f2e7c7a7d838353a6c5e569" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/containers&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fe19da720975892c7c639a0103d6581f148c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cookbooks/NAME/VERSION&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b3bdd49dcf5864b2f6bbc14dbbc7541a18095c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cookbooks/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44dfe4b2b33bc14b1470663c0841ffd1c88b576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cookbooks/_latest&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dc41db23c179548770d702e29864c4bc58169d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cookbooks/_recipes&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c08323a14437493e8fb779a920bd94643d7e88e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cookbooks&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1fc1619c761148a06bb8892f7ed1796e1fea19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/data/NAME/ITEM&lt;/code&gt; endpoint allows the key-value pairs within a data bag item to be viewed and managed. This endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3830b90b504075ef39abe3c13020ffd2f684ff2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/data/NAME&lt;/code&gt; endpoint is used to view and update data for a specific data bag. This endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a7a9eb03ea2172e87f43c11140f393d8df1291" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/data&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66011a14df206ecdaf8fa5cc05a50d3cd20f19c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/cookbook_versions&lt;/code&gt; endpoint has the following methods: &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3198352c007e6c2fecf3bb3c1fce2290aca6fcbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/cookbooks/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d969f387fb35ae729ecce37053592d915f9c17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/cookbooks&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e704b679b3b8aefda7f812a9afabe331bc0b6e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/nodes&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0ac4677927148312e41ae2f486e9c38f9d50ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/recipes&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb2c17e0c91b20ddc5d954f492452781115cb9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME/roles/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6edbc7a040b0e57526d3a74d43d4bc910ecb309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a424dce798c4248414302f77b789852479c0203" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments/_default&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a66b33dc13a5870525d2bbd92f42d5bac80f2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/environments&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd27683885632b4db2e5b6e2d7ca57e288d2008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/groups/GROUP_NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44d159953219b0f73f42ccb3bbbf3cb5cdc4ae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/groups&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7257142d44eaefe3ed4c88f76873ac0b7f406599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/license&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcb9314cc157e597197156b07c7ab7b48dbd1b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/nodes/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fb29322fee3c2491623288253c30964a874c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/nodes&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f560f896581d56694bb84cb19a68bd88153c80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/organizations/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b0b7014d2fcf7fea706c35c4b2d2f910d180d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/organizations&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993cf8ef39188269ccc8ab3189fa94ee1bef3e68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/policies&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f244f307fa381980d4824b696b196d628b9ffdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/policy_groups&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ed34f8552aebf80216e6184bce8522958d24a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/principals/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4710224a85d0f78ea6f183cd083b4342ffa045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/roles/NAME/environments/NAME&lt;/code&gt; endpoint has the following method: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f38e84ddbb6c0b400c26532bade8f8044681c8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/roles/NAME/environments&lt;/code&gt; endpoint has the following method: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddeeae3a20a3a7e61bb73e857c0338264a7cbf2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/roles/NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c04f6b5afd93d595bfdd4fb71cecef983a4fd47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/roles&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31e4b4b8cce516c3b65a722a234c373bd9ce11f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/search&lt;/code&gt; endpoint allows nodes, roles, data bags, environments to be searched. This endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd11d20ff257b1d181d082fda4042e47ed6750d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/templates&lt;/code&gt; directory must contain two templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e42568e92f85d89f41996f23c2b2947a7fd091c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/universe&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73a39643e80b909b4fcc9ea7d64b8c41a8ba553" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/updated_since&lt;/code&gt; endpoint ensures that replica instances of the Chef server are able to synchronize with the primary Chef server. The &lt;code&gt;/organizations/NAME/updated_since&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000a8e155dc5706f98b7745189e7b4332247c4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/users/USER/keys/KEY&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7b216345a44590c7eb5e071eef08c05ee62a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/users/USER/keys&lt;/code&gt; endpoint has the following methods: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dc7b3a06c7812ffc03430924574be1f27242de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/users/USER_NAME&lt;/code&gt; endpoint has the following methods: &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, and &lt;code&gt;PUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f648e8becad9f273c24fc5b7641f61e6a4c29a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/users&lt;/code&gt; endpoint has the following methods: &lt;code&gt;`GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a54fbaad6269abf4dc63e1d4079ba884e1708c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;172.17.16.**&lt;/code&gt; network addresses used in the previous examples could be any unused reserved IP address space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b11a26b2735532dc988457864f2751af552ddb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:dsc_property_name&lt;/code&gt; must be a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b66854bebd7414c2ad3e3617a5ea0208934a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nothing&lt;/code&gt; action can be used with any resource or custom resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f3be4d0ec3d0bcc23027c305a2f54a42752029" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ADDLOCAL&lt;/code&gt; parameter adds two setup options that are specific to the chef-client. These options can be passed along with an Msiexec.exe command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf695be6a836973625efe64859010923b7b9e1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ARCHITECTURE&lt;/code&gt; attribute should only specify &lt;code&gt;:x86_64&lt;/code&gt; or &lt;code&gt;:i386&lt;/code&gt; when it is necessary to write 32-bit (&lt;code&gt;:i386&lt;/code&gt;) or 64-bit (&lt;code&gt;:x86_64&lt;/code&gt;) values on a 64-bit machine. &lt;code&gt;ARCHITECTURE&lt;/code&gt; will default to &lt;code&gt;:machine&lt;/code&gt; unless a specific value is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeca862c853b6cd7f06014bfd6bbfe90d0532a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Accept&lt;/code&gt; header must be set to &lt;code&gt;application/json&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ad3e49aa4f8dbda939e6fdeb920bebde691784" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chef::Platform&lt;/code&gt; class maps providers to platforms (and platform versions). At the beginning of every chef-client run, Ohai verifies the &lt;code&gt;platform&lt;/code&gt; and &lt;code&gt;platform_version&lt;/code&gt; attributes on each node. The chef-client then uses those values to identify the correct provider, build an instance of that provider, identify the current state of the resource, do the specified action, and then mark the resource as updated (if changes were made).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122fd80cf297c207508494d2687fa2469fb4d31a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a cookbook version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e100f640a89aea4935367eab09ab39cea1e6e952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a data bag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5932ccff014df61612a45b84ff5a21e450d8d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a key-value pair in a data bag item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649d0d9332a4c290b118e3ac202d19a9cc8b53c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fc2a79120ca189b7b3fce02c8068825aeb9591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a pending invitation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d802b9bd77691f8ba5c87955bd557cceba7594e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a role on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4dfd4f5f9692a46d4ffc689b0400bc2c7891e5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deea6daadd9e2c4aa10944b878b06ba574074c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete an environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca5db94e0ace182bd2c57f31b197a1811e5a8e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6aee61b34004c9fc54452cbdb2db7246b98e25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete the specified key for the specified client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1605e484136de88f9cc5076d9f868439f851998c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to delete the specified key for the specified user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1017e9bbfdb4152739bf09b97332607ade5149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DELETE&lt;/code&gt; method is used to remove a specific API client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922d023b5bc3887e234d1fdc107e88911c58ab85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029a2be5d43287339b4800ece1a9933497cc76cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of cookbooks and cookbook versions that are available to the specified environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc49b16c17112eff3790e3deb74cb9fcf6aeeca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of groups on the Chef server for a single organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694f1f9cdd174d092d511ebe21ed52ed956350f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of organizations on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493ea0dee7587ac4d0c89a6c423d0e248e73cd9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of pending invitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342ef88de71d4128d23fa674d04b085a486ddf59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of policies (including policy revisions) from the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a90f8649d09e778697939089a1da886d83a73d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of public keys for clients and users in order to ensure that enough information is present for authorized requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee603aea37e20591a13c454852a1db1d8cfbb32a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of roles along with their associated URIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46879fe643383cc8391b88f9a1dd20627342d8f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of users on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d4bbffc571fb3979932fffedd42ea3d8fd8b30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get a list of users that belong to a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73cc39be924048dd1e9eb78af7bdc0f1e12a38d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get information about the &lt;code&gt;_default&lt;/code&gt; environment on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edd614fcc35c110bafd3e361645d900c9ec24a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get license information for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebc4c4224781dea94573eeab77d5d2647842adc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to get the details for the named organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fabf1a8f8a20274e56bc5ca478ecd8e7f7ed81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to retrieve all of the named client&amp;rsquo;s key identifiers, associated URIs, and expiry states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa180baa7b029b81aa60befe32b4a2ab3eee5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to retrieve all of the named user&amp;rsquo;s key identifiers, associated URIs, and expiry states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3592d650d6050aad6ced6c5c7e33e0ac8ce0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to retrieve the universe data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9712f0a6469e6cb12347d99392bbc573dbb581f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a data structure that contains a link to each available environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cea624d5fb74050cd7902bacbef16a993bebe65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a data structure that contains links to each available search index. By default, the &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt;, and &lt;code&gt;data bag&lt;/code&gt; indexes will always be available (where the &lt;code&gt;data bag&lt;/code&gt; index is the name of the data bag on the Chef server). Search indexes may lag behind the most current data at any given time. If a situation occurs where data needs to be written and then immediately searched, an artificial delay (of at least 10 seconds) is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b4d6adae0a705dcd32d582fa856a45ca3d9d98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a description of a cookbook, including its metadata and links to component files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34956c95457c099ff838c65d3513bef1a3a5c53d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a hash of URIs for nodes on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04840ea9873638a53b55b7cffdd6a21f455aa625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a hash of all cookbooks and cookbook versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea621020bcd7dab031be3277085581416b20fa2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a hash of all entries in the specified data bag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b41ecd15630b03afd74cb45cbb1764b153440c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a hash of key-value pairs for the requested cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c56782797fb3276e0813b7a005828a5642d6ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a hash that contains a key-value pair that corresponds to the specified cookbook, with a URL for the cookbook and for each version of the cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d417b1c0cc50fce710c431a91ccd2861d309595a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a list of all data bags on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415cca14b772aed7a37a4059f03ff44128c1bb32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a list of nodes in a given environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5ff626bab1c0825622dcc612be95a96703dda1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a list of recipes available to a given environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e19d67cf31c5757546622a8de5b14ce1c09c1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a list of the most recent cookbook versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c9103092ec5223ad4fef7644b98a132cbf27f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return a specific API client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaf7155e66de6b8acf0db799e1e1518e9b7d3ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return all of the data that matches the query in the &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb686e5ef9c34568a700f17e941981a49810317a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return details for a specific key for a specific client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e13ec926cb90395ba651e7a53b5196414001497" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return details for a specific key for a specific user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76bc56748c260f58a0f04ccf4d2b592376fb6e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the &lt;code&gt;run_list&lt;/code&gt; attribute of the role (when the name of the environment is &lt;code&gt;_default&lt;/code&gt;) or to return &lt;code&gt;env_run_lists[environment_name]&lt;/code&gt; (for non-default environments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85db7d7577806b7e3d497a8639e9c09632fa6f69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the API client list on the Chef server, including nodes that have been registered with the Chef server, the chef-validator clients, and the chef-server-webui clients for the entire organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75c5f9f9756d5e37e3170cee098d1d237880627" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the details for a role as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5f649f63c331de9287517c1a13c340875aeead" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the details for a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792cc8630fd5f2861cec32e1d65024ac527efe5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the details for an environment as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b32cdd777d6eaf07c90aae7f05da797be9d3c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the details of a node as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72467f884a094aab9ef0f3fef625872afbc84ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the details of an organization as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f683a3b1f46c7adc831c0b58d0415ba07538f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to return the names of all recipes in the most recent cookbook versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4cf968c0034801b72858924a82e6c7b359a5c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method is used to view all of the key-value pairs in a data bag item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1610d570cb354a8e0566f2fea30ac9769ce1897c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method returns a list of the environments that have environment-specific run-lists in the given role as JSON data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e35337141efc767414c4b4e3f328d7259972cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GET&lt;/code&gt; method returns the environment-specific run-list (&lt;code&gt;env_run_lists[environment_name]&lt;/code&gt;) for a role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92a731d0f86f9dbf21e0096bf8c642930e011cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to add a key for the specified client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4792fb0ed96d5a7c5c8814219277335c644982" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to add a key for the specified user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2667aee682ea86fa2a6c23009c77aa6d6dc916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to authenticate a user. This endpoint is used by the Chef Identity Service to authenticate users of Chef Supermarket and Chef Analytics to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ee7cc6ae645df0af4ced8a6b965002ffbf0fd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new API client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0366397aecfbfe9786244db15a97112e648fefe8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new data bag item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2b1b85fc6a5ac2d1987ca92c35d5b4f1ce2f18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new data bag on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a970ff5aeff6641664fd4e3075b681d5413e7055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c708c790fc7c66d8e296a6402d79dd35e1bc9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323ca7dc3a3e8f42537f8e6c1ca9e555813e796c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new role on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f2ca002bf1b597383d2eff7502f0f5b2e74e19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new sandbox. This method accepts a list of checksums as input and returns the URLs against which to &lt;code&gt;PUT&lt;/code&gt; files that need to be uploaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d6e1c32df6ba5cb6edb7f19b09da50159ed8e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a new user. If a public key is not specified, both public and private keys will be generated and returned. If a public key is specified, only the public key will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add8616c936aab6fb92a47b0fd067c85d6a840a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create a user on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e30af20b1c642f7dc42dac7ced05745d82856ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create an invitation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2a5eea1ac1971b366e5e63d4e01fb91c107a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to create an organization on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acdf962804a0565e64737f48db0905f71d03cc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to return a hash of the cookbooks and cookbook versions (including all dependencies) that are required by the &lt;code&gt;run_list&lt;/code&gt; array. Version constraints may be specified using the &lt;code&gt;@&lt;/code&gt; symbol after the cookbook name as a delimiter. Version constraints may also be present when the &lt;code&gt;cookbook_versions&lt;/code&gt; attributes is specified for an environment or when dependencies are specified by a cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b6679dc0024c9e3361429b45591241eb9d7a30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method is used to return partial search results. For example, if a node has the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31aecd382496decad02105861bb68ef57c6e386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to commit files that are in a sandbox to their final location so that changes to cookbooks will not require re-uploading the same data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c47a4d18e09b353dae4fd24dc89607cd9c665a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to create an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d3af5aaad5b373dde8b559b5ce25869b85a248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to create or update a cookbook version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e60d8a4ee5f867420ed7533895659cd71e3e50a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to replace the contents of a data bag item with the contents of this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e04044554460b0835211f33f311761b37b6fadb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdabcb16c4e80559e2de8a7ef1c361ade0122ae6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update a role on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d1cc0c9ac0996c1f6cf3fa7b1b31a01422c6b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update a specific API client. If values are not specified for the &lt;code&gt;PUT&lt;/code&gt; method, the Chef server will use the existing values rather than assign default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b9a5232d91adf6c72e84193784769dab04e61f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update a specific user. If values are not specified for the &lt;code&gt;PUT&lt;/code&gt; method, the Chef server will use the existing values rather than assign default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b67af517fb31ebb8725874c22330baaa580099" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update one or more properties for a specific key for a specific client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a06048d718866f76eecb1d18175f34ea114edd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update one or more properties for a specific key for a specific user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732a77e13a017a38e6bdda53a68786c2e94267bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; method is used to update the details of an environment on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17de72245e97a2434437fab02be00328b5e0ca13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RefreshMode&lt;/code&gt; configuration setting in the Local Configuration Manager must be set to &lt;code&gt;Disabled&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d565c67d38438c05fb39cd007c9fb7ca85941d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Chef-Version&lt;/code&gt; header must be set to the version of the Chef server API that is being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e955e99789674b5b4b567e9fd654bda33f74495c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;admins&lt;/code&gt; group defines the list of users who have administrative rights to all objects and object types for a single organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428c612dda566530ea50669d31ef3a89cbbded41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;admins&lt;/code&gt; group is assigned the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80f9a822d5a74ce519e7d4acee02d27be6e6b79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;analytics_fqdn&lt;/code&gt; setting must be added to the opscode-analytics.rb file (it is not there by default). Its value should be equal to the FQDN or IP address for the service URI used by the Chef Analytics server. For example: &lt;code&gt;analytics_fqdn &quot;chef-analytics.example.com&quot;&lt;/code&gt; or &lt;code&gt;analytics_fqdn 123.45.67.890&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82eab0c8f6b208f05cb83206a1cb1a8ffd177462" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;api_fqdn&lt;/code&gt; setting can be added to the private-chef.rb file (it is not there by default). When added, its value should be equal to the FQDN or IP address for the service URI used by the Chef server. Then configure the same value for the &lt;code&gt;bookshelf['vip']&lt;/code&gt; setting prior to installing the Chef server. For example: &lt;code&gt;api_fqdn &quot;chef.example.com&quot;&lt;/code&gt; or &lt;code&gt;api_fqdn 123.45.67.890&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd136fab59fb7c86c60fdc47a4bd7841251add59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backup-recover&lt;/code&gt; subcommand is used to force the Chef server to attempt to become the backup server. This is the opposite of the &lt;code&gt;master-recover&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0678f4b459ed60b514a3734df6317c9b2a15c073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backup&lt;/code&gt; subcommand is used to back up all Chef server data. This subcommand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bb8b67ee2ec5ea7a6856496874f0afb0ac9148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;before_restart&lt;/code&gt; callback is being used to add custom actions that will occur at the end of the deployment process, but before any services have been notified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f7e4e232f3de7af4711229787bf77c5971bac7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;billing_admins&lt;/code&gt; group defines the list of users who have permission to manage billing information. This permission exists only for the hosted Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8831f5b50133cf06e17c6cc8165f53c72af1b716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;billing_admins&lt;/code&gt; group is assigned the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881a8e8bea26d64eca456d9ec5d81f8ca560df82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checksum&lt;/code&gt; attribute will ask the chef-client to compare the checksum for the local file to the one at the remote location. If they match, the chef-client will not re-download the file. Using a local checksum for comparison requires that the local checksum be the correct checksum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b62fc0efe1a5d330fea6ab5fda864e0cc1e1213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chef-full&lt;/code&gt; distribution uses the omnibus installer. For most bootstrap operations, regardless of the platform on which the target node is running, using the &lt;code&gt;chef-full&lt;/code&gt; distribution is the best approach for installing the chef-client on a target node. In some situations, using another supported distribution is necessary. And in some situations, a custom template may be required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcc47e91f2827202e61638d3d967fa21da6fb6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chef-server-ctl install&lt;/code&gt; command no longer works in the 12.5 (and earlier) versions of the Chef server due to a change in how packages are downloaded from Chef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711460b11cdada0d9ba50769c9f61ac142e50718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chef-server-ctl&lt;/code&gt; command will install the first &lt;code&gt;chef-manage&lt;/code&gt; package found in the &lt;code&gt;/root/packages&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf163db02c100957316e5484ca0f18d3c90ce55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cleanse&lt;/code&gt; subcommand is used to re-set the Chef server to the state it was in prior to the first time the &lt;code&gt;reconfigure&lt;/code&gt; subcommand is run. This command will destroy all data, configuration files, and logs. The software that was put on-disk by the package installation will remain; re-run &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; to recreate the default data and configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0deeb9ada55d6c509d2ffc0204e20941f72a19b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;client.pem&lt;/code&gt; file is incorrect. This can be fixed by deleting the &lt;code&gt;client.pem&lt;/code&gt; file and re-running the chef-client. When the chef-client re-runs, it will re-attempt to register with the Chef server and generate the correct key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf2b8c178b0519a4257c104db310edd7f8e27a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clients&lt;/code&gt; group defines the list of nodes on which a chef-client is installed and under management by Chef. In general, think of this permission as &amp;ldquo;all of the non-human actors&amp;mdash;the chef-client, in nearly every case&amp;mdash;that get data from, and/or upload data to, the Chef server&amp;rdquo;. Newly-created chef-client instances are added to this group automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c7c5d2269c9496d58be517ee1d9d71092dbb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clients&lt;/code&gt; group is assigned the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bfe3c7e15bbb8e861b723b8436045d4e64d6da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;control_group&lt;/code&gt; block is processed when the chef-client is run in audit-mode. If the chef-client run was successful, the chef-client will return output similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c45a32b85581fc77c1cc82dffc9c6256ddad41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;control_group&lt;/code&gt; block is processed when the chef-client run is run in audit-mode. If the audit was successful, the chef-client will return output similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9820846b36ec9d6d61fb8a9a9a4328398ddc7b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;converge_if_changed&lt;/code&gt; method may be used multiple times. The following example shows how to use the &lt;code&gt;converge_if_changed&lt;/code&gt; method to compare the multiple desired property values against the current property values (as loaded by the &lt;code&gt;load_current_value&lt;/code&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587f7058c0a106fd1409dff6a541ac1ecfbf5ad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cookbook_path&lt;/code&gt; variable in the solo.rb file must include both directories. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b679f4db3d9abadbd0ed7e3def8c8f6b1b175c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cookbooks/&lt;/code&gt; directory is used to store the cookbooks that are used by the chef-client when configuring the various systems in the organization. This directory contains the cookbooks that are used to configure systems in the infrastructure. Each cookbook can be configured to contain cookbook-specific copyright, email, and license data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e16d12f0ce9507aacfa9b5e6c55a67aef030934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;create_dirs_before_symlink&lt;/code&gt; property is empty, which is different from the default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5221e5bd9e5b4303fc97f95af662e73093812275" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; method is used to return the Hash representation of the &lt;code&gt;run_status&lt;/code&gt; object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8685466c74521427d16cd4954b4cc485ee1e79e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data_bag_item&lt;/code&gt; method can be used in a recipe to get the contents of a data bag item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944a037c53c89985d2e4d63ad5b06350337b9158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data_bags/&lt;/code&gt; directory is used to store all of the data bags that exist for an organization. Each sub-directory corresponds to a single data bag on the Chef server and contains a JSON file for each data bag item. If a sub-directory does not exist, then create it using SSL commands. After a data bag item is created, it can then be uploaded to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75c590f6cda4c44737d6d9e613d23cec3f3e3c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;default_action&lt;/code&gt; method may also be used to specify the default action. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955b5ee2a964984465c27b2550cca3327e37150f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deploy_revision&lt;/code&gt; provider is the recommended provider, even if it is not listed as the default. The &lt;code&gt;deploy_revision&lt;/code&gt; provider is used to ensure that the name of a release sub-directory is based on a revision identifier. For users of git, this will be the familiar SHA checksum. For users of Subversion, it will be the integer revision number. If a name other than a revision identifier is provided&amp;mdash;branch names, tags, and so on&amp;mdash;the chef-client will ignore the alternate names and will look up the revision identifier and use it to name the release sub-directory. When the &lt;code&gt;deploy_revision&lt;/code&gt; provider is given an exact revision to deploy, it will behave in an idempotent manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f302c9f0d853c2aa29bf5ce7208af14deece5ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deploy_revision&lt;/code&gt; provider results in deployed components under the destination location that is owned by the user who runs the application. This is sometimes an issue for certain workflows. If issues arise, consider the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6332ceab9e88b285733eac0e2e1fa8349e3bd303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;drbd-backups&lt;/code&gt; script with default settings requires at least 40 GB free space in the &lt;code&gt;/opscode&lt;/code&gt; volume group on the backend servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ad963e11d57f3214d21cf5c4b622fa77c05064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;drbd.conf&lt;/code&gt; file that is used with the Chef server specifies other built-in actions that may be taken in certain fault scenarios:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b8a1c06be8e83e98688624e4a5aa47b73720a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ds:UpToDate/Unknown&lt;/code&gt; is important; it indicates that the secondary has all the data that was on the primary and won&amp;rsquo;t lose anything if it is promoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af49c2b0acfc0b77d3fe8b1d39d8c87982e7aa1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dtop&lt;/code&gt; tool presents a view on the Erlang virtual machine that is similar to the &lt;code&gt;linuxdagnostic&lt;/code&gt; command. The period at the end of the dtop command is required for the command to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945760794051766c0249c18aaed10a9a3e78049a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump.rdb&lt;/code&gt; file will be empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b689fbdba63ed214ef088b34b3209a17238b55fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;environments/&lt;/code&gt; directory is used to store the files that define the environments that are available to the Chef server. The environments files can be Ruby DSL files (.rb) or they can be JSON files (.json). Use knife to install environment files to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c0a0e6bb673d9a7f35728532838e99d55a0351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl_call&lt;/code&gt; command needs to be on the path for this resource to work properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86f86576ce830d1eaeb5661d12717330d1ea990" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find&lt;/code&gt; command can be used to search the Chef server from the chef-shell. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0570033260b877fe1c0116204e43fe31adf24ac8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush_cache&lt;/code&gt; property does not flush the local Yum cache! Use Yum tools&amp;mdash;&lt;code&gt;yum clean headers&lt;/code&gt;, &lt;code&gt;yum clean packages&lt;/code&gt;, &lt;code&gt;yum clean all&lt;/code&gt;&amp;mdash;to clean the local Yum cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b716549d24a7672b906d80d2a2f94fe994c5964d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gather-logs&lt;/code&gt; subcommand is used to gather the Chef server log files into a tarball that contains all of the important log files and system information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b9024b6a4f77629542eadbf85fc2d8ee807e13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grant-server-admin-permissions&lt;/code&gt; subcommand is used to add a user to the &lt;code&gt;server-admins&lt;/code&gt; group. Run the command once per user added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9915b79544db80084df783ebc3892f2c78ada74e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;group&lt;/code&gt; property is an alias of the &lt;code&gt;gid&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe6b47517776ca7f0af573287af0eccc6e3a1dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;guard_interpreter&lt;/code&gt; property is set to &lt;code&gt;:default&lt;/code&gt; by default for the &lt;strong&gt;bash&lt;/strong&gt;, &lt;strong&gt;csh&lt;/strong&gt;, &lt;strong&gt;perl&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt;, and &lt;strong&gt;ruby&lt;/strong&gt; resources. When the &lt;code&gt;guard_interpreter&lt;/code&gt; property is set to &lt;code&gt;:default&lt;/code&gt;, &lt;code&gt;not_if&lt;/code&gt; or &lt;code&gt;only_if&lt;/code&gt; guard statements &lt;strong&gt;do not inherit&lt;/strong&gt; properties that are defined by the &lt;strong&gt;script&lt;/strong&gt;-based resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2fce9cc861f281be42f6f63d9bd2ef189c22663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;guard_interpreter&lt;/code&gt; property may be set to any of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1a1a02e0f5fdd998126e3b7597d88560d429f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ha-status&lt;/code&gt; subcommand is used to check the status for services running in a high availability topology. This command will verify the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a47c5fe27674125857f614cf2342e3b8a8a7918" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help&lt;/code&gt; subcommand is used to print a list of all available chef-server-ctl commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cfd434008c159868580c0a4b3dca4b57af60ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;httpd.conf.erb&lt;/code&gt; template has two variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b3374a6cdfe203cd5c83698cfa2cd67c5c1425" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hup&lt;/code&gt; subcommand is used to send a &lt;code&gt;SIGHUP&lt;/code&gt; to all services. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cf1289e4607b2b10c4bd82f354a48f78344fe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; for each data bag item will be returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62c3e7a45db9db22f9eb78b3c35e8b68cee29a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement randomly chooses PHP or Perl, saving the choice to &lt;code&gt;node.run_state['scripting_language']&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681d70a69abc50dfe1b98ec5541bbb225428693f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignore_failure&lt;/code&gt;, &lt;code&gt;provider&lt;/code&gt;, &lt;code&gt;retries&lt;/code&gt;, &lt;code&gt;retry_delay&lt;/code&gt;, and &lt;code&gt;supports&lt;/code&gt; properties can be used with any resource or custom resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0485477fb5be00e8180c1727551db4476bb3b03b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include?&lt;/code&gt; method can be used to ensure that a specific parameter is included before an action is taken. For example, using the &lt;code&gt;include?&lt;/code&gt; method to find a specific parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379fe533ca7b7b4c9e3d8731d2442b2dedd3fa1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; subcommand downloads packages from &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt; by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from &lt;a href=&quot;https://downloads.chef.io/chef-manage/&quot;&gt;https://downloads.chef.io/chef-manage/&lt;/a&gt;, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the &lt;code&gt;install&lt;/code&gt; command using the &lt;code&gt;--path&lt;/code&gt; option to specify the directory in which the package is located:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607f3371bcc23b43c2fa86316e6fe89ef721d44e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; subcommand downloads packages from &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt; by default. For systems that are not behind a firewall (and have connectivity to &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt;), the Chef management console package can be installed as described below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133af09467f0d093ce2fd2228ded65e6c627aed1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; subcommand downloads packages from &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt; by default. For systems that are not behind a firewall (and have connectivity to &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt;), these packages can be installed as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e010f2237482345fcb7e91e483cde30c9ccb55b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; subcommand is used to install premium features of the Chef server: Chef management console, Chef Analytics, chef-client run reporting, high availability configurations, Chef push jobs, and Chef server replication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae0bffebb89dffb87556ce29cbe87d8466d7fde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instance_name&lt;/code&gt; property is then used within the custom resource in many locations, including defining paths to configuration files, services, and virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed319900b0cb0841de34f85a09f54e584f1bf6e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; subcommand is used to send a &lt;code&gt;SIGINT&lt;/code&gt; to all services. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54cd6d00f690fc234fe08b4b8290ad65f27a6480" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kill&lt;/code&gt; subcommand is used to send a &lt;code&gt;SIGKILL&lt;/code&gt; to all services. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039a39cd4244f8093fadf7799d5f64b39cd17c00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife bootstrap&lt;/code&gt; command is a common way to install the chef-client on a node. The default for this approach assumes that a node can access the Chef website so that it may download the chef-client package from that location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a6fd5fb1c32bd8477dc1adafc068446f6176ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand is used to run a bootstrap operation that installs the chef-client on the target node. The following steps describe how to bootstrap a node using knife.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b0d13774812b3e47a0ecbc80af49a0ec88582e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand relies on a number of SSH-related settings that are handled by the &lt;code&gt;knife ssh&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685d4a0b0758af4afc781a8308235db427f1c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand will look in three locations for the template that is used during the bootstrap operation. The locations are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a62c458e497a9e462354affa08f127880d8c940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife client&lt;/code&gt; subcommand is used to manage an API client list and their associated RSA public key-pairs. This allows authentication requests to be made to the Chef server by any entity that uses the Chef server API, such as the chef-client and knife.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62833dbee0269cb52a28c3a9efca4cbb77e7b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife cookbook site&lt;/code&gt; subcommand is used to interact with cookbooks that are located at &lt;a href=&quot;https://supermarket.chef.io&quot;&gt;https://supermarket.chef.io&lt;/a&gt;. A user account is required for any community actions that write data to this site. The following arguments do not require a user account: &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, and &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fac3ae62538e0fb3ae493d4181e0932c13e8436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife cookbook&lt;/code&gt; subcommand is used to interact with cookbooks that are located on the Chef server or the local chef-repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28898081325a0bd7a664152e8e93053aa38805b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife data bag&lt;/code&gt; subcommand is used to manage arbitrary stores of globally available JSON data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26ec409bf9756f560736e6a0799d97f781d8143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife environment&lt;/code&gt; subcommand is used to manage environments within a single organization on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125360fdeee149c2c15571058918c9ad8b579abe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife exec&lt;/code&gt; subcommand can be used to make authenticated API requests to the Chef server using the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ac50c50d623a11c538c5b3440d5965ba30cb80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife exec&lt;/code&gt; subcommand uses the knife configuration file to execute Ruby scripts in the context of a fully configured chef-client. Use this subcommand to run scripts that will only access Chef server one time (or otherwise very infrequently) or any time that an operation does not warrant full usage of the knife subcommand library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95305a7b9548b82bfc41d1d074acf4344d673ba2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife node&lt;/code&gt; subcommand is used to manage the nodes that exist on a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bbf8b0c7a149dccafa0a5c1628e7dd8a5f7be8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife role&lt;/code&gt; subcommand is used to manage the roles that are associated with one or more nodes on a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c571acd7516472619ec41678fef9196f66bbf51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife tag&lt;/code&gt; subcommand is used to apply tags to nodes on a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c520e7c78263aaec64106688a7cb0143760889" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife user&lt;/code&gt; subcommand is used to manage the list of users and their associated RSA public key-pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2dfdea3b8c566154daeefe41db497f0a2fc04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;knife windows&lt;/code&gt; subcommand is used to configure and interact with nodes that exist on server and/or desktop machines that are running Microsoft Windows. Nodes are configured using WinRM, which allows native objects&amp;mdash;batch scripts, Windows PowerShell scripts, or scripting library variables&amp;mdash;to be called by external applications. The &lt;code&gt;knife windows&lt;/code&gt; subcommand supports NTLM and Kerberos methods of authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37497b6f7760179fd799b8c925d2acfd6aaba1f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ldapsearch&lt;/code&gt; command may need to be installed on the platform. It is not included as part of the Chef server package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60f7d9fcfb98f35418e143e22b86105c83c4e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list-server-admins&lt;/code&gt; subcommand is used to return a list of users who are members of the &lt;code&gt;server-admins&lt;/code&gt; group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115533d171734e80b045817584cb1a57183126a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list&lt;/code&gt; command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3d9cb335c57daefa4780f5d12fb6064e54d99d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;master-recover&lt;/code&gt; subcommand is used to force the Chef server to attempt to become the master server. This command is typically run in tandem with the &lt;code&gt;backup-recover&lt;/code&gt; subcommand on the back-end peer, unless the back-end peer is no longer available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b885a019a053345cf05d8c670359919ebe5d5384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_size&lt;/code&gt; parameter used by the Nginx cache manager, which is part of the &lt;code&gt;proxy_cache_path&lt;/code&gt; directive. When the size of file storage exceeds this value, the Nginx cache manager removes the least recently used data. Default value: &lt;code&gt;5000m&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212f69cc77a1883891a66dae3b37acbbe9bd1ab6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nagios&lt;/code&gt; access logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a8bfca771a59bcb25f8b6ac92a653192b5c65e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nagios&lt;/code&gt; error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a491270e6bc47d98bb11754b57094171b11f4af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nginx&lt;/code&gt; service creates both supervisor and administrator logs. The administrator logs contain both access and error logs for each virtual host utilized by the Chef server. Each of the following logs require external log rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d668f35f326118f17e3fa3a119a7345029c8c291" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no_proxy&lt;/code&gt; setting is used to specify addresses for which the proxy should not be used. This can be a single address or a comma-separated list of addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d80a0bfef4f6f6684dff5d97a0455e0f299ef08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node_name&lt;/code&gt; property as a short node name (&lt;code&gt;sname&lt;/code&gt;) or a long node name (&lt;code&gt;name&lt;/code&gt;). A node with a long node name cannot communicate with a node with a short node name. Default value: &lt;code&gt;sname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa57f50e67970afc4d93afbe4fdcee4e26a5e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; conditional executions can be used to put additional guards around certain resources so that they are only run when the condition is met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca94b128744a72cafab8cf8ed2cb9e601f27d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;not_if&lt;/code&gt; guard prevents the Windows PowerShell script from running when the settings in the &lt;code&gt;not_if&lt;/code&gt; guard match the desired state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e88407d236ad2df39c8528dbb87e34feaf46928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;not_if&lt;/code&gt; statement now inherits the &lt;code&gt;environment&lt;/code&gt; property and will use the &lt;code&gt;JAVA_HOME&lt;/code&gt; path as part of its evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f7053a6b3dcddd4894f0c9c32be9d0445ccf5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notifies&lt;/code&gt; and &lt;code&gt;subscribes&lt;/code&gt; notifications can be used with any resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ed0aa6c74c3be14a474614930b51bb9625d904" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notifies&lt;/code&gt; statement tells the &lt;strong&gt;reboot&lt;/strong&gt; resource block to run if the &lt;strong&gt;powershell_script&lt;/strong&gt; block was executed during the chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff18467d6cc9aeefb740548473afe2ee2db750a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;old_settings.rb.bak&lt;/code&gt; file is ignored because it&amp;rsquo;s not a configuration file. The &lt;code&gt;config.rb&lt;/code&gt;, &lt;code&gt;company_settings.rb&lt;/code&gt;, and &lt;code&gt;ec2_configuration&lt;/code&gt; files are merged together as if they are a single configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7b534b2c0273c41b2390e4e4962673c8cf4349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-account&lt;/code&gt; internal load-balancer access logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ab4855f733848d0696248ba526f8d3704dd27e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-account&lt;/code&gt; internal load-balancer error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2a7d29d5649bf49c2b6154bf33af58e0b8a933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-authz&lt;/code&gt; internal load-balancer access logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cbe71360087046d130840cb294e56fadc171d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-authz&lt;/code&gt; internal load-balancer error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a1c96d213e0bd27a1580a9e7b3e58d28f08402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-chef&lt;/code&gt; and &lt;code&gt;opscode-erchef&lt;/code&gt; internal load-balancer access logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384d40ba73e72948c81dcb1dcdbfb9a6d506188f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opscode-chef&lt;/code&gt; and &lt;code&gt;opscode-erchef&lt;/code&gt; internal load-balancer error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5635524408c0afc0597340ab9fb65c38539bf74f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-create&lt;/code&gt; subcommand is used to create an organization. (The validation key for the organization is returned to &lt;code&gt;STDOUT&lt;/code&gt; when creating an organization with this command.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a352b3ab9069ae7b78d2408b2f253af64daf3205" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-delete&lt;/code&gt; subcommand is used to delete an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a698e3ac8a699496e73f3d417095a8a9921cfd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-list&lt;/code&gt; subcommand is used to list all of the organizations currently present on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a3ae285ec6bf0d7f173eddafb24ab3a99fe84e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-show&lt;/code&gt; subcommand is used to show the details for an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61f86a7d944d57d9b9ab66fb6933636846a96ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-user-add&lt;/code&gt; subcommand is used to add a user to an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17991c9f435e2045c967a443afaaf22dd1af8b45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org-user-remove&lt;/code&gt; subcommand is used to remove a user from an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ee6ef49137f63e5f854b6972fbfabe215c5264" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; subcommand is used to change a user&amp;rsquo;s password. When Active Directory or LDAP is enabled, this command enables (or disables) the system recovery password for that user. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c2376239c7d137e84e252f54fc93d7b4633e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pivotal.pem&lt;/code&gt; file must exist in the specified location and the IP addresses must be correct for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0134842f649aa3a07e02919c2309d07e211121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prempt_delay&lt;/code&gt; value for the VRRP instance. Default value: &lt;code&gt;'30'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13b8638894c371f5e72812acff547324d0b86a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiles&lt;/code&gt; command will be used to install the configuration profile, which is provided as a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852d07ae5db8e0b2bf2844a30ab31f76186e3524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiles&lt;/code&gt; command will be used to install the specified configuration profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b04610ebdb94dd4dbea867b366a59aafd47822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiles&lt;/code&gt; command will be used to install the specified configuration profile. It can be in sub-directory within a cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45138428fdbe9706bba0654abd815e121cd8995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiles&lt;/code&gt; command will be used to remove the configuration profile specified by the provided &lt;code&gt;identifier&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8204d5171b4b2c0883d679d3f583d974fe4efc9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;property_is_set?&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; if the property is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f13c5fb3bbf150d37f7679b9bc503f9ab281194" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psql&lt;/code&gt; subcommand is used to log into the PostgreSQL database associated with the named service. This subcommand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5793da13e81ff6ce45c52d54d15f03f1ae41285e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;public_key_read_access&lt;/code&gt; group controls which users and clients have &lt;a href=&quot;api_chef_server&quot;&gt;read permissions to the following endpoints&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decd8185b55787c9222fc60acebfbf5fa0fa4dd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;public_key_read_access&lt;/code&gt; group defines which users and clients have read permissions to key-related endpoints in the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf14fd61761a1384e166c09ed6baf6de9390af86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;purge_before_symlink&lt;/code&gt; application layout is an array of paths that will be cleared before the &lt;code&gt;symlinks&lt;/code&gt; property is run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b449c1bf84bf87148d9cce57e418230a8e8904" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recipes&lt;/code&gt; field is updated each time the chef-client is run; changes to a run-list will not affect &lt;code&gt;recipes&lt;/code&gt; until the next time the chef-client is run on the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1fbcc7efe7db8c6c6ff6889f27ae93fe6ea0eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reconfigure&lt;/code&gt; subcommand is used when changes are made to the chef-server.rb file to reconfigure the server. When changes are made to the chef-server.rb file, they will not be applied to the Chef server configuration until after this command is run. This subcommand will also restart any services for which the &lt;code&gt;service_name['enabled']&lt;/code&gt; setting is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f5b9a4e885d4e1a8787531ab34abc8632d6088" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reindex&lt;/code&gt; subcommand is used to reload Chef server data from PostgreSQL to Apache Solr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e683d03b40dfc2af68884877eac7ac696456b09f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove-server-admin-permissions&lt;/code&gt; subcommand is used to remove a user from the &lt;code&gt;server-admins&lt;/code&gt; group. Run the command once per user removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557bafafcc70247b43154e0b96b5d9f821aac2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; interface is used to define how a handler will behave and is a required part of any custom handler. The syntax for the &lt;code&gt;report&lt;/code&gt; interface is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc8ca4b7556b1ee374d2a97994fce120123288f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require-credential-rotation&lt;/code&gt; subcommand takes the Chef server offline and requires a complete service credential rotation before the Chef server(s) in your cluster can restart again. Run &lt;code&gt;rotate-shared-secrets&lt;/code&gt; to create a new shared secret, salt, and generate the new service credentials. Then copy the secrets file to each Chef server and run &lt;code&gt;sudo chef-server-ctl reconfigure&lt;/code&gt; on them to complete the rotation process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1e8b9140970ab9b12472051f3cc9fbfb5bf935" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resources&lt;/code&gt; method can be used to modify a resource later on in a recipe. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0604266447e80be44009b51d82c4b5a130b3bd5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart&lt;/code&gt; subcommand is used to restart all services enabled on the Chef server or to restart an individual service by specifying the name of that service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684fb88122a238e76b6d7e5d57cefdae612ddd8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restore&lt;/code&gt; subcommand is used to restore Chef server data from a backup that was created by the &lt;code&gt;backup&lt;/code&gt; subcommand. This subcommand may also be used to add Chef server data to a newly-installed server. This subcommand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050326411f7d05b60135bc9d29a57ebeaccc20c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; keyword can be used to stop processing a recipe based on a condition, but continue processing the chef-client run. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde5658a920afaf73b7af8af5db471ab2ad14ec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rights&lt;/code&gt; property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the &lt;code&gt;rights&lt;/code&gt; property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the &lt;code&gt;rights&lt;/code&gt; property is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a8afa358f49285bf09bfa92f341286746ed954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;roles/&lt;/code&gt; directory is used to store the files that define the roles that are available to the Chef server. The roles files can be Ruby DSL files (.rb) or they can be JSON files (.json). Use knife to install role files to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8761bfc6d10f2d84d515820cd497c400d890b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;roles&lt;/code&gt; field is updated each time the chef-client is run; changes to a run-list will not affect &lt;code&gt;roles&lt;/code&gt; until the next time the chef-client is run on the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2fe0241ece598173298b49168c77e942d50d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rotate-all-credentials&lt;/code&gt; subcommand generates new credential values for all service credentials by incrementing the credential version number and creating a new hash value. You can choose whether to copy the updated secrets file to each node in the cluster and reconfiguring or by running this subcommand on all the nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd55264a31582df7e425840712f451259ac3a97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rotate-credentials&lt;/code&gt; subcommand generates new credential values for all credentials for a given service by incrementing the value and creating a new hash value. You can choose whether to copy the updated secrets file to each node in the cluster and reconfiguring or by running this subcommand for that specific service on all the nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b402f79342830193d791b287125007a78ec820ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rotate-shared-secrets&lt;/code&gt; subcommand creates a new shared secret and salt, in addition to generating new service credentials. It also resets the &lt;code&gt;credential_version&lt;/code&gt; number for the services to 0. After you have run this subcommand, a new shared secret has been created, so you must copy the secrets file to each Chef server and run &lt;code&gt;sudo chef-server-ctl reconfigure&lt;/code&gt; on them to complete the rotation process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7327af02b2a20f82f64618c42144267040185dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_report_safely&lt;/code&gt; method is used to run the report handler, rescuing and logging errors that may arise as the handler runs and ensuring that all handlers get a chance to run during the chef-client run (even if some handlers fail during that run). In general, this method should never be used as an interface in a custom handler unless this default behavior simply must be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92bd52cce994a57513140758f26c7e461a088e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_report_unsafe&lt;/code&gt; method is used to run the report handler without any error handling. This method should never be used directly in any handler, except during testing of that handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc83ab6765c9ef4182bcf7e0a3d1bdfb212ee97a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_status&lt;/code&gt; object is initialized by the chef-client before the &lt;code&gt;report&lt;/code&gt; interface is run for any handler. The &lt;code&gt;run_status&lt;/code&gt; object keeps track of the status of the chef-client run and will contain some (or all) of the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fc574ec1daa6ccb63da62e9429bc01aa814c49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;runit&lt;/code&gt; status of the services are correct (up or down) based on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;backup&lt;/code&gt; state of the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc55af788e2bdef604af9f5acb979ea39f616084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server-admins&lt;/code&gt; group is a global group that grants its members permission to create, read, update, and delete user accounts, with the exception of superuser accounts. The &lt;code&gt;server-admins&lt;/code&gt; group is useful for users who are responsible for day-to-day administration of the Chef server, especially user management via the &lt;code&gt;knife user&lt;/code&gt; subcommand. Before members can be added to the &lt;code&gt;server-admins&lt;/code&gt; group, they must already have a user account on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd9fc2a0ad5765b29a416768dd8795216c349af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;service-list&lt;/code&gt; subcommand is used to display a list of all available services. A service that is enabled is labeled with an asterisk (*).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3e5743c29dd7165c519737be90a3e920351abe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell_out!&lt;/code&gt; method can be used to run a command against the node, display the output to the console when the log level is set to &lt;code&gt;debug&lt;/code&gt;, and then raise an error when the method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73fcf8179949ac9c4e20dd401f05c4adde6c132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell_out&lt;/code&gt; method can be used to run a command against the node, and then display the output to the console when the log level is set to &lt;code&gt;debug&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514e523051dd897c42622bda28d9afde70ff2e9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell_out_with_systems_locale&lt;/code&gt; method can be used to run a command against the node (via the &lt;code&gt;shell_out&lt;/code&gt; method), but using the &lt;code&gt;LC_ALL&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b67115b655ec4f66ef4ab66574c827b5b958f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;show-config&lt;/code&gt; subcommand is used to view the configuration that will be generated by the &lt;code&gt;reconfigure&lt;/code&gt; subcommand. This command is most useful in the early stages of a deployment to ensure that everything is built properly prior to installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f3db3769a8b896a0c36514218915396fd990dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;show-service-credentials&lt;/code&gt; subcommand shows all of the service credentials for services running on the local Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af68f2a9c7cc8c424f30f57bc0a15aa6d3e8415f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;show&lt;/code&gt; command can be used to display a specific node. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f6d8296d43b2a7a159a25c9ac60abb32b4bead" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssl_verify_mode&lt;/code&gt; continued to default to &lt;code&gt;:verify_none&lt;/code&gt;, but now returned a warning: &lt;code&gt;SSL validation of HTTPS requests is disabled...&lt;/code&gt;, followed by steps for how to configure SSL certificate validation for the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c2e2da9f038d3ce51df79609a888b1566f369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; subcommand is used to start all services that are enabled in the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7711f0c346473fc672729a47874638916d7ef70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;status&lt;/code&gt; subcommand is used to show the status of all services available to the Chef server. The results will vary based on the configuration of a given server. This subcommand has the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a009db1aa24b5c5325088df292a671d1c9c497" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stop&lt;/code&gt; subcommand is used to stop all services enabled on the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8157da72a601f5d95f0efcb60e536049a85adeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supports&lt;/code&gt; attribute of the &lt;code&gt;user&lt;/code&gt; resource has been deprecated. The &lt;code&gt;supports[:manage_home]&lt;/code&gt; property was an alias for the &lt;code&gt;manage_home&lt;/code&gt; property, while the &lt;code&gt;supports[:non_unique]&lt;/code&gt; property was an alias for the &lt;code&gt;non_unique&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c4ab9323e6d106b60ffdca02a32fdef9fd8a1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;symlinks&lt;/code&gt; property is creating three symbolic links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8882955956badc9d1c0abd0a421b47d4f4f8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tail&lt;/code&gt; subcommand is used to follow all of the Chef server logs for all services. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e127e83a43162964fdaf1f7008baa8c920efab1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;term&lt;/code&gt; subcommand is used to send a &lt;code&gt;SIGTERM&lt;/code&gt; to all services. This command can also be run for an individual service by specifying the name of the service in the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba83b0de8ec82fdb7a1be03d94f94920f0df1ebb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timestamped_deploy&lt;/code&gt; provider is the default &lt;strong&gt;deploy&lt;/strong&gt; provider. It is used to name release directories with a timestamp in the form of &lt;code&gt;YYYYMMDDHHMMSS&lt;/code&gt;. For example: &lt;code&gt;/my/deploy/dir/releases/20121120162342&lt;/code&gt;. The &lt;strong&gt;deploy&lt;/strong&gt; resource will determine whether or not to deploy code based on the existence of the release directory in which it is attempting to deploy. Because the timestamp is different for every chef-client run, the &lt;code&gt;timestamped_deploy&lt;/code&gt; provider is not idempotent. When the &lt;code&gt;timestamped_deploy&lt;/code&gt; provider is used, it requires that the action setting on a resource be managed manually in order to prevent unintended continuous deployment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1cd21b23f29f9f46c93bda40980fed42a3b8a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tr&lt;/code&gt; command eliminates any trailing line feeds. Doing so avoids key corruption when transferring the file between platforms with different line endings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895dfe69e750b521a826e382ed7d313028368a50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uninstall&lt;/code&gt; subcommand is used to remove the Chef server application, but without removing any of the data. This subcommand will shut down all services (including the &lt;code&gt;runit&lt;/code&gt; process supervisor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e7fddbb01268ad552ac06fe5fecc4576474d11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upgrade&lt;/code&gt; subcommand is used to upgrade the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6a57c0bb38329fa547254c95e9248f89edf2ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use_conditional_get&lt;/code&gt; attribute is the default behavior of the chef-client. If the remote file is located on a server that supports ETag and/or If-Modified-Since headers, the chef-client will use a conditional &lt;code&gt;GET&lt;/code&gt; to determine if the file has been updated. If the file has been updated, the chef-client will re-download the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11082bfa4e83f7bd0889b2ce98a7b0136184bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user-create&lt;/code&gt; subcommand is used to create a user. (The validation key for the organization may be returned to &lt;code&gt;STDOUT&lt;/code&gt; when creating a user with this command.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ea0b7e94ac1acf9a93e08d60fb29554e36d2a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user-delete&lt;/code&gt; subcommand is used to delete a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3119b3d3f7d985dda77d8eb3465fd6d1038e6afc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user-edit&lt;/code&gt; subcommand is used to edit the details for a user. The data will be made available in the $EDITOR for editing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529f05260bb15f07940a7bdb8f642056d0991e25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user-list&lt;/code&gt; subcommand is used to view a list of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431ec49377bd96d2d0537847ea858241ba715a45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user-show&lt;/code&gt; subcommand is used to show the details for a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe51c822f32e64f179750ebe34590852379f23e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;users&lt;/code&gt; group defines the list of users who use knife and the Chef management console to interact with objects and object types. In general, think of this permission as &amp;ldquo;all of the non-admin human actors who work with data that is uploaded to and/or downloaded from the Chef server&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034c437e2b1cc9c9aa854feefe8f0b1ec152876e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;users&lt;/code&gt; group is assigned the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f87bd3cad4a9ebc2bec75d0135257b101564e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;variables&lt;/code&gt; property of the &lt;strong&gt;template&lt;/strong&gt; resource can be used to reference a partial template file by using a Hash. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3091ffcced6e89b9211bbaf77891f7f90a9e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;whitelist&lt;/code&gt; setting is available only when using Chef push jobs, a tool that runs jobs against nodes in an organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dab50446931de95631b54cd60b3c808fb11765" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bash&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eb592b49535ba703ab983149e10a4f6918c14c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;batch&lt;/strong&gt; and &lt;strong&gt;powershell_script&lt;/strong&gt; resources inherit properties by default. The &lt;code&gt;guard_interpreter&lt;/code&gt; property is set to &lt;code&gt;:batch&lt;/code&gt; or &lt;code&gt;:powershell_script&lt;/code&gt; automatically when using a &lt;code&gt;not_if&lt;/code&gt; or &lt;code&gt;only_if&lt;/code&gt; guard statement within a &lt;strong&gt;batch&lt;/strong&gt; or &lt;strong&gt;powershell_script&lt;/strong&gt; resource, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd98f9990479af6e362be82fcaaa614a6468532" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bff_package&lt;/strong&gt; resource is the default package provider on the AIX platform. The base &lt;strong&gt;package&lt;/strong&gt; resource may be used, and then when the platform is AIX, the chef-client will identify the correct package provider. The following examples show how to install part of the IBM XL C/C++ compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbeb4fe1c15840e07d8164af695257c71f15d51" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bookshelf&lt;/strong&gt; service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files&amp;mdash;recipes, templates, and so on&amp;mdash;that are associated with each cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fa7925f3b6f13a3578af3ade707d70d97067e9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef-client&lt;/strong&gt; cookbook can be configured to automatically install and configure gems that are required by a start handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fcfe9d6607b2a7b19d3ae75ef6f96094750663" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef_gem&lt;/strong&gt; and &lt;strong&gt;gem_package&lt;/strong&gt; resources are both used to install Ruby gems. For any machine on which the chef-client is installed, there are two instances of Ruby. One is the standard, system-wide instance of Ruby and the other is a dedicated instance that is available only to the chef-client. Use the &lt;strong&gt;chef_gem&lt;/strong&gt; resource to install gems into the instance of Ruby that is dedicated to the chef-client. Use the &lt;strong&gt;gem_package&lt;/strong&gt; resource to install all other gems (i.e. install gems system-wide).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b24f9ff9920caf40728c8164afbd4fa4fa33be" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef_gem&lt;/strong&gt; resource works with all of the same properties and options as the &lt;strong&gt;gem_package&lt;/strong&gt; resource, but does not accept the &lt;code&gt;gem_binary&lt;/code&gt; property because it always uses the &lt;code&gt;CurrentGemEnvironment&lt;/code&gt; under which the chef-client is running. In addition to performing actions similar to the &lt;strong&gt;gem_package&lt;/strong&gt; resource, the &lt;strong&gt;chef_gem&lt;/strong&gt; resource does the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38694d2a8df43b2eaecb7b36d0952ce57b5eb8be" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef_handler&lt;/strong&gt; resource &lt;a href=&quot;https://github.com/chef-cookbooks/chef_handler&quot;&gt;is included with the chef_handler cookbook&lt;/a&gt;. This cookbook defines the the resource itself and also provides the location in which the chef-client looks for custom handlers. All custom handlers should be added to the &lt;code&gt;files/default/handlers&lt;/code&gt; directory in the &lt;strong&gt;chef_handler&lt;/strong&gt; cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f1b5cd1d8853a2ca0053a023bdd19642d49555" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef_handler&lt;/strong&gt; resource allows exception and report handlers to be enabled from within recipes, which can then added to the run-list for any node on which the exception or report handler should run. The &lt;strong&gt;chef_handler&lt;/strong&gt; resource is available from the &lt;strong&gt;chef_handler&lt;/strong&gt; cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a4f22266044bc7b2afbfc199a9c439456ed8a6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chef_handler&lt;/strong&gt; resource is typically defined early in a node&amp;rsquo;s run-list (often being the first item). This ensures that all of the handlers will be available for the entire chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55dabe0f4ac65041e72e0f273abf37e266fb579" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;chocolatey_package&lt;/strong&gt; resource must be specified as &lt;code&gt;chocolatey_package&lt;/code&gt; and cannot be shortened to &lt;code&gt;package&lt;/code&gt; in a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625b118171f6431c46cd466c342e3f1826e0a01f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;cron&lt;/strong&gt; resource should only be used to modify an entry in a crontab file. Use the &lt;strong&gt;cookbook_file&lt;/strong&gt; or &lt;strong&gt;template&lt;/strong&gt; resources to add a crontab file to the cron.d directory. The &lt;code&gt;cron_d&lt;/code&gt; lightweight resource (found in the &lt;a href=&quot;https://github.com/chef-cookbooks/cron&quot;&gt;cron&lt;/a&gt; cookbook) is another option for managing crontab files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5769cf929487be6ecd7079d1beefbd7a7a69a192" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;csh&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b340cb744a6e2833c1e2ac9bbfbd13f495f83f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;deploy&lt;/strong&gt; resource expects an application to be structured like a Ruby on Rails application, but the layout can be modified to meet custom requirements as needed. Use the following attributes within a recipe to modify the layout of a recipe that is using the &lt;strong&gt;deploy&lt;/strong&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662725d4d1d5e2e8777bb607fcaa3b336721c627" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;deploy&lt;/strong&gt; resource is modeled after Capistrano, a utility and framework for executing commands in parallel on multiple remote machines via SSH. The &lt;strong&gt;deploy&lt;/strong&gt; resource is designed to behave in a way that is similar to the &lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;deploy:migration&lt;/code&gt; tasks in Capistrano.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710e34fe930eddac50400b7a6a3db21e74f86b5f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;deploy_branch&lt;/strong&gt; resource functions identically to the &lt;strong&gt;deploy_revision&lt;/strong&gt; resource, in terms of how the chef-client processes the resource during the chef-client run. It uses the same &lt;code&gt;Deploy::Revision&lt;/code&gt; provider, the same set of actions and attributes, and is (outside of the name itself) identical to the &lt;strong&gt;deploy_revision&lt;/strong&gt; resource. Using the &lt;strong&gt;deploy_revision&lt;/strong&gt; resource is preferred; however, the &lt;strong&gt;deploy_branch&lt;/strong&gt; resource exists for those situations where, semantically, it is preferable to refer to a resource as a &amp;ldquo;branch&amp;rdquo; instead of a &amp;ldquo;revision&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea884e60b8d09cd8df45a1367c91f2a04ffd122" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;directory&lt;/strong&gt; resource can be used to create directory structures, as long as each directory within that structure is created explicitly. This is because the &lt;code&gt;recursive&lt;/code&gt; attribute only applies &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;owner&lt;/code&gt; attribute values to the leaf directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b6c221d23f5ea92970a04951f5551c165d67af" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;dsc_resource&lt;/strong&gt; resource allows any DSC resource to be used in a Chef recipe, as well as any custom resources that have been added to your Windows PowerShell environment. Microsoft &lt;a href=&quot;https://github.com/powershell/DscResources&quot;&gt;frequently adds new resources&lt;/a&gt; to the DSC resource collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e85c21732f2804e7c9872172527baf214c5358" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;dsc_resource&lt;/strong&gt; resource can only use binary- or script-based resources. Composite DSC resources may not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee21b29507ff6ac8852d2701014b8d92453e1b0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;dsc_script&lt;/strong&gt; resource can be used with other resources. The following example shows how to download a file using the &lt;strong&gt;remote_file&lt;/strong&gt; resource, and then uncompress it using the DSC &lt;code&gt;Archive&lt;/code&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85394be46a2800f06ad9312aabb864e0734b413b" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;dsc_script&lt;/strong&gt; resource may not be used in the same run-list with the &lt;strong&gt;dsc_resource&lt;/strong&gt;. This is because the &lt;strong&gt;dsc_script&lt;/strong&gt; resource requires that &lt;code&gt;RefreshMode&lt;/code&gt; in the Local Configuration Manager be set to &lt;code&gt;Push&lt;/code&gt;, whereas the &lt;strong&gt;dsc_resource&lt;/strong&gt; resource requires it to be set to &lt;code&gt;Disabled&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77c86ed47f0166579cd92ce86d4836ac3ebffa2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;execute&lt;/strong&gt; resource cannot be used to source a file (e.g. &lt;code&gt;command 'source filename'&lt;/code&gt;). The following example will fail because &lt;code&gt;source&lt;/code&gt; is not an executable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7ad931477b8f4c91aaa39e07e01446ec93cec2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;gem_package&lt;/strong&gt; resource must be specified as &lt;code&gt;gem_package&lt;/code&gt; and cannot be shortened to &lt;code&gt;package&lt;/code&gt; in a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777fb65cea5ab773050fe464e858f46cc30a336e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;git&lt;/strong&gt; provider automatically sets the &lt;code&gt;ENV['HOME']&lt;/code&gt; and &lt;code&gt;ENV['GIT_SSH']&lt;/code&gt; environment variables. To override this behavior and provide different values, add &lt;code&gt;ENV['HOME']&lt;/code&gt; and/or &lt;code&gt;ENV['GIT_SSH']&lt;/code&gt; to the &lt;code&gt;environment&lt;/code&gt; Hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a385d5db252f6fe26cf8f3e06037ed150feebb6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;keepalived&lt;/strong&gt; service manages the virtual IP address (VIP) between the backend machines in a high availability topology that uses DRBD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689457bcfadb6d87779eff18fdfbec50de5da81c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ksh&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c757872fb21f40872403040d12dae27e0298f1a0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;nginx&lt;/strong&gt; access log format is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad6b7de60cd784ca776925780e0e87274220044" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;nginx&lt;/strong&gt; service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d82acb3f386992d733670e508105bd9a86996e0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;oc-id&lt;/strong&gt; service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the &lt;strong&gt;oc-id&lt;/strong&gt; provider. No special credentials&amp;mdash;&lt;code&gt;webui_priv.pem&lt;/code&gt; or privileged keys&amp;mdash;are stored on the external application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f658d869d1ab13bcb7bebbe288f5b423a7beb230" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;oc_bifrost&lt;/strong&gt; service ensures that every request to view or manage objects stored on the Chef server is authorized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abab4b240fe689efce70e68b2a1f917a28463b46" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-authz&lt;/strong&gt; service is used to handle authorization requests to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3db9d6e1f0df7decdeeea46f2bfecd8b33ea804" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-erchef&lt;/strong&gt; service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5a1e520c8ab7c3fd98f742401f56d40a282413" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-erchef&lt;/strong&gt; service&amp;rsquo;s &lt;code&gt;current.log&lt;/code&gt; file contains a history of stack traces from major application crashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79731fc0a05123f629fd46487bad3d24e26d91a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-erchef&lt;/strong&gt; service&amp;rsquo;s &lt;code&gt;erchef.log&lt;/code&gt; file contains a history of API requests that have been processed by Erchef. These logs can be rotated quickly, therefore it is generally best to sort them by date, and then find the most recently updated log file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eade6bb573b42fd89e89ebff55ff75a894feb0a4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-expander&lt;/strong&gt; service is used to process data (pulled from the &lt;strong&gt;rabbitmq&lt;/strong&gt; service&amp;rsquo;s message queue) so that it can be properly indexed by the &lt;strong&gt;opscode-solr4&lt;/strong&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1cc775756cf36f5d3edcf4262155ed7b909f92" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-solr4&lt;/strong&gt; service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9e60bf6f9d03d89cc5a0858d4e562f9171da91" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;opscode-solr4&lt;/strong&gt; service located on the primary back end machine handles requests that are made from the Erchef service that is located on all front end machines in a Chef server cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fc73f2536a3af65f3a31b5211fd422242725e7" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;perl&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2021e0ebf88317d954fa28f8cfca0892ba468f3f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;postgresql&lt;/strong&gt; service is used to store node, object, and user data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e870753305e4a80064c240a5b0c4f206e2cb9a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;powershell_script&lt;/strong&gt; resource block renames a computer, and then joins a domain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f60b37712be707e3f53d7d2b5a41f4f514b34ac" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;powershell_script&lt;/strong&gt; resource creates and executes a temporary file (similar to how the &lt;strong&gt;script&lt;/strong&gt; resource behaves), rather than running the command inline. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1f010a892873e97604818d92462fe25db18575" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;python&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f48f72a84b7c6537a9ab743e12bfcaa78c9919b" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;rabbitmq&lt;/strong&gt; service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the &lt;strong&gt;rabbitmq&lt;/strong&gt; service is also used to send data from the Chef server to the Chef Analytics server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2b73f643ad8609536409e2424d49e9c5256542" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reboot&lt;/strong&gt; resource restarts the computer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15409ae992e806f56e1bfe5595700c7c6599659" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;redis_lb&lt;/strong&gt; service located on the back end machine handles requests that are made from the Nginx service that is located on all front end machines in a Chef server cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461862b5cd642f285764d9a444e340e5cb857bf8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;remote_directory&lt;/strong&gt; resource can be used to build a website using these files. This website is being run on an Apache web server. The resource would be similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ae95ef5105e8e335f19fe4ff551a22c73a261c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;remote_directory&lt;/strong&gt; resource can be used to recursively create the path outside of remote directory structures, but the permissions of those outside paths are not managed. This is because the &lt;code&gt;recursive&lt;/code&gt; attribute only applies &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;owner&lt;/code&gt; attribute values to the remote directory itself and any inner directories the resource copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f44ea86dba34e04c968e81952367bf07df25e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ruby&lt;/strong&gt; script resource (which is based on the &lt;strong&gt;script&lt;/strong&gt; resource) is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b881408e6b97dd098658c46e99a402501d8bc6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ruby_block&lt;/strong&gt; resource declares a &lt;code&gt;block&lt;/code&gt; of Ruby code that is run during the execution phase of the chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6d042760e2f00d92c377d392daef434c9ca3cd" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;script&lt;/strong&gt; resource is different from the &lt;strong&gt;ruby_block&lt;/strong&gt; resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38d6e48601927d7d64ca73d0387c04571283d64" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;service&lt;/strong&gt; resource does not have service-specific short names. This is because the chef-client identifies the platform at the start of every chef-client run based on data collected by Ohai. The chef-client looks up the platform, and then determines the correct provider for that platform. In certain situations, such as when more than one init system is available on a node, a specific provider may need to be identified by using the &lt;code&gt;provider&lt;/code&gt; attribute and the long name for that provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10e4a997b9e1bc9a416fae07a18a7deafc5a68f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;service&lt;/strong&gt; resource does not support using the &lt;code&gt;:enable&lt;/code&gt; and &lt;code&gt;:disable&lt;/code&gt; actions with resources that are managed using System Resource Controller (SRC). This is because System Resource Controller (SRC) does not have a standard mechanism for enabling and disabling services on system boot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f55e2591e1072107c85a72e9331e69717461ff4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;service&lt;/strong&gt; resource has the following providers to support the AIX platform:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e44f4784ee3916ea34a1f4216d25fe63a5c0eb" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;solaris_package&lt;/strong&gt; resource is used to manage packages for the Solaris platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972f789313a97ad63c49af8091f1471634dde5b3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;template&lt;/strong&gt; resource can be used to render a template based on settings contained in a local file on disk or to get the settings from a template in a cookbook. Most of the time, the settings are retrieved from a template in a cookbook. The following example shows how the &lt;strong&gt;template&lt;/strong&gt; resource can be used to retrieve these settings from a local file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ac8449ccff61cdcf136d8e8a5e02f3f81073ae" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;template&lt;/strong&gt;, &lt;strong&gt;file&lt;/strong&gt;, &lt;strong&gt;remote_file&lt;/strong&gt;, &lt;strong&gt;cookbook_file&lt;/strong&gt;, &lt;strong&gt;directory&lt;/strong&gt;, and &lt;strong&gt;remote_directory&lt;/strong&gt; resources support the use of inheritance and access control lists (ACLs) within recipes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa943888d66a1f148a8601d3baea888f5eb1733b" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;windows_package&lt;/strong&gt; resource may specify a package at a remote location using the &lt;code&gt;remote_file_attributes&lt;/code&gt; property. This uses the &lt;strong&gt;remote_file&lt;/strong&gt; resource to download the contents at the specified URL and passes in a Hash that modifes the properties of the &lt;a href=&quot;resource_remote_file&quot;&gt;remote_file resource&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd749d41accdfe0e156c50c86a6a37e8a0ad29e" translate="yes" xml:space="preserve">
          <source>The AIX platform requires &lt;code&gt;source&lt;/code&gt; to be a local file system path because &lt;code&gt;installp&lt;/code&gt; does not retrieve packages using HTTP or FTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5e77ac64a72c938bd069bd765469966a0e7cb3" translate="yes" xml:space="preserve">
          <source>The Chef Analytics platform is a feature of Chef that provides real-time visibility into what is happening on the Chef server, including what&amp;rsquo;s changing, who made those changes, and when they occurred. Individuals may be notified of these changes in real-time. Use this visibility to verify compliance against internal controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af977906c1014b635069f976caf13c6245d1df57" translate="yes" xml:space="preserve">
          <source>The Chef Analytics server can be configured to use SSL certificates by adding the following settings in the server configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b392ed98da4bbb480ff61cb88e5bfdd3dc58b1d8" translate="yes" xml:space="preserve">
          <source>The Chef Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e249c4e0413a1339f8841b1aadff21fc11e659bd" translate="yes" xml:space="preserve">
          <source>The Chef development kit can be uninstalled using the steps below that are appropriate for the platform on which the Chef development kit is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d6ad43beecb9fa4e87df3d104ff6eb90214618" translate="yes" xml:space="preserve">
          <source>The Chef development kit is a package that contains everything that is needed to start using Chef:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935d8feec838350b456ac82b54b2675de2a9d1f1" translate="yes" xml:space="preserve">
          <source>The Chef management console add-on can be used to create, edit, view, list, tag, and delete nodes. In addition, node attributes can be modified and nodes can be moved between environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1206fed582dbe3615bf21f05952b0f8d3baaff" translate="yes" xml:space="preserve">
          <source>The Chef management console enables the management of nodes, data bags, roles, environments, and cookbooks by using a web user interface. In addition, access to nodes, data bags, roles, environments, and cookbooks is configurable using role-based access control (RBAC).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bee3f0c82faa40fe2e9c7b20e6842620564d53" translate="yes" xml:space="preserve">
          <source>The Chef management console provides ways for users to &lt;a href=&quot;server_manage_nodes#server-manage-nodes-manage&quot;&gt;delete nodes and reset their private keys&lt;/a&gt;, &lt;a href=&quot;server_manage_nodes#server-manage-nodes-node-attributes&quot;&gt;edit node attributes&lt;/a&gt;, &lt;a href=&quot;server_manage_nodes#server-manage-nodes-run-lists&quot;&gt;manage the run-lists&lt;/a&gt;, &lt;a href=&quot;server_manage_nodes#server-manage-nodes-permissions&quot;&gt;configure user and group permissions&lt;/a&gt;, and &lt;a href=&quot;server_manage_nodes#server-manage-nodes-manage-tags&quot;&gt;manage tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cc242b6424555fc7c764fc9776e796260fcbe2" translate="yes" xml:space="preserve">
          <source>The Chef management console provides ways for users to &lt;a href=&quot;server_manage_reports#server-manage-reports-configure-reports&quot;&gt;configure the timeframe&lt;/a&gt; around which a report is built, and then to &lt;a href=&quot;server_manage_reports#server-manage-reports-view-reports&quot;&gt;review the reports&lt;/a&gt; that are available for that timeframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db71697695e1a5a182198b75ca8424085706e6c9" translate="yes" xml:space="preserve">
          <source>The Chef management console provides ways for users to manage &lt;a href=&quot;server_manage_data_bags&quot;&gt;data bags&lt;/a&gt;, &lt;a href=&quot;server_manage_environments&quot;&gt;environments&lt;/a&gt;, &lt;a href=&quot;server_manage_roles&quot;&gt;roles&lt;/a&gt;, &lt;a href=&quot;server_manage_cookbooks&quot;&gt;cookbooks&lt;/a&gt;, &lt;a href=&quot;server_manage_clients&quot;&gt;clients&lt;/a&gt;, and &lt;a href=&quot;server_manage_nodes#server-manage-nodes-manage-tags&quot;&gt;managing tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c15b8e5271fdfcc21e07abed06ac0059c9050d" translate="yes" xml:space="preserve">
          <source>The Chef management console uses the Chef server API for all communication to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd480efa0e460c3da5527a2b2326838a524c9bbe" translate="yes" xml:space="preserve">
          <source>The Chef push jobs and Reporting premium features of the Chef server use the same user and group accounts as the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e202fa7e781dd4d192528cd9a9387fbae1a58e2b" translate="yes" xml:space="preserve">
          <source>The Chef push jobs service adds the &lt;strong&gt;push_jobs&lt;/strong&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6ce94391a64bfbe21d3b9e00fb6d2e9ebef3f4" translate="yes" xml:space="preserve">
          <source>The Chef server API has the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39c5a8a8c04544f7c3bb81e251395b1095637b0" translate="yes" xml:space="preserve">
          <source>The Chef server API is a REST API that provides access to objects on the Chef server, including nodes, environments, roles, cookbooks (and cookbook versions), and to manage an API client list and the associated RSA public key-pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122b48fda3055980038107814a00e81eefb1c654" translate="yes" xml:space="preserve">
          <source>The Chef server API used by the Open Source Chef server does not have an &lt;code&gt;/organizations/ORG_NAME&lt;/code&gt; endpoint. Use this setting to ensure that migrated Open Source Chef servers are able to connect to the Chef server API. This value should be the same as the name of the organization that was created during the upgrade from Open Source Chef version 11 to Chef server version 12, which means it will be identical to the &lt;code&gt;ORG_NAME&lt;/code&gt; part of the &lt;code&gt;/organizations&lt;/code&gt; endpoint in Chef server version 12. Default value: the name of the organization specified during the upgrade process from Open Source Chef 11 to Chef server 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21ee92e0e2d0f8d6698ac7004726019e7e78a06" translate="yes" xml:space="preserve">
          <source>The Chef server acts as a hub for configuration data. The Chef server stores cookbooks, the policies that are applied to nodes, and metadata that describes each registered node that is being managed by the chef-client. Nodes use the chef-client to ask the Chef server for configuration details, such as recipes, templates, and file distributions. The chef-client then does as much of the configuration work as possible on the nodes themselves (and not on the Chef server). This scalable approach distributes the configuration effort throughout the organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa05dbece5279a1a01b9839d763522b2200770d2" translate="yes" xml:space="preserve">
          <source>The Chef server acts as a hub of information. Cookbooks and policy settings are uploaded to the Chef server by users from workstations. (Policy settings may also be maintained from the Chef server itself, via the Chef management console web user interface.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c2ac7c22452aaca723b7bafb6762ffa1260ea4" translate="yes" xml:space="preserve">
          <source>The Chef server can be configured to use SSL certificates by adding the following settings to the server configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f35d3a59d10eccc0847b8b1db335e2666197f9" translate="yes" xml:space="preserve">
          <source>The Chef server can operate in a high availability configuration that provides automated load balancing and failover for stateful components in the system architecture. This type of configuration typically splits the servers into two segments: front-end and back-end machines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b0ece1f46b061a9fd4fc7f7d11b1cfc8bcc115" translate="yes" xml:space="preserve">
          <source>The Chef server can regenerate them. These certificates will be located in &lt;code&gt;/var/opt/opscode/nginx/ca/&lt;/code&gt; and will be named after the FQDN for the Chef server. To determine the FQDN for the server, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1566ce822a2f07fb2237654ddce51daaddfd0c" translate="yes" xml:space="preserve">
          <source>The Chef server configuration file is updated to point to an independently configured set of servers for PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45505f8d58dc67511213b63444861d6a6b4a75ea" translate="yes" xml:space="preserve">
          <source>The Chef server decrypts this header and ensures its content matches the content of the non-encrypted headers that were in the request. The timestamp of the message is checked to ensure the request was received within a reasonable amount of time. One approach generating the signed headers is to use &lt;a href=&quot;https://github.com/chef/mixlib-authentication&quot;&gt;mixlib-authentication&lt;/a&gt;, which is a class-based header signing authentication object similar to the one used by the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7219bb299c9becda705ee00563174941d03ab016" translate="yes" xml:space="preserve">
          <source>The Chef server has a built in process supervisor, which ensures that all of the required services are in the appropriate state at any given time. The supervisor starts two processes per service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe21e3e575756f519ef05329c6fc4daf07ae84c" translate="yes" xml:space="preserve">
          <source>The Chef server has built-in support for easily tailing the logs that are generated. To view all the logs being generated on the Chef server, enter the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7352b7609f244c07416a38364f1927e200beba56" translate="yes" xml:space="preserve">
          <source>The Chef server has the &lt;a href=&quot;install_server_pre&quot;&gt;following prerequisites&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031b669594117a06728700f35d0279a6767833a4" translate="yes" xml:space="preserve">
          <source>The Chef server includes a command-line utility named chef-server-ctl. This command-line tool is used to start and stop individual services, reconfigure the Chef server, run chef-pedant, and then tail Chef server log files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05d0c4447be22d1b2b612a95cc496134ff2187a" translate="yes" xml:space="preserve">
          <source>The Chef server includes the following default groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a79b77badc66ea7caaa21affa5c0bbf6f9e95dd" translate="yes" xml:space="preserve">
          <source>The Chef server includes the following global permissions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ad024e8b9b801f7506d9329d6463995840c8fe" translate="yes" xml:space="preserve">
          <source>The Chef server includes the following object permissions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8c70bc8d0498031c67beb7cc3092999d62e327" translate="yes" xml:space="preserve">
          <source>The Chef server is accessed primarily by nodes that are under management by Chef, as the chef-client runs occur. It is also accessed by individuals who maintain cookbooks and policy that is stored on the Chef server, typically from a workstation. And also by individual users with credentials to Chef server components, such as the Chef management console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a78863abf2f6d77c787e357747bede064845bad" translate="yes" xml:space="preserve">
          <source>The Chef server is automatically restarted. A prompt is displayed that contains details about how to remove any temporary data that was created during the upgrade process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a157c63ed29744cdc79349ecb935694f0d1db44f" translate="yes" xml:space="preserve">
          <source>The Chef server itself is highly scalable. A single virtual machine running the Chef server can handle requests for many thousands of nodes. As the scale increases, it&amp;rsquo;s a straightforward process to expand into a tiered front-end, back-end architecture with horizontally scaled front-ends to relieve pressure on system bottlenecks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925466a50dd8c6081d6dab3e9ab5c4896f713055" translate="yes" xml:space="preserve">
          <source>The Chef server may contain multiple organizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ecdaadceb988001efc6e390670ff07aaffc6e3" translate="yes" xml:space="preserve">
          <source>The Chef server requires an x86_64 compatible systems architecture. When the Chef server is installed on Red Hat Enterprise Linux or CentOS, run &lt;code&gt;yum update&lt;/code&gt; prior to installing the Chef server. This will ensure those platforms are fully compatible with this requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4c7ecb7e334accaef08e4ea8fb2ea3ca847ab3" translate="yes" xml:space="preserve">
          <source>The Chef server requires that the systems on which it is running be connected to Network Time Protocol (NTP), as the Chef server is particularly sensitive to clock drift. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ad0f06d6dc044f355fa1c24284948e6b03ba98" translate="yes" xml:space="preserve">
          <source>The Chef server server requires that every node that is under management by Chef also have an accurate clock that is synchronized very closely with the clock on the Chef server. If the clocks are not synchronized closely, the authentication process may fail when the clocks are out-of-sync by more than 15 minutes. A failure will trigger a &lt;code&gt;401 Unauthorized&lt;/code&gt; response similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4993e91793394e7e11dd98dbc6042820412cb074" translate="yes" xml:space="preserve">
          <source>The Chef server server uses email to send notifications for various events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c3bc5d39eb60d8b611f5a022385d006ca43b37" translate="yes" xml:space="preserve">
          <source>The Chef server supports Active Directory and LDAP authentication, which enables users to log in to the Chef server using their corporate credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ab0ce1fc7b800b84c33de91c758a095ea6c5a5" translate="yes" xml:space="preserve">
          <source>The Chef server supports using Active Directory or LDAP for any user that has an email address in the LDAP directory. This allows those users to log in to the Chef server by using their corporate credentials instead of having a separate username and password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8742c72eb9b41c4f6715df9964577d539a7cedd4" translate="yes" xml:space="preserve">
          <source>The Chef server user interface uses the Chef server API to perform most operations. This ensures that authentication requests to the Chef server are authorized. This authentication process is handled automatically and is not something that users of the hosted Chef server will need to manage. For the on-premises Chef server, the authentication keys used by the web interface will need to be maintained by the individual administrators who are responsible for managing the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcaf84d8d41295771ecd24b5f0906feefc00ad7f" translate="yes" xml:space="preserve">
          <source>The Chef server uses a role-based access control (RBAC) model to ensure that users may only perform authorized actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="144b9645894a6201ca2a48df8592464ebcd87e36" translate="yes" xml:space="preserve">
          <source>The Chef server uses organizations, groups, and users to define role-based access control:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3613d0d6b8047448e15468f296c7a0bc5485ff3b" translate="yes" xml:space="preserve">
          <source>The Chef server uses role-based access control (RBAC) to restrict access to objects&amp;mdash;nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or chef-client requests to the Chef server are allowed. Access to objects on the Chef server is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The Chef server uses permissions to define how a user may interact with an object, after they have been authorized to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b13cc7acf64e48299c66f793c443a5d863134a" translate="yes" xml:space="preserve">
          <source>The Chef server will only try to distribute the cookbooks that are needed to configure an individual node. This is determined by identifying the roles and recipes that are assigned directly to that system, and then to expand the list of dependencies, and then to deliver that entire set to the node. In some cases, if the dependency is not specified in the cookbook&amp;rsquo;s metadata, the Chef server may not treat that dependency as a requirement, which will result in an error message. If an error message is received from the Chef server about cookbook distribution, verify the &lt;code&gt;depends&lt;/code&gt; entries in the metadata.rb file, and then try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368517b3e2779846898fb8113debf9a50fd03298" translate="yes" xml:space="preserve">
          <source>The Chef server will provide signed URLs for cookbook requests made by the various clients (individual users, knife requests, and from the chef-client that is installed on nodes under management by Chef).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2737b503c785bd452a69ebc3036fb2cf283a23de" translate="yes" xml:space="preserve">
          <source>The Chef server will return something similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868eeabb2353b63d513750df39bac2ff90c98849" translate="yes" xml:space="preserve">
          <source>The Chef&amp;trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871362b5551ed483cd586eb4cfa3cd4ada1595d2" translate="yes" xml:space="preserve">
          <source>The Cookbooks Site API is used to provide access to the cookbooks community hosted at &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;. All of the cookbooks in the community are accessible through a RESTful API located at &lt;a href=&quot;https://supermarket.chef.io/api/v1/cookbooks&quot;&gt;https://supermarket.chef.io/api/v1/cookbooks&lt;/a&gt; by using any of the supported endpoints. In most cases, using knife is the best way to interact with these cookbooks; in some cases, using the Cookbooks Site API directly is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085fd8c55507265dba32dc3b0bf4ce1484d2d011" translate="yes" xml:space="preserve">
          <source>The DRBD device exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b9ec66b21c45b0aeffa602baeaac39b2173c4c" translate="yes" xml:space="preserve">
          <source>The DRBD mount point is correctly mounted to only the &lt;code&gt;master&lt;/code&gt; node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3802b0dccfc9fb260b94a13f926166029080e483" translate="yes" xml:space="preserve">
          <source>The DRBD process is enabled in the config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbcf4848b46ce344c7cf2a5d4ed2198087deb9f" translate="yes" xml:space="preserve">
          <source>The DRBD replication IP addresses are pingable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b74794d0726d998f115737a8b5dc6e5b3cde0cb" translate="yes" xml:space="preserve">
          <source>The DRBD state is correct based on the state of the server being &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;backup&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5912f3ad534f8ce2b9102da57e0e8936f5afd17e" translate="yes" xml:space="preserve">
          <source>The ELRepo provides updated drivers for the Linux family of enterprise distributions (based on Red Hat Enterprise Linux.) With the introduction of Red Hat Enterprise Linux 6, Red Hat no longer distributes DRBD within the kernel. These modules provide properly built, community tested releases of the required kernel and DRBD userland.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5f223995d1a80533d3c8d1598e2b5b10b601be" translate="yes" xml:space="preserve">
          <source>The EN_US (UTF-8) character set should be installed on the logical partition prior to installing the chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8c6ac6746e0445f3b38bb273ae9d673cfb37f6" translate="yes" xml:space="preserve">
          <source>The FQDN for the Chef Analytics server should not exceed 64 characters when using OpenSSL. OpenSSL requires the &lt;code&gt;CN&lt;/code&gt; in a certificate to be no longer than 64 characters. By default, Chef Analytics uses the FQDN of the server to determine the common name (&lt;code&gt;CN&lt;/code&gt;). If the FQDN of the Chef Analytics server is longer than 64 characters, the &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; command will not fail, but an empty certificate file will be created. Nginx will not start if a certificate file is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af32c55e89a0477fc933ca71dd420348e40baa19" translate="yes" xml:space="preserve">
          <source>The FQDN for the Chef server should not exceed 64 characters when using OpenSSL. OpenSSL requires the &lt;code&gt;CN&lt;/code&gt; in a certificate to be no longer than 64 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df6d75e9c714448b924fe87ead5aba0bc843192" translate="yes" xml:space="preserve">
          <source>The FQDN for the Chef server. This setting is not in the server configuration file by default. When added, its value should be equal to the FQDN for the service URI used by the Chef server. For example: &lt;code&gt;api_fqdn &quot;chef.example.com&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6d9006d70aeaf0f22b83a46f34a700260ad439" translate="yes" xml:space="preserve">
          <source>The FQDN for the server. Default value: &lt;code&gt;node['fqdn']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f10c9e8f288b1b41b45c19b6c4c6cc866d2347" translate="yes" xml:space="preserve">
          <source>The FQDN of the host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db3d93b240bd94913edfd0c4c8bb5084fa729d7" translate="yes" xml:space="preserve">
          <source>The HTTP basic auth user name of this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cbf17aeee14809ba7224ae634ea5509aeabd07" translate="yes" xml:space="preserve">
          <source>The HTTP method (&lt;code&gt;POST&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0849fbee7b5d49e1e9f43bc2c5bce254cba5e3be" translate="yes" xml:space="preserve">
          <source>The HTTP path (&lt;code&gt;/organizations/srwjedoqqoypgmvafmoi/environments&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c6e9127363e82f4afce7d824437e49a303515c" translate="yes" xml:space="preserve">
          <source>The HTTP referrer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860ebaab485e98e83a212facea92184ec86a134b" translate="yes" xml:space="preserve">
          <source>The HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd09a6bc4abf80932f9a2ca9b43c9e742a690fb0" translate="yes" xml:space="preserve">
          <source>The HTTP status code (&lt;code&gt;200&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d3a26093b532d414271679dbec9e6e2a73f34f" translate="yes" xml:space="preserve">
          <source>The HTTP status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62ce27fb3836f0f0d7826f3bf1b7880b8f7828e" translate="yes" xml:space="preserve">
          <source>The IP address for a node. If the node has a default route, this is the IPV4 address for the interface. If the node does not have a default route, the value for this attribute should be &lt;code&gt;nil&lt;/code&gt;. The IP address for default route is the recommended default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdf3988192ca8cb94bb210407b21aff90f803d3" translate="yes" xml:space="preserve">
          <source>The IP address for the machine on which Apache Solr is running. Default value: &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a73cdcd7f478202f4aee3abc77925cf1ecdaedf" translate="yes" xml:space="preserve">
          <source>The IP address of the client who made this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd975959347445ed70421433dd8f91887eb2ce72" translate="yes" xml:space="preserve">
          <source>The IP address of the requesting client (&lt;code&gt;175.185.9.6&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50dcef06c50fb353114c41519ff3bc7ace1c9da4" translate="yes" xml:space="preserve">
          <source>The IP address of the target route. Default value: the &lt;code&gt;name&lt;/code&gt; of the resource block See &amp;ldquo;Syntax&amp;rdquo; section above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a46ba60c9c30afc7f195a18be152bf2b4718130" translate="yes" xml:space="preserve">
          <source>The IP address on which accessing the &lt;code&gt;stub_status&lt;/code&gt; endpoint is allowed. Default value: &lt;code&gt;[&quot;127.0.0.1&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee690669ff9526d5163b553a8753788246713976" translate="yes" xml:space="preserve">
          <source>The IP address on which the service is to listen. Default value: &lt;code&gt;'127.0.0.1'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde7b1f4e7794cec14b52ab7291c465878a9fa72" translate="yes" xml:space="preserve">
          <source>The IP address on which the service is to listen. Default value: &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaeb16c172b468f2b4aac1f8df4d1418b2a87842" translate="yes" xml:space="preserve">
          <source>The IP address that is to be assigned to the network interface. Default value: the &lt;code&gt;name&lt;/code&gt; of the resource block See &amp;ldquo;Syntax&amp;rdquo; section above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf2e0de4bd3006ba2792cd82d74686dbb6b9083" translate="yes" xml:space="preserve">
          <source>The Internet host address for the network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d820aeaf03233442c395d4cac2c6114d062f6de6" translate="yes" xml:space="preserve">
          <source>The JSON file must also specify the recipes that are part of the run-list. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c07b474360cf8b625b345d0a171e9e25001eb9" translate="yes" xml:space="preserve">
          <source>The Keepalived daemon is enabled in the config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c45b42807d7fef521ca0e563402e081c0ab51d" translate="yes" xml:space="preserve">
          <source>The Keepalived service manages the VRRP and cluster transitions. It should be running on both the primary and secondary servers. To transition from the primary to the secondary, simply run the following command on the primary Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2820b3f5c381db014744cea331df63b2463f622" translate="yes" xml:space="preserve">
          <source>The LDAP attribute that holds the user&amp;rsquo;s login name. Use to specify the Chef server user name for an LDAP user. Default value: &lt;code&gt;sAMAccountName&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf8353d36875fd9c28ef05b50378086ac05dc67" translate="yes" xml:space="preserve">
          <source>The MAC address for a node, determined by the same interface that detects the &lt;code&gt;node['ipaddress']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8078a4c4e1e5f6a7ee2225520c1f8c25660d81e" translate="yes" xml:space="preserve">
          <source>The ORGANIZATION-validator.pem and USER.pem files must be moved to the .chef directory after they are downloaded from the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68de617d0138548afc3e8c4e84b65cc8b4617c6" translate="yes" xml:space="preserve">
          <source>The ORGANIZATION-validator.pem is typically added to the .chef directory on the workstation. When a node is bootstrapped from that workstation, the ORGANIZATION-validator.pem is used to authenticate the newly-created node to the Chef server during the initial chef-client run. Starting with chef-client version 12.1, it is possible to bootstrap a node using the USER.pem file instead of the ORGANIZATION-validator.pem file. This is known as a &amp;ldquo;validatorless bootstrap&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156943a8dc1fc5dcb9d8d784a6771df47583e783" translate="yes" xml:space="preserve">
          <source>The Ohai executable ignores settings in the client.rb file when Ohai is run independently of the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e20b504aa61566aff91b4890fad93d7c74c34e1" translate="yes" xml:space="preserve">
          <source>The Ohai run has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7982f52c873064bd3023935917351948e73d6f7" translate="yes" xml:space="preserve">
          <source>The Open Source Chef 11 &lt;code&gt;admin.pem&lt;/code&gt; key for the API client. This is the key used to download Open Source Chef 11 data. Default value: &lt;code&gt;/etc/chef-server/admin.pem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9187e5c51beb25aab3c3ce046ca61268458838" translate="yes" xml:space="preserve">
          <source>The OpenSSL X.509 certificate used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eda7ea688b2f4adaf394034e9f65aafa069ba8" translate="yes" xml:space="preserve">
          <source>The OpenSSL X.509 key used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce96766e511ffec33b787c66fa4f7fd92c04a2b" translate="yes" xml:space="preserve">
          <source>The PostgreSQL account user name. Default value: &lt;code&gt;opscode-pgsql&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b424af67ded05d7e6d445772e39fbcb05980954c" translate="yes" xml:space="preserve">
          <source>The RAID level. Default value: &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec27607386d774f5e90e4c644d1cfaf291e5ce80" translate="yes" xml:space="preserve">
          <source>The RAID5 parity algorithm. Possible values: &lt;code&gt;left-asymmetric&lt;/code&gt; (or &lt;code&gt;la&lt;/code&gt;), &lt;code&gt;left-symmetric&lt;/code&gt; (or &lt;code&gt;ls&lt;/code&gt;), &lt;code&gt;right-asymmetric&lt;/code&gt; (or &lt;code&gt;ra&lt;/code&gt;), or &lt;code&gt;right-symmetric&lt;/code&gt; (or &lt;code&gt;rs&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e552704dd7cd7083767bff3470fc43473e2b71f1" translate="yes" xml:space="preserve">
          <source>The RabbitMQ port on the Chef server must alow inbound traffic from Chef Analytics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32255417de994be8e8633b6eeee27566d78a3e99" translate="yes" xml:space="preserve">
          <source>The RabbitMQ queue that is observed by queue length monitor. Default value: &lt;code&gt;'alaska'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b42cbc8de2e0b9fd53aa47f039f7ff585e47c0" translate="yes" xml:space="preserve">
          <source>The Recipe DSL is a Ruby DSL that is primarily used to declare resources from within a recipe. The Recipe DSL also helps ensure that recipes interact with nodes (and node properties) in the desired manner. Most of the methods in the Recipe DSL are used to find a specific parameter and then tell the chef-client what action(s) to take, based on whether that parameter is present on a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc1a4d27ae10671f551cb7b43983edda53ad664" translate="yes" xml:space="preserve">
          <source>The Recipe DSL provides support for using attributes, data bags (and encrypted data), and search results in a recipe, as well as four helper methods that can be used to check for a node&amp;rsquo;s platform from the recipe to ensure that specific actions are taken for specific platforms. The helper methods are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a081f66236fc55d3a5fe61144487099cbb49b7b" translate="yes" xml:space="preserve">
          <source>The Reporting add-on adds the &lt;strong&gt;reporting&lt;/strong&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0003e3a7350245b195bafd4fc1c95d3ad1fae646" translate="yes" xml:space="preserve">
          <source>The Ruby code used to define a custom handler will vary significantly from handler to handler. The chef-client includes two default handlers: &lt;code&gt;error_report&lt;/code&gt; and &lt;code&gt;json_file&lt;/code&gt;. Their use of the &lt;code&gt;report&lt;/code&gt; interface is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40da3b9e641c643c61164e595f36b92030cf0856" translate="yes" xml:space="preserve">
          <source>The Ruby script must be located on the system from which knife is run (and not be located on any of the systems that knife will be managing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c5a48cbffe2bb1363e16e15335bc2c660b21d3" translate="yes" xml:space="preserve">
          <source>The RubyGems package provider attempts to use the RubyGems API to install gems without spawning a new process, whenever possible. A gems command to install will be spawned under the following conditions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de38e400e03ad072d92bf33a4ae3f0b1ad938aa4" translate="yes" xml:space="preserve">
          <source>The SHA-256 checksum of the file. Use to ensure that a specific file is used. If the checksum does not match, the file is not used. Default value: no checksum required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c008142751dcdeb112e965e988b7813025cd8e1" translate="yes" xml:space="preserve">
          <source>The SHA-256 checksum of the file. Use to prevent a file from being re-downloaded. When the local file matches the checksum, the chef-client does not download it. Use when a URL is specified by the &lt;code&gt;source&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc92c865daa5669cb016ae5b8a9ddabcac7e563a" translate="yes" xml:space="preserve">
          <source>The SMTP server to which a connection is made. Default value: &lt;code&gt;'127.0.0.1'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0827fab7eea7a865c9bc19e949b9d095057d87e8" translate="yes" xml:space="preserve">
          <source>The SSH identity file used for authentication. Key-based authentication is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cc3cfe8cc50d39397bc04fdbe716a6cc34ce7a" translate="yes" xml:space="preserve">
          <source>The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) knife prompts for the password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df901a95c8670c828e001bf5db65e9feab6f3fa7" translate="yes" xml:space="preserve">
          <source>The SSH port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82040b652ac6be48aeb56c14fe14494891042153" translate="yes" xml:space="preserve">
          <source>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3fdf6bf8c044ab5f6feacffdfab53158ea268d" translate="yes" xml:space="preserve">
          <source>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation. Adding this setting can be helpful when a user cannot SSH directly into a host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964d03d32d04f0fb2ad04478c44d7dbf94869de6" translate="yes" xml:space="preserve">
          <source>The SSH user name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fe9110317abfa70fddc2d68a4624f8eb67dcd3" translate="yes" xml:space="preserve">
          <source>The SSL certificate that is downloaded to the &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory should be verified to ensure that it is, in fact, the same certificate as the one located on the Chef server. This can be done by comparing the SHA-256 checksums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5d4f6694baf6cd69ca04a6cb256bbacb129dd8" translate="yes" xml:space="preserve">
          <source>The SSL certificate used to verify communication over HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96c881b0c3d15d2cb5b52b3452c13e4d54b8a05" translate="yes" xml:space="preserve">
          <source>The SSL certificate used to verify communication over HTTPS. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c33e4d0291957a4c46c7d0dc12b984009cb601" translate="yes" xml:space="preserve">
          <source>The SSL certificates that are used by the chef-client may be verified by specifying the path to the client.rb file. Use the &lt;code&gt;--config&lt;/code&gt; option (that is available to any knife command) to specify this path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784a35030623313e0fb269efa77baef60f29675b" translate="yes" xml:space="preserve">
          <source>The SSL protocol versions that are enabled. For the highest possible security, disable SSL 3.0 and allow only TLS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6094ec1e1a45cf4fc365c1df74e239f800a64ad8" translate="yes" xml:space="preserve">
          <source>The SSL protocol versions that are enabled. SSL 3.0 is supported by the Chef server; however, SSL 3.0 is an obsolete and insecure protocol. Transport Layer Security (TLS)&amp;mdash;TLS 1.0, TLS 1.1, and TLS 1.2&amp;mdash;has effectively replaced SSL 3.0, which provides for authenticated version negotiation between the chef-client and Chef server, which ensures the latest version of the TLS protocol is used. For the highest possible security, it is recommended to disable SSL 3.0 and allow all versions of the TLS protocol. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4671bda8ead56b78df7f5eb72b8b3be3e1aeea05" translate="yes" xml:space="preserve">
          <source>The SSL versions used by the rabbitmq-management plugin. (See also &lt;a href=&quot;https://www.rabbitmq.com/ssl.html&quot;&gt;https://www.rabbitmq.com/ssl.html&lt;/a&gt;.) Default value: &lt;code&gt;['tlsv1.2', 'tlsv1.1']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b729826d860c98c72dbb34e36073de5598287c71" translate="yes" xml:space="preserve">
          <source>The URI for the Subversion repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c22c2ec5a0c8c3df03f2667391507c82d1ad268" translate="yes" xml:space="preserve">
          <source>The URI for the git repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d2ca14f9f49a620f919caf5ae6f29220a5b552" translate="yes" xml:space="preserve">
          <source>The URI for the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32778411b3104148395db10fc2773b456d116763" translate="yes" xml:space="preserve">
          <source>The URL at which Chef support tickets are created. Default value: &lt;code&gt;https://chef.io/support/tickets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401a6839136927e804aa223534fa7df0189f1fb4" translate="yes" xml:space="preserve">
          <source>The URL at which documentation for Chef is located. Default value: &lt;code&gt;https://docs.chef.io&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b6f9660318230ce059e2e465fbec321b90ec1d" translate="yes" xml:space="preserve">
          <source>The URL at which links to Chef support are located. Default value: &lt;code&gt;http://chef.io/support&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d844db2e1f5e81dcaf8c2ec9127b234f54857ab" translate="yes" xml:space="preserve">
          <source>The URL for the Chef server needs to be updated on all nodes and workstations. In the client.rb file on each node and in the knife.rb file on each workstation, update the following setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ece7860358cb0b130a5df717ca69f1bb06b05c" translate="yes" xml:space="preserve">
          <source>The URL for the Chef server, version 12. Default value: &lt;code&gt;https://localhost&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41e8462d7e29ef0872696f42a0f22a8d9514370" translate="yes" xml:space="preserve">
          <source>The URL for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98283ca1867276173825de465445e464e1d5a87f" translate="yes" xml:space="preserve">
          <source>The URL for the Chef server. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ab28dbd9e33cead2fbfe998c444938b9d0a099" translate="yes" xml:space="preserve">
          <source>The URL for the Open Source Chef or Enterprise Chef server, version 11. Default value: &lt;code&gt;https://localhost&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad5ac72412a12b5af5d9d28bd6d98cce3fdd298" translate="yes" xml:space="preserve">
          <source>The URL for the location in which a cookbook&amp;rsquo;s issue tracking is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the &amp;ldquo;View Issues&amp;rdquo; link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794845ba3a4f8cfd32a17fc5b51001a8dbf87a4c" translate="yes" xml:space="preserve">
          <source>The URL for the location in which a cookbook&amp;rsquo;s source code is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the &amp;ldquo;View Source&amp;rdquo; link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790ca25267be2400d9ad34876b7504a68131604" translate="yes" xml:space="preserve">
          <source>The URL location from which a remote cookbook tar.gz is to be downloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4bfe25cfa12b1905d83b683165db8095a34ac5" translate="yes" xml:space="preserve">
          <source>The URL or URI for the location at which the SSL certificate is located. Default value: the URL for the Chef server, as defined in the knife.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb9e1246dbda5c7784bf8b241aefa42bd547ff2" translate="yes" xml:space="preserve">
          <source>The URL to visit for more information about how to update the number of nodes licensed for an organization. Default value: &lt;code&gt;&quot;http://www.chef.io/contact/on-premises-simple&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef17a06713592d65cb65bbae150513e3a65bf1e" translate="yes" xml:space="preserve">
          <source>The URL to visit for more information about how to update the number of nodes licensed for an organization. Default value: &lt;code&gt;'http://www.chef.io/contact/on-premises-simple'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c833607221d38a0e045e66a4f445b48f76026560" translate="yes" xml:space="preserve">
          <source>The URL to which an HTTP request is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5f4b7c298712963d8d2f7f08b7fcd394a4560c" translate="yes" xml:space="preserve">
          <source>The URL used by Redis. Default value: &lt;code&gt;redis://#{redis.host}:#{redis.port}/0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83c77c67b9833b69ae508e393bb3a870b44c998" translate="yes" xml:space="preserve">
          <source>The USER.pem file that knife uses to sign requests made by the API client to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e3a61c240904b714e875eb85ec6353a7839c1f" translate="yes" xml:space="preserve">
          <source>The Web UI and API HTTP access logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66731d03e79631736fc479873e204b45454832cd" translate="yes" xml:space="preserve">
          <source>The Web UI and API HTTP error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ee3b41f0790ca254efb7794020d49ec93968d3" translate="yes" xml:space="preserve">
          <source>The WinRM service must be enabled. (Use &lt;code&gt;winrm quickconfig&lt;/code&gt; to enable the service.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def183d1b112bc783bbd878442dbc93ad859b378" translate="yes" xml:space="preserve">
          <source>The access key identifier. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: &lt;code&gt;bookshelf['vip']&lt;/code&gt;, for the endpoint used by the chef-client; &lt;code&gt;bookshelf['external_url']&lt;/code&gt;, for the endpoint used by the Chef server; &lt;code&gt;bookshelf['access_key_id']&lt;/code&gt;, for user access key; &lt;code&gt;bookshelf['secret_access_key']&lt;/code&gt;, for secret key; and &lt;code&gt;opscode_erchef['s3_bucket']&lt;/code&gt;, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ce10cefc0711dd617be8261725bef905c7d737" translate="yes" xml:space="preserve">
          <source>The actual file to which the link is to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5aa86150d41521d17db27383290d74e6257d84" translate="yes" xml:space="preserve">
          <source>The address for the network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0368c48ef0563b0ae4cb292ed0ab8a60e2114b00" translate="yes" xml:space="preserve">
          <source>The alias for revision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c2b32fb9096109a993e4b67e8b4abfd0e9b260" translate="yes" xml:space="preserve">
          <source>The alias for the &lt;code&gt;ssh_wrapper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841b77d15feb89f857ed53280a70f420dcd69e3a" translate="yes" xml:space="preserve">
          <source>The alias for the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b103c98b5d0e2cfa78042dc7719550995980c3" translate="yes" xml:space="preserve">
          <source>The alias for the revision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92d711e491fbfce3da5e94e11f920cb97c5483f" translate="yes" xml:space="preserve">
          <source>The amount of memory (in MBs) available to Apache Solr. If there is not enough memory available, search queries made by nodes to Apache Solr may fail. The amount of memory that must be available also depends on the number of nodes in the organization, the frequency of search queries, and other characteristics that are unique to each organization. In general, as the number of nodes increases, so does the amount of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a808bfb3f98b649d7bac06e661319915a8981f4b" translate="yes" xml:space="preserve">
          <source>The amount of memory (in MBs) available to Apache Solr. If there is not enough memory available, search queries made by nodes to Apache Solr may fail. The amount of memory that must be available also depends on the number of nodes in the organization, the frequency of search queries, and other characteristics that are unique to each organization. In general, as the number of nodes increases, so does the amount of memory. The default value should work for many organizations with fewer than 25 nodes. For an organization with several hundred nodes, the amount of memory that is required often exceeds 3GB. Default value: &lt;code&gt;nil&lt;/code&gt;, which is equivalent to 25% of the system memory or 1024 (MB, but this setting is specified as an integer number of MB in EC11), whichever is smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3573031bbc5370134d45857e4843f76671decd" translate="yes" xml:space="preserve">
          <source>The amount of memory that is dedicated to PostgreSQL for data caching. Default value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fda30690235e9e7207033b2fdafebdf21b99a66" translate="yes" xml:space="preserve">
          <source>The amount of time (in milliseconds) after which search requests made via the web client will timeout and cause an error. Default value: &lt;code&gt;120000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70926a00d40e235653a9e73ce76d213f4015b8e" translate="yes" xml:space="preserve">
          <source>The amount of time (in milliseconds) to wait before timing out. Default value: &lt;code&gt;1000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992500c9e7013b48caebc1121dfc1ca0dd217dd0" translate="yes" xml:space="preserve">
          <source>The amount of time (in milliseconds) to wait before timing out. Default value: &lt;code&gt;2000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64683d68ddbdf591d2ff3e98131de7649775c1c4" translate="yes" xml:space="preserve">
          <source>The amount of time (in milliseconds) to wait for a connection to be established. Default value: &lt;code&gt;'[{connect_timeout, 5000}]'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6f14864a383c2c24cbafeb31f39505711983d3" translate="yes" xml:space="preserve">
          <source>The amount of time (in milliseconds) to wait for cookbook dependency problems to be solved. Default value: &lt;code&gt;'5000'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30029123e268a73dd643d118a39a7d7341956b93" translate="yes" xml:space="preserve">
          <source>The amount of time (in minutes) after which a user will be logged out, regardless of activity. When not set (or set to 0), a browser session will not have a timed expiration unless a session is inactive longer than the session time limit (see &lt;code&gt;session_timeout&lt;/code&gt;). Default value: &lt;code&gt;10080&lt;/code&gt; (one week).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ad1f951af3ca1817f4166d628d8af5ddd3358b" translate="yes" xml:space="preserve">
          <source>The amount of time (in minutes) between checkpoints. Default value: &lt;code&gt;5min&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68b03c5070c72b69dae749eaa2f522bf31fc312" translate="yes" xml:space="preserve">
          <source>The amount of time (in minutes) of inactivity before a user is logged out. When not set (or set to 0), a browser session will not have a timed expiration and will expire when the browser session ends, quits, or when the computer restarts, or when the absolute session time limit is hit (see &lt;code&gt;session_timeout_absolute&lt;/code&gt;). Default value: &lt;code&gt;1440&lt;/code&gt; (one day).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecaad883531e72b87edc7c7624aaa082201a089" translate="yes" xml:space="preserve">
          <source>The amount of time (in minutes) to delay a reboot request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472b5ef569a7ac8bddb05f7cab82286dad32475a" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) a client may be idle before timeout. Default value: &lt;code&gt;'300'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0e8b13adc5367d0cb689090e4fbd5a4101ef18" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) a command is to wait before timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc262acac566d3f92464758ac17034b71bfa082f" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) a command is to wait before timing out. Default value: &lt;code&gt;3600&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c15e3cfeb1804121a2680476b76ffce039ab71" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) a connection must remain idle before keepalive probes will resume. Default value: &lt;code&gt;60&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c06d717040f0936a001bdafea6a90ba65c489ea" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) a job may be idle before it times out. If no value is specified, the default timeout value for launchd will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f43b691825b563a0cbfdf405d15b7608a1973a7" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) after which a Yum lock request is to time out. Default value: &lt;code&gt;30&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140fd0202083c91f89bb6984aff361a802ac55bb" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) before a request to the &lt;strong&gt;oc_bifrost&lt;/strong&gt; service times out. Default value: &lt;code&gt;2000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399ffc4dbf80d6eea3bb8943e20b786e182e9f87" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) before connections to the server expire. If chef-client runs are timing out, increase this setting to &lt;code&gt;3600&lt;/code&gt;, and then adjust again if necessary. Default value: &lt;code&gt;900&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edc988a2b83b76bb7ae61a2e849932b1107be10" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) before connections to the server expire. If node bootstraps are timing out, increase this setting. Default value: &lt;code&gt;28800&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73407345045e9216c02fc8bb070b3a401f0d2cbf" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) between probes. Default value: &lt;code&gt;15&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0b24c041a16d949a8eff0f417da20918bf10db" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) launchd waits before sending a &lt;code&gt;SIGKILL&lt;/code&gt; signal. Default value: &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb27fa82c2608efffd94fcd8d01101840939a1c4" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) that a worker can be silent before it is killed and restarted. Default value: &lt;code&gt;3600&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71f29cc2a855e165b58c3b337c968a632634791" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait before timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a27ed36e95d2f57d57ec2143dd6077b4bb6ed0" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait before timing out. Default value: &lt;code&gt;30&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f43572ce438776275a50831d1f42518ca5895ac" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait before timing out. Default value: &lt;code&gt;60000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68a9dd40c783c6d8c9b8472166ef8e2839f8dc3" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait before timing out. Default value: &lt;code&gt;600&lt;/code&gt; (seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0257e0be6f03fa3707523bd5256c16227451252" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait before timing out. Default value: &lt;code&gt;60&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511f0bd54381c60676d28ee0a4ec0f3f175b4e65" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. A chef-client run will not start when a lock file is present. If a lock file is not deleted before this time expires, the pending chef-client run will exit. Default value: not set (indefinite). Set to &lt;code&gt;0&lt;/code&gt; to cause a second chef-client to exit immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7afee0a2dd4b66b92696cffb86dedbb9c1262ee" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. Default value: not set (indefinite). Set to &lt;code&gt;0&lt;/code&gt; to cause a second chef-client to exit immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ecfc01adf68f1ab8ae2ddc566f9745b5bd747d" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a command to execute before timing out. When specified, this value is passed from the &lt;strong&gt;deploy&lt;/strong&gt; resource to the &lt;strong&gt;git&lt;/strong&gt; or &lt;strong&gt;subversion&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d784d905ded61828dac5886dc124b7a9cb9e7d" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a command to execute before timing out. When this property is specified using the &lt;strong&gt;deploy&lt;/strong&gt; resource, the value of the &lt;code&gt;timeout&lt;/code&gt; property is passed from the &lt;strong&gt;deploy&lt;/strong&gt; resource to the &lt;strong&gt;git&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687e5cffabfc7f87f824c853b374cd0fc9265205" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a command to execute before timing out. When this property is specified using the &lt;strong&gt;deploy&lt;/strong&gt; resource, the value of the &lt;code&gt;timeout&lt;/code&gt; property is passed from the &lt;strong&gt;deploy&lt;/strong&gt; resource to the &lt;strong&gt;subversion&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd931bd9636d0dd0dfe1d5b35b2b8c0e97d4be8" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for a connection to an SMTP server. Default value: &lt;code&gt;'30'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca21ae51d8051750518f78754456176e0173076" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for an SSH connection time out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63261abe1e290ae0975d2d6ec860916bfdcdeda" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for requests on a Keepalived connection. Default value: &lt;code&gt;65&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cad523d5ebec4e10d939aec110dd86840643b5" translate="yes" xml:space="preserve">
          <source>The amount of time (in seconds) to wait for requests on a connection. Default value: &lt;code&gt;'60'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6015b2bf69f55c714b9d85d032449526913ced5" translate="yes" xml:space="preserve">
          <source>The amount of time between the start (&lt;code&gt;start_time&lt;/code&gt;) and end (&lt;code&gt;end_time&lt;/code&gt;) of a chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16dbb3aff61f82d811db94969540f605df8fd64" translate="yes" xml:space="preserve">
          <source>The application is already deployed to the system and that only requirement in this example is to render the &lt;code&gt;database.yml&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb5304f265a8e122ec29037ded01c75535a86e7" translate="yes" xml:space="preserve">
          <source>The application source tree looks something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca78a2c09b564082b3aded45ece47d77a707c8f" translate="yes" xml:space="preserve">
          <source>The approach that DRBD takes to &lt;code&gt;split-brain&lt;/code&gt; event situations is to degrade all partners still alive to secondary status, and then wait for manual intervention. This is called auto-fencing, with a goal of minimizing the potential for damage to your data. When you lose one of the partners in a high availability topology, a bit of manual intervention is required to ensure that the disks aren&amp;rsquo;t in a bad state and can be brought back up. These scenarios are discussed below, including suggestions for diagnosing and recovering from each scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df6e414ea77131fe47ca9bc9c78e89114ad440a" translate="yes" xml:space="preserve">
          <source>The architecture of the node for which keys are to be created or deleted. Possible values: &lt;code&gt;:i386&lt;/code&gt; (for nodes with a 32-bit registry), &lt;code&gt;:x86_64&lt;/code&gt; (for nodes with a 64-bit registry), and &lt;code&gt;:machine&lt;/code&gt; (to have the chef-client determine the architecture during the chef-client run). Default value: &lt;code&gt;:machine&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7426f896abe307d4ee00705fc3f8c0d7d5265f" translate="yes" xml:space="preserve">
          <source>The architecture of the package to be installed or upgraded. This value can also be passed as part of the package name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5e95b82b13a83b2dc309b5da93c253d2085146" translate="yes" xml:space="preserve">
          <source>The architecture of the process under which a script is executed. If a value is not provided, the chef-client defaults to the correct value for the architecture, as determined by Ohai. An exception is raised when anything other than &lt;code&gt;:i386&lt;/code&gt; is specified for a 32-bit process. Possible values: &lt;code&gt;:i386&lt;/code&gt; (for 32-bit processes) and &lt;code&gt;:x86_64&lt;/code&gt; (for 64-bit processes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68644e7ea7d6b13e22d62ba6ae7376ddfa0a618" translate="yes" xml:space="preserve">
          <source>The attribute (or attributes) to show.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f9f8ef04b3ee6c0553494ae7f35e6b8076270d" translate="yes" xml:space="preserve">
          <source>The attribute precedence order for roles and environments is reversed for &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;override&lt;/code&gt; attributes. The precedence order for &lt;code&gt;default&lt;/code&gt; attributes is environment, then role. The precedence order for &lt;code&gt;override&lt;/code&gt; attributes is role, then environment. Applying environment &lt;code&gt;override&lt;/code&gt; attributes after role &lt;code&gt;override&lt;/code&gt; attributes allows the same role to be used across multiple environments, yet ensuring that values can be set that are specific to each environment (when required). For example, the role for an application server may exist in all environments, yet one environment may use a database server that is different from other environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6e53533b4bfba57dcb4bbf2a0bf65a347c7d9d" translate="yes" xml:space="preserve">
          <source>The attribute used when opening an SSH connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2209f439395583f853de509be8512d0e374c7b" translate="yes" xml:space="preserve">
          <source>The attribute used when opening an SSH connection. The default attribute is the FQDN of the host. Other possible values include a public IP address, a private IP address, or a hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5860c86b0adf5af7115daa711b5a5c371dd238cd" translate="yes" xml:space="preserve">
          <source>The attributes that are maintained in the chef-repo are uploaded to the Chef server from the workstation, periodically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ad101b0b95428bcb0fe7b4f4b74a5e50152610" translate="yes" xml:space="preserve">
          <source>The authentication process ensures the Chef server responds only to requests made by trusted users. Public key encryption is used by the Chef server. When a node and/or a workstation is configured to run the chef-client, both public and private keys are created. The public key is stored on the Chef server, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the &lt;code&gt;.chef&lt;/code&gt; directory or in &lt;code&gt;/etc/chef&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfb0453d43643fc3b538195b8d9d2a50a777925" translate="yes" xml:space="preserve">
          <source>The authz API provides a high-level view of the health of the &lt;strong&gt;opscode-authz&lt;/strong&gt; service with a simple endpoint: &lt;code&gt;_ping&lt;/code&gt;. This endpoint can be accessed using cURL and GNU Wget. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff72f64e3cdda48aaba582c390f59bd59a2d3e" translate="yes" xml:space="preserve">
          <source>The back-end processes run on two hosts: &lt;code&gt;BE1&lt;/code&gt; and &lt;code&gt;BE2&lt;/code&gt;. &lt;code&gt;BE1&lt;/code&gt; is the DRBD primary and the master Chef server; &lt;code&gt;BE2&lt;/code&gt; is the DRBD secondary and the Chef server backup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b296f4f2eee8a6e92bf5e375bf0958f5d13638c5" translate="yes" xml:space="preserve">
          <source>The back-end uses DRBD for file redundancy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8755ed9444ee91c772cfa52eabc2b2cbc5d6e5" translate="yes" xml:space="preserve">
          <source>The back-end uses Keepalived and a dedicated network interface for heartbeat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0bacf5c49f2b8ad249e7756efae17416f83e4a" translate="yes" xml:space="preserve">
          <source>The backend server must be accessible from each frontend server. A virtual IP address is created and managed by the Chef server, but will also need to be added to the DNS so that all machines in the tiered configuration may access it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3882611e80c46dbfd477b1a35e0049ad96fa0b4" translate="yes" xml:space="preserve">
          <source>The backing device for the mounted &lt;code&gt;ext4&lt;/code&gt; filesystem is an LVM2 volume named &lt;code&gt;/dev/opscode/drbd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9db78851c0bd05770093910882b6a360b3ff0e" translate="yes" xml:space="preserve">
          <source>The base URL to which the service is to return links to API resources. Use &lt;code&gt;:host_header&lt;/code&gt; to ensure the URL is derived from the host header of the incoming HTTP request. Default value: &lt;code&gt;:host_header&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9da38d83a806afe4eb62efdf7498a669536176b" translate="yes" xml:space="preserve">
          <source>The base name of the source file (and inferred from the &lt;code&gt;path&lt;/code&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390b9aa5005b78e4d71187b2be2a518ecbbdc9be" translate="yes" xml:space="preserve">
          <source>The basic syntax of a definition is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e0171d946755adf64fca6f269cf9c5caed41dd" translate="yes" xml:space="preserve">
          <source>The behavior is different depending on the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad75da907cbdb3737cf0b2107814438a84002363" translate="yes" xml:space="preserve">
          <source>The behavior of this endpoint is identical to &lt;code&gt;GET /roles/NAME/environments/NAME&lt;/code&gt;; it is recommended (but not required) that &lt;code&gt;GET /roles/NAME/environments/NAME&lt;/code&gt; be used instead of this endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bec71f026c961410baeaef5ea0948d8d4d837df" translate="yes" xml:space="preserve">
          <source>The behavior with the default value consists of a warning on the use of deprecated and non-standard exit codes. In a future release of Chef client, using standardized exit codes will be the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1d4913bdb59d036bcffd740f7016764b5973f7" translate="yes" xml:space="preserve">
          <source>The bind IP address for RabbitMQ. Default value: &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d71a31bc2fd868f56ab3c6f6523e455a3376d09" translate="yes" xml:space="preserve">
          <source>The bind IP address for RabbitMQ. Default value: &lt;code&gt;'127.0.0.1'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a257f0a12cca714ce7a7b753026f86679135affb" translate="yes" xml:space="preserve">
          <source>The body of the definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a8c935d0bcdf75ebf24fe1065043dfdd38d299" translate="yes" xml:space="preserve">
          <source>The body of the request. The body should be hashed using SHA-1 and encoded using Base64. All hashing is done using SHA-1 and encoded in Base64. Base64 encoding should have line breaks every 60 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0b2b44686945c1e37e95d07824732ca6848d2d" translate="yes" xml:space="preserve">
          <source>The boot protocol used by a network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65c9a91347db103c09c689e61be2400ad470859" translate="yes" xml:space="preserve">
          <source>The bootstrap template to use. This may be the name of a bootstrap template&amp;mdash;&lt;code&gt;chef-full&lt;/code&gt;, for example&amp;mdash;or it may be the full path to an Embedded Ruby (ERB) template that defines a custom bootstrap. Default value: &lt;code&gt;chef-full&lt;/code&gt;, which installs the chef-client using the omnibus installer on all supported platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88879c8c8d4a66c5f82e58b13666fba46f099c5f" translate="yes" xml:space="preserve">
          <source>The broadcast address for a network interface. On some platforms this property is not set using ifconfig, but instead is added to the startup configuration file for the network interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f7cc4b29a2ca94084f63f3f746c160be8d2414" translate="yes" xml:space="preserve">
          <source>The certificate key used for SSL communication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e206e0621dc9b2567b609dbbcc5e0c9a80de294" translate="yes" xml:space="preserve">
          <source>The certificate key used for SSL communication. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b874ffb71dd11de51e860ce1ab70819eae399bd" translate="yes" xml:space="preserve">
          <source>The chef-client &lt;a href=&quot;ctl_chef_client#ctl-chef-client-run-in-local-mode&quot;&gt;includes an option called local mode&lt;/a&gt; (&lt;code&gt;--local-mode&lt;/code&gt; or &lt;code&gt;-z&lt;/code&gt;), which runs the chef-client against the chef-repo on the local machine as if it were running against a Chef server. Local mode was added to the chef-client in the 11.8 release. If you are running that version of the chef-client (or later), you should consider using local mode instead of using chef-solo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f2a49628c7130a1026f697f0c38f5220b40d74" translate="yes" xml:space="preserve">
          <source>The chef-client Run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde6ebc2163a0ed789f73daca5036047efbc578" translate="yes" xml:space="preserve">
          <source>The chef-client accesses the Chef server from the node on which it&amp;rsquo;s installed to get configuration data, perform searches of historical chef-client run data, and then pull down the necessary configuration data. After the chef-client run is finished, the chef-client uploads updated run data to the Chef server as the updated node object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d8d34c65e0c1044174a7332074cd3a5e0976f1" translate="yes" xml:space="preserve">
          <source>The chef-client always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b140c5c4e9afdcc5839eee8dced47584783d92" translate="yes" xml:space="preserve">
          <source>The chef-client asks the Chef server for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The Chef server provides to the chef-client a list of all of those files. The chef-client compares this list to the cookbook files cached on the node (from previous chef-client runs), and then downloads a copy of every file that has changed since the previous chef-client run, along with any new files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e6a300b64071c0841aac60c5b4a21fc6c8cd47" translate="yes" xml:space="preserve">
          <source>The chef-client authenticates to the Chef server using an RSA private key and the Chef server API. The name of the node is required as part of the authentication process to the Chef server. If this is the first chef-client run for a node, the chef-validator will be used to generate the RSA private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e967996cf0f5a1075b4cc172334b1c9db7d1c1c" translate="yes" xml:space="preserve">
          <source>The chef-client automatically checks the configuration, node JSON, and the stored node on the Chef server to determine if Policyfile files are being used, and then automatically updates this flag. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f32705256746eb87589ffe27407a430b8fcabb" translate="yes" xml:space="preserve">
          <source>The chef-client caches a template when it is first requested. On each subsequent request for that template, the chef-client compares that request to the template located on the Chef server. If the templates are the same, no transfer occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b5696d6436e51a4afc7ca2352e08aafd6a00a1" translate="yes" xml:space="preserve">
          <source>The chef-client caches deployment actions as they are taken. In order for the chef-client to be able to apply a subsequent deployment action&amp;mdash;rolling back a release using the &lt;code&gt;:rollback&lt;/code&gt; action, for example&amp;mdash;all related deployment actions must be contained within resource blocks that have the same name. This ensures that the chef-client will be able to find the correct deployment from within the cached deployment actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5735fa1ade0f56822dc9fb441716fe93253e3c35" translate="yes" xml:space="preserve">
          <source>The chef-client can access any reflected or redirected registry key. The machine architecture of the system on which the chef-client is running is used as the default (non-redirected) location. Access to the &lt;code&gt;SysWow64&lt;/code&gt; location is redirected must be specified. Typically, this is only necessary to ensure compatibility with 32-bit applications that are running on a 64-bit operating system.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
