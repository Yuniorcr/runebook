<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="rethinkdb">
    <body>
      <group id="rethinkdb">
        <trans-unit id="b64fe618441e29b37149058f1a7d34872564ed83" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 1.16, the earlier concept of &amp;ldquo;data centers&amp;rdquo; has been replaced by server tags, described above. Servers in a given data center could all be given a tag such as &lt;code&gt;us_east&lt;/code&gt; or &lt;code&gt;us_west&lt;/code&gt;, and a table can be configured to have replicas associated with specific server tags (e.g., 2 replicas on servers tagged with &lt;code&gt;us_east&lt;/code&gt; and 3 on servers tagged with &lt;code&gt;us_west&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2942d3a5f8afc6539a606fe55996f2f85ba8fb2d" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 2.0 (&lt;code&gt;V0_4&lt;/code&gt;), the server will process multiple queries in parallel rather than sequentially, and there is no guarantee that a read following a write on the same connection will &amp;ldquo;see&amp;rdquo; the results of the write as long as it&amp;rsquo;s successful. (Previous versions of the server would process multiple queries on the same connection sequentially.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c961f51ddf6e3a1960d4006dbd241d5e425cac28" translate="yes" xml:space="preserve">
          <source>Starting with RethinkDB 2.2, state documents will &lt;em&gt;only&lt;/em&gt; be sent if the &lt;code&gt;includeStates&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, even on point changefeeds. Initial values will only be sent if &lt;code&gt;includeInitial&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;includeStates&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;includeInitial&lt;/code&gt; is false, the first document on the feed will be &lt;code&gt;{state:'ready'}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa3213c8e5b544991124ed5c55d376f49994e0a" translate="yes" xml:space="preserve">
          <source>Starting with version 1.16, RethinkDB maintains special &lt;em&gt;system tables&lt;/em&gt; that contain configuration and status information about servers, databases, individual tables, and issues with the cluster. Querying system tables returns information about the status of the cluster and current objects (such as servers and tables) within the cluster. By inserting or deleting records and updating fields in these tables, the configuration of the objects they represent can be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081c1e1e4da3f29bf8bb20597a5735c3791932d3" translate="yes" xml:space="preserve">
          <source>Starting with version 2.3, RethinkDB offers the ability to secure connections between servers, between servers and clients, and to the web UI using &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt; encryption (the successor to SSL). Securing RethinkDB in this fashion is similar to securing a web site with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-signed_certificate&quot;&gt;self-signed SSL certificate&lt;/a&gt;: create a private key and a certificate, then tell the server to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14ca71f5de11ac16b741f2895038968e30fa95f" translate="yes" xml:space="preserve">
          <source>Startup with init.d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9b605703b9aa1d999b8932d0180fd06fb42587" translate="yes" xml:space="preserve">
          <source>Startup with launchd (OS X)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e43708be29e49c1ec1aa4189305be5e1934e28" translate="yes" xml:space="preserve">
          <source>Startup with systemd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2086b21f8f49274138c38d476bee317a84a8aecc" translate="yes" xml:space="preserve">
          <source>Statistics</source>
          <target state="translated">Statistics</target>
        </trans-unit>
        <trans-unit id="f1b89f18db10edb807e2bb4dbf71b7f25ac69016" translate="yes" xml:space="preserve">
          <source>Status tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc416e1088e4bf094dfc9abe0210e0288f5a169e" translate="yes" xml:space="preserve">
          <source>Step</source>
          <target state="translated">Step</target>
        </trans-unit>
        <trans-unit id="15679a4a26f9a6ba3a691493d6beeae10a421041" translate="yes" xml:space="preserve">
          <source>Stopping a Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbffd52d681c0a57ba768a7b13d045efc1626e9c" translate="yes" xml:space="preserve">
          <source>Stores queries and their results, and displays them from a web interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051adf2dce81e4edeb3804a2a2cc5362ddbcbd3a" translate="yes" xml:space="preserve">
          <source>Storing and enriching API data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c202e6f4f3c0ecb61addbe0a44f03640e49acaf" translate="yes" xml:space="preserve">
          <source>Storing binary objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99d2614f3e61769cb31cbb3d64230a0bf9792bd" translate="yes" xml:space="preserve">
          <source>Storing timestamps and JSON date strings as Time data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421ed75a3333e9d8c5cea75e785430b7939cdab5" translate="yes" xml:space="preserve">
          <source>Storing uploaded files in the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dda565904ac283e012045f6d9e7daf872d0a13" translate="yes" xml:space="preserve">
          <source>Storing user avatars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fcd98b3c8b91061836eba59a7019ed4b18d372" translate="yes" xml:space="preserve">
          <source>Streams and feeds are lazily-computed sequences, and return a &lt;code&gt;ResponseType&lt;/code&gt; of &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; (&lt;code&gt;3&lt;/code&gt;), with currently available data in the &lt;code&gt;r&lt;/code&gt; array. When the driver receives a feed or stream, it should return a cursor (or an object with a cursor-like interface). &lt;em&gt;N.B.:&lt;/em&gt;&lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; and &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; responses should be both be represented as cursors. Depending on the size of the query results and the time it takes to return them, you may receive either one &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; result, or one or more &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt; results followed by a final &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6c4efeac903a0003cef92ddf354bd1374cf2f1" translate="yes" xml:space="preserve">
          <source>Streams use &amp;ldquo;lazy loading,&amp;rdquo; a concept you may have run across in other database interfaces. Instead of returning an entire result set from a query, streams return an &lt;a href=&quot;http://en.wikipedia.org/wiki/Iterator&quot;&gt;iterator&lt;/a&gt; referred to as a &amp;ldquo;cursor,&amp;rdquo; a pointer into the data set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd49f40eb94b20bc3d437ca36ad5830377fda8e" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411f94c6ca34e4478bca225615707da562686a1d" translate="yes" xml:space="preserve">
          <source>String manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8cf84261f17414d41a19324152deb0638ecb13" translate="yes" xml:space="preserve">
          <source>Subcommands</source>
          <target state="translated">Subcommands</target>
        </trans-unit>
        <trans-unit id="bbd17ca7716d1959474368eb0c63e1ad9ad957be" translate="yes" xml:space="preserve">
          <source>Subqueries</source>
          <target state="translated">Subqueries</target>
        </trans-unit>
        <trans-unit id="98e916c3bddbbc175b04c5eaa8de99d155cbe03c" translate="yes" xml:space="preserve">
          <source>Subqueries can be abstracted in variables, which allows for modular programming in the same way as done by most other modern programming languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97aae2f87eb9b6796d483ee8974c03c1e5ba9e2" translate="yes" xml:space="preserve">
          <source>Subscribe to a feed by calling &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; on a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8a466677b83f4e1f4df6f8b69bf7ba43beb2b7" translate="yes" xml:space="preserve">
          <source>Subscribe to the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!forum/rethinkdb-dev&quot;&gt;RethinkDB driver developers group&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395d7a75e1ae0564bdd8d6d6363f8537be3bc1c5" translate="yes" xml:space="preserve">
          <source>Subscribers create a changefeed on the &lt;code&gt;Exchange&lt;/code&gt;&amp;rsquo;s table, filtering for changes that mention documents matching their topic queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2a790bdd19b116e81ba00ed519edb942e324e3" translate="yes" xml:space="preserve">
          <source>Subscribing to changefeeds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4dd28a2000f4de189f22a02e6a44d6093e120e" translate="yes" xml:space="preserve">
          <source>Subscribing to hierarchical topics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e859ee0a008ef4fd60b3c46f2e406a1c004727" translate="yes" xml:space="preserve">
          <source>Subscribing to topics using regex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0128e284e80f24203df15083d6d063f8f03c858d" translate="yes" xml:space="preserve">
          <source>Subscribing to topics using tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd600d816401a97bb7171cf8a4a1a7bf7c906c0" translate="yes" xml:space="preserve">
          <source>Subtract two numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efe5ba11913e60899922a574c9310ce44547cf0" translate="yes" xml:space="preserve">
          <source>Sum two or more numbers, or concatenate two or more strings or arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c265c2ec47c266f4eddd985a602248cf1492e23" translate="yes" xml:space="preserve">
          <source>Sums all the elements of a sequence. If called with a field name, sums all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and sums the results, skipping elements of the sequence where that function returns &lt;code&gt;null&lt;/code&gt; or a non-existence error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b6182e4e1fbdaf3ea143a384f18f88f4f511f0" translate="yes" xml:space="preserve">
          <source>Superheroes tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc1824e398cf96683dfbc223ebb34785115277" translate="yes" xml:space="preserve">
          <source>Supported options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e292d899e02633c2e04b35d5deb85171e7578e3" translate="yes" xml:space="preserve">
          <source>Suppose a data set that lists top movies, ranked by user vote. You&amp;rsquo;d like to get the total votes and the average age of the top 25 movies: the &lt;code&gt;avg()&lt;/code&gt; of the &lt;code&gt;year&lt;/code&gt; column and the &lt;code&gt;sum()&lt;/code&gt; of the &lt;code&gt;votes&lt;/code&gt; column, ordered by the &lt;code&gt;rank&lt;/code&gt; column to get the range 1&amp;ndash;25.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b899c315ce40799000302d06bdb519d66498dd3" translate="yes" xml:space="preserve">
          <source>Suppose each post has a field &lt;code&gt;tags&lt;/code&gt; that maps to an array of tags. The schema of the table &lt;code&gt;posts&lt;/code&gt; would be something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482306a03a24119b4b1e772995e3616816ebe2c3" translate="yes" xml:space="preserve">
          <source>Suppose its output is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305076c03efbc539dfa0aa5fe524a8ad5027bba7" translate="yes" xml:space="preserve">
          <source>Suppose on the blog in the last example, you&amp;rsquo;d like to retrieve the number of posts &lt;em&gt;per category.&lt;/em&gt; A map-reduce query to perform this operation would consist of the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc193e9aee3048beb3caf5658d764b058365ee8" translate="yes" xml:space="preserve">
          <source>Suppose that our data model for the employees stores a company name instead of a company id:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7f91272a3804d75a6598e1f3bad96058fabbf5" translate="yes" xml:space="preserve">
          <source>Suppose that the table &lt;code&gt;games2&lt;/code&gt; has the following data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d618567de8457f4e1f435d12d614a8fa312d9700" translate="yes" xml:space="preserve">
          <source>Suppose that the table &lt;code&gt;games&lt;/code&gt; has the following data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06104ac359e508ccef4ef32dfaf2a4fdca0b82b0" translate="yes" xml:space="preserve">
          <source>Suppose that you want to keep the &lt;code&gt;id&lt;/code&gt; field of the employee, but not the one of the company. You can do it by removing the field &lt;code&gt;right.id&lt;/code&gt;, then calling the &lt;code&gt;zip&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c97e208254d412ff656573ce4566923a071cae" translate="yes" xml:space="preserve">
          <source>Suppose the players table contains these documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d631d358f622eb48a20000ddcdf5a71d5d16d0" translate="yes" xml:space="preserve">
          <source>Suppose the table &lt;code&gt;marks&lt;/code&gt; stores the marks of every students per course:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863abd28999d7a33805cde5f619af1857cb2ffb2" translate="yes" xml:space="preserve">
          <source>Suppose we have a table &lt;code&gt;posts&lt;/code&gt; that links posts to authors via an &lt;code&gt;author_id&lt;/code&gt; field. If we&amp;rsquo;ve created a secondary index on &lt;code&gt;author_id&lt;/code&gt; and want to retrieve all the posts where &lt;code&gt;author_id&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt;, we can use the &lt;code&gt;getAll&lt;/code&gt; command to do it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd69d64d9d90f1021ac7cab49f4dced356698803" translate="yes" xml:space="preserve">
          <source>Suppose we have a table &lt;code&gt;users&lt;/code&gt; with documents of the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f14a9832b9f642f0b36d37ee55787766eea3b7" translate="yes" xml:space="preserve">
          <source>Suppose we have ten documents in a single category in a sharded table. Four of the documents are on shard 1; six are on shard 2. When the incorrect query is executed, this is its path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecab01432f8dcfd29db07faed3306d03f5f21cc7" translate="yes" xml:space="preserve">
          <source>Suppose we want to rename the field &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;idUser&lt;/code&gt; when retrieving documents from the table &lt;code&gt;users&lt;/code&gt;. In the subquery, we can use &lt;code&gt;merge&lt;/code&gt; to add a new field with the existing field&amp;rsquo;s value, then &lt;code&gt;without&lt;/code&gt; to delete the old field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8284b9c5ecd12c0da7cb055be040ad759da9ca" translate="yes" xml:space="preserve">
          <source>Suppose we&amp;rsquo;d like to to retrieve all the posts in the table &lt;code&gt;post&lt;/code&gt; and also return an additional field, &lt;code&gt;comments&lt;/code&gt;, which is an array of all the comments for the relevant post retrieved from the &lt;code&gt;comments&lt;/code&gt; table. We could do this using a subquery:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa9d5fab76e05214df4eea4580738c57dea1f05" translate="yes" xml:space="preserve">
          <source>Suppose we&amp;rsquo;d like to trim down our database and delete every document with less than three posts (sorry Laura and Jean-Luc):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9835b16eff20fd64f058bf8e513bffb08e5156e" translate="yes" xml:space="preserve">
          <source>Suppose you are running a blog and would like to retrieve the number of posts. A map-reduce query to perform this operation would consist of the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc205fe6a19e66a7e73ca9c5922fd6934973caf" translate="yes" xml:space="preserve">
          <source>Suppose you have a chat application with multiple clients posting messages to different chat rooms. You can create feeds that subscribe to messages posted to a specific room:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4768ff13957450b6b322ffdb25a724ae46b0c89e" translate="yes" xml:space="preserve">
          <source>Suppose you want to retrieve all the posts whose date field is between January 1st, 2012 (included) and January 1st, 2013 (excluded). You could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9216a7cff4538f532284ba814135bf0e53d98d0a" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to paginate through a set of users, 25 at a time. You could get the first 25 records efficiently just with &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b01a971703b06e82b48250dccd360ac1fa7f30" translate="yes" xml:space="preserve">
          <source>Suppose you&amp;rsquo;d like to select all posts where the author&amp;rsquo;s name is &amp;ldquo;Michel&amp;rdquo; and the category is &amp;ldquo;Geek&amp;rdquo;. You can do it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112ab020698e5fc0f4baecd7821a512d8c419a69" translate="yes" xml:space="preserve">
          <source>Swift</source>
          <target state="translated">Swift</target>
        </trans-unit>
        <trans-unit id="c7754a0126d0aaf46fbebc210b5eb50440b996eb" translate="yes" xml:space="preserve">
          <source>System current issues table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79086ea99038c78fcb10e82dc0b55ccbabff535" translate="yes" xml:space="preserve">
          <source>System jobs table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fde7d284da785ea8c756a4755a1cf1a647fc31" translate="yes" xml:space="preserve">
          <source>System statistics table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79611699266ef0b5f43b2792f98671886bdc4f7" translate="yes" xml:space="preserve">
          <source>System tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4722f1e7452b133171f8fe49038f80cb4d543dc4" translate="yes" xml:space="preserve">
          <source>TABLE and DATABASE manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8de37891fde68bb5a0ec54a33871e33ff0b04f7" translate="yes" xml:space="preserve">
          <source>TLS options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc959723a236b0cc6de0f357ad16f5a6da878a5" translate="yes" xml:space="preserve">
          <source>Table availability issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bb93a216207f4b9e299da1815f37b802ab7b33" translate="yes" xml:space="preserve">
          <source>Table joins in RethinkDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49276d64118baef926d34027bbab4e81079248fe" translate="yes" xml:space="preserve">
          <source>Tables will be available for writing when the command returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7222b89a2e8be0d6d59f735ee4900bd39725c7" translate="yes" xml:space="preserve">
          <source>Tables with unevenly distributed primary keys, such as incrementing integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3daa2b71e58a54876d28ede052b3a2e246f8ecd2" translate="yes" xml:space="preserve">
          <source>Take the &lt;code&gt;do&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f1d76bf20f6fcdc6d187bbc76cd6436670d3f9" translate="yes" xml:space="preserve">
          <source>Take the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea65d922ed277d1704ab2878b724b53c61de751" translate="yes" xml:space="preserve">
          <source>Takes a grouped stream or grouped data and turns it into an array of objects representing the groups. Any commands chained after &lt;code&gt;ungroup&lt;/code&gt; will operate on this array, rather than operating on each group individually. This is useful if you want to e.g. order the groups by the value of their reduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5c093f525fdc79a9ecef536f2adf23e1bcd059" translate="yes" xml:space="preserve">
          <source>Takes a stream and partitions it into multiple groups based on the fields or functions provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be37be90bfccb09eab627d2a5d3f9b1c85287e5" translate="yes" xml:space="preserve">
          <source>Technical details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3009d114dbbdc48b07c50727c55f8923baa1735" translate="yes" xml:space="preserve">
          <source>Telling RethinkDB to use your certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86033a1c268fcd57c5544ec342f884426872fe2" translate="yes" xml:space="preserve">
          <source>Ten-minute guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62bdf5b0f1b1c7afa76df4a0ec827e816d32887c" translate="yes" xml:space="preserve">
          <source>Ten-minute guide with RethinkDB and JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="580faa9f93143659082ee75418784f7ed233bc25" translate="yes" xml:space="preserve">
          <source>Test if a sequence is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b712c0d5fab5555a5ee001f73a9eae6fd7e22ee" translate="yes" xml:space="preserve">
          <source>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object &lt;code&gt;{'a':1,'b':2,'c':null}&lt;/code&gt; has the fields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c77a6841ba72ffccbbcea87b18fbf2a42ef680" translate="yes" xml:space="preserve">
          <source>Test if two or more values are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87a117ac7aa25ab290c4818f470f3ebbcce0e19" translate="yes" xml:space="preserve">
          <source>Test if two or more values are not equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a0b0052fc126b71716d72a6f07f95c3595919b" translate="yes" xml:space="preserve">
          <source>Tests the response time for analytic MapReduce queries involving string operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb4d0c346b77ce8d2b0806c1febeba5bff03f3d" translate="yes" xml:space="preserve">
          <source>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, &lt;code&gt;includes&lt;/code&gt; acts as a &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that include the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ad66b24a210fe5fb7c74854564c5c2404f940b" translate="yes" xml:space="preserve">
          <source>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, &lt;code&gt;includes&lt;/code&gt; acts as a &lt;a href=&quot;filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that include the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bc89a4bdfcbe6b5eb162678644e978de9e8662" translate="yes" xml:space="preserve">
          <source>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, &lt;code&gt;intersects&lt;/code&gt; acts as a &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that intersect with the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f96ec5473cb3c525e604de3ef69ef3872d90917" translate="yes" xml:space="preserve">
          <source>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, &lt;code&gt;intersects&lt;/code&gt; acts as a &lt;a href=&quot;filter/index&quot;&gt;filter&lt;/a&gt;, returning a sequence of objects from the sequence that intersect with the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf2f9529e3017d5406fa32ca8a2854fd68af8da" translate="yes" xml:space="preserve">
          <source>That will preserve &lt;code&gt;city&lt;/code&gt; and other existing fields. But to replace the entire &lt;code&gt;data&lt;/code&gt; document with a new object, use &lt;code&gt;literal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ae0e5519ad676ec6cffc66040385b181bd25f7" translate="yes" xml:space="preserve">
          <source>The 8-byte unique query token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60bee9b6432ef97dc1ad43b46670489d6ce7524" translate="yes" xml:space="preserve">
          <source>The 8-byte unique query token the response corresponds to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e7b9dd7173a6825a4fbe67852ce2c6c8b61b25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; command API reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b689a67f47be5478bbcb1a5da019f30befb69c45" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../api/javascript/slice/index&quot;&gt;slice&lt;/a&gt; command returns a range from a given start value through but not including a given end value. This makes it easy to use as a &lt;code&gt;skip&lt;/code&gt;/&lt;code&gt;limit&lt;/code&gt; replacement: the start value is the first item to retrieve, and the end value is the first item plus the limit. To retrieve posts 11-20 from the database using &lt;code&gt;slice&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa14532ba532bad5e0a0fe4d1aafde94747bcac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../docs/administration-tools/index&quot;&gt;web UI&lt;/a&gt; (and the &lt;a href=&quot;../info/index&quot;&gt;info&lt;/a&gt; command) can be used to tell you when a table&amp;rsquo;s shards need to be rebalanced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b88a496bd9a54b173bbc02e5f424502c1760079" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../docs/data-types/index&quot;&gt;data type&lt;/a&gt; of a primary key is usually a string (like a UUID) or a number, but it can also be a time, binary object, boolean or an array. Data types can be mixed in the primary key field, but all values must be unique. Using an array as a primary key causes the primary key to behave like a compound index; read the documentation on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index#compound-indexes&quot;&gt;compound secondary indexes&lt;/a&gt; for more information, as it applies to primary keys as well. (Note that the primary index still only covers a single field, while compound secondary indexes can cover multiple fields in a single index.) Primary keys cannot be objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea447ec8762465807261e23874776e14f996671" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../api/javascript/filter/index&quot;&gt;filter&lt;/a&gt; operation is performed in parallel on each shard of the &lt;code&gt;users&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175363b1926f54cd38dc31893d76c1b6b52b1f68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../cookbook/javascript/index&quot;&gt;cookbook section&lt;/a&gt; for common queries and example snippets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c42c7b4a58d5425ef38d8bc03d53c63ea6af30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe&quot;&gt;publish-subscribe pattern&lt;/a&gt; is a powerful way to decouple applications that need to communicate. RethinkDB &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; allow us to implement publish-subscribe with the database acting as a message exchange. We&amp;rsquo;ve built a small example library called &lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/tree/master/javascript&quot;&gt;repubsub&lt;/a&gt; implementing the pattern for use in JavaScript applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91058933c549ee7f1fa7e049d7f4cf89934dd2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://nobrainer.io/&quot;&gt;NoBrainer documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d392cdc77f861f51667a3ca36284f5b8708f0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net/graphs/contributors&quot;&gt;rethinkdb-net team&lt;/a&gt; (C#/.NET): &lt;a href=&quot;https://github.com/mfenniak/rethinkdb-net&quot;&gt;https://github.com/mfenniak/rethinkdb-net&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444bed1a060381b627b7444756e334ab88f212cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rethinkdb/YCSB/tree/a15e249d6b10147e615ddfaf03672bad35e85e7f&quot;&gt;RethinkDB port of YCSB&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a819fbe9a1937b1797d9c6a1ec035e0b9abad4d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-sinatra-pastie&quot;&gt;Sinatra example application&lt;/a&gt; for a different style of a Ruby web app using RethinkDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551d89155ea50718c64be4d84e790dfe4aa6d142" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;rebalance&lt;/a&gt; command will rebalance table shards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcc07dce1d9d2212f7f4ffb39f9574068495311" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt; command can change the values for &lt;code&gt;shards&lt;/code&gt; and &lt;code&gt;replicas&lt;/code&gt; for an existing table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce883ec8777da2140767df9008bd415119ca86b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/python/table_create&quot;&gt;table_create&lt;/a&gt; (or &lt;a href=&quot;../../api/javascript/table_create/index&quot;&gt;tableCreate&lt;/a&gt;) command can specify initial values for &lt;code&gt;shards&lt;/code&gt; and &lt;code&gt;replicas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6803c1ac084369b6f0438e238c22cc29c63583d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rethinkdb.com/api/ruby&quot;&gt;ReQL API docs&lt;/a&gt; for information on RethinkDB commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bec986688114356ebaf7e0856bb503f1a7aaed2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; command also accepts integer arguments as array offsets, like the &lt;a href=&quot;../nth/index&quot;&gt;nth&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0035a462582333656fdc80527201e302fa8b879a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--bind&lt;/code&gt; option controls the default behavior for all RethinkDB ports. If it&amp;rsquo;s specified, the &lt;code&gt;--bind-http&lt;/code&gt;, &lt;code&gt;--bind-cluster&lt;/code&gt; and &lt;code&gt;--bind-driver&lt;/code&gt; options will override that behavior for a specific port. So:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34a64af8039dab4ccf4ac61fc48463c1783f86e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt; options are similar to other &lt;code&gt;rethinkdb&lt;/code&gt; options, specifying the cluster host and port (defaulting to &lt;code&gt;localhost:28015&lt;/code&gt;) and either a database or a table to rebuild. The &lt;code&gt;-n&lt;/code&gt; option specifies the number of rebuilds that will be performed concurrently (defaulting to 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbb463da8944345c9e3056ecf777aa6bf848ac4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.conf&lt;/code&gt; file includes a number of options exclusively for the init script. The rest of the options are exactly the same as the ones that go on the command line to the RethinkDB server. For more details about these options run &lt;code&gt;rethinkdb help&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6abd3a5fbe78c6d61d78af2204c22ef572c884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; term is equivalent to the &lt;a href=&quot;https://rethinkdb.com/api/python/row&quot;&gt;row&lt;/a&gt; command in the official JavaScript and Python drivers. It&amp;rsquo;s useful for languages where anonymous functions are too verbose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39d2fb859670be092655eed63f6837d95943b3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response&lt;/code&gt; object will have the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc2e812e0c496d5d932fcb76cd7cce4a59cbee5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add&lt;/code&gt; command can be called in either prefix or infix form; both forms are equivalent. Note that ReQL will not perform type coercion. You cannot, for example, &lt;code&gt;add&lt;/code&gt; a string and a number together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e770bd3be8c4d7f1305a9eb98af4ed57229b1ce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;and&lt;/code&gt; command can be used as an infix operator after its first argument (&lt;code&gt;r.expr(true).and(false)&lt;/code&gt;) or given all of its arguments as parameters (&lt;code&gt;r.and(true,false)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef981f82d6968bc5dd9c7afb548228c07b5c7260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authors&lt;/code&gt; table contains a document for each author. Each document contains information about the relevant author and a field &lt;code&gt;posts&lt;/code&gt; with an array of posts for that author. In this case the query to retrieve all authors with their posts is simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ad3b24d7068e67089ba95cdcdfb53d11c31611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;between&lt;/code&gt; command works with secondary indexes on date fields, but will not work with unindexed date fields. To test whether a date value is between two other dates, use the &lt;a href=&quot;../during/index&quot;&gt;during&lt;/a&gt; command, not &lt;code&gt;between&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ed8d702f0da3117561443df7630dac12b3151f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind=all&lt;/code&gt; option is a security risk if your machine is open to the internet, and you should take steps to prevent unauthorized access. See the &lt;a href=&quot;../security/index&quot;&gt;security page&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4783dc55f18018622aa7131000c8b4f0bf95e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;branch&lt;/code&gt; command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; (i.e., &amp;ldquo;truthy&amp;rdquo; values), with a final &amp;ldquo;else&amp;rdquo; command to be evaluated if all of the conditionals are &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27792a7b391552685c9bade24559d7d53432ae8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;calendar&lt;/code&gt; table inherits &lt;code&gt;read: true&lt;/code&gt; from the database level, but specifies &lt;code&gt;write: false&lt;/code&gt; to make the table ready-only for &lt;code&gt;notesapp&lt;/code&gt;. The &lt;code&gt;supervisor_only&lt;/code&gt; table overrides both read and write access. The &lt;code&gt;notesapp&lt;/code&gt; account has read and write access to all other tables in the &lt;code&gt;field_notes&lt;/code&gt; database, but no ability to create and drop indexes or change any table&amp;rsquo;s cluster configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e991e5c86a7f1c8aeeaa978efd7dd967c0ddf10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ceil&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18180e46d884ec86288be9f1179b764c0543cf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changes&lt;/code&gt; command returns a cursor (like the &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; commands do). You can iterate through its contents using ReQL. Unlike other cursors, the output of &lt;code&gt;changes&lt;/code&gt; is infinite: the cursor will block until more elements are available. Every time you make a change to the table or document the &lt;code&gt;changes&lt;/code&gt; feed is monitoring, a new object will be returned to the cursor. For example, if you insert a user &lt;code&gt;{id:1,name:Slava,age:31}&lt;/code&gt; into the &lt;code&gt;users&lt;/code&gt; table, RethinkDB will post this document to changefeeds subscribed to &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ebc6710e993abe3e242cc002398d0e04115b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chmod&lt;/code&gt; for the two files should be 644 (&lt;code&gt;chmod 644 &amp;lt;file&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1746e0f4ec2b3cbd9ee6e45b008169437cd2080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; command can optionally take a callback, which will receive an error if one occurs, or return a promise which will be resolved when the connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de72741c99cbbd0f718cde70c80b9b736a0601d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cluster_config&lt;/code&gt; table contains only one row. Documents cannot be inserted into or deleted from this table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a00f39b10088ac3fc7162f96d2aed96ec5e4cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; command is a shorthand way to access the &lt;code&gt;table_config&lt;/code&gt; or &lt;code&gt;db_config&lt;/code&gt;&lt;a href=&quot;../../../docs/system-tables/index#configuration-tables&quot;&gt;System tables&lt;/a&gt;. It will return the single row from the system that corresponds to the database or table configuration, as if &lt;a href=&quot;../get/index&quot;&gt;get&lt;/a&gt; had been called on the system table with the UUID of the database or table in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8da9493de79adac421fcb25c1f5650dc9b6547f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; command returns the size of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d848d8e92a343bd1e1ee7712c5160da92d5ac9ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; field is a Base64-encoded string of the binary object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8d1ca1b2a77edf32c2a4590df21ed431ecff04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;db&lt;/code&gt; command is optional. If it is not present in a query, the query will run against the default database for the connection, specified in the &lt;code&gt;db&lt;/code&gt; argument to &lt;a href=&quot;../connect/index&quot;&gt;connect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad37eacb273de6461d7f78364b2740a5284a171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;distinct&lt;/code&gt; command can be called on any sequence or table with an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbdf15e337cc4a8b690ca59921a9c3a8e7640aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;durability&lt;/code&gt; argument on writes is ignored for system tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7c8b836aba9d6c0c4b7b00901b656aa824e964" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;durability&lt;/code&gt; setting for a table controls when writes are committed. In &lt;code&gt;hard&lt;/code&gt; durability mode, writes are committed to disk before acknowledgements are sent; in &lt;code&gt;soft&lt;/code&gt; mode, writes are acknowledged immediately upon receipt. The &lt;code&gt;soft&lt;/code&gt; mode is faster but slightly less resilient to failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a148d5481c3b62ef42c8cb3568f88ca4842c72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;em_run&lt;/code&gt; command returns a &lt;code&gt;QueryHandle&lt;/code&gt; instance. The &lt;code&gt;QueryHandle&lt;/code&gt; will be closed when all results have been received, or when EventMachine stops running. You can explicitly close it with the &lt;code&gt;close&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8854e7d74db852ed391856ffbb13339def8f064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;emergencyRepair&lt;/code&gt; argument is effectively a different command; when it is specified, no other arguments to &lt;code&gt;reconfigure&lt;/code&gt; are allowed except for &lt;code&gt;dryRun&lt;/code&gt;. When it&amp;rsquo;s executed, each shard of the table is examined and classified into one of three categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8009e94a95dd349ffe642ad6a2659550bbd18c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;epoch_time&lt;/code&gt; field is a Unix timestamp, the number of seconds since January 1st, 1970, with millisecond precision. The &lt;code&gt;timezone&lt;/code&gt; field is a string in the format &lt;code&gt;[+-]HH:MM&lt;/code&gt;, indicating the offset from UTC. UTC is &lt;code&gt;+00:00&lt;/code&gt;; PST is &lt;code&gt;-08:00&lt;/code&gt;; and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd58d2675dc0248d66b49c9c9903627922ec7a35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; command returns &lt;code&gt;true&lt;/code&gt; if two values are equal (in this case, the field &lt;code&gt;name&lt;/code&gt; and the string &lt;code&gt;William Adama&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aca7815d3874f89ac128aa8778fdf468fd56814" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;floor&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c1feeb5fb90500506597611ab61b06ab509f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; field is a binary object containing an opaque representation of the secondary index (including the &lt;code&gt;multi&lt;/code&gt; argument if specified). It can be passed as the second argument to &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt; to create a new index with the same function; see &lt;code&gt;indexCreate&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4946559a625e3e8a1a801b2936ef820db204b2d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grant&lt;/code&gt; command returns an object of the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc08e6a902a4c96c1bd71bf6dc00101fd253b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;granted&lt;/code&gt; field will always be &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;permissions_changes&lt;/code&gt; list will have one object, describing the new permissions values and the old values they were changed from (which may be &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d81ca6649abafda23e1ea30713e22d76b2657a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gt&lt;/code&gt; command returns &lt;code&gt;true&lt;/code&gt; if a value is greater than the specified value (in this case, if the number of posts is greater than two).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b0ff93f0028dedb7d088ecb0bfabd1b04c1ae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;header&lt;/code&gt; field will be a parsed version of the header with fields lowercased, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33748724c059e842b140ab3cebc0157906f31f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;htpasswd&lt;/code&gt; tool will prompt for your new password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab9c4300a5d1a171fddf197c761d335fc5e9a5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeStates&lt;/code&gt; optional argument to &lt;code&gt;changes&lt;/code&gt; allows you to receive extra &amp;ldquo;status&amp;rdquo; documents in changefeed streams. These can allow your application to distinguish between initial values returned at the start of a stream and subsequent changes. Read the &lt;a href=&quot;../../../api/javascript/changes/index&quot;&gt;changes&lt;/a&gt; API documentation for a full explanation and example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868052f78a577f27a08e87e2dc0bb1b9048f59fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeTypes&lt;/code&gt; optional argument adds a third field, &lt;code&gt;type&lt;/code&gt;, to each result sent. The string values for &lt;code&gt;type&lt;/code&gt; are largely self-explanatory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6a2fe819501f70843ca93b461a8f2fab096d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes&lt;/code&gt; command cannot take advantage of a geospatial &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary index&lt;/a&gt;. If you&amp;rsquo;re working with large data sets, consider using an index and &lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; before &lt;code&gt;includes&lt;/code&gt; to narrow down the initial result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3a7d962ba66d9269511623889e1a2dd7b32c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; argument is mandatory. Optional arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad770288c26a5de2145131cdaacd5a9d83f4d136" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; argument is mandatory. This command returns the same results as &lt;code&gt;table.filter(r.row('index').intersects(geometry))&lt;/code&gt;. The total number of results is limited to the array size limit which defaults to 100,000, but can be changed with the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd743e36733d09c9da01000c0b88c5292d0cc3d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexFunction&lt;/code&gt; can be an anonymous function or a binary representation obtained from the &lt;code&gt;function&lt;/code&gt; field of &lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt;. The function must be deterministic, and so cannot use a subquery or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43ceb3b85c6c373b0ae4ee4be93296ef3fea882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;insert&lt;/code&gt; command accepts a single document or an array of documents if you want to batch inserts. We use an array in this query instead of running three separate &lt;code&gt;insert&lt;/code&gt; commands for each document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6621021a52f95d192cf8605e58bf7280b4c773c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intersects&lt;/code&gt; command cannot take advantage of a geospatial &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary index&lt;/a&gt;. If you&amp;rsquo;re working with large data sets, you should consider using an index and the &lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; command instead of &lt;code&gt;intersects&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4139db0f544e285139cf6c660044e153973d181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jobs&lt;/code&gt; table provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table. For details, read the &lt;a href=&quot;../system-jobs/index&quot;&gt;System jobs table&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ce76979f5d4e08895a24ed209616d935ad93fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lambda&lt;/code&gt; expression is executed only once on the client. Internally, the driver passes a special object to the &lt;code&gt;lambda&lt;/code&gt; function which allows constructing a representation of the query. This representation is then sent to the server over the network and evaluated on the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db687d26d281f53ab2937b362050f18086c0100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;logs&lt;/code&gt; table supports changefeeds. Only messages being &lt;em&gt;written to the logs table&lt;/em&gt; will generate changefeed events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747a7670afb696b207114aaef7ea26c0638477d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match&lt;/code&gt; command does not support backreferences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fecdd1e7503897b3b0389a10c6271bc84fd03f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max&lt;/code&gt; command can be called with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61970042a7f09b4c61acb3dfc28139c2a94bdaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;min&lt;/code&gt; command can be called with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21b8958d38631f71f563c6d778bb5c3c1ffc323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multi&lt;/code&gt; field will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether this index was created as a multi index; the &lt;code&gt;geo&lt;/code&gt; field will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether this index was created as a geospatial index. See &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt; for details. The &lt;code&gt;outdated&lt;/code&gt; field will be true if the index is outdated in the current version of RethinkDB and needs to be rebuilt. The &lt;code&gt;progress&lt;/code&gt; field is a float between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, indicating how far along the server is in constructing indexes after the most recent change to the table that would affect them. (&lt;code&gt;0&lt;/code&gt; indicates no such indexes have been constructed; &lt;code&gt;1&lt;/code&gt; indicates all of them have.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5593aa4baf9fd61785d48ac139c9d79b76a0b29f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; field, if present, will be an array of one or more &lt;code&gt;ResponseNote&lt;/code&gt; values, giving further information about the kind of the stream being returned. These will be numeric values, corresponding to the notes in &lt;code&gt;ql2.proto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233fb265ce401f5e6ef81eb6bf82b04d5b9bd910" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or&lt;/code&gt; command can be used as an infix operator after its first argument (&lt;code&gt;r.expr(true).or(false)&lt;/code&gt;) or given all of its arguments as parameters (&lt;code&gt;r.or(true,false)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86115daaac62e6d67b2f25326871b6408003fe0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;orderBy&lt;/code&gt; operation is performed on the query server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f69c272f5a8902ee9b15471e9f21b729c73065c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;page&lt;/code&gt; argument takes the type of pagination mechanism used by the API. In this case GitHub uses the standard link header mechanism &lt;code&gt;link-next&lt;/code&gt;, but you can also specify custom pagination schemes for unusual APIs. The &lt;code&gt;page-limit&lt;/code&gt; argument specifies the number of pages you&amp;rsquo;d like to get. See the &lt;a href=&quot;../../api/javascript/http/index&quot;&gt;API reference&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bcd53724b946ca9ed7f295c7ce42629507b3c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;page&lt;/code&gt; function may return a string corresponding to the next URL to request, &lt;code&gt;null&lt;/code&gt; indicating that there is no more to get, or an object of the format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eac2c2eafcc25e69c439c981a9a43c9505640b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; field is simply a boolean indicating whether a password is set or not. There is no way to read a password from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb572facbb41488fe72b8fa9f65c8b6e60f804a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pluck&lt;/code&gt; command also supports selecting nested fields in a document. For example, suppose we&amp;rsquo;d like to select the fields &lt;code&gt;phone&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; from the following document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded41df3cb008f7a94136d4d3d523c133ad429cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ql2.proto&lt;/code&gt; file is well-commented, showing arguments and output for each command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cde22a6f27e7d9521847d08386006eb67987ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r.do()&lt;/code&gt; command is serialized with the &lt;code&gt;FUNCALL&lt;/code&gt; term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df58bc197cc0396ab3dc29565ebeae49124d81c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r.http&lt;/code&gt; command will issue a request to &lt;code&gt;www.google.com&lt;/code&gt; directly from the database and return a string with the source of Google&amp;rsquo;s homepage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36decc9f51cb514925634d8bff79ad911b6257f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; permissions can be specified on three scopes, from most granular to least:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b42e69bb9c54f130efd1a3ec27a3df710af6ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rebalance&lt;/code&gt; command operates by measuring the distribution of primary keys within a table and picking split points that will give each shard approximately the same number of documents. It won&amp;rsquo;t change the number of shards within a table, or change any other configuration aspect for the table or the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554d2dc3c9db959ecfadca51c84bf63b31fddb75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace&lt;/code&gt; command can be used to both insert and delete documents. If the &amp;ldquo;replaced&amp;rdquo; document has a primary key that doesn&amp;rsquo;t exist in the table, the document will be inserted; if an existing document is replaced with &lt;code&gt;null&lt;/code&gt;, the document will be deleted. Since &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; operations are performed atomically, this allows atomic inserts and deletes as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69061fb9a85edfcdb4797cccceab5987fcbbd1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restore&lt;/code&gt; subcommand has most of the the same options and defaults as the &lt;code&gt;dump&lt;/code&gt; command, although there are a few extra commands for controlling how data is imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3732c751628619f7fe5223ea3a55cd9b025f5625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restore&lt;/code&gt; subcommand will reload a backup an archive into your cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5290e332ab7fca15808af2f086fca3b9fe419cf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rethinkdb&lt;/code&gt; utility includes an &lt;code&gt;import&lt;/code&gt; command to load existing data into RethinkDB databases. It can read JSON files, organized in one of two formats described below, or comma-separated value (CSV) files (including ones with other delimiters such as tab characters). The utility runs under the &lt;code&gt;admin&lt;/code&gt; user account (see &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ff9bbe25c8004989f8850322279724e1a217cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; command can also be chained after an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5dd85bcc132fcce01c6a0bdf9d6ad96e28c77c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rowProcess&lt;/code&gt; callback receives the row as its first argument; it may also take an optional second argument, which is a callback function to be executed after each row has been processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1dfcd0ac2e8005e1671ad7646473bea948e6f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server&lt;/code&gt; command returns either two or three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c5611afbdf2371b84ac8989750ab9372b63d9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; table provides statistics about server read/write throughput, client connections, and memory usage. For details, read the &lt;a href=&quot;../system-stats/index&quot;&gt;System stats table&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbcbb3b476cec86770a7e8508c7d7f14fd0f096" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;table&lt;/code&gt; command returns a cursor; use the &lt;a href=&quot;../../../api/javascript/next/index&quot;&gt;next&lt;/a&gt; or &lt;a href=&quot;../../../api/javascript/each/index&quot;&gt;each&lt;/a&gt; command to iterate through the result set, or &lt;a href=&quot;../../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt; to retrieve the set as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8555ee1c59461069384b1231faf6ed2e10256a2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeOf&lt;/code&gt; command can be appended to any ReQL command to display what data type that command will returns. For instance (in JavaScript):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c3fbf52c0a0225e096a3e3f50430c6f20043c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command allows changing existing fields in the document, as well as values inside of arrays. Let&amp;rsquo;s suppose Star Trek archaeologists unearthed a new speech by Jean-Luc Picard that we&amp;rsquo;d like to add to his posts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c71b707545ed0fdcaeabb3a5aac3886c06f220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command lets you to overwrite fields, but not delete them. If you want to delete a field, use the &lt;code&gt;replace&lt;/code&gt; command. The &lt;code&gt;replace&lt;/code&gt; command replaces your entire document with the new document you pass as an argument. For example, if you want to delete the field &lt;code&gt;author&lt;/code&gt; of the blog post with the id &lt;code&gt;1&lt;/code&gt;, you would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a4c3fb12182407ba2e67e16e8bc153a3fc6a94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; command supports RethinkDB&amp;rsquo;s &lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;nested field&lt;/a&gt; syntax to update subdocuments. Consider a user table with contact information in this format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9709ed7ac5a3ccdb5608327426c040efa46a575b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;users&lt;/code&gt; table contains one document for each user in the system, each with two key/value pairs: a unique &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;password&lt;/code&gt; field. The &lt;code&gt;id&lt;/code&gt; is the account name. The &lt;code&gt;password&lt;/code&gt; field behaves differently on writes than on reads; you can change an account&amp;rsquo;s password by writing a value to this field (or remove the password by writing &lt;code&gt;false&lt;/code&gt;), but the password cannot be read. Instead, on a read operation &lt;code&gt;password&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, indicating whether the account has a password or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c8bf644a4f9030d7ad2577d422c0cd9a38c6cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait&lt;/code&gt; command takes two optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eaaabe02ee4500dead731d18d5ec0e845f4d2e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;map&lt;/strong&gt; step from above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2889c83235362d653b025be4c1c424ba1ce7d91e" translate="yes" xml:space="preserve">
          <source>The CSV delimiter defaults to the comma, but this can be overridden with the &lt;code&gt;--delimiter&lt;/code&gt; option. Use &lt;code&gt;--delimiter '\t'&lt;/code&gt; for a tab-delimited file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6c8ae6aa468752854d01d185af510f328007df" translate="yes" xml:space="preserve">
          <source>The Data Explorer in the web administration UI is itself a JavaScript REPL, with syntax highlighting and history. (The article on &lt;a href=&quot;../reql-data-exploration/index&quot;&gt;ReQL data exploration&lt;/a&gt; goes into some detail on how to use the Data Explorer.) The advantage of scripting languages with ReQL comes into play when writing administration scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2921a82497eb6c2b10a8bb44faddbdf034525af2" translate="yes" xml:space="preserve">
          <source>The Data Explorer will return information about the inserted rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f8232887e712c610ded4c3b1ca09822b2f7852" translate="yes" xml:space="preserve">
          <source>The JSON-encoded &lt;code&gt;Response&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae581c711fdded915ec6331d2e6201dc801ce45f" translate="yes" xml:space="preserve">
          <source>The JSON-encoded response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401226b470a193230b4f51fd65ea09e28b5975e5" translate="yes" xml:space="preserve">
          <source>The JavaScript and Python drivers support a convenience command, &lt;code&gt;row()&lt;/code&gt;, which simply returns the currently selected document for use with other ReQL functions in the query. However, &lt;code&gt;row&lt;/code&gt; won&amp;rsquo;t work within nested queries. The solution to this error is to rewrite the &lt;code&gt;row&lt;/code&gt; clause as an anonymous function. So the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93cb88766b967f3d6c02e56c626c06eefa41694" translate="yes" xml:space="preserve">
          <source>The JavaScript driver currently works with Node.js versions 0.10.0 and above. You can check your node version as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74f35f90936d1e818634cc6a9b8cc53ac18e27c" translate="yes" xml:space="preserve">
          <source>The NoBrainer generator automatically includes the &lt;a href=&quot;http://nobrainer.io/docs/timestamps&quot;&gt;TimeStamps&lt;/a&gt; mixin that adds the fields &lt;code&gt;created_on&lt;/code&gt; and &lt;code&gt;updated_on&lt;/code&gt;. You&amp;rsquo;ll also notice this created a simple secondary index on the &lt;code&gt;name&lt;/code&gt; field. In order to add the index to the database, you can use the Rake task:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78507d39aba2403ee6f13a4ffbdf2b02ac49261" translate="yes" xml:space="preserve">
          <source>The ReQL &lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt; command is used to grant and revoke permissions for users. The scope is selected by chaining &lt;code&gt;grant&lt;/code&gt; after &lt;code&gt;db&lt;/code&gt; (for database scope), &lt;code&gt;table&lt;/code&gt; (for table scope), or calling it directly (for global scope).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deef836c1824d07b0b55b81f06b31f6cc374b4d" translate="yes" xml:space="preserve">
          <source>The RethinkDB AMI is preconfigured with the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68f0cac323d8bd865cffdbd7126de4c860b2528" translate="yes" xml:space="preserve">
          <source>The RethinkDB Python driver integrates with both the &lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado web framework&lt;/a&gt; and the &lt;a href=&quot;http://twistedmatrix.com/&quot;&gt;Twisted networking engine&lt;/a&gt;. By using the &lt;a href=&quot;https://rethinkdb.com/api/python/set_loop_type&quot;&gt;set_loop_type&lt;/a&gt; command, you can select either the &lt;code&gt;'tornado'&lt;/code&gt; or &lt;code&gt;'twisted'&lt;/code&gt; event loop model, returning Tornado &lt;code&gt;Future&lt;/code&gt; objects or Twisted &lt;code&gt;Deferred&lt;/code&gt; objects respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1887d58aefbe9cd201c7569b6def6f9b46a2192" translate="yes" xml:space="preserve">
          <source>The RethinkDB Ruby driver adds a new ReQL command, &lt;a href=&quot;https://rethinkdb.com/api/ruby/em_run&quot;&gt;em_run&lt;/a&gt;, designed to work with &lt;a href=&quot;http://rubyeventmachine.com&quot;&gt;EventMachine&lt;/a&gt;. In addition, it provides a superclass, &lt;code&gt;RethinkDB::Handler&lt;/code&gt;, with event-specific methods (e.g., &lt;code&gt;on_open&lt;/code&gt;, &lt;code&gt;on_close&lt;/code&gt;) that may be overridden by a class your application defines and passes to &lt;code&gt;em_run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb928e983992a16cf85ee7c757c4a76ce7b98a95" translate="yes" xml:space="preserve">
          <source>The RethinkDB command line utility allows you to easily take hot backups on a live cluster with the &lt;code&gt;dump&lt;/code&gt; and &lt;code&gt;restore&lt;/code&gt; subcommands. The utility runs under the &lt;code&gt;admin&lt;/code&gt; user account (see &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cccb51dd81c41e2a73448104ab42e75c1bf07f" translate="yes" xml:space="preserve">
          <source>The Tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73116bcd937f8234ed2fae850b17a96ef62cc32" translate="yes" xml:space="preserve">
          <source>The above structure is functionally identical to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be08bdb688785dbc0b51a07a4d14e27d4297a6f" translate="yes" xml:space="preserve">
          <source>The admin account</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4b50bb6475112f6456711fd2e86904fd04ed69" translate="yes" xml:space="preserve">
          <source>The admin user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49266cd9dfe06ccf934b0d6a03045039f4b9596" translate="yes" xml:space="preserve">
          <source>The asynchronous database API allows you to handle multiple changefeeds simultaneously by running multiple background tasks. As an example, consider this changefeed handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d2dd939eb0d6439399f983d97cb288040a44ea" translate="yes" xml:space="preserve">
          <source>The asynchronous database API allows you to handle multiple changefeeds simultaneously by scheduling background coroutines. As an example, consider this changefeed handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519ebcd651eb55bc4130940c4263b3c1d13577fa" translate="yes" xml:space="preserve">
          <source>The automatically chosen cache size ensures a reliable operation in most scenarios, but the cache size can be tuned manually to accommodate increased memory usage by other processes or to maximize query performance. A larger cache improves the database&amp;rsquo;s performance, but you must consider other sources of memory consumption to avoid out of memory conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e374f6277f44b97e1222377bc67dde6a9c6976" translate="yes" xml:space="preserve">
          <source>The backtrace from the crash, if it&amp;rsquo;s available in the logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713ad2f29426066c8fb98399dc92a553f0434ed4" translate="yes" xml:space="preserve">
          <source>The basic rule is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4675c5be848d511ac96d9c2063be8e951d3254f" translate="yes" xml:space="preserve">
          <source>The basic setup is complete&amp;mdash;&lt;strong&gt;you&amp;rsquo;ve now got a working server!&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6fd40233d0f51b4739f7f3b630ae6b5e237c7d" translate="yes" xml:space="preserve">
          <source>The best way to secure a RethinkDB cluster is to run it on a protected network that doesn&amp;rsquo;t allow access from the outside world. However, this may not always be feasible. For example, cloud deployments often require access from wide area networks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6a0b311a15c9d3de4c39c35a42e039d165be26" translate="yes" xml:space="preserve">
          <source>The body of every &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt; is wrapped in an implicit &lt;code&gt;.default(false)&lt;/code&gt;. You can overwrite the value &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;default&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5a7c4ac68bb0098f4c7acbfa8d3521ed65b4f3" translate="yes" xml:space="preserve">
          <source>The calls above only return a few dozen stargazers while RethinkDB has thousands. Most APIs paginate large result sets and GitHub is no exception. The &lt;code&gt;r.http&lt;/code&gt; command has built-in support for pagination via the &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;pageLimit&lt;/code&gt; arguments. Let&amp;rsquo;s get ten pages of stargazers from GitHub instead of one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66da8d1fa6ce80f3799528d078f5270ec96090d" translate="yes" xml:space="preserve">
          <source>The center may be specified either by two floating point numbers, the latitude (&amp;minus;90 to 90) and longitude (&amp;minus;180 to 180) of the point on a perfect sphere (see &lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;Geospatial support&lt;/a&gt; for more information on ReQL&amp;rsquo;s coordinate system), or by a point object. The radius is a floating point number whose units are meters by default, although that may be changed with the &lt;code&gt;unit&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51cfd64d4a242d067b7d8103f85064dab48e6f1" translate="yes" xml:space="preserve">
          <source>The classic chat with Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a08ba537a6bb6b6e0207beb1bd8c225b336d162" translate="yes" xml:space="preserve">
          <source>The client drivers do a lot of work to inspect the code and convert it to an efficient ReQL query that will be executed on the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0e48d480584e226bdbfe1b39b400ad644d5c44" translate="yes" xml:space="preserve">
          <source>The client sends the &amp;ldquo;magic number&amp;rdquo; (&lt;code&gt;0x34c2bdc3&lt;/code&gt;) for the protocol version, as a 32-bit little-endian integer (4 bytes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cfe67e46bd1330804a94bb469638f0249ededc" translate="yes" xml:space="preserve">
          <source>The client sends the null-terminated JSON &amp;ldquo;client-final-message&amp;rdquo; with the same nonce and the ClientProof computed as specified by the RFC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a49fdc9855f3f674aee23d74d2e1ea07fdd5ec" translate="yes" xml:space="preserve">
          <source>The client sends the protocol version, authentication method, and authentication as a null-terminated JSON response. RethinkDB currently supports only one authentication method, &lt;code&gt;SCRAM-SHA-256&lt;/code&gt;, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7677&quot;&gt;IETF RFC 7677&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc5802&quot;&gt;RFC 5802&lt;/a&gt;. The RFC is followed with the exception of error handling (RethinkDB uses its own higher level error reporting rather than the &lt;code&gt;e=&lt;/code&gt; field). RethinkDB does not support channel binding and clients should not request this. The value of &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; is the &amp;ldquo;client-first-message&amp;rdquo; specified in RFC 5802 (the channel binding flag, optional SASL authorization identity, username (&lt;code&gt;n=&lt;/code&gt;), and random nonce (&lt;code&gt;r=&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a84a6d65e8a3295aa13f3589f630b727d114e51" translate="yes" xml:space="preserve">
          <source>The cluster configuration is &lt;em&gt;not&lt;/em&gt; exported in backup. After a full restore, it will need to be manually reconfigured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3780ae988b6b36953e49487d4455ef2b6bdb38c3" translate="yes" xml:space="preserve">
          <source>The cluster must have three or more servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632b0a977c5ac1169440868320737c67d0be367c" translate="yes" xml:space="preserve">
          <source>The configuration file&amp;rsquo;s location depends on the startup system your distribution uses. A configuration file may also be specified on the command line with the &lt;code&gt;--config-file&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d57968bb10f1a8ee059f9f4fabbd5506039b2ce" translate="yes" xml:space="preserve">
          <source>The conflicting field is &lt;code&gt;id&lt;/code&gt;. If you directly use the &lt;code&gt;zip&lt;/code&gt; command, the &lt;code&gt;id&lt;/code&gt; field of the result will be the one from the company. There are three ways to resolve potential field conflicts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a66fdd8d9de0bac5ea2260645056298020b2b8" translate="yes" xml:space="preserve">
          <source>The contact information is &lt;em&gt;nested,&lt;/em&gt; like paths in a file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e1e4bcb0e4603cd6cff58253ffb59a537fc94c" translate="yes" xml:space="preserve">
          <source>The core file, if it was dumped on crash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba97166dc1556a5cdbc1fb0a9720d0a77462db53" translate="yes" xml:space="preserve">
          <source>The current issues table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. Querying it returns problems detected within the cluster; in normal, error-free operation, it will remain empty. The table is read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81558969cd0f2524d236b46d01319070689378" translate="yes" xml:space="preserve">
          <source>The data files if RethinkDB cannot restart&amp;sup1;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25aadde4cb61338d8bafe72ae41695aff82a3946" translate="yes" xml:space="preserve">
          <source>The data is often colocated on disk. If you have a dataset that doesn&amp;rsquo;t fit into RAM, data is loaded from disk faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432d68834696a4171c465fcdf29cc3b60b18ac02" translate="yes" xml:space="preserve">
          <source>The data is organized into B-Trees, and stored on disk using a log-structured storage engine built specifically for RethinkDB and inspired by the architecture of BTRFS. The storage engine has a number of benefits over other available options, including an incremental, fully concurrent garbage compactor, low CPU overhead and very efficient multicore operation, a number of SSD optimizations, instantaneous recovery after power failure, full data consistency in case of failures, and support for multiversion concurrency control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3fd25b569c562f5c89d32cc20220b1580eb52d" translate="yes" xml:space="preserve">
          <source>The data set generated by YCSB consists of 25 million documents, sized at 1 KB each. All data fits into the server cache in this scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f5c132a6c8fcdd7afd1c8bae8bfba8ab30a7d1" translate="yes" xml:space="preserve">
          <source>The default security group opens 4 ports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19e6a7695718d0586846f66bc593da2a988d29b" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is with the &lt;code&gt;openssl&lt;/code&gt; command line tool. (Under Linux and OS X, this is already installed; for Windows, you may be able to find &lt;a href=&quot;https://wiki.openssl.org/index.php/Binaries&quot;&gt;precompiled binaries&lt;/a&gt; from the list on the OpenSSL wiki.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f1812991e1cc3c581617dbd4daebc446ccc185" translate="yes" xml:space="preserve">
          <source>The easiest way to rename a database is to use the &lt;a href=&quot;../../../api/javascript/config/index&quot;&gt;config&lt;/a&gt; command to access the &lt;code&gt;db_config&lt;/code&gt;&lt;a href=&quot;../../system-tables/index&quot;&gt;system table&lt;/a&gt;, and then simply use the &lt;code&gt;update&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bd55fcff5767ef7274bfe1e8ce0c5c79f0d4ff" translate="yes" xml:space="preserve">
          <source>The easiest way to use RethinkDB with EventMachine is simply by passing a block to &lt;code&gt;em_run&lt;/code&gt;. If RethinkDB returns a sequence (including a stream), the block will be called once with each element of the sequence. Otherwise, the block will be called just once with the returned value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f5bff35a4c9660e74c3c9c467c02d19d234371" translate="yes" xml:space="preserve">
          <source>The entire query on the exchange is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7872f9fb3324da93dd0fa2f2d9cad699581f3968" translate="yes" xml:space="preserve">
          <source>The equivalent query with the &lt;code&gt;each&lt;/code&gt; command would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97251998b6e48bd65cb3a5f03d2385e3f4ad6124" translate="yes" xml:space="preserve">
          <source>The essential tradeoff exposed by the CAP theorem is this: in case of network partitioning, does the system maintain availability or data consistency? (Jumping ahead, RethinkDB chooses to maintain data consistency).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdbbb7e20b2915b198b1869df59132f308dec83" translate="yes" xml:space="preserve">
          <source>The example documentation includes a &lt;a href=&quot;https://github.com/rethinkdb/example-pubsub/blob/master/javascript/demo.js'&quot;&gt;demo script&lt;/a&gt; that shows off the three topic patterns described above. The script implements both a publisher and a subscriber with each pattern type. You can use this script to try out multiple publishers and multiple subscribers to test out how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edfaf70b3165d1edeb4b2ca333e0e5c7f12d86f" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;left&lt;/code&gt; contains the information from the left table in the query (in this case, the employee)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8dc7c54d50cbb27b2e5e50ed222c7c1bcabb6f" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;right&lt;/code&gt; contains the information from the right table in the query (in this case, the company)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca20f66475f57f24716ce5a447518106f391982" translate="yes" xml:space="preserve">
          <source>The field name can be determined entirely on the server, too. For instance, to update a field whose name is drawn from the value of another field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a69ccf3b964eb9485bcdd26e8c05306cda5c74" translate="yes" xml:space="preserve">
          <source>The file system it&amp;rsquo;s using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26add78546ea5b911c7f22338e8d01f8bc519e6c" translate="yes" xml:space="preserve">
          <source>The file uses a simple format of &lt;code&gt;key=value&lt;/code&gt;, with one key specified per line. A simple configuration file that uses the default ports, assigns a server to a virtual group using server tags and joins an existing cluster might be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967d896d236ec1fb0a5af483a32f7ac64a4a217d" translate="yes" xml:space="preserve">
          <source>The final reduction step is executed to combine the values of the two shards. Instead of computing &lt;code&gt;4 + 6&lt;/code&gt;, the query executes &lt;code&gt;4 + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c10050daac2ef80e360f5105e9b0c7210bb045" translate="yes" xml:space="preserve">
          <source>The first function increments the accumulator each time it&amp;rsquo;s called, starting at &lt;code&gt;0&lt;/code&gt;; the second function, the emitting function, alternates between returning a single-item list containing the current row or an empty list. The &lt;code&gt;fold&lt;/code&gt; command will return a concatenated list of each emitted value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fd60f1adeaf3727bc4bf3fdd3883868eaa6238" translate="yes" xml:space="preserve">
          <source>The first layer implements the distributed infrastructure, placing copies of data on specific servers, routing queries, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ba98d6b6cd3aa5da8ea438eaebfebb10f6c61a" translate="yes" xml:space="preserve">
          <source>The first time you call an &lt;code&gt;EventEmitter&lt;/code&gt; method, the cursor or feed will emit data just after the I/O events callbacks and before &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3e834a06be3d4a966b74e6eddbe6ce25aed60f" translate="yes" xml:space="preserve">
          <source>The first, required function passed to &lt;code&gt;eachAsync&lt;/code&gt; takes either one or two functions as arguments. The first is a callback to process each row as it is emitted; the second is an optional callback which will be executed when all row processing is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77e0ba8b65283ab2e514276f940a158831a2d01" translate="yes" xml:space="preserve">
          <source>The following browsers are supported and known to work with the web UI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df000274781b42d95e5cd8f246c23c4e2ddf8e2" translate="yes" xml:space="preserve">
          <source>The following command will output the contents of &lt;em&gt;all&lt;/em&gt; the configuration/status tables as well as the most recent 50 lines of the &lt;code&gt;logs&lt;/code&gt; table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e980e576b3cf9e71a983706b28a74a69507c5ca2" translate="yes" xml:space="preserve">
          <source>The following commands can be distributed across shards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23607390bcdf5106a17d091ec59afc6366ef93aa" translate="yes" xml:space="preserve">
          <source>The following fields are always present in this object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa7d560043390f25c44226fb5ceef0d02b7d4e2" translate="yes" xml:space="preserve">
          <source>The format of the array returned by &lt;code&gt;ungroup&lt;/code&gt; is the same as the default native format of grouped data in the javascript driver and data explorer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea8b9bda562c3a2c267fd13344c22561590ebae" translate="yes" xml:space="preserve">
          <source>The full list of &lt;code&gt;QueryType&lt;/code&gt; values is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475b97f4658238ce4d91f9f9f592b520513498e2" translate="yes" xml:space="preserve">
          <source>The full output from &lt;code&gt;rethinkdb --version&lt;/code&gt;, something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14769e9184ffc530cac63e2fae1484534e1ee52b" translate="yes" xml:space="preserve">
          <source>The full output from &lt;code&gt;uname -a&lt;/code&gt;, something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69129d2da31b2f07b7562ea61774addc8ca3fc5c" translate="yes" xml:space="preserve">
          <source>The full query execution process is fairly complex and nuanced. For example, some operations cannot be parallelized, some queries cannot be executed lazily (which has implications on runtime and RAM usage), and implementations of some operations could be significantly improved. We will be adding tools to help visualize and understand query execution in a user-friendly way, but at the moment the best way to learn more about it is to ask us or to look at the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c162ed1ca38301acb854f2294b911ec17da79f31" translate="yes" xml:space="preserve">
          <source>The full syntax for the &lt;code&gt;import&lt;/code&gt; command is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deca2cf2857457188d6ef69f7a463144da27b999" translate="yes" xml:space="preserve">
          <source>The function would be serialized as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7cae79892fe7f333ad65e3b8f50bdbc5bee557" translate="yes" xml:space="preserve">
          <source>The function you give to &lt;code&gt;indexCreate&lt;/code&gt; must be deterministic. In practice this means that that you cannot use a function that contains a sub-query or the &lt;code&gt;r.js&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bb40f02c679aca148c3514604ac102d9df5cab" translate="yes" xml:space="preserve">
          <source>The games table contains these documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fda65faa054c03a06f17658d0df4a9e5f090ac" translate="yes" xml:space="preserve">
          <source>The geospatial functions are implemented through a set of new geometric object data types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bf76a1e568737c42ee060cb4a10d8649ca86a7" translate="yes" xml:space="preserve">
          <source>The grant command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cc776f379421f9e0176920e32ec32956ce0ba2" translate="yes" xml:space="preserve">
          <source>The index must either be the primary key or have been previously created with &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2495353fe68162175193be062922febe81792444" translate="yes" xml:space="preserve">
          <source>The index must have been previously created with &lt;a href=&quot;../index_create/index&quot;&gt;indexCreate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca41c024d3d03398ad932fa456e6f47678274ff4" translate="yes" xml:space="preserve">
          <source>The init.d script supports starting multiple instances on the same server via multiple &lt;code&gt;.conf&lt;/code&gt; files in &lt;code&gt;/etc/rethinkdb/instances.d&lt;/code&gt;. This may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebf19d589643ec5b145f9f4331ef50a76004e07" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;map&lt;/code&gt; function is just being used to iterate through the items in each order. At this point, our query will return a list of objects, each object with three fields: &lt;code&gt;item_id&lt;/code&gt;, &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d932f3d62c38556feefc878504c15decd242c35" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;sum&lt;/code&gt; adds the scores by match within each document; the outer &lt;code&gt;sum&lt;/code&gt; adds those results together for a total across all the documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30db86d4cd4223f11f528b78e8eaa37d415543e" translate="yes" xml:space="preserve">
          <source>The intracluster port will be accessible from within the local network where you run RethinkDB nodes, but will not be accessible from the outside world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e6220488f98ca8b4a9e1814cfe64c223d59c09" translate="yes" xml:space="preserve">
          <source>The jobs table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. It provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b9718b6370d6926103658ff4576ee577670375" translate="yes" xml:space="preserve">
          <source>The keys in a multi index can be single values, compound values or even arbitrary expressions. (See the section below for more detail on indexes using functions.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f9d489b67d40b5391cfe80f91d791cb7c19663" translate="yes" xml:space="preserve">
          <source>The language is easy to learn, read, and modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d43b4d8b1ab557e528e7e44276c5ff362b9edeb" translate="yes" xml:space="preserve">
          <source>The last argument to &lt;code&gt;do&lt;/code&gt; (or, in some forms, the only argument) is an expression or an anonymous function which receives values from either the previous arguments or from prefixed commands chained before &lt;code&gt;do&lt;/code&gt;. The &lt;code&gt;do&lt;/code&gt; command is essentially a single-element &lt;a href=&quot;../map/index&quot;&gt;map&lt;/a&gt;, letting you map a function over just one document. This allows you to bind a query result to a local variable within the scope of &lt;code&gt;do&lt;/code&gt;, letting you compute the result just once and reuse it in a complex expression or in a series of ReQL commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b83f2f20d6e27211b3484dd80a4271132f9fba" translate="yes" xml:space="preserve">
          <source>The length of the response, as a 4-byte little-endian integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6f0d5641c4868545fe88e3f18cccf39a6677f5" translate="yes" xml:space="preserve">
          <source>The linearizability guarantee is for &lt;em&gt;atomic operations,&lt;/em&gt; not for &lt;em&gt;queries.&lt;/em&gt; A single RethinkDB query will not necessarily execute as a single atomic operation. It&amp;rsquo;s possible that the query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6c7b03ecee10bbdd3ecd94feb9326cf807aea0" translate="yes" xml:space="preserve">
          <source>The listener is the other side of the interaction: it connects to RabbitMQ, signs up to be notified of messages it&amp;rsquo;s interested in, and does something when it receives a message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915fce30152336842eeda671dad0b27dec31599e" translate="yes" xml:space="preserve">
          <source>The log file&amp;rsquo;s location is dependent on your system configuration and how you started RethinkDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e78ae1df38b4c0eccc0c5010b454cb2411fca09" translate="yes" xml:space="preserve">
          <source>The log may give you information as to what caused the crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4917584586a9ba5841c6d9996a82f13e2383ec57" translate="yes" xml:space="preserve">
          <source>The message &lt;code&gt;received invalid clustering header&lt;/code&gt; means there is a port mismatch, and something is connecting to the wrong port. For example, it&amp;rsquo;s common to get this message if you accidentally point the browser or connect the client drivers to the intracluster traffic port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b96017ac9340db22343a25f56da2ed0e933cf4" translate="yes" xml:space="preserve">
          <source>The metadata in the system tables applies to the RethinkDB cluster as a whole. Each server in a cluster maintains its own copy of the system tables. Whenever a system table on a server changes, the changes are synced across all the servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34aae6139df043314fa6079b6b69c72abcd122fb" translate="yes" xml:space="preserve">
          <source>The most important field of this object is &lt;code&gt;errors&lt;/code&gt;. Generally speaking, if no exceptions are thrown and &lt;code&gt;errors&lt;/code&gt; is 0 then the write did what it was supposed to. (RethinkDB throws an exception when it isn&amp;rsquo;t even able to access the table; it sets the &lt;code&gt;errors&lt;/code&gt; field if it can access the table but an error occurs during the write. This convention exists so that batched writes don&amp;rsquo;t abort halfway through when they encounter an error.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52054d4689c88c2dd563c71fc3d4622fe9e37e26" translate="yes" xml:space="preserve">
          <source>The most important things for you to provide for us are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9fb82f35843a166df27094da516f937f5cd76f" translate="yes" xml:space="preserve">
          <source>The next section will explain how to build complex queries. For now, we will just send the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; (&lt;code&gt;r.expr(&quot;foo&quot;)&lt;/code&gt;) to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850ad84f52970e1d319ea7e6979fbb8fb61b332c" translate="yes" xml:space="preserve">
          <source>The next section will go into more detail, but in our example the &lt;code&gt;QueryType&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; (or &lt;code&gt;START&lt;/code&gt;, as we&amp;rsquo;ll see later), the &lt;code&gt;query&lt;/code&gt; is simply the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; and there are no options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae3c52cd36f26bb22cf875ccd87448c4be30f8e" translate="yes" xml:space="preserve">
          <source>The number of documents on shard 1 is computed. The query returns the value &lt;code&gt;4&lt;/code&gt; for the shard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27530ba359fc44b511a6ec9376acbc82fc3b7d1" translate="yes" xml:space="preserve">
          <source>The number of documents on shard 2 is computed. The query returns the value &lt;code&gt;6&lt;/code&gt; for the shard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ded22e16e26949d0a41162bebffb07408ae4b0" translate="yes" xml:space="preserve">
          <source>The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified paths removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdd31a108ade64161256b161e030637f32003ab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;interleave&lt;/code&gt; argument controls how the sequences will be merged:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e541b9a29bd1d84a6fc76c8fea0e5e43910a115" translate="yes" xml:space="preserve">
          <source>The optional arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7639f7478ac816294a9ebad71d1188e73a7903a1" translate="yes" xml:space="preserve">
          <source>The options can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c6dbe2e2ebb18556376a0edc038dbb53b9d23d" translate="yes" xml:space="preserve">
          <source>The order in which callbacks are called in the &lt;code&gt;EventMachine.run&lt;/code&gt; block is not guaranteed; in the sample output above, &lt;code&gt;[:array, [1, 2, 3]]&lt;/code&gt; might have printed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80bb124c4d721554e30b34eefc7bc2457ea017a" translate="yes" xml:space="preserve">
          <source>The order in which you chain ReQL commands can affect performance. For an example, imagine combining the previous two queries to return an ordered list of names of admin users. The &lt;code&gt;filter&lt;/code&gt; operation can be distributed across shards, but the &lt;code&gt;orderBy&lt;/code&gt; operation cannot. So this query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e126ffbf5f64034b05b6cc9873b4d6e9ac47fdda" translate="yes" xml:space="preserve">
          <source>The output format of a point changefeed is identical to a table changefeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52544879000b4070f7c1ec53be285dedc81e74e4" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;rethinkdb&lt;/code&gt; on startup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1df362b12f7161c6f9dfe2a13f7a5f148cea5f" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;changes&lt;/code&gt; query adheres to the following protocol:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adcae7e13d1ddedbed6b9d9a4afd7aa5562ddd7" translate="yes" xml:space="preserve">
          <source>The output will be in this format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edfaeb420dd2cad843364eade6bfcc6103ac8f2" translate="yes" xml:space="preserve">
          <source>The parameters are represented as values &lt;code&gt;&amp;lt;p1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p2&amp;gt;&lt;/code&gt;, etc.; the values are arbitrary, but must be unique per query to avoid collisions. Within the function body the values are referred to with the query term &lt;code&gt;VAR&lt;/code&gt;, defined as &lt;code&gt;10&lt;/code&gt; in &lt;code&gt;ql2.proto&lt;/code&gt;. So the value of parameter &lt;code&gt;1&lt;/code&gt; is retrieved with &lt;code&gt;[10, [1]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709d9935fbae98edda7024d5c1ad7e0e1365088d" translate="yes" xml:space="preserve">
          <source>The part of a secondary index key that&amp;rsquo;s used for fast lookups depends on the length of the primary key (which must be 127 bytes or less). The length of this part is 238&amp;minus;&lt;em&gt;PK&lt;/em&gt;, where &lt;em&gt;PK&lt;/em&gt; is the primary key length; if the primary key length is a 36-character GUID, for instance, this means that 202 characters in the secondary index will be significant. If a table has multiple entries where the first 238&amp;minus;&lt;em&gt;PK&lt;/em&gt; characters are identical, lookup performance will be sharply degraded, as RethinkDB will have to perform a linear search to find the correct entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85fd7e773e98525a057dee410b910ff3a9a2c35" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;{age:30}&lt;/code&gt; selects documents in the &lt;code&gt;users&lt;/code&gt; table with an &lt;code&gt;age&lt;/code&gt; field whose value is &lt;code&gt;30&lt;/code&gt;. Documents with an &lt;code&gt;age&lt;/code&gt; field set to any other value &lt;em&gt;or&lt;/em&gt; with no &lt;code&gt;age&lt;/code&gt; field present are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab592fecf2d641277abe2dc185bc11bf61ae10da" translate="yes" xml:space="preserve">
          <source>The primary index of a table can be used in any ReQL command that uses a secondary index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169a155070f84ee6fa928b40cd22b933ed483d0c" translate="yes" xml:space="preserve">
          <source>The primary key of each document is used by RethinkDB to place the document into an appropriate shard, and index it within that shard using a B-Tree data structure. Querying documents by primary key is extremely efficient, because the query can immediately be routed to the right shard and the document can be looked up in the B-Tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b50e856dfd19b785cfb1ae6817c08f87c06cd84" translate="yes" xml:space="preserve">
          <source>The primary way to administer a RethinkDB AMI is through the web UI. Advanced tasks can be performed with ReQL administration commands, using the Data Explorer interactively or scripting through any RethinkDB driver. Read &lt;a href=&quot;../administration-tools/index&quot;&gt;Administration tools&lt;/a&gt; for more details about scripting administration tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56486ac3e6a0cff408514c32848848251b792543" translate="yes" xml:space="preserve">
          <source>The programmer can also mark a read query to be ok with out-of-date data. In this mode, the query isn&amp;rsquo;t necessarily routed to the shard&amp;rsquo;s primary, but is likely to be routed to its closest replica. Out-of-date queries are likely to have lower latency and have stronger availability guarantees, but don&amp;rsquo;t necessarily return the latest version of the data to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f06ecd9db4c427f5c01e559845b1558afef7ab" translate="yes" xml:space="preserve">
          <source>The proxy node can do some query processing itself, reducing CPU load on database servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03aeb45cfefab1e6845737436e42c4ae921ad3f3" translate="yes" xml:space="preserve">
          <source>The proxy will send queries directly to the correct machines, reducing intracluster traffic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fbbe7526681119c7192d6053c30c4b1b91f8d9" translate="yes" xml:space="preserve">
          <source>The queries are efficiently transported to the server (via protocol buffers), and evaluated in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c9e234b8601cd8cefabab2a66ae0491cf2637c" translate="yes" xml:space="preserve">
          <source>The queries linking the data between the authors and their posts tend to be more complicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2e5494893b9508bc4d620ee6c352443bb70976" translate="yes" xml:space="preserve">
          <source>The query is sent to a server for execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d418228ef09faaa1d551875cd4899ad068afb495" translate="yes" xml:space="preserve">
          <source>The query types are defined in &lt;code&gt;ql2.proto&lt;/code&gt;. When a query is first sent to the server, it will be sent with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;START&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;). The options (sometimes referred to as &amp;ldquo;global optargs&amp;rdquo;) are options passed to the &lt;code&gt;run&lt;/code&gt; command itself; see the &lt;a href=&quot;https://rethinkdb.com/api/python/run&quot;&gt;run documentation&lt;/a&gt; for a complete list. (Commands sent to the server are snake_case, not camelCase.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ed5416cb9cfab926b34e7082c8a35489e21a3b" translate="yes" xml:space="preserve">
          <source>The query would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49093f36439602ded586cf0ea033178761fb4a63" translate="yes" xml:space="preserve">
          <source>The reduction function can be called on the results of two previous reductions because the &lt;code&gt;reduce&lt;/code&gt; command is distributed and parallelized across shards and CPU cores. A common mistaken when using the &lt;code&gt;reduce&lt;/code&gt; command is to suppose that the reduction is executed from left to right. Read the &lt;a href=&quot;../../../docs/map-reduce/index&quot;&gt;map-reduce in RethinkDB&lt;/a&gt; article to see an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaef544cfa01e61b0600b7381d8e28d53266a21" translate="yes" xml:space="preserve">
          <source>The reduction function can be called on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118a3751802c0d2d297d092376f59ad08a2671d1" translate="yes" xml:space="preserve">
          <source>The repubsub library has three classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c34de0c47665e2093b16d6e8c6cc2dafe60ac91" translate="yes" xml:space="preserve">
          <source>The result is an array containing one object for each table index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05697956ca1c2b261267f1b15b9b31d091e913b4" translate="yes" xml:space="preserve">
          <source>The result is an array of the three previously inserted documents, along with the generated &lt;code&gt;id&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b9393100a8f012abd44d66848a45d8492c36be" translate="yes" xml:space="preserve">
          <source>The result is an array where for each index, there will be an object like this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348e1c53bcf414975d4e88512994c35382165db3" translate="yes" xml:space="preserve">
          <source>The result is returned to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f25bd6541b97b8d992950d6d5f5fc101f8780b" translate="yes" xml:space="preserve">
          <source>The result look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f460bc9b91b03b6b76aa3c9f4052058e662787ad" translate="yes" xml:space="preserve">
          <source>The result of the &lt;code&gt;filter&lt;/code&gt; is sent from the shards to the query server and combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ef6ad9412c9be209139ccf22acdf6ab7306819" translate="yes" xml:space="preserve">
          <source>The result of this query is a stream of documents that includes every post written by every author in our database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4166859a2337b060599ebba8ff3782b1a2dac997" translate="yes" xml:space="preserve">
          <source>The result set of &lt;code&gt;eqJoin&lt;/code&gt; is a stream or array of objects. Each object in the returned set will be an object of the form &lt;code&gt;{left:&amp;lt;left-document&amp;gt;,right:&amp;lt;right-document&amp;gt;}&lt;/code&gt;, where the values of &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; will be the joined documents. Use the &lt;code&gt;&lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; command to merge the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; fields together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcacb4ffc1428a1e7537a1b530d77ec1be49f08c" translate="yes" xml:space="preserve">
          <source>The result will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e00afb986323ba904efea3a982c45371e5a241e" translate="yes" xml:space="preserve">
          <source>The result will be:</source>
          <target state="translated">El resultado será:</target>
        </trans-unit>
        <trans-unit id="7ee33cf492c99cfb381b58051e0acd3d936534d2" translate="yes" xml:space="preserve">
          <source>The result will have two fields &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2762176fdb80307d4542fb97295cbd05e50ef387" translate="yes" xml:space="preserve">
          <source>The result will now include a &lt;code&gt;changes&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580d6c3b8e7791206b60fdc3fbc9d93f7725d9aa" translate="yes" xml:space="preserve">
          <source>The results from &lt;code&gt;eqJoin&lt;/code&gt; are, by default, not ordered. The optional &lt;code&gt;ordered: true&lt;/code&gt; parameter will cause &lt;code&gt;eqJoin&lt;/code&gt; to order the output based on the left side input stream. (If there are multiple matches on the right side for a document on the left side, their order is not guaranteed even if &lt;code&gt;ordered&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.) Requiring ordered results can significantly slow down &lt;code&gt;eqJoin&lt;/code&gt;, and in many circumstances this ordering will not be required. (See the first example, in which ordered results are obtained by using &lt;code&gt;orderBy&lt;/code&gt; after &lt;code&gt;eqJoin&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9451368182bf51f88eb6d06ba8ad24bd4eea60c" translate="yes" xml:space="preserve">
          <source>The results of which might look something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb83e527b8a750c6dbf5105d1252ab390a7c46c" translate="yes" xml:space="preserve">
          <source>The results will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c631d950204e251a618f771c764d482aaa3e66" translate="yes" xml:space="preserve">
          <source>The return value is an object consisting of a single field, &lt;code&gt;ready&lt;/code&gt;. The value is an integer indicating the number of tables waited for. It will always be &lt;code&gt;1&lt;/code&gt; when &lt;code&gt;wait&lt;/code&gt; is called on a table, and the total number of tables when called on a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36faca8c0d371071eae4e811f7ff0155ed872784" translate="yes" xml:space="preserve">
          <source>The return value is an object providing information about the table&amp;rsquo;s shards, replicas and replica readiness states. For a more complete discussion of the object fields, read about the &lt;code&gt;table_status&lt;/code&gt; table in &lt;a href=&quot;../../../docs/system-tables/index#status-tables&quot;&gt;System tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8664182ddca74a0afbba7d649d8e66f1228d49e5" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;rebalance&lt;/code&gt; is an object with two fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84ffcb32dd5cb8354ded3859b763e4a6e87665d" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;reconfigure&lt;/code&gt; in emergency repair mode is the same as before. Examine the &lt;code&gt;config_changes&lt;/code&gt; field to see the old and new configuration settings for the table. As in the normal mode, if you specify &lt;code&gt;emergencyRepair&lt;/code&gt; with &lt;code&gt;dryRun: true&lt;/code&gt;, the table will not actually be reconfigured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02204eda362a94ed3590b8243708f0a55205484" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;reconfigure&lt;/code&gt; is an object with three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a42d23931413086f7413742cda1659b0e61d53c" translate="yes" xml:space="preserve">
          <source>The return value on success will be an object of the format &lt;code&gt;{renamed:1}&lt;/code&gt;, or &lt;code&gt;{renamed:0}&lt;/code&gt; if the old and new names are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37da5d84e981e0bb315cf13e3a7994a4aa1e0e0" translate="yes" xml:space="preserve">
          <source>The return value will be an array of two-item objects with the keys &lt;code&gt;dist&lt;/code&gt; and &lt;code&gt;doc&lt;/code&gt;, set to the distance between the specified point and the document (in the units specified with &lt;code&gt;unit&lt;/code&gt;, defaulting to meters) and the document itself, respectively. The array will be sorted by the values of &lt;code&gt;dist&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e759e1229ecea9bbd7516da914692287ca680f57" translate="yes" xml:space="preserve">
          <source>The return value, array or stream, will be the same type as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fec44479d0d10c75421c13f42fbeec52349083e" translate="yes" xml:space="preserve">
          <source>The returned sequence represents an intersection of the left-hand sequence and the right-hand sequence: each row of the left-hand sequence will be compared with each row of the right-hand sequence to find all pairs of rows which satisfy the predicate. Each matched pair of rows of both sequences are combined into a result row. In most cases, you will want to follow the join with &lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5cc5666ad8aa8ef95292cf77a92d9802649f93" translate="yes" xml:space="preserve">
          <source>The same is true for &lt;code&gt;single&lt;/code&gt; write mode and &lt;code&gt;soft&lt;/code&gt; durability mode. In normal operation these produce the same results as &lt;code&gt;majority&lt;/code&gt; and &lt;code&gt;hard&lt;/code&gt;, but in the event of a network or server failure, recent write operations that were run using these modes might be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c323e945ed7f27785d054b5f8f97e0e237757c" translate="yes" xml:space="preserve">
          <source>The second comment can be deleted by using &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;deleteAt&lt;/code&gt; together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202097410423eb99aa6ecf467119bc01a4f749f3" translate="yes" xml:space="preserve">
          <source>The second layer builds on the first and implements various automation mechanisms (e.g. automatically determining how to split shards, where to place copies of the data, automatically picking optimal primary replicas, etc.) This is the layer that compiles goals specified by the user into blueprints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114be4a5ece50c916bc47741e3a7d572735f0817" translate="yes" xml:space="preserve">
          <source>The server sends a null-terminated JSON response with a &lt;code&gt;&quot;success&quot;&lt;/code&gt; value of either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. On &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; will contain the &amp;ldquo;server-final-message&amp;rdquo; with the ServerSignature value. The client should compute a ServerSignature as specified in the RFC and verify the values are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb1a2704ae24a6e1303f7d8a6f62db3e8042205" translate="yes" xml:space="preserve">
          <source>The server sends a null-terminated JSON response with a &lt;code&gt;&quot;success&quot;&lt;/code&gt; value of either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. On &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;&quot;authentication&quot;&lt;/code&gt; will contain the &amp;ldquo;server-first-message&amp;rdquo; containing the iteration count (&lt;code&gt;i=&lt;/code&gt;), salt (&lt;code&gt;s=&lt;/code&gt;) and a concatenation of the client nonce with its own nonce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f585ded5cf8cfbbeb9c1f07d18ba8a91cefb4bcd" translate="yes" xml:space="preserve">
          <source>The server should return an object with zero errors and three inserted documents. We didn&amp;rsquo;t specify any primary keys (by default, each table uses the &lt;code&gt;id&lt;/code&gt; attribute for primary keys), so RethinkDB generated them for us. The generated keys are returned via the &lt;code&gt;generated_keys&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b6dd8a48a32954f5cb12942416a3c37cb847e5" translate="yes" xml:space="preserve">
          <source>The server will buffer up to &lt;code&gt;changefeedQueueSize&lt;/code&gt; elements (default 100,000). If the buffer limit is hit, early changes will be discarded, and the client will receive an object of the form &lt;code&gt;{error:&quot;Changefeed cache over array size limit, skipped X elements.&quot;}&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the number of elements skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecf2cc5495ccd280e597b73766b3eb352486850" translate="yes" xml:space="preserve">
          <source>The server will respond with a &lt;code&gt;null&lt;/code&gt;-terminated ASCII string describing the result of the handshake. If the string is &lt;code&gt;&quot;SUCCESS&quot;&lt;/code&gt;, the client may proceed to stage 2 and begin sending queries. Any other string indicates an error. The server will close the connection, and the driver should report this error to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01511cc2b5cf35c2db85f41272ca8094df7742c9" translate="yes" xml:space="preserve">
          <source>The short answer is no. The longer answer is that the clustering system is designed with three main principles in mind:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122b514199aca38b1e64f978120a76550d5f8df4" translate="yes" xml:space="preserve">
          <source>The short answer: you can&amp;rsquo;t. Use &lt;code&gt;Time&lt;/code&gt; objects instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9453d9082351eda5683faedd71864622103978" translate="yes" xml:space="preserve">
          <source>The simplest case is publishing a message with a string for a topic. This lends itself to using regexes for filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3e9cfc183b68887a93814d02362733592ff536" translate="yes" xml:space="preserve">
          <source>The size of the JSON-encoded response, as a 4-byte little-endian integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b63d6fbff9efcdad47927189bdc3fb30c297b0" translate="yes" xml:space="preserve">
          <source>The size of the JSON-serialized, UTF8-encoded query, as a 4-byte little-endian integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d388ed7a0a12386d59b691694b54aade3412a2" translate="yes" xml:space="preserve">
          <source>The size of the JSON-serialized, UTF8-encoded wrapped query, as a 4-byte little-endian integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9317ef5264324276eb78c8a1c900602db1085bdc" translate="yes" xml:space="preserve">
          <source>The slightly longer answer: there&amp;rsquo;s only one native &lt;code&gt;time&lt;/code&gt; data type in RethinkDB. When a language supports more than one kind of date/time object, we think it&amp;rsquo;s better to explicitly support one and only one of them in the client driver to avoid confusion. Otherwise, you might insert a &lt;code&gt;DateTime&lt;/code&gt; object and get a &lt;code&gt;Time&lt;/code&gt; object back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c32a92c25b9cee33b2f71bfb7a043ec405b0db" translate="yes" xml:space="preserve">
          <source>The smallest recommended instance type is &lt;code&gt;t2.small&lt;/code&gt;. However, &lt;code&gt;t2.micro&lt;/code&gt; works for simple tests. Follow these instructions to set up an AMI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9f9991bad143f14ee5c65aadc6ca48be3371b7" translate="yes" xml:space="preserve">
          <source>The solution is to add a &lt;code&gt;default&lt;/code&gt; to the &lt;code&gt;row&lt;/code&gt; command that always evaluates to something other than what you&amp;rsquo;re testing for, so it will return &lt;code&gt;false&lt;/code&gt; if the field doesn&amp;rsquo;t exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b36db4e47fc826603ad3fcc1fa591fc90ce4a59" translate="yes" xml:space="preserve">
          <source>The stats table is one of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; added in version 1.16 of RethinkDB. It provides statistics about server read/write throughput, client connections, and memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f5d2d101fc423bc118fd0bc79f68807e1dd7f3" translate="yes" xml:space="preserve">
          <source>The steps necessary for migrating data to current RethinkDB versions from previous ones depend on which version you&amp;rsquo;re migrating from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac277ab708b96fe6dc91bf3cd9a94437f7706c40" translate="yes" xml:space="preserve">
          <source>The storage engine is used in conjunction with a custom, B-Tree-aware caching engine which allows file sizes many orders of magnitude greater than the amount of available memory. RethinkDB can operate on a terabyte of data with about ten gigabytes of free RAM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8396b8f23f4763e864595f49d22dca2ab9cdfe5" translate="yes" xml:space="preserve">
          <source>The table created has six fields: an automatically generated primary key (&lt;code&gt;id&lt;/code&gt;), &lt;code&gt;rank&lt;/code&gt; (the IMDb rank, 1&amp;ndash;250), &lt;code&gt;rating&lt;/code&gt; (on a 1&amp;ndash;10 scale), &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;votes&lt;/code&gt;, and &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bee24f1a9444db1641572680398af8a1e9f5a02" translate="yes" xml:space="preserve">
          <source>The table must be configured to have three or more replicas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be6c448f38373c6d6cf5f4315ebc31efcf470d8" translate="yes" xml:space="preserve">
          <source>The table stores a maximum of 1000 messages per server. The changefeed will not deliver events for log entries when they are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c77aec7a677d740204db26286743a08de27d11" translate="yes" xml:space="preserve">
          <source>The table&amp;rsquo;s primary key is the &lt;code&gt;id&lt;/code&gt; field, and the keys are always arrays. The first element in the array is always a string indicating the object type being queried (i.e., &lt;code&gt;&quot;table&quot;&lt;/code&gt;, &lt;code&gt;&quot;server&quot;&lt;/code&gt;, etc.); for all objects but the cluster (which has only one document in the &lt;code&gt;stats&lt;/code&gt; table), the second element is the UUID of the object being queried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af84b2b5658b67fb03036b287f81c0ea4dc3b25" translate="yes" xml:space="preserve">
          <source>The table&amp;rsquo;s primary key is the &lt;code&gt;id&lt;/code&gt; field, and the keys are always arrays. The first element in the array is always a string indicating the type of job (e.g., &lt;code&gt;&quot;query&quot;&lt;/code&gt;, &lt;code&gt;&quot;disk_compaction&quot;&lt;/code&gt;, etc.); the second element is the UUID of the job. The type of job is also given in the &lt;code&gt;type&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cd12e06348bca2dd80568fa923b95cdcd2c00d" translate="yes" xml:space="preserve">
          <source>The third layers builds on the previous two and provides the user with command line and web-based tools to control the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d1631967f3c75d8b045a65b29120cdf51ee7e5" translate="yes" xml:space="preserve">
          <source>The token is a unique integer per connection. Keeping a counter per connection is a simple way to implement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466d055f41cbd22991febcdb9bc74645f65ffa5e" translate="yes" xml:space="preserve">
          <source>The top-level ReQL namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41045caf64cf3a3c5b73e63bfcd20c490c63cbe" translate="yes" xml:space="preserve">
          <source>The two most important aspects of the execution engine is that every query is completely parallelized across the cluster, and that queries are evaluated lazily. For instance, if the client requests only one document, RethinkDB will try to do just enough work to return this document, and will not process every shard in its entirety. This allows for large, complicated queries to execute in a very efficient way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5d5fdab91cb54e7ea1d05ea3a02e8164908734" translate="yes" xml:space="preserve">
          <source>The type of data &lt;code&gt;binary&lt;/code&gt; accepts depends on the client language. In JavaScript, it expects a &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;&lt;code&gt;Buffer&lt;/code&gt;. Using a &lt;code&gt;Buffer&lt;/code&gt; object within a query implies the use of &lt;code&gt;binary&lt;/code&gt; and the ReQL driver will automatically perform the coercion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf930814fe3eaac8532459ad55f2f6375a3b9e8" translate="yes" xml:space="preserve">
          <source>The type will be returned as a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbbb2de3860c2f10b7d816ad7baeb36022c1e11" translate="yes" xml:space="preserve">
          <source>The update command will go through every row and issue an API request to the GitHub URL for the given user, grab the relevant data, and update the user information with that data!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6834cea4439bc5555fa593bfe010a1c4b3e8728" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;iterations&lt;/code&gt; is a tradeoff between performance and security against brute force attacks. If connections are slow, consider lowering the number of iterations. Raising the number of iterations will make it harder to use a brute force attack, but will increase the CPU usage on clients while establishing a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f4326f44c3a4e70aa078a4d1ef6136197b6c59" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;connection&lt;/code&gt; is now initialized and we can run queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae352b30a0ea50d1839336defec725fd2135db8a" translate="yes" xml:space="preserve">
          <source>The various &lt;code&gt;on_*&lt;/code&gt; methods provide fallbacks for one another:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a205ac1eb38bfbb096a68973349763844c85250" translate="yes" xml:space="preserve">
          <source>The web UI only affects servers with the &lt;code&gt;default&lt;/code&gt; tag. If you remove the &lt;code&gt;default&lt;/code&gt; tag from a server or start it without that tag, it will not be used for tables configured through the web UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46633f21ecb5a76f2aebb7bf842e88c3bda5f0fe" translate="yes" xml:space="preserve">
          <source>The web UI requires &lt;code&gt;DataView&lt;/code&gt; and &lt;code&gt;Uint8Array&lt;/code&gt; JavaScript features to be supported by your browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c6c96199f3171355430a94a64a0f33d4759d04" translate="yes" xml:space="preserve">
          <source>The web UI supports creation and deletion of simple secondary indexes. In the table list, click on the table &lt;code&gt;users&lt;/code&gt;. You can manipulate indexes through the secondary index panel in the table view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835e5ac2124d7adb55a81eefe9733c24756faad2" translate="yes" xml:space="preserve">
          <source>The web administration UI always connects as if it were the &lt;code&gt;admin&lt;/code&gt; user, and skips the authentication process (i.e., the password is not used for this connection). While the web UI cannot be password-protected, you can limit the addresses it will accept connections on using the &lt;code&gt;--bind-http&lt;/code&gt; command line option. For more details on this, review &lt;a href=&quot;../security/index#securing-the-web-interface&quot;&gt;Secure your cluster&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23b44b5fa92781014237ab0b6407a8b0dec1e43" translate="yes" xml:space="preserve">
          <source>The web interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76bb2e6186f4296fdc2ce7806daa233e0129060" translate="yes" xml:space="preserve">
          <source>The wrapped query message (QueryType, serialized query and options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9dd02e0e3fec7b03eb0481b5b9083049419d70" translate="yes" xml:space="preserve">
          <source>The wrapped query message sent to the server is an array of three elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11526202a4159cbc549e507781f630a99b427910" translate="yes" xml:space="preserve">
          <source>The write acknowledgement setting for a table controls when the cluster acknowledges a write request as fulfilled. There are two possible settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a108c7b7e30ffc4e3685e98ee4b64f37fa6b38" translate="yes" xml:space="preserve">
          <source>Then as before, we map each post to the number &lt;code&gt;1&lt;/code&gt;. Commands after the &lt;code&gt;group&lt;/code&gt; command will be applied to each grouped set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373f73812762c7dc46fcca04a15315b885d341a8" translate="yes" xml:space="preserve">
          <source>Then make sure to move or delete the old RethinkDB data directory (&lt;code&gt;rethinkdb_data&lt;/code&gt; by default), since the new version will not be able to read the old file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85735e42e3c49d21bec18736a350e53f8ef64177" translate="yes" xml:space="preserve">
          <source>Then open your browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dc328e896c46407854b85c49918fd88856739d" translate="yes" xml:space="preserve">
          <source>Then start RethinkDB on the second machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf05db71c2c2b82022a19f45d7550290ae72ac9b" translate="yes" xml:space="preserve">
          <source>Then you can use that index in the &lt;code&gt;group&lt;/code&gt; function. This query would return the highest-value invoice for each day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777999d7676c59ebd630e109f25af12b28bcb677" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll need to create the RethinkDB data directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bfdd81f4b7a5981123dcfefee521c9149dc1b8" translate="yes" xml:space="preserve">
          <source>Then, copy the sample configuration file and use the &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt; documentation as a guide to customize it. (If you don&amp;rsquo;t have the sample &lt;code&gt;.conf&lt;/code&gt; file, you can download it &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fb4e7ad8aef52a7890cc49ca8ea407afa881ff" translate="yes" xml:space="preserve">
          <source>Then, enable the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bdef9943474cec9139375264eb2ce91de1c8ea" translate="yes" xml:space="preserve">
          <source>Then, generate a certificate, &lt;code&gt;cert.pem&lt;/code&gt;, from that key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ea72c2d37c2b1c37bd8b7ebe6736cad9811c2e" translate="yes" xml:space="preserve">
          <source>Then, import the RethinkDB driver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee598540a861f6fcc6ac7ae1337575b517fbede7" translate="yes" xml:space="preserve">
          <source>Then, restart the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11ea22ba5fd48e949819f8d6852dd06f4fcead4" translate="yes" xml:space="preserve">
          <source>Then, start RethinkDB with its default options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc97a274d3921d7624f9e93eda6738f45944317" translate="yes" xml:space="preserve">
          <source>Then, subscribers could listen for messages with any combination of tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ff0e7a5afdd6b7af8306c4a3ef8b9cdf8beb45" translate="yes" xml:space="preserve">
          <source>Then, there are two functions for retrieving files: one to retrieve a directory of a user&amp;rsquo;s uploaded files (&lt;code&gt;getUserFileIDs&lt;/code&gt;) and one to retrieve the actual file itself (&lt;code&gt;getFile&lt;/code&gt;). We don&amp;rsquo;t have to use &lt;code&gt;binary&lt;/code&gt; again here; the ReQL driver will return the proper data type for the &lt;code&gt;file&lt;/code&gt; field in our object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3296464e11028ef43904be0c240bf019c7b106a0" translate="yes" xml:space="preserve">
          <source>Then, to listen to messages, just provide a callback to the &lt;code&gt;.subscribe()&lt;/code&gt; method on the queue:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41f2ba74cf07c786c81edddddb4f3b2805474be" translate="yes" xml:space="preserve">
          <source>Then, we add the &lt;code&gt;tableCreate&lt;/code&gt; command to create the actual table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8c1b60653312846c75686a1276635b4ed825ca" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note about this query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23dd3c8cb9731a3fd1112c01afc115df9338b76" translate="yes" xml:space="preserve">
          <source>There are currently two states:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ea354dfdde1a79f1cc524cc5796f0426d4d12f" translate="yes" xml:space="preserve">
          <source>There are different publish-subscribe variations, so here we&amp;rsquo;ll describe the type using a central topic exchange. In this model, publishers connect to the central exchange and broadcast a message with a given topic. When subscribers connect, they notify the exchange about what kinds of messages they&amp;rsquo;re interested in. The exchange is then responsible for filtering messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6a261f4a90188d0d21308eb4518c242c3ee55a" translate="yes" xml:space="preserve">
          <source>There are four different permissions that can be granted to a user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c898affbf2b04845b19d3ef8037b56ffc7b0d6" translate="yes" xml:space="preserve">
          <source>There are four different permissions that can be granted to an account:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52482533c49305cf3ba538f7607584d817448f16" translate="yes" xml:space="preserve">
          <source>There are four kinds of jobs. The document schema is consistent between them, with job-specific data appearing in the &lt;code&gt;info&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886bf75dd348fa061a7ef813ce2b2a8d5e1d33e4" translate="yes" xml:space="preserve">
          <source>There are more options than what we&amp;rsquo;ve covered here. Run &lt;code&gt;rethinkdb help import&lt;/code&gt; for a full list of parameters and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb609b83989bc8962ca574f2727ce880206e9583" translate="yes" xml:space="preserve">
          <source>There are multiple subscriptions we could have set up that would receive this news:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38856d11ec968183c07a941fbd374de03ae8440" translate="yes" xml:space="preserve">
          <source>There are multiple ways to paginate results in RethinkDB. The most straightforward way is using &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; (similar to the way SQL&amp;rsquo;s &lt;code&gt;OFFSET&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; work), but that&amp;rsquo;s also the least efficient. It&amp;rsquo;s more efficient to use &lt;code&gt;slice&lt;/code&gt;, and even more efficient to use &lt;code&gt;between&lt;/code&gt; with a secondary index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d0701e5c4ffb4f00017a0efde2655267d62238" translate="yes" xml:space="preserve">
          <source>There are only three useful things you can do with a time: modify it, compare it to another time, or retrieve a portion of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d0f3c1694126ef828f7b9c9046e4cd07be046f" translate="yes" xml:space="preserve">
          <source>There are six optional arguments to &lt;code&gt;changes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbdf1c4e79d2810c4de37e0b75ee18a93c58c48" translate="yes" xml:space="preserve">
          <source>There are some limitations and caveats on chaining with changefeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e894103cc8b90a96e8dfc7a000aa22e6638f5e5" translate="yes" xml:space="preserve">
          <source>There are three major sources of memory use in RethinkDB:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6109eedf0d15d10946505da2e66b0a1f37da67ab" translate="yes" xml:space="preserve">
          <source>There are three primary commands for changing sharding and replication in ReQL. In addition, there are lower-level values that can be changed by manipulating &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c7501f6c75b26a129e17d9ac77b7c99d5158a9" translate="yes" xml:space="preserve">
          <source>There are two main methods RethinkDB provides for securing the cluster: TLS encryption for connections, and binding the ports the server uses to specific IP addresses to limit outside connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f665401e538bf2bfb28ca2c473bf66cdb74afaf6" translate="yes" xml:space="preserve">
          <source>There are two optional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b88a8c857155f74745bbba8371ea96ca0e6acb6" translate="yes" xml:space="preserve">
          <source>There are two ways a write operation can fail. If a write fails &lt;strong&gt;definitively,&lt;/strong&gt; no read will ever see it, even in the weaker read modes. If it fails &lt;strong&gt;indeterminately,&lt;/strong&gt; reads run in &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;outdated&lt;/code&gt; modes might see it, but when the network failure or crash that caused the problem is resolved the write might or might not be rolled back. In general, writes will fail indeterminately if they were running at the exact moment when the network or server issue first happened. Both of these failures will generate errors, and you can examine the error message to see whether the failure was definitive or indeterminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500288a5784a07d1f133215bca8ff9857c28adf3" translate="yes" xml:space="preserve">
          <source>There are two ways to model relationships between documents in RethinkDB:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d694c51ef35209adcd08ccf24e3a25d1dad7f109" translate="yes" xml:space="preserve">
          <source>There is little to no chance of security issues that arise from string injection attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f84b9a87e9e02fe596b7aede64a1239440fef1" translate="yes" xml:space="preserve">
          <source>There is no limitation on the number of posts, so this approach is more suitable for large amounts of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ebbd6e44279cc8790e0813ade721a8b8cfd992" translate="yes" xml:space="preserve">
          <source>There is no new syntax or new commands for complex queries. Once you understand the composition principle you can write new queries without learning anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539a61fd005fdf182e291c26a8ea7bd3dde87263" translate="yes" xml:space="preserve">
          <source>There is very comprehensive documentation of &lt;a href=&quot;http://nobrainer.io/docs/querying/&quot;&gt;NoBrainer&amp;rsquo;s query language&lt;/a&gt;, and its capabilities. NoBrainer&amp;rsquo;s language is built on top of ReQL, so if you know how to do something in ReQL, it should be straightforward to translate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2ddd5eb9c85f2c5d0c2cdef8e0ff78782ff6a5" translate="yes" xml:space="preserve">
          <source>There will be one issue per name in conflict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f37cec946cc13932c02805b52c0981c77aac29" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a separate article, &lt;a href=&quot;../table-joins/index&quot;&gt;Table joins in RethinkDB&lt;/a&gt;, with much more information about the multiple-table approach, including how to do the ReQL equivalents of inner, outer and cross joins. If you aren&amp;rsquo;t sure which schema to use, ask us on &lt;a href=&quot;http://stackoverflow.com/questions/ask&quot;&gt;Stack Overflow&lt;/a&gt; or join the &lt;code&gt;#rethinkdb&lt;/code&gt; IRC channel on &lt;a href=&quot;http://www.freenode.org/&quot;&gt;Freenode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b3e7dcb8b478414bde749509dfb707e256261" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also the &lt;a href=&quot;../../../api/javascript/during/index&quot;&gt;during&lt;/a&gt; command, which can check whether a time is in a particular range of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309e4b22505e880972a173dadd6710f8768bb239" translate="yes" xml:space="preserve">
          <source>These can be executed in the Data Explorer to try out RethinkDB&amp;rsquo;s geospatial support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c3ca286bcb01488ff4b1b7840f17718d02289a" translate="yes" xml:space="preserve">
          <source>These drivers have been updated to use the JSON driver protocol and at least RethinkDB 2.0 ReQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7390fee221f918304e3f706816a48b3e50189077" translate="yes" xml:space="preserve">
          <source>These drivers may not support all of RethinkDB 2.0's ReQL. However, if you wish to work with one of these languages, they may provide a good starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8830b150e94f8e0e7316103afc9f8c34e10bcc8" translate="yes" xml:space="preserve">
          <source>These entries represent queries issued by a specific client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d43bcbccbfa2aa21ba9dc356bde61777eca619" translate="yes" xml:space="preserve">
          <source>These evaluate to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd8a76f2353c0d03a4bba453817d515bf5b73aa" translate="yes" xml:space="preserve">
          <source>These examples use Python, but there&amp;rsquo;s equivalent functionality in Ruby, and any other scripting language with a RethinkDB driver updated for version 1.16 or later. Read the API documentation for more information on specific commands along with descriptions of their return values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb99d9acc915cf6020285f96009c8736af483471" translate="yes" xml:space="preserve">
          <source>These may be specified as startup options to &lt;code&gt;rethinkdb&lt;/code&gt; or in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1553d3431a9387915caf2bdf00cc7d8566a157" translate="yes" xml:space="preserve">
          <source>These options can be passed to the &lt;code&gt;rethinkdb&lt;/code&gt; server on the command line on startup. Many of these options can also be set in the configuration file; read &lt;a href=&quot;../config-file/index&quot;&gt;Configuration file options&lt;/a&gt; for a detailed list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defbae41e4dfdca69a6819f0816da9b76a0d3ef9" translate="yes" xml:space="preserve">
          <source>These tasks cannot be performed through the web interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98980261bf21bdc07626834d6ab2bd419f725534" translate="yes" xml:space="preserve">
          <source>These tasks construct secondary indexes in the background. The &lt;code&gt;progress&lt;/code&gt; field is a number between 0 and 1 indicating how far along the index construction task is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa32730d8deba25793d975fc9ca7bd1549b1e9a2" translate="yes" xml:space="preserve">
          <source>These will be numeric values, corresponding to the types in &lt;code&gt;ql2.proto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ea5ad3004c53aee816959f875903b54616b1e0" translate="yes" xml:space="preserve">
          <source>They allow clients to receive changes on a table, a single document, or even the results from a specific query as they happen. Nearly any ReQL query can be turned into a changefeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73949fe5d7b6f10bad43de1b54b4ab3f1ca5501" translate="yes" xml:space="preserve">
          <source>Third-party admin tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72113e83e7d2971aadeb613ad353fd5b1504f55" translate="yes" xml:space="preserve">
          <source>Third-party administration tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48032cfdd12c4e4801fb63f5130f887114e864cd" translate="yes" xml:space="preserve">
          <source>Third-party deployment tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd38f46529ac3ba0f37dc5014c00e6b8d7818624" translate="yes" xml:space="preserve">
          <source>Third-party libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe57a3efac3522bd52f774f6fbbf29694109b1a" translate="yes" xml:space="preserve">
          <source>Thirty-second quickstart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6904ea0735b3e37923321c865579d4c8314dc798" translate="yes" xml:space="preserve">
          <source>Thirty-second quickstart with RethinkDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3e4a37762f6f18b5db37b31335d439c9579506" translate="yes" xml:space="preserve">
          <source>This allows the &lt;code&gt;user_data&lt;/code&gt; field to contain any legal JSON value, while &lt;code&gt;name&lt;/code&gt; must still be a valid string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21998ea5369dd7c67fc23e4127c7487fa1fb7d8" translate="yes" xml:space="preserve">
          <source>This article will explain how to use repubsub, as well as describe how it&amp;rsquo;s implemented on top of changefeeds. If your application needs asynchronous broadcast notifications, this may be a good fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab295b90534ae1ba62c82bb793079aab7adfbee" translate="yes" xml:space="preserve">
          <source>This asserts that a topic exchange named &amp;ldquo;rethinkdb&amp;rdquo; exists, and that it&amp;rsquo;s set to be non-durable. If the exchange doesn&amp;rsquo;t exist, it&amp;rsquo;ll be created. If it does exist and has different properties, an exception will occur. Being non-durable means it won&amp;rsquo;t persist across RabbitMQ restarts (this is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b512cd11bbaeb824c3cf95df0ce1530e7c842ef2" translate="yes" xml:space="preserve">
          <source>This behavior is similar to any other safe database system. Below is a number of steps you can take to speed up insert performance in RethinkDB. Most of these guidelines will also apply to other database systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fcad98e3ebc81b03b92fbcbc2a0eb46d0e10a1" translate="yes" xml:space="preserve">
          <source>This behavior may change in the future. See &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/3992&quot;&gt;Github issue #3992&lt;/a&gt; to track the discussion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d333bc0db0fbff976dd318e4e97606ee1df8cf3" translate="yes" xml:space="preserve">
          <source>This can also be used to implement a check-and-set register. The following query will atomically check whether the &lt;code&gt;check&lt;/code&gt; field is equal to &lt;code&gt;old_value&lt;/code&gt; and change it to &lt;code&gt;new_value&lt;/code&gt; if so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136a95a3ef0f44b9424d790086bf559ff51f2e02" translate="yes" xml:space="preserve">
          <source>This can be accomplished with &lt;a href=&quot;../has_fields/index&quot;&gt;hasFields&lt;/a&gt; rather than &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b17f23ecff1b552fca7bbe53044ccbc70aab57b" translate="yes" xml:space="preserve">
          <source>This can be useful for diagnostic purposes, as well as for filing bug reports. The easiest way to do this is with ReQL administration commands. Any individual table can be examined with &lt;code&gt;r.db('rethinkdb').table(&amp;lt;tablename&amp;gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b50bdea1677bf9f3cc6cf1c8fe6526f3ee4558" translate="yes" xml:space="preserve">
          <source>This command will export all your data to a &lt;code&gt;tar.gz&lt;/code&gt; file named &lt;code&gt;rethinkdb_dump_&amp;lt;timestamp&amp;gt;.tar.gz&lt;/code&gt; (this may vary depending on your platform).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de554f35b082125ac3ff33b85f9132341445f97f" translate="yes" xml:space="preserve">
          <source>This document describes how to start RethinkDB from the command line in several configurations, from a single instance on one machine to multiple instances on multiple machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884a0999d1995cf78ebbbf8b08f0bb1e21cc671c" translate="yes" xml:space="preserve">
          <source>This document explains how to set up RethinkDB to run as a system service on supported operating systems, automatically launching on boot. For general instructions on starting RethinkDB, see &lt;a href=&quot;../start-a-server/index&quot;&gt;Start a RethinkDB server&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e112ab270acffb2e520b045d4086e0a4758065b" translate="yes" xml:space="preserve">
          <source>This example in the Data Explorer demonstrates sorting mixed types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60ec41c0244bc4bf79f1ba740c162008674fd3a" translate="yes" xml:space="preserve">
          <source>This example renames the field &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;userId&lt;/code&gt; when retrieving documents from the table &lt;code&gt;users&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d221d0dc27530f067ff5358c8a277dc571c798" translate="yes" xml:space="preserve">
          <source>This grant can only be given on a global level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badcd4b2105b2f046863005ef03daa5e931fc0ec" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;required&lt;/em&gt; if you&amp;rsquo;re upgrading from versions before 1.16; in those cases, you&amp;rsquo;ll need to upgrade to version 2.0.5 first. (You can download 2.0.5 and other older versions at RethinkDB&amp;rsquo;s &lt;a href=&quot;http://download.rethinkdb.com&quot;&gt;download archive&lt;/a&gt;). If you&amp;rsquo;re upgrading from RethinkDB version 1.16 or later, you can move to 2.2 or higher directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7690a03a80d488dfd784992d260be51267e9cf4b" translate="yes" xml:space="preserve">
          <source>This is a list of commands for updating data in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4094879dcd891fd3d505701f441b8c1edcdeb065" translate="yes" xml:space="preserve">
          <source>This is a list of queries for creating and dropping tables and databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b57e4c31062f253f74d06daaee496d81b79de2" translate="yes" xml:space="preserve">
          <source>This is a list of queries for deleting data from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db9a6dffeb553d1c76935d872aff66778ce1499" translate="yes" xml:space="preserve">
          <source>This is a list of queries for inserting data into a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cb2d221d2ccf3805e7df7390075b15277b1ff8" translate="yes" xml:space="preserve">
          <source>This is a list of queries for performing data aggregation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57255ff40e07d35053520b96ede5ad2090e4b64c" translate="yes" xml:space="preserve">
          <source>This is a list of queries for performing joins between multiple tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a4e6ed605b06ae73e9999bd507404c4f0f7b89" translate="yes" xml:space="preserve">
          <source>This is a list of queries for selecting data out of a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c950bfcba327ffdf5a9d2f1ecf0f9730e6174c18" translate="yes" xml:space="preserve">
          <source>This is a typical document schema for a server connected to the host server&amp;mdash;that is, the server the client&amp;rsquo;s connecting to when they query the &lt;code&gt;server_status&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495c13e74882e8a9b4dbc7d70144d347e8f36bb0" translate="yes" xml:space="preserve">
          <source>This is an ongoing task on each server, compacting RethinkDB&amp;rsquo;s storage space in the background. The &lt;code&gt;duration_sec&lt;/code&gt; field will always be &lt;code&gt;null&lt;/code&gt;, and there is no extra information metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744bd55da05671572fd0681cdeaea849a2d47d17" translate="yes" xml:space="preserve">
          <source>This is an overview of the system. For more details, consult the API documentation for individual geospatial commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df7168c66a6de94c891ac3113c4fa363d86ea95" translate="yes" xml:space="preserve">
          <source>This is analogous to using &lt;strong&gt;apply&lt;/strong&gt; in JavaScript. (However, note that &lt;code&gt;args&lt;/code&gt; evaluates all its arguments before passing them into the parent term, even if the parent term otherwise allows lazy evaluation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bc537c2149375b9bb8ea0948f4cb1e620a73ea" translate="yes" xml:space="preserve">
          <source>This is based on an example from &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/map-reduce-examples/&quot;&gt;MongoDB&lt;/a&gt;. Imagine a table of orders, with each document in the table structured like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55687884bd6d8ee24ca5745c354a05190fdf9d33" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;SELECT name, age FROM users&lt;/code&gt; in SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fda8e7fa70fba551ec9a5ec7d7a2bfb32969507" translate="yes" xml:space="preserve">
          <source>This is equivalent to using the &lt;code&gt;db&lt;/code&gt; command to specify the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bb2a306948c13f0ac184c0266661dd1de824fb" translate="yes" xml:space="preserve">
          <source>This is the alphabetical order of their type name as returned by the &lt;code&gt;typeOf()&lt;/code&gt; command. (Binary objects, geometry objects and times are &amp;ldquo;pseudotypes,&amp;rdquo; and return &lt;code&gt;PTYPE&amp;lt;BINARY&amp;gt;&lt;/code&gt;, &lt;code&gt;PTYPE&amp;lt;GEOMETRY&amp;gt;&lt;/code&gt; and &lt;code&gt;PTYPE&amp;lt;TIME&amp;gt;&lt;/code&gt;, respectively.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85848e3ad69e8a64cb4101d0c2be64cba8259e9" translate="yes" xml:space="preserve">
          <source>This is the equivalent of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3b90ecc4bbe7e0c4ecc1bb9f83e2950a385f51" translate="yes" xml:space="preserve">
          <source>This issue will appear at most once for each server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ccacb7783df82d612f51e347348c7a7db7d8ce" translate="yes" xml:space="preserve">
          <source>This issue will appear at most once for each table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747341dedcda6a869995253b4dbc7ba5a4018242" translate="yes" xml:space="preserve">
          <source>This issue will only appear in the &lt;code&gt;current_issues&lt;/code&gt; table once&amp;mdash;check the &lt;code&gt;info&lt;/code&gt; field for the tables and indexes it affects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebc8aa4d2f21780ed5017f2917975404a143a19" translate="yes" xml:space="preserve">
          <source>This just creates a new &lt;code&gt;Comment&lt;/code&gt; and associates it with the current &lt;code&gt;Article&lt;/code&gt;, rather than using the &lt;code&gt;build&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0461d690717cd0e6df210318899cac20104d6444" translate="yes" xml:space="preserve">
          <source>This may also be specified in the &lt;a href=&quot;http://rethinkdb.com/docs/cluster-on-startup/&quot;&gt;config file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2227c47b8b5a4f6a718999ee7cef861b0123236c" translate="yes" xml:space="preserve">
          <source>This may show you messages similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ab6e368431d7927f2a04b793ec9f220536744c" translate="yes" xml:space="preserve">
          <source>This means that every read will see every previous successful write, and no read will ever see a definitively failed write. (See note about definitively failed vs. indeterminate writes below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6116a33e3ee4eebf769e234ae37a3a28895b7e1c" translate="yes" xml:space="preserve">
          <source>This message indicates there are currently servers that cannot see every server in the cluster. This may cause table availability issues. It can be resolved by restoring full connectivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c5c2546366708a269614bdd6393853b3b25fd1" translate="yes" xml:space="preserve">
          <source>This message is a warning that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Paging&quot;&gt;page fault&lt;/a&gt; has occurred on a RethinkDB server and swap space is being used. Under Linux, this message will only appear if a RethinkDB process has started paging memory; under OS X, it will appear when &lt;em&gt;any&lt;/em&gt; process is paging. The Windows version of RethinkDB cannot detect when paging occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4bf8bcc88e1e23ef0b9f22469b4f4fd3e521e9" translate="yes" xml:space="preserve">
          <source>This mode is &lt;strong&gt;not as safe&lt;/strong&gt; as the default hard durability mode. If you&amp;rsquo;re writing using soft durability, a few seconds worth of data might be lost in case of power failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bae79890f9931111f7596cfde45eef26137817" translate="yes" xml:space="preserve">
          <source>This object is not a connection, but a cursor. To retrieve the results, you can call &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt; or &lt;code&gt;toArray&lt;/code&gt; on this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c94199271f50662dc6a036ee949c151bf137f34" translate="yes" xml:space="preserve">
          <source>This opens up the possibility of notifying client applications immediately when a change occurs in a table. For real-time applications, this push behavior is essential.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d171c060f2713ec6326d898756333da62b72f" translate="yes" xml:space="preserve">
          <source>This option creates a random password for that server&amp;rsquo;s &lt;code&gt;admin&lt;/code&gt; account. Once that server is synchronized with the cluster, the random password will be overwritten by the &lt;code&gt;admin&lt;/code&gt; password, preventing the exploit described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f047d23d5560efaf4283d83fa25adfdafd890c" translate="yes" xml:space="preserve">
          <source>This particular example simply returns the error message, so it isn&amp;rsquo;t very useful. But it would be possible to change the default value based on the specific error message thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713c8d0837ca1d19105b3bc382212f39c5333371" translate="yes" xml:space="preserve">
          <source>This query can be rewritten with the &lt;code&gt;each&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2d49b6729659af5432ba9236e6221e72845b7c" translate="yes" xml:space="preserve">
          <source>This query joins the &lt;code&gt;company_id&lt;/code&gt; of the employee table with the primary key of the company table. It returns a sequence of documents where each document contains two fields&amp;mdash;the employee information and the company information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612f4e9545d8bc014df5735c54ea0dbe678cc103" translate="yes" xml:space="preserve">
          <source>This query looks just like any other Python code you would normally write. Note that RethinkDB will execute this query on the server, and it doesn&amp;rsquo;t execute native Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd03b43a9a0662e67f4621af412284eaccf6bc7d" translate="yes" xml:space="preserve">
          <source>This query makes a call to GitHub and returns an array of JSON documents. RethinkDB natively operates on JSON, and what&amp;rsquo;s really convenient about &lt;code&gt;r.http&lt;/code&gt; is that its output is no different from any other query. You can use ReQL commands to perform operations on the output of &lt;code&gt;r.http&lt;/code&gt;, just like on a standard RethinkDB table!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ed5db3f58d8d8a4a7b6fd0156d19d27037316d" translate="yes" xml:space="preserve">
          <source>This query pulls out &lt;code&gt;new_val&lt;/code&gt; from the changefeed, and passes just the topic field from the new value down to the subscriber&amp;rsquo;s function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0504572bb7932c5f61e74e74594395b17470a17e" translate="yes" xml:space="preserve">
          <source>This query returns a cursor with one document&amp;mdash;the record for William Adama. The &lt;code&gt;filter&lt;/code&gt; command evaluates the provided condition for every row in the table, and returns only the relevant rows. Here&amp;rsquo;s the new commands we used to construct the condition above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6039c10afb25b25847b1d9787b22376a9ca0b91" translate="yes" xml:space="preserve">
          <source>This range includes all compound keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1dd23beb1a551a08393d66db64399a66756207" translate="yes" xml:space="preserve">
          <source>This report describes a recent effort that the RethinkDB team took to measure our database product, RethinkDB, under different workloads and in different clustering configurations. We seek to provide a general overview of RethinkDB&amp;rsquo;s performance metrics for a variety of workloads and potential use cases. In this report some of the questions we&amp;rsquo;ll address include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf7d676994679d10fb326236fe98c7d7b06ae4d" translate="yes" xml:space="preserve">
          <source>This table returns information about the status and availability of servers within a RethinkDB cluster. A single document is created for each server that connects to the cluster. If a server loses its connection to the cluster, it will be removed from the &lt;code&gt;server_status&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1ac2a2ea0485ae1d2247b1c116a2c2f4acddb6" translate="yes" xml:space="preserve">
          <source>This table shows problems that have been detected within the RethinkDB cluster. For details, read the &lt;a href=&quot;../system-issues/index&quot;&gt;System current issues table&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a58322ca86137de68e645fd6b69456345f7a1c8" translate="yes" xml:space="preserve">
          <source>This table stores information about table availability. There is one document per table (not counting system tables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700035ba5743d362d312992febe3cdb4c2d32eca" translate="yes" xml:space="preserve">
          <source>This table stores the log files of the cluster. One row is added to the table for each log message generated by &lt;em&gt;each&lt;/em&gt; server that&amp;rsquo;s connected to the cluster. A maximum of 1000 entries will be stored for each server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d26d8d3a47febb845fda047336c8a95a95ed440" translate="yes" xml:space="preserve">
          <source>This table stores the names of servers along with their &lt;em&gt;tags.&lt;/em&gt; Server tags organize servers into logical groups: servers could be tagged by usage (database, application, etc.), or by data center location (&amp;ldquo;us_west,&amp;rdquo; &amp;ldquo;us_east,&amp;rdquo; &amp;ldquo;london,&amp;rdquo; and so on). For more about server tags, read &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24cf5174181e90b5c8aafe2f4e0730440af51a1" translate="yes" xml:space="preserve">
          <source>This technology has limitations. While most operations allow you to write familiar code, you can&amp;rsquo;t use native language&amp;rsquo;s operations that have side effects (such as &lt;code&gt;print&lt;/code&gt;) or control blocks (such as &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;). Instead, you have to use alternative ReQL commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645d6109bf848329c6f455ed5bcf791cd5d05962" translate="yes" xml:space="preserve">
          <source>This will bind the HTTP and driver ports on all available interfaces, while the cluster port will only be bound on the loopback interface and &lt;code&gt;192.168.0.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be68a47df33c85c24d05535e067d92117013277" translate="yes" xml:space="preserve">
          <source>This will create the following model for comments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd972f0112cecc4dacfc67ccb7c54818c2630b9e" translate="yes" xml:space="preserve">
          <source>This will deserialize the change message, and pretty print it, along with a short description of what kind of change it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da799672b875bde58a2e844c9e9c6c18c1febf6" translate="yes" xml:space="preserve">
          <source>This will fail if the &lt;code&gt;notes&lt;/code&gt; field does not exist in the document. To perform this as an &amp;ldquo;upsert&amp;rdquo; (update or insert), use the &lt;a href=&quot;../default/index&quot;&gt;default&lt;/a&gt; command to ensure the field is initialized as an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dd0bebb08581cc718c11f050b164f60dd94ee5" translate="yes" xml:space="preserve">
          <source>This will override the &lt;code&gt;write: true&lt;/code&gt; permissions granted in the first example, but for this table only. Other tables in the &lt;code&gt;users&lt;/code&gt; database will inherit from the database permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a527a2cb141bcf68e0849631dd72491cfe72328" translate="yes" xml:space="preserve">
          <source>This will return a result set such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7974561d2e44ebf7a89c5cbd490575ef1cd12a6b" translate="yes" xml:space="preserve">
          <source>This will return a result similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b09d7bf2c5573de92a708dc2698ffe91aec72af" translate="yes" xml:space="preserve">
          <source>This workload exclusively performs read operations to retrieve individual documents from the database (YCSB workload C). In this workload, we use the same setup and data set as workload A above. Reads are also performed identically using 8 client servers with 128 concurrent connections per database server in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a00ec912a3416fb1d64828fe342fae918688b8" translate="yes" xml:space="preserve">
          <source>This would be serialized as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a2cb70deba71b04f648c048262a358d25fe6fc" translate="yes" xml:space="preserve">
          <source>This yields the following model in &lt;code&gt;app/models/article.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743fc98678fa343fac71fe0aeddfa10f7343ab41" translate="yes" xml:space="preserve">
          <source>Three or more &lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt; objects specifying the polygon&amp;rsquo;s vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8060e8f9e58e7d9250d13fd0e26c17e27cbffa62" translate="yes" xml:space="preserve">
          <source>Three or more &lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt; objects specifying the polygon&amp;rsquo;s vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6910e95d75d06c9f63a498f4fb6811b580000e6" translate="yes" xml:space="preserve">
          <source>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon&amp;rsquo;s vertices;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a9f47918b7ae16f0a1bea2bdc77c1f72578e59" translate="yes" xml:space="preserve">
          <source>Three settings control consistency and durability in RethinkDB: write acknowledgements and durability per table, and the query read mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c56bf83063cedaf9e42b20360c4e018d13f5da0" translate="yes" xml:space="preserve">
          <source>Throw a runtime error. If called with no arguments inside the second argument to &lt;code&gt;default&lt;/code&gt;, re-throw the current error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f35dd2cbf5aff9146859bee96606edf5a8c2413" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;on_val&lt;/code&gt; acts a &amp;ldquo;catch-all&amp;rdquo; for any data that is not handled by a more specific method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f35a7ab78049f5c0c80564c4ff28263d078b176" translate="yes" xml:space="preserve">
          <source>Thus, this is how our previous query is represented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ba744d18b1aed2282b3fb904045b5795d7ea41" translate="yes" xml:space="preserve">
          <source>Times are considered equal when their epoch (UTC) time values are equal, &lt;strong&gt;regardless of what time zone they&amp;rsquo;re in&lt;/strong&gt;. This is true for both comparisons and indexed operations. Times are compared in floating point with millisecond precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52eb4d78ab2e73e97cd1b17559ff603ae360f2a" translate="yes" xml:space="preserve">
          <source>Times are only compared with millisecond precision:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dd97c999febb3940f6b2aba7d4800126874dbd" translate="yes" xml:space="preserve">
          <source>Times are stored on the server as seconds since epoch (UTC) with millisecond precision plus a time zone. Currently the only available time zones are minute-precision time offsets from UTC, but we may add support for DST-aware time zones in the future. Time zones are strings as specified by ISO 8601. Note that the JavaScript driver strips time zone information due to limitations with the &lt;code&gt;Date&lt;/code&gt; object, although you can retrieve time zone data via the raw ReQL time object. (See below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15603cced6ce07ab8236ca3d48ec34b3d1fb78d0" translate="yes" xml:space="preserve">
          <source>Times may be used as the primary key for a table. Two times are considered equal if they have the same number of milliseconds since epoch (UTC), regardless of time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9188703b28defc378651fb275e83b6e977aec9" translate="yes" xml:space="preserve">
          <source>To add or overwrite a field, you can use the &lt;code&gt;update&lt;/code&gt; command. For instance, if you would like to add the field &lt;code&gt;author&lt;/code&gt; with the value &amp;ldquo;Michel&amp;rdquo; for all of the documents in the table &lt;code&gt;posts&lt;/code&gt;, you would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f483b4eeb3105dade2c40cdd94f2d80f3d322ddf" translate="yes" xml:space="preserve">
          <source>To buffer messages that the subscriber hasn&amp;rsquo;t consumed yet (this buffering is actually done in the database server)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb12f935e01637a6bb4fce40c83665d86ec98cc9" translate="yes" xml:space="preserve">
          <source>To change the password used to access the web UI, log in over SSH and run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb7113ba6e90ec2431b889d30d86a37bc3c8f95" translate="yes" xml:space="preserve">
          <source>To change these settings for a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b482256206d6e96941c63a16517331684e1bb28d" translate="yes" xml:space="preserve">
          <source>To close a cursor and stop receiving data from the stream or feed, send a query with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;STOP&lt;/code&gt; on the same connection with the same token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f3a65cc4d17eb7acb7f0b3fbfc5ccdee0afcbf" translate="yes" xml:space="preserve">
          <source>To configure our river, we need to create a type called &lt;code&gt;rethinkdb&lt;/code&gt; in the &lt;code&gt;_river&lt;/code&gt; index. Then we need to insert a document with the id &lt;code&gt;_meta&lt;/code&gt; into that type. Elasticsearch lets us create the document and the type in one go with a &lt;code&gt;PUT&lt;/code&gt; request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4e23954b31922795c6068d267ad1ca0a01598c" translate="yes" xml:space="preserve">
          <source>To connect to your instance over SSH, log in as the user &lt;code&gt;ubuntu&lt;/code&gt;. Use the private key you chose during the installation process and the public hostname of the instance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e84477f8fc3e9974738da45f0d2b5d08603632e" translate="yes" xml:space="preserve">
          <source>To create indexes on fields containing geometry objects, you simply use the standard &lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt; command, setting the &lt;code&gt;geo&lt;/code&gt; optional argument to &lt;code&gt;true&lt;/code&gt;. In JavaScript, this would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e383099f5bc1d4fa7940f0d449f15522b3fe3f50" translate="yes" xml:space="preserve">
          <source>To delete documents, select the documents you&amp;rsquo;d like to delete and use the &lt;code&gt;delete&lt;/code&gt; command. For example, let&amp;rsquo;s delete all posts with the author &amp;ldquo;Michel&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950e075f5afb40521c4507c103d6c51dff9e0c44" translate="yes" xml:space="preserve">
          <source>To efficiently perform concurrent query execution RethinkDB implements block-level multiversion concurrency control (MVCC). Whenever a write operation occurs while there is an ongoing read, RethinkDB takes a snapshot of the B-Tree for each relevant shard and temporarily maintains different versions of the blocks in order to execute read and write operations concurrently. From the perspective of the applications written on top of RethinkDB, the system is essentially lock-free&amp;mdash; you can run an hour-long analytics query on a live system without blocking any real-time reads or writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e4b8665d86162d6ee0499ed85653c5815afb9a" translate="yes" xml:space="preserve">
          <source>To export your data, use &lt;code&gt;rethinkdb dump&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cfc170270329b9655e380eece96e7561697147" translate="yes" xml:space="preserve">
          <source>To filter messages from the &lt;code&gt;Exchange&lt;/code&gt; by their &lt;code&gt;Topic&lt;/code&gt; (again, the server does this filtering)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e67fa6a41c04fe151b7928d066cb31b3fea779" translate="yes" xml:space="preserve">
          <source>To gain more precise control, write a class that inherits from &lt;code&gt;RethinkDB::Handler&lt;/code&gt; and override the event handling methods, then pass an instance of that class to &lt;code&gt;em_run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb986ccee4f137068ef2d566f7031789cf5f9b2" translate="yes" xml:space="preserve">
          <source>To get a specific document by ID, use &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c34afe39f590eccd4f302451652c9d5db80b83" translate="yes" xml:space="preserve">
          <source>To get all documents in a table, simply use the &lt;code&gt;table&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de40767187d55c844372554d913cfb17c30ac121" translate="yes" xml:space="preserve">
          <source>To get the list without duplicates, we can simply leave off &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d921b59c0f75df156b7448a630f25ee63f52bf" translate="yes" xml:space="preserve">
          <source>To group servers together in data centers, RethinkDB uses &lt;a href=&quot;#server-tags&quot;&gt;Server tags&lt;/a&gt;. Servers can be &amp;ldquo;tagged&amp;rdquo; with one or more group names on startup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8c09feafb751ddc9987a1f0769b5852c6515f6" translate="yes" xml:space="preserve">
          <source>To import repubsub and create a connection to an exchange:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f91e358f2a76534d12cdf146988fdd67d454fb" translate="yes" xml:space="preserve">
          <source>To import the file &lt;code&gt;users.json&lt;/code&gt; into the table &lt;code&gt;test.users&lt;/code&gt;, you would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366e39a918bb090b9526809d87179174180378d0" translate="yes" xml:space="preserve">
          <source>To import your data, use &lt;code&gt;rethinkdb restore&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d61c074af286c312f7bf0ff03e2e2f22db6204" translate="yes" xml:space="preserve">
          <source>To install the river, we&amp;rsquo;ll use the &lt;code&gt;plugin&lt;/code&gt; program that comes with Elasticsearch. On most platforms the program is named &lt;code&gt;plugin&lt;/code&gt;, but it&amp;rsquo;s sometimes called &lt;code&gt;elasticsearch-plugin&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ccf555ea9bbb6b48936787543c2086779b895e" translate="yes" xml:space="preserve">
          <source>To learn more, read about &lt;a href=&quot;../data-modeling/index&quot;&gt;data modeling in RethinkDB&lt;/a&gt;. For detailed information, take a look at the API documentation for the join commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6400029759c584c7be4cecaa7c0efc09877f5ffb" translate="yes" xml:space="preserve">
          <source>To perform automatic failover for a table, the following requirements must be met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ec4446461d0874e4e3707aaa37881f8f5364dd" translate="yes" xml:space="preserve">
          <source>To perform this, &lt;a href=&quot;../../../api/javascript/map/index&quot;&gt;map&lt;/a&gt; the first 25 movies into a new result set, adding a &lt;code&gt;count&lt;/code&gt; column, then &lt;a href=&quot;../../../api/javascript/reduce/index&quot;&gt;reduce&lt;/a&gt; each row of the mapped result set into a total for each field (&lt;code&gt;votes&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;). Then use &lt;a href=&quot;../../../api/javascript/do/index&quot;&gt;do&lt;/a&gt; to return a result set with the total votes and the average year, computed by dividing the sum of the years by their count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ff8e79026cbc6c21f05b4a17f993ecb68823c4" translate="yes" xml:space="preserve">
          <source>To publish a message to the exchange, create a topic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02d7fe7e4c8253f0f26c381301a861cc87b02c6" translate="yes" xml:space="preserve">
          <source>To put these into a new table, wrap that query with &lt;code&gt;insert&lt;/code&gt;. We&amp;rsquo;ll get new IDs generated automatically. This is also an example of using subqueries with ReQL: it&amp;rsquo;s easy to pass the results of one query into another. (One of ReQL&amp;rsquo;s other nice properties, which we&amp;rsquo;ve already seen, is command chaining: the input of one command is often the output of the command before it, similar to Unix piping.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeaa752cf337e6eca87d3929b1caf4bdac7d936a" translate="yes" xml:space="preserve">
          <source>To recap, sending a query to the server takes the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f19992e8bf6c08c0bc6c8efb74c60dd624f683" translate="yes" xml:space="preserve">
          <source>To retrieve all documents from the table &lt;code&gt;authors&lt;/code&gt;, we can simply run the query &lt;code&gt;r.table('authors')&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5f4a8eb4db8e8ab545aa8109b844e626df95c5" translate="yes" xml:space="preserve">
          <source>To retrieve documents by the value of a specific &lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;index&lt;/a&gt;, use &lt;code&gt;getAll&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb0258d07691baeefb2b68816f6b95a63456b10" translate="yes" xml:space="preserve">
          <source>To retrieve documents by the value of a specific field, use &lt;code&gt;filter&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3be06592db0d57713ac35e99b8a2f3ebf7ea85" translate="yes" xml:space="preserve">
          <source>To retrieve more data for the cursor, the driver should send a query with a &lt;code&gt;QueryType&lt;/code&gt; of &lt;code&gt;CONTINUE&lt;/code&gt;&lt;em&gt;on the same connection with the same token.&lt;/em&gt; As with other queries, this must be sent with the query token, the size of the query, and the query itself, simply &lt;code&gt;[2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594e344aa121fcd72ce614816e06800232731f0c" translate="yes" xml:space="preserve">
          <source>To return the status on a specific table, you can use the &lt;a href=&quot;https://rethinkdb.com/api/python/status&quot;&gt;status&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2544d8217895f115ddbfac5ce0427076385ac7" translate="yes" xml:space="preserve">
          <source>To run a proxy node, simply use the &lt;code&gt;proxy&lt;/code&gt; command line option on startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad487668453bf9cfe5420133fd62d266a6f19fb" translate="yes" xml:space="preserve">
          <source>To secure the cluster port, bind it to a specific IP address using the &lt;code&gt;--bind-cluster&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt; or the corresponding &lt;a href=&quot;../config-file/index&quot;&gt;configuration file option&lt;/a&gt;. Bind it to an IP address that is only accessible from within your local network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63abc14b3a39ce86c3ddac5a6216b4527d3e45bd" translate="yes" xml:space="preserve">
          <source>To secure your instance more tightly, we recommend that you perform the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6055491136bc9a98781e119b4821f59b1ddbf8" translate="yes" xml:space="preserve">
          <source>To solve this, specify the canonical address explicitly by using the &lt;code&gt;--canonical-address&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72bc2454fca47c2c0ab0269659e7cf093c4a3e6" translate="yes" xml:space="preserve">
          <source>To specify the permissions described above for Bob, you would execute the following ReQL commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb6d614ff621abfe0d6a335ad8d264a853e0544" translate="yes" xml:space="preserve">
          <source>To start RethinkDB, use &lt;code&gt;launchctl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dad878292712b7f558426d349ed880e4af7a108" translate="yes" xml:space="preserve">
          <source>To start a feed, open a new terminal and open a new RethinkDB connection. Then, run the following query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c11c7d34e1946579e4adcbac994f885acb15b11" translate="yes" xml:space="preserve">
          <source>To start the first RethinkDB instance, run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e5329f2856e1b30fd4b56a003d3db2b1ded724" translate="yes" xml:space="preserve">
          <source>To summarize all of the above in code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abbd29486099a34e7f40b5a4cddbe4b9cf10916" translate="yes" xml:space="preserve">
          <source>To understand the number of blocks used by a given data set, we must first distinguish two different modes of how a document can be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f9dad2d6cdcc7eacf224d626d3f9f091cf0c85" translate="yes" xml:space="preserve">
          <source>To use TLS connections between servers in the cluster:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b133e48e0d2e81b55fd18918ab28e9f2c17723e7" translate="yes" xml:space="preserve">
          <source>To use TLS connections with client drivers, specify:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0309d21645559c49035d639aedb79fa72fcc44" translate="yes" xml:space="preserve">
          <source>Todo list 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d571fb15bd5004e86b86da5d5fd2117fc978b4" translate="yes" xml:space="preserve">
          <source>Todo list 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec3b42250ed256519f611273d212bc6a9381982" translate="yes" xml:space="preserve">
          <source>Todo list in Backbone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b709f53299c781ad6cfe792699295be55f8b558" translate="yes" xml:space="preserve">
          <source>Todo list in Ember.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132a9e5e92ca13cc63a8881214eed35704933a05" translate="yes" xml:space="preserve">
          <source>Todo list with Angular and Express</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea627f8ee28519a09b024254b900d47c7456046" translate="yes" xml:space="preserve">
          <source>Tornado</source>
          <target state="translated">Tornado</target>
        </trans-unit>
        <trans-unit id="bd22935ae208296740b8d45826f737f20bba80b9" translate="yes" xml:space="preserve">
          <source>Transform each element of one or more sequences by applying a mapping function to them. If &lt;code&gt;map&lt;/code&gt; is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685ad7c59aeb1945ef867b52857539b62c1b81c" translate="yes" xml:space="preserve">
          <source>Transformations</source>
          <target state="translated">Transformations</target>
        </trans-unit>
        <trans-unit id="e2bc0fa55c343cd8ae1a2849f02567a3cbc8198c" translate="yes" xml:space="preserve">
          <source>Transformations are applied before changes are calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636b384f08584381fd6ed01329683547509c1d32" translate="yes" xml:space="preserve">
          <source>Transmitted</source>
          <target state="translated">Transmitted</target>
        </trans-unit>
        <trans-unit id="10756c57fa929e54d2fbfddbd05bebea58ee3730" translate="yes" xml:space="preserve">
          <source>Transmitted bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="a366c709db27bd15c4dfe9c2cf45f4723cc61549" translate="yes" xml:space="preserve">
          <source>Troubleshooting FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37980a44c517087463e129eca0240643f5c25de3" translate="yes" xml:space="preserve">
          <source>Troubleshooting common RethinkDB problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9beec1d3517a419360a6ad6fb2b7d53d1d3521a5" translate="yes" xml:space="preserve">
          <source>Trusted Docker build and instructions for deploying a RethinkDB cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe5413cca0e1a50a658098a3df98dcd9a0f8b94" translate="yes" xml:space="preserve">
          <source>Try out the repubsub demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ca01cb076f183ec2cf707e0ea65c9829a4435d" translate="yes" xml:space="preserve">
          <source>Trying to access &lt;code&gt;user1&lt;/code&gt; in ReQL will cause a nesting depth error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53664f1e2f0e6eb2b0c4bce0be6d2549297e9871" translate="yes" xml:space="preserve">
          <source>Turn a query into a changefeed, an infinite stream of objects representing changes to the query&amp;rsquo;s results as they occur. A changefeed may return changes to a table or an individual document (a &amp;ldquo;point&amp;rdquo; changefeed). Commands such as &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; may be used before the &lt;code&gt;changes&lt;/code&gt; command to transform or filter the output, and many commands that operate on sequences can be chained after &lt;code&gt;changes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b79156b13c38a60392112dbdf81a9d0a27fcf63" translate="yes" xml:space="preserve">
          <source>Twisted</source>
          <target state="translated">Twisted</target>
        </trans-unit>
        <trans-unit id="6446b1c8d77fa2cd9100709887d91f9bbff92d94" translate="yes" xml:space="preserve">
          <source>Two (latitude and longitude). Elevation is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa1c3c9ce84fdece536b61347999037fad2354c" translate="yes" xml:space="preserve">
          <source>Two events can be emitted, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b5482647136d8564d88c44675609c8ed6bdba4" translate="yes" xml:space="preserve">
          <source>Two or more &lt;a href=&quot;../point/index&quot;&gt;Point&lt;/a&gt; objects specifying the line&amp;rsquo;s vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1a580c0ac47b78a0704236a77398259abc1c6b" translate="yes" xml:space="preserve">
          <source>Two or more &lt;a href=&quot;point/index&quot;&gt;Point&lt;/a&gt; objects specifying the line&amp;rsquo;s vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdcc944716c5615a236baa9e2fc33d539a9105d" translate="yes" xml:space="preserve">
          <source>Two or more two-item arrays, specifying latitude and longitude numbers of the line&amp;rsquo;s vertices;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba1815eb2917359deeac9d397d5812c0b4b098a" translate="yes" xml:space="preserve">
          <source>Two settings for tables, write acknowledgements and write durability, cannot be set through either the web interface or the &lt;code&gt;reconfigure&lt;/code&gt; command. They must be set by modifying the &lt;code&gt;table_config&lt;/code&gt; table for individual tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7e8c4768d6d89677c79690c60c193c74ddcb13" translate="yes" xml:space="preserve">
          <source>Typically, this indicates that a JSON object with subdocuments is too deeply nested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c6c1812015585dc1092393a1f244f60d68c60a" translate="yes" xml:space="preserve">
          <source>UPDATE</source>
          <target state="translated">UPDATE</target>
        </trans-unit>
        <trans-unit id="364270ef7d2c546a581298054e0fe3b7afbbe2ac" translate="yes" xml:space="preserve">
          <source>US election analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c366cacdc2e4f2ca5e9f514afccf66ad1dfa3e" translate="yes" xml:space="preserve">
          <source>Ubuntu</source>
          <target state="translated">Ubuntu</target>
        </trans-unit>
        <trans-unit id="a6812ddf0974dcae6abd3a14c32af9a9161c78a9" translate="yes" xml:space="preserve">
          <source>Ubuntu 14.04</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa17002e5897edadc0072042bcef127cb475076" translate="yes" xml:space="preserve">
          <source>Ubuntu Server 12.04 LTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcd95479f339b189b1b91af8268bb81bf5e8c84" translate="yes" xml:space="preserve">
          <source>Under OS X, the system versions of Python and Ruby link to old versions of OpenSSL which do not support RethinkDB&amp;rsquo;s defaults for TLS. To use those drivers under OS X, the server must specify:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c637e03237e3de5320d47b31840684831855946" translate="yes" xml:space="preserve">
          <source>Under most circumstances, it is easier to manipulate the &lt;code&gt;permissions&lt;/code&gt; table by using the &lt;a href=&quot;../../api/javascript/grant/index&quot;&gt;grant&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4479e111cf225a452266879c7640ba144cf369" translate="yes" xml:space="preserve">
          <source>Under normal circumstances the system will prevent name collisions, but a collision could occur due to a race condition&amp;mdash;for instance, two clients trying to create tables with the same name on different servers simultaneously. This is a critical error, as a name collision on a table or database makes it impossible to read or write from that table or from tables in that database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b2aafb6bac3c1c7dac049c5af91f953afa5c68" translate="yes" xml:space="preserve">
          <source>Understanding RethinkDB memory requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e843f3bbb1a4125dd9a299d4d68c73b5d88c19db" translate="yes" xml:space="preserve">
          <source>Understanding how RethinkDB parallelizes queries can improve the performance of your applications&amp;mdash;sometimes significantly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce00816d4a4fa8b4c822b510eb10cc24e4557eab" translate="yes" xml:space="preserve">
          <source>Ungrouping</source>
          <target state="translated">Ungrouping</target>
        </trans-unit>
        <trans-unit id="f6eabc3d4ce5084fa933d9e3e40b1a62a4408c35" translate="yes" xml:space="preserve">
          <source>Ungrouping is useful e.g. for ordering grouped data, or for inserting grouped data into a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f217805f771e930edb43d7bf7bca94dcb4d337f2" translate="yes" xml:space="preserve">
          <source>Unlike a relational database, RethinkDB doesn&amp;rsquo;t enforce types, so NoBrainer&amp;rsquo;s type annotations on the field are validators that are run just before a document is saved to the database. If you don&amp;rsquo;t want to specify the type for a field, you can use the dummy type &lt;code&gt;object&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7e8952b13e5acdc4da0cec2cf13463f8f61d32" translate="yes" xml:space="preserve">
          <source>Unlike most NoSQL languages, you can use ReQL to build queries of arbitrary complexity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16226abce85df018665b20883ae7e6e4b1e5e95" translate="yes" xml:space="preserve">
          <source>Unlike the script that pushes data into Rabbit, to listen we need to create a &lt;em&gt;queue&lt;/em&gt;. Queues are basically mailboxes. You go to an exchange and sign up a queue for different topics from that exchange:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeb266883f342263bdad04080658322848b0916" translate="yes" xml:space="preserve">
          <source>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886df39f252cb5160cd6c67abc34816e8e74dfa5" translate="yes" xml:space="preserve">
          <source>Update documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889a7dd9a4b654d699b56a7a2065ecff1fbc5e44" translate="yes" xml:space="preserve">
          <source>Update returns an object that contains the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a05a6a04989744e749ac1bebf7d5f706cbd978" translate="yes" xml:space="preserve">
          <source>Updating nested fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d2ffec68a2c34115384d62c30e25333d59d0dc" translate="yes" xml:space="preserve">
          <source>Updating the state of a cluster is a surprisingly difficult problem in distributed systems. At any given point different (and potentially) conflicting configurations can be selected on different sides of a netsplit, different configurations can reach different nodes in the cluster at unpredictable times, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fd74f545706363781bafd9b9b926b0120f411a" translate="yes" xml:space="preserve">
          <source>Upgrade RethinkDB to a new version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbd9e0c3ed2ca872f91fb9e343b590ec4bc9217" translate="yes" xml:space="preserve">
          <source>Upgrading RethinkDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449ffb29ddf3b7b7d07cbf671ea03550c293da3a" translate="yes" xml:space="preserve">
          <source>Upgrading from RethinkDB versions 1.6 or earlier has &lt;em&gt;not&lt;/em&gt; been tested with RethinkDB 2.1 and higher. However, you should be able to use the deprecated &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/tree/02b4f29e1e7f15b3edffcb68bf015578ec5783ab/scripts/migration&quot;&gt;migration script&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ae55bbf764d16d108fec022f1450aafee2eec8" translate="yes" xml:space="preserve">
          <source>Uppercases a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659680921b67aa2e7a75e1c65027d91f2d9c5555" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://rethinkdb.com/api/python/index_status/&quot;&gt;index_status&lt;/a&gt; to retrieve a binary representation of the existing secondary index (whether it is simple, compound, multi, or based on an expression)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6475c00b0900ae4e541e3bb4fa60e368eea9b9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;default&lt;/code&gt; to ensure that if the &lt;code&gt;count&lt;/code&gt; field doesn&amp;rsquo;t already exist in the document, it&amp;rsquo;s added correctly, rather than letting &lt;code&gt;add&lt;/code&gt; throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f978d6b1722fef203b1e9a1db06789e0fa0612" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;polygon2&lt;/code&gt; to &amp;ldquo;punch out&amp;rdquo; a hole in &lt;code&gt;polygon1&lt;/code&gt;. &lt;code&gt;polygon2&lt;/code&gt; must be completely contained within &lt;code&gt;polygon1&lt;/code&gt; and must have no holes itself (it must not be the output of &lt;code&gt;polygonSub&lt;/code&gt; itself).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828e6b81f935582a6801e7c26c4473219515b699" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rethinkdb help &amp;lt;command&amp;gt;&lt;/code&gt; for a list of options. For more details, see &lt;a href=&quot;../backup/index&quot;&gt;Backing up your data&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3315d5d9a9dfeca99bc7ea7f478442bf8813cad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rethinkdb restore --help&lt;/code&gt; to see the complete list of options for importing your data. Again, for more details, see &lt;a href=&quot;../backup/index&quot;&gt;Backing up your data&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409daa75fdb8287421baffc1e21a8ba0992f8262" translate="yes" xml:space="preserve">
          <source>Use RethinkDB as session store with Express 4.x framework. Adapted from connect-rethinkdb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97f9ac1ace574e46eab8167a8178383052e916d" translate="yes" xml:space="preserve">
          <source>Use a multi index and a mapping function to speed getAll/contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5e2238f6aaa1ef54f93db2748355c0cdf7ae64" translate="yes" xml:space="preserve">
          <source>Use emergency repair mode to reconfigure the table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6c78a4797a701376427269a923c2b9c592d55a" translate="yes" xml:space="preserve">
          <source>Use simple indexes to efficiently retrieve and order documents by the value of a single field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03df0bd73e277e326500f2baf39c368061042c3e" translate="yes" xml:space="preserve">
          <source>Use the &amp;ldquo;Run&amp;rdquo; button or Shift+Enter to run the query. Now, let&amp;rsquo;s insert some JSON documents into the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2876eba68994921e941ce6ae6a34c2ef904b9ec2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;dump&lt;/code&gt; subcommand from the command line to create an archive of data from the cluster. This creates a &lt;strong&gt;tar.gz&lt;/strong&gt; file consisting of JSON documents and additional table metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb50f3d35b929185e801b877f1b0751aa34d4633" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;dump&lt;/code&gt; subcommand to create an archive of data from the cluster. This creates a &lt;strong&gt;tar.gz&lt;/strong&gt; file consisting of JSON documents and additional table metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbfd294af31d640ef3ad7e899852587e4a1d8cb" translate="yes" xml:space="preserve">
          <source>Use the commands &lt;code&gt;toEpochTime&lt;/code&gt; and &lt;code&gt;toISO8601&lt;/code&gt; to convert back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c8ead3ef495e865b02517c55d36f6c25cd0800" translate="yes" xml:space="preserve">
          <source>Use the intracluster port (&lt;code&gt;29015&lt;/code&gt; by default) to connect other nodes in the cluster to this node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868d9b6e254a3d9e47e5e1742d8635d9345c6ee1" translate="yes" xml:space="preserve">
          <source>Used to &amp;lsquo;zip&amp;rsquo; up the result of a join by merging the &amp;lsquo;right&amp;rsquo; fields into &amp;lsquo;left&amp;rsquo; fields of each member of the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272780d74a89aee8464a61459eba3e0fe818429a" translate="yes" xml:space="preserve">
          <source>Useful RethinkDB commands for exploring data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9b2237413a1771afb24378d67abbf13359869d" translate="yes" xml:space="preserve">
          <source>User account tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f2b181d0a5e79a147ea1cdf41457f58dbbb3c9" translate="yes" xml:space="preserve">
          <source>Users</source>
          <target state="translated">Users</target>
        </trans-unit>
        <trans-unit id="fe239a4bde23258d27dc84379a4d908f81c05df7" translate="yes" xml:space="preserve">
          <source>Users are created by &lt;a href=&quot;../../api/javascript/insert/index&quot;&gt;inserting&lt;/a&gt; documents into the &lt;code&gt;users&lt;/code&gt;&lt;a href=&quot;../system-tables/index&quot;&gt;system table&lt;/a&gt;. Every user has an account name in the &lt;code&gt;id&lt;/code&gt; field, and an optional password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0856eda2a019e0b5196369667b10a81678fe41e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;update&lt;/code&gt; to modify the &lt;code&gt;data&lt;/code&gt; field will normally merge the nested documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb923ef24fa89505954667a416ebf08a8cef2954" translate="yes" xml:space="preserve">
          <source>Using GeoJSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee0b45d99570088519a4ae6ac622316e2428e8c" translate="yes" xml:space="preserve">
          <source>Using JSON data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5193e9d892132533665ae3d20fb4b221c445f6b7" translate="yes" xml:space="preserve">
          <source>Using RethinkDB with Ruby on Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809b510f6074ebbf8930f56b4cd49a32dc1aa406" translate="yes" xml:space="preserve">
          <source>Using RethinkDB::Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87acab6bd223d4993d03d1b63847d6484fd3d19" translate="yes" xml:space="preserve">
          <source>Using SSH tunneling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ecfece0838a81fdbbc9c35122066e4be35b348" translate="yes" xml:space="preserve">
          <source>Using SSL with RethinkDB requires proxy software on the server, such as &lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt;, &lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt; or an SSL tunnel. RethinkDB will encrypt traffic and verify the CA certification to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;man-in-the-middle&lt;/a&gt; attacks. Consult your proxy&amp;rsquo;s documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686d16463ab8470f47e9807e2c221cf7aa81ac78" translate="yes" xml:space="preserve">
          <source>Using TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a44d475de27bf8ecc5a4143d17cb29cc4787e26" translate="yes" xml:space="preserve">
          <source>Using a REPL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d512428ae050cca4f30e03acaad3f9aabd9be07" translate="yes" xml:space="preserve">
          <source>Using a RethinkDB configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81aacd9868a292e3578d159e7ed1f613ef3b61d" translate="yes" xml:space="preserve">
          <source>Using a function, you can also group by date on a ReQL &lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;date field&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9ec5caa02a4c07b8f2e3c0442f8ca0f1179a72" translate="yes" xml:space="preserve">
          <source>Using a similar technique to the last recipe, we can use &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; to maintain a document&amp;rsquo;s &lt;code&gt;updated_at&lt;/code&gt; and &lt;code&gt;created_at&lt;/code&gt; fields by either inserting a new document or updating one depending on whether a document with a specified ID exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faf0ceb9a6f33df301c462b697d88b9951a190c" translate="yes" xml:space="preserve">
          <source>Using dynamic keys in ReQL commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237f42b300a70240761ddbdf32a86cce7ecb363c" translate="yes" xml:space="preserve">
          <source>Using embedded arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a6a1a45f47d0216453781940f9099c52dec943" translate="yes" xml:space="preserve">
          <source>Using form-encoded data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bce4759a1cb93217026e515d5d3cc2b3774b9a" translate="yes" xml:space="preserve">
          <source>Using indexes: &lt;a href=&quot;../../../api/javascript/get_all/index&quot;&gt;getAll&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/between/index&quot;&gt;between&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/eq_join/index&quot;&gt;eqJoin&lt;/a&gt; and &lt;a href=&quot;../../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c903deddf1788950d2da6460df95c1c59112ce" translate="yes" xml:space="preserve">
          <source>Using multi indexes and arbitrary expressions together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5fe0f0b3e1de4f6909c894b998f50d44a3a243" translate="yes" xml:space="preserve">
          <source>Using one Handler with multiple queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d9b622d71e22f8696e9db216e36591b73d21e4" translate="yes" xml:space="preserve">
          <source>Using primary keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b170d9f14648ef984442f6e5e63898213d065c9" translate="yes" xml:space="preserve">
          <source>Using repubsub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cec89010b614aeb7357b2820307b3ae5393bd2f" translate="yes" xml:space="preserve">
          <source>Using secondary indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eca378782b329a4026fe26cdc21aac26acd3ebe" translate="yes" xml:space="preserve">
          <source>Using secondary indexes in RethinkDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d838889946a0fac40a5de13ea1a2f43bfbcbdc" translate="yes" xml:space="preserve">
          <source>Using subqueries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729c7823bfb90d234bb84656173de344c20bea56" translate="yes" xml:space="preserve">
          <source>Using subqueries to return additional fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a6ea12e91af64b785f205dfed680f0218707a4" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;emergency_repair&lt;/code&gt; option on a table will invalidate all the guarantees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5722bcd22448ac79f109bb697058f2d47ce09231" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;multi&lt;/code&gt; option we can group data by match A, B or C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705d0b4e12cf0053e511acba4552bde444eb041e" translate="yes" xml:space="preserve">
          <source>Using the RethinkDB authentication system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="7b90cb504c43b2a2a9b990be53f6df122a25af9b" translate="yes" xml:space="preserve">
          <source>Values and predicates may be mixed freely in the argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926d89b38c0fd681c3af2ba8930446b8e5f7318c" translate="yes" xml:space="preserve">
          <source>Values in CSV imports will always be imported as strings. If you want to convert those fields after import to the &lt;code&gt;number&lt;/code&gt; data type, run an &lt;code&gt;update&lt;/code&gt; query that does the conversion. An example runnable in the Data Explorer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15016d3c7c10ecd1c9597a5f34d435ed31333cb0" translate="yes" xml:space="preserve">
          <source>Venturing into the river</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bcbe1a75a85e68f5324b0bd200d85161e476dd" translate="yes" xml:space="preserve">
          <source>Version V1_0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc78243db15552d9f29c3a8e82edc038370e606" translate="yes" xml:space="preserve">
          <source>Version migration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dccbe2184e054027478456d942eb37b74c436b7" translate="yes" xml:space="preserve">
          <source>Versions V0_3 and V0_4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee85caf439b8d9ca0edb97fdd328b72c5f720aa" translate="yes" xml:space="preserve">
          <source>Versions of RethinkDB prior to 2.3 allowed &lt;code&gt;wait&lt;/code&gt; to be called without a table or database specified. This is no longer valid; &lt;code&gt;wait&lt;/code&gt; requires explicit selection of a database or table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8348559cdda119c179112149d26acad5abced44c" translate="yes" xml:space="preserve">
          <source>Via a SOCKS proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3869ea92f6e4c30ec5a50a43581bcd31fb6f5b45" translate="yes" xml:space="preserve">
          <source>Via a reverse proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975a1001ef5a5de638f5bda5e81a0529a895c359" translate="yes" xml:space="preserve">
          <source>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The &lt;code&gt;wait&lt;/code&gt; command blocks until the given table (or database) is fully up to date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261d399f3036a71cf61c5c84dd87512ac2888ee9" translate="yes" xml:space="preserve">
          <source>Wait for the instance to initialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c1959b0ecb2f56be0b9936d450f3112ec53c98" translate="yes" xml:space="preserve">
          <source>Wait for the specified indexes on this table to be ready, or for all indexes on this table to be ready if no indexes are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ca0cead14e5f62674072d67d6d08760af08beb" translate="yes" xml:space="preserve">
          <source>We also let you slice the time into the date and the current time of day (a time and a duration, respectively):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7776b91d96b28a68efde88ac27af064591f79f60" translate="yes" xml:space="preserve">
          <source>We also recently contracted Kyle Kingsbury, known to the Internet as &lt;a href=&quot;https://twitter.com/aphyr&quot;&gt;@aphyr&lt;/a&gt;, as an independent researcher to evaluate RethinkDB. He wrote &lt;a href=&quot;https://aphyr.com/tags/RethinkDB&quot;&gt;a pair of blog posts&lt;/a&gt; on how he tested and confirmed RethinkDB clustering and consistency guarantees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d342d6dbf43f23b7c55cc56df79901ba303f19e" translate="yes" xml:space="preserve">
          <source>We always welcome suggestions on how to improve our documentation, or specific ReQL questions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7018091e8774b88423f84671a497d40e60360f" translate="yes" xml:space="preserve">
          <source>We can also efficiently retrieve documents by their primary key using the &lt;code&gt;get&lt;/code&gt; command. We can use one of the ids generated in the previous example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64de53529b50a2fdc1bd84d07e544b9a92f93299" translate="yes" xml:space="preserve">
          <source>We can also specify more in-depth validation on fields. We can modify the &lt;code&gt;Article&lt;/code&gt; model in a few ways to ensure the data has the properties we expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63294a56bafc0eef492fd77b1e4ed5da84b133b" translate="yes" xml:space="preserve">
          <source>We can chain the &lt;code&gt;zip&lt;/code&gt; command at the end of the query to merge the two fields into a single document. For example, the following query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f934be941448b5e9e200ea54513a21677bf61d" translate="yes" xml:space="preserve">
          <source>We can create a secondary index on the &lt;code&gt;company&lt;/code&gt; field of the &lt;code&gt;companies&lt;/code&gt; table, and perform our query by taking advantage of the secondary index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421ccb395f490935893503fb8285f8416b351dd1" translate="yes" xml:space="preserve">
          <source>We can join the two tables as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238cbcbb68c7b2e609fdf95cbb4c9da849d12481" translate="yes" xml:space="preserve">
          <source>We can model the relationship between authors and posts by using embedded arrays as follows. Consider this example document in the table &lt;code&gt;authors&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64689a843a25c01b96b2b56aefbb1e9ab53997e6" translate="yes" xml:space="preserve">
          <source>We can now filter based on these times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b638b442b219f731f46422f2827d1aa6301062" translate="yes" xml:space="preserve">
          <source>We can now sort the stargazers by the number of their followers!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67d818e11b259fa9a1add1ae55aba6b19cb3598" translate="yes" xml:space="preserve">
          <source>We can rewrite the previous query with &lt;code&gt;r.branch&lt;/code&gt; too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d13a4948443772b564d9f81fd28607546884e82" translate="yes" xml:space="preserve">
          <source>We can schedule it on the Tornado IO loop with this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a3bc4b8cc860b147fafd28edacfcceffded305" translate="yes" xml:space="preserve">
          <source>We can schedule it on the Twisted &lt;code&gt;reactor&lt;/code&gt; with this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937a9712d9866bbe0eeb7d1ad3b0b2515f02e6ff" translate="yes" xml:space="preserve">
          <source>We can use the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749984b3d67df427b6d7089de846645a0b19255b" translate="yes" xml:space="preserve">
          <source>We compose the query on the client and call &lt;code&gt;run&lt;/code&gt; only once. Remember to call &lt;code&gt;run&lt;/code&gt; only once on the complex query when you&amp;rsquo;re ready for it to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc2949011d5056e98a8b39f265e81ae5fa84b31" translate="yes" xml:space="preserve">
          <source>We define &lt;code&gt;r.monday...r.sunday&lt;/code&gt; and &lt;code&gt;r.january...r.december&lt;/code&gt; for convenience:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745b28655c36626ee40e3202ef17f3821beb6747" translate="yes" xml:space="preserve">
          <source>We felt that performing automatic maintenance operations on the cluster (such as adding shards) is a higher-level component, and that it&amp;rsquo;s crucial to have a really good implementation of the lower-level components done first. As a result, the clustering system is organized into three layers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c0c11e81d4866e9926eff039590fc5082fe2af" translate="yes" xml:space="preserve">
          <source>We first tested this workload in the &lt;a href=&quot;https://www.rethinkdb.com/api/javascript/run/&quot;&gt;default configuration for RethinkDB which forbids stale reads&lt;/a&gt;. In this configuration, RethinkDB is able to perform 134.7K QPS on a single server. While the overhead of network communication between the servers becomes visible when increasing the cluster size from one to two servers, adding further servers to the cluster demonstrates the near-linear scalability of RethinkDB, up to over 500K QPS on 16 servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bfcc94969b31f058be9abcc163977af2f5f363" translate="yes" xml:space="preserve">
          <source>We found that in a mixed read/write workload, RethinkDB with two servers was able to perform nearly 16K queries per second (QPS) and scaled to almost 120K QPS while in a 16-node cluster. Under a read only workload and synchronous read settings, RethinkDB was able to scale from about 150K QPS on a single node up to over 550K QPS on 16 nodes. Under the same workload, in an asynchronous &amp;ldquo;outdated read&amp;rdquo; setting, RethinkDB went from 150K QPS on one server to 1.3M in a 16-node cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbff981f6fd069bd5c8d8cf7eb708cfb69dba1bf" translate="yes" xml:space="preserve">
          <source>We pass the &lt;code&gt;lastName&lt;/code&gt; saved from the previous set to &lt;code&gt;between&lt;/code&gt; as the start index. For the end index, we pass &lt;code&gt;null&lt;/code&gt; to return documents from the start index to the table&amp;rsquo;s end. The &lt;code&gt;leftBound&lt;/code&gt; parameter tells &lt;code&gt;between&lt;/code&gt; not to include the first record, since it was already returned as part of the previous page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4ab3e8535ad86d1930d6966ac3b697d68d7c2d" translate="yes" xml:space="preserve">
          <source>We run one query at a time. Results show the average over five runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfdf1121b09e1f9602550a8e25484415b81e4d7" translate="yes" xml:space="preserve">
          <source>We run this query five times for every cluster size and then calculate the average runtime. The results table below shows these averages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9e5f655eaf28e2126ba52b421344bdf3a5d0a2" translate="yes" xml:space="preserve">
          <source>We should get back an object that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196493c218ffa561ad6e0835430dcfa5bcdcb59b" translate="yes" xml:space="preserve">
          <source>We use Github for issue tracking: &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues&lt;/a&gt;. If you want to report a suspected bug in RethinkDB, open an issue there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2572dfb8bb2188aed94b74fdd625ca4d557e9b76" translate="yes" xml:space="preserve">
          <source>We use the ISO 8601 definition of a week, which starts with Monday, represented as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665c5f87426678ac0c4134325d4f37ee25bde4ef" translate="yes" xml:space="preserve">
          <source>We used a port of YCSB based on our official Java driver and intend to submit a pull request for it in the near future. &lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;Our fork is available for review here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dd2c5b2e52082a2c22b308916628b31080863f" translate="yes" xml:space="preserve">
          <source>We wanted to provide a reasonably comprehensive RethinkDB test that covers a variety of different workloads. We chose to use the YCSB testing framework as a reliable and community-approved means of conducting rigorous testing on our database. We saw that all of the tests resulted in near-linear scalability as we moved from a single RethinkDB instance to a 16 node cluster. Although most of the tests resulted in performance metrics that suggest horizontal scalability, we know that there are plenty of improvements to make as the database evolves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96b69538b15b08a373ab863833264fbb5d412fa" translate="yes" xml:space="preserve">
          <source>We were fortunate enough to receive free credits from Rackspace to perform the majority of these tests and are very grateful for their contributions to open source software. All of &lt;a href=&quot;https://www.rackspace.com/cloud/servers/onmetal&quot;&gt;Rackspace&amp;rsquo;s OnMetal offerings can be found here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164561a49c5ec1d8b8043aa717cadb49a0004f16" translate="yes" xml:space="preserve">
          <source>We won&amp;rsquo;t need a &lt;strong&gt;group&lt;/strong&gt; step for this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adda084a6c0ad257b70d2264a1e0d1c00f337fa" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;d love to answer any questions you have about these tests. Come join us at &lt;a href=&quot;http://slack.rethinkdb.com&quot;&gt;http://slack.rethinkdb.com&lt;/a&gt; and feel free to ask more specific questions we don&amp;rsquo;t answer here by pinging @danielmewes or @dalanmiller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cf0d58afd9a9633a947183c3b149f711f93f0f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll attempt to answer these questions by using workloads from the YCSB benchmark suite. You can &lt;a href=&quot;https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark&quot;&gt;learn more about YCSB here&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rethinkdb/ycsb&quot;&gt;review the source code here&lt;/a&gt;. Expanding beyond the YCSB workloads we selected, we created an additional test which investigates scalability for analytic workloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353d7cec36aac636b04e7dd7fdc90d2f15428252" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll go over the other two sources in more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85193fc8eeecb00e53dca414ff426e4d326bd9f6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll sign an NDA if necessary, and can set up an FTP server for you to transfer the file to if it&amp;rsquo;s large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66df9144e5385962d5f6afd0a4d7f84e1cf0c9a6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re exploring best practices to determine whether it&amp;rsquo;s possible to build a really good general purpose automation layer that controls the cluster by automatically enforcing user-specified rules (such as resharding the system when the shard balance drops below a certain threshold).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a538ffd70620351939ce46ac034c5da4165359af" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re working on an easier syntax for performing multiple aggregations after &lt;code&gt;group&lt;/code&gt; commands. Follow &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/1725&quot;&gt;issue 1725&lt;/a&gt; to track progress on this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8c4b29bb88f8bd8bcd0cf73f362e495df9a83a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve just inserted two rows into the &lt;code&gt;tv_shows&lt;/code&gt; table. Let&amp;rsquo;s verify the number of rows inserted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0701e0f428cf7608aac0acb0258957e688e4a72b" translate="yes" xml:space="preserve">
          <source>Web frontend written in PHP to create/rename/update/delete RethinkDB databases/tables/docs and run ReQL queries in PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6ea1d18d178d755c66b826316925c783a2b7a2" translate="yes" xml:space="preserve">
          <source>Web options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc84915ab33bd5e1a1327bf7c2b3bb4fd9f8f422" translate="yes" xml:space="preserve">
          <source>WebGL</source>
          <target state="translated">WebGL</target>
        </trans-unit>
        <trans-unit id="38dbec004299870c0658d95152cb99afac826447" translate="yes" xml:space="preserve">
          <source>Wercker box for RethinkDB, by &lt;a href=&quot;https://github.com/mies&quot;&gt;@mies&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04042d6ae7f7ec89f3280cedaa0c0eacdb0730a2" translate="yes" xml:space="preserve">
          <source>What CAP theorem tradeoffs are made in RethinkDB?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef0a4b65de6f3a94060b4fcb91fcc42ad42201d" translate="yes" xml:space="preserve">
          <source>What Elasticsearch does</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d3e613df197c31b8cbb198ef82019567e7ac08" translate="yes" xml:space="preserve">
          <source>What are availability and performance impacts of sharding and replication?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c26d1ad1ec301943108eaa27899279ef7ac1fd" translate="yes" xml:space="preserve">
          <source>What does &amp;lsquo;received invalid clustering header&amp;rsquo; mean?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9c3f058de7e47106c818dfd4d4338f9cdd8f8d" translate="yes" xml:space="preserve">
          <source>What does it mean to be inefficient here? When operating on grouped data rather than a grouped stream, &lt;em&gt;all&lt;/em&gt; of the data has to be available on the node processing the query. This means that the operation will only use one server&amp;rsquo;s resources, and will require memory proportional to the size of the grouped data it&amp;rsquo;s operating on. (In the case of the &lt;a href=&quot;../order_by/index&quot;&gt;orderBy&lt;/a&gt; in the inefficient example, that means memory proportional &lt;strong&gt;to the size of the table&lt;/strong&gt;.) The array limit is also enforced for grouped data, so the &lt;code&gt;orderBy&lt;/code&gt; example would fail for tables with more than 100,000 rows without changing the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e01954d9f8d8e77895e864b870472fafc1d2fc" translate="yes" xml:space="preserve">
          <source>What governs the location of shards and replicas in the cluster?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeecbe039cd869cf6b58de21cfda895bec05bbb8" translate="yes" xml:space="preserve">
          <source>What happens when a server becomes unreachable?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f1d71d28f72c7bce86041433bf5e9d8269c36b" translate="yes" xml:space="preserve">
          <source>What is RethinkDB?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792fc2e237565f7453ac727b16937607f543048d" translate="yes" xml:space="preserve">
          <source>What sort of performance can I expect from a RethinkDB cluster?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c273c7432071ee60c46a1ad37f5833a8812489f7" translate="yes" xml:space="preserve">
          <source>What to do after a crash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e860c67987579ed63e69cb49c8bae21cee8ab0f2" translate="yes" xml:space="preserve">
          <source>What you likely want is the result of using &lt;code&gt;zip&lt;/code&gt; with that. For clarity, we&amp;rsquo;ll use &lt;code&gt;without&lt;/code&gt; to drop the &lt;code&gt;id&lt;/code&gt; field from the games table (it conflicts with the &lt;code&gt;id&lt;/code&gt; field for the players and it&amp;rsquo;s redundant anyway), and we&amp;rsquo;ll order it by the games.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2412f7ca4f8b6170188b11c9ed6cd4be9e075b0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;count&lt;/code&gt; is called on a sequence with a predicate value or function, it returns the number of elements in the sequence equal to that value or where the function returns &lt;code&gt;true&lt;/code&gt;. On a &lt;a href=&quot;../binary/index&quot;&gt;binary&lt;/a&gt; object, &lt;code&gt;count&lt;/code&gt; returns the size of the object in bytes; on strings, &lt;code&gt;count&lt;/code&gt; returns the string&amp;rsquo;s length. This is determined by counting the number of Unicode codepoints in the string, counting combining codepoints separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a943aaea897090869701fc63a61450e4a044356" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;includeTypes&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, there will be three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db59537e91adcaeb56b2666cc25c2ed2d6fefa3a" translate="yes" xml:space="preserve">
          <source>When a RethinkDB node starts, it will broadcast its &amp;ldquo;canonical&amp;rdquo; IP address, the address other nodes should use to connect to it. By default, the canonical address is the server&amp;rsquo;s primary IP address. However, if this address is an internal IP address that isn&amp;rsquo;t reachable by other nodes (for example, the nodes are on different networks), the nodes will not be able to reach one another. You may receive an error message such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdb94ecb03dbf42358c1312dbd7d67d5be3564f" translate="yes" xml:space="preserve">
          <source>When a document is deleted, &lt;code&gt;new_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;; when a document is inserted, &lt;code&gt;old_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703065bb49bf10d98540e55348b4199e4bf90f6b" translate="yes" xml:space="preserve">
          <source>When a node in the cluster receives a query from the client, it evaluates the query in the following way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7895cfeb7489d6ebc6349cdf88d440ab9cae0b6b" translate="yes" xml:space="preserve">
          <source>When a server connects or disconnects, its log entries will be added to or removed from the &lt;code&gt;logs&lt;/code&gt; table. The action of connecting or disconnecting will not generate changefeed events for those log entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734fd0f99a381fd084bb9daae0c46a98286a6f99" translate="yes" xml:space="preserve">
          <source>When a server fails, it may be because of a network availability issue or something more serious, such as system failure. In a multi-server configuration, where tables have multiple replicas distributed among multiple physical machines, RethinkDB will be able to maintain availability automatically in many cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4dc39866df867c372286f6ac82dbbab1db65cb" translate="yes" xml:space="preserve">
          <source>When applied to a single object, &lt;code&gt;hasFields&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the object has the fields and &lt;code&gt;false&lt;/code&gt; if it does not. When applied to a sequence, it will return a new sequence (an array or stream) containing the elements that have the specified fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45a355356ae32e6ce951e83aa32fd7dafeeac3c" translate="yes" xml:space="preserve">
          <source>When called with values, returns &lt;code&gt;true&lt;/code&gt; if a sequence contains all the specified values. When called with predicate functions, returns &lt;code&gt;true&lt;/code&gt; if for each predicate there exists at least one element of the stream where that predicate returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f48292c69cb277e3b22337ed22c98c2ced2902a" translate="yes" xml:space="preserve">
          <source>When creating a table you can specify the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ca91852d7312c3e3e0989f96be0729d530f742" translate="yes" xml:space="preserve">
          <source>When grouped data are returned to the client, they are transformed into a client-specific native type. (Something similar is done with &lt;a href=&quot;../../../docs/dates-and-times/javascript/index&quot;&gt;times&lt;/a&gt;.) In JavaScript, grouped data are transformed into an &lt;code&gt;Array&lt;/code&gt;. If you instead want to receive the raw pseudotype from the server, you can specify &lt;code&gt;groupFormat: 'raw'&lt;/code&gt; as an optional argument to &lt;code&gt;run&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733c238b3057fb40dff28896edf33c02a6ec4626" translate="yes" xml:space="preserve">
          <source>When new servers (including proxies) join an existing cluster, it will synchronize with all the user account information, including passwords, from that cluster. This includes the &lt;code&gt;admin&lt;/code&gt; account. However, a server with no admin password set cannot join an existing cluster that &lt;em&gt;does&lt;/em&gt; have a password set. Otherwise, it would technically be possible for an attacker to connect to that server as an admin and run arbitrary queries in the time between that server starting and the accounts synchronizing from the rest of the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39499a0cd2439f58a90448079631a689bc240bd5" translate="yes" xml:space="preserve">
          <source>When paging occurs on RethinkDB&amp;rsquo;s process, performance will be adversely affected, and the more paging occurs the worse performance will be. You may be able to address it by ensuring other applications are not using physical memory on the server, tuning the paging cache, or adding more RAM to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ee88af11d3830bf42ab1d4973a89c0606e33c7" translate="yes" xml:space="preserve">
          <source>When posting a message to a topic, first repubsub attempts to overwrite a document with the exact same topic. If the exact topic isn&amp;rsquo;t found, it creates a new document with the topic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c16909e8c88df0ea5a422f64978472b8724466" translate="yes" xml:space="preserve">
          <source>When servers are tagged, you can use the tags in the &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt; command. To assign 3 replicas of the &lt;code&gt;users&lt;/code&gt; table to &lt;code&gt;us_west&lt;/code&gt; and 2 to &lt;code&gt;us_east&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786f7d315c87c4bca4d9c2b6ce53eda3ca9303b5" translate="yes" xml:space="preserve">
          <source>When starting RethinkDB from the command line, the cache size limit is set through the &lt;code&gt;--cache-size &amp;lt;limit in MB&amp;gt;&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c7ae19c81131fd14f6580c4d04a2dee10e9f6b" translate="yes" xml:space="preserve">
          <source>When the RethinkDB instance is ready, click on its &lt;strong&gt;Access Software&lt;/strong&gt; link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a54f9b1d8b2e5e569294b706e164e9b5699c16" translate="yes" xml:space="preserve">
          <source>When the driver finds an anonymous function, it returns a query object like this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d0359667f7a0c929b209d338b0f9a3993f1d7d" translate="yes" xml:space="preserve">
          <source>When the option is available, you should choose the JSON file format. If you&amp;rsquo;re exporting from a SQL database this might not be possible, but you might be able to write a separate script to transform CSV output into JSON, or use the &lt;code&gt;mysql2json&lt;/code&gt; script available as part of &lt;a href=&quot;https://github.com/seamusabshere/mysql2xxxx&quot;&gt;mysql2xxxx&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5717a00ca57bc298ae32605ce5314580ad4d3f3" translate="yes" xml:space="preserve">
          <source>When the user creates a table, they have the option of specifying the attribute that will serve as the primary key (if the primary key attribute isn&amp;rsquo;t specified, it defaults to &amp;lsquo;id&amp;rsquo;). When the user inserts a document into the table, if the document contains the primary key attribute, its value is used to index the document. Otherwise, a random unique ID is generated for the index automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13c50073789e73f7832addb638ad24cfe0cc700" translate="yes" xml:space="preserve">
          <source>When using the web UI, simply specify the number of shards you want, and based on the data available RethinkDB will determine the best split points to maintain balanced shards. To shard your data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085a0570038dfb7cf2cfd3cbed19548b2d1f7c9c" translate="yes" xml:space="preserve">
          <source>When you first start RethinkDB, the server opens a port for the client drivers (&lt;code&gt;28015&lt;/code&gt; by default). Let&amp;rsquo;s open a connection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35057656e095ebe83647859420615be9709172fb" translate="yes" xml:space="preserve">
          <source>When you issue a write query (&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, or &lt;code&gt;replace&lt;/code&gt;), RethinkDB returns a summary object that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adc3f762a66ce024127380f3784d16c509e1f05" translate="yes" xml:space="preserve">
          <source>When you parse the response string as JSON, you get the object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715d798b7e9cd5985d005f0aed4eba85867d2b96" translate="yes" xml:space="preserve">
          <source>When you pass functions to ReQL, your language&amp;rsquo;s driver serializes those functions into ReQL lambda functions that are run on the server, not in your client language. (See &lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;All about lambda functions in RethinkDB queries&lt;/a&gt; for more details.) A consequence of this is that native language constructs like &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; will not produce the expected result when their conditions involve ReQL commands. While they may not cause errors, they will be executed on the client side before the function is compiled for ReQL, and thus give an incorrect result. Instead, you must use equivalent ReQL control functions such as &lt;a href=&quot;../../api/javascript/branch/index&quot;&gt;branch&lt;/a&gt; and &lt;a href=&quot;../../api/javascript/for_each/index&quot;&gt;forEach&lt;/a&gt;. Here&amp;rsquo;s an example in Python from the &lt;a href=&quot;../introduction-to-reql/index&quot;&gt;Introduction to ReQL&lt;/a&gt; document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0d34296f9afa1b34c187838548381f1a1a9da2" translate="yes" xml:space="preserve">
          <source>When you turn on pagination in &lt;code&gt;r.http&lt;/code&gt;, instead of returning an array of documents, RethinkDB returns a stream which you can access in the driver via the usual cursor API. This is significant because pagination happens lazily &amp;mdash; RethinkDB will request new pages as you iterate through the cursor to minimize the number of API calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910523961609d1635340d9fd8646a5044eb8223b" translate="yes" xml:space="preserve">
          <source>When you upgrade a major release (i.e., 2.1 to 2.2), you should rebuild outdated secondary indexes manually. This can be done easily from the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01352645abcc16780dde4407c35c5e8f103dc1c" translate="yes" xml:space="preserve">
          <source>Whenever possible, the client drivers use operator overloading to support expressions such as &lt;code&gt;user['age'] &amp;gt; 30&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a1774318fd30b2eb43097c891e57357be23711" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should use native ReQL commands rather than &lt;code&gt;r.js&lt;/code&gt; for better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a090ba50026546708baf541642a566aa524853" translate="yes" xml:space="preserve">
          <source>Where &amp;ldquo;newpass&amp;rdquo; is the new password you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf978f6caa66726e06b1ef68ccd9f19f9ba5466" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;eq_join&lt;/code&gt; produces a table-like result (the rough equivalent of SQL&amp;rsquo;s &lt;code&gt;SELECT * FROM companies, employees WHERE companies.id = employees.company_id&lt;/code&gt;), using a subquery produces a nested document, where the employee objects are returned in a list in the &lt;code&gt;employees&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963cb49ae920f88d504d16b3b7083da4270506f8" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;t:1&lt;/code&gt; means that the response is a value, and &lt;code&gt;r: [&quot;foo&quot;]&lt;/code&gt; the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd6f0444e5d149aef2022bdf6d34990e15630b1" translate="yes" xml:space="preserve">
          <source>Where&amp;rsquo;s &lt;code&gt;r.binary&lt;/code&gt;? You don&amp;rsquo;t need it in this case, because &lt;code&gt;r.http&lt;/code&gt; will return a binary object with the &lt;code&gt;{resultFormat:'binary'}&lt;/code&gt; option. (If the MIME type on the sending server is set correctly, you can even leave that off, and &lt;code&gt;r.http&lt;/code&gt; will figure out the correct type.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ff01499d11ce21062a9b96027ab58ee226aad3" translate="yes" xml:space="preserve">
          <source>Where,</source>
          <target state="translated">Where,</target>
        </trans-unit>
        <trans-unit id="74ef3c384631337c470ed9830ea2e775e4e4fa26" translate="yes" xml:space="preserve">
          <source>Whereas &lt;code&gt;concatMap&lt;/code&gt; with the same mapping function would merge those sequences into one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3802c9a75c102c56d33838d3085aeced2d4be5" translate="yes" xml:space="preserve">
          <source>Which file systems are supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d903bd400a10130121c28b48937e8649984629" translate="yes" xml:space="preserve">
          <source>Which versions of Node.js are supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c7b24c0d75f53a78e5d965405062d03b3aa767" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;distinct&lt;/code&gt; can be called on a table without an index, the only effect will be to convert the table into a stream; the content of the stream will not be affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda1f1902e0534da8b4f0914078aa6c1b6b382f8" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;import&lt;/code&gt; has the ability to import a directory full of files, those files are expected to be in the format and directory structure created by the &lt;code&gt;export&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15bffa8e190edcd775e600e8f345fc990c8b319" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;outdated&lt;/code&gt; reads are faster, they are the least consistent. For more information on this option, read &amp;ldquo;Balancing safety and performance&amp;rdquo; in the &lt;a href=&quot;../consistency/index#balancing-safety-and-performance&quot;&gt;Consistency guarantees&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe5b9c83c28270a91a6119308ebb3167601ae92" translate="yes" xml:space="preserve">
          <source>While RethinkDB doesn&amp;rsquo;t currently have a fully-featured query optimizer, ReQL is designed with one in mind. For example, the server has enough information to reorder the chain for efficiency, or to use alternative implementation plans to improve performance. This feature will be introduced into future versions of RethinkDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87f1d7f7e013b05d15b906401df3c72981e5795" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s not strictly necessary to back up your data before upgrading, it&amp;rsquo;s always a good idea. You should make a backup by using the &lt;code&gt;dump&lt;/code&gt; command &lt;em&gt;before&lt;/em&gt; updating RethinkDB to its new version! Databases that have been automatically upgraded are not backward-compatible (that is, a database from version 1.14 cannot be used with version 1.13).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c508518c472ea549e545c7cc3c1828474cbd1b66" translate="yes" xml:space="preserve">
          <source>While queries are built up on the client, they&amp;rsquo;re only sent to the server once you call the &lt;code&gt;run&lt;/code&gt; command. All processing happens on the server&amp;mdash;the queries don&amp;rsquo;t run on the client, and don&amp;rsquo;t require intermediary network round trips between the client and the server. For example, you can store queries in variables, and send them to the server later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5b09514d00b6ab4c988fd2046f1b881599653b" translate="yes" xml:space="preserve">
          <source>While running, a server&amp;rsquo;s configuration can be changed by writing to the &lt;code&gt;rethinkdb.server_config&lt;/code&gt;&lt;a href=&quot;../system-tables/index&quot;&gt;system table&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196bc69045bb039c922d7d34e6348aba06827f91" translate="yes" xml:space="preserve">
          <source>While system tables support changefeeds, they do not support all of the chaining that real tables do. For instance, aggregation (&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt;) and &lt;code&gt;limit&lt;/code&gt; commands will not work with system tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1db1780061897d624e2492fa72c8d8a9c49dd8" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;{field:value}&lt;/code&gt; style of predicate is useful for exact matches, a more general way to write a predicate is to use the &lt;a href=&quot;../row/index&quot;&gt;row&lt;/a&gt; command with a comparison operator such as &lt;a href=&quot;../eq/index&quot;&gt;eq&lt;/a&gt; or &lt;a href=&quot;../gt/index&quot;&gt;gt&lt;/a&gt;, or to use an anonymous function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb232e8e16f07d7f64a5545b6cc6855a0b706386" translate="yes" xml:space="preserve">
          <source>While there &lt;em&gt;is&lt;/em&gt; a [circle] command, it approximates a circle by defining either a line or a polygon. There is no true circular data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8880d3ba6f9209b576363cabe9ca016a317fd7a2" translate="yes" xml:space="preserve">
          <source>While we strive to give you perfect uptime, like other complex applications RethinkDB is not immune to crashing. Here are some tips on how to recover from a crash, how to submit a bug report, and how to maximize availability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c9f8d79908203bf616bc5ec24c72cd56e7ec7f" translate="yes" xml:space="preserve">
          <source>While you may be able to leave many options at their defaults, you&amp;rsquo;ll definitely need to change the &lt;code&gt;directory=&lt;/code&gt; line in the configuration file to point to your RethinkDB data directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70b857aa26bf55f4755a8a354b5a0cf782812e2" translate="yes" xml:space="preserve">
          <source>Whitespace-separated JSON rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="d110c7983aa12b9b68c9e762bd72396013153dbb" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;one&lt;/strong&gt; argument &lt;em&gt;x,&lt;/em&gt; the result will be in the range &lt;code&gt;[0,x)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float:true}&lt;/code&gt; is given as an option. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7043f8490538934638889f8014fabd627f4ae9b" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;two&lt;/strong&gt; arguments &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y,&lt;/em&gt; the result will be in the range &lt;code&gt;[x,y)&lt;/code&gt;, and will be integer unless &lt;code&gt;{float:true}&lt;/code&gt; is given as an option. If &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are equal an error will occur, unless the floating-point option has been specified, in which case &lt;em&gt;x&lt;/em&gt; will be returned. Specifying a floating point number without the &lt;code&gt;float&lt;/code&gt; option will raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3cfa588bab7867e4924f429e5db144b0535192" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;zero&lt;/strong&gt; arguments, the result will be a floating-point number in the range &lt;code&gt;[0,1)&lt;/code&gt; (from 0 up to but not including 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e699cf78c6c70afc59571e065ee6662df7ae4ed" translate="yes" xml:space="preserve">
          <source>With a single server, our query takes 59 seconds to complete. The automatic query parallelization in RethinkDB results in practically linear scalability, as the same query is executed in just above 4 seconds on 16 servers. The graph, shown in the results overview section, demonstrates the inverse execution time (queries per second) of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a5b7f3faeb9e33f62bb627c2b2a563e64920b5" translate="yes" xml:space="preserve">
          <source>With a string, &lt;code&gt;slice&lt;/code&gt; behaves similarly, with the indexes referring to Unicode codepoints. String indexes start at &lt;code&gt;0&lt;/code&gt;. (Note that &lt;a href=&quot;https://en.wikipedia.org/wiki/Combining_character&quot;&gt;combining codepoints&lt;/a&gt; are counted separately.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fd536709cd6838a47751145de8bc8d075d4ebd" translate="yes" xml:space="preserve">
          <source>With most commands that take a field name string or the &lt;code&gt;() &lt;/code&gt; syntax above, you can also use a JSON-style nested syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f765a154bf9b7d7db33d2b68b71884f46493323f" translate="yes" xml:space="preserve">
          <source>With no arguments, &lt;code&gt;range&lt;/code&gt; returns an &amp;ldquo;infinite&amp;rdquo; stream from 0 up to and including the maximum integer value;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be6d08d4038949893064ebde481b01100a94fa1" translate="yes" xml:space="preserve">
          <source>With one argument, &lt;code&gt;range&lt;/code&gt; returns a stream from 0 up to but not including the end value;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28fd958eebbcb33351a1302bb1eea36388fb720" translate="yes" xml:space="preserve">
          <source>With simple and compound indexes, a document will be indexed using at most one index key: a single value for a simple index and a set of values for a compound index. Multiple documents may have the same index key. With a &lt;em&gt;multi index&lt;/em&gt;, a document can be indexed using more than one key in the same index. For instance, a blog post might have multiple tags, and each tag might refer to multiple blog posts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561955fb8ca5f5782474961bc600ce7a0b051525" translate="yes" xml:space="preserve">
          <source>With system tables only, the &lt;code&gt;table&lt;/code&gt; command takes a new argument, &lt;code&gt;identifier_format&lt;/code&gt;. Legal values are &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;uuid&lt;/code&gt;. When it&amp;rsquo;s set to &lt;code&gt;uuid&lt;/code&gt;, references in system tables to databases or other tables will be UUIDs rather than database/table names. This is useful for writing scripts and administration tasks, as UUIDs remain consistent even if object names change. The default is &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecebde599b9bd6e7b61ea5841eb82f0b8ce413a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;multi&lt;/code&gt; flag single documents can be assigned to multiple groups, similar to the behavior of &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;multi-indexes&lt;/a&gt;. When &lt;code&gt;multi&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the grouping value is an array, documents will be placed in each group that corresponds to the elements of the array. If the array is empty the row will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c2a4ec9b5fe6dd2c2a1f09763272a5046fc80b" translate="yes" xml:space="preserve">
          <source>With the appropriate &lt;a href=&quot;../install-drivers/index&quot;&gt;client driver&lt;/a&gt; installed you can use a supported language to perform all administration tasks, either from the language&amp;rsquo;s REPL or as a script. There are ReQL commands for &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;configuring sharding and replication&lt;/a&gt;, &lt;a href=&quot;https://rethinkdb.com/api/python/rebalance&quot;&gt;rebalancing shards&lt;/a&gt; and more. In addition, you can query &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; to get information about your cluster and to change many of its operational characteristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ce626689bbb3d87a8121372f5b3f4b42db58eb" translate="yes" xml:space="preserve">
          <source>With the following settings, RethinkDB guarantees linearizability of individual atomic operations on individual documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d4c9e7aabba038136ff518e49156fb80b1960b" translate="yes" xml:space="preserve">
          <source>With this approach you cannot atomically update both the author data and and the posts data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c5da5a74f1e53423101b6b6a642e055eee3483" translate="yes" xml:space="preserve">
          <source>With two arguments, &lt;code&gt;range&lt;/code&gt; returns a stream from the start value up to but not including the end value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706a9fb9c60fd738be99224175848f1837d058a5" translate="yes" xml:space="preserve">
          <source>With version &lt;code&gt;V1_0&lt;/code&gt; of the protocol, the handshake protocol has changed from previous versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c726aadd8ac092e0447f9f7e0fbd7bbf6e227c" translate="yes" xml:space="preserve">
          <source>Working with streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c081f805ae12217f57b46b44e966da71b81ef959" translate="yes" xml:space="preserve">
          <source>Working with times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369a3cda46aff60d2423048907eef67959000caa" translate="yes" xml:space="preserve">
          <source>Workload A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff249cc11740bb6ad8b6e01ed11cfa8c3c78f8f" translate="yes" xml:space="preserve">
          <source>Workload C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39dd82bdd5c2b2b0591a73c0a966f99123a4a07" translate="yes" xml:space="preserve">
          <source>Would be sent to the server as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dc61bcc6d6ce0ce9d24febb8af7ea389f5b539" translate="yes" xml:space="preserve">
          <source>Wrapping queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659ca7d443e63ce2949dec486536ee88fa72c4d0" translate="yes" xml:space="preserve">
          <source>Wrapping the DB query option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbedb4dc90f07d001648d9502697a610b881d451" translate="yes" xml:space="preserve">
          <source>Write acks and durability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6eaa2c1185928e8b28fb617129c097ed9398c9" translate="yes" xml:space="preserve">
          <source>Write atomicity is supported on a per-document basis &amp;ndash; updates to a single JSON document are guaranteed to be atomic. RethinkDB is different from other NoSQL systems in that atomic document updates aren&amp;rsquo;t limited to a small subset of possible operations &amp;ndash; any combination of operations that can be performed on a single document is guaranteed to update the document atomically. For example, the user may wish to update the value of attribute A to a sum of the values of attributes B and C, increment the value of attribute D by a fixed number, and append an element to an array in attribute E. All of these operations can be applied to the document atomically in a single update operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62115f9f3535c8b07d79df0f9f18ccafd554421" translate="yes" xml:space="preserve">
          <source>Write operations on system tables are non-atomic. Avoid writing to the same system table row from more than one client at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778b0b2b0319607e4822502fbb728b660dd8744d" translate="yes" xml:space="preserve">
          <source>Writes are performed with &amp;ldquo;hard&amp;rdquo; durability (wait for data to be on disk on both replicas)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e632869f49afb8aba3986c578bc41023c0edd69" translate="yes" xml:space="preserve">
          <source>Writing Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a414f19d977be639835849a95f5232ef94bac3b" translate="yes" xml:space="preserve">
          <source>Writing RethinkDB drivers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f85d90f8a8e1dd726894cac4b4961c2ef2bc396" translate="yes" xml:space="preserve">
          <source>Writing data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0592df9e765a33e009a61a0f043994284838f69d" translate="yes" xml:space="preserve">
          <source>Writing drivers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61bb79a2505d2a4aa2a95f6ce80e265d54461a3" translate="yes" xml:space="preserve">
          <source>YCSB comes with a variety of default workloads, but for the purposes of our testing we chose two of them to run against RethinkDB. Out of the YCSB workload options, we chose to run workload A which comprises 50% reads and 50% update operations, and workload C which performs strictly read operations. All documents stored by the YCSB tests contain 10 fields with randomized 100 byte strings as values, with each document totaling about 1 KB in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb210c778a79793e9d78d22c3f1ede24830d9f8" translate="yes" xml:space="preserve">
          <source>Yes. Distance calculations are done on a geodesic (either WGS84&amp;rsquo;s reference ellipsoid or a unit sphere).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3e24fef8be8e5708c75420ec10f7858a6a4a38" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../api/javascript/update/index&quot;&gt;update&lt;/a&gt; the password to a new value, or remove it by setting it to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948b7ad33f6106e0c518960b93f129c834918f85" translate="yes" xml:space="preserve">
          <source>You can accomplish this with &lt;code&gt;object&lt;/code&gt; and a pivot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925356081da49bb85c51c3cfc060b861749e8f91" translate="yes" xml:space="preserve">
          <source>You can add or subtract a duration (in seconds):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4533fcb6c96cfc2d8d905dbd40d93091a926daf0" translate="yes" xml:space="preserve">
          <source>You can also chain &lt;code&gt;changes&lt;/code&gt; before any command that operates on a sequence of documents, as long as that command doesn&amp;rsquo;t consume the entire sequence. (For instance, &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; cannot come after the &lt;code&gt;changes&lt;/code&gt; command.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa193e7db24ef17527767c2a2fb1bc7e212cf120" translate="yes" xml:space="preserve">
          <source>You can also choose to receive errors in the block by accepting two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7521a0e1d0a48d0648af79a67343e53203f19dc3" translate="yes" xml:space="preserve">
          <source>You can also combine soft durability and &lt;code&gt;noreply&lt;/code&gt; for the highest performance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bee9dd40ed9b84d531cd93a05bc744d1be6b9b" translate="yes" xml:space="preserve">
          <source>You can also filter messages by tags. We could put the tags into a string and build a regex to match messages with the tags we want, but luckily we have the full power of ReQL at our disposal. Instead, we can make the topic an actual JSON array, and use ReQL&amp;rsquo;s &lt;a href=&quot;../../../api/javascript/contains/index&quot;&gt;contains&lt;/a&gt; method to do the filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f7bbe803221ed2cce75841fcc9fc9bd55f8f78" translate="yes" xml:space="preserve">
          <source>You can also group by a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7329e3cb33fdb6c2fd3c98bf353c3c9bcd0191" translate="yes" xml:space="preserve">
          <source>You can also group by more than one field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60b122be5d58582613cfb6b6776eff696b1b764" translate="yes" xml:space="preserve">
          <source>You can also group on an index (primary key or secondary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6654958bc49bc05258fa3acec5130cab590a8a51" translate="yes" xml:space="preserve">
          <source>You can also manually compare dates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec8c02dd35711b36397abb1da1ac1fa12d559ed" translate="yes" xml:space="preserve">
          <source>You can also perform this query using the &lt;a href=&quot;https://rethinkdb.com/api/python/inner_join/&quot;&gt;inner_join&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74279a58953a26e9ef411c14ba12ac3c17b2d47" translate="yes" xml:space="preserve">
          <source>You can also point the client drivers to &lt;code&gt;localhost:28015&lt;/code&gt; or &lt;code&gt;localhost:28016&lt;/code&gt; to start running queries (it doesn&amp;rsquo;t matter which node you use&amp;mdash;the cluster will automatically route all commands to appropriate nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44ac32db1d54d18e34eb6ab558c9e482d15daa2" translate="yes" xml:space="preserve">
          <source>You can also select a descending ordering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fc5957165ff64f88a05853da874a06bd5d3701" translate="yes" xml:space="preserve">
          <source>You can also specify explicitly which index and type you want synced documents to go to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80eac1c2d72fc26d947819c83575a858603c9378" translate="yes" xml:space="preserve">
          <source>You can also transform a time object on the server using either &lt;code&gt;toEpochTime&lt;/code&gt; or &lt;code&gt;toISO8601&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac8d8320c3579227fb8c5d1475782eef117e2c2" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;r.now&lt;/code&gt; (which the server interprets as the time the query was received in UTC), or construct a time using &lt;code&gt;r.time&lt;/code&gt;, &lt;code&gt;r.epochTime&lt;/code&gt;, or &lt;code&gt;r.ISO8601&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2bd319a45cdc6fba892eaab1939a5068f518fa" translate="yes" xml:space="preserve">
          <source>You can also use RethinkDB to query many to many relations. Let&amp;rsquo;s suppose we have a collaborative blogging platform where authors collaborate to create posts (multiple authors can work on any given post, and publish multiple posts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260bde3e879639056344b2578c9acb496c3e9dfd" translate="yes" xml:space="preserve">
          <source>You can also use more complicated expressions. Let&amp;rsquo;s say you have a table &lt;code&gt;scores&lt;/code&gt; that contains the latest game score for every user of your game. You can create a feed of all games where a user beats their previous score, and get only the new value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d752132db71ae1e37214a4686c56d81c5eaeefd" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;../limit/index&quot;&gt;limit&lt;/a&gt; command with the no-argument variant to achieve the same result in this case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b26d9038bb64d58ff064aaaf43b40e2b7dd37d" translate="yes" xml:space="preserve">
          <source>You can also use the prefix notation (passing all arguments to &lt;code&gt;r.and&lt;/code&gt;), if that&amp;rsquo;s what you prefer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98524810990f6ce3791d22ab50b4d44cc51b4729" translate="yes" xml:space="preserve">
          <source>You can also use this approach with a &lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;compound index&lt;/a&gt; on the intervals you want to group:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e210d90ddec99211d2b1d62f90c31cc57cbc7fa" translate="yes" xml:space="preserve">
          <source>You can ask questions and get notes on changes introduced in new versions of RethinkDB on the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/rethinkdb-dev&quot;&gt;RethinkDB-Dev Google Group&lt;/a&gt;. You can also visit the &lt;a href=&quot;irc://irc.freenode.org/rethinkdb&quot;&gt;RethinkDB IRC Channel&lt;/a&gt;, where core developers and other driver developers frequently hang out. Also, you can ask questions on &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; using the tag &amp;ldquo;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/rethinkdb&quot;&gt;rethinkdb&lt;/a&gt;.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab33dc48c02612349a04e9a9040eefd1db934e27" translate="yes" xml:space="preserve">
          <source>You can chain as many ReQL commands as necessary to perform data manipulation tasks. Since ReQL is explicitly designed for JSON querying and modification, it&amp;rsquo;s also an excellent language for operating on web services!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d30f31519b2594ea55d30183732bc6402bd588e" translate="yes" xml:space="preserve">
          <source>You can combine multiple ReQL queries to build more complex ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cec52bedaeaa6b1b669dabc56c482be17d6581c" translate="yes" xml:space="preserve">
          <source>You can compute the average value of a field with the &lt;code&gt;avg&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70626bab7a8c982a8c2b47eb0111e64d0d9ee6a0" translate="yes" xml:space="preserve">
          <source>You can connect to your hosted cluster on Compose in one of two ways: via SSL or via SSH tunneling. With SSL, you can get a direct Admin URL and driver connection URL to your RethinkDB instance. SSL driver connections are only supported with the official RethinkDB drivers and the community-supported Go driver. For more details, read Compose&amp;rsquo;s &lt;a href=&quot;https://www.compose.io/articles/rethinkdb-and-ssl-think-secure/&quot;&gt;RethinkDB and SSL&lt;/a&gt; blog post.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b08edef601b139269d80f58b49bf6d38d77cbe" translate="yes" xml:space="preserve">
          <source>You can construct queries incrementally by chaining transformations and examining intermediary results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d2d2ae12e1b289f792fb7810556ffc10df36f3" translate="yes" xml:space="preserve">
          <source>You can count the number of documents with a &lt;code&gt;count&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c82b7f4625b4de3a4454fdede8889e7985323d5" translate="yes" xml:space="preserve">
          <source>You can create a multi index on an arbitrary expression in similar fashion, by passing the multi option as the last parameter to &lt;code&gt;indexCreate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff9726784d6a1aff26ac13770f9e52387b5cba0" translate="yes" xml:space="preserve">
          <source>You can create an index on an arbitrary expression by passing an anonymous function to &lt;code&gt;indexCreate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c85924dc6701675bf65f65e91338b361c7719c7" translate="yes" xml:space="preserve">
          <source>You can find unofficial community-supported Docker images on our &lt;a href=&quot;../frameworks-and-libraries/index&quot;&gt;Frameworks and Libraries&lt;/a&gt; list under &amp;ldquo;Docker images.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7128754a7ec44d094fd8436c4f0024fffbe80772" translate="yes" xml:space="preserve">
          <source>You can get the value of a specific field by using the &lt;code&gt;()&lt;/code&gt; operator successively to &amp;ldquo;drill down&amp;rdquo; in the document nesting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fab9bb039306b94d3dcceac9307f7438d69a0d8" translate="yes" xml:space="preserve">
          <source>You can give the queue a name if you want, but since we passed an empty string to &lt;code&gt;assertQueue&lt;/code&gt; it&amp;rsquo;ll create a randomly generated name for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a4afcf8eb4b7e86bde39ff9cd1eee507b21edb" translate="yes" xml:space="preserve">
          <source>You can increase the performance of a query by using the &lt;code&gt;outdated&lt;/code&gt; read mode, which allows the cluster to return values from memory on arbitrarily-selected replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="144b33ca938be37a7db68bea3a8e00681f057745" translate="yes" xml:space="preserve">
          <source>You can insert data in soft durability mode as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19aa0f58079aaa5fdb28aefcf4d031b7fca0523d" translate="yes" xml:space="preserve">
          <source>You can insert documents by calling the &lt;code&gt;insert&lt;/code&gt; command on the appropriate table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522166a599dd048fb9f36a688c8769900fab5110" translate="yes" xml:space="preserve">
          <source>You can insert multiple documents at once by passing an array of documents to &lt;code&gt;insert&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5fd63ec4ce45a7100edbaad666967334a1bcbb" translate="yes" xml:space="preserve">
          <source>You can insert times by simply passing a native &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751f056e4fe6679c065eb7194734fc44fd1a7b13" translate="yes" xml:space="preserve">
          <source>You can limit the number of documents returned by your queries with the &lt;code&gt;limit&lt;/code&gt; command. Let&amp;rsquo;s retrieve just the first 10 blog posts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b17d6c854c4f6dab9445bfb353fd30b3552e94" translate="yes" xml:space="preserve">
          <source>You can manually merge the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; fields without using the &lt;code&gt;zip&lt;/code&gt; command. Suppose you want to keep the name of the employee and the name of his company. You can do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef36e76fd44a04fb2dd47cac5bdfd94615eb0032" translate="yes" xml:space="preserve">
          <source>You can now access RethinkDB commands through the &lt;code&gt;r&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a60802ebbd73788c71aa231b342a11949864ed" translate="yes" xml:space="preserve">
          <source>You can now access the web interface using the following URL: &lt;code&gt;http://HOST/rethinkdb_admin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d827dd1b8146523ca253b1fbd010534352b7e6" translate="yes" xml:space="preserve">
          <source>You can now connect to your RethinkDB instance by connecting to the host &lt;code&gt;localhost&lt;/code&gt; and port &lt;code&gt;local_port&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544a44f70a2d29fc913b28c805d563bd24f59665" translate="yes" xml:space="preserve">
          <source>You can now generate models individually or use the scaffolding mechanism. For example, here&amp;rsquo;s a scaffold for an Article resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1babd33de8299282e70321fd6e6921550e6a311f" translate="yes" xml:space="preserve">
          <source>You can now visit &lt;code&gt;localhost:8080&lt;/code&gt; to see the RethinkDB web admin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2136ac157f038f4f09ae39e08df0720968297d60" translate="yes" xml:space="preserve">
          <source>You can only check arity of the methods to a certain extent. If an &lt;code&gt;ARGS&lt;/code&gt; term is one of the argument, only the server can effectively verify that enough arguments are provided (or not too many). The arity errors reported by the server suppose a prefix notation. Things may change if the solution in &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/2463#issuecomment-44584491&quot;&gt;#2463&lt;/a&gt; is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c17135e144b5ea5748af8b5b13a317d020c5cc" translate="yes" xml:space="preserve">
          <source>You can query for specific kinds of issues by filtering on the &lt;code&gt;type&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a42ac8551b89b20f2c10b30974b7c931c71637d" translate="yes" xml:space="preserve">
          <source>You can read more about ReQL in the &lt;a href=&quot;../introduction-to-reql/index&quot;&gt;Introduction to ReQL&lt;/a&gt; article, or go into greater depth with the &lt;a href=&quot;../../api/javascript/index&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9ee9a22a35c38e47001b9b9f655322e519c2c4" translate="yes" xml:space="preserve">
          <source>You can register multiple queries with the same &lt;code&gt;Handler&lt;/code&gt; instance. If you define &lt;code&gt;Handler&lt;/code&gt; methods with an additional argument (two arguments instead of one, or one argument instead of zero), that argument will receive the appropriate &lt;code&gt;QueryHandle&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1933909364676c58638278c6dab0bcfb57c730da" translate="yes" xml:space="preserve">
          <source>You can run the &lt;code&gt;tags&lt;/code&gt; and &lt;code&gt;hierarchy&lt;/code&gt; demos the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3967663785629ac46bd8c818c4a0c7fb7bb0b7" translate="yes" xml:space="preserve">
          <source>You can select the database where you&amp;rsquo;d like to create the table with the &lt;code&gt;db&lt;/code&gt; command and use the &lt;code&gt;tableCreate&lt;/code&gt; command as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3445238753b67722f154d32ffb435fb68a7c2ce7" translate="yes" xml:space="preserve">
          <source>You can specify associations between models in the generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4655d414014487455834f6df43050a9e8837e922" translate="yes" xml:space="preserve">
          <source>You can then retrieve only the domain with the &lt;a href=&quot;../get_field/index&quot;&gt;()&lt;/a&gt; selector and &lt;a href=&quot;../nth/index&quot;&gt;nth&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc57e6e3fb5364b78e07f1d7b90170685584269a" translate="yes" xml:space="preserve">
          <source>You can upgrade your version of Node.js via &lt;code&gt;npm&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96610657bbf110f72a345d4ecbc8d9e3ab92272" translate="yes" xml:space="preserve">
          <source>You can use Ruby&amp;rsquo;s &lt;code&gt;DateTime.to_time&lt;/code&gt; and &lt;code&gt;Time.to_datetime&lt;/code&gt; methods to easily convert between one and the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4696c1747cc9a947e3f0c3d082249e222fd734da" translate="yes" xml:space="preserve">
          <source>You can use a relational data modeling technique and create two tables to store your data. A typical document in the &lt;code&gt;authors&lt;/code&gt; table would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f77048ddce4bc4a4e2b66b3f488074fd0873c3" translate="yes" xml:space="preserve">
          <source>You can use a reverse HTTP proxy to allow access to the web interface from other servers. Most web servers (such as Apache or Nginx) support this feature. In the following example we&amp;rsquo;ll use Apache to set up a reverse proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34248ba9eb41ee870921e136f9b749265031e98c" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt; command to pass an array of Point objects (or latitude-longitude pairs) to &lt;code&gt;line&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81a753574cef91d728da364d2a3db98c3d900d4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt; command to pass an array of Point objects (or latitude-longitude pairs) to &lt;code&gt;polygon&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1883a6a496342b873c98c19cfd071b52992f989" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;dbCreate&lt;/code&gt; command as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a8bb3cc77f7c36ca0ad2e7223d33bcbb516f2c" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;epochTime&lt;/code&gt; and &lt;code&gt;ISO8601&lt;/code&gt; commands to convert Unix timestamps (in seconds) and JSON date-time strings (which are in ISO 8601 format) to the ReQL time type. The ReQL driver will also convert JavaScript Date objects into ReQL time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1af73a9bb486d64ee96e9f24cb09d18d079d423" translate="yes" xml:space="preserve">
          <source>You can use the same programming environment and tools you&amp;rsquo;re already used to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ca27ed70bc37c74353361fb557af790a5f1898" translate="yes" xml:space="preserve">
          <source>You cannot apply a &lt;code&gt;filter&lt;/code&gt; after &lt;code&gt;orderBy.limit&lt;/code&gt; in a changefeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e488f04e53bcbc97716fbfbf8849bce6efacd19" translate="yes" xml:space="preserve">
          <source>You cannot chain multiple &lt;code&gt;getAll&lt;/code&gt; commands. Use a compound index to efficiently retrieve documents by multiple fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f812c4695332d39c66ee05c0e065ad6439a12fcd" translate="yes" xml:space="preserve">
          <source>You cannot change a username once it&amp;rsquo;s been created. You can, however, &lt;a href=&quot;../../api/javascript/delete/index&quot;&gt;delete&lt;/a&gt; users from the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6e9f3b175f70884052e2fe6138e9def53f0107" translate="yes" xml:space="preserve">
          <source>You cannot use changefeeds after &lt;a href=&quot;../../../api/javascript/concat_map/index&quot;&gt;concatMap&lt;/a&gt; or other transformations whose results cannot be pushed to the shards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ab7b5179be60b7819ad174aebb47f94c0041ef" translate="yes" xml:space="preserve">
          <source>You have to explicitly use the &lt;code&gt;getAll&lt;/code&gt; command to take advantage of secondary indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccc70d6fea9d281cc273dec1dd133e29a74e62f" translate="yes" xml:space="preserve">
          <source>You may also insert a time by inserting a literal pseudotype object. This is useful if, for instance, you exported a row using &lt;code&gt;{timeFormat:'raw'}&lt;/code&gt; (see &lt;strong&gt;Retrieving Times&lt;/strong&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c78d1f1e9d17eec8fcc2f3043e460ea50d9a31" translate="yes" xml:space="preserve">
          <source>You may also rebuild indexes manually in ReQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b801a804a689f7ce7c3a900f04b102e00c4a77e" translate="yes" xml:space="preserve">
          <source>You may also see &lt;strong&gt;Any&lt;/strong&gt; used for commands that work with any data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216cd29d79b5e764f267b1fbf7cd40f5945222e2" translate="yes" xml:space="preserve">
          <source>You may also use the special constants &lt;code&gt;r.minval&lt;/code&gt; and &lt;code&gt;r.maxval&lt;/code&gt; for boundaries, which represent &amp;ldquo;less than any index key&amp;rdquo; and &amp;ldquo;more than any index key&amp;rdquo; respectively. For instance, if you use &lt;code&gt;r.minval&lt;/code&gt; as the lower key, then &lt;code&gt;between&lt;/code&gt; will return all documents whose primary keys (or indexes) are less than the specified upper key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd36a0d0214d1375b3acce6557fd40919d911a8" translate="yes" xml:space="preserve">
          <source>You may be able to check if the kernel&amp;rsquo;s out-of-memory killer is responsible for the crash by checking the system message buffer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ab6a173ae1d00c9f2de8cdd6f47316610bceee" translate="yes" xml:space="preserve">
          <source>You may be interested in retrieving the results in this format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca4e5872728b2af78f129fbcb8862f39ba1561e" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;branch&lt;/code&gt; infix style on the first test. (See the second example for an illustration.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fbc6d30374c1685dcaa3058d32036e9d22c0e4" translate="yes" xml:space="preserve">
          <source>You may need to adjust RethinkDB&amp;rsquo;s page cache size, using the &lt;code&gt;--cache-size&lt;/code&gt; argument or configuration file option. Read &amp;ldquo;&lt;a href=&quot;../memory-usage/index&quot;&gt;Understanding RethinkDB memory requirements&lt;/a&gt;&amp;rdquo; for a more detailed explanation of how RethinkDB uses memory and how to tune its performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035b683c2eb870d8c3a4314f01b4185d55a4eaf3" translate="yes" xml:space="preserve">
          <source>You may rebuild indexes with the &lt;code&gt;rethinkdb&lt;/code&gt; command line utility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d45fcbef747c80cc440d1e1381aa9a9df031a71" translate="yes" xml:space="preserve">
          <source>You may receive a warning message about secondary indexes on startup being &amp;ldquo;outdated&amp;rdquo; when you upgrade RethinkDB versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2609f36c24cc34f3e43480b11002dab3d0ca9d7" translate="yes" xml:space="preserve">
          <source>You may rewrite these with anonymous functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1d5f446a7c535a121af4af891a4d8add811e03" translate="yes" xml:space="preserve">
          <source>You might also want to use the &lt;a href=&quot;../ungroup/index&quot;&gt;ungroup&lt;/a&gt; command (see above), which will turn the grouped data into an array of objects on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d436e93d9a8764b9f606ec167d5f673b80bd6458" translate="yes" xml:space="preserve">
          <source>You might have caught that there were 253 documents inserted, not 250. Either we have the top 253 movies, or there are a few duplicate records lurking in there. We can use &lt;code&gt;distinct&lt;/code&gt; to get a count of unique rows, but we need to remove the &lt;code&gt;id&lt;/code&gt; column from the query, since all ID values are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c327a4b6eb6a8adef5a599c8b2953dcb153c415f" translate="yes" xml:space="preserve">
          <source>You might want to &amp;ldquo;tag&amp;rdquo; the tables to make it clear which changes belong to which table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08b665617a6aa1f2e950387a4615085af0f8a22" translate="yes" xml:space="preserve">
          <source>You might want to produce a &amp;ldquo;union&amp;rdquo; changefeed to watch multiple tables or queries on just one feed. Since the &lt;code&gt;union&lt;/code&gt; command works with &lt;code&gt;changes&lt;/code&gt;, ReQL makes this fairly straightforward. To monitor two tables at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40e2c91ca208432ed398a66468fc4cf49d642a7" translate="yes" xml:space="preserve">
          <source>You might want to use &lt;code&gt;filter&lt;/code&gt; to return documents that have one of two (or more) optional fields set, such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42e3e3b1bf529384b192a0b26f47fb0a3069032" translate="yes" xml:space="preserve">
          <source>You must export your data &lt;strong&gt;before&lt;/strong&gt; you&amp;rsquo;ve upgraded RethinkDB to a new version! If you&amp;rsquo;ve already updated, you can find binaries for previous versions in the &lt;a href=&quot;http://download.rethinkdb.com&quot;&gt;download archive&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565592f422a57bd14395f0aa5e9f7a0c35a0c8de" translate="yes" xml:space="preserve">
          <source>You should not release a connection in the pool as soon as you receive a response. Only release the connection when you receive a response of a type other than &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a72e6345a75043e81786646c9dbb79a9081cfe" translate="yes" xml:space="preserve">
          <source>You should see a &amp;ldquo;Setting up a RethinkDB AMI&amp;rdquo; web page. Click on the &lt;strong&gt;Continue&lt;/strong&gt; button to proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf96a569106f7f50b78dc40ac65e2bc7dc0d21b" translate="yes" xml:space="preserve">
          <source>You start using ReQL in your program similarly to how you&amp;rsquo;d use other databases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404788204c896695d91565b254d02b6bcaa381e7" translate="yes" xml:space="preserve">
          <source>You will need to create new copies of the &lt;code&gt;com.rethinkdb.server.plist&lt;/code&gt; file with different names (e.g., &lt;code&gt;com.rethinkdb.server2.plist&lt;/code&gt;), making the following changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47868cbefdabe5748bbbe9252f2e32d2707b331b" translate="yes" xml:space="preserve">
          <source>You will receive another response of either type &lt;code&gt;SUCCESS_PARTIAL&lt;/code&gt;, indicating there is still more data available, or &lt;code&gt;SUCCESS_SEQUENCE&lt;/code&gt; if you have reached the end of the stream. (This will never be returned for a feed.) Note that these &lt;code&gt;ResponseType&lt;/code&gt;s can be returned without data (an empty array as the &lt;code&gt;r&lt;/code&gt; value). A driver can send &lt;code&gt;CONTINUE&lt;/code&gt; to fetch the next batch of a sequence as soon as the response is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c4cbeddd9897a41e6259d4e6a3d2093444c21d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll need the following modules installed for Apache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c41a6c59099a5955fcbee15e65b236d0cbb940" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll notice that both times we inserted are returned as native JavaScript &lt;code&gt;Date&lt;/code&gt; objects. (&lt;code&gt;Date&lt;/code&gt; objects don&amp;rsquo;t store time zone information, so both times are UTC, regardless of your server&amp;rsquo;s local time zone.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e157eeb5d7999ee35c81400e6f62bfd4665acb70" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re now up and running with RethinkDB and Rails!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060231f2ff139d1387dcc212f509aea6e53a8086" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re on your way with Ruby on Rails and RethinkDB! Be sure to check out additional resources for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f2169a05838f460f5e9de4b3001208843d3087" translate="yes" xml:space="preserve">
          <source>Your application would by default receive the object as it existed in the database after the &lt;em&gt;most recent&lt;/em&gt; change. The previous two updates would be &amp;ldquo;squashed&amp;rdquo; into the third.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66cc44d6602b7bd31c89d7a1be1215e97a7adc8" translate="yes" xml:space="preserve">
          <source>Your cluster configuration (number of servers, basic network topology, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3375d9e34870f4082b05af85d0b6b6b292554300" translate="yes" xml:space="preserve">
          <source>Your driver should assign each query a unique 8-byte token per connection. (The official RethinkDB drivers implement this as an unsigned 8-byte little-endian counter per connection.) The server will send responses to queries using this token as an identifier so the response can be matched to its query. The token can also be used to request more data for the query if all the results were not returned in the first response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5078ae8174ee0ebcf94480eb09d460024b113428" translate="yes" xml:space="preserve">
          <source>Zipfian key access distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a0673c8ed7b6be0dbd6e89da9b275e36e95a98" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;field name&lt;/strong&gt;, to return the element of the sequence with the largest value in that field;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03960db85c68eefbc47d4547b8d35cf0176392b6" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;field name&lt;/strong&gt;, to return the element of the sequence with the smallest value in that field;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a2eac36c508310920d67198d9c07d0ac4346cb" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;function&lt;/strong&gt;, to apply the function to every element within the sequence and return the element which returns the largest value from the function, ignoring any elements where the function produces a non-existence error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51161408b253db2bc8cd04ca036d0be54cc2469d" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;function&lt;/strong&gt;, to apply the function to every element within the sequence and return the element which returns the smallest value from the function, ignoring any elements where the function produces a non-existence error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9872fbde97c7cf8b282e7afff9d51a63f70f22" translate="yes" xml:space="preserve">
          <source>a binary object can be coerced to a string and vice-versa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45abe18bbf8e0052b4064b1b9c9bd0cfa96182da" translate="yes" xml:space="preserve">
          <source>a sequence, selection or an array of key-value pairs can be coerced to an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab027b3a4f17d2c5fbc84639e3d462c468056de8" translate="yes" xml:space="preserve">
          <source>a sequence, selection or object can be coerced to an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e325e7bf81dae8d35aeef7c7a58e7bf8c0a14465" translate="yes" xml:space="preserve">
          <source>a stream will be handled by &lt;code&gt;on_stream_val&lt;/code&gt; if defined; otherwise it will be handled by &lt;code&gt;on_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59462ed31f22981dcea909b3a58fd3f7fee5aeea" translate="yes" xml:space="preserve">
          <source>a string can be coerced to a number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="c63d48ab6a49abed2ff11f28593398d7920e1365" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;index&lt;/strong&gt; (the primary key or a secondary index), to return the element of the sequence with the largest value in that index;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22fd606be8e50662952de0616e76de5f757397d" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;index&lt;/strong&gt; (the primary key or a secondary index), to return the element of the sequence with the smallest value in that index;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f61c5a7a1dd022dd82cf2297401f9e62417803b" translate="yes" xml:space="preserve">
          <source>an array will be handled by &lt;code&gt;on_array&lt;/code&gt; if defined; otherwise it will be handled by &lt;code&gt;on_atom&lt;/code&gt;. If neither of those are defined, the &lt;em&gt;individual elements&lt;/em&gt; of the array will be handled by &lt;code&gt;on_stream_val&lt;/code&gt; or, if that is not defined, &lt;code&gt;on_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="d09ece47e5e6eac4f0488488b4d27d82317b9e3a" translate="yes" xml:space="preserve">
          <source>and in another window run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6be7e76811f8a5e128fffbca0db1459bf763b3" translate="yes" xml:space="preserve">
          <source>any datum (single value) can be coerced to to a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58020f282bf4efacbf5d09a443a72fc9c66bcab" translate="yes" xml:space="preserve">
          <source>anything else: as &lt;code&gt;text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="fcc9016d1aa6a646348df69e14d31e955d51da60" translate="yes" xml:space="preserve">
          <source>arrays</source>
          <target state="translated">arrays</target>
        </trans-unit>
        <trans-unit id="dfc520a023c642ce8f2688447d7245de35aae993" translate="yes" xml:space="preserve">
          <source>auth key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e77871b5fcc4941bebceb4338c97c1fd149f8c" translate="yes" xml:space="preserve">
          <source>avg</source>
          <target state="translated">avg</target>
        </trans-unit>
        <trans-unit id="89f7376411836c9118d833584b7127b976b30eca" translate="yes" xml:space="preserve">
          <source>backfill</source>
          <target state="translated">backfill</target>
        </trans-unit>
        <trans-unit id="709634051471385aada32356842983beeff4b065" translate="yes" xml:space="preserve">
          <source>between</source>
          <target state="translated">between</target>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="0cf36e054d06cf3e24262b9c117b8c36a2f910c2" translate="yes" xml:space="preserve">
          <source>binary objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a25bf9e5d787c109376c0b79d204a87d3b2159" translate="yes" xml:space="preserve">
          <source>booleans</source>
          <target state="translated">booleans</target>
        </trans-unit>
        <trans-unit id="8b7003a3cbdca58c13fadc160b3cb2a18890ccd4" translate="yes" xml:space="preserve">
          <source>box-rethinkdb</source>
          <target state="translated">box-rethinkdb</target>
        </trans-unit>
        <trans-unit id="10d735e581f1e2505cd69675691925490e447c44" translate="yes" xml:space="preserve">
          <source>branch</source>
          <target state="translated">branch</target>
        </trans-unit>
        <trans-unit id="613af80c25dfbc9ef75ce605280571b9a518d632" translate="yes" xml:space="preserve">
          <source>ceil</source>
          <target state="translated">ceil</target>
        </trans-unit>
        <trans-unit id="5b21c21f1b4d308af711792b548fc67cbdb3501b" translate="yes" xml:space="preserve">
          <source>changeAt</source>
          <target state="translated">changeAt</target>
        </trans-unit>
        <trans-unit id="49a04ba4469678c38e0f6a327f8702ea61d9e8a4" translate="yes" xml:space="preserve">
          <source>changes</source>
          <target state="translated">changes</target>
        </trans-unit>
        <trans-unit id="00b7b8118efde44c546b69243ec15b21cd64c9d9" translate="yes" xml:space="preserve">
          <source>circle</source>
          <target state="translated">circle</target>
        </trans-unit>
        <trans-unit id="da38860cb875cb64092e402d80d9fe29c4865b18" translate="yes" xml:space="preserve">
          <source>close</source>
          <target state="translated">close</target>
        </trans-unit>
        <trans-unit id="3f058d4502d8d3821d428b7868b825d469c09dfc" translate="yes" xml:space="preserve">
          <source>close (cursor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da68bf3a55223d19ffeabebe48b0af570d763307" translate="yes" xml:space="preserve">
          <source>cluster</source>
          <target state="translated">cluster</target>
        </trans-unit>
        <trans-unit id="b8359ca5f77b2d89fbef0ec0be2b08810eb6036f" translate="yes" xml:space="preserve">
          <source>cluster_config</source>
          <target state="translated">cluster_config</target>
        </trans-unit>
        <trans-unit id="09c2d2c08b69155cee87c21f7ba3f9df41b4ccbc" translate="yes" xml:space="preserve">
          <source>coerceTo</source>
          <target state="translated">coerceTo</target>
        </trans-unit>
        <trans-unit id="aa60230ab00282b5a1f3f1993b2d1c503e7d15a5" translate="yes" xml:space="preserve">
          <source>column</source>
          <target state="translated">column</target>
        </trans-unit>
        <trans-unit id="f4c35a76ac7be23c2bdef7981de2a3ccdf4c6dbd" translate="yes" xml:space="preserve">
          <source>concatMap</source>
          <target state="translated">concatMap</target>
        </trans-unit>
        <trans-unit id="aadcc2dbb054cb813f3bcabf9f333951aecd357d" translate="yes" xml:space="preserve">
          <source>concat_map</source>
          <target state="translated">concat_map</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="f11a107f38328604e9320754224b60375758bca1" translate="yes" xml:space="preserve">
          <source>connect</source>
          <target state="translated">connect</target>
        </trans-unit>
        <trans-unit id="348eb028ae2fba9221b11f8c2e3cdea9cb2bf40c" translate="yes" xml:space="preserve">
          <source>contact &amp;rarr; phone &amp;rarr; work &amp;rarr; 408-555-1212</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="be25171a40f5008c51632a20d39171138456c900" translate="yes" xml:space="preserve">
          <source>could return &lt;code&gt;false&lt;/code&gt;! Each individual &lt;a href=&quot;../../api/javascript/get/index&quot;&gt;get&lt;/a&gt; operation is atomic, but the query as a whole is not. To read and modify a document in a single atomic operation, use the &lt;a href=&quot;../../api/javascript/update/index&quot;&gt;update&lt;/a&gt; or &lt;a href=&quot;../../api/javascript/replace/index&quot;&gt;replace&lt;/a&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="825b192e87a09e48fa7650bc8b5c00660b37183c" translate="yes" xml:space="preserve">
          <source>current_issues</source>
          <target state="translated">current_issues</target>
        </trans-unit>
        <trans-unit id="233e3ce74af9b1e2688f1f811ea11b8770173d6e" translate="yes" xml:space="preserve">
          <source>data that is &lt;em&gt;not&lt;/em&gt; a stream will be handled by &lt;code&gt;on_atom&lt;/code&gt; if defined; otherwise it will be handled by &lt;code&gt;on_val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d613a1ee01eec4c0f8ca66df0db71dca0c6e1cf" translate="yes" xml:space="preserve">
          <source>database</source>
          <target state="translated">database</target>
        </trans-unit>
        <trans-unit id="03b1cc5f2e973088b9bb7dc062fee46bd8f432e7" translate="yes" xml:space="preserve">
          <source>database (affecting a database and the tables within)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="a2620cbc10f5198dd03e3f5a1569eb5dcf9a6a87" translate="yes" xml:space="preserve">
          <source>day</source>
          <target state="translated">day</target>
        </trans-unit>
        <trans-unit id="d096c011585d07ea34d552634cab76998611ecd3" translate="yes" xml:space="preserve">
          <source>dayOfWeek</source>
          <target state="translated">dayOfWeek</target>
        </trans-unit>
        <trans-unit id="7d0afeccbd861b481e5513e7daf9473833eacec3" translate="yes" xml:space="preserve">
          <source>dayOfYear</source>
          <target state="translated">dayOfYear</target>
        </trans-unit>
        <trans-unit id="0352a8acc949c7df21fec16e566ba9a74e797a97" translate="yes" xml:space="preserve">
          <source>db</source>
          <target state="translated">db</target>
        </trans-unit>
        <trans-unit id="c6b86d9568cd42b1afb45d6533e1f5b6cc2dbfe9" translate="yes" xml:space="preserve">
          <source>dbCreate</source>
          <target state="translated">dbCreate</target>
        </trans-unit>
        <trans-unit id="3632550442fe7f7fb5788d44a3c05e77e638473d" translate="yes" xml:space="preserve">
          <source>dbDrop</source>
          <target state="translated">dbDrop</target>
        </trans-unit>
        <trans-unit id="8f9451107ae4c39ed8e37bcc9cfc7ffc3c891664" translate="yes" xml:space="preserve">
          <source>dbList</source>
          <target state="translated">dbList</target>
        </trans-unit>
        <trans-unit id="b7ff13c07403be6a24a21282f1e7367c3f378d23" translate="yes" xml:space="preserve">
          <source>db_config</source>
          <target state="translated">db_config</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="5a5ecfe6db57773e77aaacb83bd9dda4c230a08f" translate="yes" xml:space="preserve">
          <source>deleteAt</source>
          <target state="translated">deleteAt</target>
        </trans-unit>
        <trans-unit id="48d53c6e22192bbaaff43be3456d5f6f5d82da6f" translate="yes" xml:space="preserve">
          <source>difference</source>
          <target state="translated">difference</target>
        </trans-unit>
        <trans-unit id="8ae18ed496a7c0132f6bdd4064c9122781c753c0" translate="yes" xml:space="preserve">
          <source>disk_compaction</source>
          <target state="translated">disk_compaction</target>
        </trans-unit>
        <trans-unit id="104082c0efcf62ca0e142ebdffe15221e79de79d" translate="yes" xml:space="preserve">
          <source>distance</source>
          <target state="translated">distance</target>
        </trans-unit>
        <trans-unit id="21a08d6787a0d64238e8d57c9b087a45f1a70665" translate="yes" xml:space="preserve">
          <source>distinct</source>
          <target state="translated">distinct</target>
        </trans-unit>
        <trans-unit id="26021f1f4700496d68e21ef6d4a1b6945da4c8eb" translate="yes" xml:space="preserve">
          <source>div</source>
          <target state="translated">div</target>
        </trans-unit>
        <trans-unit id="eadcd9bd2a09c75aef04954e6799e50278ee124a" translate="yes" xml:space="preserve">
          <source>do</source>
          <target state="translated">do</target>
        </trans-unit>
        <trans-unit id="4f8278c89ad16da05fec4fdfc61fe44798b92720" translate="yes" xml:space="preserve">
          <source>document</source>
          <target state="translated">document</target>
        </trans-unit>
        <trans-unit id="e4370fb0ea59e2aeb0cf8fec4afadb0dd1b956c6" translate="yes" xml:space="preserve">
          <source>downcase</source>
          <target state="translated">downcase</target>
        </trans-unit>
        <trans-unit id="ffed391ca2a6c8bb0b20f95bace87ef78d0c9f59" translate="yes" xml:space="preserve">
          <source>during</source>
          <target state="translated">during</target>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="translated">each</target>
        </trans-unit>
        <trans-unit id="b1dbc1e1373091420361bccbec082ea83c366e5c" translate="yes" xml:space="preserve">
          <source>eachAsync</source>
          <target state="translated">eachAsync</target>
        </trans-unit>
        <trans-unit id="b07623c2ca4a8d4da83b94812562e891cb5c7139" translate="yes" xml:space="preserve">
          <source>epochTime</source>
          <target state="translated">epochTime</target>
        </trans-unit>
        <trans-unit id="a9c619705e8fcaa770885cac1837ae950f5c8ba5" translate="yes" xml:space="preserve">
          <source>eq</source>
          <target state="translated">eq</target>
        </trans-unit>
        <trans-unit id="e6fd069581a9f3fdcf06a7b624e63f0074e8b36f" translate="yes" xml:space="preserve">
          <source>eqJoin</source>
          <target state="translated">eqJoin</target>
        </trans-unit>
        <trans-unit id="f4ee2443ea84bd630ec142e6d14d7252fe5b111a" translate="yes" xml:space="preserve">
          <source>eq_join</source>
          <target state="translated">eq_join</target>
        </trans-unit>
        <trans-unit id="11f9578d05e6f7bb58a3cdd00107e9f4e3882671" translate="yes" xml:space="preserve">
          <source>error</source>
          <target state="translated">error</target>
        </trans-unit>
        <trans-unit id="0fd1860204d6cee43392972817e66792ee702b89" translate="yes" xml:space="preserve">
          <source>expr</source>
          <target state="translated">expr</target>
        </trans-unit>
        <trans-unit id="2da0b68df8841752bb747a76780679bcd87c6215" translate="yes" xml:space="preserve">
          <source>field</source>
          <target state="translated">field</target>
        </trans-unit>
        <trans-unit id="7aec9744ba1554e4d38febae4278e74a5e764414" translate="yes" xml:space="preserve">
          <source>fill</source>
          <target state="translated">fill</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="3684c9d3c05e7bee19e2728c6a5b2bbccf0cd9c7" translate="yes" xml:space="preserve">
          <source>floor</source>
          <target state="translated">floor</target>
        </trans-unit>
        <trans-unit id="43402b235d9049b59f92a603a9cf29e68b57c71c" translate="yes" xml:space="preserve">
          <source>fluent-plugin-rethinkdb</source>
          <target state="translated">fluent-plugin-rethinkdb</target>
        </trans-unit>
        <trans-unit id="c5b2b01d33b40a69b0f829fd1827cb8201538518" translate="yes" xml:space="preserve">
          <source>fold</source>
          <target state="translated">fold</target>
        </trans-unit>
        <trans-unit id="7baf67ac9de40c6fc6e4dfd610bab1343f7292a2" translate="yes" xml:space="preserve">
          <source>for each element in the sequence, call both the combining function and a separate emitting function. The emitting function takes three parameters: the previous reduction result (the accumulator), the current element, and the output from the combining function (the new value of the accumulator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc5ee22beb2b82f4da41914d8d41cca9c53020f" translate="yes" xml:space="preserve">
          <source>forEach</source>
          <target state="translated">forEach</target>
        </trans-unit>
        <trans-unit id="96acf00f78ac6bb5cac1dec9c262de290a22dbb2" translate="yes" xml:space="preserve">
          <source>function: the &lt;code&gt;interleave&lt;/code&gt; argument can take a function whose argument is the current row, and whose return value is a string to take as a field name, as with the &lt;code&gt;&quot;field_name&quot;&lt;/code&gt; setting described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9060bd5525711459bfd3fbd9a5d9658cfa6338a" translate="yes" xml:space="preserve">
          <source>ge</source>
          <target state="translated">ge</target>
        </trans-unit>
        <trans-unit id="b582f58d189d192b7d2998328bbf22a0ed59b60d" translate="yes" xml:space="preserve">
          <source>geojson</source>
          <target state="translated">geojson</target>
        </trans-unit>
        <trans-unit id="65e4e3da890302538dd75ff31b491e3c7fef5d76" translate="yes" xml:space="preserve">
          <source>geometry objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="translated">get</target>
        </trans-unit>
        <trans-unit id="159ecaec32b351286f1d86013ef0ed8ee1ad6934" translate="yes" xml:space="preserve">
          <source>getAll</source>
          <target state="translated">getAll</target>
        </trans-unit>
        <trans-unit id="a1f20c8f5186bb9d998515a2d95409450015f95f" translate="yes" xml:space="preserve">
          <source>getField</source>
          <target state="translated">getField</target>
        </trans-unit>
        <trans-unit id="9296baea6e69026f29ae352a59cfa8236933d146" translate="yes" xml:space="preserve">
          <source>getIntersecting</source>
          <target state="translated">getIntersecting</target>
        </trans-unit>
        <trans-unit id="84020c79c2c513336c8ad5755f06c427fc2a4fba" translate="yes" xml:space="preserve">
          <source>getNearest</source>
          <target state="translated">getNearest</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
