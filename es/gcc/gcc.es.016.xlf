<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="gcc">
    <body>
      <group id="gcc">
        <trans-unit id="6c42996236e2d6ebef3528b3bfcb039bd6feae51" translate="yes" xml:space="preserve">
          <source>option is implicitly enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8d3731f18975207f08659380198a45fc6b10c5" translate="yes" xml:space="preserve">
          <source>option is in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7742c4c8ec18899c2bbb8fa684bd2c363c169e5b" translate="yes" xml:space="preserve">
          <source>option is in effect. Such calls should only be made in debugging situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d068bce9dbcb3ac97b0ab8eef2e886a33ea1cf" translate="yes" xml:space="preserve">
          <source>option is incompatible with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155788c34898ca82eedd498bca3206699a6df45d" translate="yes" xml:space="preserve">
          <source>option is not used, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698e1d93daccf4250a488f1990e99e5804151943" translate="yes" xml:space="preserve">
          <source>option is not used, then this links against the shared version of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283301dc65fe35ea28042d695a6ce845476338b6" translate="yes" xml:space="preserve">
          <source>option is now mapped to the machine-independent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7e2f202e66b1b89ad93426ba53749908451b17" translate="yes" xml:space="preserve">
          <source>option is on by default if you configured GCC using one of the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f85fedff0951cf637f92da2e473300d246e726" translate="yes" xml:space="preserve">
          <source>option is on by default if you optimize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22338c91254dea60cc9374165ed8f97e583b04c" translate="yes" xml:space="preserve">
          <source>option is one way to define a macro before a precompiled header is included; using a &lt;code&gt;#define&lt;/code&gt; can also do it. There are also some options that define macros implicitly, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2278598375cc4bd0c1861d49e216f19421d91e82" translate="yes" xml:space="preserve">
          <source>option is passed directly to the linker by GCC. Refer to your linker documentation for exact details. The general description below applies to the GNU linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccb15653f7fecaaca3a6db868f3593cb962acfc" translate="yes" xml:space="preserve">
          <source>option is required to handle the &lt;code&gt;interrupt&lt;/code&gt; and &lt;code&gt;isr&lt;/code&gt; function attributes (see &lt;a href=&quot;c_002dsky-function-attributes#C_002dSKY-Function-Attributes&quot;&gt;C-SKY Function Attributes&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e971ecfa108c81d54394f6f895c4229160f1612" translate="yes" xml:space="preserve">
          <source>option is selected by default. In that case, GCC allocates at least one TOC entry for each unique non-automatic variable reference in your program. GCC also places floating-point constants in the TOC. However, only 16,384 entries are available in the TOC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142098a013f809a00674580dfce0021606cee1b3" translate="yes" xml:space="preserve">
          <source>option is set to 0 (its default value) then any newline characters will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbf21dac8fde6f865a0d08382872528538185b1" translate="yes" xml:space="preserve">
          <source>option is set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065e9a4396687d6dff0b62948c2f4a30b67ecd39" translate="yes" xml:space="preserve">
          <source>option is significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639bc2001aba85fab26eae817ccf8a78a6edf8ff" translate="yes" xml:space="preserve">
          <source>option is specified on HP-UX 10 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160fcb33b5d143f1c50a0ead1519c1ececb63b52" translate="yes" xml:space="preserve">
          <source>option is specified or if the MCU name is not recognized then no hardware multiply support is assumed. &lt;code&gt;auto&lt;/code&gt; is the default setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaf529291211d03977a90185687ffecd917bf70" translate="yes" xml:space="preserve">
          <source>option is specified, special link options are needed to resolve this dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3addc8d3e7505800c3df681a5f4cc6a97e26a3ac" translate="yes" xml:space="preserve">
          <source>option is specified. This causes the resulting binary to be dynamic. On the 64-bit port, the linkers generate dynamic binaries by default in any case. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958498c4e730b44e520552b55b318fdbbf8d7da0" translate="yes" xml:space="preserve">
          <source>option is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d7d010eca8a8f8fc4cd1e3effe435954532cc7" translate="yes" xml:space="preserve">
          <source>option is the same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cfc0e9da1b5c4d8135db38b8ae27fb9bc66d9d" translate="yes" xml:space="preserve">
          <source>option is used or if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7af6830a314878f50a5580880849f792231fe8d" translate="yes" xml:space="preserve">
          <source>option is used to link a program, the GCC driver automatically links against</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38029598e3bdd5c4728d38a01f95e345be0cb2e8" translate="yes" xml:space="preserve">
          <source>option is used to optimize rounding a floating-point value to 64-bit integer and back to floating point. The &lt;code&gt;friz&lt;/code&gt; instruction does not return the same value if the floating-point number is too large to fit in an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cfe6d350f26007f567cbb097e0caee7053f091" translate="yes" xml:space="preserve">
          <source>option is used to optimize rounding of floating-point values to 64-bit integer and back to floating point. The &lt;code&gt;friz&lt;/code&gt; instruction does not return the same value if the floating-point number is too large to fit in an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545613b1d145822f281aa80db776d7d180f810f9" translate="yes" xml:space="preserve">
          <source>option is used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25341366672ea899c91bd7a2d6a831cb67fb0ca3" translate="yes" xml:space="preserve">
          <source>option is used, the temporary files are based on the object file. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f24fd5859f9d4d6609ee685e8e95cdbae6c34d6" translate="yes" xml:space="preserve">
          <source>option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50417cc69542ac2133863c4060db041fb42a650c" translate="yes" xml:space="preserve">
          <source>option is used. If GCC is tuning for a range of architectures, as selected by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7be57680ccc8b3d5b244eff476b42a5a9949a8" translate="yes" xml:space="preserve">
          <source>option is used. Some header files may notice this macro and refrain from declaring certain functions or defining certain macros that the ISO standard doesn&amp;rsquo;t call for; this is to avoid interfering with any programs that might use these names for other things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f66c987480b9549e0566190a7d97e32b5aef89e" translate="yes" xml:space="preserve">
          <source>option is used. They support shadow stack machine instructions from Intel Control-flow Enforcement Technology (CET). Each built-in function generates the machine instruction that is part of the function&amp;rsquo;s name. These are the internal low-level functions. Normally the functions in &lt;a href=&quot;x86-control_002dflow-protection-intrinsics#x86-control_002dflow-protection-intrinsics&quot;&gt;x86 control-flow protection intrinsics&lt;/a&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987ca1f27e389846643dbd91fd413a78243757d9" translate="yes" xml:space="preserve">
          <source>option may be required when linking to avoid references to undefined symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e214ac6206d12a306bb8b7046a4d27825b2e8062" translate="yes" xml:space="preserve">
          <source>option may be used to determine if a function has not been inlined and why not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a0479649ef6a2d8636b36a6a11e28af759f2b3" translate="yes" xml:space="preserve">
          <source>option may be used to store the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c0447caa8a86d2b46fc31d822868089e926e0c" translate="yes" xml:space="preserve">
          <source>option must be set to one of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eff5549e5a6f58057d080064c5a6ffbe7f92c89" translate="yes" xml:space="preserve">
          <source>option on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a11a3bcef543bf6ba980f9f4f2aff6038315afb" translate="yes" xml:space="preserve">
          <source>option on the command line. Thus specifying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70799218b18161ebe10a6e2c599489986a4c04f" translate="yes" xml:space="preserve">
          <source>option only the built-in function &lt;var&gt;function&lt;/var&gt; is disabled. &lt;var&gt;function&lt;/var&gt; must not begin with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca9ed989ff0d82f1812f020bc3cd5ab421f8fa9" translate="yes" xml:space="preserve">
          <source>option only uses &lt;code&gt;r13&lt;/code&gt; to point to a single small data area. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5c7eab5d0e14f1d14c19728b2869b00391854a" translate="yes" xml:space="preserve">
          <source>option or by default with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3218179ea045addf2566281dfbe97ae59417691" translate="yes" xml:space="preserve">
          <source>option or that of the CPU on which GCC was built if none is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302291a68496861f6d0519ecc6604347c254422c" translate="yes" xml:space="preserve">
          <source>option or the &lt;code&gt;cpu=&lt;/code&gt; attribute conflicts with the architectural feature rules specified above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3444ee7bdba9ad639624796dde67cdc89f5e95" translate="yes" xml:space="preserve">
          <source>option prefix and invoke GCC with it. For example, to enable the dump from the Early Value Range Propagation pass, invoke GCC with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06452c5a974f37a6f2859b28f764719cab56390" translate="yes" xml:space="preserve">
          <source>option rather than the options listed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7898b6a381a553f6c801d2693314062b94635677" translate="yes" xml:space="preserve">
          <source>option relies on other optimizations and yields best results with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53d1373abbfe0bc4640f43955a364fd98c361db" translate="yes" xml:space="preserve">
          <source>option requires use of 64-bit mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb877c14377d9b6d9cb38fb68342de28a1a3bc5" translate="yes" xml:space="preserve">
          <source>option says not to run the linker. Then the output consists of object files output by the assembler. See &lt;a href=&quot;overall-options#Overall-Options&quot;&gt;Options Controlling the Kind of Output&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ef16c8c96235418858bd19681527a8e40fe7f5" translate="yes" xml:space="preserve">
          <source>option see &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C Dialect Options&lt;/a&gt;). Many of these functions are only optimized in certain cases; if they are not optimized in a particular case, a call to the library function is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4eecf2e2ac2e8fc821da96a5472e31b06eff16" translate="yes" xml:space="preserve">
          <source>option selects the IEEE 754-2008 encoding. In this case qNaNs are denoted by the first bit of their trailing significand field being 1, whereas sNaNs are denoted by the first bit of their trailing significand field being 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b0be1ac11674835580ca81056dbb42454ef5c6" translate="yes" xml:space="preserve">
          <source>option selects the IEEE 754-2008 treatment. In this case these instructions are considered non-arithmetic and therefore operating correctly in all cases, including in particular where the input operand is a NaN. These instructions are therefore always used for the respective operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd57a2ab05c9a605c3f39a2d9c9a0a503287eb2b" translate="yes" xml:space="preserve">
          <source>option selects the legacy encoding. In this case quiet NaNs (qNaNs) are denoted by the first bit of their trailing significand field being 0, whereas signaling NaNs (sNaNs) are denoted by the first bit of their trailing significand field being 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3aeac01025158d52a0c932636dfbe16b8613fa6" translate="yes" xml:space="preserve">
          <source>option sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474c18e8be3d8608db6c77194e3b5459b085d638" translate="yes" xml:space="preserve">
          <source>option sets &lt;code&gt;int&lt;/code&gt; to 32 bits and &lt;code&gt;long&lt;/code&gt; and pointer types to 64 bits, and generates code for the x86-64 architecture. For Darwin only the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f451c6058a7aaafcca7a25e6f26f3daa9b4b3a1" translate="yes" xml:space="preserve">
          <source>option sets &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, and pointer types to 32 bits, and generates code for the x86-64 architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6a4e9e27bb9ffe1e4e6e8db44b617dec55b92f" translate="yes" xml:space="preserve">
          <source>option sets &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, and pointer types to 32 bits, and generates code that runs on any i386 system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36fbad9c65f14c5848e5b3c1b53558840880cb6" translate="yes" xml:space="preserve">
          <source>option sets some of these parameters as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c0960931f4f201c44c0b55ea919e778fdb4326" translate="yes" xml:space="preserve">
          <source>option sets the target to be exactly the string you specify. If you want multiple targets, you can specify them as a single argument to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e1b754e437bac30163f26a106b00e438e1f313" translate="yes" xml:space="preserve">
          <source>option should be used to select the ISA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606c8887b3e72eada76188da2e0b08a0b60fb460" translate="yes" xml:space="preserve">
          <source>option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbdf378d0631d64f94600e68b61ce5f6a54a4da" translate="yes" xml:space="preserve">
          <source>option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce7ccfd3b629e4b573caf2ea7f8d241b7c9f5af" translate="yes" xml:space="preserve">
          <source>option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications. Enables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c151280c018091abe2ba6c1f76dde5f9728829" translate="yes" xml:space="preserve">
          <source>option specifies that the compiler should instead place uninitialized global variables in the BSS section of the object file. This inhibits the merging of tentative definitions by the linker so you get a multiple-definition error if the same variable is defined in more than one compilation unit. Compiling with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b34d78007ccae53b7e3162e0683921257fd1978" translate="yes" xml:space="preserve">
          <source>option specifying a version of ISO C before C99, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd9f33e0cfbc6720c22fab7b613be37d1200fb4" translate="yes" xml:space="preserve">
          <source>option specifying the required version of ISO C). However, without this option, certain GNU extensions and traditional C and C++ features are supported as well. With this option, they are rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d753e41b94988f49e90557a1e12cd2d759b3d67" translate="yes" xml:space="preserve">
          <source>option tells GCC to issue warnings in such cases;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b70afb4609eb4e1e3925d5a751b29a86e7b419" translate="yes" xml:space="preserve">
          <source>option the compiler may also perform optimizations based on the knowledge that certain function arguments cannot be null. In addition, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c138e429abffb737a930e6f8c143af3eec84c3" translate="yes" xml:space="preserve">
          <source>option to be turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cb3922bdb14988afb9173984759de0edf03f13" translate="yes" xml:space="preserve">
          <source>option to change the debug level for DWARF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195d28fce4963fdb68b896c7e405027c133944fb" translate="yes" xml:space="preserve">
          <source>option to determine if the statements line up (defaulting to 8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a677e90bdd3263a5acbc95d7189c9f86011f6e2e" translate="yes" xml:space="preserve">
          <source>option to disable use of these instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618509ccbcc793fad87cbe58ed7054893d667b37" translate="yes" xml:space="preserve">
          <source>option to make the driver treat it as a C or C++ header file. You may want to use a tool like &lt;code&gt;make&lt;/code&gt; to keep the precompiled header up-to-date when the headers it contains change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc455062049e591dac8cd996daf7e8ff97f359d" translate="yes" xml:space="preserve">
          <source>option to produce reproducibly identical object files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a489b88df78feefea5f0c524313a95f24a3e488" translate="yes" xml:space="preserve">
          <source>option to select a half-precision format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8087f3cd1951852e83b835316cf290ba2ca2c3e3" translate="yes" xml:space="preserve">
          <source>option to specify the appropriate directory location. The Parallel Environment does not support threads, so the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647e6d0b7219942c98f891479ddde937445aebb7" translate="yes" xml:space="preserve">
          <source>option to the assembler&amp;rsquo;s command line and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb20e131462234e92a876450545dd02a714395b0" translate="yes" xml:space="preserve">
          <source>option to the linker&amp;rsquo;s command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f7147335ef0e581d3872234a39deec02e954e7" translate="yes" xml:space="preserve">
          <source>option used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd195a00eb9ae43f4be7347ef87b72cc5ce6a800" translate="yes" xml:space="preserve">
          <source>option uses type-one Object Size Checking to determine the sizes of destination objects. At this setting the option will warn about overflows when writing to members of the largest complete objects whose exact size is known. It will, however, not warn for excessive writes to the same members of unknown objects referenced by pointers since they may point to arrays containing unknown numbers of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c46a4cc350e57b21d463f3b6e2eb8a11b557605" translate="yes" xml:space="preserve">
          <source>option uses type-three Object Size Checking to determine the sizes of destination objects. At this setting the option will warn about overflowing any data members, and when the destination is one of several objects it uses the size of the largest of them to decide whether to issue a warning. Similarly to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dba423fdf620226f335d80eb9fce76849ab7d12" translate="yes" xml:space="preserve">
          <source>option uses type-two Object Size Checking to determine the sizes of destination objects. At this setting the option warns about overflowing the smallest object or data member. This is the most restrictive setting of the option that may result in warnings for safe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d242422f76c043f0f66857cf31bb84f1bb178f" translate="yes" xml:space="preserve">
          <source>option uses type-zero Object Size Checking to determine the sizes of destination objects. This is the default setting of the option. At this setting the option will not warn for writes past the end of subobjects of larger objects accessed by pointers unless the size of the largest surrounding object is known. When the destination may be one of several objects it is assumed to be the largest one of them. On Linux systems, when optimization is enabled at this setting the option warns for the same code as when the &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt; macro is defined to a non-zero value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a993932d961834d940dc2b519f07e7c70bf3ae" translate="yes" xml:space="preserve">
          <source>option was used or NO_REGS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0162288f7a06a9f7c6cf6c001f9121f08a51a15" translate="yes" xml:space="preserve">
          <source>option when the object file is loaded (if you wonder how it works behind the scenes, the name of the class to use, and the list of static objects to fixup, are stored by the compiler in the object file in a place where the GNU runtime library will find them at runtime).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acbcaca19a233c57d6f548357d5b0c3d4e0f50b" translate="yes" xml:space="preserve">
          <source>option when using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fd33bfafa5064d7c74c3bd9b2a6f47049d229a" translate="yes" xml:space="preserve">
          <source>option will cause a delay slot branch to be used if one is available in the current ISA and the delay slot is successfully filled. If the delay slot is not filled, a compact branch will be chosen if one is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46381be9cccc614326f81c58066347e7a8d596e" translate="yes" xml:space="preserve">
          <source>option with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a2153f862d7eb9bd8a8632a1b0c4cef1124033" translate="yes" xml:space="preserve">
          <source>option) these options may lead to smaller statically-linked executables (after stripping).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a692e613a7a6a7652c7d9973b1427540623861d9" translate="yes" xml:space="preserve">
          <source>option), then command-line options that have no documentation associated with them are also displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b41452a86bc3045d725a02ac0c781764e98c63b" translate="yes" xml:space="preserve">
          <source>option,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc4abb62c6c097876742064d06d7df9647e2922" translate="yes" xml:space="preserve">
          <source>option, all the constant string objects will be instances of the class specified as argument to this option. It is possible to have multiple compilation units referring to different constant string classes, neither the compiler nor the linker impose any restrictions in doing this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ab72a8be255c5b1b55d26cef7da25e50749b66" translate="yes" xml:space="preserve">
          <source>option, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0101953a74c30a70bf8eccd98a8bfc5ffdd20156" translate="yes" xml:space="preserve">
          <source>option, and pass the option to GCC when linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c074a36ef1a63be5800724ed506dc61cdd0c8889" translate="yes" xml:space="preserve">
          <source>option, and the specified sections are in addition to the standard &lt;code&gt;.sdata&lt;/code&gt; and &lt;code&gt;.sbss&lt;/code&gt; small-data sections that are recognized by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0203ec35d276f5572d29330355488dcff2f18e3a" translate="yes" xml:space="preserve">
          <source>option, but applies only to header files (except for Darwin targets, where it applies to both header files and libraries). See the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ccd38f4468736e99117dd4b8c35cc860efe7f2" translate="yes" xml:space="preserve">
          <source>option, but not the &lt;code&gt;longcall&lt;/code&gt; and &lt;code&gt;shortcall&lt;/code&gt; attributes. See &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS/6000 and PowerPC Options&lt;/a&gt;, for more information about when long calls are and are not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cb0002dc5d65bb4411a427dd86d48370e94300" translate="yes" xml:space="preserve">
          <source>option, but only applies to the marked symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071de58e647aeb421b3353d211a92b548d12d4df" translate="yes" xml:space="preserve">
          <source>option, if also present, overrides the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30db58c2f49ab676a719cbcb35c8cab9e26217d9" translate="yes" xml:space="preserve">
          <source>option, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c49621aac21e786d1aa9c8962a3a21e4896dae" translate="yes" xml:space="preserve">
          <source>option, nothing is done except preprocessing. Some of these options make sense only together with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e351bb85ba6505ca3449315515c8f1aa2fe17eed" translate="yes" xml:space="preserve">
          <source>option, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a42b21393627152c1d48111e8fe3121b0fad14" translate="yes" xml:space="preserve">
          <source>option, or a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a58b317784082f10c31c65eaa18c8dabbe040" translate="yes" xml:space="preserve">
          <source>option, or when using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef90b2d15a8dd3c10d242294f7c1604f249860df" translate="yes" xml:space="preserve">
          <source>option, possibly with an extra suffix that depends on compilation options. If no target sysroot is specified, the option prints nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca06f45b34999ef78d83680cc23aee4feb47bec5" translate="yes" xml:space="preserve">
          <source>option, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d3448fbe644368769b419fa3ab5e706b8e25cd" translate="yes" xml:space="preserve">
          <source>option, the compiler provides 128-bit vector types, which can be specified using the &lt;code&gt;vector_size&lt;/code&gt; attribute. The header file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ec004bd5a3df7eae38cf72b5bebf8e23c28643" translate="yes" xml:space="preserve">
          <source>option, then methods inherited from the superclass are considered to be implemented, and no warning is issued for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24598817f434614adca96fc1e1534221c91ddec8" translate="yes" xml:space="preserve">
          <source>option, then the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2e094792937dea47568002b38399ff66687c2d" translate="yes" xml:space="preserve">
          <source>option, then the descriptive text displayed by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f8a869bcd704a1851eee8e4bba471f96c1d65e" translate="yes" xml:space="preserve">
          <source>option, which controls diagnostics when the alias declaration is less restrictive than the target, rather than more restrictive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e218b181a908df1326c29d68edd502cf48350b75" translate="yes" xml:space="preserve">
          <source>option, you will get a warning when GCC thinks such a problem might be possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb6cf7c6a0b3c6cd046571b0b33dde9cfda432b" translate="yes" xml:space="preserve">
          <source>option, you will get individual block counts, and the output looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731fc099a23e11f31fc787ad8d3f6363c9d7a316" translate="yes" xml:space="preserve">
          <source>option, your output looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cb917fa6b139c69bd08293a23c4256c452e570" translate="yes" xml:space="preserve">
          <source>option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466a740feeea0149fc4c9b053d497e2d66f9f4f6" translate="yes" xml:space="preserve">
          <source>option. For example, if GCC is configured for i686-pc-linux-gnu then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c70b57e36ef438060d1b920e147723059011d6" translate="yes" xml:space="preserve">
          <source>option. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59282fc66781c369772d2d554e015b7262a0cdb9" translate="yes" xml:space="preserve">
          <source>option. For using HLE (Hardware Lock Elision) see &lt;a href=&quot;x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory&quot;&gt;x86 specific memory model extensions for transactional memory&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e65edad11046e4fa3082592c969e144605ea57e" translate="yes" xml:space="preserve">
          <source>option. However, you may wish to build a library that supports several different small data limits. You can do this by compiling the library with the highest supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd038161e2e0e5d36f70eb30ad06258eadc312a" translate="yes" xml:space="preserve">
          <source>option. If a source file is changed between compiling with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaa20ab527d3187928237e4009fac67b0ec7511" translate="yes" xml:space="preserve">
          <source>option. If no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b701de2006f077484bdf0b9205122e62f0756d5" translate="yes" xml:space="preserve">
          <source>option. It also toggles warnings about unrecognized MCU names. This option is on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fafd4b9099a8a5bfd5b59e18393e2a99fae7fe" translate="yes" xml:space="preserve">
          <source>option. It contains information to reconstruct the basic block graphs and assign source line numbers to blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c4bb76d5ae44aa71f9d0ea707efef59abb4917" translate="yes" xml:space="preserve">
          <source>option. It is expected in future versions of GCC that &lt;code&gt;_Float128&lt;/code&gt; and &lt;code&gt;__float128&lt;/code&gt; will be enabled automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd88e712bccb06d76c2c895d77a3103cdcb11f20" translate="yes" xml:space="preserve">
          <source>option. Optionally, you may specify the name of the dump file. If you don&amp;rsquo;t specify one, GCC creates as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dae8516b03f263deb6b709a4833f7cbfc0b99f" translate="yes" xml:space="preserve">
          <source>option. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d571f81ba5e387a7d503ec974fa143e188347a8" translate="yes" xml:space="preserve">
          <source>option. Possible values for &lt;var&gt;language&lt;/var&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f3a47eb7270a8f0cfb2935716b2c3bd0c1dbfc" translate="yes" xml:space="preserve">
          <source>option. Requires</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295d1c5f08b267bfd32f863e6ef18b2548b4415d" translate="yes" xml:space="preserve">
          <source>option. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5173227627b40d36c6ff9690526810462e37fe" translate="yes" xml:space="preserve">
          <source>option. The &lt;code&gt;no_address_safety_analysis&lt;/code&gt; is a deprecated alias of the &lt;code&gt;no_sanitize_address&lt;/code&gt; attribute, new code should use &lt;code&gt;no_sanitize_address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc5d8bd06b2f113f79309e5f4165bce9f4af01b" translate="yes" xml:space="preserve">
          <source>option. The compiler assumes that the function&amp;rsquo;s address from the pointer is a valid target for a control-flow transfer. A direct function call through a function name is assumed to be a safe call thus direct calls are not instrumented by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0834c32763c56357f5cb6b9a2d62665310901e90" translate="yes" xml:space="preserve">
          <source>option. The compiler assumes that the function&amp;rsquo;s address is a valid target for a control-flow transfer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5dfaafb2a0936ccf61db324ab2169972602c06" translate="yes" xml:space="preserve">
          <source>option. The following &lt;var&gt;switch&lt;/var&gt; values are accepted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905ed4bb022e73fcc92dfcb72e2dd1f9d189a5e6" translate="yes" xml:space="preserve">
          <source>option. They are provided for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c66e76b30dbc243181e01687315e2dd6a4045b3" translate="yes" xml:space="preserve">
          <source>option. This functionality is not supported in Ada.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96353acc59c6008c30021210cf7a8ad12b691ee" translate="yes" xml:space="preserve">
          <source>option. This option diagnoses those cases where a new function or a new file is added to the user code between compiling with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e3091d2263a37bcb546a39c42cc76c616446d6" translate="yes" xml:space="preserve">
          <source>option. To disable global objects protection use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc237e45ebb58d2ad70d8a872ff419f3eaaa738e" translate="yes" xml:space="preserve">
          <source>option. To disable it use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba31bf233e681b2bb5aeca757d8fed32033fff93" translate="yes" xml:space="preserve">
          <source>option. When compiling,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8cce1aac72198876d1e8f94b8623cb28c63570" translate="yes" xml:space="preserve">
          <source>option. With default configuration options for G++ 3.3 the compile line for a different C++ compiler needs to include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a80f3b4554bfb3c4bdcb27ad9cd931f6525ca6c" translate="yes" xml:space="preserve">
          <source>option. You do not need to profile every source file in a program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc43695f5295bc5aa1b42c813c85825b5ac4b05b" translate="yes" xml:space="preserve">
          <source>option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ee120fe7ec6b1a1cea469c693861b01b165455" translate="yes" xml:space="preserve">
          <source>option; if you wish to enable built-in functions selectively when using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaa6d5ac1dfa500abd78c17f69dab63fb485980" translate="yes" xml:space="preserve">
          <source>options (and the directory of the current file, if appropriate) are searched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961ebcbff2e35d0425def6b2efd20d2c69949c5" translate="yes" xml:space="preserve">
          <source>options (for instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5637e1f515e1bd63786d65bd0d81a490d0db9c" translate="yes" xml:space="preserve">
          <source>options after the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e00e42cd1f2c462ff3e97d71e0c095c133bf7ef" translate="yes" xml:space="preserve">
          <source>options also mark the directory as a system directory, so that it gets the same special treatment that is applied to the standard system directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9863979c5aea497287ecc7c626904d0e4b88e68f" translate="yes" xml:space="preserve">
          <source>options and any non-options ending in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36eef1a16c2b5c53d95753879a8109f1e1b57fe8" translate="yes" xml:space="preserve">
          <source>options and are scanned in a left-to-right order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed9806dd6a7f8cb385947f445122dad31fdb145" translate="yes" xml:space="preserve">
          <source>options are accepted, only one of them can include a &lt;var&gt;filename&lt;/var&gt;. If other filenames are provided then all but the first such option are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa0d94025c288ae075a56344574f02df0a799e5" translate="yes" xml:space="preserve">
          <source>options are defined for Matsushita MN10300 architectures:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8471799e71b5bc05fccbd68284bedd3bc68cdc2e" translate="yes" xml:space="preserve">
          <source>options are defined for Renesas M32R/D architectures:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ad540802cb992a0640a6e8741cddfa34c9c245" translate="yes" xml:space="preserve">
          <source>options are defined for the LatticeMico32 architecture:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8002a55d0f826848f3a4d1118d9322d4f0d0a449" translate="yes" xml:space="preserve">
          <source>options are given, the files are included in the order they appear on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b0a9086cceb16df9628d52f2ac420dda2f6006" translate="yes" xml:space="preserve">
          <source>options are not affected by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7802e50f6718c6a6c2dfc69142229bdc1437467" translate="yes" xml:space="preserve">
          <source>options are not enabled or disabled by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa92c508187be267d56be02e5f6b17f824a295f" translate="yes" xml:space="preserve">
          <source>options are processed after all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351455bffb495bc287e330484df5ab4b52c7c195" translate="yes" xml:space="preserve">
          <source>options are processed in the order they are given on the command line. All</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865de1cc3ae74e59257fab3f9b96acf68e8594b0" translate="yes" xml:space="preserve">
          <source>options are scanned in left-to-right order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3f7a484f6953ae6e974f0e505009902271d816" translate="yes" xml:space="preserve">
          <source>options are searched in left-to-right order, as they appear on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b3c0989341c22f60da4c3a5abaf4874725faf6" translate="yes" xml:space="preserve">
          <source>options are used when linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935e91c8f4b32a3f0e34c6639b23812dfafe26ca" translate="yes" xml:space="preserve">
          <source>options are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88935ba49098ba82e139cb57c034c011a33ddcff" translate="yes" xml:space="preserve">
          <source>options are used; it does so by running the compiler or linker multiple times and joining the results together with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853fc873754cbd8a6433f06423c3c68ce9684b55" translate="yes" xml:space="preserve">
          <source>options automatically enable or disable the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0026df4f092ee7d4f53b49743d09555645542d8d" translate="yes" xml:space="preserve">
          <source>options before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2bab938956a42dba5e6d31ffc3c20eff2ad216" translate="yes" xml:space="preserve">
          <source>options combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de94a4abcfeb1f59d6eebd1d82a3c398a3674aed" translate="yes" xml:space="preserve">
          <source>options describing the verbosity of the dump, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435054814dce0ac349ad84c4e7bdccb79d6e42cf" translate="yes" xml:space="preserve">
          <source>options describing what kinds of messages should be emitted,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7827b8dd13c6a10e22a1d4c042370f0e21134cf" translate="yes" xml:space="preserve">
          <source>options describing which optimizations should be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f8a989dcf7cf13873ed68effd0a291912e67af" translate="yes" xml:space="preserve">
          <source>options disable certain keywords. This causes trouble when you want to use GNU C extensions, or a general-purpose header file that should be usable by all programs, including ISO C programs. The keywords &lt;code&gt;asm&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt; are not available in programs compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ea980f150c21858120a447a6613cf80e02c8e2" translate="yes" xml:space="preserve">
          <source>options explicitly in combination with the above options if they are desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a3b4d537a68026a3e555f85122af94dd69bb72" translate="yes" xml:space="preserve">
          <source>options for strict ISO C conformance are used because they do not have an ISO standard meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa43f788727bd10e0b26a5699f31bd1c63695ecb" translate="yes" xml:space="preserve">
          <source>options for the linker. They also apply to include files in the preprocessor, because the compiler translates these options into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463ef9dd387cf0e1caf7f2c874fdbe45cfb3aaff" translate="yes" xml:space="preserve">
          <source>options for the preprocessor. In this case, the compiler appends &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36562d0efb6f86bc407b579bb1d39b4d1d22bfce" translate="yes" xml:space="preserve">
          <source>options imply &lt;code&gt;-mnobitfield&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bc9c666a568dbf8972fdbe70908b27fb513666" translate="yes" xml:space="preserve">
          <source>options listed above disables these extensions where they conflict with the C standard version selected. You may also select an extended version of the C language explicitly with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0153d8c0e5f4d00041273ccaed5c8c115954b3bd" translate="yes" xml:space="preserve">
          <source>options listed above disables these extensions where they they conflict with the C++ standard version selected. You may also select an extended version of the C++ language explicitly with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce26b91a77dc23db57d6b3616da584c6e116c8f" translate="yes" xml:space="preserve">
          <source>options must generally be used when building and using the precompiled header. See &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt;, for any cases where this rule is relaxed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc825d592042668c569d5020845cc81641e5c49" translate="yes" xml:space="preserve">
          <source>options on the command line (see &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS Options&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b082ae9de3acd1ceb7fbe14bea8af9ab122eb4e3" translate="yes" xml:space="preserve">
          <source>options on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577f6eb4ea91d0e7988cd6946ae2aa17071c3fdb" translate="yes" xml:space="preserve">
          <source>options on the command line. This environment variable is used regardless of which language is being preprocessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b933c066969c1105d8c566e9b9da4ac7765511bb" translate="yes" xml:space="preserve">
          <source>options or are related to ones that are. You can use the following flags in the rare cases when &amp;ldquo;fine-tuning&amp;rdquo; of optimizations to be performed is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c41982ce355dc069a79b65bb330cab942342aa" translate="yes" xml:space="preserve">
          <source>options override those given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff63916cb2219ee75df745076c8e2c97addee1a" translate="yes" xml:space="preserve">
          <source>options to retain these functions and allow gcov to properly show their &lt;var&gt;execution_count&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bd15a1e4fa8ae880ed653c896c81192545158e" translate="yes" xml:space="preserve">
          <source>options to specify an alternate preprocessor or perform additional processing of the program source between normal preprocessing and compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb7caaafd393cab01659746496c282d1e3c6612" translate="yes" xml:space="preserve">
          <source>options together under HP-UX with the SOM linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb1e36e5d09c17e0dda69625d9217a0d1e4f72c" translate="yes" xml:space="preserve">
          <source>options were used or NO_REGS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263945d6c2409dc6f4329b65ae9ed59429a56844" translate="yes" xml:space="preserve">
          <source>options with old compilers, but if something goes wrong, the compiler warns that an unrecognized option is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1b275baa7be0342417321600a8e67bc89fbf9c" translate="yes" xml:space="preserve">
          <source>options) and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b30a5a7a132699e3dc003a23ea41fddeeb7ed5" translate="yes" xml:space="preserve">
          <source>options, and selects corresponding multilib variant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f03042bf898bffcfb26d92b8b7e7a21c43c1e34" translate="yes" xml:space="preserve">
          <source>options, and the second function with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59096e9f140559cae684b40e593214b65c6b2e03" translate="yes" xml:space="preserve">
          <source>options, use &lt;code&gt;__asm__&lt;/code&gt; instead of &lt;code&gt;asm&lt;/code&gt; (see &lt;a href=&quot;alternate-keywords#Alternate-Keywords&quot;&gt;Alternate Keywords&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc835cf5b510a70ce2539f349735098675544f9" translate="yes" xml:space="preserve">
          <source>options, with or without level numbers, the last such option is the one that is effective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835470bacb439d9d9ed5b0fb6adc0d05997c0a0e" translate="yes" xml:space="preserve">
          <source>options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc02dca622cf115b765441dcec0193b68e86a5ee" translate="yes" xml:space="preserve">
          <source>options. If the prefix represents a directory, you should include the final &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4a497ad0411a176e3c41d6431a9585fdb9ae71" translate="yes" xml:space="preserve">
          <source>options. It is up to you to make sure that a function is only invoked on a machine that supports the particular ISA it is compiled for (for example by using &lt;code&gt;cpuid&lt;/code&gt; on x86 to determine what feature bits and architecture family are used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45daa0936b11c0cd75bb647d92d79b280ee639aa" translate="yes" xml:space="preserve">
          <source>options. Specify the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12727326704ecb4d1d6dc2a42b9c9671ecbf0165" translate="yes" xml:space="preserve">
          <source>options. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bfc8a6554d2d124fbf8c6ddc2821b42ac48a04" translate="yes" xml:space="preserve">
          <source>options. This can be used to make reproducible builds that are location independent. See also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2204115bd005d00312afe6d5596383348c9407bd" translate="yes" xml:space="preserve">
          <source>options. This section includes experimental options that may produce broken code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c1112cb3bb8342ba38d382dd85524cd4df735a" translate="yes" xml:space="preserve">
          <source>or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d5c81bef155d4d3334c4b8fd7f60c011eb9725" translate="yes" xml:space="preserve">
          <source>or NO_REGS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3927572c45dc7a8d20da56759afcb9b30937e4d2" translate="yes" xml:space="preserve">
          <source>or a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1204d7287cd4f538afa3babef077321c5a87ab8" translate="yes" xml:space="preserve">
          <source>or a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828b79df50244a316294a8850ec4812c67a8929d" translate="yes" xml:space="preserve">
          <source>or a non-GNU</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609b15a256d451bf95c253e1a9e4a39f9cb7e2b7" translate="yes" xml:space="preserve">
          <source>or above is present in the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3cb97baf188efaf06a31e51aa227c8ef2571ab" translate="yes" xml:space="preserve">
          <source>or above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2197757931b432b146c2a0811f654a43e3c69b" translate="yes" xml:space="preserve">
          <source>or an appropriate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c087989398548cc42460ea04276859dcbda69c" translate="yes" xml:space="preserve">
          <source>or an option for a later C version is used (without</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323212f198bb90a8a8621630b4a1e251e659cff6" translate="yes" xml:space="preserve">
          <source>or at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2680b7cec9810689d671dcad4ea9a144b8695123" translate="yes" xml:space="preserve">
          <source>or higher however the hardware multiplier is invoked inline. This makes for bigger, but faster code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64554f872a01793d75e32b041df3496b46f06857" translate="yes" xml:space="preserve">
          <source>or higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858f15c9a155754f5c8876e645d0486ff99741ad" translate="yes" xml:space="preserve">
          <source>or higher. Usage of this option can improve the generated code and decrease its size by preventing register pressure increase above the number of available hard registers and subsequent spills in register allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a02098fd292cd8d436c43a566221870784b83d6" translate="yes" xml:space="preserve">
          <source>or if an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f3fdf2cd9a1a834c64d6187eb4c1c20c110ef5" translate="yes" xml:space="preserve">
          <source>or lower is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20b7aa3fcd90eb7c2e77eec52d56f80dc12c671" translate="yes" xml:space="preserve">
          <source>or similar) is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a4b8930e4b71109fb148b3fd1519c24f9c9630" translate="yes" xml:space="preserve">
          <source>or similar, the same kind of debugging information must have been output when building the precompiled header. However, a precompiled header built using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b6f638942cb95e8ba28f9102149a91cdeeacf9" translate="yes" xml:space="preserve">
          <source>or the negated form of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd18a5e82fb262305d51188bd737c6308858c4a" translate="yes" xml:space="preserve">
          <source>or toolchain provided language support libraries such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b0c3d292516928b706bce5d56a3489b55c0932" translate="yes" xml:space="preserve">
          <source>or vice versa. Enabled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cbcf7fd0a0042b472ae8b6eca78f417f2d9678" translate="yes" xml:space="preserve">
          <source>or when &lt;code&gt;gnu_inline&lt;/code&gt; attribute is present on all inline declarations, another when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2da3fb259fd9a9ea68abff689a7bed6a0d849b7" translate="yes" xml:space="preserve">
          <source>ord:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091e17a9b3e16e0ce475fc93693b3549fb1cc7e8" translate="yes" xml:space="preserve">
          <source>orion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7dbf917f7b7fb7300935618bd898abb71e147e" translate="yes" xml:space="preserve">
          <source>other than &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91ae44094e83f7449d28be33ff71baa8a7600e7" translate="yes" xml:space="preserve">
          <source>otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4800df8d1bc61fc95220645938cd65532a64067" translate="yes" xml:space="preserve">
          <source>out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9e7f2bbc674cbd97504745158e9e0e8d9afa48" translate="yes" xml:space="preserve">
          <source>output file even though the compiler now normally uses an integrated preprocessor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8172a3e6a87f9bc488588fcfd21c608f128b0342" translate="yes" xml:space="preserve">
          <source>output files. Instrumented applications use a static destructor with priority 99 to invoke the &lt;code&gt;__gcov_dump&lt;/code&gt; function. Thus &lt;code&gt;__gcov_dump&lt;/code&gt; is executed after all user defined static destructors, as well as handlers registered with &lt;code&gt;atexit&lt;/code&gt;. If an executable loads a dynamic shared object via dlopen functionality,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a980a003fe582ca496b7cbcfe1e6ec0039e2ac19" translate="yes" xml:space="preserve">
          <source>output look for a code that corresponds to the pass you are interested in. For example, the codes &lt;code&gt;tree-evrp&lt;/code&gt;, &lt;code&gt;tree-vrp1&lt;/code&gt;, and &lt;code&gt;tree-vrp2&lt;/code&gt; correspond to the three Value Range Propagation passes. The number at the end distinguishes distinct invocations of the same pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5ca395f15c3dc4c16f3a8b237f7193fad48d95" translate="yes" xml:space="preserve">
          <source>output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17164d75c019f215cf05e77f6125aaa231a0a65c" translate="yes" xml:space="preserve">
          <source>outputs information about missed optimizations as well as optimized locations from all the inlining passes into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d38016b268f642844766a49658739d30e3753c" translate="yes" xml:space="preserve">
          <source>outputs missed optimization report from all the passes into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7864607cadd930b73f75d8500b8e8d61333d77" translate="yes" xml:space="preserve">
          <source>outputs the following command-line options from the following input command-line options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc71113f30a78279be76d0820498cbb00cb7a36" translate="yes" xml:space="preserve">
          <source>outputs the same information as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b68f03a097c89df7395b08dcd2d48e90519826" translate="yes" xml:space="preserve">
          <source>overflow flag set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601ba7c1f4eab0d87dc8891d30eed3643f5195ff" translate="yes" xml:space="preserve">
          <source>override each other, so using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d064fd1293a64580f13a33e58475f3a6d982f2" translate="yes" xml:space="preserve">
          <source>overrides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c0150df19d98384085bc7aac336b0849287900" translate="yes" xml:space="preserve">
          <source>overrides the ABI-defined alignment of larger types, such as floating-point doubles, on their natural size-based boundary. The option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48afdda0b1f8ddd3d4d781812828f8522f9bea3e" translate="yes" xml:space="preserve">
          <source>overrides the default dependency output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8aae3949988bd5823a4817c5188f4ecf73535b" translate="yes" xml:space="preserve">
          <source>overrides the offset with a symbol reference to a canary in the TLS block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b95bbec3baefda83a3ac21c12eebf773499235" translate="yes" xml:space="preserve">
          <source>overrides the specification of these options. We recommend you use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516b9783fca517eecbd1d064da2d165310b19759" translate="yes" xml:space="preserve">
          <source>p</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d69c7d36cec2cd21c182e0420bbc2b3c3d0cbe" translate="yes" xml:space="preserve">
          <source>p+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3029db46563948941cbbe6c9935287ce1a91020f" translate="yes" xml:space="preserve">
          <source>p-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fbe62d887b8cdee986e6be781203d8d938bbd5" translate="yes" xml:space="preserve">
          <source>p3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf4bbc984b596ba117cc2acee807b4fed58dbc7" translate="yes" xml:space="preserve">
          <source>p5600</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5c357838bb0305fbf9306462b7f5499874b6ec" translate="yes" xml:space="preserve">
          <source>p6600</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024d1493858e9bf7a0e5fea491de12f8f140c302" translate="yes" xml:space="preserve">
          <source>pa6t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e396885c4174aff6f408bf7a9315a9b9157e168b" translate="yes" xml:space="preserve">
          <source>pac-ret[+&lt;var&gt;leaf&lt;/var&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e8aab7208634f6d02abdf662303beb4fd34ba0" translate="yes" xml:space="preserve">
          <source>packed-stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51da2df9f47e0219a2f38d7fdbfec27d535ed3b2" translate="yes" xml:space="preserve">
          <source>pad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48820a2a57a062a40c4c289933ce2fd66fb3ff8" translate="yes" xml:space="preserve">
          <source>paired</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64eeb263a650ccd1a4194e853cbe1d175dba71a" translate="yes" xml:space="preserve">
          <source>parameter and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb23a4f3185912215562faa719e7ec30e5ab6c8" translate="yes" xml:space="preserve">
          <source>parameter is used only when profile feedback is available. The real profiles (as opposed to statically estimated ones) are much less balanced allowing the threshold to be larger value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6d0cd33d124edbbb511a873e2cf87c09934e4b" translate="yes" xml:space="preserve">
          <source>parameter to 100 and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ef0e9a3711706f9dc1a2fd17fcb896b8a0f6d0" translate="yes" xml:space="preserve">
          <source>parameter to 400.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648d85d4deed6cb9dfdf5959665ccd0d4101b6d1" translate="yes" xml:space="preserve">
          <source>parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7b034e09b752c24942cd9b0b20c29db2dc3e90" translate="yes" xml:space="preserve">
          <source>params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20e68fc2d02dc5721132c95cca7c8bfb336c3e4" translate="yes" xml:space="preserve">
          <source>parity flag set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc88b83767af036ec64f408a5c22693db6e3b76" translate="yes" xml:space="preserve">
          <source>part</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3132c20785261db1465ba7e9b640cb7d270b7205" translate="yes" xml:space="preserve">
          <source>passes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b40ec149a10181ad270626b544d80816839690" translate="yes" xml:space="preserve">
          <source>pca56</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c0d2540a148d8d1f6f19ac5eb0a0ef56f8ed94" translate="yes" xml:space="preserve">
          <source>pclmul</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a35c967e1212cbbc6fecf37f680d68393033ca" translate="yes" xml:space="preserve">
          <source>pconfig</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da25f4eb91e123c8a304b491c8a4c0967a76e19" translate="yes" xml:space="preserve">
          <source>pentium</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cae6363fe4e27ea9290cab3a3d5875c699167d" translate="yes" xml:space="preserve">
          <source>pentium-m</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5ec99851a2aec8cdc4f8d08dd299f5472dd81d" translate="yes" xml:space="preserve">
          <source>pentium-mmx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9535ec722d881497da5f4a05d49776ef39f4839" translate="yes" xml:space="preserve">
          <source>pentium2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565708e7a54feeb7000b4fa6fe52bff92e641176" translate="yes" xml:space="preserve">
          <source>pentium3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeb02fceadb8e367aa9669c125de06353ee6254" translate="yes" xml:space="preserve">
          <source>pentium3m</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e277110cdd398d5f9e8af40532d5fff8f40800d9" translate="yes" xml:space="preserve">
          <source>pentium4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692da3f03e2d916286298a8f1ced2d6bef2fb40f" translate="yes" xml:space="preserve">
          <source>pentium4m</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c445bebe07dae1141a70eed84ccdcbc681e84a57" translate="yes" xml:space="preserve">
          <source>pentiumpro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd02082a977ed0cc8eed4b300f4247d8354a438" translate="yes" xml:space="preserve">
          <source>permits the same extension options as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08a7b1d840c925e489ea170ea2bb9e34ff0512f" translate="yes" xml:space="preserve">
          <source>phecda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb3e59a2a0aa3e278d6fc2562af9473436e0041" translate="yes" xml:space="preserve">
          <source>pie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f4de49284d99dbd0bbae08d357572a86f34249" translate="yes" xml:space="preserve">
          <source>pku</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021a0a568f4586124fe7ffff149d629caeb80561" translate="yes" xml:space="preserve">
          <source>plus additional format checks. Currently equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6dda31b617c7b9ae0306fa0714e2a162bb28f2" translate="yes" xml:space="preserve">
          <source>plus optimization and code generation options. For test coverage analysis, use the additional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd6bc89cdd5203f91ea230cca06f18d5cd8a564" translate="yes" xml:space="preserve">
          <source>plus_dmpy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24847a4d49549939d8e1dcf80abc32102fc5aac" translate="yes" xml:space="preserve">
          <source>plus_macd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f0412552857a45fd83efa05e336776fd27a52f" translate="yes" xml:space="preserve">
          <source>plus_qmacw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3135667f432a3b419705e6e3862b346429613ae8" translate="yes" xml:space="preserve">
          <source>pointers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a68643199bfa1f1e0ca40c6a368377157192503" translate="yes" xml:space="preserve">
          <source>popcnt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c445e07c9cc1336f7afe264f2140f2b42337da24" translate="yes" xml:space="preserve">
          <source>popcntb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f91326dc92dfa588434922b627c0e23ba82a6f0" translate="yes" xml:space="preserve">
          <source>popcntd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6abca10d73b6dd40265285f5b4654e055528c4" translate="yes" xml:space="preserve">
          <source>power3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7b2f551a816df3257fbd7103f3d06e9e287a3b" translate="yes" xml:space="preserve">
          <source>power4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8593ee97630e2fe086e4ad628566d1ecc295b5" translate="yes" xml:space="preserve">
          <source>power5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c472480dc4d9573505b5684e2f38dc011acd212" translate="yes" xml:space="preserve">
          <source>power5+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c9ea25b1b45ba791589cad0e43fd8357c5e812" translate="yes" xml:space="preserve">
          <source>power6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248fd13c69a58d3cbb342d6db1f59cdf80c655eb" translate="yes" xml:space="preserve">
          <source>power6x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6950e418ed5a374129bbbf07349f4869313580d" translate="yes" xml:space="preserve">
          <source>power7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c2451f4c4986124451cd49f17e381bdb0331b1" translate="yes" xml:space="preserve">
          <source>power8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0546aae52d4df0a754d6666bb847ff220410e2b9" translate="yes" xml:space="preserve">
          <source>power9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed8209265f2b284b8e9590aa829401338e59115" translate="yes" xml:space="preserve">
          <source>powerpc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bb562cdab771bb445e1279fe17d7ae67c8926b" translate="yes" xml:space="preserve">
          <source>powerpc*-*-eabi*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbd98c314c463329292004a280a6ae8e8b253e1" translate="yes" xml:space="preserve">
          <source>powerpc-*-eabiaix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2347640ee52695621a6e06be9618336bda46cbfb" translate="yes" xml:space="preserve">
          <source>powerpc-*-eabisim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c259bee1f18caf517612cd0483400d597303d1" translate="yes" xml:space="preserve">
          <source>powerpc-gfxopt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86e6521dba192ec143c78039612af29c603847d" translate="yes" xml:space="preserve">
          <source>powerpc-gpopt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14317d0826f77aaed5249dc5d76ca11f4f24f63" translate="yes" xml:space="preserve">
          <source>powerpc64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e008c4fc5f93a21f68ee078dba89586e75697f" translate="yes" xml:space="preserve">
          <source>powerpc64le</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8355d76f4822ced09278e4a7e71fece93643689" translate="yes" xml:space="preserve">
          <source>ppc-cell-be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36aebc7cd7d3261b61dd5e5de4c270ccaa5083c" translate="yes" xml:space="preserve">
          <source>ppc32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1374653f2b82c9abcc293b5ebca22e52dd42c63d" translate="yes" xml:space="preserve">
          <source>ppc405</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de3a2ac9d780f2db836e526063d2a637a43b2d1" translate="yes" xml:space="preserve">
          <source>ppc440</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138cda49a8f98bee95241940e1d1280e64bea70a" translate="yes" xml:space="preserve">
          <source>ppc464</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37224dff0353abcb34e9e475f53f16c5dd792c5c" translate="yes" xml:space="preserve">
          <source>ppc476</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fc7e24d63e865cc404e985d8948e34ccf14737" translate="yes" xml:space="preserve">
          <source>ppc601</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e1302528802532ea4fd3868e55ee4c38d2ad08" translate="yes" xml:space="preserve">
          <source>ppc64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b4cd7cdc121010c52a6f0328e6cd6a0e49a9c8" translate="yes" xml:space="preserve">
          <source>ppc7400</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ec76ea20c292386f572fd12e1c990a2b13e70f" translate="yes" xml:space="preserve">
          <source>ppc750</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72d4841c43b6220309d74b7b85b12a6d0a0ca70" translate="yes" xml:space="preserve">
          <source>ppc970</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb12d8ae835c7cd4cc45a6ebdf729de8561a390" translate="yes" xml:space="preserve">
          <source>ppca2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcac652d0624f61b2ee372838182633eca40d4f" translate="yes" xml:space="preserve">
          <source>ppcle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d69ee47ebf8c2b32af8783523247cc99463256" translate="yes" xml:space="preserve">
          <source>pragma GCC error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be69fccbdfe5db67804f0ff38d17594c4b46e170" translate="yes" xml:space="preserve">
          <source>pragma GCC warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21b65f98243b34b2645c3236e3f755134affc9c" translate="yes" xml:space="preserve">
          <source>predres</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e37c061a3338725b406c101298dda1d1f740853" translate="yes" xml:space="preserve">
          <source>prefer-atomic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c415395879aff8dec4ca5c7f4f203bc6a8da252" translate="yes" xml:space="preserve">
          <source>prefetch-minimum-stride</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b827f0191a2563e4ad6176c1515dbe020a0040" translate="yes" xml:space="preserve">
          <source>prefetchwt1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36abdd5f0885f1cd90269ff686773fef67413c11" translate="yes" xml:space="preserve">
          <source>prefix and postfix increment and decrement operators (&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6a2920dd1be2f319bffb8586a9c787f51fb1c6" translate="yes" xml:space="preserve">
          <source>prefix is to use the environment variable &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt;. See &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c403576a329425a3b435646b04308bc7da39f305" translate="yes" xml:space="preserve">
          <source>prefix, if any. If that name is not found, or if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e71d1135b8db52c3b49b57afb2a79f29649fa98" translate="yes" xml:space="preserve">
          <source>prefix, if needed. If it is not found there, the two standard prefixes above are tried, and that is all. The file is left out of the link if it is not found by those means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bef6cd0d582a702ccf94dbb03b7add058620e25" translate="yes" xml:space="preserve">
          <source>prefixes that effectively specify directory names also apply to libraries in the linker, because the compiler translates these options into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c92eabb7e977c7141bb140bbf01e591129692d9" translate="yes" xml:space="preserve">
          <source>preinit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04aef9163938a93f9416ba6c1a78358ab01fa3a4" translate="yes" xml:space="preserve">
          <source>prescott</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd3e931e2a180b862dce9d91191678d03646816" translate="yes" xml:space="preserve">
          <source>prevents GCC from putting floating-point constants in the TOC and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61ca12b381adaba684206c3db69e251df20a26d" translate="yes" xml:space="preserve">
          <source>prevents the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a451a7610439a8954748b045e581cabc95f96e" translate="yes" xml:space="preserve">
          <source>prfchw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f9b70817616133cff8eaeedfdf25a263bb163b" translate="yes" xml:space="preserve">
          <source>prints &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708cdf444aadfe42e432163d7630340b3c5a8e72" translate="yes" xml:space="preserve">
          <source>prints information about missed optimization opportunities from vectorization passes on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3345867ecfeeaaae30e155d010fc96d9f5119644" translate="yes" xml:space="preserve">
          <source>priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a56d0511798f3c612463ab2b88e7a52d64c1c5" translate="yes" xml:space="preserve">
          <source>process ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ea9705779edcfc8430aa0767ade615aff4ec27" translate="yes" xml:space="preserve">
          <source>produces code optimized for the local machine under the constraints of the selected instruction set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bed57b51498e47be33586906b6b4ea50bd45a8f" translate="yes" xml:space="preserve">
          <source>produces files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcec56171df3c6150684b60fb0f16c51e1923ed" translate="yes" xml:space="preserve">
          <source>produces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d45a009b0383b5b3064b9820c18530333c910f9" translate="yes" xml:space="preserve">
          <source>profile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964cab4bb4a5111731b0c00dbb43f794698d8731" translate="yes" xml:space="preserve">
          <source>protected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d262ec46b85a3b89db8211356b9adc6566e0c1e8" translate="yes" xml:space="preserve">
          <source>provides additional predefines for &lt;code&gt;XOPEN_UNIX&lt;/code&gt; and &lt;code&gt;_XOPEN_SOURCE_EXTENDED&lt;/code&gt;, and the startfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2d0e50733c3e514f276f19dbe8d4c80b164e1c" translate="yes" xml:space="preserve">
          <source>provides additional predefines for &lt;code&gt;_XOPEN_UNIX&lt;/code&gt;, &lt;code&gt;_XOPEN_SOURCE_EXTENDED&lt;/code&gt;, &lt;code&gt;_INCLUDE__STDC_A1_SOURCE&lt;/code&gt; and &lt;code&gt;_INCLUDE_XOPEN_SOURCE_500&lt;/code&gt;, and the startfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21558def832ae63f0df103e19526463e314d6e82" translate="yes" xml:space="preserve">
          <source>provides the same predefines as GCC 3.3 and 3.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15b4268fe72c08ac4ca221a58fc08412fb39b35" translate="yes" xml:space="preserve">
          <source>pso</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f540c4bad238436a9b45474c4f661cc2d47f7677" translate="yes" xml:space="preserve">
          <source>ptwrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad285b5389768a0d52b71b5fccddb8764d28cf3" translate="yes" xml:space="preserve">
          <source>push_operand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327f95dcc58c0a9bf2c4088d9558872aec5c2b12" translate="yes" xml:space="preserve">
          <source>puts it in the same place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbc8364d3043b0d58926bf892d52de57d457f85" translate="yes" xml:space="preserve">
          <source>puts it where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab5e0f17f025acd67d19a94e55ea77c6211b019" translate="yes" xml:space="preserve">
          <source>puts the function &lt;code&gt;foobar&lt;/code&gt; in the &lt;code&gt;bar&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ea1c649c82946aa6e479e1ffd321e4a318b1b0" translate="yes" xml:space="preserve">
          <source>q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33632d1ff03115f9bc4876c0406c61f713a04a94" translate="yes" xml:space="preserve">
          <source>qdf24xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc7c9ec434ed06502767136789763ec11d2c4b7" translate="yes" xml:space="preserve">
          <source>r</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5573e39b6600496d40f493d00ec7658479a19607" translate="yes" xml:space="preserve">
          <source>r1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87c1eab63483c9a7b68f7db986c36098adc4352" translate="yes" xml:space="preserve">
          <source>r10000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7fbd5bb777a91ec44b2a63e74991be5c824e9d" translate="yes" xml:space="preserve">
          <source>r12000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea5096e0896dd8ffef37986678109d118527365" translate="yes" xml:space="preserve">
          <source>r14000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527ed55a7aa857170f2503ed1f41725ee7173889" translate="yes" xml:space="preserve">
          <source>r16000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50126cc2d6c726de0ca203c3b659f658d356173" translate="yes" xml:space="preserve">
          <source>r2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7dc730443d4d483dbcba169ba2a701e2e0d8b7" translate="yes" xml:space="preserve">
          <source>r2000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9919572fbc2bb2c0ee6a846217bef25f4b45a5" translate="yes" xml:space="preserve">
          <source>r3000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae45d911c4d0496cf22e980406af23d6ec32356c" translate="yes" xml:space="preserve">
          <source>r3900</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bb7e695f214ba9f1e9f5882ee731344447341f" translate="yes" xml:space="preserve">
          <source>r4000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d7eda95039abbad2e91356039dd7ae3f164187" translate="yes" xml:space="preserve">
          <source>r43</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e6b3f871bb662884d8cb1db93d6cef5e071157" translate="yes" xml:space="preserve">
          <source>r4400</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07098601e33a19c8feea5a4e56e2a5e4f08fb34b" translate="yes" xml:space="preserve">
          <source>r4600</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea4e947650fd04d9e55ea03e67e6980976bfaa1" translate="yes" xml:space="preserve">
          <source>r4650</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52d17801fafd8903f6bfb93867e8c507f95a763" translate="yes" xml:space="preserve">
          <source>r4700</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2f167bab1fda4bb3f9b3f8d355b16e39d35d2c" translate="yes" xml:space="preserve">
          <source>r5900</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7c86bf6e11b89da526e6d9c3aa784f74b43530" translate="yes" xml:space="preserve">
          <source>r6000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1058c26d3f298bf81b04b998ec085e58b19608" translate="yes" xml:space="preserve">
          <source>r63</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7faca291a414e3c845bffbb687114ebcac4da19" translate="yes" xml:space="preserve">
          <source>r8000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0455f5c2cff6d0b301a1089cd7e9f5f12c911659" translate="yes" xml:space="preserve">
          <source>r8c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d5c49086004debdd4153a04c92cac5277b2fec" translate="yes" xml:space="preserve">
          <source>rather than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d723e696fd32160f6cf95aae8d3d38ae7d81764" translate="yes" xml:space="preserve">
          <source>rather than this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce15802a8c5e8e9db0ffaf10130ef265296e9ea4" translate="yes" xml:space="preserve">
          <source>raw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8432e09e98e154642a1e620fd1b04c2bdb201c6" translate="yes" xml:space="preserve">
          <source>rcpc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80949a96d0db6141a2a3874bebdfe917ea5396f1" translate="yes" xml:space="preserve">
          <source>rdma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607ca9a701f4365e2d2da155b0884a98e7241947" translate="yes" xml:space="preserve">
          <source>rdpid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de505d3e3b79fb8b750a13e5661e3aaa409bed82" translate="yes" xml:space="preserve">
          <source>rdrnd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8259a516792deb8181160f446e88d9aa003a47" translate="yes" xml:space="preserve">
          <source>rdseed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb74ff76c0c0d38998d1e70abe4e7f8d18a64760" translate="yes" xml:space="preserve">
          <source>read one set of profile and rewrite profile contents. One can scale or normalize the count values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82416577124ab579958879a69cb9f600348dc9e1" translate="yes" xml:space="preserve">
          <source>recip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aebb6890d17982a00d0691bbf4e7f350d3bc820" translate="yes" xml:space="preserve">
          <source>recip-precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6b9e6b22b0be6d190df7eb76cee633db88e4b2" translate="yes" xml:space="preserve">
          <source>refers to a directory, and if necessary it adds a directory separator character at the end of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969fb30468148d44e59443bb67a6b307433a00e7" translate="yes" xml:space="preserve">
          <source>refers to functions in &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ae1a765cde8947200c341683a897deabcb3e0e" translate="yes" xml:space="preserve">
          <source>register usage conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6668b3d17e27724f66f126375d5dda02835b4b" translate="yes" xml:space="preserve">
          <source>regroup_exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4b162c26be946bd7732ede961d88d7d03a902a" translate="yes" xml:space="preserve">
          <source>rel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3182d333c0a0a050d3e1d87b84b32651294b8bac" translate="yes" xml:space="preserve">
          <source>relational operators (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cba51f8feb854e7b35bbd23d7c3d8820e6f7c69" translate="yes" xml:space="preserve">
          <source>removes the frame pointer for leaf functions, which might make debugging harder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c50b054c607eb036bbb1d1a706597987d446bf" translate="yes" xml:space="preserve">
          <source>reorg.c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cf34fb54cf3445e7a77759c56f9f64d280ae21" translate="yes" xml:space="preserve">
          <source>rep_4byte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d69b9ba3fa49677c6d828526fd54c9b09c426c6" translate="yes" xml:space="preserve">
          <source>rep_8byte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a828d3d12fb6af0647bc1965738422cb68cc350" translate="yes" xml:space="preserve">
          <source>rep_byte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a2096839f534d0ab6bd17fe2b327579fad99ac" translate="yes" xml:space="preserve">
          <source>represents a GNU extended dialect of C, such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06be706bd646ab151962b79bef871d5eef94b7c" translate="yes" xml:space="preserve">
          <source>request these warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d4809bfed0108279829429031f53d2e79d25f1" translate="yes" xml:space="preserve">
          <source>requesting dependency generation,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6865f04fad2ee3545e5857ba66105b2d42567a4" translate="yes" xml:space="preserve">
          <source>requests a variety of useful warnings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8c46dd8edf275463aa093f1cded64ae9177a62" translate="yes" xml:space="preserve">
          <source>requests a warning if these extensions are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ae1138582f13483bd9cd1c19bc38c117a2deb4" translate="yes" xml:space="preserve">
          <source>respectively and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e13a6af9adbba378f33d62a1b34d72ee88fd0a7" translate="yes" xml:space="preserve">
          <source>respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8d26407bdce79319063daaec86e37579d6a18f" translate="yes" xml:space="preserve">
          <source>restores the default behavior, as does placing the function calls within the scope of a &lt;code&gt;#pragma
long_calls_off&lt;/code&gt; directive. Note these switches have no effect on how the compiler generates code to handle function calls via function pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced2b63e10d37bc6fb9907733f5ef8117fb91665" translate="yes" xml:space="preserve">
          <source>restores the default behavior. Note these switches have no effect on how the compiler generates code to handle function calls via function pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0f149b2b91f612dd6a6ddf50a0bd982a53a85e" translate="yes" xml:space="preserve">
          <source>results in a warning on line 2 and 3 but not lines 4, 5, or 6. No warning is issued for line 4 because T2 is not explicitly deprecated. Line 5 has no warning because T3 is explicitly deprecated. Similarly for line 6. The optional &lt;var&gt;msg&lt;/var&gt; argument, which must be a string, is printed in the warning if present. Control characters in the string will be replaced with escape sequences, and if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935b52251b58a9330c5b6f26b72d55c396f56b35" translate="yes" xml:space="preserve">
          <source>results in a warning on line 3 but not line 2. The optional &lt;var&gt;msg&lt;/var&gt; argument, which must be a string, is printed in the warning if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b891d51d06ad7cc9f8d17cf449098bf3005182" translate="yes" xml:space="preserve">
          <source>results in warning on line 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d14171d9f1bd08101a01e9ace310c491112d449" translate="yes" xml:space="preserve">
          <source>rm7000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d5c559dda533720a669a63c2afa64b20a2e565" translate="yes" xml:space="preserve">
          <source>rm9000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da33e75c5a6c51f91f3f7d4a3537ccfdfc8ce749" translate="yes" xml:space="preserve">
          <source>rmo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a406d187e377d4655cbe88c8733f362228e142" translate="yes" xml:space="preserve">
          <source>rng</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef89a3a842b0384565a210f0122804f411fe51fb" translate="yes" xml:space="preserve">
          <source>rocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0590a6dd3663be108ff31f58d16b829a1284be6" translate="yes" xml:space="preserve">
          <source>round</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bb9991214c1b2d685d5cc7c9ac0b985332c3ca" translate="yes" xml:space="preserve">
          <source>round-nearest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7761451b716f3ae7f51ec5022d59774da4926522" translate="yes" xml:space="preserve">
          <source>rounds the significands of results of floating-point operations to 53 bits (double precision) and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290216640fec10ecf865664ef48258f279dfa362" translate="yes" xml:space="preserve">
          <source>rounds the significands of results of floating-point operations to 64 bits (extended double precision), which is the default. When this option is used, floating-point operations in higher precisions are not available to the programmer without setting the FPU control word explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ff2431fc9489c918b5ed8ee160db8473e5f83f" translate="yes" xml:space="preserve">
          <source>rs64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088a6a5355a540dedbb1bfa4b2587df63abf09a0" translate="yes" xml:space="preserve">
          <source>rsqrt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dabbd0b1f726d4ff208b93308bd920d596bf3b" translate="yes" xml:space="preserve">
          <source>rsqrtd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510a12d9d3ed752ce638d104037caff19cb8d194" translate="yes" xml:space="preserve">
          <source>rsqrtf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f3dcbff94a685a44fcad17afe643b7449bc73c" translate="yes" xml:space="preserve">
          <source>rtm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef76c0ff003d722df0163f2b21e3204ef9c0656d" translate="yes" xml:space="preserve">
          <source>runtime library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44304888940885de722fdc9e59b3d716fcb161ce" translate="yes" xml:space="preserve">
          <source>rv32e</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e3e436c711ecf44bd447a51f23a8923ca7f9b0" translate="yes" xml:space="preserve">
          <source>rv32g</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b279266cc63e385dd895350e12818dad79e0cd11" translate="yes" xml:space="preserve">
          <source>rv32imaf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1496a70b507eb626816e0d7c2452dd5d6834106" translate="yes" xml:space="preserve">
          <source>rv64i</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0295b9bcab358aee86da63d2ea46052765e594" translate="yes" xml:space="preserve">
          <source>rv64im</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986c6ecb1f7a79803232162aded9212d1a10c860" translate="yes" xml:space="preserve">
          <source>s390</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd2e91a7fca2e26a03e994f2192ca4db20038a1" translate="yes" xml:space="preserve">
          <source>s390x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc0e0f012096f3c86044703db6cea82575de931" translate="yes" xml:space="preserve">
          <source>sahf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280218be95ad68c48c645de89bfcabcb75ed6428" translate="yes" xml:space="preserve">
          <source>samuel-2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb266e589355682dd009f9d25742516391dd9bd" translate="yes" xml:space="preserve">
          <source>sandybridge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ed3fa33b592827b27a94bebe252178096e21d7" translate="yes" xml:space="preserve">
          <source>saphira</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53921b5f6368eae71942f62b87776b2b05c206ef" translate="yes" xml:space="preserve">
          <source>says to make them errors instead. This does not mean that &lt;em&gt;all&lt;/em&gt; non-ISO constructs get warnings or errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70482a9c35b236639019cd8b2ecb03a9ee7db09" translate="yes" xml:space="preserve">
          <source>sb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a358cd8cc7ca519321598af75743d9b6bac395" translate="yes" xml:space="preserve">
          <source>sb1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04096ad9c89678a1014d9c435db136c296cd2168" translate="yes" xml:space="preserve">
          <source>sc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801807943c4a2aec8a404236749a791660a8fb1c" translate="yes" xml:space="preserve">
          <source>scalable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e87018ebbb00332874f61f21d3f3509c212df9" translate="yes" xml:space="preserve">
          <source>scev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d674bd269facaddda2e48bddad701fe90e45ecd7" translate="yes" xml:space="preserve">
          <source>script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515f6e0ee587e3906c9cc61b79b7cd4ce6c1a702" translate="yes" xml:space="preserve">
          <source>scv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4785c2c4a40347d4b6cefd2fb27f2f0c81b19f25" translate="yes" xml:space="preserve">
          <source>sdata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920a25ef686c4f7ca6ad23dd109d3ad653161832" translate="yes" xml:space="preserve">
          <source>sec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcdade1546a9b3535be94b7cc2a026931f46e93" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C Dialect Options&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1b8f9be605ded023528122071a0b46dffcc921" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen Options&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256e2dec01ed77e32f599c82f132cb82e1ce2528" translate="yes" xml:space="preserve">
          <source>select code that runs on a family of similar processors but that is optimized for a particular microarchitecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d4c9e837a93b2006dbfed61591ca5fc0c5b566" translate="yes" xml:space="preserve">
          <source>selects a DSP-style MAC AE. Code compiled with this option may suffer from poor performance of byte (char) manipulation, since the DSP AE does not provide hardware support for byte load/stores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7569228f2dd36c2cedc2bd2a7f67733998d1b4b" translate="yes" xml:space="preserve">
          <source>selects a MUL AE type. This is the most useful AE type for compiled code, and is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd9f069f1e06ca5d880e27d6d4b7f4a30ac4e47" translate="yes" xml:space="preserve">
          <source>selects a completely generic AE type. Code generated with this option runs on any of the other AE types. The code is not as efficient as it would be if compiled for a specific AE type, and some types of operation (e.g., multiplication) do not work properly on all types of AE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5f0da0094e3ca2977c5985db089fbc9659fd9e" translate="yes" xml:space="preserve">
          <source>selects the ARM alternative format. This representation is similar to the IEEE format, but does not support infinities or NaNs. Instead, the range of exponents is extended, so that this format can represent normalized values in the range of &lt;em&gt;2^{-14}&lt;/em&gt; to 131008.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf9406f86667a3c47b631b9d95bf760e7bfe8b7" translate="yes" xml:space="preserve">
          <source>selects the IEEE 754-2008 format. This format can represent normalized values in the range of &lt;em&gt;2^{-14}&lt;/em&gt; to 65504. There are 11 bits of significand precision, approximately 3 decimal digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514817381270b6d62dde3e17347ec8d3ce648b1e" translate="yes" xml:space="preserve">
          <source>semantics are in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2baf2e260d299c22f0f3af78433db385cfeb835" translate="yes" xml:space="preserve">
          <source>sending messages to Objective-C constant strings (&lt;code&gt;@&quot;this is a
constant string&quot;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afddd76fc131aac84a1845fbeed7a80fc2f08428" translate="yes" xml:space="preserve">
          <source>separate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544f684abf77e06ffab3dcd1355927be21669f7a" translate="yes" xml:space="preserve">
          <source>sets &lt;code&gt;_MIPS_ARCH&lt;/code&gt; to &lt;code&gt;&quot;r2000&quot;&lt;/code&gt; and defines the macro &lt;code&gt;_MIPS_ARCH_R2000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca9cdb7303bd85b94d54517ebca81a3b408bf1f" translate="yes" xml:space="preserve">
          <source>setting and additionally using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217af9a11f7d13b2a67235256019dc5c8ed79929" translate="yes" xml:space="preserve">
          <source>setting and cause &lt;code&gt;@&quot;&amp;hellip;&quot;&lt;/code&gt; literals to be laid out as constant CoreFoundation strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8c22b00dc50c191be4cc19919d8f0669686d97" translate="yes" xml:space="preserve">
          <source>setting or attach a &lt;code&gt;section&lt;/code&gt; attribute to &lt;var&gt;Var&lt;/var&gt;&amp;rsquo;s definition. If &lt;var&gt;Var&lt;/var&gt; is common, you must link the application with a high-enough</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d0efcc7fb936c5330f190349c1c47195dfe3a0" translate="yes" xml:space="preserve">
          <source>setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47cefbf38b545bbcf39c95fcd9e6e2ab0485dfd" translate="yes" xml:space="preserve">
          <source>sgx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f4590320e1343a915b6394170650a8f35d6926" translate="yes" xml:space="preserve">
          <source>sha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc85e9ae6bcd246f0028fcfadcee0c3727e3d35c" translate="yes" xml:space="preserve">
          <source>sha2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a7b050867aef165c9f49e1b921779774deac01" translate="yes" xml:space="preserve">
          <source>sha3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43ad24e210029fbce3c25663b75f28a6c076167" translate="yes" xml:space="preserve">
          <source>shanghai</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f4ea7d91495df92bbac2e2149dfb850fe81396" translate="yes" xml:space="preserve">
          <source>short</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89f621ccf5fc4d1abefccfe237e68fb6c240b92" translate="yes" xml:space="preserve">
          <source>should be the optimization level of choice for the standard edit-compile-debug cycle, offering a reasonable level of optimization while maintaining fast compilation and a good debugging experience. It is a better choice than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cd5fd75e9de97178d76de895dd50d50d72c566" translate="yes" xml:space="preserve">
          <source>should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9e5606bf771dd7a24170b3ceb3a6a6c860b806" translate="yes" xml:space="preserve">
          <source>should be used to allow the compiler to make these assumptions, which leads to more aggressive optimization decisions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1b7f9211865a27fa00a0a2c507820aa9be69a8" translate="yes" xml:space="preserve">
          <source>should be used to compile functions with &lt;code&gt;no_caller_saved_registers&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd96545200248259a732c08d71e10090411efa7f" translate="yes" xml:space="preserve">
          <source>should be used to compile interrupt and exception handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b46a0aa203a1fb02d2ab27ef7de3e8c0353b0f" translate="yes" xml:space="preserve">
          <source>should not consist solely of inverted qualifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3789d6a8ecb4e0c0bc4b9530c75d553e06ba0668" translate="yes" xml:space="preserve">
          <source>shows all the predefined macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07d7515fb4d7266444cfaf4686786cc743e61b5" translate="yes" xml:space="preserve">
          <source>shstk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb59e6343a1a8b0434b8b5ecba7793cd5c9f15a5" translate="yes" xml:space="preserve">
          <source>sibling directories this prints e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a76f76f50af310ba499ca940a7e60d447d5267d" translate="yes" xml:space="preserve">
          <source>sifive-3-series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94b736659dcb844bdb7ecf1840c9563e7a8c718" translate="yes" xml:space="preserve">
          <source>sifive-5-series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956bbc47b97fb0f9388302217509e87b229f2d0d" translate="yes" xml:space="preserve">
          <source>sifive-7-series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83354e6cef8c5c405119ade89bdf3babbad5eb6" translate="yes" xml:space="preserve">
          <source>sign flag set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109e932080c5ecf5373480c9dfb7ed44791d27d5" translate="yes" xml:space="preserve">
          <source>signed greater than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401b01f84520eb2285631b360b939351846b9a94" translate="yes" xml:space="preserve">
          <source>signed greater than or equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb5ada5cbbe6fc65ef4b33248216b18c7ea7fdd" translate="yes" xml:space="preserve">
          <source>signed less than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de73c33674514db8786a61bec963a4c5e97049be" translate="yes" xml:space="preserve">
          <source>signed less than or equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e22e1590ff686565fb708d1d901c288917b129f" translate="yes" xml:space="preserve">
          <source>silences the warning. The compiler also issues a warning, like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84cd7104793ad75b2730451c40d5ae70c08b786" translate="yes" xml:space="preserve">
          <source>silvermont</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d94904b11d29ebe000b9b0e09dbad80e1bd85a" translate="yes" xml:space="preserve">
          <source>sim-crt0.o</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9c1c530a327b6339907d59fff7ba71aa140ae" translate="yes" xml:space="preserve">
          <source>simd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7d0d088b6ea936fb25b477722d734706fe8b40" translate="yes" xml:space="preserve">
          <source>simple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49497ce9fba9aeae12f57b201361dfebb806bb43" translate="yes" xml:space="preserve">
          <source>simultaneous-prefetches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206a8776abb7aee91bfc31592f9ee4ff2f56265c" translate="yes" xml:space="preserve">
          <source>since interrupt handlers can and will, because of the hardware design, touch the red zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56922c01eea7bf339f6c5ef64022fd8e2fdda47e" translate="yes" xml:space="preserve">
          <source>since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4138ffb2e3ad2d70bb7a4305cb898bde4b3e4404" translate="yes" xml:space="preserve">
          <source>since the external thunk cannot be modified to disable control-flow check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54ef3b1dea76f4ccea11898a8f532f6ec490fb0" translate="yes" xml:space="preserve">
          <source>since the thunk function may not be reachable in the large code model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0b1612aa711b78a720295d271a33894e2b72bf" translate="yes" xml:space="preserve">
          <source>single</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89368e1d68015693ab48ee189d0632cb5d6edfb3" translate="yes" xml:space="preserve">
          <source>size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aed9e1cb965dea1f4b2e351cc4550769bd26710" translate="yes" xml:space="preserve">
          <source>size and alignment of data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1470d06edb2dd960d7ab186213477f79df7bb92d" translate="yes" xml:space="preserve">
          <source>size_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc4dfb998ed11a896ee256be333b69f18af30c7" translate="yes" xml:space="preserve">
          <source>skylake</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc17c6ec3d2bd49483c222f9d2614b1fb96ffa6" translate="yes" xml:space="preserve">
          <source>skylake-avx512</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a9a73f8183c4800448dede6e2181e2cd1ab334" translate="yes" xml:space="preserve">
          <source>slim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd78ffd1111a683c62d3d6773b349a07d47614f" translate="yes" xml:space="preserve">
          <source>slm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a546507df3fb13bbd52cc7e1960871b7cd505213" translate="yes" xml:space="preserve">
          <source>sm4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892938302386f2a274aefbb02535080b0ad24f2d" translate="yes" xml:space="preserve">
          <source>sm_30</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cc17752a79ad835e30563b49bb6ec207b07697" translate="yes" xml:space="preserve">
          <source>sm_35</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f6229a11ac4ebaa553c1a3ea96d78fa7483735" translate="yes" xml:space="preserve">
          <source>small</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab039f33e6a521bd1fe70a0fc68c8177e2fd15d" translate="yes" xml:space="preserve">
          <source>small-exec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2051bfe12e69f07996a5c74f7ab49478173db06d" translate="yes" xml:space="preserve">
          <source>smt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbfa75680daaaf0f741781a6f2617e1508e380e" translate="yes" xml:space="preserve">
          <source>so you get all of the instances required by your explicit instantiations (but not by any other files) without having to specify them as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb74f2cb1a9d6a502e420f61c204e2c2cb3ec8a8" translate="yes" xml:space="preserve">
          <source>soft</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e75bb65ab0f4a6b5ebe00978e7ee8fa5621972" translate="yes" xml:space="preserve">
          <source>soft-float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc42374a97ea59170b99712a0eee904a03759ffa" translate="yes" xml:space="preserve">
          <source>soft-gusa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e14181ff3cb52c1358331be94b0eec06edcec9" translate="yes" xml:space="preserve">
          <source>soft-imask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e883e327c39ec1cb0f6cc20b501ece8a9f5ecb6" translate="yes" xml:space="preserve">
          <source>soft-tcb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24422277b4a1d427ff81c67b1b543cce52a52e05" translate="yes" xml:space="preserve">
          <source>softfp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efb23a6094f404a8f82afb3aa75bb9a10a60aba" translate="yes" xml:space="preserve">
          <source>some_class.m</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532cab1724ac141a0a998bd69d55a523bebad3cb" translate="yes" xml:space="preserve">
          <source>sparc-*-aout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c282098bb9748d50133105c643408b82332bd7" translate="yes" xml:space="preserve">
          <source>sparclet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54861ff8dbe71e797756af9c5bb57628df426fd2" translate="yes" xml:space="preserve">
          <source>sparclite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160faa3a7f6bb40b03e1db1ecfff1dcb7f6d5582" translate="yes" xml:space="preserve">
          <source>sparclite-*-*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e52e207782a74a47c1701482a7c98d115cf6cb2" translate="yes" xml:space="preserve">
          <source>sparclite86x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34543b73bf1b1f9ac459921054110d3982a834c2" translate="yes" xml:space="preserve">
          <source>sparcv9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9795db9e25f98f179e005b5a25f53f00df996864" translate="yes" xml:space="preserve">
          <source>spe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660cffc21b661e4c7984b5b2a88f911ddd5d1dd4" translate="yes" xml:space="preserve">
          <source>specific</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1dd9e0e51a3a3b17c5bd0ed1b4693c7ce16ca7" translate="yes" xml:space="preserve">
          <source>specifies that GCC should tune the performance for a blend of processors within architecture &lt;var&gt;arch&lt;/var&gt;. The aim is to generate code that run well on the current most popular processors, balancing between optimizations that benefit some CPUs in the range, and avoiding performance pitfalls of other CPUs. The effects of this option may change in future GCC versions as CPU models come and go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0499d39fcd26fca0f6469a7d63bd4cbf26d08dfd" translate="yes" xml:space="preserve">
          <source>specifies the type &amp;ldquo;pointer to 8-byte-aligned pointer to &lt;code&gt;char&lt;/code&gt;&amp;rdquo;. Note again that this does not work with most attributes; for example, the usage of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0917fc995a030b5028f4c9612549614a7b76c6" translate="yes" xml:space="preserve">
          <source>specifies the type &amp;ldquo;pointer to pointer to pointer to pointer to non-returning function returning &lt;code&gt;void&lt;/code&gt;&amp;rdquo;. As another example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3d7b58616bf917f47cee37a40b4147ec57f4c3" translate="yes" xml:space="preserve">
          <source>specifies whether the compiler should allow only the values of &lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt; specified in C99/C11, or the extended set of values specified in ISO/IEC TS 18661-3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e0da40174f3647ad9963e5d3bdc8c6ebfa0d04" translate="yes" xml:space="preserve">
          <source>specify machine-independent flags. Most flags have both positive and negative forms; the negative form of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de8253e233abfed2e77c93131635648e059f171" translate="yes" xml:space="preserve">
          <source>specify pure 32-bit PowerPC (either endian), 64-bit big endian PowerPC and 64-bit little endian PowerPC architecture machine types, with an appropriate, generic processor model assumed for scheduling purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5c2b474169863a34bea713b448cbccaebd7a99" translate="yes" xml:space="preserve">
          <source>specify that &lt;code&gt;calloc_ptr&lt;/code&gt; is a pointer of a function that, like the standard C function &lt;code&gt;calloc&lt;/code&gt;, returns an object whose size is given by the product of arguments 1 and 2, and similarly, that &lt;code&gt;malloc_ptr&lt;/code&gt;, like the standard C function &lt;code&gt;malloc&lt;/code&gt;, returns an object whose size is given by argument 1 to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb672dd70347f3d33cac950741d95ede6ee230e" translate="yes" xml:space="preserve">
          <source>specify that &lt;code&gt;calloc_type&lt;/code&gt; is a type of a function that, like the standard C function &lt;code&gt;calloc&lt;/code&gt;, returns an object whose size is given by the product of arguments 1 and 2, and that &lt;code&gt;malloc_type&lt;/code&gt;, like the standard C function &lt;code&gt;malloc&lt;/code&gt;, returns an object whose size is given by argument 1 to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955ee5fabeef55df46c5207710391d7ccd6425a2" translate="yes" xml:space="preserve">
          <source>specs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f3153cdbbfbaaca9285b4d7d97df1c90194172" translate="yes" xml:space="preserve">
          <source>sqrt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb18e677bf1f6eb846895d351adb17f9e69db2c" translate="yes" xml:space="preserve">
          <source>sr71000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb4b7a3b7044c400e918159ae08698452cc8e1c" translate="yes" xml:space="preserve">
          <source>sra-max-scalarization-size-Osize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f762c7957c03d61411106de7415b71af7120a7fc" translate="yes" xml:space="preserve">
          <source>sra-max-scalarization-size-Ospeed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ac43745d0372793804c4e9e7b26f6642e1ac56" translate="yes" xml:space="preserve">
          <source>ssbs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ab81fe5dce1359b511894adb9c0ebfb25e3327" translate="yes" xml:space="preserve">
          <source>sse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0274c4a02dd5b43bff162ac93f43090300745b8" translate="yes" xml:space="preserve">
          <source>sse+387</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7bfe2fdbb54ab5449f0141c6abd27d5f863d79" translate="yes" xml:space="preserve">
          <source>sse,387</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f6692c6ba548d214597d9313d19e81a390f750" translate="yes" xml:space="preserve">
          <source>sse2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef10552c21ab519f53cf0e4462742395735656a" translate="yes" xml:space="preserve">
          <source>sse3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70525ab84a89d48c153050361cbbb5f69083cfc" translate="yes" xml:space="preserve">
          <source>sse4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f779d395cfb3e624a18889b873821ae6c410a0" translate="yes" xml:space="preserve">
          <source>sse4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d523513acc43c91560ee30da264421900cd243" translate="yes" xml:space="preserve">
          <source>sse4.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1368d84cc7072f8f702848e79fdf47c51c27af6" translate="yes" xml:space="preserve">
          <source>sse4a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c86cdb6e50c1a9f5267ecc8a12650440a8e8055" translate="yes" xml:space="preserve">
          <source>ssse3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5e52d9c9f39f6c7825ad2e8297f15464c91b01" translate="yes" xml:space="preserve">
          <source>stack-guard=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce81cfb5cf7f4d0bdb96f4f035bc804510071b6" translate="yes" xml:space="preserve">
          <source>stack-size=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f410e0466ae4b065bfa4d9010ad6056864ed4e50" translate="yes" xml:space="preserve">
          <source>standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a9c8999cdbe16644136b7b80397030b68db780" translate="yes" xml:space="preserve">
          <source>statements modifying memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c02e96de06bcd1b30b5215ac84d10921a3e378" translate="yes" xml:space="preserve">
          <source>statically, without necessarily linking other libraries statically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e350d5ce0153f3e22d5db21cf2a4eff00f3ee877" translate="yes" xml:space="preserve">
          <source>stats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2059e93a2edb3e3eb16fe6e0d7480b9e89209e3a" translate="yes" xml:space="preserve">
          <source>stc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ec981f0a6054d4ad0c3fec7f32b1086f7d24f4" translate="yes" xml:space="preserve">
          <source>std</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5659043ae99f1c6a11522f7ab07ede2912618f1" translate="yes" xml:space="preserve">
          <source>stdcall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351eb7019c1640acf10c265cc31c377fd68443b5" translate="yes" xml:space="preserve">
          <source>stderr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406ce85c8f803ee40b9e12ea03120d86d05edbbc" translate="yes" xml:space="preserve">
          <source>stdio.h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f3f549b822f5e7a5827ea917abe581dcfe2da3" translate="yes" xml:space="preserve">
          <source>stdlib.h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476d9ec701e2de6a6c37ab5211117a7cb8333a27" translate="yes" xml:space="preserve">
          <source>stdout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58aa6d185ca498c1eaf0987b85f71422bc0b000" translate="yes" xml:space="preserve">
          <source>still breaks the code, as it has very few false negatives. However, it has many false positives. Warns for all pointer conversions between possibly incompatible types, even if never dereferenced. Runs in the front end only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93910b8c2015b433c5cd35067199aaf63acc8f00" translate="yes" xml:space="preserve">
          <source>still works, but the library aspect does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabe93f847d34db0c05c466537ed64c2288ec637" translate="yes" xml:space="preserve">
          <source>store_to_load</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41eaab877ca3a0e3aa14f5a4b7981f590e3c2bd6" translate="yes" xml:space="preserve">
          <source>strict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52c8e2bd3070927632ab96f0159b4d4618ae5f4" translate="yes" xml:space="preserve">
          <source>strongarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08733ec89b71fe31fe48e2ec026888e6a48f52c8" translate="yes" xml:space="preserve">
          <source>strongarm110</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a252ab6dd6df97485a6294abd801bc4397293d" translate="yes" xml:space="preserve">
          <source>strongarm1100</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901f47d198a949379319f76a6f217a089bb65e12" translate="yes" xml:space="preserve">
          <source>strongarm1110</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8de9ec9ed58bc81216770b0db7e76979f6883a6" translate="yes" xml:space="preserve">
          <source>struct foo { int a; };</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050e2408747ccb447a25fbbb0778bbed88e8f645" translate="yes" xml:space="preserve">
          <source>struct foo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78379c9583e249b9964b496e0fb9d031bac481e3" translate="yes" xml:space="preserve">
          <source>struct one direct; struct two * indirect;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f76fa0febf608e4ff381586ac8fd61ee71912a" translate="yes" xml:space="preserve">
          <source>struct point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8458e78b8e8ce4cd11f0d6ec0b270930db1b78b7" translate="yes" xml:space="preserve">
          <source>struct { int a; };</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b426fb69c819c1f3a57bdc7ae4fe543fd971f1" translate="yes" xml:space="preserve">
          <source>structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363eb224f6ff8d3c5163a8805222acbf939a65b3" translate="yes" xml:space="preserve">
          <source>su</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e31f404ae2e70ec02eb799f064af995b2bb4ee4" translate="yes" xml:space="preserve">
          <source>subdirectories it prints e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44508db7db63b0501c3864f12b9a7d4b91b525cd" translate="yes" xml:space="preserve">
          <source>subdirectory and no multilibs are used, this is usually just</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b89e9e45924edffcd4527c61977ce0f5479620" translate="yes" xml:space="preserve">
          <source>subdirectory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ed3dc50501d6cb41376ddec8667357997d7c02" translate="yes" xml:space="preserve">
          <source>subdirectory. If OS libraries are present in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0fe5c55be678d881559f79417e4841b65aa0cb" translate="yes" xml:space="preserve">
          <source>suffices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320790509a7c948397067d49d0b5ac084b588164" translate="yes" xml:space="preserve">
          <source>suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335edba8712a4070e33bcc22c9fffec49b6a8d50" translate="yes" xml:space="preserve">
          <source>sui</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024778c53c4a131512793accf0ed5ab6bc7e70d2" translate="yes" xml:space="preserve">
          <source>summary checksum difference: Summary checksum uses a CRC32 operation. The value depends on the link list order of gcov-info objects. This order is different in gcov-tool from that in the online merge. It&amp;rsquo;s expected to have different summary checksums. It does not really matter as the compiler does not use this checksum anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee47d06ee24ff4298dcefd4539f857b3fbacbbe" translate="yes" xml:space="preserve">
          <source>supersparc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128ab8a769324195d9d973c8f25d6a73a28cec0f" translate="yes" xml:space="preserve">
          <source>supersparc, hypersparc, leon, leon3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb1eb4b40b8286bb62a6a4d766649edfa729ad9" translate="yes" xml:space="preserve">
          <source>supports 2 extra choices for &lt;var&gt;cpu-type&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da38837db170258a04982a339ed3d3114f34fad" translate="yes" xml:space="preserve">
          <source>suppresses many optimization passes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f80cfb2c49bfebaea7f9d7c94fde56b6c8499e1" translate="yes" xml:space="preserve">
          <source>suppresses the &amp;ldquo;relocations remain against allocatable but non-writable sections&amp;rdquo; linker error message. However, the necessary relocations trigger copy-on-write, and the shared object is not actually shared across processes. Instead of using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47541ac074b1a4cf400d5b8cfa496d59d6d4fe3d" translate="yes" xml:space="preserve">
          <source>suppresses the diagnostic. Note that this does not affect the meaning of well-formed code; narrowing conversions are still considered ill-formed in SFINAE contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f07e448664dbcd9ecfaf6fa139a3eea023273b" translate="yes" xml:space="preserve">
          <source>suppresses the warning for these characters. It is hoped that future versions of the standards involved will correct this, which is why this option is not the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76329b77ee40d6fdc045f8abeb1f788d9822895a" translate="yes" xml:space="preserve">
          <source>sve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b74f34c9f86467a5d2cb2d56ebd4aba1f0dabca" translate="yes" xml:space="preserve">
          <source>svml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c01b27a47e765aacd9e271597f276f47c77469" translate="yes" xml:space="preserve">
          <source>switch and the &lt;code&gt;#pragma longcall&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301d7c98ae7968033fcce4cc451801db4f4850b5" translate="yes" xml:space="preserve">
          <source>switch behaves like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d09be0243de8570187d4a43470191249772ea76" translate="yes" xml:space="preserve">
          <source>switch causes GCC to generate code that is not binary compatible with code generated without it if the specified endianness is not the native endianness of the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5363c126c3f2ade1564560942a4c06452fcf0ac" translate="yes" xml:space="preserve">
          <source>switch causes GCC to generate code that is not binary compatible with code generated without that switch. Additionally, it makes the code suboptimal. Use it to conform to a non-default application binary interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84be3c5263cfa17336fa23bd602b40d75d73d88b" translate="yes" xml:space="preserve">
          <source>switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ac1c8f4ee3ecf2e6c25c3b1e47223789dfa32d" translate="yes" xml:space="preserve">
          <source>switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface. Not all targets provide complete support for this switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06257cfd6ceb2048a5cac22c5f5c40fd4058dbaf" translate="yes" xml:space="preserve">
          <source>switch causes GCC to generate code that is not binary compatible with code generated without that switch. Using this switch may require recompiling all other modules in a program, including system libraries. Use this switch to conform to a non-default data model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae93cca81191a409d98c25880294ce2425c61fa" translate="yes" xml:space="preserve">
          <source>switch is &lt;em&gt;not&lt;/em&gt; given to GCC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d1d0a489aa0cea822ef3f1c59f096d019a9e6c" translate="yes" xml:space="preserve">
          <source>switch is also passed to the linker. All modules should be compiled with the same</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950654deed14e26308a6e49bd093e709eb690de8" translate="yes" xml:space="preserve">
          <source>switch is found later in the command line, the earlier switch value is ignored, except with {&lt;code&gt;S&lt;/code&gt;*} where &lt;code&gt;S&lt;/code&gt; is just one letter, which passes all matching options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6860cc27295a75faea259912ab4be2b918f7b373" translate="yes" xml:space="preserve">
          <source>switch is given the preprocessor sends the rules to the same place it would send preprocessed output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e14ea8761499cdf5a7141c43ea9b6751e5be46" translate="yes" xml:space="preserve">
          <source>switch is given to GCC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e625640577c21e05a9bd75d4b0e3ec2e8b66ff11" translate="yes" xml:space="preserve">
          <source>switch is not binary compatible with code compiled with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35102b800535509d5bd9634ddfd8d860012badeb" translate="yes" xml:space="preserve">
          <source>switch is specified, then the attribute is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76df09c2ecf1662ec80793ac48ec8b76972fed06" translate="yes" xml:space="preserve">
          <source>switch is understood to specify the dependency output file (see &lt;a href=&quot;#dashMF&quot;&gt;-MF&lt;/a&gt;), but if used without</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7593472d6e4e61ff534bfece0f288a2df2f388c" translate="yes" xml:space="preserve">
          <source>switch is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3141dbe780fb7533860eb4819a0308673423fa" translate="yes" xml:space="preserve">
          <source>switch or some</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad83a2bf116e066440360882d0fa74793909b4a" translate="yes" xml:space="preserve">
          <source>switch to the GNU linker. As with functions, using the attribute for a variable eliminates a thunk in the DLL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67929047881e790d3bb34af79199c18b58651c48" translate="yes" xml:space="preserve">
          <source>switch too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ad33f3ba924265528003d8ff102a20fead1ea3" translate="yes" xml:space="preserve">
          <source>switch warns when G++ generates code that is probably not compatible with the C++ ABI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1667fc0fd2fbfe7fa3cfc3a9f890d22675a6b35" translate="yes" xml:space="preserve">
          <source>switch).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526d6026c690e5872c91c6ed15d2a7c2cd3034ff" translate="yes" xml:space="preserve">
          <source>switch, GCC aligns structures containing the above types differently than most published application binary interface specifications for the m68k.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734e317fe0e53005fc850a84114edc4ef476c9ed" translate="yes" xml:space="preserve">
          <source>switch, but that switch only records information in the assembler output file as comments, so it never reaches the object file. See also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1792a00601d05f78c81e66fd9682d8d6aad7d3" translate="yes" xml:space="preserve">
          <source>switch, or when invoking CPP explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4a6cee20a04297f9a4cb3459b81d0fb25fa759" translate="yes" xml:space="preserve">
          <source>switch, structures containing the above types are aligned differently than the published application binary interface specifications for the x86-32 and are not binary compatible with structures in code compiled without that switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9770fce6d78c80d2bacba4c3519b295199e49263" translate="yes" xml:space="preserve">
          <source>switch, the VIS extension is exposed as the following built-in functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91326573b68f37945254eee3309d8fd759f6192c" translate="yes" xml:space="preserve">
          <source>switch, the VIS version 2.0 built-in functions also become available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550ac7e9ca69e25d6eca14a310c44e0c9ee4b199" translate="yes" xml:space="preserve">
          <source>switch, the VIS version 3.0 built-in functions also become available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9685da397c0255af438e7f9a5a8167c06fbf2ef6" translate="yes" xml:space="preserve">
          <source>switch, the VIS version 4.0 built-in functions also become available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8958e6bca0e77da97683002c9e21c42cdd1b9290" translate="yes" xml:space="preserve">
          <source>switch, the VIS version 4.0B built-in functions also become available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b469f6bc2c708ce5275024b503da37a49f298b59" translate="yes" xml:space="preserve">
          <source>switch-conversion-max-branch-ratio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c26a3c3b587adb57b5fc4e408c46dab4dc23134" translate="yes" xml:space="preserve">
          <source>switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a926f36a179ab141a405bbb39066704607ef4c" translate="yes" xml:space="preserve">
          <source>switch. The syntax, semantics, and accepted values for &lt;var&gt;string&lt;/var&gt; in this option are not guaranteed to be consistent across releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736d6068888456d686c3ca35e039e846519cc6aa" translate="yes" xml:space="preserve">
          <source>switch. Use it to conform to a non-default application binary interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ab952a3fd3d0f7e7fef285bbf8ec706ae41bda" translate="yes" xml:space="preserve">
          <source>switches are handled specifically in these constructs. If another value of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4628642cde3fa96104bb45b1bb869d8fc9f1d084" translate="yes" xml:space="preserve">
          <source>switches have different meaning when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f4f219bd6254089e72afa58e8dc4a5de50ecbd" translate="yes" xml:space="preserve">
          <source>switches to enable SSE extensions and make this option effective. For the x86-64 compiler, these extensions are enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1176399ca436f19e725166e84007801097e371ae" translate="yes" xml:space="preserve">
          <source>symbol_ref or const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b387ced110858dcbcda36edb044dc18f91a0894" translate="yes" xml:space="preserve">
          <source>sync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b7e91614f61a5f37697ec1b67830665af0252f" translate="yes" xml:space="preserve">
          <source>syntax than as separate arguments. For example, you can specify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b68ddf7e2b3f8e1c7bdafb82ebbdd060a84d6b" translate="yes" xml:space="preserve">
          <source>syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c56ee8d2854166dec66644f541b85247105b2c" translate="yes" xml:space="preserve">
          <source>sys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509bdb599de42eef58bb031df6fb9364c3ddd401" translate="yes" xml:space="preserve">
          <source>sysreg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9d132018558798b807d7846137ccd92cf16c52" translate="yes" xml:space="preserve">
          <source>sysv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efd86fb78a56a5145ed7739dcb00c78581c5375" translate="yes" xml:space="preserve">
          <source>t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ea24f19e645082b1b4bc70f514bed6a1a53d70" translate="yes" xml:space="preserve">
          <source>take precedence over this prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c4d1925cd3cf7f108e8e43c01655cab5c871d9" translate="yes" xml:space="preserve">
          <source>take precedence. This enables full preprocessing of files previously preprocessed with &lt;code&gt;-E -fdirectives-only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596c4b8d1cdcd52599c123e3a9b42035d67bacdf" translate="yes" xml:space="preserve">
          <source>take precedence; and for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec8282ca67dc7af6fd2f92f9e6cefca1b26bf0c" translate="yes" xml:space="preserve">
          <source>takes precedence over</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ecf9354b8ecaa6ffb2bade59fe921f71d3e087" translate="yes" xml:space="preserve">
          <source>takes precedence over this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680254bad1d7ca0d65ec46aaa315d363abf6a50a" translate="yes" xml:space="preserve">
          <source>tar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8a3ad980ec179856012b7eecf4327e99cd44cd" translate="yes" xml:space="preserve">
          <source>target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3932c6162b1c7b5d0eef361d98b74d9a6a040c7" translate="yes" xml:space="preserve">
          <source>target flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204da078bb794ca7b065b3ff55e0f162ee76e3a2" translate="yes" xml:space="preserve">
          <source>tbm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7041f648e6723174ab4d62664fab255a0167b736" translate="yes" xml:space="preserve">
          <source>tells GCC that subsequent calls to function &lt;code&gt;square&lt;/code&gt; with the same argument value can be replaced by the result of the first call regardless of the statements in between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20ecd92141bece3dc8a88e3c603a54f8a0e4deb" translate="yes" xml:space="preserve">
          <source>tells GCC that subsequent calls to the function &lt;code&gt;hash&lt;/code&gt; with the same string can be replaced by the result of the first call provided the state of the program observable by &lt;code&gt;hash&lt;/code&gt;, including the contents of the array itself, does not change in between. Even though &lt;code&gt;hash&lt;/code&gt; takes a non-const pointer argument it must not modify the array it points to, or any other object whose value the rest of the program may depend on. However, the caller may safely change the contents of the array between successive calls to the function (doing so disables the optimization). The restriction also applies to member objects referenced by the &lt;code&gt;this&lt;/code&gt; pointer in C++ non-static member functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca2141cd5ef5d7c6cbbcf18a65b9e4fa0606093" translate="yes" xml:space="preserve">
          <source>tells GCC to use the traditional GNU semantics for &lt;code&gt;inline&lt;/code&gt; functions when in C99 mode. See &lt;a href=&quot;inline#Inline&quot;&gt;An Inline Function is As Fast As a Macro&lt;/a&gt;. Using this option is roughly equivalent to adding the &lt;code&gt;gnu_inline&lt;/code&gt; function attribute to all inline functions (see &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854779d7227966964df38e650fb63c763e271a0b" translate="yes" xml:space="preserve">
          <source>tells the compiler that each time it encounters &lt;code&gt;WOApplication&lt;/code&gt; as a class name, it should replace it with &lt;code&gt;GSWApplication&lt;/code&gt; (that is, &lt;code&gt;WOApplication&lt;/code&gt; is just an alias for &lt;code&gt;GSWApplication&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849291de99aaaed7f400c5b0cf2b166c3ffde183" translate="yes" xml:space="preserve">
          <source>tells the compiler to remove the hardware capabilities generated by the Solaris assembler. This is only necessary when object files use ISA extensions not supported by the current machine, but check at runtime whether or not to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660235597afa52cf02d8c03a3388c99c1827bc24" translate="yes" xml:space="preserve">
          <source>testing, set &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; to say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372ea08cab33e71c02c651dbc83a474d32c676ea" translate="yes" xml:space="preserve">
          <source>text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce511a51fc9f6a1b2d7d6cfdc1707a6acb906662" translate="yes" xml:space="preserve">
          <source>that are not included in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf79f3e310f3950583c16af9ff3295631bc079" translate="yes" xml:space="preserve">
          <source>that are used for linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dd37474b18c35c1847b7773a9077ed25b89904" translate="yes" xml:space="preserve">
          <source>that results in default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbccdf2efb33b52e6c9d0a14dd70b2d415fbea6e" translate="yes" xml:space="preserve">
          <source>the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea5286b30efe01613b87b22823575f54fd15628" translate="yes" xml:space="preserve">
          <source>the &amp;ldquo;inlining chain&amp;rdquo; for the code being optimized, so that when a function is inlined into several different places (which might themselves be inlined), the reader can distinguish between the copies,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b593243de67365df4340818a6b87054081a25bcf" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;+load&lt;/code&gt; implementation of a class is executed before the &lt;code&gt;+load&lt;/code&gt; implementation of any category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba3688a35573f3f867d37106dde1a3b50c939ae" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;+load&lt;/code&gt; implementation of all super classes of a class are executed before the &lt;code&gt;+load&lt;/code&gt; of that class is executed;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1567d2eb5aba56b9ce17fce64a7265973de5e5ae" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;A&lt;/code&gt; class version of &lt;code&gt;f&lt;/code&gt; is hidden in &lt;code&gt;B&lt;/code&gt;, and code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a1e5f4a068e8fa7e75af7d2cfdf313d9a24a7c" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;noreturn&lt;/code&gt; attribute applies to all the functions declared; the &lt;code&gt;format&lt;/code&gt; attribute only applies to &lt;code&gt;d1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70eba1f6eb88acca2d51a506ef00423322a32af" translate="yes" xml:space="preserve">
          <source>the GCC pass that emitted the message, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a541da57ca06731218cffa25eae84b6939e024c2" translate="yes" xml:space="preserve">
          <source>the compiler assumes that if interposition happens for functions the overwriting function will have precisely the same semantics (and side effects). Similarly if interposition happens for variables, the constructor of the variable will be the same. The flag has no effect for functions explicitly declared inline (where it is never allowed for interposition to change semantics) and for symbols explicitly declared weak.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b173b90f0b62faa2226dcb1fb04df8d5ef821f75" translate="yes" xml:space="preserve">
          <source>the compiler does not warn about constructs contained within header files found via &lt;var&gt;dir&lt;/var&gt;. This option is valid only for the C family of languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b93353846087d77d8dbf6b8d926b9b674c3079" translate="yes" xml:space="preserve">
          <source>the compiler driver adds or removes this option from the compiler proper&amp;rsquo;s command line, because the compiler then knows if the device or architecture has an 8-bit stack pointer and thus no &lt;code&gt;SPH&lt;/code&gt; register or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e2d5dd76b88a72c4ad90affb0b840b5a88487f" translate="yes" xml:space="preserve">
          <source>the compiler performs the entire computation with &lt;code&gt;double&lt;/code&gt; because the floating-point literal is a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a716caf94aa07af4ab52d73b53773a7538264a1" translate="yes" xml:space="preserve">
          <source>the default by configuring GCC with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04abeaa2cabf93ef2c3c754731d72368923d3b0" translate="yes" xml:space="preserve">
          <source>the default is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c2301484cdc5eb4574cec30f7f7fedfd659b04" translate="yes" xml:space="preserve">
          <source>the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308f7defa6c7125adfedbe8ca3049e98e8f287d1" translate="yes" xml:space="preserve">
          <source>the execution count of the code being optimized, along with metadata about whether this was from actual profile data, or just an estimate, allowing consumers to prioritize messages by code hotness,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d82614cbbb50fa51032eeb7f78d1712e956fb2f" translate="yes" xml:space="preserve">
          <source>the following initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4040d7fa8b07a97810a09c26fdab7494c9f98a3f" translate="yes" xml:space="preserve">
          <source>the function name of the code being optimized, where applicable,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fec401caf24b2d3f7d89f25c27dd3569567d1f" translate="yes" xml:space="preserve">
          <source>the iteration is implemented by the compiler by repeatedly getting batches of objects from the collection object using the fast enumeration protocol (see below), then iterating over all objects in the batch. This is faster than a normal enumeration where objects are retrieved one by one (hence the name &amp;ldquo;fast enumeration&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59068011c168814ad74790e7573a99f4245af05e" translate="yes" xml:space="preserve">
          <source>the list of optimization passes that are turned on and off by the current command-line options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcc60f7acbacf29b44e38a400bac9e5f120242e" translate="yes" xml:space="preserve">
          <source>the literals are interspersed in the text section by the assembler. Compiler does not produce explicit &lt;code&gt;.literal&lt;/code&gt; directives and loads literals into registers with &lt;code&gt;MOVI&lt;/code&gt; instructions instead of &lt;code&gt;L32R&lt;/code&gt; to let the assembler do relaxation and place literals as necessary. This option allows assembler to create several literal pools per function and assemble very big functions, which may not be possible with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f718d6eede26fa9eaaa6ea850c637462a64bebe4" translate="yes" xml:space="preserve">
          <source>the location in GCC&amp;rsquo;s own code from which the message was emitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2997a09292df6ee55ccf49c2fe1e76a913b6a65f" translate="yes" xml:space="preserve">
          <source>the macro is defined to &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04a6d67afd2c3a8f5d96702490630ce6d4f82b5" translate="yes" xml:space="preserve">
          <source>the macro is defined to &lt;code&gt;atmega8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355646d10b7c8fcdd2d82ae7806a0f5db13e579b" translate="yes" xml:space="preserve">
          <source>the memory occupied by an incoming stack argument;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17789fc37ac7d9d80c7accea5eecb2ac0e19836d" translate="yes" xml:space="preserve">
          <source>the memory occupied by an object with a link-time-constant address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4412d80e9d9317d7d8e18c9c5cb40aaef14ff9fe" translate="yes" xml:space="preserve">
          <source>the memory occupied by the current function&amp;rsquo;s stack frame;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4fbb0a121c9538a40d5da8d2688d772040e051" translate="yes" xml:space="preserve">
          <source>the precompiled header. If the header files have guards against multiple inclusion, they are skipped because they&amp;rsquo;ve already been included (in the precompiled header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dc37c3aa31e569ca36d33218dc7ed66b246dd8" translate="yes" xml:space="preserve">
          <source>the read-only qualifier of the pointee gets emitted before the &amp;rsquo;^&amp;rsquo;. The read-only qualifier of the pointer itself gets ignored, unless it is a typedef. Also, the &amp;rsquo;r&amp;rsquo; is only emitted for the outermost type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672d573879c1202e2e06461340de5d13be720013" translate="yes" xml:space="preserve">
          <source>the source code lines associated with the assembly instructions, in the form FILENAME:LINENUMBER:CONTENT OF LINE,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23085fe4db2d81f02844e6007f9a80fb5b3e5547" translate="yes" xml:space="preserve">
          <source>the value of &lt;code&gt;__alignof__ (foo1.y)&lt;/code&gt; is 1, even though its actual alignment is probably 2 or 4, the same as &lt;code&gt;__alignof__ (int)&lt;/code&gt;. It is an error to ask for the alignment of an incomplete type other than &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79169ad61c1161d4142622cff145a2e7917c1709" translate="yes" xml:space="preserve">
          <source>then the implementation of &lt;code&gt;foo&lt;/code&gt; must allow &lt;code&gt;j foo&lt;/code&gt; and &lt;code&gt;jal foo&lt;/code&gt; to be executed speculatively. GCC honors this restriction for functions it compiles itself. It expects non-GCC functions (such as hand-written assembly code) to do the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffabb4583f1a68d45a76c8b9f520119218d53aa7" translate="yes" xml:space="preserve">
          <source>therefore disables direct jumps unless GCC knows that the target of the jump is not compressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2543fff3bfa6f144c2f06a7de6cd10c0b650cae" translate="yes" xml:space="preserve">
          <source>this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cc0e21afc891a9369186579dea6dd551209416" translate="yes" xml:space="preserve">
          <source>this considers e.g. even constant initialized arrays or initialized constant variables with integral or floating-point types. Languages like C or C++ require each variable, including multiple instances of the same variable in recursive calls, to have distinct locations, so using this option results in non-conforming behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969f11c7000af28297bc0a9dd0ea0539e20a6a8e" translate="yes" xml:space="preserve">
          <source>this example using maxint will not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b992ec60f7787e4bf897a3e44bdfa43a335a4bf7" translate="yes" xml:space="preserve">
          <source>this is completely equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5bd05243515dc007064d1c5ae985f10132a1dd" translate="yes" xml:space="preserve">
          <source>this setting of the option may result in warnings for benign code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28d2b77fa489ab5252d57c24a900533eb9bab17" translate="yes" xml:space="preserve">
          <source>thumb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbf09ec296b8934eeef878d2291a86b53a1df09" translate="yes" xml:space="preserve">
          <source>thunderx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778ec78a1031df3dd767fc0bd18489d375cf450e" translate="yes" xml:space="preserve">
          <source>thunderx2t99</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b55768eb832575357bd8b4245a3bd047c96850e" translate="yes" xml:space="preserve">
          <source>thunderxt81</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394ea9c4bd08ee3fae1b69eb7e2c7c5752a8752a" translate="yes" xml:space="preserve">
          <source>thunderxt83</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd860e80f14e802fc616a932ad7f3cf131106d6" translate="yes" xml:space="preserve">
          <source>thunderxt88</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dba87655b525042a449c0005fa6f444eb0b21f" translate="yes" xml:space="preserve">
          <source>thunderxt88p1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6cac57f8c0dbec98aa7810b36b3e7ae7929472" translate="yes" xml:space="preserve">
          <source>thunk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74b9e80ce88383dd17226a4dbba5d52605e3572" translate="yes" xml:space="preserve">
          <source>thunk-extern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0860f7803c96ba37c0e2dfdb8391f2326b1284" translate="yes" xml:space="preserve">
          <source>thunk-inline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50596833fb06679dc4db3ffd03eb29c2d2ec906" translate="yes" xml:space="preserve">
          <source>tilegx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6d22ed0c40f1c704a6b00fd923b78eb03b7f34" translate="yes" xml:space="preserve">
          <source>tilepro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf33a6969b3beb751af68522935f3b388b9e753" translate="yes" xml:space="preserve">
          <source>times the number of branches in the switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d37e761f1cec251fe5a0e83b70ce4a5d116766" translate="yes" xml:space="preserve">
          <source>times the size of the original pointer parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4927dda05af693bff7dfd4c7b40eafb0ef92a78" translate="yes" xml:space="preserve">
          <source>tiny</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b88ae9be6fb4236e3471519abb479a3670b49cd" translate="yes" xml:space="preserve">
          <source>titan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4929fca9d47db1f6c2520ce3d6bdd6a9304c9812" translate="yes" xml:space="preserve">
          <source>tls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c8667010d2fa7e6b36f9ca8ba368f4f573a41f" translate="yes" xml:space="preserve">
          <source>tmp.cpp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7326ca5f865d931651df77924995af99eaf04b" translate="yes" xml:space="preserve">
          <source>tmp.cpp.gcov</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cfd4acf4fdd79e8c01a78fb3edc3a8e5375e23" translate="yes" xml:space="preserve">
          <source>to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad77733882b0f557ba634a652ae297751f0bb786" translate="yes" xml:space="preserve">
          <source>to &lt;code&gt;ld&lt;/code&gt; on all links. It is the default when GCC is configured, explicitly or implicitly, with the HP linker. This option does not affect which &lt;code&gt;ld&lt;/code&gt; is called; it only changes what parameters are passed to that &lt;code&gt;ld&lt;/code&gt;. The &lt;code&gt;ld&lt;/code&gt; that is called is determined by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052574ea506322e4175ab8fe7ae5997851a73c7d" translate="yes" xml:space="preserve">
          <source>to &lt;code&gt;ld&lt;/code&gt; when building a shared library and passes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f375ed6b7d21e29bef7ec7001ca9cb7e1f10a01" translate="yes" xml:space="preserve">
          <source>to &lt;code&gt;ld&lt;/code&gt; when building a shared library. It is the default when GCC is configured, explicitly or implicitly, with the GNU linker. This option does not affect which &lt;code&gt;ld&lt;/code&gt; is called; it only changes what parameters are passed to that &lt;code&gt;ld&lt;/code&gt;. The &lt;code&gt;ld&lt;/code&gt; that is called is determined by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1250d72b054639a61892f6728a722d21e18c2ce" translate="yes" xml:space="preserve">
          <source>to adjust the current ABI with AltiVec ABI enhancements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacda4188a74bd486d4cf133dcfe04f422db0e49" translate="yes" xml:space="preserve">
          <source>to allow conditional traps on architectures that support them and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147272a50a96cc571871ade447fc98965e18e962" translate="yes" xml:space="preserve">
          <source>to allow the interprocedural optimizers to use more aggressive assumptions which may lead to improved optimization opportunities. Use of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9691671345bd07de9bb4c781ae964352a7002be7" translate="yes" xml:space="preserve">
          <source>to appear or disappear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0382b54d4234588ef716753062bdbd34ae35cb36" translate="yes" xml:space="preserve">
          <source>to be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfc1d1ae9b1990e6658c2bd29b4de5a3bf0b512" translate="yes" xml:space="preserve">
          <source>to be enabled. Enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947d9c4220735ddf7f9b69b00b4604108a31e9b0" translate="yes" xml:space="preserve">
          <source>to bypass the compiler driver and pass &lt;var&gt;option&lt;/var&gt; directly through to the preprocessor. If &lt;var&gt;option&lt;/var&gt; contains commas, it is split into multiple options at the commas. However, many options are modified, translated or interpreted by the compiler driver before being passed to the preprocessor, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cdbef1c720986a00615faa73ec1ab90de0da56" translate="yes" xml:space="preserve">
          <source>to check programs for strict ISO C conformance. They soon find that it does not do quite what they want: it finds some non-ISO practices, but not all&amp;mdash;only those for which ISO C &lt;em&gt;requires&lt;/em&gt; a diagnostic, and some others for which diagnostics have been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a255a686858f555c8fd88d5aeff6def8cb3789" translate="yes" xml:space="preserve">
          <source>to control ENDBR insertion at the function entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b2179fa50d0dc5c03ac2bc86827309972186c2" translate="yes" xml:space="preserve">
          <source>to create absolute path names in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d153980416e2776871ed7a73354bcce21b8190" translate="yes" xml:space="preserve">
          <source>to detect missing declarations in C++.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0933a20f384a8d7b9d33c0af497e5215d98b2935" translate="yes" xml:space="preserve">
          <source>to detect missing prototypes. In C++, no warnings are issued for function templates, or for inline functions, or for functions in anonymous namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a494cba1db39103892ec4114a05e2de145d05037" translate="yes" xml:space="preserve">
          <source>to determine which diagnostics are controllable and which option controls them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c695a6dd538d5dbb5a57dc4290630308c91e43d" translate="yes" xml:space="preserve">
          <source>to disable it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e041429b9c0952fdf9f213889fda578a011674" translate="yes" xml:space="preserve">
          <source>to disable the implicit generation of template instances, and explicitly instantiate all the ones you use. This approach requires more knowledge of exactly which instances you need than do the others, but it&amp;rsquo;s less mysterious and allows greater control if you want to ensure that only the intended instances are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4ff82cecad67b167eba0065ea2bf4d09eb3446" translate="yes" xml:space="preserve">
          <source>to disable them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd73b9246bec2bc2e55283764a502c551078ee1" translate="yes" xml:space="preserve">
          <source>to disable this optimization for programs that depend on that behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039e1612b10e94f6f2659062c88dfdf875e27be6" translate="yes" xml:space="preserve">
          <source>to disable this warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55d75fe437132ac1720cd629fab6a05c42e7af5" translate="yes" xml:space="preserve">
          <source>to enable it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcccf63e106112dbb4698af1310d60e11c3d159" translate="yes" xml:space="preserve">
          <source>to enable the Graphite loop transformation infrastructure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c212994ff609c34988244931def67f8d2af0420" translate="yes" xml:space="preserve">
          <source>to enforce a stack limit of 128KB. Note that this may only work with the GNU linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734400b7fea19d9bbb9a0e9ecbe544eadcf35f57" translate="yes" xml:space="preserve">
          <source>to ensure that directory is searched before (or instead of) the directory containing the original header. Then, if you want to check that the precompiled header file is always used, you can put a file of the same name as the original header in this directory containing an &lt;code&gt;#error&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56612887fdcd087119426d8be9265bde6fc63d89" translate="yes" xml:space="preserve">
          <source>to ensure that the library participates in the LTO optimization process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05bd5385bf80f9a9a04934cc031957bdf366cef" translate="yes" xml:space="preserve">
          <source>to find out the exact set of optimizations that are enabled at each level. See &lt;a href=&quot;overall-options#Overall-Options&quot;&gt;Overall Options&lt;/a&gt;, for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629b35a9e103e85590bf77ad4ca23d31085af6a9" translate="yes" xml:space="preserve">
          <source>to force the use of breaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1097919176c00815b8ac50d1decf852e1bee39" translate="yes" xml:space="preserve">
          <source>to generate compare-and-branch (&lt;code&gt;br&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt;) instructions. It has no effect on generation of these instructions driven by the combiner pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603b5b4262418040b0998e125944b949f7e6a74c" translate="yes" xml:space="preserve">
          <source>to generate output using the global registers 2 through 4, which the SPARC SVR4 ABI reserves for applications. Like the global register 1, each global register 2 through 4 is then treated as an allocable register that is clobbered by function calls. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050dbf2043737f5734fcc472cca8363f2a6e0402" translate="yes" xml:space="preserve">
          <source>to generate the precompiled header but not when using it, you may or may not get debugging information for routines in the precompiled header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d64a41aeb3d720fbe4500f1925859d9eb0a9221" translate="yes" xml:space="preserve">
          <source>to get 32-bit code instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64fe5688710dc3468d5b3dfc4519d0326d987aa" translate="yes" xml:space="preserve">
          <source>to identify which features are GNU extensions given that version of the standard. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27759b6de471330fcc87c15f07af7d6823ab99f5" translate="yes" xml:space="preserve">
          <source>to inhibit this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4698276f01dd7d4d5a2857a8b316c4ea78bb2d42" translate="yes" xml:space="preserve">
          <source>to match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5d88ed04e4ec760db92ef12bc77910590db02f" translate="yes" xml:space="preserve">
          <source>to not conflict with the non-garbage-collected library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a51302506899d3e37776fb85e7b09b71b57057" translate="yes" xml:space="preserve">
          <source>to omit the &lt;code&gt;MEMW&lt;/code&gt; instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4b0d8525f5f8e70a145372815d6b689452061b" translate="yes" xml:space="preserve">
          <source>to override a system header file, substituting your own version, since these directories are searched before the standard system header file directories. However, you should not use this option to add directories that contain vendor-supplied system header files; use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f278c4572032c86b605671f5ebffd4ef00d07c75" translate="yes" xml:space="preserve">
          <source>to receive all required diagnostics).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460f07ff1dbfe17d44182eeae667fe92163a595e" translate="yes" xml:space="preserve">
          <source>to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983435caf1f50183a8104ce42b32d9c29ccb09d9" translate="yes" xml:space="preserve">
          <source>to say where &lt;code&gt;gcc&lt;/code&gt; is to stop. Note that some combinations (for example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2527b26f4ee6f9de55fb763b4725eaf6b8831b" translate="yes" xml:space="preserve">
          <source>to select this variant of C++.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00c1c1c90d09a4ce7f4fd4441ddc063ccee6f30" translate="yes" xml:space="preserve">
          <source>to specify the location of the alternate startup code provided by the HAL BSP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03580f5c66d67f97ea875aacde75a574f8b30638" translate="yes" xml:space="preserve">
          <source>to stop the library from making assumptions about externally-defined data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7b484d0d84261b71a1545c8d270843b3becfe1" translate="yes" xml:space="preserve">
          <source>to suppress them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c811a1b4242d771b19a525a1d208d80b642a9c43" translate="yes" xml:space="preserve">
          <source>to tell the compiler to treat the DMA instructions as potentially affecting all memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80dfa1b7e6d84586fbe04ae2e5b3ecc9425fc25b" translate="yes" xml:space="preserve">
          <source>to the &lt;var&gt;auxname&lt;/var&gt;. &lt;var&gt;auxname&lt;/var&gt; is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file. An entry is made up of three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9e8fa4ffeb576a3d8466c71f19f2e8236b9408" translate="yes" xml:space="preserve">
          <source>to the ELF linker, on targets that support it. This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table. This option is needed for some uses of &lt;code&gt;dlopen&lt;/code&gt; or to allow obtaining backtraces from within a program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9732ef0ab50a0fe284eee03a96d968a332478f" translate="yes" xml:space="preserve">
          <source>to the arguments passed to the second compilation. Dump the final internal representation in both compilations, and print an error if they differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7357ba56740482049f7f118ccf7fdf60e6c511" translate="yes" xml:space="preserve">
          <source>to the assembler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a429e6e7080a5e45e973cd47d6f62345704600" translate="yes" xml:space="preserve">
          <source>to the assembler. GCC doesn&amp;rsquo;t generate any DSP instructions at the moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b698023086fba4aa3d3217a8fe662a8e82d46376" translate="yes" xml:space="preserve">
          <source>to the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae556297d14df5c890b3b7d02a39e780883c02a" translate="yes" xml:space="preserve">
          <source>to the compiler driver. See the documentation of this option for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5e2bef65f1422dc494684575c79fffa7a01bcc" translate="yes" xml:space="preserve">
          <source>to the compiler without problems. In this mode the integrated preprocessor is little more than a tokenizer for the front ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f7d50ee83a18b2761d2a93448780c946fbf262" translate="yes" xml:space="preserve">
          <source>to the driver implies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef57e6bc8f62cc2f040dce93c08243f51f372494" translate="yes" xml:space="preserve">
          <source>to the link command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b83c33ceb7b4db9576f93cb9bbcdda02ff46c2" translate="yes" xml:space="preserve">
          <source>to the linker when linking a shared object. Using this option, you can link position-dependent code into a shared object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59df5222f9894c3b944a44fe0c985ada0e5e863e" translate="yes" xml:space="preserve">
          <source>to the linker. When using the GNU linker, you can also get the same effect with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff71001fb1b962107d41fe2e3c8ba6fef28f324f" translate="yes" xml:space="preserve">
          <source>to the profitability score of the candidate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3a4fd5dcd8a06d8488683e14b2c5e3c2978ff2" translate="yes" xml:space="preserve">
          <source>to use GNU make&amp;rsquo;s job server mode to determine the number of parallel jobs. This is useful when the Makefile calling GCC is already executing in parallel. You must prepend a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d334abf3afbc59414f963735bb8a9bef5c69125" translate="yes" xml:space="preserve">
          <source>to use any of the functions, such as &lt;code&gt;class_getName()&lt;/code&gt;, declared in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbc91f4d1da18c4a9eacc86aa69e8b5bbe2d818" translate="yes" xml:space="preserve">
          <source>to use this extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837548d358882f5d60c4f2f156607225b2b00e3b" translate="yes" xml:space="preserve">
          <source>to warn about changes relative to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30e94b5c3164ab76a747bf52c67540d2f17389d" translate="yes" xml:space="preserve">
          <source>to work around invalid code, and it will also only catch cases where functions in base classes are called, not where variables in base classes are used (as in the example above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d940d3a308e2226f6239f2b9cefd6d0b6a55f53" translate="yes" xml:space="preserve">
          <source>to your other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2981264b4e86f51b3136e2679743c7bdd13a2bb9" translate="yes" xml:space="preserve">
          <source>to zero causes a full collection to occur at every opportunity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5381a1aea30f9b9086a2ba40993581e9e64e84f7" translate="yes" xml:space="preserve">
          <source>to zero causes a full collection to occur at every opportunity. This is extremely slow, but can be useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da755fb8086355c63b04c7fc08e56e6cbf25bb3e" translate="yes" xml:space="preserve">
          <source>together with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416fee2b88f7586a5c4d06a5cd0afdd92932e941" translate="yes" xml:space="preserve">
          <source>together, it is possible to generate code that runs on a family of processors, but optimize the code for one particular member of that family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d21e7efea8f1d1cbc83bfe499c70e0d0b9006a4" translate="yes" xml:space="preserve">
          <source>toggles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536c0b339345616c1b33caf454454d8b8a190d6c" translate="yes" xml:space="preserve">
          <source>tomcat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c5535e1296d87e2d8d7799ab89807825da7076" translate="yes" xml:space="preserve">
          <source>tracer-dynamic-coverage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81784a60fb1acab3e1d4b1ff2b76ee4a9c633e76" translate="yes" xml:space="preserve">
          <source>tracer-dynamic-coverage-feedback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb680ac36c4bc2e3ee82f3bd4d7122a62aa2f6f2" translate="yes" xml:space="preserve">
          <source>tracer-min-branch-probability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3e8e730a4fc98f2f0311cfdb93e1379f732aea" translate="yes" xml:space="preserve">
          <source>tracer-min-branch-probability-feedback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84270d0c8d1a7f3a0c220e40a25a825bb3ed669c" translate="yes" xml:space="preserve">
          <source>tremont</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e441e270376256c7af48f740cf9d53562dadf722" translate="yes" xml:space="preserve">
          <source>true_le</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d0e1c4cf9761735e920b557562afba29f1c983" translate="yes" xml:space="preserve">
          <source>true_store_to_load</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f283ea9bea0e80213ac091021420ffc9b3415914" translate="yes" xml:space="preserve">
          <source>truncate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff580ca35b033e4b0f83d9e8fe28eee7eda4918" translate="yes" xml:space="preserve">
          <source>tsc701</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229e3402179c6180c660faf90643acb18211e1e8" translate="yes" xml:space="preserve">
          <source>tso</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad604f4f6482313a008463f4fcc00076b4b057" translate="yes" xml:space="preserve">
          <source>tsv110</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a7a3eec6e2c22bc62ab3f184c59faec3eb4285" translate="yes" xml:space="preserve">
          <source>tune=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbf2472cf2c548549b31c58eb3dc796d42cac30" translate="yes" xml:space="preserve">
          <source>tune=&lt;var&gt;TUNE&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e599cc03c5ad8855689660a51463b7addb8730" translate="yes" xml:space="preserve">
          <source>turns off certain features of GCC that are incompatible with ISO C90, such as the &lt;code&gt;asm&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt; keywords, but not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a &lt;code&gt;?:&lt;/code&gt; expression. On the other hand, when a GNU dialect of a standard is specified, all features supported by the compiler are enabled, even when those features change the meaning of the base standard. As a result, some strict-conforming programs may be rejected. The particular standard is used by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7c45835340256489beaf1f33d0482f325aa167" translate="yes" xml:space="preserve">
          <source>turns on all optimization flags specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673f9ec68e29a513136ec213b926eac92e38a1c4" translate="yes" xml:space="preserve">
          <source>turns on all optimizations specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35019a0858530979588439510eecc5908e16347" translate="yes" xml:space="preserve">
          <source>turns on the following optimization flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6622ae51eb9825794bdfc50c805d1e4e00507603" translate="yes" xml:space="preserve">
          <source>turns on the following warning flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679379aaad8b89b2891e7c78b8bc927a0bf02326" translate="yes" xml:space="preserve">
          <source>turns the warnings controlled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7bfaae75b281b1ebae741c8e5d94f222804964" translate="yes" xml:space="preserve">
          <source>turns this on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c941051db64c3be492ca9df45d7349ddce20ffc" translate="yes" xml:space="preserve">
          <source>twice, once for the option and once for the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd56cb8ef558ea2df1bfac863d2f550e72445da" translate="yes" xml:space="preserve">
          <source>twice, once for the option and once for the argument. For example, to pass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54deb17b571f640eb555cc2a30565f68da936eef" translate="yes" xml:space="preserve">
          <source>two parameters are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce20d0b7e29581da2ce0ab6dced2d74f29ffebc" translate="yes" xml:space="preserve">
          <source>type_info</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8d37351ca8a6a7739b030036a7e7089e1f8853" translate="yes" xml:space="preserve">
          <source>typeid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e69892ab49df85c6230ccc57f8e1d1606caccc" translate="yes" xml:space="preserve">
          <source>u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be01fe4a515750d5ab46675777a7bc0e62d229a" translate="yes" xml:space="preserve">
          <source>ucache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c960b11e006c84a44916f80fc4a1ef9f39dfbe3" translate="yes" xml:space="preserve">
          <source>uhk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9914224f0ff2f09e1a0211c22526941f8798afe1" translate="yes" xml:space="preserve">
          <source>uhr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2577dd78b54fe28c65ee56ffbc8bb73058e08c0" translate="yes" xml:space="preserve">
          <source>uid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c42a321969a6abf1cf14a8d0ab4b1a07329ceb" translate="yes" xml:space="preserve">
          <source>uk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3b66f9c4f175dd93b125d08b9fe1b4cd25111e" translate="yes" xml:space="preserve">
          <source>ulk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fe479a2749f3437d91373b4275f7fb5dfc783b" translate="yes" xml:space="preserve">
          <source>ullk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6ee62e5108dfdb234e2fa8be9c48ae0fe9e920" translate="yes" xml:space="preserve">
          <source>ullr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ede418147ec5dd09699ae90901c0fa918f952b" translate="yes" xml:space="preserve">
          <source>ulr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74854ce102a32a75d2eda4da188ffd2cd03ac211" translate="yes" xml:space="preserve">
          <source>ultrasparc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b409d36df5cd71c1d68ce5071abc4cdf58b012" translate="yes" xml:space="preserve">
          <source>ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4, niagara7, m8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020fe295df946742b8e0bf1a9548ae1b566e62ce" translate="yes" xml:space="preserve">
          <source>ultrasparc3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b02c1c5d38014dad3e7f8287fa31126faa2925" translate="yes" xml:space="preserve">
          <source>unary arithmetic operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862298a39b9dce3bef134f29ec746bd4eb12d532" translate="yes" xml:space="preserve">
          <source>undocumented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c77b22b4ae5f68687b2320f8889b16f8ab80f6" translate="yes" xml:space="preserve">
          <source>unions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa3f0c8ceaf14ce8a84c4545bfb99b6fad55bb4" translate="yes" xml:space="preserve">
          <source>unix95.o</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38dc8538a7b6eca07316a4c2976715f91325c1fc" translate="yes" xml:space="preserve">
          <source>unix98.o</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47072ca1e0797506998ae898c6bc6400623fceab" translate="yes" xml:space="preserve">
          <source>unknown type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9980f6bf3b3cd6ef6d37126ba749b9b9292a23dc" translate="yes" xml:space="preserve">
          <source>unless GCC has been configured with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e702e81847d2cb1fef5b99f495076b9aaff4d684" translate="yes" xml:space="preserve">
          <source>unless options preventing their inclusion are used as well. This typically removes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d671de48b3171ccaa129911d88f092a66751bcb2" translate="yes" xml:space="preserve">
          <source>unless other diagnostics are being produced. This allows the use of new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a6f0b6f73a57a8b3ee30419e28f6cb95143908" translate="yes" xml:space="preserve">
          <source>unlimited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d38e760530a4ee7f3935cc545264bf30f767834" translate="yes" xml:space="preserve">
          <source>unrolled_loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a25ba5991316bdda4a9b3abcee2106016df28a0" translate="yes" xml:space="preserve">
          <source>update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b21fdd90a6056168b4b04da4c8c387c4fbce2f5" translate="yes" xml:space="preserve">
          <source>ur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04489a12bbaa6aebffb61ed2f524424ba8e1147e" translate="yes" xml:space="preserve">
          <source>use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2facbb1cbd656cd8e3d6d4a81237838006d744d6" translate="yes" xml:space="preserve">
          <source>used by the program without going all the way to a fully static link. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0e313983d96e6051bc4441c741e6c886ba4a60" translate="yes" xml:space="preserve">
          <source>usually calculates the addresses of all three variables, but if you compile it with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1dd75eed90fa89afc19a3c6b039f1a0e4b8891" translate="yes" xml:space="preserve">
          <source>v0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a03bae2ecfd070d7b7503cee7c26e30e6efa2a" translate="yes" xml:space="preserve">
          <source>v10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e31d5915661de4393e3f1489b00ebc4497dd48" translate="yes" xml:space="preserve">
          <source>v3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c8354c47776fb340222a415127286e3cf1fef7" translate="yes" xml:space="preserve">
          <source>v3.00.a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1535ef03c493cb53a68569bcfbc3d27c8d57008" translate="yes" xml:space="preserve">
          <source>v4.00.b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49417317361dfc11070a84c5ad9b1655e1ebcbf" translate="yes" xml:space="preserve">
          <source>v5.00.a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a4fe76c59044b17abc60e1a32a07faee8c704a" translate="yes" xml:space="preserve">
          <source>v5.00.b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803c5ce39075bf90fff623686ffd9e37635e0dd3" translate="yes" xml:space="preserve">
          <source>v6.00.a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cf2ef3ad15705851d02c005b381171af921bd7" translate="yes" xml:space="preserve">
          <source>v7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cbea7e89a45f46819777bb78a1f5bd0241f64c" translate="yes" xml:space="preserve">
          <source>v8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c661e992ccbe35af1b9e500734de7eb1b7e633" translate="yes" xml:space="preserve">
          <source>v9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60abb867de47426a8e6c2141273b784760b29067" translate="yes" xml:space="preserve">
          <source>v&lt;var&gt;X&lt;/var&gt;.&lt;var&gt;YY&lt;/var&gt;.&lt;var&gt;Z&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a85aa16b1383e63516555f79898cf92c6cb6cb" translate="yes" xml:space="preserve">
          <source>va_arg (ap, void *)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bd149c7f77d0ce75eddaee481bc96b1a7e2795" translate="yes" xml:space="preserve">
          <source>vaes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f69c278f46165447f30d10acf54277aaa3d5fc" translate="yes" xml:space="preserve">
          <source>val</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dffbaee37b0e0dc1203fac99a0be6cbfd5d09af" translate="yes" xml:space="preserve">
          <source>value of environment variable &lt;var&gt;VAR&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c058c680f97b51f5e2d1b17e162947607991fb0" translate="yes" xml:space="preserve">
          <source>value of the other parts (F&amp;mdash;all bits set)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46712f04e3a594d3f7fb9d3d743f6cb27f758abc" translate="yes" xml:space="preserve">
          <source>value profile counter values difference: Some counter values for value profile are runtime dependent, like heap addresses. It&amp;rsquo;s normal to see some difference in these kind of counters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345c822266c73d960e7e049d7d44d3fac7c7ec19" translate="yes" xml:space="preserve">
          <source>value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b80e9918a632d235fc6676b883823a647bb7b4a" translate="yes" xml:space="preserve">
          <source>value. Compiling with different values of &lt;var&gt;num&lt;/var&gt; may or may not work; if it doesn&amp;rsquo;t the linker gives an error message&amp;mdash;incorrect code is not generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bd83ae977ea8f493b8933e1ce0b0842c806310" translate="yes" xml:space="preserve">
          <source>vcrypto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b803e7ca5c714dbd85bf00d511fbc99a77690ad2" translate="yes" xml:space="preserve">
          <source>vec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a3656efb248ee678b7294feda650ae9b41003b" translate="yes" xml:space="preserve">
          <source>vec-div</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d0a7ebc8b48ccc78139d9016bc52c6cf1aa76" translate="yes" xml:space="preserve">
          <source>vec-sqrt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dea40099c64d39d76006d4cee60063ce9ae2add" translate="yes" xml:space="preserve">
          <source>vec.miss</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db313297acc16ccd19cca7f97655d97a6fa69c1" translate="yes" xml:space="preserve">
          <source>vec_ld</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edbfd96506a2d39748cb2be9d1e8fb891d72255" translate="yes" xml:space="preserve">
          <source>vec_st</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffec2e3f3ddd6e27424842d25369db3741afc16" translate="yes" xml:space="preserve">
          <source>vec_vsx_ld</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebcb466dd7e567e2a0f3063bdcb215f0b4ad02a" translate="yes" xml:space="preserve">
          <source>vec_vsx_st</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b4c87d5d71da2a16de98ba1ec408541e0c8c90" translate="yes" xml:space="preserve">
          <source>vecintrin.h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027c1146b1b8f9274e5a4cfd7a959e328a326cd6" translate="yes" xml:space="preserve">
          <source>vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7291eb9f68564dac97af15a22b95d630dbe88f40" translate="yes" xml:space="preserve">
          <source>vectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f73a838273f8b6a5792b9b4f27d36e76a0078b9" translate="yes" xml:space="preserve">
          <source>verbose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde688fc05bdc40ed8ef866f5c76ed405b6733f5" translate="yes" xml:space="preserve">
          <source>vfp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0124077057f5e72207ef47d7438ee3cd00cf49" translate="yes" xml:space="preserve">
          <source>vfpv2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc883f5f65f79cba11fe610ffae3a86ebf62e3cc" translate="yes" xml:space="preserve">
          <source>vfpv3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89df9c2f1d8fbc5b6e56f192e621072797bef590" translate="yes" xml:space="preserve">
          <source>vfpv3-d16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38edb06def2f92e8c644e28198937c16e97dd3a" translate="yes" xml:space="preserve">
          <source>vfpv3-d16-fp16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b9c4da415d8b4ef57023b532e85591d384c9b3" translate="yes" xml:space="preserve">
          <source>vfpv3-fp16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8bccb696112b1acc60db60494c81c11f0826b0" translate="yes" xml:space="preserve">
          <source>vfpv3xd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a178630e9edefbf9b13b01350141c8354ddffd04" translate="yes" xml:space="preserve">
          <source>vfpv3xd-fp16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb807de55cbf2253583831c7a9952511e1d1c1e9" translate="yes" xml:space="preserve">
          <source>vfpv4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcb4172253138f39c4d6ef73963e7b7b34b968e" translate="yes" xml:space="preserve">
          <source>vfpv4-d16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c67a59fdf97980d1c2f48f9c131617b9db163b" translate="yes" xml:space="preserve">
          <source>void *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a39cc50fc761bc2c955d7546e91c3954863b37" translate="yes" xml:space="preserve">
          <source>vops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8150b91109812eb9e0ab7335efe092fa34d688cf" translate="yes" xml:space="preserve">
          <source>vpclmulqdq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e88dfdee11a18f791b7188a9ffbcd1fdba30bd" translate="yes" xml:space="preserve">
          <source>vr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e3e5cdfae67c1875fd23501db55fe4bcc6844c" translate="yes" xml:space="preserve">
          <source>vr4100</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84448206c2e0a69c5b9aaac3b79425cbf7b91aa1" translate="yes" xml:space="preserve">
          <source>vr4111</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0635226edf9851209ada6b4274e75e9717a2a206" translate="yes" xml:space="preserve">
          <source>vr4120</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026a66d6a97b24e99a0a20381249a68118d79615" translate="yes" xml:space="preserve">
          <source>vr4130</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b88cf78bf386f70758dca1cb9ad8df1d37066e5" translate="yes" xml:space="preserve">
          <source>vr4300</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8783db6e9b9bb0a251f0675d07c4fe7a7e52fe" translate="yes" xml:space="preserve">
          <source>vr5000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540c1e0fa838c055a396167b8c7c61fe39f1d53a" translate="yes" xml:space="preserve">
          <source>vr5400</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789efffdf3066d91d11db22ed0875478ac77675b" translate="yes" xml:space="preserve">
          <source>vr5500</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e304510a234a413f67c87b3d5b3cf80b0eae288d" translate="yes" xml:space="preserve">
          <source>vsx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5dcda77f668f752af6c29ba9c2dbcc3da9fb0a" translate="yes" xml:space="preserve">
          <source>vtv_class_set_sizes.log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6e586385ab9f7a955d85df9b2c4fe02b14e73d" translate="yes" xml:space="preserve">
          <source>vtv_count_data.log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16655c9042551cf6c94774e6c4ff9468b9e81f4" translate="yes" xml:space="preserve">
          <source>vtv_set_ptr_data.log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966032eab6276624119a49080934e3936d2976f7" translate="yes" xml:space="preserve">
          <source>vulcan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2b701b95aa8a17285091170c8468169fde0790" translate="yes" xml:space="preserve">
          <source>vx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f0734fba51b9bc6910bfc4906a613ed88e1795" translate="yes" xml:space="preserve">
          <source>waitpkg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bff24d12dff091f69bf6227c8f80a7f43414182" translate="yes" xml:space="preserve">
          <source>warn about all class types that are caught by value. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693ecb6a9bf1bc0c7200f9c980324b96b1709910" translate="yes" xml:space="preserve">
          <source>warn about all types that are not caught by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bca20efb4ff8c0a30b8489f4724bf2ba5a00e2" translate="yes" xml:space="preserve">
          <source>warn if the compiler makes such assumptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdc9d05ec8dc055f926a73da8ab446accb696e3" translate="yes" xml:space="preserve">
          <source>warn-dynamicstack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584745f9e3919adb577655dd998aa66a344b046d" translate="yes" xml:space="preserve">
          <source>warn-framesize=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383fd7bf84aa027bdc40159c5d7c5805664a8eb2" translate="yes" xml:space="preserve">
          <source>warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb53762fe11407d981e2fbd44eedff880e02473" translate="yes" xml:space="preserve">
          <source>warning for mismatches. To suppress a warning for the necessary cast from a pointer to the implementation member function to the type of the corresponding non-member function use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4065d5c360701885a0131cfeeb87efae1308f0" translate="yes" xml:space="preserve">
          <source>warning is enabled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa8b14684e1a17d03eb422ffead96af9156353f" translate="yes" xml:space="preserve">
          <source>warning is enabled by default. To avoid the warning include the appropriate header to bring the prototypes of built-in functions into scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d07a9254eb30f9ababa0336f6640d159b849ab" translate="yes" xml:space="preserve">
          <source>warning must not trigger. The fallthrough attribute may appear at most once in each attribute list, and may not be mixed with other attributes. It can only be used in a switch statement (the compiler will issue an error otherwise), after a preceding statement and before a logically succeeding case label, or user-defined label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27428f8ab0fcd9cef55c146f1e6b10750dc2130b" translate="yes" xml:space="preserve">
          <source>warning of the variable-length array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8bfaaa339382d8195d3094c6bde13124c39a7a" translate="yes" xml:space="preserve">
          <source>warning should not be emitted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc36dc915dd9ed8f4f699c8029efe309df4fbda" translate="yes" xml:space="preserve">
          <source>warning using &lt;code&gt;[[fallthrough]];&lt;/code&gt; instead of the GNU attribute. In C++11 or C++14 users can use &lt;code&gt;[[gnu::fallthrough]];&lt;/code&gt;, which is a GNU extension. Instead of these attributes, it is also possible to add a fallthrough comment to silence the warning. The whole body of the C or C++ style comment should match the given regular expressions listed below. The option argument &lt;var&gt;n&lt;/var&gt; specifies what kind of comments are accepted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6be01127af67b499b57da0fae72ba37a45a9a4" translate="yes" xml:space="preserve">
          <source>warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3abe7d52b829dc6219de6cfa731a72895cce9c" translate="yes" xml:space="preserve">
          <source>warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad999ab8aef2776e77329475d94f4896683ce3e" translate="yes" xml:space="preserve">
          <source>warning: 'x' offset 12 in 'struct foo' isn't aligned to 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d93414fb6cfbe02c21db42e7b35acf56bb3b283" translate="yes" xml:space="preserve">
          <source>warning: 'x' offset 8 in 'struct foo' isn't aligned to 16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1280772c266ce894b42a3a1e327828ba37c5aad" translate="yes" xml:space="preserve">
          <source>warning: alignment 4 of 'struct foo' is less than 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3123a12b31d7cc81d919c714b250bf3bad05ac" translate="yes" xml:space="preserve">
          <source>warning: alignment 8 of 'struct foo' is less than 16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd207fab08951eb6cee30e4969e79ca50d1f7c65" translate="yes" xml:space="preserve">
          <source>warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62dac89b15d1538f641de43b89da17f7c0b2e0e" translate="yes" xml:space="preserve">
          <source>warnings and automatic tagging of functions and variables. Tagging inline namespaces is generally preferable to tagging individual declarations, but the latter is sometimes necessary, such as when only certain members of a class need to be tagged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fa5114978525e9b645ca3f5c9302d884a7ac25" translate="yes" xml:space="preserve">
          <source>warnings not be errors, even when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db49c56cb5d2bfb133872d4bfc3588ee675331dd" translate="yes" xml:space="preserve">
          <source>warnings without this one, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b53f1352f91f2442af91a6a1a5e976af595f67f" translate="yes" xml:space="preserve">
          <source>warnings, use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d0f44e764975442af162ae5f191c56e40fff82" translate="yes" xml:space="preserve">
          <source>warnings. The option is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1f4b32502228171ac659df8781be3651294f92" translate="yes" xml:space="preserve">
          <source>warns about C++ style &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da23f7e2ab350ffba198cf218e7e271a14335e21" translate="yes" xml:space="preserve">
          <source>warns about directives that traditional C understands but ignores because the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc1a565864bff761cdf60c2e48cdeb1dc7d2f0a" translate="yes" xml:space="preserve">
          <source>warns about places that might want to add a definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf568dbc15536f2d496c596dab5a0bc628c51a6" translate="yes" xml:space="preserve">
          <source>warns about, but in future warnings may be added to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0be8538afea2939eeb01fb3cd4ef7fabc4a9f4" translate="yes" xml:space="preserve">
          <source>warns when a function marked &lt;code&gt;inline&lt;/code&gt; could not be substituted, and gives the reason for the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5bad84b7ee4d84e9357d6ba4b6f8f3868ded3d" translate="yes" xml:space="preserve">
          <source>was built when the compiler was configured, these options have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb7f296a719f44d619fadae2c95b2f36c207ccd" translate="yes" xml:space="preserve">
          <source>was built with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828b2c20772c47edc15b0da80e3cfa7def40d3d3" translate="yes" xml:space="preserve">
          <source>was used, a floating point register or NO_REGS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784b8074d8c86c9fabcf21528e4c9e47bcbc43f1" translate="yes" xml:space="preserve">
          <source>wbnoinvd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d02e8ff56395107c97d1369ad02c5e2d8c6cd9" translate="yes" xml:space="preserve">
          <source>wchar.h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcec733657f3fe2f2ce30eb4ed2f9d050ca3455d" translate="yes" xml:space="preserve">
          <source>we can check the costs or benefits of the GIMPLE -&amp;gt; GRAPHITE -&amp;gt; GIMPLE transformation. Some minimal optimizations are also performed by the code generator isl, like index splitting and dead code elimination in loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35fc317d7038a7c76856f2e6b376a805b3c3f15" translate="yes" xml:space="preserve">
          <source>westmere</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752c518bfe91d35c090b1bfa01f1dbf45c9c5023" translate="yes" xml:space="preserve">
          <source>what lines of code are actually executed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbc42cce24a785ca691b398116235fedf945b40" translate="yes" xml:space="preserve">
          <source>when a single object file accesses more than 64k&amp;rsquo;s worth of GOT entries. Very few do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3905554642a6aa600757f758cd6a4d22de0d685" translate="yes" xml:space="preserve">
          <source>when compiling a single object file that accesses more than 8192 GOT entries. Very few do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0514c2cdda62bbdf465cc25fd0411ece5521891a" translate="yes" xml:space="preserve">
          <source>when compiling files that don&amp;rsquo;t &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fea24e7785433b650f36ab22b19b9480538dc03" translate="yes" xml:space="preserve">
          <source>when matching an option like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24074e8d69141f91cc32ea415bdba5149ac6039a" translate="yes" xml:space="preserve">
          <source>when running on the target system. This will fail if the corresponding directory does not exist and it is unable to create it. This can be overcome by, for example, setting the environment as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cb443e16cc113469637f0db83395333bde56d4" translate="yes" xml:space="preserve">
          <source>when targeting a CPU supporting the architecture versions V8 or V9 with FPU except</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02850b0f1c5f6694e7ec9881c34c5424aee4e4a3" translate="yes" xml:space="preserve">
          <source>when targeting a CPU that supports such an instruction, such as Niagara-2 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea057a56be62746ad34612238bf3f86b30a12f46" translate="yes" xml:space="preserve">
          <source>when targeting a CPU that supports such an instruction, such as Niagara-7 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbe2afb2561f071a8614860b3e8a5456dd324d7" translate="yes" xml:space="preserve">
          <source>when targeting a CPU that supports such instructions, such as Niagara-3 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c2867d207c7fc32220edbd16cf4ad7f30dbdbb" translate="yes" xml:space="preserve">
          <source>when targeting a CPU that supports such instructions, such as Niagara-4 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdf4ae9d43e3fbbce963adcaece62a32f742491" translate="yes" xml:space="preserve">
          <source>when targeting a cpu that supports such instructions, such as UltraSPARC-III and later. Setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0809c7864e1b89748cbbced3e27471f0198d57e6" translate="yes" xml:space="preserve">
          <source>when targeting a cpu that supports such instructions, such as m8 and later. Setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294d672f8b0219c6a9a49817b6de51730746df25" translate="yes" xml:space="preserve">
          <source>when targeting a cpu that supports such instructions, such as niagara-3 and later. Setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13ea81cca1a1522bd93057afeea8b91e8adc72a" translate="yes" xml:space="preserve">
          <source>when targeting a cpu that supports such instructions, such as niagara-7 and later. Setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07066641f72f4d9ee8cd2a5dea35a4871b310b8f" translate="yes" xml:space="preserve">
          <source>when testing pointer or floating-point values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fff53961d6e775c69232b0fbc9ae48f5c8704f7" translate="yes" xml:space="preserve">
          <source>when the iteration ends because there are no more objects to iterate over, &lt;code&gt;&lt;var&gt;object expression&lt;/var&gt;&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt;. This allows you to determine whether the iteration finished because a &lt;code&gt;break&lt;/code&gt; command was used (in which case &lt;code&gt;&lt;var&gt;object expression&lt;/var&gt;&lt;/code&gt; will remain set to the last object that was iterated over) or because it iterated over all the objects (in which case &lt;code&gt;&lt;var&gt;object expression&lt;/var&gt;&lt;/code&gt; will be set to &lt;code&gt;nil&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdc2a9d509ebc7afae190c0f1c79168f2db280b" translate="yes" xml:space="preserve">
          <source>whenever you build a shared library or a main executable, because C++ programs typically use exceptions, so this is the right thing to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b907f2b3fd5ef77f0ce05428eca1f61a37dc4df3" translate="yes" xml:space="preserve">
          <source>where &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8fffb5b1004bec80ffb58c6379910e377134da" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;&lt;var&gt;attr-string&lt;/var&gt;&lt;/code&gt; is one of the attribute strings specified above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb6dcb904087947251d23383748fb884b54d96f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;&lt;var&gt;string&lt;/var&gt;&lt;/code&gt; can be any string accepted as an AArch64 target attribute. See &lt;a href=&quot;aarch64-function-attributes#AArch64-Function-Attributes&quot;&gt;AArch64 Function Attributes&lt;/a&gt;, for more details on the permissible values of &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9a631c6f260ee2794eb89e716bb201a11a1f18" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;NSFastEnumerationState&lt;/code&gt; must be defined in your code as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da79c8ec6a5eda3bdf516906605c4b52a53059ad" translate="yes" xml:space="preserve">
          <source>where &lt;var&gt;cpu&lt;/var&gt; is &lt;code&gt;ev67&lt;/code&gt; or later. They all generate the machine instruction that is part of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934d3ed3df69be5aca01f4ade6b816a68a68d530" translate="yes" xml:space="preserve">
          <source>where &lt;var&gt;cpu&lt;/var&gt; is &lt;code&gt;pca56&lt;/code&gt; or later. They all generate the machine instruction that is part of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6a4ef2c70b1142dd749133182c02d2017e1f3a" translate="yes" xml:space="preserve">
          <source>where &lt;var&gt;op&lt;/var&gt; is the name of the instruction. Refer to the ISA manual for the complete list of instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185d7db6b76d8d4589a7db2b1c14e07ea90cf75f" translate="yes" xml:space="preserve">
          <source>where &lt;var&gt;prefix&lt;/var&gt; is the prefix to the installed compiler. In many cases &lt;var&gt;prefix&lt;/var&gt; is the value of &lt;code&gt;prefix&lt;/code&gt; when you ran the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a59d4fc3bd963e5a889655930070f10cb8e1aa8" translate="yes" xml:space="preserve">
          <source>where CPU is &amp;lsquo;power8&amp;rsquo; or later. They all generate the machine instruction that is part of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a9b25faec871180fb0c25a498ec984ef375532" translate="yes" xml:space="preserve">
          <source>where CPU is &amp;lsquo;power8&amp;rsquo; or later. This interface is common between PowerPC and S/390, allowing users to write one HTM source implementation that can be compiled and executed on either system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989859d3b6cc7f4402e6321c4c469231127497b5" translate="yes" xml:space="preserve">
          <source>where applicable. This mode also sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2809549c32b0c553e765277da172b8d08d8efb" translate="yes" xml:space="preserve">
          <source>where in the last form, &lt;var&gt;asm-qualifiers&lt;/var&gt; contains &lt;code&gt;goto&lt;/code&gt; (and in the first form, not).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1739132defb1405029331b32f782f974adfa6945" translate="yes" xml:space="preserve">
          <source>where it is declared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875c30baac2072dde7bb1c8014ca1796ae5f099d" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;note&lt;/code&gt; is a child of the &lt;code&gt;warning&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7d709f911a6dc91815d27e00faca76680e9d43" translate="yes" xml:space="preserve">
          <source>where the fix-it hint suggests replacing the text from &lt;code&gt;start&lt;/code&gt; up to but not including &lt;code&gt;next&lt;/code&gt; with &lt;code&gt;string&lt;/code&gt;&amp;rsquo;s value. Deletions are expressed via an empty value for &lt;code&gt;string&lt;/code&gt;, insertions by having &lt;code&gt;start&lt;/code&gt; equal &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b2d65f2e0a46e317e109aa392f3d62aa66549c" translate="yes" xml:space="preserve">
          <source>where the value in &lt;var&gt;dest&lt;/var&gt; will be the result returned from the built-in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c2f66fab3d51484c9d1fe235a171be8f77437b" translate="yes" xml:space="preserve">
          <source>which `gcc -print-prog-name=ld`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd75e699ad0c3badfb9e4d8744252f962e9876a5" translate="yes" xml:space="preserve">
          <source>which cleans up per-thread exception-handling data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a65e3e69a10cb3b229fed413be5750edd3db6c" translate="yes" xml:space="preserve">
          <source>which does not contain a processor reset vector handler. This is suitable for transferring control on a processor reset to the bootloader rather than the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e1a85e7b6651f532717e3d3bb99e3e6eb81147" translate="yes" xml:space="preserve">
          <source>which indicates how many times each line of a source file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4e07514985cec84d046812f721f3df94eee5ef" translate="yes" xml:space="preserve">
          <source>which will cause a &lt;code&gt;NULL&lt;/code&gt; pointer to be used for the unsafe case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e72557ade65af451c7d7f6f0f18d03a88d82c2" translate="yes" xml:space="preserve">
          <source>whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab2563a4afe176c80b016201bdd5365b8fe6d25" translate="yes" xml:space="preserve">
          <source>will always be false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac3e46886bb0c94c863c1f836d5cc22755b4c21" translate="yes" xml:space="preserve">
          <source>will cause a read of the volatile object pointed to by &lt;var&gt;src&lt;/var&gt; and store the value into the volatile object pointed to by &lt;var&gt;dst&lt;/var&gt;. There is no guarantee that these reads and writes are atomic, especially for objects larger than &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab4df65f2ed601275816d0e9536c397a1112ed9" translate="yes" xml:space="preserve">
          <source>will emit information on callsites that were inlined, along with callsites that were not inlined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2100e7e8507aac0629dc2711742ab58de771fb5" translate="yes" xml:space="preserve">
          <source>will increment &lt;code&gt;y&lt;/code&gt; unconditionally, not just when &lt;code&gt;c&lt;/code&gt; holds. The can usually be fixed by wrapping the macro in a do-while loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a2ad3933e9c77782d772b6e44eea15e78645ff" translate="yes" xml:space="preserve">
          <source>will instrument only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967cfa97c2736dbc76374c630ea4b664a97f2d4e" translate="yes" xml:space="preserve">
          <source>will not emit a warning. Because their types are incompatible, if a programmer accidentally uses one in place of the other, type checking will catch that and emit an error or warning. So not warning (about shadowing) in this case will not lead to undetected bugs. Use of this flag instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2d899c0e2855d00c682be640fe7c0ab0948f3c" translate="yes" xml:space="preserve">
          <source>will prevent instrumentation of all files that are located in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823fe1b2f7d4ebcd4c5262c40d3e13ac8a99173f" translate="yes" xml:space="preserve">
          <source>will produce an output file called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3c6b3bb03ea1810002e7f2e9e89c16e6bfab9e" translate="yes" xml:space="preserve">
          <source>will produce output &lt;code&gt;&quot;a&quot;&lt;/code&gt; regardless of what the argument &lt;var&gt;a&lt;/var&gt; is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd781ba095ea9625f154bbcf6df295db6a70cc39" translate="yes" xml:space="preserve">
          <source>will protect dynamic stack allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609ede2c7668f1d41b950db5c60a3855b5749217" translate="yes" xml:space="preserve">
          <source>will warn about more things if an older ABI version is selected (with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fe8f2b0f3f5297c69dc78e235ff1ec08ad9e93" translate="yes" xml:space="preserve">
          <source>will warn only if there is a check added later in a release series for an ABI issue discovered since the initial release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060138cd79436c2f5960cca89ee1066b0b239b07" translate="yes" xml:space="preserve">
          <source>winchip-c6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2423e1c42ea73b138534f49e35557ea211f42f8" translate="yes" xml:space="preserve">
          <source>winchip2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6551a5d074e9f2b6de875b47bf86000c9a340abe" translate="yes" xml:space="preserve">
          <source>with &amp;ldquo;runtime-linking&amp;rdquo; enabled on AIX. To accomplish this the application must be linked with &amp;ldquo;runtime-linking&amp;rdquo; option and the functions explicitly must be exported by the application (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d9f2279cd7fe66976d7c274d4aa2ec3a6cf6f7" translate="yes" xml:space="preserve">
          <source>with GCC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31055ad4e0d473fd782c78a366be8a0fb7b94985" translate="yes" xml:space="preserve">
          <source>with no modifications. However, this means that calls to &lt;code&gt;extern&lt;/code&gt; functions with no explicit visibility use the PLT, so it is more effective to use &lt;code&gt;__attribute ((visibility))&lt;/code&gt; and/or &lt;code&gt;#pragma GCC visibility&lt;/code&gt; to tell the compiler which &lt;code&gt;extern&lt;/code&gt; declarations should be treated as hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db39c1cf0be124606287081098976c6f211f749" translate="yes" xml:space="preserve">
          <source>with that compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d10d07240bf646aaaee33f9d07cd663e7534c1" translate="yes" xml:space="preserve">
          <source>with this option causes the stack frames not to be generated for leaf functions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4e654c613ea68bffeeab1587b7dbac44826c2b" translate="yes" xml:space="preserve">
          <source>without</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
