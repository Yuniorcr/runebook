<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="14b1c6d8e92795f3e38f41e2194c4effe03cfef2" translate="yes" xml:space="preserve">
          <source>Float.compare()</source>
          <target state="translated">Float.compare()</target>
        </trans-unit>
        <trans-unit id="4bc244a2f30dfa6752cad0eff6199ead3c60d367" translate="yes" xml:space="preserve">
          <source>Float.compareTo()</source>
          <target state="translated">Float.compareTo()</target>
        </trans-unit>
        <trans-unit id="ec9afe0390d115a5afd1ec29015a1115800da905" translate="yes" xml:space="preserve">
          <source>Float.doubleValue()</source>
          <target state="translated">Float.doubleValue()</target>
        </trans-unit>
        <trans-unit id="0a7435636ce70fa2140b15f815285bfb690253ba" translate="yes" xml:space="preserve">
          <source>Float.equals()</source>
          <target state="translated">Float.equals()</target>
        </trans-unit>
        <trans-unit id="89174f0a622d0819abf8079639212bcf61b17fb3" translate="yes" xml:space="preserve">
          <source>Float.floatToIntBits()</source>
          <target state="translated">Float.floatToIntBits()</target>
        </trans-unit>
        <trans-unit id="f88ceba2288dd52ad7c83a84d4a8ee6924a83a8e" translate="yes" xml:space="preserve">
          <source>Float.floatToRawIntBits()</source>
          <target state="translated">Float.floatToRawIntBits()</target>
        </trans-unit>
        <trans-unit id="1df4bc67926f07271c6e77d1bf2588ee71ad7dc6" translate="yes" xml:space="preserve">
          <source>Float.floatValue()</source>
          <target state="translated">Float.floatValue()</target>
        </trans-unit>
        <trans-unit id="978fe295cde8b13e1c69d5e8345f4503ecc63712" translate="yes" xml:space="preserve">
          <source>Float.hashCode()</source>
          <target state="translated">Float.hashCode()</target>
        </trans-unit>
        <trans-unit id="367885fdf1b04be5f3fd45725a9878b9e0d1e3ce" translate="yes" xml:space="preserve">
          <source>Float.intBitsToFloat()</source>
          <target state="translated">Float.intBitsToFloat()</target>
        </trans-unit>
        <trans-unit id="a678b5dc633d9584f35b1b48dacf0088197519be" translate="yes" xml:space="preserve">
          <source>Float.intValue()</source>
          <target state="translated">Float.intValue()</target>
        </trans-unit>
        <trans-unit id="7a5a879567b1e23dc5e85b7048f9b91bab834e2f" translate="yes" xml:space="preserve">
          <source>Float.isFinite()</source>
          <target state="translated">Float.isFinite()</target>
        </trans-unit>
        <trans-unit id="ecb53d5b3ddb28521550db45d7061cfc41458bb2" translate="yes" xml:space="preserve">
          <source>Float.isInfinite()</source>
          <target state="translated">Float.isInfinite()</target>
        </trans-unit>
        <trans-unit id="4cbb87ead6e58d9373ac3b0711d0f263c2cb8d7a" translate="yes" xml:space="preserve">
          <source>Float.isNaN()</source>
          <target state="translated">Float.isNaN()</target>
        </trans-unit>
        <trans-unit id="a88a671253565394fa2d74a24f8b69442ff0a7c5" translate="yes" xml:space="preserve">
          <source>Float.longValue()</source>
          <target state="translated">Float.longValue()</target>
        </trans-unit>
        <trans-unit id="60f2fbd103f521349406f2c47ac8dee00f9c12b0" translate="yes" xml:space="preserve">
          <source>Float.max()</source>
          <target state="translated">Float.max()</target>
        </trans-unit>
        <trans-unit id="deec23bf69ee572670f0db6ac40a04bbc01b9eed" translate="yes" xml:space="preserve">
          <source>Float.min()</source>
          <target state="translated">Float.min()</target>
        </trans-unit>
        <trans-unit id="b2b8cb2c905a03e7c15da392a38007b972a25f64" translate="yes" xml:space="preserve">
          <source>Float.parseFloat()</source>
          <target state="translated">Float.parseFloat()</target>
        </trans-unit>
        <trans-unit id="01755d4d59dcf64b32a407cde1adc7736197ef11" translate="yes" xml:space="preserve">
          <source>Float.shortValue()</source>
          <target state="translated">Float.shortValue()</target>
        </trans-unit>
        <trans-unit id="8d78998e2c129f04c590030d31e46539b4b14d3c" translate="yes" xml:space="preserve">
          <source>Float.sum()</source>
          <target state="translated">Float.sum()</target>
        </trans-unit>
        <trans-unit id="af8bf58af43421e316889dd37bb4f7bc400e32b5" translate="yes" xml:space="preserve">
          <source>Float.toHexString()</source>
          <target state="translated">Float.toHexString()</target>
        </trans-unit>
        <trans-unit id="c0e7194c54ad276ebd3053d684640de11b132a6b" translate="yes" xml:space="preserve">
          <source>Float.toString()</source>
          <target state="translated">Float.toString()</target>
        </trans-unit>
        <trans-unit id="5a3257a4ed6bcce8ba7f697ab53f02cf94112a97" translate="yes" xml:space="preserve">
          <source>Float.valueOf()</source>
          <target state="translated">Float.valueOf()</target>
        </trans-unit>
        <trans-unit id="a078475bd3c3f6681da8efeea5d12fc88f1442ca" translate="yes" xml:space="preserve">
          <source>FloatBuffer</source>
          <target state="translated">FloatBuffer</target>
        </trans-unit>
        <trans-unit id="662469c7c30b5a90e6232907decc04e1f1ae6180" translate="yes" xml:space="preserve">
          <source>FloatBuffer.allocate()</source>
          <target state="translated">FloatBuffer.allocate()</target>
        </trans-unit>
        <trans-unit id="0e6a9f838eeb6a6192fa21a6d8450eee8624406f" translate="yes" xml:space="preserve">
          <source>FloatBuffer.array()</source>
          <target state="translated">FloatBuffer.array()</target>
        </trans-unit>
        <trans-unit id="e8afa6a7790440e6c43800ad9e6f37d4a1a72902" translate="yes" xml:space="preserve">
          <source>FloatBuffer.arrayOffset()</source>
          <target state="translated">FloatBuffer.arrayOffset()</target>
        </trans-unit>
        <trans-unit id="23110c414735803cb2e9524b09c1d614546ddba4" translate="yes" xml:space="preserve">
          <source>FloatBuffer.asReadOnlyBuffer()</source>
          <target state="translated">FloatBuffer.asReadOnlyBuffer()</target>
        </trans-unit>
        <trans-unit id="c90275a459bf6eea63b763ff19741fb75697405c" translate="yes" xml:space="preserve">
          <source>FloatBuffer.compact()</source>
          <target state="translated">FloatBuffer.compact()</target>
        </trans-unit>
        <trans-unit id="d65614aa06519f781803884867cd2eaf4031dd89" translate="yes" xml:space="preserve">
          <source>FloatBuffer.compareTo()</source>
          <target state="translated">FloatBuffer.compareTo()</target>
        </trans-unit>
        <trans-unit id="032b9be98aa33e7c3465da1e4e6c0714d073f0d9" translate="yes" xml:space="preserve">
          <source>FloatBuffer.duplicate()</source>
          <target state="translated">FloatBuffer.duplicate()</target>
        </trans-unit>
        <trans-unit id="d983005f4d3313b2bde165553c781812b0583600" translate="yes" xml:space="preserve">
          <source>FloatBuffer.equals()</source>
          <target state="translated">FloatBuffer.equals()</target>
        </trans-unit>
        <trans-unit id="3bfbbfd6d48123dc19850f18a86ea1363e254c70" translate="yes" xml:space="preserve">
          <source>FloatBuffer.get()</source>
          <target state="translated">FloatBuffer.get()</target>
        </trans-unit>
        <trans-unit id="09d679c6857fd82d096421671c9824a2002dd733" translate="yes" xml:space="preserve">
          <source>FloatBuffer.hasArray()</source>
          <target state="translated">FloatBuffer.hasArray()</target>
        </trans-unit>
        <trans-unit id="17eb569ec3032a73b52f1c117117780618f0b862" translate="yes" xml:space="preserve">
          <source>FloatBuffer.hashCode()</source>
          <target state="translated">FloatBuffer.hashCode()</target>
        </trans-unit>
        <trans-unit id="4ef712753b6ddb07edec569f32b38756195ead3d" translate="yes" xml:space="preserve">
          <source>FloatBuffer.isDirect()</source>
          <target state="translated">FloatBuffer.isDirect()</target>
        </trans-unit>
        <trans-unit id="15f8cb8b9426afcbc2b92ee89ce25893a13cb85a" translate="yes" xml:space="preserve">
          <source>FloatBuffer.order()</source>
          <target state="translated">FloatBuffer.order()</target>
        </trans-unit>
        <trans-unit id="31a814ac430f94178b07082da2f86be6868e03b0" translate="yes" xml:space="preserve">
          <source>FloatBuffer.put()</source>
          <target state="translated">FloatBuffer.put()</target>
        </trans-unit>
        <trans-unit id="51aef77aa749b14b9a34a0aebb89749f822b2bec" translate="yes" xml:space="preserve">
          <source>FloatBuffer.slice()</source>
          <target state="translated">FloatBuffer.slice()</target>
        </trans-unit>
        <trans-unit id="ebe57cd70a949001ab9a64844e2ce614bb6f66ee" translate="yes" xml:space="preserve">
          <source>FloatBuffer.toString()</source>
          <target state="translated">FloatBuffer.toString()</target>
        </trans-unit>
        <trans-unit id="2af868fa3d593cc47c448727ae6561f7d00e8998" translate="yes" xml:space="preserve">
          <source>FloatBuffer.wrap()</source>
          <target state="translated">FloatBuffer.wrap()</target>
        </trans-unit>
        <trans-unit id="b9940e4d919de9a734b46912d8d615ccc47b17b9" translate="yes" xml:space="preserve">
          <source>FloatControl</source>
          <target state="translated">FloatControl</target>
        </trans-unit>
        <trans-unit id="b95bb0034e6d73bf3676fed52f5c11865577dce9" translate="yes" xml:space="preserve">
          <source>FloatControl.Type</source>
          <target state="translated">FloatControl.Type</target>
        </trans-unit>
        <trans-unit id="2cdb3cc6753dd220a35bf2ae855aba619dc1835d" translate="yes" xml:space="preserve">
          <source>FloatControl.getMaxLabel()</source>
          <target state="translated">FloatControl.getMaxLabel()</target>
        </trans-unit>
        <trans-unit id="9ea1faa0323c70342cb4d8b492ec6d96f3a8ec52" translate="yes" xml:space="preserve">
          <source>FloatControl.getMaximum()</source>
          <target state="translated">FloatControl.getMaximum()</target>
        </trans-unit>
        <trans-unit id="ec2b847e81332eaba5e13170625befe227eb347c" translate="yes" xml:space="preserve">
          <source>FloatControl.getMidLabel()</source>
          <target state="translated">FloatControl.getMidLabel()</target>
        </trans-unit>
        <trans-unit id="4544578bac83afd097f4e5d619f0286265315efa" translate="yes" xml:space="preserve">
          <source>FloatControl.getMinLabel()</source>
          <target state="translated">FloatControl.getMinLabel()</target>
        </trans-unit>
        <trans-unit id="b195afe07fd542779f317c908aa20edbbf9a9b55" translate="yes" xml:space="preserve">
          <source>FloatControl.getMinimum()</source>
          <target state="translated">FloatControl.getMinimum()</target>
        </trans-unit>
        <trans-unit id="11adf7d9747a6f021f96d453e1a764264d54266d" translate="yes" xml:space="preserve">
          <source>FloatControl.getPrecision()</source>
          <target state="translated">FloatControl.getPrecision()</target>
        </trans-unit>
        <trans-unit id="25c6e16344b81f3e918c181f49797b653dbd72bc" translate="yes" xml:space="preserve">
          <source>FloatControl.getUnits()</source>
          <target state="translated">FloatControl.getUnits()</target>
        </trans-unit>
        <trans-unit id="7ce8918f337e55babf56437630f4c87202d3c05d" translate="yes" xml:space="preserve">
          <source>FloatControl.getUpdatePeriod()</source>
          <target state="translated">FloatControl.getUpdatePeriod()</target>
        </trans-unit>
        <trans-unit id="ceb190f8b30bd5e90e3af329a4ac8d095ba92573" translate="yes" xml:space="preserve">
          <source>FloatControl.getValue()</source>
          <target state="translated">FloatControl.getValue()</target>
        </trans-unit>
        <trans-unit id="866c81043de2591d960891a0ba063b3d3224d3c4" translate="yes" xml:space="preserve">
          <source>FloatControl.setValue()</source>
          <target state="translated">FloatControl.setValue()</target>
        </trans-unit>
        <trans-unit id="44c641254be897c8d35dfa2ac9368d4249302fd5" translate="yes" xml:space="preserve">
          <source>FloatControl.shift()</source>
          <target state="translated">FloatControl.shift()</target>
        </trans-unit>
        <trans-unit id="e58b80cd394c1080c32f50afff5b493b00de7aaf" translate="yes" xml:space="preserve">
          <source>FloatControl.toString()</source>
          <target state="translated">FloatControl.toString()</target>
        </trans-unit>
        <trans-unit id="9b89761c1275fbd86f5d8bdac914c12c58e930fa" translate="yes" xml:space="preserve">
          <source>FloatTypeSuffix</source>
          <target state="translated">FloatTypeSuffix</target>
        </trans-unit>
        <trans-unit id="c519d710264ca57131c8c72af46f62f0392a4fb0" translate="yes" xml:space="preserve">
          <source>FloatValue</source>
          <target state="translated">FloatValue</target>
        </trans-unit>
        <trans-unit id="47bbc397e99f332b6e509e454f6ed930e81824fb" translate="yes" xml:space="preserve">
          <source>FloatValue:</source>
          <target state="translated">FloatValue:</target>
        </trans-unit>
        <trans-unit id="f980f6669a99ae97aa471b598c62ac0c3e1f823b" translate="yes" xml:space="preserve">
          <source>Floating Point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8800852afd836b0863fdad8639bae3a755b7144" translate="yes" xml:space="preserve">
          <source>Floating-point Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a212716cbe7ed0298003bab7a55d994d07404503" translate="yes" xml:space="preserve">
          <source>FloatingPointLiteral</source>
          <target state="translated">FloatingPointLiteral</target>
        </trans-unit>
        <trans-unit id="cf3ee4aa344fd9439d7a23eed724ed1c7b819697" translate="yes" xml:space="preserve">
          <source>Flush all of the Introspector's internal caches. This method is not normally required. It is normally only needed by advanced tools that update existing &quot;Class&quot; objects in-place and need to make the Introspector re-analyze existing Class objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ca7a5d25df440512599cf0142b9f49cb875f4c" translate="yes" xml:space="preserve">
          <source>Flush any buffered messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdbf4f52aca9b56567adba9fa2a32b0f8f121bf" translate="yes" xml:space="preserve">
          <source>Flush any buffered output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd43b9352fe5975b1d492527a9453c5ad462ec1d" translate="yes" xml:space="preserve">
          <source>Flush the Introspector's internal cached information for a given class. This method is not normally required. It is normally only needed by advanced tools that update existing &quot;Class&quot; objects in-place and need to make the Introspector re-analyze an existing Class object. Note that only the direct state associated with the target Class object is flushed. We do not flush state for other Class objects with the same name, nor do we flush state for any related Class objects (such as subclasses), even though their state may include information indirectly obtained from the target Class object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc3fd57810a894c7625b9a523573427c6dd958a" translate="yes" xml:space="preserve">
          <source>Flush the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9f36d8dcf7e660b911e13417de562962fae133" translate="yes" xml:space="preserve">
          <source>Flushable</source>
          <target state="translated">Flushable</target>
        </trans-unit>
        <trans-unit id="0d8e5de7e8be561cedb7fbaca801fd5980979d91" translate="yes" xml:space="preserve">
          <source>Flushable.flush()</source>
          <target state="translated">Flushable.flush()</target>
        </trans-unit>
        <trans-unit id="4e03356e53cd4b45d147e1714ac4698e16f5f4e5" translate="yes" xml:space="preserve">
          <source>Flushes all data prior to the given position to the underlying destination, such as an &lt;code&gt;OutputStream&lt;/code&gt; or &lt;code&gt;File&lt;/code&gt;. Attempting to seek to the flushed portion of the stream will result in an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c301973568b1010ffc4abeb3890c49223cf556b" translate="yes" xml:space="preserve">
          <source>Flushes any resources opened for output by this file manager directly or indirectly. Flushing a closed file manager has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b40fdd5484676ce39ad94b7bd8775a5ff1c7d2" translate="yes" xml:space="preserve">
          <source>Flushes queued data from the line. The flushed data is discarded. In some cases, not all queued data can be discarded. For example, a mixer can flush data from the buffer for a specific input line, but any unplayed data already in the output buffer (the result of the mix) will still be played. You can invoke this method after pausing a line (the normal case) if you want to skip the &quot;stale&quot; data when you restart playback or capture. (It is legal to flush a line that is not stopped, but doing so on an active line is likely to cause a discontinuity in the data, resulting in a perceptible click.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c98069e18f742f97177b77228dbcec905df571" translate="yes" xml:space="preserve">
          <source>Flushes the compressed output stream. If &lt;a href=&quot;deflateroutputstream#DeflaterOutputStream-java.io.OutputStream-java.util.zip.Deflater-int-boolean-&quot;&gt;&lt;code&gt;syncFlush&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; when this compressed output stream is constructed, this method first flushes the underlying &lt;code&gt;compressor&lt;/code&gt; with the flush mode &lt;a href=&quot;deflater#SYNC_FLUSH&quot;&gt;&lt;code&gt;Deflater.SYNC_FLUSH&lt;/code&gt;&lt;/a&gt; to force all pending data to be flushed out to the output stream and then flushes the output stream. Otherwise this method only flushes the output stream without flushing the &lt;code&gt;compressor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b15e249d4b5f7a1e25fae529068f2d7263b626f" translate="yes" xml:space="preserve">
          <source>Flushes the console and forces any buffered output to be written immediately .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917793f660fae575f902dcfdcd2ad4d72b9730c1" translate="yes" xml:space="preserve">
          <source>Flushes the stream and checks its error state. The internal error state is set to &lt;code&gt;true&lt;/code&gt; when the underlying output stream throws an &lt;code&gt;IOException&lt;/code&gt; other than &lt;code&gt;InterruptedIOException&lt;/code&gt;, and when the &lt;code&gt;setError&lt;/code&gt; method is invoked. If an operation on the underlying output stream throws an &lt;code&gt;InterruptedIOException&lt;/code&gt;, then the &lt;code&gt;PrintStream&lt;/code&gt; converts the exception back into an interrupt by doing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d1a01e00649a56e4be3c6877ec77afc38fdb1a" translate="yes" xml:space="preserve">
          <source>Flushes the stream if it's not closed and checks its error state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f18707bcfd581256c925c8ceb7a6b0e579c29e8" translate="yes" xml:space="preserve">
          <source>Flushes the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27549ded09a673f27fce36a1c79b36720812fffc" translate="yes" xml:space="preserve">
          <source>Flushes the stream. If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination. Then, if that destination is another character or byte stream, flush it. Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa04d112254e1b279bc1c47018931f7571ce551" translate="yes" xml:space="preserve">
          <source>Flushes the stream. This is done by writing any buffered output bytes to the underlying output stream and then flushing that stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9d6adb6b1406398b401ae6a4672f858e7a78df" translate="yes" xml:space="preserve">
          <source>Flushes the stream. This will write any buffered output bytes and flush through to the underlying stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0c9b5f55e5caf2896bd7d20cc4e2b514cdfdc9" translate="yes" xml:space="preserve">
          <source>Flushes the stream. This will write any buffered output bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85496fb5b4f23f6bd6da20fc6355dc0af0445c1a" translate="yes" xml:space="preserve">
          <source>Flushes this buffered output stream. This forces any buffered output bytes to be written out to the underlying output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099deb41fdb7d97c649c6bd0906433b9fd4384a4" translate="yes" xml:space="preserve">
          <source>Flushes this data output stream. This forces any buffered output bytes to be written out to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f55b8f266ef408ebda709c34943453f2920da5" translate="yes" xml:space="preserve">
          <source>Flushes this decoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58378208cf39afe752e3f5ea5a2b90a44d200fd" translate="yes" xml:space="preserve">
          <source>Flushes this encoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324812d4d8236eb7df771889d3aa4cca5bead978" translate="yes" xml:space="preserve">
          <source>Flushes this formatter. If the destination implements the &lt;a href=&quot;../io/flushable&quot;&gt;&lt;code&gt;Flushable&lt;/code&gt;&lt;/a&gt; interface, its &lt;code&gt;flush&lt;/code&gt; method will be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7b8695f698b7994fd7ead006b2734c41a847fd" translate="yes" xml:space="preserve">
          <source>Flushes this output stream and forces any buffered output bytes to be written out to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d347580d93037b72c655bbbd27b6c3c4b04c93" translate="yes" xml:space="preserve">
          <source>Flushes this output stream and forces any buffered output bytes to be written out. The general contract of &lt;code&gt;flush&lt;/code&gt; is that calling it is an indication that, if any bytes previously written have been buffered by the implementation of the output stream, such bytes should immediately be written to their intended destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a445d926ff76766416fa1d70ac5b897cd48596" translate="yes" xml:space="preserve">
          <source>Flushes this output stream and forces any buffered output bytes to be written out. This will notify any readers that bytes are waiting in the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d361ce221bdc3f10a930aee652587351f2bbe9" translate="yes" xml:space="preserve">
          <source>Flushes this output stream and forces any buffered output characters to be written out. This will notify any readers that characters are waiting in the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ef9dff7afa4e9ffbd2cd4be187394d0163b84" translate="yes" xml:space="preserve">
          <source>Flushes this output stream by forcing any buffered output bytes that have already been processed by the encapsulated cipher object to be written out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c102df522805bafa3e28cc92589ff2b9b16f37d" translate="yes" xml:space="preserve">
          <source>Flushes this output stream, forcing any pending buffered output bytes to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9c3c6d0ca6e8fa4dc383b3ed1e35dfc088a0ec" translate="yes" xml:space="preserve">
          <source>Flushes this stream by writing any buffered output to the underlying stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db13de4337e3f12fedae33632035682f751d41c8" translate="yes" xml:space="preserve">
          <source>Flushing a formatter writes any buffered output in the destination to the underlying stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e2f7fb41aa73be737248418ba5c0e5eb5fc6a8" translate="yes" xml:space="preserve">
          <source>Follow symbolic links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17dbd79a84a54f559996c59b0712e0b95f8dcb9" translate="yes" xml:space="preserve">
          <source>Following full type-safety to its ultimate conclusion might also argue for a separate class for each field in date-time, such as a class for HourOfDay and another for DayOfMonth. This approach was tried, but was excessively complicated in the Java language, lacking usability. A similar problem occurs with periods. There is a case for a separate class for each period unit, such as a type for Years and a type for Minutes. However, this yields a lot of classes and a problem of type conversion. Thus, the set of date-time types provided is a compromise between purity and practicality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b23f8f2777a10912c1c9e7876566aa3d45b9d0b" translate="yes" xml:space="preserve">
          <source>FomattableFlags are passed to the &lt;a href=&quot;formattable#formatTo-java.util.Formatter-int-int-int-&quot;&gt;&lt;code&gt;Formattable.formatTo()&lt;/code&gt;&lt;/a&gt; method and modify the output format for &lt;a href=&quot;formattable&quot;&gt;Formattables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca05bba3a397f29864c65816f78ff6246577d5ea" translate="yes" xml:space="preserve">
          <source>FomattableFlags are passed to the &lt;a href=&quot;formattable#formatTo-java.util.Formatter-int-int-int-&quot;&gt;&lt;code&gt;Formattable.formatTo()&lt;/code&gt;&lt;/a&gt; method and modify the output format for &lt;a href=&quot;formattable&quot;&gt;Formattables&lt;/a&gt;. Implementations of &lt;a href=&quot;formattable&quot;&gt;&lt;code&gt;Formattable&lt;/code&gt;&lt;/a&gt; are responsible for interpreting and validating any flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558e6cd283a156ce5070afa87f014ad813d33f9f" translate="yes" xml:space="preserve">
          <source>FooSocket. On return from implAccept the FooSocket will be connected to a client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330234038655b3b67f3184a6e42e55e51f6d8052" translate="yes" xml:space="preserve">
          <source>For &lt;b&gt;client formatted print data&lt;/b&gt;, the client determines or knows the print data format. For example the client may have a JPEG encoded image, a URL for HTML code, or a disk file containing plain text in some encoding, possibly obtained from an external source, and requires a way to describe the data format to the print service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d64bb664ba10590a2e753bd93d33d98f8da3b6" translate="yes" xml:space="preserve">
          <source>For &lt;b&gt;service formatted print data&lt;/b&gt;, the Java Print Service instance determines the print data format. The doc flavor's representation class denotes an interface whose methods the &lt;code&gt;DocPrintJob&lt;/code&gt; invokes to determine the content to be printed -- such as a renderable image interface or a Java printable interface. The doc flavor's MIME type is the special value &lt;code&gt;&quot;application/x-java-jvm-local-objectref&quot;&lt;/code&gt; indicating the client will supply a reference to a Java object that implements the interface named as the representation class. This MIME type is just a placeholder; what's important is the print data representation class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9a0189efceb380ef7c4d80d50d597dcc0c32e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;DataLine&lt;/code&gt;'s, if the &lt;code&gt;DataLine.Info&lt;/code&gt; object which was used to retrieve the line, specifies at least one fully qualified audio format, the last one will be used as the default format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3ecd3f62908302c23242217931dd52873e3efb" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Locale(&quot;zh&quot;, &quot;TW&quot;)&lt;/code&gt;, the candidate list will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4530bda67f131f5f34a16a617bdaea1d3f4f7461" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;defaultValue&lt;/code&gt;, &lt;code&gt;minValue&lt;/code&gt;, and &lt;code&gt;maxValue&lt;/code&gt;, the associated value must either be of the Java type corresponding to &lt;code&gt;openType&lt;/code&gt;, or be a string that can be converted into that type. The conversion uses the static method &lt;code&gt;valueOf(String)&lt;/code&gt; if it finds one; otherwise a constructor with a single &lt;code&gt;String&lt;/code&gt; parameter if it finds one; otherwise it fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7735067132e49435c502ac1c91d49e144e93e07f" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;host&lt;/code&gt; specified in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de1e4d9b868482565745441ba41e44b255f55af" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;host&lt;/code&gt; specified in literal IPv6 address, either the form defined in RFC 2732 or the literal IPv6 address format defined in RFC 2373 is accepted. IPv6 scoped addresses are also supported. See &lt;a href=&quot;inet6address#scoped&quot;&gt;here&lt;/a&gt; for a description of IPv6 scoped addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e38a1a19e5894ccb2cf644282825ddeb0200dfd" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;legalValues&lt;/code&gt;, the associated value must be either an array or a &lt;code&gt;Set&lt;/code&gt;, and the elements of the array or set must be convertible as described for &lt;code&gt;defaultValue&lt;/code&gt; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae39ae71503d6b0412eb10be75f99287813f3f4" translate="yes" xml:space="preserve">
          <source>For Gaps, the general strategy is that if the local date-time falls in the middle of a Gap, then the resulting zoned date-time will have a local date-time shifted forwards by the length of the Gap, resulting in a date-time in the later offset, typically &quot;summer&quot; time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47602a4734e43c194873be68402cb62c3ccb993d" translate="yes" xml:space="preserve">
          <source>For IPv4 address format, please refer to &lt;a href=&quot;inet4address#format&quot;&gt;Inet4Address#format&lt;/a&gt;; For IPv6 address format, please refer to &lt;a href=&quot;inet6address#format&quot;&gt;Inet6Address#format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d46c6ea44bdc9156a63d0abe51018483f88d1c" translate="yes" xml:space="preserve">
          <source>For Internet Protocol v4 the value consists of an &lt;code&gt;integer&lt;/code&gt;, the least significant 8 bits of which represent the value of the TOS octet in IP packets sent by the socket. RFC 1349 defines the TOS values as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2eae4e6dd20e42323be6ff8ab3ddd498ced00a" translate="yes" xml:space="preserve">
          <source>For Internet Protocol v6 &lt;code&gt;tc&lt;/code&gt; is the value that would be placed into the sin6_flowinfo field of the IP header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac8dbfb74c279aab3f0b040bbf12a4e3c5e15cd" translate="yes" xml:space="preserve">
          <source>For MBeans referenced in such relation, nothing will be done,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df500d83e75a486cc7488acc15cde4c6a58a19f" translate="yes" xml:space="preserve">
          <source>For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by &lt;code&gt;&quot;:&quot;&lt;/code&gt; and possibly followed by &lt;code&gt;&quot;\\&quot;&lt;/code&gt; if the pathname is absolute. The prefix of a UNC pathname is &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt;; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a727367a481c4d2b3f8a5feb6fd0dd5c0602e315" translate="yes" xml:space="preserve">
          <source>For Overlaps, the general strategy is that if the local date-time falls in the middle of an Overlap, then the previous offset will be retained. If there is no previous offset, or the previous offset is invalid, then the earlier offset is used, typically &quot;summer&quot; time.. Two additional methods, &lt;a href=&quot;zoneddatetime#withEarlierOffsetAtOverlap--&quot;&gt;&lt;code&gt;withEarlierOffsetAtOverlap()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;zoneddatetime#withLaterOffsetAtOverlap--&quot;&gt;&lt;code&gt;withLaterOffsetAtOverlap()&lt;/code&gt;&lt;/a&gt;, help manage the case of an overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9855cbf9d64cd6c04cc435b5d6fc1d9d25c6b203" translate="yes" xml:space="preserve">
          <source>For SSL/TLS connections, the underlying SSL/TLS provider may specify a default value for a certain server name type. In client mode, it is recommended that, by default, providers should include the server name indication whenever the server can be located by a supported server name type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc210dbbba2ad354a2722f241cf948fa56bd99c" translate="yes" xml:space="preserve">
          <source>For UDP sockets it may be necessary to bind more than one socket to the same socket address. This is typically for the purpose of receiving multicast packets (See &lt;a href=&quot;multicastsocket&quot;&gt;&lt;code&gt;MulticastSocket&lt;/code&gt;&lt;/a&gt;). The &lt;code&gt;SO_REUSEADDR&lt;/code&gt; socket option allows multiple sockets to be bound to the same socket address if the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; socket option is enabled prior to binding the socket using &lt;a href=&quot;datagramsocket#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;bind(SocketAddress)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8c93074e3853223ea38f1e9e8a1bad3535bc99" translate="yes" xml:space="preserve">
          <source>For UNIX platforms, the prefix of an absolute pathname is always &lt;code&gt;&quot;/&quot;&lt;/code&gt;. Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix &lt;code&gt;&quot;/&quot;&lt;/code&gt; and an empty name sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dad4526f56df9fff00c924610d84c66d81a2fd8" translate="yes" xml:space="preserve">
          <source>For a Kerberized server the action is &quot;accept&quot;. For example, the permission necessary to access and use the secret key of the Kerberized &quot;host&quot; service (telnet and the likes) would be constructed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11846a346d2ab60d036859287229666998ffb89d" translate="yes" xml:space="preserve">
          <source>For a class to be retransformed, &lt;a href=&quot;instrumentation#isRetransformClassesSupported--&quot;&gt;&lt;code&gt;isRetransformClassesSupported()&lt;/code&gt;&lt;/a&gt; must also be true. But the value of &lt;code&gt;isRetransformClassesSupported()&lt;/code&gt; does not influence the value returned by this function. For a class to be redefined, &lt;a href=&quot;instrumentation#isRedefineClassesSupported--&quot;&gt;&lt;code&gt;isRedefineClassesSupported()&lt;/code&gt;&lt;/a&gt; must also be true. But the value of &lt;code&gt;isRedefineClassesSupported()&lt;/code&gt; does not influence the value returned by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b39595c299e68d6c5a7b61856830d8b4761e7e" translate="yes" xml:space="preserve">
          <source>For a classic example, here is a task computing Fibonacci numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048a413e62191e1579b1312264cda5145063d780" translate="yes" xml:space="preserve">
          <source>For a connector client, the source is a reference to the connector client object, an instance of a class implementing &lt;a href=&quot;jmxconnector&quot;&gt;&lt;code&gt;JMXConnector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e954a136069f610e1d348ed2aae8a3833f52a5f6" translate="yes" xml:space="preserve">
          <source>For a connector server, if it is registered in an MBean server, the source is the &lt;a href=&quot;../objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; under which it is registered. Otherwise, it is a reference to the connector server object itself, an instance of a subclass of &lt;a href=&quot;jmxconnectorserver&quot;&gt;&lt;code&gt;JMXConnectorServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce500b7d65aa27215f98ffce87929769e912a5b" translate="yes" xml:space="preserve">
          <source>For a custom handler, e.g. com.foo.MyHandler, the properties would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb87cd9382f91a25882dc582ffbc03922acc6816" translate="yes" xml:space="preserve">
          <source>For a given abstract pathname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941ac0e517a49f3228852350502448606d2c37f8" translate="yes" xml:space="preserve">
          <source>For a list of all grandfathered tags, see the IANA Language Subtag Registry (search for &quot;Type: grandfathered&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985f6c1fef14acb945d8f93c159d909201239b40" translate="yes" xml:space="preserve">
          <source>For a matcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab762ed05291a6e794cbd5c274e121d082536fc" translate="yes" xml:space="preserve">
          <source>For a modifiable list the programmer should additionally implement the list iterator's &lt;code&gt;set&lt;/code&gt; method. For a variable-size list the programmer should additionally implement the list iterator's &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26155ef85ec3b61790a4ccaeb70b4f7e4e2faec4" translate="yes" xml:space="preserve">
          <source>For a more detailed description of URL parsing, refer to RFC2396.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34285ef3a4ebc953564eb44fa61313cabbb675e1" translate="yes" xml:space="preserve">
          <source>For a more precise description of the behavior of regular expression constructs, please see &lt;a href=&quot;http://www.oreilly.com/catalog/regex3/&quot;&gt; &lt;i&gt;Mastering Regular Expressions, 3nd Edition&lt;/i&gt;, Jeffrey E. F. Friedl, O'Reilly and Associates, 2006.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4b6b1cf0941b3a2e1e6929568f2554294cf98a" translate="yes" xml:space="preserve">
          <source>For a multi-valued RDN, the type/value pairs have no specific order defined on them. In that case, this method returns type of one of the type/value pairs. The &lt;a href=&quot;rdn#getValue--&quot;&gt;&lt;code&gt;getValue()&lt;/code&gt;&lt;/a&gt; method returns the value corresponding to the type returned by this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5a8e611f88fc4a57f454effdea1ddccd2bbcad" translate="yes" xml:space="preserve">
          <source>For a multi-valued RDN, this method returns value corresponding to the type returned by &lt;a href=&quot;rdn#getType--&quot;&gt;&lt;code&gt;getType()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebb0baaa40878766cd56c083732376ae8549e67" translate="yes" xml:space="preserve">
          <source>For a one time comparison, this method has the best performance. If a given String will be involved in multiple comparisons, CollationKey.compareTo has the best performance. See the Collator class description for an example using CollationKeys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba5eed5c622b60caf7ec484699093a1ab22d756" translate="yes" xml:space="preserve">
          <source>For a permission you have, this is either empty or a &lt;em&gt;class name pattern&lt;/em&gt;. A class name pattern is a string following the Java conventions for dot-separated class names. It may end with &quot;&lt;code&gt;.*&lt;/code&gt;&quot; meaning that the permission grants access to any class that begins with the string preceding &quot;&lt;code&gt;.*&lt;/code&gt;&quot;. For instance, &quot;&lt;code&gt;javax.management.*&lt;/code&gt;&quot; grants access to &lt;code&gt;javax.management.MBeanServerDelegate&lt;/code&gt; and &lt;code&gt;javax.management.timer.Timer&lt;/code&gt;, among other classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd8e055602b0b09f980c766e8d59803df5383ba" translate="yes" xml:space="preserve">
          <source>For a permission you have, this is either the name of an attribute or operation you can access, or it is empty or the single character &quot;&lt;code&gt;*&lt;/code&gt;&quot;, both of which grant access to any member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acfd8f7dcf69d39ed31ec974c16b00c8bb84748" translate="yes" xml:space="preserve">
          <source>For a permission you have, this is the &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; of the MBean or MBeans you can access. It may be an object name pattern to grant access to all MBeans whose names match the pattern. It may also be empty, which grants access to all MBeans whatever their name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879233e1d115311b9ab98b47332e72587d921ae" translate="yes" xml:space="preserve">
          <source>For a permission you need, this is the &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; of the MBean you are accessing. For operations that do not reference a single MBean, it is null. It is never an object name pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4392da557e3be8db027e85b72c0308a6ceff3ddf" translate="yes" xml:space="preserve">
          <source>For a permission you need, this is the class name of an MBean you are accessing, as returned by &lt;a href=&quot;mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;MBeanServer.getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.&lt;a href=&quot;mbeaninfo#getClassName--&quot;&gt;&lt;code&gt;getClassName()&lt;/code&gt;&lt;/a&gt;. Certain operations do not reference a class name, in which case the class name is null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7845a5b03ddc3c0be5ac844e352635076127bb" translate="yes" xml:space="preserve">
          <source>For a permission you need, this is the name of the attribute or operation you are accessing. For operations that do not reference an attribute or operation, the member is null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e6fbe126c9387e2231f2b0971f9007e98fd739" translate="yes" xml:space="preserve">
          <source>For a positive or zero ordinal, the algorithm is equivalent to finding the first day-of-week that matches within the month and then adding a number of weeks to it. For a negative ordinal, the algorithm is equivalent to finding the last day-of-week that matches within the month and then subtracting a number of weeks to it. The ordinal number of weeks is not validated and is interpreted leniently according to this algorithm. This definition means that an ordinal of zero finds the last matching day-of-week in the previous month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312f91b25e7e2207bee0c9dc9628a326d0088cae" translate="yes" xml:space="preserve">
          <source>For a read-only mapping, this channel must have been opened for reading; for a read/write or private mapping, this channel must have been opened for both reading and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580c9df1ffd5acf062f271b1401c3788f3ddee75" translate="yes" xml:space="preserve">
          <source>For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, etc. into the base filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46471aadd599914bd627b9907250a4504ff64e19" translate="yes" xml:space="preserve">
          <source>For access to heterogeneous binary data, that is, sequences of values of different types, this class defines a family of absolute and relative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7da068617acdf9b7c61fac878688b1af0c7245b" translate="yes" xml:space="preserve">
          <source>For access to homogeneous binary data, that is, sequences of values of the same type, this class defines methods that can create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e31f21b77cc61c27c5db3b1c62f525194382db" translate="yes" xml:space="preserve">
          <source>For all arithmetic operators , the operation is carried out as though an exact intermediate result were first calculated and then rounded to the number of digits specified by the precision setting (if necessary), using the selected rounding mode. If the exact result is not returned, some digit positions of the exact result are discarded. When rounding increases the magnitude of the returned result, it is possible for a new digit position to be created by a carry propagating to a leading &quot;9&quot; digit. For example, rounding the value 999.9 to three digits rounding up would be numerically equal to one thousand, represented as 100&amp;times;10&lt;sup&gt;1&lt;/sup&gt;. In such cases, the new &quot;1&quot; is the leading digit position of the returned result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e82599dd6fcb52a65725f8c6350a2730f871102" translate="yes" xml:space="preserve">
          <source>For all named loggers, the reset operation removes and closes all Handlers and (except for the root logger) sets the level to null. The root logger's level is set to Level.INFO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f49a747ab61666aaa19b73ef2d730ad3979e34" translate="yes" xml:space="preserve">
          <source>For all the methods in this interface that write bytes, it is generally true that if a byte cannot be written for any reason, an &lt;code&gt;IOException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06208486ae9eecd5757942a7e65903f3d3de5ea1" translate="yes" xml:space="preserve">
          <source>For an input &lt;code&gt;Locale&lt;/code&gt; with a non-empty script value, append candidate &lt;code&gt;Locale&lt;/code&gt;s by omitting the final component up to language, then append candidates generated from the &lt;code&gt;Locale&lt;/code&gt; with country and variant restored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24e11a909288b53c92f020d081b5941027a9a2b" translate="yes" xml:space="preserve">
          <source>For an input &lt;code&gt;Locale&lt;/code&gt; with a variant value consisting of multiple subtags separated by underscore, generate candidate &lt;code&gt;Locale&lt;/code&gt;s by omitting the variant subtags one by one, then insert them after every occurrence of &lt;code&gt; Locale&lt;/code&gt;s with the full variant value in the original list. For example, if the the variant consists of two subtags &lt;em&gt;V1&lt;/em&gt; and &lt;em&gt;V2&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5554f28ba351ad9f2739f3b06ab5e78a02202f66" translate="yes" xml:space="preserve">
          <source>For an input &lt;code&gt;Locale&lt;/code&gt; with an empty script value, append candidate &lt;code&gt;Locale&lt;/code&gt;s by omitting the final component one by one as below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31165b31091c89e2fd334bb1aeff719d666b51eb" translate="yes" xml:space="preserve">
          <source>For an invocation of &lt;code&gt;get[Declared]AnnotationsByType( Class &amp;lt;
 T &amp;gt;)&lt;/code&gt;, the order of annotations which are directly or indirectly present on an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e404249bab7df0d9f0bfdf9d7675a615c61bed52" translate="yes" xml:space="preserve">
          <source>For an object to be selected, each attribute in &lt;code&gt;matchingAttributes&lt;/code&gt; must match some attribute of the object. If &lt;code&gt;matchingAttributes&lt;/code&gt; is empty or null, all objects in the target context are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672bc788ec93ca82f67bd27cfd38341ecdffcf48" translate="yes" xml:space="preserve">
          <source>For an option that has a notion of on and off, and requires a non-boolean parameter, setting its value to anything other than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a2e8dcbeb920d5c4463c83794d2144225623e9" translate="yes" xml:space="preserve">
          <source>For an overview of control flow, please refer to the  Java Logging Overview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bb1854efb2037b61a2381563ca86cef944af4f" translate="yes" xml:space="preserve">
          <source>For any URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15869691dfda7153f19720f10e40b12cb9c1361f" translate="yes" xml:space="preserve">
          <source>For any given &lt;code&gt;ZoneRules&lt;/code&gt;, this list contains the transition rules for years beyond those years that have been fully defined. These rules typically refer to future daylight saving time rule changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5920c7d4c6dce56729e14f9ea7a334529f36c3e" translate="yes" xml:space="preserve">
          <source>For any given &lt;em&gt;J&lt;/em&gt;, the following rules are consulted to determine how to reconstruct instances of &lt;em&gt;J&lt;/em&gt; from &lt;code&gt;CompositeData&lt;/code&gt;. The first applicable rule in the list is the one that will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a3d499ad5719ec12b5122ad9ea8dea7bfd468b" translate="yes" xml:space="preserve">
          <source>For any given caller class &lt;code&gt;C&lt;/code&gt;, the lookup object returned by this call has equivalent capabilities to any lookup object supplied by the JVM to the bootstrap method of an &lt;a href=&quot;package-summary#indyinsn&quot;&gt;invokedynamic instruction&lt;/a&gt; executing in the same caller class &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1f31057dd8317785675f53700838ecaa796cec" translate="yes" xml:space="preserve">
          <source>For any non-null reference value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(null)&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a43fcb61e7d55a42e559584605cc4e5de48fb5" translate="yes" xml:space="preserve">
          <source>For any operation which may potentially block, the &lt;code&gt;SSLEngine&lt;/code&gt; will create a &lt;a href=&quot;../../../java/lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; delegated task. When &lt;code&gt;SSLEngineResult&lt;/code&gt; indicates that a delegated task result is needed, the application must call &lt;a href=&quot;sslengine#getDelegatedTask--&quot;&gt;&lt;code&gt;getDelegatedTask()&lt;/code&gt;&lt;/a&gt; to obtain an outstanding delegated task and call its &lt;a href=&quot;../../../java/lang/runnable#run--&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method (possibly using a different thread depending on the compute strategy). The application should continue obtaining delegated tasks until no more exist, and try the original operation again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303f6d979b65ea5b20387f8d0d52177ce7aece89" translate="yes" xml:space="preserve">
          <source>For any possible combination of properties, it must be the case that either (a) there are no applicable constructors, or (b) there is exactly one applicable constructor, or (c) one of the applicable constructors names a proper superset of the properties named by each other applicable constructor. (In other words, there should never be ambiguity over which constructor to choose.) If this condition is not true, then &lt;em&gt;J&lt;/em&gt; is not reconstructible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddc8af9dd10e096d924d66436e9ef54cc935cc8" translate="yes" xml:space="preserve">
          <source>For any set of member methods of the specified interfaces that have the same signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e41f32017f7ee715d47faca8dd77871008af685" translate="yes" xml:space="preserve">
          <source>For any two &lt;a href=&quot;path#normalize--&quot;&gt;&lt;code&gt;normalized&lt;/code&gt;&lt;/a&gt; paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517a45648675ff4a8ec5f16ff462f43183929a6b" translate="yes" xml:space="preserve">
          <source>For any two arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; such that &lt;code&gt;Arrays.deepEquals(a, b)&lt;/code&gt;, it is also the case that &lt;code&gt;Arrays.deepHashCode(a) == Arrays.deepHashCode(b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f039f4ee8f8c7899d92fe740d72a7ceecc652f" translate="yes" xml:space="preserve">
          <source>For any two arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; such that &lt;code&gt;Arrays.equals(a, b)&lt;/code&gt;, it is also the case that &lt;code&gt;Arrays.hashCode(a) == Arrays.hashCode(b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c95ac0e5ee06e24fd22793e2ce4273207b6f1b" translate="yes" xml:space="preserve">
          <source>For applications that require separate or custom pools, a &lt;code&gt;ForkJoinPool&lt;/code&gt; may be constructed with a given target parallelism level; by default, equal to the number of available processors. The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others. However, no such adjustments are guaranteed in the face of blocked I/O or other unmanaged synchronization. The nested &lt;a href=&quot;forkjoinpool.managedblocker&quot;&gt;&lt;code&gt;ForkJoinPool.ManagedBlocker&lt;/code&gt;&lt;/a&gt; interface enables extension of the kinds of synchronization accommodated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ed3f80aff525e72ff7e832911773bbc97584d8" translate="yes" xml:space="preserve">
          <source>For attributes with simple types like &lt;code&gt;String&lt;/code&gt;, the code is the same. But for attributes with complex types, the Standard MBean code requires the client to know the model-specific class &lt;code&gt;MemoryUsage&lt;/code&gt;, while the MXBean code requires no non-standard classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fab09feb3e54113c9216a1e3ca7fa7048e7079" translate="yes" xml:space="preserve">
          <source>For automatic resolution, the JVM will attempt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbf16ba6cc26b54f2c6512e1d8ce287b0e62968" translate="yes" xml:space="preserve">
          <source>For backward compatibility reasons, this constructor does not make any syntactic checks on the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073bbe5e1b66df166e9794a39c7b6f884c662cc0" translate="yes" xml:space="preserve">
          <source>For better interoperability, providers generally will not define default matchers so that by default servers will ignore the SNI extension and continue the handshake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca08cc09febef93d032435d9c4255a6e6e18ba0" translate="yes" xml:space="preserve">
          <source>For both cases, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d463bbf2fe5789f5217439ba539c52ab170002" translate="yes" xml:space="preserve">
          <source>For both the glob and regex syntaxes, the matching details, such as whether the matching is case sensitive, are implementation-dependent and therefore not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f7996d01312f8239e8f1c9e505592ed105c276" translate="yes" xml:space="preserve">
          <source>For byte print data where the doc flavor's MIME type does not include a &lt;code&gt;charset&lt;/code&gt; parameter, the Java Print Service instance assumes the US-ASCII character set by default. This is in accordance with &lt;a href=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/a&gt;, which says the default character set is US-ASCII. Note that US-ASCII is a subset of UTF-8, so in the future this may be widened if a future RFC endorses UTF-8 as the default in a compatible manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef748ac030e30703db542a8e771c10aa0800fe8" translate="yes" xml:space="preserve">
          <source>For character, integral, and date/time argument types and the percent and line separator conversions, the precision is not applicable; if a precision is provided, an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5648c3e8105f10d35eb80098924d18a37f7091d" translate="yes" xml:space="preserve">
          <source>For class Chromaticity, the category is the class Chromaticity itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108c1dc27fdbdded9fcdf4a1834817f795fb00cd" translate="yes" xml:space="preserve">
          <source>For class Chromaticity, the category name is &lt;code&gt;&quot;chromaticity&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a39f1eef25f18ccbc61b64eb319f52340e01059" translate="yes" xml:space="preserve">
          <source>For class ColorSupported, the category is class ColorSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff00115704149d68dd8049554c74a33a4809381f" translate="yes" xml:space="preserve">
          <source>For class ColorSupported, the category name is &lt;code&gt;&quot;color-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6841c351659dffecdee476f9d976c7bad52f4cfb" translate="yes" xml:space="preserve">
          <source>For class Compression and any vendor-defined subclasses, the category is class Compression itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d729d0565837f2cbe34af3ab43c8185785856634" translate="yes" xml:space="preserve">
          <source>For class Compression and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;compression&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa23b4a89f45a7c95055fc175887b5e4546faa1f" translate="yes" xml:space="preserve">
          <source>For class Copies, the category is class Copies itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3b5a32d1d86538da8be3869f27f2f3fae01303" translate="yes" xml:space="preserve">
          <source>For class Copies, the category name is &lt;code&gt;&quot;copies&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ad24ebaa9d2bbd6c6810c848b3f07c9d64ad75" translate="yes" xml:space="preserve">
          <source>For class CopiesSupported, the category is class CopiesSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90e4814b2b84639ae07fb1fa1c5de162ce2633e" translate="yes" xml:space="preserve">
          <source>For class CopiesSupported, the category name is &lt;code&gt;&quot;copies-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fb488767eb1e03e046cc6b9129359083fd7e81" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtCompleted, the category is class DateTimeAtCompleted itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa0c50cf51c142b1338e3884c76c0f4308158cf" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtCompleted, the category name is &lt;code&gt;&quot;date-time-at-completed&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72e63612ff9b0b9e0c5df81b2fbfa5244b420a8" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtCreation, the category is class DateTimeAtCreation itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffdc086db7b7f83c7202ddde482fa984134a1bf" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtCreation, the category name is &lt;code&gt;&quot;date-time-at-creation&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb8163507239d55563a9971e7bef6dcbdf2740d" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtProcessing, the category is class DateTimeAtProcessing itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df77ccb07ad51751cd6f1ef440abc4db57d994c" translate="yes" xml:space="preserve">
          <source>For class DateTimeAtProcessing, the category name is &lt;code&gt;&quot;date-time-at-processing&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6e42ec6c63048fdce164f7d6643bdc40fe87bb" translate="yes" xml:space="preserve">
          <source>For class Destination, the category is class Destination itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d9faf2ddfcd290fafc07e72901de35be14f36d" translate="yes" xml:space="preserve">
          <source>For class Destination, the category name is &lt;code&gt;&quot;spool-data-destination&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ee9f15d74d9403c6f26efa52fcb02871b59554" translate="yes" xml:space="preserve">
          <source>For class DialogTypeSelection the category is class DialogTypeSelection itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642fa2af2eb683de8bcd81a8b9b443fedab0ba84" translate="yes" xml:space="preserve">
          <source>For class DialogTypeSelection the category name is &lt;code&gt;&quot;dialog-type-selection&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f14abbf1de6231274552162be52f779347f3ce" translate="yes" xml:space="preserve">
          <source>For class DocumentName, the category is class DocumentName itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830ced725afc984767a2835c456e086919af3378" translate="yes" xml:space="preserve">
          <source>For class DocumentName, the category name is &lt;code&gt;&quot;document-name&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caed1e6577cea6150d76ee55b8099ae194884ffd" translate="yes" xml:space="preserve">
          <source>For class Fidelity the category is class Fidelity itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b5ca593603250a92503220ff5235518e303788" translate="yes" xml:space="preserve">
          <source>For class Fidelity the category name is &lt;code&gt;&quot;ipp-attribute-fidelity&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68a4f3ea42523f4fb43117aeb9975dc9a43c21c" translate="yes" xml:space="preserve">
          <source>For class Finishings and any vendor-defined subclasses, the category is class Finishings itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072c553018aa7a054a2c949c1715c7c4ebc299a5" translate="yes" xml:space="preserve">
          <source>For class Finishings and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;finishings&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f72f98ea9f48ec133fcad772e4204ccb5d8347" translate="yes" xml:space="preserve">
          <source>For class JobHoldUntil, the category is class JobHoldUntil itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fc18fed0e561d81a33486ad4422d45550bdad9" translate="yes" xml:space="preserve">
          <source>For class JobHoldUntil, the category name is &lt;code&gt;&quot;job-hold-until&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87388d84c0cd1cd502b8c68cb111b2c9b91ed2a" translate="yes" xml:space="preserve">
          <source>For class JobImpressions, the category is class JobImpressions itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96a56d6666c4e5440f41152ab488f26f2b42211" translate="yes" xml:space="preserve">
          <source>For class JobImpressions, the category name is &lt;code&gt;&quot;job-impressions&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dab7fc1f5a61485f3d310a640183120e2ad5dce" translate="yes" xml:space="preserve">
          <source>For class JobImpressionsCompleted, the category is class JobImpressionsCompleted itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb94f9b9e7eb12e2fbdb0554263847e34fd6c7b" translate="yes" xml:space="preserve">
          <source>For class JobImpressionsCompleted, the category name is &lt;code&gt;&quot;job-impressions-completed&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2029d43e377c9cd467e1c54f3a31db20467c2f54" translate="yes" xml:space="preserve">
          <source>For class JobImpressionsSupported, the category is class JobImpressionsSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdb26f5642486fcdce0f7b936a35850818cc5cf" translate="yes" xml:space="preserve">
          <source>For class JobImpressionsSupported, the category name is &lt;code&gt;&quot;job-impressions-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d250895f59ad6e992d0e5d73e1347e9543dea90" translate="yes" xml:space="preserve">
          <source>For class JobKOctets, the category is class JobKOctets itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeccbba1a19328125b0a65d5e7ac7661f4a7691d" translate="yes" xml:space="preserve">
          <source>For class JobKOctets, the category name is &lt;code&gt;&quot;job-k-octets&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e36add3298154dae97ea9d7edb3d8f9ed151824" translate="yes" xml:space="preserve">
          <source>For class JobKOctetsProcessed, the category is class JobKOctetsProcessed itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7217f2aeb7187b638c8fe9275ce38671a0c54d4" translate="yes" xml:space="preserve">
          <source>For class JobKOctetsProcessed, the category name is &lt;code&gt;&quot;job-k-octets-processed&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277761b4bb7736fe7d84fc442aa2477e16cadd2e" translate="yes" xml:space="preserve">
          <source>For class JobKOctetsSupported, the category is class JobKOctetsSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f1df5ec312d750080964f5858176ea6699e751" translate="yes" xml:space="preserve">
          <source>For class JobKOctetsSupported, the category name is &lt;code&gt;&quot;job-k-octets-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83879756c441ec6aa9ec68c5376e07ab19d87175" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheets and any vendor-defined subclasses, the category is class JobMediaSheets itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839ddc60e912395e6ec39e66f1d9e8be69ebe9b3" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheets and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;job-media-sheets&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72031f84675b63fbd5c5611982a0745c20e13834" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheetsCompleted, the category is class JobMediaSheetsCompleted itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31e00461dae435c9e5673020b363aada5bdb12f" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheetsCompleted, the category name is &lt;code&gt;&quot;job-media-sheets-completed&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dda8ee7e3c54ebc779b8ce4b0974e5dcf20c93f" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheetsSupported, the category is class JobMediaSheetsSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7de85d18c607ebfca61b06434fe4ca9f17d56a" translate="yes" xml:space="preserve">
          <source>For class JobMediaSheetsSupported, the category name is &lt;code&gt;&quot;job-media-sheets-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b136e5a2b0e75b390435d00967defe1aadb4fcce" translate="yes" xml:space="preserve">
          <source>For class JobMessageFromOperator, the category is class JobMessageFromOperator itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd0912c1635fd736d9bd773edea20b754970dab" translate="yes" xml:space="preserve">
          <source>For class JobMessageFromOperator, the category name is &lt;code&gt;&quot;job-message-from-operator&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b26e19c92d09f2a21f892100a4ce3ba1afe7195" translate="yes" xml:space="preserve">
          <source>For class JobName, the category is class JobName itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff6b5618e3eea85578b89c260a2d70593970b46" translate="yes" xml:space="preserve">
          <source>For class JobName, the category name is &lt;code&gt;&quot;job-name&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d136061f06a6eb64e17fd79f01a59636540321e" translate="yes" xml:space="preserve">
          <source>For class JobOriginatingUserName, the category is class JobOriginatingUserName itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8079d08471672e9fcf735403adad4f4f24c6c7" translate="yes" xml:space="preserve">
          <source>For class JobOriginatingUserName, the category name is &lt;code&gt;&quot;job-originating-user-name&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05f171ac5f709f2cd7d09a32b6a05afc1f6907c" translate="yes" xml:space="preserve">
          <source>For class JobPriority, the category is class JobPriority itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8777ec4ed750ff80f83b39defbe79e536f44eb5f" translate="yes" xml:space="preserve">
          <source>For class JobPriority, the category name is &lt;code&gt;&quot;job-priority&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce89f591c0067b7a68b741b72cc42339698a78d7" translate="yes" xml:space="preserve">
          <source>For class JobPrioritySupported, the category is class JobPrioritySupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654e506ea040f608f4dc353c2d822c054cc8dceb" translate="yes" xml:space="preserve">
          <source>For class JobPrioritySupported, the category name is &lt;code&gt;&quot;job-priority-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08635b4d2c31b178cab0dff6331454a2ce0e3829" translate="yes" xml:space="preserve">
          <source>For class JobSheets and any vendor-defined subclasses, the category is class JobSheets itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71446d47b48784e7ff553bd8da1658389b5d2f23" translate="yes" xml:space="preserve">
          <source>For class JobSheets and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;job-sheets&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8170f7f0ffca7b963fce46f1c79886b100ded91" translate="yes" xml:space="preserve">
          <source>For class JobState and any vendor-defined subclasses, the category is class JobState itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1cfc9b5e2eca0387a6cbf6b9671b5e0909f312" translate="yes" xml:space="preserve">
          <source>For class JobState and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;job-state&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653376caf1a3418e9063f33ff2fe20a57da04c8f" translate="yes" xml:space="preserve">
          <source>For class JobStateReason and any vendor-defined subclasses, the category is class JobStateReason itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ddae2ef6f7432cf73b5be9105ad4ecf53afcd2" translate="yes" xml:space="preserve">
          <source>For class JobStateReason and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;job-state-reason&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbdbe2790acae32d23312b21eddd8d7e025518d" translate="yes" xml:space="preserve">
          <source>For class JobStateReasons, the category is class JobStateReasons itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23baf7c64ea9b95a67a83036824005151d4ee4ad" translate="yes" xml:space="preserve">
          <source>For class JobStateReasons, the category name is &lt;code&gt;&quot;job-state-reasons&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e305ec9df07083f4a03bce58c310f04a069567" translate="yes" xml:space="preserve">
          <source>For class Media and any vendor-defined subclasses, the category is class Media itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63aac2809d48a40719da92a486aca03ea048211a" translate="yes" xml:space="preserve">
          <source>For class Media and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;media&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eebe8d13bec04bb83fd3cdedb183d88549f7716" translate="yes" xml:space="preserve">
          <source>For class MediaPrintableArea, the category is class MediaPrintableArea itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3383a496f3ced46a73b82b0d97aa06701b296e" translate="yes" xml:space="preserve">
          <source>For class MediaPrintableArea, the category name is &lt;code&gt;&quot;media-printable-area&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16bb9bb31c348614af9361198929e0e4c9e3d75" translate="yes" xml:space="preserve">
          <source>For class MediaSize and any vendor-defined subclasses, the category is class MediaSize itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaa0b98dfb736343dba9f90ceee28a35402fb0b" translate="yes" xml:space="preserve">
          <source>For class MediaSize and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;media-size&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94b84051032fff8f407be040afd8b908718b0e5" translate="yes" xml:space="preserve">
          <source>For class MultipleDocumentHandling and any vendor-defined subclasses, the category is class MultipleDocumentHandling itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a15c896684c3bdae21a952fc314bc83e432b65a" translate="yes" xml:space="preserve">
          <source>For class MultipleDocumentHandling and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;multiple-document-handling&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d80aca402535b79315974f7262cb5caf36ece03" translate="yes" xml:space="preserve">
          <source>For class NumberOfDocuments, the category is class NumberOfDocuments itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4f4357a00f01b7773082cf51d10e445b0c684e" translate="yes" xml:space="preserve">
          <source>For class NumberOfDocuments, the category name is &lt;code&gt;&quot;number-of-documents&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15143dc5c9eaa5cfb57170f82d6c2c78842dc82" translate="yes" xml:space="preserve">
          <source>For class NumberOfInterveningJobs, the category is class NumberOfInterveningJobs itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f64d68c238a1069789d44fdc2461b1b3abfd3f3" translate="yes" xml:space="preserve">
          <source>For class NumberOfInterveningJobs, the category name is &lt;code&gt;&quot;number-of-intervening-jobs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbebe8d07517db48f6ceb60ef3eda69a123a4ca6" translate="yes" xml:space="preserve">
          <source>For class NumberUp, the category is class NumberUp itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679d46d1327714f3b8a4ffe2ac56338f3140bd2d" translate="yes" xml:space="preserve">
          <source>For class NumberUp, the category name is &lt;code&gt;&quot;number-up&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43898aa6f875f8e6510fb0adc64cbe5396f5d910" translate="yes" xml:space="preserve">
          <source>For class NumberUpSupported, the category is class NumberUpSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84efd2894a327c192bb5f0bdcaa0b6f9b76bb8f9" translate="yes" xml:space="preserve">
          <source>For class NumberUpSupported, the category name is &lt;code&gt;&quot;number-up-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565e4c6e7614396692edb4af2f709c35214286d4" translate="yes" xml:space="preserve">
          <source>For class OrientationRequested, the category is class OrientationRequested itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fcaeb0ba5aa93429c5861479086b2d3a01eafd" translate="yes" xml:space="preserve">
          <source>For class OrientationRequested, the category name is &lt;code&gt;&quot;orientation-requested&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abde76b383658ea382bc59eff2fb0367dfc991de" translate="yes" xml:space="preserve">
          <source>For class OutputDeviceAssigned, the category is class OutputDeviceAssigned itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c848d24bcfaa87be7b3eaaafab61333297d4de5" translate="yes" xml:space="preserve">
          <source>For class OutputDeviceAssigned, the category name is &lt;code&gt;&quot;output-device-assigned&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50e8daad8ee24c6bb2f8f8f02fb8d2ae166cd84" translate="yes" xml:space="preserve">
          <source>For class PDLOverrideSupported and any vendor-defined subclasses, the category is class PDLOverrideSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1862855f9347a76978b17a738e7c5bbb33f59cc0" translate="yes" xml:space="preserve">
          <source>For class PDLOverrideSupported and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;pdl-override-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce220ceb7741aa95d88a2fe3bc6c7db7d98e7d95" translate="yes" xml:space="preserve">
          <source>For class PageRanges, the category is class PageRanges itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e6d05319c67769fc3db5bb0ecdbb4b60392f46" translate="yes" xml:space="preserve">
          <source>For class PageRanges, the category name is &lt;code&gt;&quot;page-ranges&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f01eada40934f6714620dd2a2b554f377c9308" translate="yes" xml:space="preserve">
          <source>For class PagesPerMinute, the category is class PagesPerMinute itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14ff0028ffef5fede72d51eb82a6235e41c4323" translate="yes" xml:space="preserve">
          <source>For class PagesPerMinute, the category name is &lt;code&gt;&quot;pages-per-minute&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d522346d833c539376b5f07c17f5f72b79dd7f0f" translate="yes" xml:space="preserve">
          <source>For class PagesPerMinuteColor, the category is class PagesPerMinuteColor itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c660c99e02d7c212af35cc7873730d7af2cf120" translate="yes" xml:space="preserve">
          <source>For class PagesPerMinuteColor, the category name is &lt;code&gt;&quot;pages-per-minute-color&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aaee8c396105cb02829f6cbc1aea2b4ca171041" translate="yes" xml:space="preserve">
          <source>For class PresentationDirection the category is class PresentationDirection itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e0c06b664549dedff4cfd3e2b0109f7061132a" translate="yes" xml:space="preserve">
          <source>For class PresentationDirection the category name is &lt;code&gt;&quot;presentation-direction&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ab431070b7902f07a4e2eb111942a3d3c89260" translate="yes" xml:space="preserve">
          <source>For class PrintQuality and any vendor-defined subclasses, the category is class PrintQuality itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6627e73fffda4d8a63d01e1314eb76d67d38ee" translate="yes" xml:space="preserve">
          <source>For class PrintQuality and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;print-quality&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6f0cc027e88992fdedf39e07582b1430266e3c" translate="yes" xml:space="preserve">
          <source>For class PrinterInfo, the category is class PrinterInfo itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b6527a1b2b670e8d591c05cce9bc5e9d9447a2" translate="yes" xml:space="preserve">
          <source>For class PrinterInfo, the category name is &lt;code&gt;&quot;printer-info&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c9256086f531efae796e8d8690666052354d1b" translate="yes" xml:space="preserve">
          <source>For class PrinterIsAcceptingJobs, the category is class PrinterIsAcceptingJobs itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b444196d4a92442d1815635095756fb443b3c8b" translate="yes" xml:space="preserve">
          <source>For class PrinterIsAcceptingJobs, the category name is &lt;code&gt;&quot;printer-is-accepting-jobs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f689abe18da853c0516008897c2e59452d205a11" translate="yes" xml:space="preserve">
          <source>For class PrinterLocation, the category is class PrinterLocation itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2fea8becd5eb8189e9b5472dff8986755fda80" translate="yes" xml:space="preserve">
          <source>For class PrinterLocation, the category name is &lt;code&gt;&quot;printer-location&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1dd9a747520f8dbedcf4f13a83a0e4af94e2ba" translate="yes" xml:space="preserve">
          <source>For class PrinterMakeAndModel, the category is class PrinterMakeAndModel itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4fae7b3cb6c2828fcdbaf1716fd8c108dc1d52" translate="yes" xml:space="preserve">
          <source>For class PrinterMakeAndModel, the category name is &lt;code&gt;&quot;printer-make-and-model&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e865fa5a526858929f1ec74db4ddabb2559cfd" translate="yes" xml:space="preserve">
          <source>For class PrinterMessageFromOperator, the category is class PrinterMessageFromOperator itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bdaad11dc64623e0b9ad73640ced1a04cd8190" translate="yes" xml:space="preserve">
          <source>For class PrinterMessageFromOperator, the category name is &lt;code&gt;&quot;printer-message-from-operator&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc38988d14d54c070df510381432956fb04be2b5" translate="yes" xml:space="preserve">
          <source>For class PrinterMoreInfo, the category is class PrinterMoreInfo itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07993e08f2f2ff8aca46598c2c607bf8b4f7551b" translate="yes" xml:space="preserve">
          <source>For class PrinterMoreInfo, the category name is &lt;code&gt;&quot;printer-more-info&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241cfde9db629abbf16d37ecf1ba0b5701fa39bb" translate="yes" xml:space="preserve">
          <source>For class PrinterMoreInfoManufacturer, the category is class PrinterMoreInfoManufacturer itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48561e0264312aaad1e530ded45d0c142643d71d" translate="yes" xml:space="preserve">
          <source>For class PrinterMoreInfoManufacturer, the category name is &lt;code&gt;&quot;printer-more-info-manufacturer&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d09189884a718425f1dd44675f4544e703b2dc4" translate="yes" xml:space="preserve">
          <source>For class PrinterName, the category is class PrinterName itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f981b8db2489e51ff8a0c52f0213cad136f70214" translate="yes" xml:space="preserve">
          <source>For class PrinterName, the category name is &lt;code&gt;&quot;printer-name&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b653a81213f2676d2a468fbe40f45aeb6bb23eb0" translate="yes" xml:space="preserve">
          <source>For class PrinterResolution, the category is class PrinterResolution itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089c03e6282acc3da250b5bbf8c9b3c0723bc5de" translate="yes" xml:space="preserve">
          <source>For class PrinterResolution, the category name is &lt;code&gt;&quot;printer-resolution&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddf3275c606f2df378612cccd2405b28e94d547" translate="yes" xml:space="preserve">
          <source>For class PrinterState, the category is class PrinterState itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc846db841ae5c9762311f9887a7ed626d21ac2" translate="yes" xml:space="preserve">
          <source>For class PrinterState, the category name is &lt;code&gt;&quot;printer-state&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e4577f59fa87e6b5beb516c568387c170e4b8c" translate="yes" xml:space="preserve">
          <source>For class PrinterStateReason and any vendor-defined subclasses, the category is class PrinterStateReason itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faeb3e536e0a737a954b661a24e00e48ef3bcef4" translate="yes" xml:space="preserve">
          <source>For class PrinterStateReason and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;printer-state-reason&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e808c039b758b2f59db1f7d952b1bf58c1aa4a7" translate="yes" xml:space="preserve">
          <source>For class PrinterStateReasons, the category is class PrinterStateReasons itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14e080c82b2595f0ad5da46fffd3e824d0f9490" translate="yes" xml:space="preserve">
          <source>For class PrinterStateReasons, the category name is &lt;code&gt;&quot;printer-state-reasons&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a33b14dd071582edba93515dae6937007a50673" translate="yes" xml:space="preserve">
          <source>For class PrinterURI and any vendor-defined subclasses, the category is class PrinterURI itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c54c79aa3a2ed3bc26221d866d3bf0414ab4d0" translate="yes" xml:space="preserve">
          <source>For class PrinterURI and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;printer-uri&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427bb8ae79ce5ce6305815064eb955898deba35e" translate="yes" xml:space="preserve">
          <source>For class QueuedJobCount, the category is class QueuedJobCount itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2032679b33ee7eeab7ea70028fe4a54b11a34b" translate="yes" xml:space="preserve">
          <source>For class QueuedJobCount, the category name is &lt;code&gt;&quot;queued-job-count&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9b64b1898dc19b34e09680ab59f290a11180b1" translate="yes" xml:space="preserve">
          <source>For class ReferenceUriSchemesSupported and any vendor-defined subclasses, the category is class ReferenceUriSchemesSupported itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936b31b70be0215f64773fb73ec5e86c0ca36d06" translate="yes" xml:space="preserve">
          <source>For class ReferenceUriSchemesSupported and any vendor-defined subclasses, the category name is &lt;code&gt;&quot;reference-uri-schemes-supported&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5468094b261f63f7a851ffdea2ab7b4ba7224051" translate="yes" xml:space="preserve">
          <source>For class RequestingUserName, the category is class RequestingUserName itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794b8d2f9a18f1de951bd2a77cf8d9823f430c19" translate="yes" xml:space="preserve">
          <source>For class RequestingUserName, the category name is &lt;code&gt;&quot;requesting-user-name&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b817b624e8fc642c4c82793be6aece9829795dc5" translate="yes" xml:space="preserve">
          <source>For class Severit, the category name is &lt;code&gt;&quot;severity&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cf92446e07a3726f7d683aed39c191dd9dd0f7" translate="yes" xml:space="preserve">
          <source>For class Severity, the category is class Severity itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df6ec0b95bed137549c213c42c887235000d710" translate="yes" xml:space="preserve">
          <source>For class SheetCollate, the category is class SheetCollate itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec42e414ddbb008a0160e654bcfebb31c674017" translate="yes" xml:space="preserve">
          <source>For class SheetCollate, the category name is &lt;code&gt;&quot;sheet-collate&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54a6c66b3185766ef8980b2b771f7a5145737b9" translate="yes" xml:space="preserve">
          <source>For class Sides, the category is class Sides itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e176bee23fa052a123452f97bdfd610c3f76aa" translate="yes" xml:space="preserve">
          <source>For class Sides, the category name is &lt;code&gt;&quot;sides&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e291d7686d6bf5a610fa7b42648acca9aac4fbe1" translate="yes" xml:space="preserve">
          <source>For client formatted print data, the print data representation class is typically one of the following (although other representation classes are permitted):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d74a7546298ead87242134049dd273d250b2d3" translate="yes" xml:space="preserve">
          <source>For client sockets, setReceiveBufferSize() must be called before connecting the socket to its remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d07d8b04ebb5bf8cd0d980eb8abf2e92d0b689" translate="yes" xml:space="preserve">
          <source>For collectors that do not have the &lt;code&gt;UNORDERED&lt;/code&gt; characteristic, two accumulated results &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; are equivalent if &lt;code&gt;finisher.apply(a1).equals(finisher.apply(a2))&lt;/code&gt;. For unordered collectors, equivalence is relaxed to allow for non-equality related to differences in order. (For example, an unordered collector that accumulated elements to a &lt;code&gt;List&lt;/code&gt; would consider two lists equivalent if they contained the same elements, ignoring order.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2967995857133da00d1565c63fb3be5ba528a4" translate="yes" xml:space="preserve">
          <source>For comparing &lt;code&gt;String&lt;/code&gt;s exactly once, the &lt;code&gt;compare&lt;/code&gt; method provides the best performance. When sorting a list of &lt;code&gt;String&lt;/code&gt;s however, it is generally necessary to compare each &lt;code&gt;String&lt;/code&gt; multiple times. In this case, &lt;code&gt;CollationKey&lt;/code&gt;s provide better performance. The &lt;code&gt;CollationKey&lt;/code&gt; class converts a &lt;code&gt;String&lt;/code&gt; to a series of bits that can be compared bitwise against other &lt;code&gt;CollationKey&lt;/code&gt;s. A &lt;code&gt;CollationKey&lt;/code&gt; is created by a &lt;code&gt;Collator&lt;/code&gt; object for a given &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bda8af9f3ea2c182bc4edb9c9e7d569970e2c7c" translate="yes" xml:space="preserve">
          <source>For compatibility reasons, it is possible, though highly discouraged, to add objects to an &lt;code&gt;AttributeList&lt;/code&gt; that are not instances of &lt;code&gt;Attribute&lt;/code&gt;. However, an &lt;code&gt;AttributeList&lt;/code&gt; can be made &lt;em&gt;type-safe&lt;/em&gt;, which means that an attempt to add an object that is not an &lt;code&gt;Attribute&lt;/code&gt; will produce an &lt;code&gt;IllegalArgumentException&lt;/code&gt;. An &lt;code&gt;AttributeList&lt;/code&gt; becomes type-safe when the method &lt;a href=&quot;attributelist#asList--&quot;&gt;&lt;code&gt;asList()&lt;/code&gt;&lt;/a&gt; is called on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3fadeadc9c59b0bb290751e24959992cae4d8a" translate="yes" xml:space="preserve">
          <source>For compatibility reasons, two non-conforming locales are treated as special cases. These are &lt;b&gt;&lt;code&gt;ja_JP_JP&lt;/code&gt;&lt;/b&gt; and &lt;b&gt;&lt;code&gt;th_TH_TH&lt;/code&gt;&lt;/b&gt;. These are ill-formed in BCP 47 since the variants are too short. To ease migration to BCP 47, these are treated specially during construction. These two cases (and only these) cause a constructor to generate an extension, all other values behave exactly as they did prior to Java 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ffec9f8f3ececb82205df4b4f1f28ffab318bb" translate="yes" xml:space="preserve">
          <source>For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as &quot;PST&quot;, &quot;CTT&quot;, &quot;AST&quot;) are also supported. However, &lt;strong&gt;their use is deprecated&lt;/strong&gt; because the same abbreviation is often used for multiple time zones (for example, &quot;CST&quot; could be U.S. &quot;Central Standard Time&quot; and &quot;China Standard Time&quot;), and the Java platform can then only recognize one of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426d2bc87f59f5f0cb4ba388ec2d7d4edcc97713" translate="yes" xml:space="preserve">
          <source>For concurrent collectors, an implementation is free to (but not required to) implement reduction concurrently. A concurrent reduction is one where the accumulator function is called concurrently from multiple threads, using the same concurrently-modifiable result container, rather than keeping the result isolated during accumulation. A concurrent reduction should only be applied if the collector has the &lt;a href=&quot;collector.characteristics#UNORDERED&quot;&gt;&lt;code&gt;Collector.Characteristics.UNORDERED&lt;/code&gt;&lt;/a&gt; characteristics or if the originating data is unordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87f89f0734b0f681dabea429fae1aace7b8245d" translate="yes" xml:space="preserve">
          <source>For convenience, the &lt;a href=&quot;coderresult#isError--&quot;&gt;&lt;code&gt;isError&lt;/code&gt;&lt;/a&gt; method returns &lt;code&gt;true&lt;/code&gt; for result objects that describe malformed-input and unmappable-character errors but &lt;code&gt;false&lt;/code&gt; for those that describe underflow or overflow conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1540b9260398a27c20afbc75e79f7e85a69fa272" translate="yes" xml:space="preserve">
          <source>For datagram-oriented sockets the socket option is used to allow multiple programs bind to the same address. This option should be enabled when the socket is to be used for Internet Protocol (IP) multicasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786c72f86388cb950616d047202d32b3eb1c3b0f" translate="yes" xml:space="preserve">
          <source>For datagram-oriented sockets, the size of the receive buffer may limit the size of the datagrams that can be received. Whether datagrams larger than the buffer size can be received is system dependent. Increasing the socket receive buffer may be important for cases where datagrams arrive in bursts faster than they can be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966cd6f9c064ea098962ea14f75ef3365435e675" translate="yes" xml:space="preserve">
          <source>For datagram-oriented sockets, the size of the send buffer may limit the size of the datagrams that may be sent by the socket. Whether datagrams larger than the buffer size are sent or discarded is system dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e144e4de7a25df3ef3b62d81140888932e771f2c" translate="yes" xml:space="preserve">
          <source>For date-times, 'JULIAN_DAY.getFrom()' assumes the same value from midnight until just before the next midnight. When 'JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered. 'JULIAN_DAY.adjustInto()' and 'JULIAN_DAY.getFrom()' only apply to &lt;code&gt;Temporal&lt;/code&gt; objects that can be converted into &lt;a href=&quot;chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;ChronoField.EPOCH_DAY&lt;/code&gt;&lt;/a&gt;. An &lt;a href=&quot;unsupportedtemporaltypeexception&quot;&gt;&lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt;&lt;/a&gt; is thrown for any other type of object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc6b45ec07db1a8b27e379302a25193156d3ffa" translate="yes" xml:space="preserve">
          <source>For date-times, 'MODIFIED_JULIAN_DAY.getFrom()' assumes the same value from midnight until just before the next midnight. When 'MODIFIED_JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered. 'MODIFIED_JULIAN_DAY.adjustInto()' and 'MODIFIED_JULIAN_DAY.getFrom()' only apply to &lt;code&gt;Temporal&lt;/code&gt; objects that can be converted into &lt;a href=&quot;chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;ChronoField.EPOCH_DAY&lt;/code&gt;&lt;/a&gt;. An &lt;a href=&quot;unsupportedtemporaltypeexception&quot;&gt;&lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt;&lt;/a&gt; is thrown for any other type of object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbb52d0e448ae0028f420b523fc0e8fe8889086" translate="yes" xml:space="preserve">
          <source>For date-times, 'RATA_DIE.getFrom()' assumes the same value from midnight until just before the next midnight. When 'RATA_DIE.adjustInto()' is applied to a date-time, the time of day portion remains unaltered. 'RATA_DIE.adjustInto()' and 'RATA_DIE.getFrom()' only apply to &lt;code&gt;Temporal&lt;/code&gt; objects that can be converted into &lt;a href=&quot;chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;ChronoField.EPOCH_DAY&lt;/code&gt;&lt;/a&gt;. An &lt;a href=&quot;unsupportedtemporaltypeexception&quot;&gt;&lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt;&lt;/a&gt; is thrown for any other type of object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d681735625cb5b074de969173935dda35c689f" translate="yes" xml:space="preserve">
          <source>For details and the values of parameter that are valid for the various types of services see the top of this class and the  Java Cryptography Architecture API Specification &amp;amp; Reference. Security providers can override it to implement their own test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265e8a5599432ddf889d173f21ff483b5caee801" translate="yes" xml:space="preserve">
          <source>For directories that do not use a string representation for some or all of their attributes, the filter argument corresponding to an attribute value may be of a type other than String. Directories that support unstructured binary-valued attributes, for example, should accept byte arrays as filter arguments. The interpretation (if any) of filter arguments of any other type is determined by the service provider for that directory, which maps the filter operations onto operations with corresponding semantics in the underlying directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e87de10ee00b022602cd0fe8a0bf81b92bb32e" translate="yes" xml:space="preserve">
          <source>For each call of &lt;code&gt;publish&lt;/code&gt; the &lt;code&gt;Handler&lt;/code&gt; will call this &lt;code&gt;Filter&lt;/code&gt; (if it is non-null) to check if the &lt;code&gt;LogRecord&lt;/code&gt; should be published or discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286cc615cc027b7399bc8f36bf03bcc0ce9d8b08" translate="yes" xml:space="preserve">
          <source>For each class &quot;Foo&quot;, explicit information may be available if there exists a corresponding &quot;FooBeanInfo&quot; class that provides a non-null value when queried for the information. We first look for the BeanInfo class by taking the full package-qualified name of the target bean class and appending &quot;BeanInfo&quot; to form a new class name. If this fails, then we take the final classname component of this name, and look for that class in each of the packages specified in the BeanInfo package search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e30f6a64e00d84dcf684b247b7c04cb7d796f1" translate="yes" xml:space="preserve">
          <source>For each entry of &lt;code&gt;providers&lt;/code&gt; that implements the &lt;code&gt;RegisterableService&lt;/code&gt; interface, its &lt;code&gt;onRegistration&lt;/code&gt; method will be called once for each category it is registered under. Its &lt;code&gt;onDeregistration&lt;/code&gt; method will be called each time it is deregistered from a category or when the registry is finalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca5a3eb61a3c0a9243e70fdb42a70d21404ae0f" translate="yes" xml:space="preserve">
          <source>For each file encountered this method attempts to read its &lt;a href=&quot;attribute/basicfileattributes&quot;&gt;&lt;code&gt;BasicFileAttributes&lt;/code&gt;&lt;/a&gt;. If the file is not a directory then the &lt;a href=&quot;filevisitor#visitFile-T-java.nio.file.attribute.BasicFileAttributes-&quot;&gt;&lt;code&gt;visitFile&lt;/code&gt;&lt;/a&gt; method is invoked with the file attributes. If the file attributes cannot be read, due to an I/O exception, then the &lt;a href=&quot;filevisitor#visitFileFailed-T-java.io.IOException-&quot;&gt;&lt;code&gt;visitFileFailed&lt;/code&gt;&lt;/a&gt; method is invoked with the I/O exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf36bbce577351f24028eda6666f70d941e508b" translate="yes" xml:space="preserve">
          <source>For each listener, the original &lt;code&gt;NotificationListener&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; are kept on the client side; in order for the client to be able to identify them, the server generates and returns a unique &lt;code&gt;listenerID&lt;/code&gt;. This &lt;code&gt;listenerID&lt;/code&gt; is forwarded with the &lt;code&gt;Notifications&lt;/code&gt; to the remote client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a84cf424a476d032f4b6ffd9d39b7dddecc378" translate="yes" xml:space="preserve">
          <source>For each lower bound B :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560c97173e52668310a247ab36d49a521c8f9040" translate="yes" xml:space="preserve">
          <source>For each method in the returned &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes the corresponding method to be called in the remote MBean server on behalf of the given delegation subject instead of the authenticated subject. The value returned by the MBean server method is the value returned to the client. If the MBean server method produces an &lt;code&gt;Exception&lt;/code&gt;, the same &lt;code&gt;Exception&lt;/code&gt; is seen by the client. If the MBean server method, or the attempt to call it, produces an &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a &lt;a href=&quot;../jmxservererrorexception&quot;&gt;&lt;code&gt;JMXServerErrorException&lt;/code&gt;&lt;/a&gt;, which is seen by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cab9b7add9ebb79364ab1771d1e616553c1e6db" translate="yes" xml:space="preserve">
          <source>For each method in the returned &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes the corresponding method to be called in the remote MBean server on behalf of the given delegation subject instead of the authenticated subject. The value returned by the MBean server method is the value returned to the client. If the MBean server method produces an &lt;code&gt;Exception&lt;/code&gt;, the same &lt;code&gt;Exception&lt;/code&gt; is seen by the client. If the MBean server method, or the attempt to call it, produces an &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a &lt;a href=&quot;jmxservererrorexception&quot;&gt;&lt;code&gt;JMXServerErrorException&lt;/code&gt;&lt;/a&gt;, which is seen by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d1d1cbcb4df50206304dcd7ddd941a7faf1321" translate="yes" xml:space="preserve">
          <source>For each method in the returned &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes the corresponding method to be called in the remote MBean server. The value returned by the MBean server method is the value returned to the client. If the MBean server method produces an &lt;code&gt;Exception&lt;/code&gt;, the same &lt;code&gt;Exception&lt;/code&gt; is seen by the client. If the MBean server method, or the attempt to call it, produces an &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a &lt;a href=&quot;../jmxservererrorexception&quot;&gt;&lt;code&gt;JMXServerErrorException&lt;/code&gt;&lt;/a&gt;, which is seen by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af553cdcbe446f41ad75bb0c253ebededf33d396" translate="yes" xml:space="preserve">
          <source>For each method in the returned &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes the corresponding method to be called in the remote MBean server. The value returned by the MBean server method is the value returned to the client. If the MBean server method produces an &lt;code&gt;Exception&lt;/code&gt;, the same &lt;code&gt;Exception&lt;/code&gt; is seen by the client. If the MBean server method, or the attempt to call it, produces an &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a &lt;a href=&quot;jmxservererrorexception&quot;&gt;&lt;code&gt;JMXServerErrorException&lt;/code&gt;&lt;/a&gt;, which is seen by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719f9f441ad2dee9837b67bc47a02d9badbbe4a3" translate="yes" xml:space="preserve">
          <source>For each non-transient property, an expression is created in which the nullary &quot;getter&quot; method is applied to the &lt;code&gt;oldInstance&lt;/code&gt;. The value of this expression is the value of the property in the instance that is being serialized. If the value of this expression in the cloned environment &lt;code&gt;mutatesTo&lt;/code&gt; the target value, the new value is initialized to make it equivalent to the old value. In this case, because the property value has not changed there is no need to call the corresponding &quot;setter&quot; method and no statement is emitted. If not however, the expression for this value is replaced with another expression (normally a constructor) and the corresponding &quot;setter&quot; method is called to install the new property value in the object. This scheme removes default information from the output produced by streams using this delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e68cba9e515c80a86dee74a48fa0652d49385f" translate="yes" xml:space="preserve">
          <source>For each of the correspondents in the key exchange, &lt;code&gt;doPhase&lt;/code&gt; needs to be called. For example, if this key exchange is with one other party, &lt;code&gt;doPhase&lt;/code&gt; needs to be called once, with the &lt;code&gt;lastPhase&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. If this key exchange is with two other parties, &lt;code&gt;doPhase&lt;/code&gt; needs to be called twice, the first time setting the &lt;code&gt;lastPhase&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, and the second time setting it to &lt;code&gt;true&lt;/code&gt;. There may be any number of parties involved in a key exchange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1abc49e05851db66fa969e8d77a4a123b0ee0f" translate="yes" xml:space="preserve">
          <source>For each of the correspondents in the key exchange, &lt;code&gt;engineDoPhase&lt;/code&gt; needs to be called. For example, if the key exchange is with one other party, &lt;code&gt;engineDoPhase&lt;/code&gt; needs to be called once, with the &lt;code&gt;lastPhase&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. If the key exchange is with two other parties, &lt;code&gt;engineDoPhase&lt;/code&gt; needs to be called twice, the first time setting the &lt;code&gt;lastPhase&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, and the second time setting it to &lt;code&gt;true&lt;/code&gt;. There may be any number of parties involved in a key exchange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6705d80531c8f298495e16bdc3ba61df9ab6cbdc" translate="yes" xml:space="preserve">
          <source>For each of those three kinds of information, the Introspector will separately analyze the bean's class and superclasses looking for either explicit or implicit information and use that information to build a BeanInfo object that comprehensively describes the target bean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff74e9e3b5f2e83be3535442fcbac4322b4605f" translate="yes" xml:space="preserve">
          <source>For each pair of threads that successfully exchange objects via an &lt;code&gt;Exchanger&lt;/code&gt;, actions prior to the &lt;code&gt;exchange()&lt;/code&gt; in each thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70daddc43f303edbcbd09b46d7f6250e5c21d2f8" translate="yes" xml:space="preserve">
          <source>For each property found in both of these two sources, JNDI determines the property's value as follows. If the property is one of the standard JNDI properties that specify a list of JNDI factories (listed &lt;a href=&quot;#LISTPROPS&quot;&gt;above&lt;/a&gt;), the values are concatenated into a single colon-separated list. For other properties, only the first value found is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dc92c1a206cf79e9d08ca3b0fa19bc4dfdd624" translate="yes" xml:space="preserve">
          <source>For each property found in both of these two sources, or in more than one application resource file, the property's value is determined as follows. If the property is one of the standard JNDI properties that specify a list of JNDI factories (see &lt;a href=&quot;context#LISTPROPS&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;), all of the values are concatenated into a single colon-separated list. For other properties, only the first value found is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a5c213817cdd80511492b1f5a1b49d548c1151" translate="yes" xml:space="preserve">
          <source>For each property found in more than one application resource file, JNDI uses the first value found or, in a few cases where it makes sense to do so, it concatenates all of the values (details are given below). For example, if the &quot;java.naming.factory.object&quot; property is found in three &lt;code&gt;jndi.properties&lt;/code&gt; resource files, the list of object factories is a concatenation of the property values from all three files. Using this scheme, each deployable component is responsible for listing the factories that it exports. JNDI automatically collects and uses all of these export lists when searching for factory classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebf057d31e3a874e277390510d8867ee4415f1a" translate="yes" xml:space="preserve">
          <source>For each representation [</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc4fa19139d0316b7911716ec07a2b22e32aa79" translate="yes" xml:space="preserve">
          <source>For each upper bound B :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1963cf2281039f3bd61fa6e3d2bbdd1608d8271" translate="yes" xml:space="preserve">
          <source>For each upper bound B:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6808db189d4064c914947cfda276df1fb67492d5" translate="yes" xml:space="preserve">
          <source>For encodings consisting of multiple certificates, use &lt;code&gt;generateCertificates&lt;/code&gt; when you want to parse a collection of possibly unrelated certificates. Otherwise, use &lt;code&gt;generateCertPath&lt;/code&gt; when you want to generate a &lt;code&gt;CertPath&lt;/code&gt; (a certificate chain) and subsequently validate it with a &lt;code&gt;CertPathValidator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c58b6e9bc484c08c212d940518dbfc22676fe01" translate="yes" xml:space="preserve">
          <source>For every Java type &lt;em&gt;J&lt;/em&gt;, the MXBean mapping is described by the following information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d25b7b1723971b685662d129ae6845002a82989" translate="yes" xml:space="preserve">
          <source>For example this code returns a date on the last day of July:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93be9a98e0ead9fb758dc65b47e6eacc04ae211" translate="yes" xml:space="preserve">
          <source>For example to read from a stream as written by the example in ObjectOutputStream:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea8f92e5ff92dd10bdae905afaf950bcc028834" translate="yes" xml:space="preserve">
          <source>For example to write an object that can be read by the example in ObjectInputStream:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3bd207737b554201ad4873d19d79f75b22c5dd" translate="yes" xml:space="preserve">
          <source>For example using UTF-8 as the encoding scheme the string &quot;The string &amp;uuml;@foo-bar&quot; would get converted to &quot;The+string+%C3%BC%40foo-bar&quot; because in UTF-8 the character &amp;uuml; is encoded as two bytes C3 (hex) and BC (hex), and the character @ is encoded as one byte 40 (hex).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77436c62db40fb0d8e10ad4f0044d6f872750e7a" translate="yes" xml:space="preserve">
          <source>For example, &quot;*&quot;, &quot;javax.management.remote.JMXPrincipal.*&quot; and &quot;javax.management.remote.JMXPrincipal.delegate&quot; are valid target names. The first one denotes any principal name from any principal class, the second one denotes any principal name of the concrete principal class &lt;code&gt;javax.management.remote.JMXPrincipal&lt;/code&gt; and the third one denotes a concrete principal name &lt;code&gt;delegate&lt;/code&gt; of the concrete principal class &lt;code&gt;javax.management.remote.JMXPrincipal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f1fc71f706b96406965545c5a72537af23c22f" translate="yes" xml:space="preserve">
          <source>For example, &quot;1 year, 6 months and 3 days&quot; minus &quot;2 years, 2 months and 2 days&quot; returns &quot;-1 years, 4 months and 1 day&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2f04507ae8e2998174aa82e754a89ec2df289f" translate="yes" xml:space="preserve">
          <source>For example, &quot;1 year, 6 months and 3 days&quot; plus &quot;2 years, 2 months and 2 days&quot; returns &quot;3 years, 8 months and 5 days&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1ca285238b6f4f71a5a84cbdfe707d75fa2f47" translate="yes" xml:space="preserve">
          <source>For example, &quot;CertificateFactory.X.509&quot; would be satisfied by any provider that supplied a CertificateFactory implementation for X.509 certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63fe4a2a7c054829c4bfb4607b20ee971586bd3" translate="yes" xml:space="preserve">
          <source>For example, &quot;Signature.SHA1withDSA KeySize:1024&quot; would be satisfied by any provider that implemented the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23834668b4f42aa3eff36d9dc3af1cb803a05d8f" translate="yes" xml:space="preserve">
          <source>For example, &quot;d:k=*&quot; and &quot;d:k=*,*&quot; are property value patterns whereas &quot;d:k=v,*&quot; is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693804fe51c05f08e1e089946166fd022bbe5638" translate="yes" xml:space="preserve">
          <source>For example, &quot;d:k=v,*&quot; and &quot;d:k=*,*&quot; are key property list patterns whereas &quot;d:k=*&quot; is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f203035b2d853f5578c6fa1376f1f2226371e963" translate="yes" xml:space="preserve">
          <source>For example, 'ppH' outputs the hour-of-day padded on the left with spaces to a width of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe932a3580bdae7afe6e0a4a9de58c7157cf7a7c" translate="yes" xml:space="preserve">
          <source>For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a78f26713124191fac2e6d28003f9a9ac84e472" translate="yes" xml:space="preserve">
          <source>For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6ba16c2096d7d81200bdc33b24cb5f6ab6239d" translate="yes" xml:space="preserve">
          <source>For example, 2007-03-31 minus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd615cd01a73b4d5679c49655d40ba2b42a8ae69" translate="yes" xml:space="preserve">
          <source>For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e868a34fb2f73ca67495f195fb00081f0ca9a55a" translate="yes" xml:space="preserve">
          <source>For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04433b015b19f6077c09b7c0646d9668dd2e4865" translate="yes" xml:space="preserve">
          <source>For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2323f63b708163f478b22afb5d3d7394c2b7fb" translate="yes" xml:space="preserve">
          <source>For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc67e734a945db6ecd093cddd5d355c674f7062b" translate="yes" xml:space="preserve">
          <source>For example, 2008-12-31 minus one day would result in 2009-01-01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a5ba47be43a81f6ae6988d7484d726497287d1" translate="yes" xml:space="preserve">
          <source>For example, 2008-12-31 minus one week would result in 2009-01-07.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47190266a9dbf83e8257ded9a0ae0d448f4ea1b" translate="yes" xml:space="preserve">
          <source>For example, 2008-12-31 plus one day would result in 2009-01-01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8b9caab1cbe23452ae062409cbc54469046fd9" translate="yes" xml:space="preserve">
          <source>For example, 2008-12-31 plus one week would result in 2009-01-07.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753c745299a18ae4a799071980d0926142c9ce97" translate="yes" xml:space="preserve">
          <source>For example, 2009-01-01 minus one day would result in 2008-12-31.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4903b02ec0ad82ff029ba8cebb4d342c8e56e1a" translate="yes" xml:space="preserve">
          <source>For example, 2009-01-07 minus one week would result in 2008-12-31.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc133e42d70b82a62bf05a26a79b0108e9f8886f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;&quot;en&quot;&lt;/code&gt; (English), &lt;code&gt;&quot;ja-JP&quot;&lt;/code&gt; (Japanese, Japan), &lt;code&gt;&quot;*&quot;&lt;/code&gt; (special language range which matches any language tag) are basic language ranges, whereas &lt;code&gt;&quot;*-CH&quot;&lt;/code&gt; (any languages, Switzerland), &lt;code&gt;&quot;es-*&quot;&lt;/code&gt; (Spanish, any regions), and &lt;code&gt;&quot;zh-Hant-*&quot;&lt;/code&gt; (Traditional Chinese, any regions) are extended language ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307ac7475a5766fb24af31c365da55c146a7a4e7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;floorDiv(-4, 3) == -2&lt;/code&gt;, whereas &lt;code&gt;(-4 / 3) == -1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9357617bd335f33004f692f6a9b76c59dbe77c62" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;floorDiv(4, 3) == 1&lt;/code&gt; and &lt;code&gt;(4 / 3) == 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3db823fd5d154379db38330c70c6aa05d95a7b" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;unwrap()&lt;/code&gt; will return a &lt;a href=&quot;sslengineresult.status#BUFFER_OVERFLOW&quot;&gt;&lt;code&gt;SSLEngineResult.Status.BUFFER_OVERFLOW&lt;/code&gt;&lt;/a&gt; result if the engine determines that there is not enough destination buffer space available. Applications should call &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; and compare that value with the space available in the destination buffer, enlarging the buffer if necessary. Similarly, if &lt;code&gt;unwrap()&lt;/code&gt; were to return a &lt;a href=&quot;sslengineresult.status#BUFFER_UNDERFLOW&quot;&gt;&lt;code&gt;SSLEngineResult.Status.BUFFER_UNDERFLOW&lt;/code&gt;&lt;/a&gt;, the application should call &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; to ensure that the source buffer has enough room to hold a record (enlarging if necessary), and then obtain more inbound data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1998d630e1504268351aa6615083ecf8974433fd" translate="yes" xml:space="preserve">
          <source>For example, January 1, 1998 is a Thursday. If &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4 (ISO 8601 standard compatible setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar year 1997. If, however, &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt;, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997 and their week year is 1997.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e092825d8d7d24993000ffbf9f66dd544c8f8c1a" translate="yes" xml:space="preserve">
          <source>For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours ahead in summer. The &lt;code&gt;ZoneId&lt;/code&gt; instance for Paris will reference two &lt;code&gt;ZoneOffset&lt;/code&gt; instances - a &lt;code&gt;+01:00&lt;/code&gt; instance for winter, and a &lt;code&gt;+02:00&lt;/code&gt; instance for summer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d688f4f440475c5a1db8e0e10b800e36113df212" translate="yes" xml:space="preserve">
          <source>For example, TimeZone.getTimeZone(&quot;GMT-8&quot;).getID() returns &quot;GMT-08:00&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9f6aeedfb8de865524def4fbb728eedaecd29c" translate="yes" xml:space="preserve">
          <source>For example, a Start TLS extended request class would need to know how to process a Start TLS extended response. It does this by creating a class that implements ExtendedResponse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c39f664631a0cf28a49a0e35b1cefa452e0a0bb" translate="yes" xml:space="preserve">
          <source>For example, a base value of &lt;code&gt;1980&lt;/code&gt; and a width of &lt;code&gt;2&lt;/code&gt; will have valid values from &lt;code&gt;1980&lt;/code&gt; to &lt;code&gt;2079&lt;/code&gt;. During parsing, the text &lt;code&gt;&quot;12&quot;&lt;/code&gt; will result in the value &lt;code&gt;2012&lt;/code&gt; as that is the value within the range where the last two characters are &quot;12&quot;. By contrast, parsing the text &lt;code&gt;&quot;1915&quot;&lt;/code&gt; will result in the value &lt;code&gt;1915&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c71f404fe84e7574fa1935e3403b27fa6ab778" translate="yes" xml:space="preserve">
          <source>For example, a bean which supports named properties would have a two argument method signature for adding a &lt;code&gt;PropertyChangeListener&lt;/code&gt; for a property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98bd693b65418b7676311d076cc95cc65256ecb" translate="yes" xml:space="preserve">
          <source>For example, a caller might bind a printer object with some printer-related attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d94c61f647d454a1fa4c444b818c29312b4a2a0" translate="yes" xml:space="preserve">
          <source>For example, a factory might use the BER encoded data in basic control and return an instance of a VirtualListReplyControl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa59bf2661efe7c994e38c7d7b8d6548f8749dc" translate="yes" xml:space="preserve">
          <source>For example, a key set of a &lt;a href=&quot;concurrent/concurrenthashmap&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt; is a concurrent source. A Spliterator created from the source reports a characteristic of &lt;code&gt;CONCURRENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b126924e79c2834f2d9a043c26ae9dc7d8a62dfd" translate="yes" xml:space="preserve">
          <source>For example, a provider may supply a subclass of &lt;code&gt;CipherSpi&lt;/code&gt; that implements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2267a27b43c9dd4b60e4328d79e5f67cbcbd0a30" translate="yes" xml:space="preserve">
          <source>For example, an MBean representing an application's configuration could have attributes representing the different configuration items. Reading the &lt;code&gt;CacheSize&lt;/code&gt; attribute would return the current value of that item. Writing it would update the item, potentially changing the behavior of the running application. An operation such as &lt;code&gt;save&lt;/code&gt; could store the current configuration persistently. A notification such as &lt;code&gt;ConfigurationChangedNotification&lt;/code&gt; could be sent every time the configuration is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bec37e50bd07a7b9a1146826f2b4add33836ad5" translate="yes" xml:space="preserve">
          <source>For example, an address type could be &quot;BSD Printer Address&quot;, which specifies that it is an address to be used with the BSD printing protocol. Its contents could be the machine name identifying the location of the printer server that understands this protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e1d5796d48a176413567e598e8ec0c386d451c" translate="yes" xml:space="preserve">
          <source>For example, an annotation whose type is meta-annotated with &lt;code&gt;@Target(ElementType.FIELD)&lt;/code&gt; may only be written as a modifier for a field declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2148da4efe014a9df975d69808a41981018913" translate="yes" xml:space="preserve">
          <source>For example, an annotation whose type is meta-annotated with &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt; may be written on the type of a field (or within the type of the field, if it is a nested, parameterized, or array type), and may also appear as a modifier for, say, a class declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d7fa5f16112c607e685e5e651f88ca7e56d2d8" translate="yes" xml:space="preserve">
          <source>For example, an application could create a network class loader to download class files from a server. Sample code might look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bfe2a8d638a77e4e3824130d95a5f8a374d5d7" translate="yes" xml:space="preserve">
          <source>For example, an application or library gets a SASL client by doing something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1828960382a974d4643dd826be7d24df87a13a41" translate="yes" xml:space="preserve">
          <source>For example, an implementation of the &lt;a href=&quot;../../text/spi/dateformatprovider&quot;&gt;&lt;code&gt;DateFormatProvider&lt;/code&gt;&lt;/a&gt; class should take the form of a jar file which contains the file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4504425379be6e57446a265c161123e2f772abb" translate="yes" xml:space="preserve">
          <source>For example, an instance of &lt;a href=&quot;concurrent/copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; is an immutable source. A Spliterator created from the source reports a characteristic of &lt;code&gt;IMMUTABLE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49493292c987a394b19f8ed522472d06c5c2f95" translate="yes" xml:space="preserve">
          <source>For example, configuration data for a simple keystore domain comprising three keystores is shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99107e117c2889e51b14699fb5352bf8f38f4d15" translate="yes" xml:space="preserve">
          <source>For example, consider &lt;code&gt;builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2);&lt;/code&gt; The year is a variable width parse of between 1 and 19 digits. The month is a fixed width parse of 2 digits. Because these were appended to the same builder immediately after one another, the year parser will reserve two digits for the month to parse. Thus, the text '201106' will correctly parse to a year of 2011 and a month of 6. Without adjacent value parsing, the year would greedily parse all six digits and leave nothing for the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb27e173bb555deeaace6ea758fa2e284bad81e" translate="yes" xml:space="preserve">
          <source>For example, consider a builder setup as &lt;code&gt;builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2).optionalEnd()&lt;/code&gt;. During formatting, the minute will only be output if its value can be obtained from the date-time. During parsing, the input will be successfully parsed whether the minute is present or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8dd1ddf4f32aeb5b0a11f4fe5fb43881c7c42d" translate="yes" xml:space="preserve">
          <source>For example, consider a builder setup as &lt;code&gt;builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2)&lt;/code&gt;. The optional section ends automatically at the end of the builder. During formatting, the minute will only be output if its value can be obtained from the date-time. During parsing, the input will be successfully parsed whether the minute is present or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef221f9f647dba2a0421f5ea02960bcddf562fa" translate="yes" xml:space="preserve">
          <source>For example, consider a formatter that parses the year, followed by an optional month, with a further optional day-of-month. Using such a formatter would require the calling code to check whether a full date, year-month or just a year had been parsed. This method can be used to default the month and day-of-month to a sensible value, such as the first of the month, allowing the calling code to always get a date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a27a201770a8b8829db90b4ec6af7aee1a054b" translate="yes" xml:space="preserve">
          <source>For example, consider a time-zone where the spring DST cutover means that the local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d42880f23c0e646f2d4e506ad0e04510090d6f3" translate="yes" xml:space="preserve">
          <source>For example, consider adding a period of one day and a duration of one day to 18:00 on the evening before a daylight savings gap. The &lt;code&gt;Period&lt;/code&gt; will add the conceptual day and result in a &lt;code&gt;ZonedDateTime&lt;/code&gt; at 18:00 the following day. By contrast, the &lt;code&gt;Duration&lt;/code&gt; will add exactly 24 hours, resulting in a &lt;code&gt;ZonedDateTime&lt;/code&gt; at 19:00 the following day (assuming a one hour DST gap).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68df5296d7673eca3d6b63955d031bc849454994" translate="yes" xml:space="preserve">
          <source>For example, consider the following in Spanish:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f37546673d9f0750b6986e9d6915ec5ac72652f" translate="yes" xml:space="preserve">
          <source>For example, even though a value might be a Java String object, its directory syntax might be &quot;Printable String&quot; or &quot;Telephone Number&quot;. Or a value might be a byte array, and its directory syntax is &quot;JPEG&quot; or &quot;Certificate&quot;. For example, if this attribute's syntax is &quot;JPEG&quot;, this method would return the syntax definition for &quot;JPEG&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a4d26cb6efe1f523aa46724f8fb96f7856600d" translate="yes" xml:space="preserve">
          <source>For example, for the Java type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ffbeae9f0f48649ff9382de5a91c3902e5591e" translate="yes" xml:space="preserve">
          <source>For example, given a beanName of &quot;x.y&quot;, Beans.instantiate would first try to read a serialized object from the resource &quot;x/y.ser&quot; and if that failed it would try to load the class &quot;x.y&quot; and create an instance of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d92376d82e73bb63b8e40f940e5ec4a077d198" translate="yes" xml:space="preserve">
          <source>For example, given a date in May, the following are output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecda29c3f3147c74316769a89dd8f6fe868f7043" translate="yes" xml:space="preserve">
          <source>For example, given a date that is a Wednesday, the following are output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c965f7a5f41ce80f1a25cbd34c8d47aad5df9f54" translate="yes" xml:space="preserve">
          <source>For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to calculate tallest person in each city:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b713374a02cb786860f1fc8ec9775898d60b3245" translate="yes" xml:space="preserve">
          <source>For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to calculate the longest last name of residents in each city:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e31c382624c9d6b1c417bd25fa1df6a1652aebf" translate="yes" xml:space="preserve">
          <source>For example, here is a ManagedBlocker based on a ReentrantLock:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82156eae8fb0fc5dde9fadba753d71470b6abeef" translate="yes" xml:space="preserve">
          <source>For example, here is an initial version of a class that uses divide-by-two recursive decomposition to divide work into single pieces (leaf tasks). Even when work is split into individual calls, tree-based techniques are usually preferable to directly forking leaf tasks, because they reduce inter-thread communication and improve load balancing. In the recursive case, the second of each pair of subtasks to finish triggers completion of its parent (because no result combination is performed, the default no-op implementation of method &lt;code&gt;onCompletion&lt;/code&gt; is not overridden). A static utility method sets up the base task and invokes it (here, implicitly using the &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e275d8300f52d19c548442729a421b90979a34" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;baseName&lt;/code&gt; is &lt;code&gt;&quot;baseName&quot;&lt;/code&gt; and &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;Locale(&quot;ja&quot;,&amp;nbsp;&quot;&quot;,&amp;nbsp;&quot;XX&quot;)&lt;/code&gt;, then &lt;code&gt;&quot;baseName_ja_&amp;thinsp;_XX&quot;&lt;/code&gt; is returned. If the given locale is &lt;code&gt;Locale(&quot;en&quot;)&lt;/code&gt;, then &lt;code&gt;&quot;baseName_en&quot;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830d8126196c337be8d88ddce1630721ca654641" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;com.vendor.VendorJavaCompiler&lt;/code&gt; is a provider of the &lt;code&gt;JavaCompiler&lt;/code&gt; tool then its jar file would contain the file &lt;code&gt;META-INF/services/javax.tools.JavaCompiler&lt;/code&gt;. This file would contain the single line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a67cf7851c6b086e93044a3d3dddc5b85bcbeab" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;from&lt;/code&gt; was located at bank number 2, program number 11, remapping causes that bank and program location to be occupied instead by &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899a0fe3dc85838c3957e2652979a348ab972b1e" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1. Thursday, January 1 through Saturday, January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 0. If &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is changed to 3, then January 1 through January 3 have a &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb253ab77f0e4e443fb7be6278c680bfc999539d" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;z&lt;/code&gt; refers to a string buffer object whose current contents are &lt;code&gt;&quot;start&quot;&lt;/code&gt;, then the method call &lt;code&gt;z.append(&quot;le&quot;)&lt;/code&gt; would cause the string buffer to contain &lt;code&gt;&quot;startle&quot;&lt;/code&gt;, whereas &lt;code&gt;z.insert(4, &quot;le&quot;)&lt;/code&gt; would alter the string buffer to contain &lt;code&gt;&quot;starlet&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17dfa1bfe4e57090ded791b7e9e279a25dffa9a" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;z&lt;/code&gt; refers to a string builder object whose current contents are &quot;&lt;code&gt;start&lt;/code&gt;&quot;, then the method call &lt;code&gt;z.append(&quot;le&quot;)&lt;/code&gt; would cause the string builder to contain &quot;&lt;code&gt;startle&lt;/code&gt;&quot;, whereas &lt;code&gt;z.insert(4, &quot;le&quot;)&lt;/code&gt; would alter the string builder to contain &quot;&lt;code&gt;starlet&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710d856edbf8bf84aeb5220900f3b61fda35b993" translate="yes" xml:space="preserve">
          <source>For example, if a Language Priority List consists of two language ranges, &lt;code&gt;&quot;zh-Hant-TW&quot;&lt;/code&gt; and &lt;code&gt;&quot;en-US&quot;&lt;/code&gt;, in prioritized order, lookup method progressively searches the language tags below in order to find the best matching language tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ddb7bd9c556e0ea81e6d434c0f8f6fb2342bb1" translate="yes" xml:space="preserve">
          <source>For example, if a user's Language Priority List consists of five language ranges (&lt;code&gt;&quot;zh&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-CN&quot;&lt;/code&gt;, &lt;code&gt;&quot;en&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-TW&quot;&lt;/code&gt;, and &lt;code&gt;&quot;zh-HK&quot;&lt;/code&gt;), the newly generated Language Priority List which is customized using the above map example will consists of &lt;code&gt;&quot;zh&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-Hans&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-CN&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-Hans-CN&quot;&lt;/code&gt;, &lt;code&gt;&quot;en&quot;&lt;/code&gt;, &lt;code&gt;&quot;zh-TW&quot;&lt;/code&gt;, and &lt;code&gt;&quot;zh-HK&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccca141c8e739b24a4309512cb89730110c45cb" translate="yes" xml:space="preserve">
          <source>For example, if one adds two keys &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; such that &lt;code&gt;(!a.equals(b) &amp;amp;&amp;amp; a.compareTo(b) == 0)&lt;/code&gt; to a sorted set that does not use an explicit comparator, the second &lt;code&gt;add&lt;/code&gt; operation returns false (and the size of the sorted set does not increase) because &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equivalent from the sorted set's perspective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9281b71706921b868196d03b533cffbd112d303a" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;JMXServiceURL&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b529e25ea8f5209f163d42a160cb2fc30151d43" translate="yes" xml:space="preserve">
          <source>For example, if the Cipher is initialized for decryption, the CipherInputStream will attempt to read in data and decrypt them, before returning the decrypted data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7724368f3e485ffdfec604e01e07ff3df51b34fc" translate="yes" xml:space="preserve">
          <source>For example, if the Gregorian change date is January 10, 1970 and the date of this &lt;code&gt;GregorianCalendar&lt;/code&gt; is January 20, 1970, the actual minimum value of the &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field is 10 because the previous date of January 10, 1970 is December 27, 1996 (in the Julian calendar). Therefore, December 28, 1969 to January 9, 1970 don't exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33aa87758d6fb8746e61cd5b9e96eee72ff67fdd" translate="yes" xml:space="preserve">
          <source>For example, if the cipher is initialized for encryption, the CipherOutputStream will attempt to encrypt data before writing out the encrypted data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1479475ea5c9bec50119b10a7a4c2d86c208fd36" translate="yes" xml:space="preserve">
          <source>For example, if the first day-of-week is Sunday, then that will have the value 1, with other days ranging from Monday as 2 to Saturday as 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f2eb4c48388118ea43438f47cc5002b3188b1b" translate="yes" xml:space="preserve">
          <source>For example, if the following is specified in the property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d7d62e74d7435814a6cf38d36bfaaf109d9a51" translate="yes" xml:space="preserve">
          <source>For example, if the given &lt;code&gt;baseName&lt;/code&gt; is &quot;Messages&quot; and the given &lt;code&gt;locale&lt;/code&gt; is &lt;code&gt;Locale(&quot;ja&quot;,&amp;nbsp;&quot;&quot;,&amp;nbsp;&quot;XX&quot;)&lt;/code&gt;, then a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Locale&lt;/code&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cd652c0516c6edb966a6f2150f2e358c4fe8b3" translate="yes" xml:space="preserve">
          <source>For example, if the list() is returning only a partial answer, the corresponding exception would be PartialResultException. list() would first return a NamingEnumeration. When the last of the results has been returned by the NamingEnumeration's next(), invoking hasMore() would result in PartialResultException being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331dbdc8afa3ed2fafd4f2269cdca47bfcf3b063" translate="yes" xml:space="preserve">
          <source>For example, if the scheme id is &quot;ldap&quot;, and the &lt;code&gt;Context.URL_PKG_PREFIXES&lt;/code&gt; property contains &quot;com.widget:com.wiz.jndi&quot;, the naming manager would attempt to load the following classes until one is successfully instantiated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46297070dbcf189b984984a0a199e305142ec624" translate="yes" xml:space="preserve">
          <source>For example, if the val is &quot;Sue, Grabbit and Runn&quot;, the escaped value returned by this method is &quot;Sue\, Grabbit and Runn&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d08c542a01363da65f25cae9dcf86b3ab527e74" translate="yes" xml:space="preserve">
          <source>For example, if this &lt;code&gt;Calendar&lt;/code&gt; is a &lt;code&gt;GregorianCalendar&lt;/code&gt; and its date is 2005-01-01, then the string representation of the &lt;a href=&quot;calendar#MONTH&quot;&gt;&lt;code&gt;MONTH&lt;/code&gt;&lt;/a&gt; field would be &quot;January&quot; in the long style in an English locale or &quot;Jan&quot; in the short style. However, no string representation would be available for the &lt;a href=&quot;calendar#DAY_OF_MONTH&quot;&gt;&lt;code&gt;DAY_OF_MONTH&lt;/code&gt;&lt;/a&gt; field, and this method would return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3643c6484340ffe26a21c4d8fab930e16ffe032d" translate="yes" xml:space="preserve">
          <source>For example, if this &lt;code&gt;GregorianCalendar&lt;/code&gt;'s date is December 31, 2008 with &lt;a href=&quot;#iso8601_compatible_setting&quot;&gt;the ISO 8601 compatible setting&lt;/a&gt;, this method will return 53 for the period: December 29, 2008 to January 3, 2010 while &lt;a href=&quot;gregoriancalendar#getActualMaximum-int-&quot;&gt;&lt;code&gt;getActualMaximum(WEEK_OF_YEAR)&lt;/code&gt;&lt;/a&gt; will return 52 for the period: December 31, 2007 to December 28, 2008.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16d20b9efdce35bec0d0944cd28ae28c29420bc" translate="yes" xml:space="preserve">
          <source>For example, if this context is named &quot;wiz.com&quot; relative to the initial context, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3070fbc0afefe4ba32efdbac515d776b347e33bf" translate="yes" xml:space="preserve">
          <source>For example, if you have two FilePermissions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4d7501c36e5c5efefa917cb0f7c1e40b482f63" translate="yes" xml:space="preserve">
          <source>For example, in Massachusetts, five time zones west of Greenwich:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a75c6e6a5e2cdb362552f912fa2ac36588aead" translate="yes" xml:space="preserve">
          <source>For example, in a calendar systems with a seven day week, the first aligned-week-of-month starts on day-of-month 1, the second aligned-week starts on day-of-month 8, and so on. Thus, day-of-month values 1 to 7 are in aligned-week 1, while day-of-month values 8 to 14 are in aligned-week 2, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9c772cedc41791f8d1cb68769035e91f2f41e3" translate="yes" xml:space="preserve">
          <source>For example, in a calendar systems with a seven day week, the first aligned-week-of-month starts on day-of-month 1, the second aligned-week starts on day-of-month 8, and so on. Within each of these aligned-weeks, the days are numbered from 1 to 7 and returned as the value of this field. As such, day-of-month 1 to 7 will have aligned-day-of-week values from 1 to 7. And day-of-month 8 to 14 will repeat this with aligned-day-of-week values from 1 to 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dda9b2475fff15bbb36c85195a054becb35bb2" translate="yes" xml:space="preserve">
          <source>For example, in a calendar systems with a seven day week, the first aligned-week-of-year starts on day-of-year 1, the second aligned-week starts on day-of-year 8, and so on. Thus, day-of-year values 1 to 7 are in aligned-week 1, while day-of-year values 8 to 14 are in aligned-week 2, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0baee2845f9a21e825c757acaf8a692815fac2" translate="yes" xml:space="preserve">
          <source>For example, in a calendar systems with a seven day week, the first aligned-week-of-year starts on day-of-year 1, the second aligned-week starts on day-of-year 8, and so on. Within each of these aligned-weeks, the days are numbered from 1 to 7 and returned as the value of this field. As such, day-of-year 1 to 7 will have aligned-day-of-week values from 1 to 7. And day-of-year 8 to 14 will repeat this with aligned-day-of-week values from 1 to 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667454b51ee160e5f830b2fdf48f69b11def86bc" translate="yes" xml:space="preserve">
          <source>For example, in an instance method the expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83711f22cafdaf4358be276e1bd1b5420f8d198f" translate="yes" xml:space="preserve">
          <source>For example, in progressive JPEG decoding each pass contains updates to a set of coefficients, which would have to be transformed into pixel values and converted to an RGB color space for each pass if listeners are present. If no listeners are present, the coefficients may simply be accumulated and the final results transformed and color converted one time only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a59ad602d23ec59462a674a66faf3132c7e3c63" translate="yes" xml:space="preserve">
          <source>For example, invoking getObjectInstance() as shown above on a LDAP URL context factory would return a context that can resolve LDAP urls (e.g. &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot;, &quot;ldap://ldap.umich.edu/o=umich,c=us&quot;, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977510c92080ba8010d28759c38eb8389f8d2b36" translate="yes" xml:space="preserve">
          <source>For example, it is not generally permissible for one thread to modify a Collection while another thread is iterating over it. In general, the results of the iteration are undefined under these circumstances. Some Iterator implementations (including those of all the general purpose collection implementations provided by the JRE) may choose to throw this exception if this behavior is detected. Iterators that do this are known as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419095da819dea8caeaf54e67c3bbf2bbe849031" translate="yes" xml:space="preserve">
          <source>For example, lenient mode allows the month in the ISO calendar system to be outside the range 1 to 12. For example, month 15 is treated as being 3 months after month 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b8d9519a762fcc4900410f219bae25bde25134" translate="yes" xml:space="preserve">
          <source>For example, passing in April and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a9ab686c164d231a3c13b53e175a3015e71b35" translate="yes" xml:space="preserve">
          <source>For example, passing in month 4 (April) and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ece2aad41b9136b32570fffbcf0f35d16e2c7ef" translate="yes" xml:space="preserve">
          <source>For example, resolving year-month and day-of-month in the ISO calendar system using smart mode will ensure that the day-of-month is from 1 to 31, converting any value beyond the last valid day-of-month to be the last valid day-of-month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8610632f6733c46625ec28b668d9d0958dfcb9b" translate="yes" xml:space="preserve">
          <source>For example, resolving year-month and day-of-month in the ISO calendar system using strict mode will ensure that the day-of-month is valid for the year-month, rejecting invalid values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2960524da870ffd8c45901d28d87d1b01945cd8" translate="yes" xml:space="preserve">
          <source>For example, subtracting a year each time yield the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aabc43dc57e9cc5bf0a224360db057f6055a41" translate="yes" xml:space="preserve">
          <source>For example, suppose &lt;code&gt;list&lt;/code&gt; comprises&lt;code&gt; [t, a, n, k, s]&lt;/code&gt;. After invoking &lt;code&gt;Collections.rotate(list, 1)&lt;/code&gt; (or &lt;code&gt;Collections.rotate(list, -4)&lt;/code&gt;), &lt;code&gt;list&lt;/code&gt; will comprise &lt;code&gt;[s, t, a, n, k]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dbe4bd6065b4cb0b731de33bae24d41dbc526b" translate="yes" xml:space="preserve">
          <source>For example, suppose a listener implements &lt;code&gt;ObjectChangeListener&lt;/code&gt; and registers with a &lt;code&gt;EventContext&lt;/code&gt;. Then, if the connection to the server is subsequently broken, the listener will receive a &lt;code&gt;NamingExceptionEvent&lt;/code&gt; and may take some corrective action, such as notifying the user of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecccb48383e0235028ba4e42b0ed5977d52f556f" translate="yes" xml:space="preserve">
          <source>For example, suppose a listener makes the following registration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544466e03cf4e204054f295a7affd3dd6dee5a02" translate="yes" xml:space="preserve">
          <source>For example, suppose an LDAP server sends back a &quot;change ID&quot; control in response to a successful modification. It would supply a class &lt;code&gt;ChangeIDControl&lt;/code&gt; so that the application can use this feature. An application would perform an update, and then try to get the change ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c3623b514eb5cdba5ee8dc296c328e7f84e249" translate="yes" xml:space="preserve">
          <source>For example, suppose an LDAP server supports a &quot;get time&quot; extended operation. It would supply classes such as &lt;code&gt;GetTimeRequest&lt;/code&gt; and &lt;code&gt;GetTimeResponse&lt;/code&gt;, so that applications can use this feature. An application would use these classes as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d99dd15c47ddf1bd0f160d5ec3694f7617029b" translate="yes" xml:space="preserve">
          <source>For example, suppose an LDAP server supports a &quot;signed results&quot; request control, which when sent with a request, asks the server to digitally sign the results of an operation. It would supply a class &lt;code&gt;SignedResultsControl&lt;/code&gt; so that applications can use this feature. An application would use this class as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6856361217873808048fcc8d8563713fdb9f1e9" translate="yes" xml:space="preserve">
          <source>For example, suppose one adds two elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; such that &lt;code&gt;(a.equals(b) &amp;amp;&amp;amp; c.compare(a, b) != 0)&lt;/code&gt; to an empty &lt;code&gt;TreeSet&lt;/code&gt; with comparator &lt;code&gt;c&lt;/code&gt;. The second &lt;code&gt;add&lt;/code&gt; operation will return true (and the size of the tree set will increase) because &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are not equivalent from the tree set's perspective, even though this is contrary to the specification of the &lt;a href=&quot;set#add-E-&quot;&gt;&lt;code&gt;Set.add&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8429399a8ee6dd81aeccd65edca7dd387d5a635" translate="yes" xml:space="preserve">
          <source>For example, suppose the LDAP server supported a 'get time' extended operation. It would supply GetTimeRequest and GetTimeResponse classes. The GetTimeResponse class might look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd5ec9d3034278b63d192b66c4021fe19238ac6" translate="yes" xml:space="preserve">
          <source>For example, suppose the LDAP server supported a 'get time' extended operation. It would supply GetTimeRequest and GetTimeResponse classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7aaba7c594c43cc60d302e8d8ff53dc01af76f" translate="yes" xml:space="preserve">
          <source>For example, suppose there are &lt;code&gt;Module&lt;/code&gt; MBeans, representing modules within an application. A &lt;code&gt;DependsOn&lt;/code&gt; relation type could express the relationship that some modules depend on others, which could be used to determine the order in which the modules are started or stopped. The &lt;code&gt;DependsOn&lt;/code&gt; relation type would have two roles, &lt;code&gt;dependent&lt;/code&gt; and &lt;code&gt;dependedOn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6851c4e026126d2cadb4456f8c17deadeed95c47" translate="yes" xml:space="preserve">
          <source>For example, suppose there is a FilePermissionCollection in this Permissions object, and it contains one FilePermission that specifies &quot;read&quot; access for all files in all subdirectories of the &quot;/tmp&quot; directory, and another FilePermission that specifies &quot;write&quot; access for all files in the &quot;/tmp/scratch/foo&quot; directory. Then if the &lt;code&gt;implies&lt;/code&gt; method is called with a permission specifying both &quot;read&quot; and &quot;write&quot; access to files in the &quot;/tmp/scratch/foo&quot; directory, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4a3c6accaf2a649faf04567656523f83868294" translate="yes" xml:space="preserve">
          <source>For example, suppose we want to iterate over the files ending with &quot;.java&quot; in a directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a4d1c5d07862052a8718331187b8f1781335a5" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a class &lt;code&gt;Measure&lt;/code&gt; that consists of a String called &lt;code&gt;units&lt;/code&gt; and a &lt;code&gt;value&lt;/code&gt; that is either a &lt;code&gt;long&lt;/code&gt; or a &lt;code&gt;double&lt;/code&gt;. It might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2a226a5afd671906af81bfc5026907a68833b6" translate="yes" xml:space="preserve">
          <source>For example, suppose you have an interface like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feed7a297ad146234d8242fae2e6875af7601dfd" translate="yes" xml:space="preserve">
          <source>For example, suppose you have two MXBean interfaces like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b96eed8b9322570b8d411a7bacaa4906fe3c08d" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;IsoFields&lt;/code&gt; class contains the quarter-of-year and day-of-quarter fields. The implementation of this method in that class resolves the two fields plus the &lt;a href=&quot;chronofield#YEAR&quot;&gt;&lt;code&gt;YEAR&lt;/code&gt;&lt;/a&gt; into a complete &lt;code&gt;LocalDate&lt;/code&gt;. The resolve method will remove all three fields from the map before returning the &lt;code&gt;LocalDate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b81c7338939efbb5d98eb4eaeb30e317371878a" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;TabularType&lt;/code&gt; for a &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; might be constructed with code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbd75fecfcbea62d5180938bfee7d0a96f67fb8" translate="yes" xml:space="preserve">
          <source>For example, the ISO day-of-month always starts at 1. The largest minimum is therefore 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9954675608ba0d2447d8c70c553ce4908bf6872e" translate="yes" xml:space="preserve">
          <source>For example, the ISO day-of-month always starts at 1. The minimum is therefore 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753698f108344c2b6f822295f83686eb7deeb43a" translate="yes" xml:space="preserve">
          <source>For example, the ISO day-of-month runs from 1 to between 28 and 31. Since there is uncertainty about the maximum value, the range is not fixed. However, for the month of January, the range is always 1 to 31, thus it is fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1825874677c8efec6c434b63e4f9a58ffa2948ba" translate="yes" xml:space="preserve">
          <source>For example, the ISO day-of-month runs to between 28 and 31 days. The maximum is therefore 31.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcb8a8d31e6b5bda8c8a31339caadd463dbafdb" translate="yes" xml:space="preserve">
          <source>For example, the ISO day-of-month runs to between 28 and 31 days. The smallest maximum is therefore 28.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3126ea544624f04dc4af914a288e43e4b5e44c06" translate="yes" xml:space="preserve">
          <source>For example, the ISO month-of-year has values from 1 to 12, which fits in an &lt;code&gt;int&lt;/code&gt;. By comparison, ISO nano-of-day runs from 1 to 86,400,000,000,000 which does not fit in an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891514d228ba0a680cfae01cc75cb0c878ac816b" translate="yes" xml:space="preserve">
          <source>For example, the Japanese year &quot;Heisei 24&quot; corresponds to ISO year &quot;2012&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f057bc50d4f9cbcee2fd03e25db7ad75bc897348" translate="yes" xml:space="preserve">
          <source>For example, the ObjectName instances below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e96a62da6c4e34494e786a872f8b8a5113b965" translate="yes" xml:space="preserve">
          <source>For example, the Thai Buddhist calendar system divides time into two eras, before and after a single date. By contrast, the Japanese calendar system has one era for the reign of each Emperor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2d59c315643a0b3b1942f96a7e22778bf58b94" translate="yes" xml:space="preserve">
          <source>For example, the class below generates unique identifiers local to each thread. A thread's id is assigned the first time it invokes &lt;code&gt;ThreadId.get()&lt;/code&gt; and remains unchanged on subsequent calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd5f7b4ebe0cc41842611a133e002691579b0ee" translate="yes" xml:space="preserve">
          <source>For example, the codesource objects with the following locations and null certificates all imply the codesource with the location &quot;http://java.sun.com/classes/foo.jar&quot; and null certificates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9577516c18720a6506a145d0e8f0b0ac70992df8" translate="yes" xml:space="preserve">
          <source>For example, the effect of this option is built in: &lt;code&gt;pack.class.attribute.SourceFile=RUH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8920e276528365953f0968f14c401f25817bbf7a" translate="yes" xml:space="preserve">
          <source>For example, the following action listener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af842b0f3fef4c9e26a527cffd159eb564cb80d9" translate="yes" xml:space="preserve">
          <source>For example, the following are valid inputs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9548168ee523ea98776ac0d99dc8e2e03140ae" translate="yes" xml:space="preserve">
          <source>For example, the following call will return &lt;code&gt;&quot;Sunday&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800db53de5ef69ffa1c8bdf9c66fd2ba83b76e33" translate="yes" xml:space="preserve">
          <source>For example, the following call will return a &lt;code&gt;Map&lt;/code&gt; containing &lt;code&gt;&quot;January&quot;&lt;/code&gt; to &lt;a href=&quot;../calendar#JANUARY&quot;&gt;&lt;code&gt;Calendar.JANUARY&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&quot;Jan&quot;&lt;/code&gt; to &lt;a href=&quot;../calendar#JANUARY&quot;&gt;&lt;code&gt;Calendar.JANUARY&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&quot;February&quot;&lt;/code&gt; to &lt;a href=&quot;../calendar#FEBRUARY&quot;&gt;&lt;code&gt;Calendar.FEBRUARY&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&quot;Feb&quot;&lt;/code&gt; to &lt;a href=&quot;../calendar#FEBRUARY&quot;&gt;&lt;code&gt;Calendar.FEBRUARY&lt;/code&gt;&lt;/a&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab160cea5fa5d97b5c742b66b19a144cd1be2739" translate="yes" xml:space="preserve">
          <source>For example, the following code fragment returns the runtime &lt;code&gt;Class&lt;/code&gt; descriptor for the class named &lt;code&gt;java.lang.Thread&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfa64934fbb8d8c13e300499c0fbfd299c59fe6" translate="yes" xml:space="preserve">
          <source>For example, the following is the comparator order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579d2788523bcba78702221bcf8dfcda1fdb0cd3" translate="yes" xml:space="preserve">
          <source>For example, the following permission grants access to the com.sun.PrivateCredential owned by Subjects which have a com.sun.Principal with the name, &quot;duke&quot;. Note that although this example, as well as all the examples below, do not contain Codebase, SignedBy, or Principal information in the grant statement (for simplicity reasons), actual policy configurations should specify that information when appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da170e009e37813248dc29ce5b6b7ee536e58d5c" translate="yes" xml:space="preserve">
          <source>For example, the following will parse:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f982d151697783cd09896775b1dfd2a8059c4f1e" translate="yes" xml:space="preserve">
          <source>For example, the properties for &lt;code&gt;ConsoleHandler&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f931db20e6cd28062e3c50f185c3c6ecce4677" translate="yes" xml:space="preserve">
          <source>For example, the properties for &lt;code&gt;FileHandler&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ee2fbf03d54cbdd60a163f88386cac3ed53cb7" translate="yes" xml:space="preserve">
          <source>For example, the properties for &lt;code&gt;MemoryHandler&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f43cf1f2bf6da316757e63f6b8452206d8f683" translate="yes" xml:space="preserve">
          <source>For example, the properties for &lt;code&gt;SocketHandler&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d06c623a74187c226038a1ba49eb4b2125ca1b" translate="yes" xml:space="preserve">
          <source>For example, the properties for &lt;code&gt;StreamHandler&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d17b66104630b955178605a2279a2ac88c658" translate="yes" xml:space="preserve">
          <source>For example, this &lt;code&gt;@Target&lt;/code&gt; meta-annotation indicates that the declared type is itself a meta-annotation type. It can only be used on annotation type declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89a04f3da4efa728a7469acac726ca3cfa4b865" translate="yes" xml:space="preserve">
          <source>For example, this code allows a user to read a number from &lt;code&gt;System.in&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0aeff52d98963e9b52ef9b7492a0f9f8e38a99" translate="yes" xml:space="preserve">
          <source>For example, this method allows the number of days between two dates to be calculated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3063291fbeb8cab7d02fe3b39ad0305adadd4b7d" translate="yes" xml:space="preserve">
          <source>For example, to compute the set of last names of people in each city, where the city names are sorted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542c0e3ace7d7c931e3fca12ab5e385bf8b8c0c0" translate="yes" xml:space="preserve">
          <source>For example, to compute the set of last names of people in each city:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05452af65e15167a37042770e9c5b3da86616ac" translate="yes" xml:space="preserve">
          <source>For example, to convert 10 minutes to milliseconds, use: &lt;code&gt;TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d9e251461e5a6e353041a4a4542e479d3f2028" translate="yes" xml:space="preserve">
          <source>For example, to create a &lt;code&gt;MouseListener&lt;/code&gt; that sets the target object's &lt;code&gt;origin&lt;/code&gt; property to the incoming &lt;code&gt;MouseEvent&lt;/code&gt;'s location (that's the value of &lt;code&gt;mouseEvent.getPoint()&lt;/code&gt;) each time a mouse button is pressed, one would write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039e8b55bb061518d4b6a27396dcc8fc21604cf2" translate="yes" xml:space="preserve">
          <source>For example, to measure how long some code takes to execute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27c11303b6f84d44156eb74f65cb1fb6557f6f1" translate="yes" xml:space="preserve">
          <source>For example, to obtain a &lt;code&gt;Comparator&lt;/code&gt; that compares &lt;code&gt;Person&lt;/code&gt; objects by their last name ignoring case differences,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354ab1d14b7fe39532cb8c574202480e62f34ef8" translate="yes" xml:space="preserve">
          <source>For example, to obtain a &lt;code&gt;Comparator&lt;/code&gt; that compares &lt;code&gt;Person&lt;/code&gt; objects by their last name,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b9e3822258c48e3b16d7faa3a5376c66a4942d" translate="yes" xml:space="preserve">
          <source>For example, to print all elements of a &lt;code&gt;Vector&amp;lt;E&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0507a7d537ae9945a10e6635aaa2418e8fc20e24" translate="yes" xml:space="preserve">
          <source>For example, to sort a collection of &lt;code&gt;String&lt;/code&gt; based on the length and then case-insensitive natural ordering, the comparator can be composed using following code,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5496677e05a9fd5dfd0e6a5b8d5d4c7e0a44f20" translate="yes" xml:space="preserve">
          <source>For example, to specify the &quot;host&quot; service use of a forwardable TGT the target permission is specified as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533a0f50bf0b375e4e417e9cacef45695527dd13" translate="yes" xml:space="preserve">
          <source>For example, to specify the permission to access to the TGT to initiate a security context the permission is constructed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b342cdb19cfb253b2fc3d5084c2213b875e77218" translate="yes" xml:space="preserve">
          <source>For example, you can align numbers in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe7b4fb9a2ed77429bfbc46219b1d2c87900bad" translate="yes" xml:space="preserve">
          <source>For example, you can construct a SocketPermission instance as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911931a41db3ff2123e7246a13c4b78a0cf276f7" translate="yes" xml:space="preserve">
          <source>For example, you can print a slide presentation on US letter-sized white paper, double-sided, stapled, 20 copies to make handouts for a talk; and you could print the same slide presentation on US letter-sized transparencies, single-sided, one copy to make the actual slides for the talk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ac85d9e48f5b4a3d8639df9f4a72b7a35300d5" translate="yes" xml:space="preserve">
          <source>For example, you could implement a blocking &lt;code&gt;poll&lt;/code&gt; method (see &lt;a href=&quot;blockingqueue#poll-long-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;BlockingQueue.poll&lt;/code&gt;&lt;/a&gt;) using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcbab4aae2389893f867fa63018aa69e039b2ef" translate="yes" xml:space="preserve">
          <source>For example: com.company.package.classname. The date element is used to indicate the date the source was generated. The date element must follow the ISO 8601 standard. For example the date element would have the following value 2001-07-04T12:08:56.235-0700 which represents 2001-07-04 12:08:56 local time in the U.S. Pacific Time time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d302a6835077ac5f129f7fde727dfa42966be4" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;math#floorDiv-int-int-&quot;&gt;&lt;code&gt;floorDiv(int, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2170f0d8e4fb039d7c4dce593784b3310564d9a" translate="yes" xml:space="preserve">
          <source>For examples, see &lt;a href=&quot;math#floorMod-int-int-&quot;&gt;&lt;code&gt;floorMod(int, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97093b8a6da476bf44b7f54ca0f23866085823d" translate="yes" xml:space="preserve">
          <source>For file objects representing regular files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd0239ac79e980c77f30b8f9af1ba23162cd46a" translate="yes" xml:space="preserve">
          <source>For formatting, &lt;code&gt;DecimalFormat&lt;/code&gt; uses the ten consecutive characters starting with the localized zero digit defined in the &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; object as digits. For parsing, these digits as well as all Unicode decimal digits, as defined by &lt;a href=&quot;../lang/character#digit-char-int-&quot;&gt;&lt;code&gt;Character.digit&lt;/code&gt;&lt;/a&gt;, are recognized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff16dff24bd3a7f7ada71f36fe1fa2079304912" translate="yes" xml:space="preserve">
          <source>For formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a &lt;a href=&quot;#number&quot;&gt;number&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb6fed4a81ca53cc369192aacd8582ee4ce8e0a" translate="yes" xml:space="preserve">
          <source>For formatting, if the offset value from GMT is 0, &lt;code&gt;&quot;Z&quot;&lt;/code&gt; is produced. If the number of pattern letters is 1, any fraction of an hour is ignored. For example, if the pattern is &lt;code&gt;&quot;X&quot;&lt;/code&gt; and the time zone is &lt;code&gt;&quot;GMT+05:30&quot;&lt;/code&gt;, &lt;code&gt;&quot;+05&quot;&lt;/code&gt; is produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30762100cef30818142dda2795a16148020ed918" translate="yes" xml:space="preserve">
          <source>For formatting, the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;maxWidth&lt;/code&gt; are used to determine the number of characters to format. If they are equal then the format is fixed width. If the value of the field is within the range of the &lt;code&gt;baseValue&lt;/code&gt; using &lt;code&gt;width&lt;/code&gt; characters then the reduced value is formatted otherwise the value is truncated to fit &lt;code&gt;maxWidth&lt;/code&gt;. The rightmost characters are output to match the width, left padding with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b240043433660c7e11e9eaf3757b9adfa7c62ee" translate="yes" xml:space="preserve">
          <source>For general argument types, the precision is the maximum number of characters to be written to the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac3bc0ccd869fb439d7cb91a237f9f63e1b3d00" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method is not static, but its behavior does not depend on the instance on which it is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdf89fbfae740196b5bdae01ce560a68c803bc1" translate="yes" xml:space="preserve">
          <source>For i=1..K, Di = Ai</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b9b63237aaa55086913ffd8a2b891202973f33" translate="yes" xml:space="preserve">
          <source>For i=1..N, Ti is adaptable to Aj, where j=i+k</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d9dde9e53f112cf0672b2c57e8e527ae4c2cfc" translate="yes" xml:space="preserve">
          <source>For ignorable characters, the first rule must start with a relation (the examples we have used above are really fragments; &quot;a &amp;lt; b&quot; really should be &quot;&amp;lt; a &amp;lt; b&quot;). If, however, the first relation is not &quot;&amp;lt;&quot;, then all the all text-arguments up to the first &quot;&amp;lt;&quot; are ignorable. For example, &quot;, - &amp;lt; a &amp;lt; b&quot; makes &quot;-&quot; an ignorable character, as we saw earlier in the word &quot;black-birds&quot;. In the samples for different languages, you see that most accents are ignorable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999a3b10953e4e7b359f0edd758b57b264e2b633" translate="yes" xml:space="preserve">
          <source>For implementations where multiple copies are produced by the interpreter with only a single pass over the data, the final value of the JobKOctetsProcessed attribute must be equal to the value of the &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt; attribute. For implementations where multiple copies are produced by the interpreter by processing the data for each copy, the final value must be a multiple of the value of the &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82a0da809e48b52c3793077a5499e2f62e6d228" translate="yes" xml:space="preserve">
          <source>For instance eth0:1 will be a subinterface to eth0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cc51be0ad57f631b9b037d5a5c1ec3cc09b637" translate="yes" xml:space="preserve">
          <source>For method and constructor parameters, the name of each parameter must be distinct from the names of all other parameters of the same executable. If the original source names are not available, an implementation may synthesize names subject to the distinctness requirement above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa481bebd670386bf813c89465c530eee7a4d3e" translate="yes" xml:space="preserve">
          <source>For methods that can throw &lt;a href=&quot;instancenotfoundexception&quot;&gt;&lt;code&gt;InstanceNotFoundException&lt;/code&gt;&lt;/a&gt;, this exception is thrown for a non-existent MBean, regardless of permissions. This is because a non-existent MBean has no &lt;code&gt;className&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76774b41448928d2dea1d49da68288f4b72f5eb8" translate="yes" xml:space="preserve">
          <source>For methods that return a textual representation as output value, the first form, i.e. a dotted-quad string, is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7ab1ce5e7d929aee2f17a0a3acfac53a1554a0" translate="yes" xml:space="preserve">
          <source>For methods that return a textual representation as output value, the full form is used. Inet6Address will return the full form because it is unambiguous when used in combination with other textual data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f24aa23e5872e59ccfbd9ed068b2210966f6b77" translate="yes" xml:space="preserve">
          <source>For more details on declaring service providers, and the JAR format in general, see the  JAR File Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643a9476ed6ecbe548cc662cd1b19fe7604623bf" translate="yes" xml:space="preserve">
          <source>For more details on declaring service providers, and the JAR format in general, see the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html&quot;&gt; JAR File Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8a4f018bd5638b094a31e219c904b99c0f2995" translate="yes" xml:space="preserve">
          <source>For more developer information on how to use these interfaces, including information on how to design &lt;code&gt;Key&lt;/code&gt; classes for hardware devices, please refer to the cryptographic provider developer guide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e3cc80113990862f7e618b47a2e12565303132" translate="yes" xml:space="preserve">
          <source>For more developer information on how to use these interfaces, including information on how to design &lt;code&gt;Key&lt;/code&gt; classes for hardware devices, please refer to these cryptographic provider developer guides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fda7de9da51760582b2ea855ba85a39fd18514" translate="yes" xml:space="preserve">
          <source>For more flexible initialization, please see &lt;a href=&quot;keymanagerfactory#init-javax.net.ssl.ManagerFactoryParameters-&quot;&gt;&lt;code&gt;init(ManagerFactoryParameters)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1200e59956243f9672ac2eced7edb97e653f86" translate="yes" xml:space="preserve">
          <source>For more flexible initialization, please see &lt;a href=&quot;trustmanagerfactory#init-javax.net.ssl.ManagerFactoryParameters-&quot;&gt;&lt;code&gt;init(ManagerFactoryParameters)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd06cc6e7479451e3716a9760936425212c4e1f" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;SecurityManager&lt;/code&gt; changes made in the JDK and advice regarding porting of 1.1-style security managers, see the security documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b48c85d76a708f58e3b1d3720fdc1490243108d" translate="yes" xml:space="preserve">
          <source>For more information about introspection and design patterns, please consult the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&quot;&gt;JavaBeans&amp;trade; specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a99e9d7949612b1e41eea534d474e4c6c23dbb" translate="yes" xml:space="preserve">
          <source>For more information about the operation of the built-in JPEG plug-ins, see the JPEG metadata format specification and usage notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3811c966c9c719a30361e2707e6b04cc1227e5b" translate="yes" xml:space="preserve">
          <source>For more information about the operation of the standard JPEG plug-in, see the JPEG metadata format specification and usage notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4eb80e08fdbf7afe2002f9657ceb53a408645b" translate="yes" xml:space="preserve">
          <source>For more information about using resource bundles with the XMLEncoder, see http://java.sun.com/products/jfc/tsc/articles/persistence4/#i18n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578e9a2249248ae3a0b9437101f71f2e9428f7e5" translate="yes" xml:space="preserve">
          <source>For more information including algorithms used to create &lt;code&gt;UUID&lt;/code&gt;s, see &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot;&gt; &lt;i&gt;RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace&lt;/i&gt;&lt;/a&gt;, section 4.2 &quot;Algorithms for Creating a Time-Based UUID&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa58ed474d6ceaf5b1697038f1320fe3f16736ac" translate="yes" xml:space="preserve">
          <source>For more information you might also want to check out &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/persistence3&quot;&gt;Long Term Persistence of JavaBeans Components: XML Schema&lt;/a&gt;, an article in &lt;em&gt;The Swing Connection.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beed59bdd4e48ec33361f1a310f9787e27db5082" translate="yes" xml:space="preserve">
          <source>For more information you might also want to check out &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/persistence4&quot;&gt;Using XMLEncoder&lt;/a&gt;, an article in &lt;em&gt;The Swing Connection.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3a8126f411e59d515eedaa4745571aeed4e1e7" translate="yes" xml:space="preserve">
          <source>For more information, refer to Java Plug-In's guides,  Applet Security Basics and  usePolicy Permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635ee25f145a41ce7f17a98821b60a12cf6621b7" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe9cc110a33a9ed5dac1d410fccea21446d9ecc" translate="yes" xml:space="preserve">
          <source>For more sophisticated patterns, you can use a &lt;code&gt;ChoiceFormat&lt;/code&gt; to produce correct forms for singular and plural:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d899f3432679880d6489926be6b9f61a595cb6d" translate="yes" xml:space="preserve">
          <source>For more specialized uses, a connector client can be created by directly instantiating a class that implements the &lt;a href=&quot;jmxconnector&quot;&gt;&lt;code&gt;JMXConnector&lt;/code&gt;&lt;/a&gt; interface, for example the class &lt;a href=&quot;rmi/rmiconnector&quot;&gt;&lt;code&gt;RMIConnector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e257e80e52e23bb1f5097e9f135dc6baef407e33" translate="yes" xml:space="preserve">
          <source>For most operating systems, mapping a file into memory is more expensive than reading or writing a few tens of kilobytes of data via the usual &lt;a href=&quot;filechannel#read-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;filechannel#write-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; methods. From the standpoint of performance it is generally only worth mapping relatively large files into memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d47aef9dfdaffead563198406171ed3ff9a633" translate="yes" xml:space="preserve">
          <source>For most readers, which only accept input from an &lt;code&gt;ImageInputStream&lt;/code&gt;, a single-element array containing &lt;code&gt;ImageInputStream.class&lt;/code&gt; should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0737e1146c46eaedda574254b184a05ef178c0d8" translate="yes" xml:space="preserve">
          <source>For most writers, which only output to an &lt;code&gt;ImageOutputStream&lt;/code&gt;, a single-element array containing &lt;code&gt;ImageOutputStream.class&lt;/code&gt; should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8141e1359276458bda25227189f84a7dc2c470e8" translate="yes" xml:space="preserve">
          <source>For mutable sources, arbitrary and non-deterministic behavior may occur if the source is structurally interfered with (elements added, replaced, or removed) between the time that the Spliterator binds to its data source and the end of traversal. For example, such interference will produce arbitrary, non-deterministic results when using the &lt;code&gt;java.util.stream&lt;/code&gt; framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282aa7c260e2aae49eeff8198a51995a4a15b876" translate="yes" xml:space="preserve">
          <source>For non-concurrent collectors, any result returned from the result supplier, accumulator, or combiner functions must be serially thread-confined. This enables collection to occur in parallel without the &lt;code&gt;Collector&lt;/code&gt; needing to implement any additional synchronization. The reduction implementation must manage that the input is properly partitioned, that partitions are processed in isolation, and combining happens only after accumulation is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2438b72799366ac407374d286bd01f0c4166089c" translate="yes" xml:space="preserve">
          <source>For objects of type &lt;code&gt;Class,&lt;/code&gt; by executing a synchronized static method of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2393833e8c76843229b97d3096ce8ec39cd225c2" translate="yes" xml:space="preserve">
          <source>For once-off notifications, the notification is delivered immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01da6b90e46d6f44e5d813ee9681cba49cc8a0" translate="yes" xml:space="preserve">
          <source>For options that take a particular type as a parameter, getOption(int) will return the parameter's value, else it will return java.lang.Boolean(false):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0acc100e32fc6234c0c7457cf6dc7e5450a156" translate="yes" xml:space="preserve">
          <source>For ordered streams, the selection of distinct elements is stable (for duplicated elements, the element appearing first in the encounter order is preserved.) For unordered streams, no stability guarantees are made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001abdbdf15e42842cf7a21df9e3b1a4e78dc160" translate="yes" xml:space="preserve">
          <source>For ordered streams, the sort is stable. For unordered streams, no stability guarantees are made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc3c03d940589c6746e4c70b9692c35da706494" translate="yes" xml:space="preserve">
          <source>For overview, architecture, and tutorial documentation, please see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bfdf98afbbde02f03df613f17f462dca795146" translate="yes" xml:space="preserve">
          <source>For overviews, tutorials, examples, and guides, please see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86ceb74f740cac0f77b81c7bf321ec528a40fdb" translate="yes" xml:space="preserve">
          <source>For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation. If the action modifies shared state, it is responsible for providing the required synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fc793c5384edf9a979ea96ace2f88d94083d6a" translate="yes" xml:space="preserve">
          <source>For parallel stream pipelines, this operation does &lt;em&gt;not&lt;/em&gt; guarantee to respect the encounter order of the stream, as doing so would sacrifice the benefit of parallelism. For any given element, the action may be performed at whatever time and in whatever thread the library chooses. If the action accesses shared state, it is responsible for providing the required synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a022d17d72acbe4095f5d82c97b6b3416972a03" translate="yes" xml:space="preserve">
          <source>For parallel streams, relaxing the ordering constraint can sometimes enable more efficient execution. Certain aggregate operations, such as filtering duplicates (&lt;code&gt;distinct()&lt;/code&gt;) or grouped reductions (&lt;code&gt;Collectors.groupingBy()&lt;/code&gt;) can be implemented more efficiently if ordering of elements is not relevant. Similarly, operations that are intrinsically tied to encounter order, such as &lt;code&gt;limit()&lt;/code&gt;, may require buffering to ensure proper ordering, undermining the benefit of parallelism. In cases where the stream has an encounter order, but the user does not particularly &lt;em&gt;care&lt;/em&gt; about that encounter order, explicitly de-ordering the stream with &lt;a href=&quot;basestream#unordered--&quot;&gt;&lt;code&gt;unordered()&lt;/code&gt;&lt;/a&gt; may improve parallel performance for some stateful or terminal operations. However, most stream pipelines, such as the &quot;sum of weight of blocks&quot; example above, still parallelize efficiently even under ordering constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c570a798086e94379323b4fd869f2a44d713a877" translate="yes" xml:space="preserve">
          <source>For parsing with the abbreviated year pattern (&quot;y&quot; or &quot;yy&quot;), &lt;code&gt;SimpleDateFormat&lt;/code&gt; must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the &lt;code&gt;SimpleDateFormat&lt;/code&gt; instance is created. For example, using a pattern of &quot;MM/dd/yy&quot; and a &lt;code&gt;SimpleDateFormat&lt;/code&gt; instance created on Jan 1, 1997, the string &quot;01/11/12&quot; would be interpreted as Jan 11, 2012 while the string &quot;05/04/64&quot; would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by &lt;a href=&quot;../lang/character#isDigit-char-&quot;&gt;&lt;code&gt;Character.isDigit(char)&lt;/code&gt;&lt;/a&gt;, will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, &quot;-1&quot;), is interpreted literally. So &quot;01/02/3&quot; or &quot;01/02/003&quot; are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, &quot;01/02/-3&quot; is parsed as Jan 2, 4 BC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a764f5159f9e22afe179e63808190284e10eb12" translate="yes" xml:space="preserve">
          <source>For parsing, &lt;a href=&quot;#rfc822timezone&quot;&gt;RFC 822 time zones&lt;/a&gt; are also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baabe17164e63bd44c3000ec7a5be5ff380b1df0" translate="yes" xml:space="preserve">
          <source>For parsing, &lt;a href=&quot;#timezone&quot;&gt;general time zones&lt;/a&gt; are also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac8c5ed0886874a6aa7b271e61c544b5d8be575" translate="yes" xml:space="preserve">
          <source>For parsing, &lt;code&gt;&quot;Z&quot;&lt;/code&gt; is parsed as the UTC time zone designator. &lt;a href=&quot;#timezone&quot;&gt;General time zones&lt;/a&gt; are &lt;em&gt;not&lt;/em&gt; accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6618bdd467f78f58afb023c88a8cc4afa3e44a" translate="yes" xml:space="preserve">
          <source>For parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern &quot;MM/dd/yyyy&quot;, &quot;01/11/12&quot; parses to Jan 11, 12 A.D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c001c6ebfd8657baca1812a75f6899a1d0dbf06" translate="yes" xml:space="preserve">
          <source>For periodic notifications, the first notification is delivered immediately and the subsequent ones are spaced as specified by the period parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f821990434cda12a37c22f0b70c7a915410fdb2" translate="yes" xml:space="preserve">
          <source>For primitive arrays the &lt;a href=&quot;arraytype#getElementOpenType--&quot;&gt;&lt;code&gt;getElementOpenType()&lt;/code&gt;&lt;/a&gt; method returns the &lt;a href=&quot;simpletype&quot;&gt;&lt;code&gt;SimpleType&lt;/code&gt;&lt;/a&gt; corresponding to the wrapper type of the primitive type of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad66ae8d5664bf576a41f20650fa30d06e9cd67" translate="yes" xml:space="preserve">
          <source>For purposes of concurrency control, a Context operation that returns a &lt;code&gt;NamingEnumeration&lt;/code&gt; is not considered to have completed while the enumeration is still in use, or while any referrals generated by that operation are still being followed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af3b8b702cec551453071655b308d7ec1304eee" translate="yes" xml:space="preserve">
          <source>For retransformations, the retransformation incapable transformers are not called, instead the result of the previous transformation is reused. In all other cases, this method is called. Within each of these groupings, transformers are called in the order registered. Native transformers are provided by the &lt;code&gt;ClassFileLoadHook&lt;/code&gt; event in the Java Virtual Machine Tool Interface).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaf586cff8e4109d1052cda9cf2048cf817c051" translate="yes" xml:space="preserve">
          <source>For security reasons, the same named values may not be visible across different access control contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc2c1eacdb9df0b1e19143b671c79f00c7d88d8" translate="yes" xml:space="preserve">
          <source>For security reasons, this option may imply the &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;LinkOption.NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; option. In other words, if the option is present when opening an existing file that is a symbolic link then it may fail (by throwing &lt;a href=&quot;../../io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e8cccc24afd200b00b6d417f9f7eb38448e719" translate="yes" xml:space="preserve">
          <source>For sequential streams, the presence or absence of an encounter order does not affect performance, only determinism. If a stream is ordered, repeated execution of identical stream pipelines on an identical source will produce an identical result; if it is not ordered, repeated execution might produce different results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bb61cb564ead626c2bde55cc602f10668817ef" translate="yes" xml:space="preserve">
          <source>For service formatted print data, the print data representation class is typically one of the following (although other representation classes are permitted). Nested classes inside class DocFlavor declare predefined static constant DocFlavor objects for these example doc flavors; class DocFlavor's constructor can be used to create an arbitrary doc flavor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1d6d31248f3efa59038d05d967fd0679416a5d" translate="yes" xml:space="preserve">
          <source>For simple applications requiring only line-oriented reading, use &lt;code&gt;&lt;a href=&quot;console#readLine-java.lang.String-java.lang.Object...-&quot;&gt;&lt;code&gt;readLine(java.lang.String, java.lang.Object...)&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10110bc1b4d00e0dc3d5198a1f41849e4846b830" translate="yes" xml:space="preserve">
          <source>For simple stand-alone Java applications, a typical way to write a line of output data is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ab4d80904580e41702f8742bdd05a4e07d7c29" translate="yes" xml:space="preserve">
          <source>For situations where a set of algorithm-specific parameters already exists (e.g., so-called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95eedb101c336b80a564e4cdfc54df965d97f306" translate="yes" xml:space="preserve">
          <source>For situations where a set of algorithm-specific parameters already exists, there are two &lt;a href=&quot;keygenerator#init-java.security.spec.AlgorithmParameterSpec-&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; methods that have an &lt;code&gt;AlgorithmParameterSpec&lt;/code&gt; argument. One also has a &lt;code&gt;SecureRandom&lt;/code&gt; argument, while the other uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness (or a system-provided source of randomness if none of the installed providers supply a SecureRandom implementation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85dbc709a9f2ba6465c3e2a6e42e17a0cb8fa6b" translate="yes" xml:space="preserve">
          <source>For sockets accepted from a ServerSocket, this must be done by calling &lt;a href=&quot;serversocket#setReceiveBufferSize-int-&quot;&gt;&lt;code&gt;ServerSocket.setReceiveBufferSize(int)&lt;/code&gt;&lt;/a&gt; before the ServerSocket is bound to a local address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d9e449f3c30af13b7c3df63d138eee7bd155c9" translate="yes" xml:space="preserve">
          <source>For some &lt;code&gt;CertStore&lt;/code&gt; types, the resulting &lt;code&gt;Collection&lt;/code&gt; may not contain &lt;b&gt;all&lt;/b&gt; of the &lt;code&gt;CRL&lt;/code&gt;s that match the selector. For instance, an LDAP &lt;code&gt;CertStore&lt;/code&gt; may not search all entries in the directory. Instead, it may just search entries that are likely to contain the &lt;code&gt;CRL&lt;/code&gt;s it is looking for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2bd5d4910b94aed8dde240f220cd40623a6895" translate="yes" xml:space="preserve">
          <source>For some &lt;code&gt;CertStore&lt;/code&gt; types, the resulting &lt;code&gt;Collection&lt;/code&gt; may not contain &lt;b&gt;all&lt;/b&gt; of the &lt;code&gt;Certificate&lt;/code&gt;s that match the selector. For instance, an LDAP &lt;code&gt;CertStore&lt;/code&gt; may not search all entries in the directory. Instead, it may just search entries that are likely to contain the &lt;code&gt;Certificate&lt;/code&gt;s it is looking for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5305c849ef834d436ddf738002d87d9d625028c" translate="yes" xml:space="preserve">
          <source>For some document formats (such as &lt;code&gt;&quot;application/postscript&quot;&lt;/code&gt;), the desired orientation of the print-stream pages is specified within the document data. This information is generated by a device driver prior to the submission of the print job. Other document formats (such as &lt;code&gt;&quot;text/plain&quot;&lt;/code&gt;) do not include the notion of desired orientation within the document data. In the latter case it is possible for the printer to bind the desired orientation to the document data after it has been submitted. It is expected that a printer would only support the OrientationRequested attribute for some document formats (e.g., &lt;code&gt;&quot;text/plain&quot;&lt;/code&gt; or &lt;code&gt;&quot;text/html&quot;&lt;/code&gt;) but not others (e.g. &lt;code&gt;&quot;application/postscript&quot;&lt;/code&gt;). This is no different from any other job template attribute, since a print job can always impose constraints among the values of different job template attributes. However, a special mention is made here since it is very likely that a printer will support the OrientationRequested attribute for only a subset of the supported document formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad206ccade197d1c3cdd9d97321b934f1f258a2" translate="yes" xml:space="preserve">
          <source>For spliterators that report a characteristic of &lt;code&gt;IMMUTABLE&lt;/code&gt; or &lt;code&gt;CONCURRENT&lt;/code&gt;, or that are &lt;a href=&quot;../spliterator#binding&quot;&gt;late-binding&lt;/a&gt;, it is likely more efficient to use &lt;a href=&quot;streamsupport#doubleStream-java.util.Spliterator.OfDouble-boolean-&quot;&gt;&lt;code&gt;doubleStream(java.util.Spliterator.OfDouble, boolean)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d39936197a6f658bf70a8886338926a7e07f8f" translate="yes" xml:space="preserve">
          <source>For spliterators that report a characteristic of &lt;code&gt;IMMUTABLE&lt;/code&gt; or &lt;code&gt;CONCURRENT&lt;/code&gt;, or that are &lt;a href=&quot;../spliterator#binding&quot;&gt;late-binding&lt;/a&gt;, it is likely more efficient to use &lt;a href=&quot;streamsupport#intStream-java.util.Spliterator.OfInt-boolean-&quot;&gt;&lt;code&gt;intStream(java.util.Spliterator.OfInt, boolean)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fb5d2059249e6adb6fc28ea0b2d832633b253a" translate="yes" xml:space="preserve">
          <source>For spliterators that report a characteristic of &lt;code&gt;IMMUTABLE&lt;/code&gt; or &lt;code&gt;CONCURRENT&lt;/code&gt;, or that are &lt;a href=&quot;../spliterator#binding&quot;&gt;late-binding&lt;/a&gt;, it is likely more efficient to use &lt;a href=&quot;streamsupport#longStream-java.util.Spliterator.OfLong-boolean-&quot;&gt;&lt;code&gt;longStream(java.util.Spliterator.OfLong, boolean)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4160b6cd117fad4ed84680b4ead6ade57d473b25" translate="yes" xml:space="preserve">
          <source>For spliterators that report a characteristic of &lt;code&gt;IMMUTABLE&lt;/code&gt; or &lt;code&gt;CONCURRENT&lt;/code&gt;, or that are &lt;a href=&quot;../spliterator#binding&quot;&gt;late-binding&lt;/a&gt;, it is likely more efficient to use &lt;a href=&quot;streamsupport#stream-java.util.Spliterator-boolean-&quot;&gt;&lt;code&gt;stream(java.util.Spliterator, boolean)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f58254cdff2a06f3d6d9734d80dbfafad4e87f" translate="yes" xml:space="preserve">
          <source>For strict parsing, the number of characters allowed by &lt;code&gt;width&lt;/code&gt; to &lt;code&gt;maxWidth&lt;/code&gt; are parsed. For lenient parsing, the number of characters must be at least 1 and less than 10. If the number of digits parsed is equal to &lt;code&gt;width&lt;/code&gt; and the value is positive, the value of the field is computed to be the first number greater than or equal to the &lt;code&gt;baseValue&lt;/code&gt; with the same least significant characters, otherwise the value parsed is the field value. This allows a reduced value to be entered for values in range of the baseValue and width and absolute values can be entered for values outside the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df93252e1ef16c3279772a8887b08c66190d6d6" translate="yes" xml:space="preserve">
          <source>For systems that do not support federation, the name arguments (in either &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; forms) and the names returned in &lt;code&gt;NamingEnumeration&lt;/code&gt; may be names in their own namespace rather than names in a composite namespace, at the discretion of the service provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c36c0d5e03fbbc8eeeb250c08d04988226b782f" translate="yes" xml:space="preserve">
          <source>For systems that support federation, &lt;code&gt;String&lt;/code&gt; name arguments to &lt;code&gt;Context&lt;/code&gt; methods are composite names. Name arguments that are instances of &lt;code&gt;CompositeName&lt;/code&gt; are treated as composite names, while &lt;code&gt;Name&lt;/code&gt; arguments that are not instances of &lt;code&gt;CompositeName&lt;/code&gt; are treated as compound names (which might be instances of &lt;code&gt;CompoundName&lt;/code&gt; or other implementations of compound names). This allows the results of &lt;code&gt;NameParser.parse()&lt;/code&gt; to be used as arguments to the &lt;code&gt;Context&lt;/code&gt; methods. Prior to JNDI 1.2, all name arguments were treated as composite names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f935a46a38882498b2fd69c4831dee68e2e937c5" translate="yes" xml:space="preserve">
          <source>For target values which will be frequently updated, consider using a &lt;a href=&quot;volatilecallsite&quot;&gt;volatile call site&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a529682b90dbb4f21872bf4c556169d936d61f" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getAttribute-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, attribute, name, &quot;getAttribute&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbaf08a3d47f1c0d9927806eb60a1f290a58c7b" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getAttributes-javax.management.ObjectName-java.lang.String:A-&quot;&gt;&lt;code&gt;getAttributes&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;getAttribute&quot;)&lt;/code&gt;&lt;/a&gt;. Additionally, for each attribute &lt;em&gt;a&lt;/em&gt; in the &lt;a href=&quot;attributelist&quot;&gt;&lt;code&gt;AttributeList&lt;/code&gt;&lt;/a&gt;, if the caller's permissions do not imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, &lt;em&gt;a&lt;/em&gt;, name, &quot;getAttribute&quot;)&lt;/code&gt;&lt;/a&gt;, the MBean server will behave as if that attribute had not been in the supplied list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf51b6429c6774bbbbb436da1863834e3f600b2e" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getClassLoader-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getClassLoader&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, loaderName,
 &quot;getClassLoader&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe5e86cb960b8bf74a81e8cf6836ae546034489" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getClassLoaderFor-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getClassLoaderFor&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, mbeanName,
 &quot;getClassLoaderFor&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13aa3f80a8c0aa789c154b81017939d57a4df0e" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getClassLoaderRepository--&quot;&gt;&lt;code&gt;getClassLoaderRepository&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(null, null, null, &quot;getClassLoaderRepository&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36aa2847328675e1fd0ef997bc609841c5ffdba8" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getDomains--&quot;&gt;&lt;code&gt;getDomains&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(null, null, null, &quot;getDomains&quot;)&lt;/code&gt;&lt;/a&gt;. Additionally, for each domain &lt;var&gt;d&lt;/var&gt; in the returned array, if the caller's permissions do not imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(null, null, new ObjectName(&quot;&lt;var&gt;d&lt;/var&gt;:x=x&quot;),
 &quot;getDomains&quot;)&lt;/code&gt;&lt;/a&gt;, the domain is eliminated from the array. Here, &lt;code&gt;x=x&lt;/code&gt; is any &lt;var&gt;key=value&lt;/var&gt; pair, needed to satisfy ObjectName's constructor but not otherwise relevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ded60bc9272f51bebab45845bcfea544ce03dd" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;getMBeanInfo&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc22db4e65eb35d8c1286bbd27476f8bfe46541" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#getObjectInstance-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getObjectInstance&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;getObjectInstance&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d65efe8a2194085110664d672435aca72c22b0c" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#invoke-javax.management.ObjectName-java.lang.String-java.lang.Object:A-java.lang.String:A-&quot;&gt;&lt;code&gt;invoke&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, operationName, name, &quot;invoke&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5ec4bf97218bf65b28d8302d714f45e4025fe7" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#isInstanceOf-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;isInstanceOf&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;isInstanceOf&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858b78f3418d32b14c78d61a0f9406ea6c007add" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#queryMBeans-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryMBeans&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(null, null, null, &quot;queryMBeans&quot;)&lt;/code&gt;&lt;/a&gt;. Additionally, for each MBean &lt;em&gt;n&lt;/em&gt; that matches &lt;code&gt;name&lt;/code&gt;, if the caller's permissions do not imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, &lt;em&gt;n&lt;/em&gt;, &quot;queryMBeans&quot;)&lt;/code&gt;&lt;/a&gt;, the MBean server will behave as if that MBean did not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec1a6bbead7c891292d17ad2571fba7958073a8" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#queryNames-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryNames&lt;/code&gt;&lt;/a&gt; method, the checks are the same as for &lt;code&gt;queryMBeans&lt;/code&gt; except that &lt;code&gt;&quot;queryNames&quot;&lt;/code&gt; is used instead of &lt;code&gt;&quot;queryMBeans&quot;&lt;/code&gt; in the &lt;code&gt;MBeanPermission&lt;/code&gt; objects. Note that a &lt;code&gt;&quot;queryMBeans&quot;&lt;/code&gt; permission implies the corresponding &lt;code&gt;&quot;queryNames&quot;&lt;/code&gt; permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd26c7a9cbf6a5c71bccc701e255f8feaa4c4fff" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#registerMBean-java.lang.Object-javax.management.ObjectName-&quot;&gt;&lt;code&gt;registerMBean&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;registerMBean&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5fa7717acc4a5f69b8a3ba980fc0b65552537b" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#setAttribute-javax.management.ObjectName-javax.management.Attribute-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, attrName, name, &quot;setAttribute&quot;)&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;attrName&lt;/code&gt; is &lt;a href=&quot;attribute#getName--&quot;&gt;&lt;code&gt;attribute.getName()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a90e1d8dab00350d546cff27eec4811d28de3f6" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#setAttributes-javax.management.ObjectName-javax.management.AttributeList-&quot;&gt;&lt;code&gt;setAttributes&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;setAttribute&quot;)&lt;/code&gt;&lt;/a&gt;. Additionally, for each attribute &lt;em&gt;a&lt;/em&gt; in the &lt;a href=&quot;attributelist&quot;&gt;&lt;code&gt;AttributeList&lt;/code&gt;&lt;/a&gt;, if the caller's permissions do not imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, &lt;em&gt;a&lt;/em&gt;, name, &quot;setAttribute&quot;)&lt;/code&gt;&lt;/a&gt;, the MBean server will behave as if that attribute had not been in the supplied list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498e8bad40ab2aba1376c2975dbe1109a057e4b5" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;mbeanserver#unregisterMBean-javax.management.ObjectName-&quot;&gt;&lt;code&gt;unregisterMBean&lt;/code&gt;&lt;/a&gt; method, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name, &quot;unregisterMBean&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158c487d95ccee5e697a4a0b3019a2af7484037b" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;addNotificationListener&lt;/code&gt; methods, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name,
 &quot;addNotificationListener&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587aaae3639acfe81cc64afdee6d0ade23c7b75b" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;createMBean&lt;/code&gt; methods, the caller's permissions must imply the permissions needed by the equivalent &lt;code&gt;instantiate&lt;/code&gt; followed by &lt;code&gt;registerMBean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734e386c7b6f7d6551a6fee63ca653f21ab334bd" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;instantiate&lt;/code&gt; methods, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, null, &quot;instantiate&quot;)&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;className&lt;/code&gt; is the name of the class which is to be instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f05a461e498d5392d695eac6a4d13e36407ae8" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;removeNotificationListener&lt;/code&gt; methods, the caller's permissions must imply &lt;a href=&quot;mbeanpermission#MBeanPermission-java.lang.String-java.lang.String-javax.management.ObjectName-java.lang.String-&quot;&gt;&lt;code&gt;MBeanPermission(className, null, name,
 &quot;removeNotificationListener&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9271dae0fba74ef21f22433d478a297260a46d6" translate="yes" xml:space="preserve">
          <source>For the assertion &quot;someCount=127&quot;, for example, &lt;code&gt;attr&lt;/code&gt; is &quot;someCount&quot; and &lt;code&gt;value&lt;/code&gt; is &quot;127&quot;. The provider determines, based on the attribute ID (&quot;someCount&quot;) (and possibly its schema), that the attribute's value is an integer. It then parses the string &quot;127&quot; appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e323244daf1540708498ed48a430fbf93176610a" translate="yes" xml:space="preserve">
          <source>For the deprecated &lt;code&gt;deserialize&lt;/code&gt; methods, the required permissions are the same as for the methods that replace them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46aca6eab86f2b8c52afd99c9d142dfe56791c8" translate="yes" xml:space="preserve">
          <source>For the floating-point conversions &lt;code&gt;'a'&lt;/code&gt;, &lt;code&gt;'A'&lt;/code&gt;, &lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, and &lt;code&gt;'f'&lt;/code&gt; the precision is the number of digits after the radix point. If the conversion is &lt;code&gt;'g'&lt;/code&gt; or &lt;code&gt;'G'&lt;/code&gt;, then the precision is the total number of digits in the resulting magnitude after rounding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06aaf863b78d2db68b84de64f043b5884e2a38d6" translate="yes" xml:space="preserve">
          <source>For the mathematically inclined, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd365d472dc61c689cd01391bb26b289a209fa1a" translate="yes" xml:space="preserve">
          <source>For the methods that do not take an explicit source name and method name, the Logging framework will make a &quot;best effort&quot; to determine which class and method called into the logging method. However, it is important to realize that this automatically inferred information may only be approximate (or may even be quite wrong!). Virtual machines are allowed to do extensive optimizations when JITing and may entirely remove stack frames, making it impossible to reliably locate the calling class and method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e212e3a9074256ce77a7e927e229b849e01470" translate="yes" xml:space="preserve">
          <source>For the purpose of loading, a service is represented by a single type, that is, a single interface or abstract class. (A concrete class can be used, but this is not recommended.) A provider of a given service contains one or more concrete classes that extend this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420e1533712c545c003744acf9162a0f799d5639" translate="yes" xml:space="preserve">
          <source>For the reverse process, when an object is bound into the namespace, JNDI provides &lt;em&gt;state factories&lt;/em&gt;. Continuing with the printer example, suppose the printer object is updated and rebound:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2ddad0a154f707a981a1a5aae2c41c34d69c2c" translate="yes" xml:space="preserve">
          <source>For the sake of brevity and clarity, pseudo-code is used throughout the descriptions of &lt;code&gt;BigDecimal&lt;/code&gt; methods. The pseudo-code expression &lt;code&gt;(i + j)&lt;/code&gt; is shorthand for &quot;a &lt;code&gt;BigDecimal&lt;/code&gt; whose value is that of the &lt;code&gt;BigDecimal&lt;/code&gt;&lt;code&gt;i&lt;/code&gt; added to that of the &lt;code&gt;BigDecimal&lt;/code&gt;&lt;code&gt;j&lt;/code&gt;.&quot; The pseudo-code expression &lt;code&gt;(i == j)&lt;/code&gt; is shorthand for &quot;&lt;code&gt;true&lt;/code&gt; if and only if the &lt;code&gt;BigDecimal&lt;/code&gt;&lt;code&gt;i&lt;/code&gt; represents the same value as the &lt;code&gt;BigDecimal&lt;/code&gt;&lt;code&gt;j&lt;/code&gt;.&quot; Other pseudo-code expressions are interpreted similarly. Square brackets are used to represent the particular &lt;code&gt;BigInteger&lt;/code&gt; and scale pair defining a &lt;code&gt;BigDecimal&lt;/code&gt; value; for example [19, 2] is the &lt;code&gt;BigDecimal&lt;/code&gt; numerically equal to 0.19 having a scale of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e36c82a3b0dbeb638b77cfd214bb7c619f87cb" translate="yes" xml:space="preserve">
          <source>For the sake of brevity and clarity, pseudo-code is used throughout the descriptions of BigInteger methods. The pseudo-code expression &lt;code&gt;(i + j)&lt;/code&gt; is shorthand for &quot;a BigInteger whose value is that of the BigInteger &lt;code&gt;i&lt;/code&gt; plus that of the BigInteger &lt;code&gt;j&lt;/code&gt;.&quot; The pseudo-code expression &lt;code&gt;(i == j)&lt;/code&gt; is shorthand for &quot;&lt;code&gt;true&lt;/code&gt; if and only if the BigInteger &lt;code&gt;i&lt;/code&gt; represents the same value as the BigInteger &lt;code&gt;j&lt;/code&gt;.&quot; Other pseudo-code expressions are interpreted similarly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6421651edc95497cb158a89700f5d65270e20e34" translate="yes" xml:space="preserve">
          <source>For the segment from 1972-11-03 (exact boundary discussed below) until further notice, the consensus international time scale is UTC (with leap seconds). In this segment, the Java Time-Scale is identical to &lt;a href=&quot;http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/&quot;&gt;UTC-SLS&lt;/a&gt;. This is identical to UTC on days that do not have a leap second. On days that do have a leap second, the leap second is spread equally over the last 1000 seconds of the day, maintaining the appearance of exactly 86400 seconds per day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1219d8605bba4589bebfd58c531fef13fd1ec85d" translate="yes" xml:space="preserve">
          <source>For the segment prior to 1972-11-03, extending back arbitrarily far, the consensus international time scale is defined to be UT1, applied proleptically, which is equivalent to the (mean) solar time on the prime meridian (Greenwich). In this segment, the Java Time-Scale is identical to the consensus international time scale. The exact boundary between the two segments is the instant where UT1 = UTC between 1972-11-03T00:00 and 1972-11-04T12:00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62147cec184303427ef9bddf6cf83bee6e3ce949" translate="yes" xml:space="preserve">
          <source>For the server, this is the client's host; and for the client, it is the server's host. The name may not be a fully qualified host name or even a host name at all as it may represent a string encoding of the peer's network address. If such a name is desired, it might be resolved through a name service based on the value returned by this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7ed42141cfec99708063e665d4db5f25de170e" translate="yes" xml:space="preserve">
          <source>For the server, this is the client's port number; and for the client, it is the server's port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270fcfa4c23fefd34f6067dfc14da88db6edf11e" translate="yes" xml:space="preserve">
          <source>For this case to work, the JNDI API must have been configured appropriately to supply the information about what directory to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e76dca6435248ee5f5c1c729db49347e93fef4" translate="yes" xml:space="preserve">
          <source>For top efficiency, consider wrapping an InputStreamReader within a BufferedReader. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0654848a089140d2007dcfe1b9715ed583001722" translate="yes" xml:space="preserve">
          <source>For top efficiency, consider wrapping an OutputStreamWriter within a BufferedWriter so as to avoid frequent converter invocations. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b464d383cd3cfa532b3f2034d87a15caddd8db94" translate="yes" xml:space="preserve">
          <source>For two ACL entries to be considered equals requires that they are both the same type, their who components are equal, their permissions components are equal, and their flags components are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33b6dc4fc08ac58790e30247b0b5e0d86acb3d4" translate="yes" xml:space="preserve">
          <source>For two URIs to be considered equal requires that either both are opaque or both are hierarchical. Their schemes must either both be undefined or else be equal without regard to case. Their fragments must either both be undefined or else be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fda39dc260b35491a35fb6ef8135edfdb1fed3f" translate="yes" xml:space="preserve">
          <source>For two hierarchical URIs to be considered equal, their paths must be equal and their queries must either both be undefined or else be equal. Their authorities must either both be undefined, or both be registry-based, or both be server-based. If their authorities are defined and are registry-based, then they must be equal. If their authorities are defined and are server-based, then their hosts must be equal without regard to case, their port numbers must be equal, and their user-information components must be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a9827d6416dd4007c6cdbdb1c378d41a9bc98a" translate="yes" xml:space="preserve">
          <source>For two opaque URIs to be considered equal, their scheme-specific parts must be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1773f4b25e986b1b1e47cbc4ac4abf1a37e430f8" translate="yes" xml:space="preserve">
          <source>For type-safety and to represent all attributes uniformly, the Java Print Service API defines each attribute category as a class, such as class &lt;code&gt;Copies&lt;/code&gt;, class &lt;a href=&quot;standard/sides&quot;&gt;Sides&lt;/a&gt;, and class &lt;a href=&quot;standard/printerresolution&quot;&gt;PrinterResolution&lt;/a&gt;. Each attribute class wraps one or more primitive data items containing the attribute's value. Attribute set operations perform frequent comparisons between attribute category objects when adding attributes, finding existing attributes in the same category, and looking up an attribute given its category. Because an attribute category is represented by a class, fast attribute-value comparisons can be performed with the &lt;code&gt;Class.equals&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f4d8d19a42658228ac7ae908ce569b6f16fb5b" translate="yes" xml:space="preserve">
          <source>Force all system buffers to synchronize with the underlying device. This method returns after all modified data and attributes of this FileDescriptor have been written to the relevant device(s). In particular, if this FileDescriptor refers to a physical storage medium, such as a file in a file system, sync will not return until all in-memory modified copies of buffers associated with this FileDescriptor have been written to the physical medium. sync is meant to be used by code that requires physical storage (such as a file) to be in a known state For example, a class that provided a simple transaction facility might use sync to ensure that all changes to a file caused by a given transaction were recorded on a storage medium. sync only affects buffers downstream of this FileDescriptor. If any in-memory buffering is being done by the application (for example, by a BufferedOutputStream object), those buffers must be flushed into the FileDescriptor (for example, by invoking OutputStream.flush) before that data will be affected by sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db658f27e687d892a5022ac035400f638bcb31a7" translate="yes" xml:space="preserve">
          <source>Force the original target method handle &lt;code&gt;MH0&lt;/code&gt; to the required type, as &lt;code&gt;MH1 = MH0.asType(TN)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9b10af1449bad784be1cde6e9a43551892676f" translate="yes" xml:space="preserve">
          <source>Forces any changes in the contents of this preference node and its descendants to the persistent store. Once this method returns successfully, it is safe to assume that all changes made in the subtree rooted at this node prior to the method invocation have become permanent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a680e483ca6950b6c2d33e9ce98ce8a59904a423" translate="yes" xml:space="preserve">
          <source>Forces any changes made to this buffer's content to be written to the storage device containing the mapped file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deea8a87216b9ce28d84e11ea2b2562f15768162" translate="yes" xml:space="preserve">
          <source>Forces any updates to this channel's file to be written to the storage device that contains it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbce88f263ac9d740c92b1f1edd27fb2fa3fda52" translate="yes" xml:space="preserve">
          <source>Forces the given value to be returned as a result. This method is designed to support extensions, and should not in general be called otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde1b8ae3d0a842d68726e659939eb0c5c7f8545" translate="yes" xml:space="preserve">
          <source>Forces the thread to stop executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e0e32becf1c3ad394aa3f4fdb2ae0464a0dd19" translate="yes" xml:space="preserve">
          <source>Forces this phaser to enter termination state. Counts of registered parties are unaffected. If this phaser is a member of a tiered set of phasers, then all of the phasers in the set are terminated. If this phaser is already terminated, this method has no effect. This method may be useful for coordinating recovery after one or more tasks encounter unexpected exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d25990145c83fbe30b7ec71eb0f5ee823cb07f" translate="yes" xml:space="preserve">
          <source>Forcibly causes subsequent invocations of method &lt;a href=&quot;completablefuture#get--&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and related methods to throw the given exception, whether or not already completed. This method is designed for use only in error recovery actions, and even in such situations may result in ongoing dependent completions using established versus overwritten outcomes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2c4695f4300e5fd7114ef140e2386285715a22" translate="yes" xml:space="preserve">
          <source>Forcibly sets or resets the value subsequently returned by method &lt;a href=&quot;completablefuture#get--&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and related methods, whether or not already completed. This method is designed for use only in error recovery actions, and even in such situations may result in ongoing dependent completions using established versus overwritten outcomes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e93f57eedd9a54ddda92bd9479c29c2239c76f" translate="yes" xml:space="preserve">
          <source>Forcibly terminates the currently running Java virtual machine. This method never returns normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccd10bd01f081e772ab55fdf5e2bd560958bf1a" translate="yes" xml:space="preserve">
          <source>ForkJoinPool</source>
          <target state="translated">ForkJoinPool</target>
        </trans-unit>
        <trans-unit id="f39d8a7e89b599a5922f299f82b1a8c6acd3a87a" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.ForkJoinWorkerThreadFactory</source>
          <target state="translated">ForkJoinPool.ForkJoinWorkerThreadFactory</target>
        </trans-unit>
        <trans-unit id="ad028608dc5cc21b9f19de41ba8ea82f9a2aa0f6" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.ForkJoinWorkerThreadFactory.newThread()</source>
          <target state="translated">ForkJoinPool.ForkJoinWorkerThreadFactory.newThread()</target>
        </trans-unit>
        <trans-unit id="7ecdf21d4b2f0d280dd6c19b3ab787e93ef269a6" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.ManagedBlocker</source>
          <target state="translated">ForkJoinPool.ManagedBlocker</target>
        </trans-unit>
        <trans-unit id="5eb0e257ecb6476a08bc37c22217a81973f1c833" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.ManagedBlocker.block()</source>
          <target state="translated">ForkJoinPool.ManagedBlocker.block()</target>
        </trans-unit>
        <trans-unit id="c23a407322375c571854eaba3582b74df262d4da" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.ManagedBlocker.isReleasable()</source>
          <target state="translated">ForkJoinPool.ManagedBlocker.isReleasable()</target>
        </trans-unit>
        <trans-unit id="5d07a96e3f41b39dad5d76d32a59480cd45ff59d" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.awaitQuiescence()</source>
          <target state="translated">ForkJoinPool.awaitQuiescence()</target>
        </trans-unit>
        <trans-unit id="ce226f283a258522ba29450ec73ffb2a3449205a" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.awaitTermination()</source>
          <target state="translated">ForkJoinPool.awaitTermination()</target>
        </trans-unit>
        <trans-unit id="3aa52c8a1e44e47a16bbd49172332d24b2715623" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.commonPool()</source>
          <target state="translated">ForkJoinPool.commonPool()</target>
        </trans-unit>
        <trans-unit id="385ac479751a78d054ac18b246c415aed5ab64b6" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.drainTasksTo()</source>
          <target state="translated">ForkJoinPool.drainTasksTo()</target>
        </trans-unit>
        <trans-unit id="5b4130a21005c5f67b0ea532e393df7b096450c3" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.execute()</source>
          <target state="translated">ForkJoinPool.execute()</target>
        </trans-unit>
        <trans-unit id="a2f334663e796ecc9858263dc71a34e0a30f739e" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getActiveThreadCount()</source>
          <target state="translated">ForkJoinPool.getActiveThreadCount()</target>
        </trans-unit>
        <trans-unit id="28fbff92fd675f66b94eeb30de0b190127eeb544" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getAsyncMode()</source>
          <target state="translated">ForkJoinPool.getAsyncMode()</target>
        </trans-unit>
        <trans-unit id="e6179f341847929d36d77692104083832b3030f1" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getCommonPoolParallelism()</source>
          <target state="translated">ForkJoinPool.getCommonPoolParallelism()</target>
        </trans-unit>
        <trans-unit id="6f34a8e32f7e690865dafd75e80ec571296cdbd6" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getFactory()</source>
          <target state="translated">ForkJoinPool.getFactory()</target>
        </trans-unit>
        <trans-unit id="1a03e04b00b20c2269390bbd12bfd81012839466" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getParallelism()</source>
          <target state="translated">ForkJoinPool.getParallelism()</target>
        </trans-unit>
        <trans-unit id="4bc046d6b8640b3d2504821b5c135ded1d833fd6" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getPoolSize()</source>
          <target state="translated">ForkJoinPool.getPoolSize()</target>
        </trans-unit>
        <trans-unit id="6c06d0b4ff54a653996ee5b2aa8080fadf00b2a4" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getQueuedSubmissionCount()</source>
          <target state="translated">ForkJoinPool.getQueuedSubmissionCount()</target>
        </trans-unit>
        <trans-unit id="f33076b722e1cad6390534ecf825abac4fc3aaf2" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getQueuedTaskCount()</source>
          <target state="translated">ForkJoinPool.getQueuedTaskCount()</target>
        </trans-unit>
        <trans-unit id="12f81fb17b2bb940a0951076fa5c61dd0be3099c" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getRunningThreadCount()</source>
          <target state="translated">ForkJoinPool.getRunningThreadCount()</target>
        </trans-unit>
        <trans-unit id="3f8d7459d72c6b4ac7a4f2c49c0cf21720d83ccc" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getStealCount()</source>
          <target state="translated">ForkJoinPool.getStealCount()</target>
        </trans-unit>
        <trans-unit id="82bee117026169a5497bd3efac03b4c75e2532a9" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.getUncaughtExceptionHandler()</source>
          <target state="translated">ForkJoinPool.getUncaughtExceptionHandler()</target>
        </trans-unit>
        <trans-unit id="4b336964ea7affe439f1c3559fc0da6b4359ac36" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.hasQueuedSubmissions()</source>
          <target state="translated">ForkJoinPool.hasQueuedSubmissions()</target>
        </trans-unit>
        <trans-unit id="379dfbf47fcbad302f0a0ea85ff96b5796cad7dd" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.invoke()</source>
          <target state="translated">ForkJoinPool.invoke()</target>
        </trans-unit>
        <trans-unit id="931e5430fc6c6213aba1a9bcb4b17c34cab25307" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.invokeAll()</source>
          <target state="translated">ForkJoinPool.invokeAll()</target>
        </trans-unit>
        <trans-unit id="d07fee2abe17748f58fdbcd25ef6b487f6ae6b65" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.isQuiescent()</source>
          <target state="translated">ForkJoinPool.isQuiescent()</target>
        </trans-unit>
        <trans-unit id="3ca358ce8f82d43cdc85b7565f3136661b6ad6c7" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.isShutdown()</source>
          <target state="translated">ForkJoinPool.isShutdown()</target>
        </trans-unit>
        <trans-unit id="63e491a96c2d56b401d9fb6b86161de85a051551" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.isTerminated()</source>
          <target state="translated">ForkJoinPool.isTerminated()</target>
        </trans-unit>
        <trans-unit id="fdb7780bd7a291bb10007d9da6ae6b0eb9e54de2" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.isTerminating()</source>
          <target state="translated">ForkJoinPool.isTerminating()</target>
        </trans-unit>
        <trans-unit id="d8394094624d0503d79c4a04cb1552f61949d4bf" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.managedBlock()</source>
          <target state="translated">ForkJoinPool.managedBlock()</target>
        </trans-unit>
        <trans-unit id="94fa97addee2bb016fa7ad0dba60f03e0174f651" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.newTaskFor()</source>
          <target state="translated">ForkJoinPool.newTaskFor()</target>
        </trans-unit>
        <trans-unit id="948cf8a07fe3440136e940fe1bf2780e9308f719" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.pollSubmission()</source>
          <target state="translated">ForkJoinPool.pollSubmission()</target>
        </trans-unit>
        <trans-unit id="d8298ff24e07678c64b2477a81e0aba73e8d0e27" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.shutdown()</source>
          <target state="translated">ForkJoinPool.shutdown()</target>
        </trans-unit>
        <trans-unit id="e92dc1fa038cb558325a32141647a6b89a3bf76e" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.shutdownNow()</source>
          <target state="translated">ForkJoinPool.shutdownNow()</target>
        </trans-unit>
        <trans-unit id="7c2afced7fedfcef83ba19435784c2707f27cfc8" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.submit()</source>
          <target state="translated">ForkJoinPool.submit()</target>
        </trans-unit>
        <trans-unit id="ea35f6d6d1e2525a9bf9fbed7c02fa29586a7cb5" translate="yes" xml:space="preserve">
          <source>ForkJoinPool.toString()</source>
          <target state="translated">ForkJoinPool.toString()</target>
        </trans-unit>
        <trans-unit id="23ac2c518680958cf19f36c2fafaa6479ef0f3ae" translate="yes" xml:space="preserve">
          <source>ForkJoinTask</source>
          <target state="translated">ForkJoinTask</target>
        </trans-unit>
        <trans-unit id="492eb83820d55a644e618c8afafd921055639859" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.adapt()</source>
          <target state="translated">ForkJoinTask.adapt()</target>
        </trans-unit>
        <trans-unit id="ee8d9ae1739cf8b336587f8783a3849bb685fe58" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.cancel()</source>
          <target state="translated">ForkJoinTask.cancel()</target>
        </trans-unit>
        <trans-unit id="7e48208733c4012a55ab36f052964bca4003b2a1" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.compareAndSetForkJoinTaskTag()</source>
          <target state="translated">ForkJoinTask.compareAndSetForkJoinTaskTag()</target>
        </trans-unit>
        <trans-unit id="94b15ff04b08a6eb6b1de30659c59f6e63b714f0" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.complete()</source>
          <target state="translated">ForkJoinTask.complete()</target>
        </trans-unit>
        <trans-unit id="9bc884392d7037bd7863201a2bbbc62d6d48e432" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.completeExceptionally()</source>
          <target state="translated">ForkJoinTask.completeExceptionally()</target>
        </trans-unit>
        <trans-unit id="7837dc8a9d9af718ac92c7ffd144281e74869bf8" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.exec()</source>
          <target state="translated">ForkJoinTask.exec()</target>
        </trans-unit>
        <trans-unit id="1ad0a80adc32bf635c8a3b60a23e5ab096e8d5ce" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.fork()</source>
          <target state="translated">ForkJoinTask.fork()</target>
        </trans-unit>
        <trans-unit id="b655d7110805dcfef615f12711e9c1935f46291d" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.get()</source>
          <target state="translated">ForkJoinTask.get()</target>
        </trans-unit>
        <trans-unit id="82c37a27c81d5be46eaabb49e37965eef5d787f2" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getException()</source>
          <target state="translated">ForkJoinTask.getException()</target>
        </trans-unit>
        <trans-unit id="04d0e9910c2fae1b75675a431ddddc7cb005c19e" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getForkJoinTaskTag()</source>
          <target state="translated">ForkJoinTask.getForkJoinTaskTag()</target>
        </trans-unit>
        <trans-unit id="0d13ff10dc6ea2d242e5a16af56572ec62728dbc" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getPool()</source>
          <target state="translated">ForkJoinTask.getPool()</target>
        </trans-unit>
        <trans-unit id="75e02c9328661a1c949f8637fb6921b870fc6f72" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getQueuedTaskCount()</source>
          <target state="translated">ForkJoinTask.getQueuedTaskCount()</target>
        </trans-unit>
        <trans-unit id="5b3a64e0ddf0601d8c368714d74c4ec34e6ba1cc" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getRawResult()</source>
          <target state="translated">ForkJoinTask.getRawResult()</target>
        </trans-unit>
        <trans-unit id="e93d5dc2d0a6e324cac0016b71230fe47ab6d260" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.getSurplusQueuedTaskCount()</source>
          <target state="translated">ForkJoinTask.getSurplusQueuedTaskCount()</target>
        </trans-unit>
        <trans-unit id="c72a935c3bdf49a46a2f68c7f844e212b99b3a9f" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.helpQuiesce()</source>
          <target state="translated">ForkJoinTask.helpQuiesce()</target>
        </trans-unit>
        <trans-unit id="25af2dc288d8d7258c4a924add3faa3c3363d09c" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.inForkJoinPool()</source>
          <target state="translated">ForkJoinTask.inForkJoinPool()</target>
        </trans-unit>
        <trans-unit id="4c8230bf67d85984c78649ebbdaa9022214ac726" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.invoke()</source>
          <target state="translated">ForkJoinTask.invoke()</target>
        </trans-unit>
        <trans-unit id="bb2578235be5a1d80b49286f382c02652722d1a6" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.invokeAll()</source>
          <target state="translated">ForkJoinTask.invokeAll()</target>
        </trans-unit>
        <trans-unit id="46c7234f20e7ff5558eecb6f85a763355ab3a356" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.isCancelled()</source>
          <target state="translated">ForkJoinTask.isCancelled()</target>
        </trans-unit>
        <trans-unit id="3c53578c67a3d5dc3fae2b6213adfeab5408052b" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.isCompletedAbnormally()</source>
          <target state="translated">ForkJoinTask.isCompletedAbnormally()</target>
        </trans-unit>
        <trans-unit id="64c6052d0b139df19ec14840b22cb668cfa8a699" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.isCompletedNormally()</source>
          <target state="translated">ForkJoinTask.isCompletedNormally()</target>
        </trans-unit>
        <trans-unit id="3cf941db3592a3bd14771662fa3711a9ae5520fe" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.isDone()</source>
          <target state="translated">ForkJoinTask.isDone()</target>
        </trans-unit>
        <trans-unit id="a5eb02bf25628b76b9df59e667c00401866fc1e6" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.join()</source>
          <target state="translated">ForkJoinTask.join()</target>
        </trans-unit>
        <trans-unit id="f3e6da96efd8c2d0493ec1fccabe1253b7e0cacf" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.peekNextLocalTask()</source>
          <target state="translated">ForkJoinTask.peekNextLocalTask()</target>
        </trans-unit>
        <trans-unit id="6d79698b971753cda3eae311a5d1c9cf50528add" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.pollNextLocalTask()</source>
          <target state="translated">ForkJoinTask.pollNextLocalTask()</target>
        </trans-unit>
        <trans-unit id="d5b8dd9e0601a48a2a9413f5c28964b1c66fd4f9" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.pollTask()</source>
          <target state="translated">ForkJoinTask.pollTask()</target>
        </trans-unit>
        <trans-unit id="c9b9bd8d4d1df6a87ec42b885261aa46f726a561" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.quietlyComplete()</source>
          <target state="translated">ForkJoinTask.quietlyComplete()</target>
        </trans-unit>
        <trans-unit id="c8ffabdba5c635ce350bc64adca02711eaf8d512" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.quietlyInvoke()</source>
          <target state="translated">ForkJoinTask.quietlyInvoke()</target>
        </trans-unit>
        <trans-unit id="1e5d69359e294c620cfe630d7684c08767394fb7" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.quietlyJoin()</source>
          <target state="translated">ForkJoinTask.quietlyJoin()</target>
        </trans-unit>
        <trans-unit id="de0df6fd3f44a36068c6c8700906462505936195" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.reinitialize()</source>
          <target state="translated">ForkJoinTask.reinitialize()</target>
        </trans-unit>
        <trans-unit id="782d35350e2bb520475ccb484b619b4ff0dc3c87" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.setForkJoinTaskTag()</source>
          <target state="translated">ForkJoinTask.setForkJoinTaskTag()</target>
        </trans-unit>
        <trans-unit id="157793f053a4ed6b66175aa00177f39b8c52fbe1" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.setRawResult()</source>
          <target state="translated">ForkJoinTask.setRawResult()</target>
        </trans-unit>
        <trans-unit id="14e13b4f0828cc7e9569f65c318e9bb4f7c7ee7d" translate="yes" xml:space="preserve">
          <source>ForkJoinTask.tryUnfork()</source>
          <target state="translated">ForkJoinTask.tryUnfork()</target>
        </trans-unit>
        <trans-unit id="e33265d16d3575aaf320d5b191427cdfaa3266f6" translate="yes" xml:space="preserve">
          <source>ForkJoinTasks are &lt;code&gt;Serializable&lt;/code&gt;, which enables them to be used in extensions such as remote execution frameworks. It is sensible to serialize tasks only before or after, but not during, execution. Serialization is not relied on during execution itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5b71f4d9e3bb8d68310798b2e570d8ff14474a" translate="yes" xml:space="preserve">
          <source>ForkJoinTasks should perform relatively small amounts of computation. Large tasks should be split into smaller subtasks, usually via recursive decomposition. As a very rough rule of thumb, a task should perform more than 100 and less than 10000 basic computational steps, and should avoid indefinite looping. If tasks are too big, then parallelism cannot improve throughput. If too small, then memory and internal task maintenance overhead may overwhelm processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1031cd9059d05e6af3dd9bce421a8a905ec7317b" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread</source>
          <target state="translated">ForkJoinWorkerThread</target>
        </trans-unit>
        <trans-unit id="edb483d1de1c698134ee111f9b84e356ae013c28" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread.getPool()</source>
          <target state="translated">ForkJoinWorkerThread.getPool()</target>
        </trans-unit>
        <trans-unit id="007655f701cc69ac5304814368f7a4e9cf42a0a9" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread.getPoolIndex()</source>
          <target state="translated">ForkJoinWorkerThread.getPoolIndex()</target>
        </trans-unit>
        <trans-unit id="c3220bb92b11d439b4fc2d6fd4c6baaff306dd9d" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread.onStart()</source>
          <target state="translated">ForkJoinWorkerThread.onStart()</target>
        </trans-unit>
        <trans-unit id="f9bbb0eb86558f820cea5dd375880bfe1fe8952c" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread.onTermination()</source>
          <target state="translated">ForkJoinWorkerThread.onTermination()</target>
        </trans-unit>
        <trans-unit id="0c2c89bcd318db6a40f6e343725881ec2dd59c52" translate="yes" xml:space="preserve">
          <source>ForkJoinWorkerThread.run()</source>
          <target state="translated">ForkJoinWorkerThread.run()</target>
        </trans-unit>
        <trans-unit id="07e592a3c48252cf7f9fcf1dc6663e80ef967130" translate="yes" xml:space="preserve">
          <source>Forks all tasks in the specified collection, returning when &lt;code&gt;isDone&lt;/code&gt; holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using &lt;a href=&quot;forkjointask#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04917135e1237009b50bf463b498a6bf21064d37" translate="yes" xml:space="preserve">
          <source>Forks the given tasks, returning when &lt;code&gt;isDone&lt;/code&gt; holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using &lt;a href=&quot;forkjointask#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5381ba0db46417dd20ad2bece1549ce15b6b5747" translate="yes" xml:space="preserve">
          <source>Forks the given tasks, returning when &lt;code&gt;isDone&lt;/code&gt; holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, the other may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using &lt;a href=&quot;forkjointask#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c232e93c157d8ff6df15790349e5f218511859e4" translate="yes" xml:space="preserve">
          <source>Formal parameter declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="e0e31adb6cc861ffe4700cf93625baf412604bf7" translate="yes" xml:space="preserve">
          <source>Format String Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f531d541f5613113b7c853d36bf388cf8a0c233d" translate="yes" xml:space="preserve">
          <source>Format a LogRecord into a standard XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e6011f57b4d7c03296826caf852d4e6c1c8796" translate="yes" xml:space="preserve">
          <source>Format a long to produce a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2ffe5a7a236541d8dd38a2b35d11b8ed237835" translate="yes" xml:space="preserve">
          <source>Format and publish a &lt;code&gt;LogRecord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e613d3ff5aba0492bf29fcc59a7b0e5f6759964" translate="yes" xml:space="preserve">
          <source>Format specifiers can reference arguments in three ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e82333b671f19dfc603692509556dcfffc70d1" translate="yes" xml:space="preserve">
          <source>Format the &lt;code&gt;BigDecimal&lt;/code&gt; as a decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7076f5049495f161d64978e61538fda9e34ca46e" translate="yes" xml:space="preserve">
          <source>Format the &lt;code&gt;BigDecimal&lt;/code&gt; in computerized scientific notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8926957abccd383147f72e6cc92305b1a9cb0fab" translate="yes" xml:space="preserve">
          <source>Format the given LogRecord.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75529fcb251f3b2ccfd0d825d210ae6f152b712" translate="yes" xml:space="preserve">
          <source>Format the given log record and return the formatted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664761aede593637664129c3039e828e577b1efa" translate="yes" xml:space="preserve">
          <source>Format the given message to XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568d6e3238de37c4ce635fc088441f7e5b62a0cd" translate="yes" xml:space="preserve">
          <source>Format.Field</source>
          <target state="translated">Format.Field</target>
        </trans-unit>
        <trans-unit id="0a4d1139c52c45a3084446e69c46f83d34a51f0c" translate="yes" xml:space="preserve">
          <source>Format.clone()</source>
          <target state="translated">Format.clone()</target>
        </trans-unit>
        <trans-unit id="0df50e364976426751d2bcf69343ab4001064807" translate="yes" xml:space="preserve">
          <source>Format.format()</source>
          <target state="translated">Format.format()</target>
        </trans-unit>
        <trans-unit id="0ced8f81caf0da4ac0dfc0eba834286734d88d3f" translate="yes" xml:space="preserve">
          <source>Format.formatToCharacterIterator()</source>
          <target state="translated">Format.formatToCharacterIterator()</target>
        </trans-unit>
        <trans-unit id="3e467ba00a6a3b8abc3bd44c809e3d589436b4d1" translate="yes" xml:space="preserve">
          <source>Format.parseObject()</source>
          <target state="translated">Format.parseObject()</target>
        </trans-unit>
        <trans-unit id="9df120b5cbab90d63a2d0715c4be0010f9933f1d" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider</source>
          <target state="translated">FormatConversionProvider</target>
        </trans-unit>
        <trans-unit id="9b0236c42f4b1c55f31dc51c6b16246f0024b98f" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.getAudioInputStream()</source>
          <target state="translated">FormatConversionProvider.getAudioInputStream()</target>
        </trans-unit>
        <trans-unit id="bcda1d0483ec19f835f2069ed89711071d6a6159" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.getSourceEncodings()</source>
          <target state="translated">FormatConversionProvider.getSourceEncodings()</target>
        </trans-unit>
        <trans-unit id="66eaee8c30598e5d40566ae6742f7cebe650d5a0" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.getTargetEncodings()</source>
          <target state="translated">FormatConversionProvider.getTargetEncodings()</target>
        </trans-unit>
        <trans-unit id="6c2cf875bc1836ab1258a6f0f8d189cfd43155e0" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.getTargetFormats()</source>
          <target state="translated">FormatConversionProvider.getTargetFormats()</target>
        </trans-unit>
        <trans-unit id="11a5d55a4cbc0b2be37622296b521a52db1d0825" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.isConversionSupported()</source>
          <target state="translated">FormatConversionProvider.isConversionSupported()</target>
        </trans-unit>
        <trans-unit id="131c566041bead3406f2d986da597583b8ec36d9" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.isSourceEncodingSupported()</source>
          <target state="translated">FormatConversionProvider.isSourceEncodingSupported()</target>
        </trans-unit>
        <trans-unit id="4f9999fe896487bae407fc43e5c49bbbe4879efd" translate="yes" xml:space="preserve">
          <source>FormatConversionProvider.isTargetEncodingSupported()</source>
          <target state="translated">FormatConversionProvider.isTargetEncodingSupported()</target>
        </trans-unit>
        <trans-unit id="db383ed0e067b8f757f7b98b368d2afe5c7313d9" translate="yes" xml:space="preserve">
          <source>FormatElement</source>
          <target state="translated">FormatElement</target>
        </trans-unit>
        <trans-unit id="412dca0cbf64716453dbf40f4f38618282c9db98" translate="yes" xml:space="preserve">
          <source>FormatFlagsConversionMismatchException</source>
          <target state="translated">FormatFlagsConversionMismatchException</target>
        </trans-unit>
        <trans-unit id="1c066917f62e00249cbf26f067524db353a8e820" translate="yes" xml:space="preserve">
          <source>FormatFlagsConversionMismatchException.getConversion()</source>
          <target state="translated">FormatFlagsConversionMismatchException.getConversion()</target>
        </trans-unit>
        <trans-unit id="15da17fbdd9c43b5956dad3cae4b34ed59242a4e" translate="yes" xml:space="preserve">
          <source>FormatFlagsConversionMismatchException.getFlags()</source>
          <target state="translated">FormatFlagsConversionMismatchException.getFlags()</target>
        </trans-unit>
        <trans-unit id="19963e30c388216c737deca1e7a2454088da9869" translate="yes" xml:space="preserve">
          <source>FormatFlagsConversionMismatchException.getMessage()</source>
          <target state="translated">FormatFlagsConversionMismatchException.getMessage()</target>
        </trans-unit>
        <trans-unit id="1a635b1e375ae58994f98e2dafdb962dda0f1247" translate="yes" xml:space="preserve">
          <source>FormatStyle</source>
          <target state="translated">FormatStyle</target>
        </trans-unit>
        <trans-unit id="21fe696c76bc40f63a4659f3f62bdde305c3f921" translate="yes" xml:space="preserve">
          <source>FormatStyle.valueOf()</source>
          <target state="translated">FormatStyle.valueOf()</target>
        </trans-unit>
        <trans-unit id="3193a241219c0156048d278b1c6c46750899a195" translate="yes" xml:space="preserve">
          <source>FormatStyle.values()</source>
          <target state="translated">FormatStyle.values()</target>
        </trans-unit>
        <trans-unit id="a577d37f0089a3ba893412a7be689f31f9997051" translate="yes" xml:space="preserve">
          <source>FormatType</source>
          <target state="translated">FormatType</target>
        </trans-unit>
        <trans-unit id="07073d6e0f6c54cdcb241bb922b045b2fd8d9e05" translate="yes" xml:space="preserve">
          <source>Formats a Date into a date/time string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f8fd862c2a92d11dcde61cfc7f6d8e793d879d" translate="yes" xml:space="preserve">
          <source>Formats a date-time object to an &lt;code&gt;Appendable&lt;/code&gt; using this formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be1bf7a7f7e377cf813b5f734ac2e3d2a2aa436" translate="yes" xml:space="preserve">
          <source>Formats a date-time object using this formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf02beedd6f1bce58518eddc5808fefdade7b69" translate="yes" xml:space="preserve">
          <source>Formats a double to produce a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04e67cc414adf66ebecc3ce08b87154e076b882" translate="yes" xml:space="preserve">
          <source>Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of &lt;a href=&quot;../lang/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7869ed7c2765ecd200324b00ea3d1d924e8762e0" translate="yes" xml:space="preserve">
          <source>Formats an Object producing an &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;. You can use the returned &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; to build the resulting String, as well as to determine information about the resulting String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935d245fe455147d9c757e999ebd8388d0b692bf" translate="yes" xml:space="preserve">
          <source>Formats an array of objects and appends the &lt;code&gt;MessageFormat&lt;/code&gt;'s pattern, with format elements replaced by the formatted objects, to the provided &lt;code&gt;StringBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c03c37cf08dd4617eecfb4b80423fbece656cbd" translate="yes" xml:space="preserve">
          <source>Formats an array of objects and appends the &lt;code&gt;MessageFormat&lt;/code&gt;'s pattern, with format elements replaced by the formatted objects, to the provided &lt;code&gt;StringBuffer&lt;/code&gt;. This is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21297b414ce0029faaca682aeb10c15afb91174c" translate="yes" xml:space="preserve">
          <source>Formats an array of objects and inserts them into the &lt;code&gt;MessageFormat&lt;/code&gt;'s pattern, producing an &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;. You can use the returned &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; to build the resulting String, as well as to determine information about the resulting String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a22d7749925a09720265c0ac9d11263b68df807" translate="yes" xml:space="preserve">
          <source>Formats an object and appends the resulting text to a given string buffer. If the &lt;code&gt;pos&lt;/code&gt; argument identifies a field used by the format, then its indices are set to the beginning and end of the first such field encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a28e2667660d3aa12cbe5d58992c3eadbf6aa76" translate="yes" xml:space="preserve">
          <source>Formats an object to produce a string. This is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0a5adf713797b1e88d1ed1b05fb283e5fc9075" translate="yes" xml:space="preserve">
          <source>Formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefb58f1cc1cb3eb81f84a3c57abd7926f4f2238" translate="yes" xml:space="preserve">
          <source>Formats such as &quot;raw,&quot; which can potentially attempt to read nearly any stream, should return &lt;code&gt;false&lt;/code&gt; in order to avoid being invoked in preference to a closer match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312a5f525f8b10dfb4ad63090301d64356edce01" translate="yes" xml:space="preserve">
          <source>Formats the argument as a Unicode character as described in &lt;a href=&quot;../lang/character#unicode&quot;&gt;Unicode Character Representation&lt;/a&gt;. This may be more than one 16-bit &lt;code&gt;char&lt;/code&gt; in the case where the argument represents a supplementary character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0570fb471e9afbb2f306caffe87460c9188dcc29" translate="yes" xml:space="preserve">
          <source>Formats the argument as a decimal integer. The &lt;a href=&quot;#L10nAlgorithm&quot;&gt;localization algorithm&lt;/a&gt; is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfff0fa6dbf122d692c0742ddcf6c5629c7b0cb" translate="yes" xml:space="preserve">
          <source>Formats the argument as an integer in base eight. No localization is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdda238fb46a84a701714dfa86485fddeb68760" translate="yes" xml:space="preserve">
          <source>Formats the argument as an integer in base sixteen. No localization is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55eeadb3f1c2dfee435c57ecf4db62a0d6032358" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;Date&lt;/code&gt; into a date/time string and appends the result to the given &lt;code&gt;StringBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e028adfd5ea9f1e03ddc3e4aaec41d58efd862" translate="yes" xml:space="preserve">
          <source>Formats the object using the provided &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5d90b0b4d12a460062ea991f8fdf7f7e42e5f2" translate="yes" xml:space="preserve">
          <source>Formats this date using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21460715a9e761e72bd9b1e44f4ae8f543367854" translate="yes" xml:space="preserve">
          <source>Formats this date-time using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50891c12b61aa2bbc0baa1a9008a341a319ab97b" translate="yes" xml:space="preserve">
          <source>Formats this month-day using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33863404be77fa78615877db0a295721489855e" translate="yes" xml:space="preserve">
          <source>Formats this time using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f653b32726183250759a52c2cf358e88df1902" translate="yes" xml:space="preserve">
          <source>Formats this year using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dfa57ee3604286edab15ae77ed93a4c94f2f22" translate="yes" xml:space="preserve">
          <source>Formats this year-month using the specified formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7c7364f655788e4b3118b68f3797a1b9213c05" translate="yes" xml:space="preserve">
          <source>Formattable</source>
          <target state="translated">Formattable</target>
        </trans-unit>
        <trans-unit id="24a5daf1c05412467919e0ab706235f8a90fecdc" translate="yes" xml:space="preserve">
          <source>Formattable.formatTo()</source>
          <target state="translated">Formattable.formatTo()</target>
        </trans-unit>
        <trans-unit id="cfa6c7a48792619cf5ad6d7179a2420ac429949a" translate="yes" xml:space="preserve">
          <source>FormattableFlags</source>
          <target state="translated">FormattableFlags</target>
        </trans-unit>
        <trans-unit id="787f0634c99e31e8d07616a8164a5dd380caba61" translate="yes" xml:space="preserve">
          <source>Formattables are not necessarily safe for multithreaded access. Thread safety is optional and may be enforced by classes that extend and implement this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032e219ce652424b62e2f5cbcae7876f52a41343" translate="yes" xml:space="preserve">
          <source>Formatted Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186bfa811d3c12e2d6d2a163cd1d14fa1220da87" translate="yes" xml:space="preserve">
          <source>Formatted printing for the Java language is heavily inspired by C's &lt;code&gt;printf&lt;/code&gt;. Although the format strings are similar to C, some customizations have been made to accommodate the Java language and exploit some of its features. Also, Java formatting is more strict than C's; for example, if a conversion is incompatible with a flag, an exception will be thrown. In C inapplicable flags are silently ignored. The format strings are thus intended to be recognizable to C programmers but not necessarily completely compatible with those in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224a21b58aa618be5c77da4364e1d8dc9574f3e2" translate="yes" xml:space="preserve">
          <source>Formatted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae42b52d64655839743c546b646a36f423ad845" translate="yes" xml:space="preserve">
          <source>Formatter</source>
          <target state="translated">Formatter</target>
        </trans-unit>
        <trans-unit id="88c34e3c8182486a496fc36648e940f245633d69" translate="yes" xml:space="preserve">
          <source>Formatter for printing and parsing date-time objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f74218ffa7343e091c09cb3f145ddaff43c682" translate="yes" xml:space="preserve">
          <source>Formatter with a style for date and time from the locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12217374b959e1b3f8c94bd7c672750743c33e46" translate="yes" xml:space="preserve">
          <source>Formatter with date and time styles from the locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4913b78e3188f770446deb4e0f0d160bdcdf56" translate="yes" xml:space="preserve">
          <source>Formatter with date style from the locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c9104689b8c1c3e3fb4a54fed4c8a2982cf65d" translate="yes" xml:space="preserve">
          <source>Formatter with time style from the locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96434b4cc8dd93ea10ad32d69d4b3b03ba27f340" translate="yes" xml:space="preserve">
          <source>Formatter.BigDecimalLayoutForm</source>
          <target state="translated">Formatter.BigDecimalLayoutForm</target>
        </trans-unit>
        <trans-unit id="59b0bd28e15347e28f4f6bbe0d15cc2552a6988b" translate="yes" xml:space="preserve">
          <source>Formatter.BigDecimalLayoutForm.valueOf()</source>
          <target state="translated">Formatter.BigDecimalLayoutForm.valueOf()</target>
        </trans-unit>
        <trans-unit id="b1c86126224042de9c87a75e0cb92e921b50d89e" translate="yes" xml:space="preserve">
          <source>Formatter.BigDecimalLayoutForm.values()</source>
          <target state="translated">Formatter.BigDecimalLayoutForm.values()</target>
        </trans-unit>
        <trans-unit id="c79e5f7f078f4b6c9467f8a0b83758e3f32e7f47" translate="yes" xml:space="preserve">
          <source>Formatter.close()</source>
          <target state="translated">Formatter.close()</target>
        </trans-unit>
        <trans-unit id="b078e0205841f6f67ec45be2ba4bf586b77c288b" translate="yes" xml:space="preserve">
          <source>Formatter.flush()</source>
          <target state="translated">Formatter.flush()</target>
        </trans-unit>
        <trans-unit id="243be0520c44c79d3e5a24d0bc710f6f81c72508" translate="yes" xml:space="preserve">
          <source>Formatter.format()</source>
          <target state="translated">Formatter.format()</target>
        </trans-unit>
        <trans-unit id="9f9a22e7d42e783add24ad35ce4493d72afa1a4d" translate="yes" xml:space="preserve">
          <source>Formatter.formatMessage()</source>
          <target state="translated">Formatter.formatMessage()</target>
        </trans-unit>
        <trans-unit id="b6596b553935fed935c9d56e31450c08820054bb" translate="yes" xml:space="preserve">
          <source>Formatter.getHead()</source>
          <target state="translated">Formatter.getHead()</target>
        </trans-unit>
        <trans-unit id="00a0faac69de609f8f7001edbc089582a8abd4a6" translate="yes" xml:space="preserve">
          <source>Formatter.getTail()</source>
          <target state="translated">Formatter.getTail()</target>
        </trans-unit>
        <trans-unit id="a194e808c3bb5f76de07e985bdba5d40c7588f2a" translate="yes" xml:space="preserve">
          <source>Formatter.ioException()</source>
          <target state="translated">Formatter.ioException()</target>
        </trans-unit>
        <trans-unit id="a00674447a79d95950cac8d07a982286678d0e18" translate="yes" xml:space="preserve">
          <source>Formatter.locale()</source>
          <target state="translated">Formatter.locale()</target>
        </trans-unit>
        <trans-unit id="27bafe53172793018156578c34ed42144c9ea916" translate="yes" xml:space="preserve">
          <source>Formatter.out()</source>
          <target state="translated">Formatter.out()</target>
        </trans-unit>
        <trans-unit id="f19b7c3fd33129ed822ef2f07d33e26d059234f4" translate="yes" xml:space="preserve">
          <source>Formatter.toString()</source>
          <target state="translated">Formatter.toString()</target>
        </trans-unit>
        <trans-unit id="71418b0ab7a709254cefd2bf458fe779d1d3d60a" translate="yes" xml:space="preserve">
          <source>FormatterClosedException</source>
          <target state="translated">FormatterClosedException</target>
        </trans-unit>
        <trans-unit id="6ea7b9c460690c783f714c2640edd2e32675578e" translate="yes" xml:space="preserve">
          <source>Formatters are not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa36fc74f0c240c8666148fa5eb066f24e5bd04" translate="yes" xml:space="preserve">
          <source>Formatting (including localization) is the responsibility of the output Handler, which will typically call a Formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d9f6d07ffca6df7240943fb7df0a69962abc52" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject</source>
          <target state="translated">ForwardingFileObject</target>
        </trans-unit>
        <trans-unit id="bb58ca2712358c727407a86307cb611589814567" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.delete()</source>
          <target state="translated">ForwardingFileObject.delete()</target>
        </trans-unit>
        <trans-unit id="68a38647deabfc078adbe632a6969bfd719fcd4a" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.getCharContent()</source>
          <target state="translated">ForwardingFileObject.getCharContent()</target>
        </trans-unit>
        <trans-unit id="19aeb3a67e1d567f9e78f3ba71efc723403700d7" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.getLastModified()</source>
          <target state="translated">ForwardingFileObject.getLastModified()</target>
        </trans-unit>
        <trans-unit id="ca5f0465ab94ffb9c516f0b9516655eb4970ea13" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.getName()</source>
          <target state="translated">ForwardingFileObject.getName()</target>
        </trans-unit>
        <trans-unit id="00fe13c69f6d63afd6b0f74987622555d34bd344" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.openInputStream()</source>
          <target state="translated">ForwardingFileObject.openInputStream()</target>
        </trans-unit>
        <trans-unit id="a7275c0d34acdfc7c673e3f7b0f1af012b4e04ad" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.openOutputStream()</source>
          <target state="translated">ForwardingFileObject.openOutputStream()</target>
        </trans-unit>
        <trans-unit id="9d864256de618debfc685616ca797eaf51c40e62" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.openReader()</source>
          <target state="translated">ForwardingFileObject.openReader()</target>
        </trans-unit>
        <trans-unit id="b0fa6675b6f98e750098578138722d313412f8ea" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.openWriter()</source>
          <target state="translated">ForwardingFileObject.openWriter()</target>
        </trans-unit>
        <trans-unit id="901b5c60cca865086064054f32721536a157885b" translate="yes" xml:space="preserve">
          <source>ForwardingFileObject.toUri()</source>
          <target state="translated">ForwardingFileObject.toUri()</target>
        </trans-unit>
        <trans-unit id="be6f0f42d76c3562dd96e07e77b781bf5e58d22f" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager</source>
          <target state="translated">ForwardingJavaFileManager</target>
        </trans-unit>
        <trans-unit id="0fe70ef8b2d097ad8b8ecb94e58e299247fd2823" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.close()</source>
          <target state="translated">ForwardingJavaFileManager.close()</target>
        </trans-unit>
        <trans-unit id="914bf0d068564540e56019bb957ee893f928af62" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.flush()</source>
          <target state="translated">ForwardingJavaFileManager.flush()</target>
        </trans-unit>
        <trans-unit id="e6b70084480889eb27d32b80d7f3ea05ab617adc" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.getClassLoader()</source>
          <target state="translated">ForwardingJavaFileManager.getClassLoader()</target>
        </trans-unit>
        <trans-unit id="f8fc67c33421399c12958c2318abae3b8cd0e4ca" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.getFileForInput()</source>
          <target state="translated">ForwardingJavaFileManager.getFileForInput()</target>
        </trans-unit>
        <trans-unit id="1a798f02dcc0f4466d15d56ee29d1a5726162db7" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.getFileForOutput()</source>
          <target state="translated">ForwardingJavaFileManager.getFileForOutput()</target>
        </trans-unit>
        <trans-unit id="34df17a4e361d3d22b331a54582c69dcaba0297a" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.getJavaFileForInput()</source>
          <target state="translated">ForwardingJavaFileManager.getJavaFileForInput()</target>
        </trans-unit>
        <trans-unit id="44e423a93f71bfbb80b9c12a621a97725e301aea" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.getJavaFileForOutput()</source>
          <target state="translated">ForwardingJavaFileManager.getJavaFileForOutput()</target>
        </trans-unit>
        <trans-unit id="4ef200c496a2e2d88be4302e63f9d53e07fd373d" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.handleOption()</source>
          <target state="translated">ForwardingJavaFileManager.handleOption()</target>
        </trans-unit>
        <trans-unit id="65c06b29d28dd5418f2673a0808f263b4e4310cd" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.hasLocation()</source>
          <target state="translated">ForwardingJavaFileManager.hasLocation()</target>
        </trans-unit>
        <trans-unit id="1b3db71a48e52ffcd5a3664aee45d5f180f02002" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.inferBinaryName()</source>
          <target state="translated">ForwardingJavaFileManager.inferBinaryName()</target>
        </trans-unit>
        <trans-unit id="7c2894dea44de52f2f2ac433b3f83b3b6a818e6b" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.isSameFile()</source>
          <target state="translated">ForwardingJavaFileManager.isSameFile()</target>
        </trans-unit>
        <trans-unit id="16484f2da3deb2635899cc3d1bbf56f23e5e2657" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.isSupportedOption()</source>
          <target state="translated">ForwardingJavaFileManager.isSupportedOption()</target>
        </trans-unit>
        <trans-unit id="75313bec6134b78fd917b617b2e56044bec1a101" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileManager.list()</source>
          <target state="translated">ForwardingJavaFileManager.list()</target>
        </trans-unit>
        <trans-unit id="6f0eeb130bea4658c0058c86db411e4f9773f79b" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileObject</source>
          <target state="translated">ForwardingJavaFileObject</target>
        </trans-unit>
        <trans-unit id="efa4cdb96c097d8c1fcde1519e98606db0976dec" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileObject.getAccessLevel()</source>
          <target state="translated">ForwardingJavaFileObject.getAccessLevel()</target>
        </trans-unit>
        <trans-unit id="f867889b30ef208b0898ed0be834cdb9c9a7d5b9" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileObject.getKind()</source>
          <target state="translated">ForwardingJavaFileObject.getKind()</target>
        </trans-unit>
        <trans-unit id="d139cabbc12972498d843e52fe5e80f21c57b46f" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileObject.getNestingKind()</source>
          <target state="translated">ForwardingJavaFileObject.getNestingKind()</target>
        </trans-unit>
        <trans-unit id="bb905d8e36af77b46b8395a42691a706556cce3d" translate="yes" xml:space="preserve">
          <source>ForwardingJavaFileObject.isNameCompatible()</source>
          <target state="translated">ForwardingJavaFileObject.isNameCompatible()</target>
        </trans-unit>
        <trans-unit id="8e33e1fa43292724d71f28f2171f11b3e282e8f1" translate="yes" xml:space="preserve">
          <source>Forwards calls to a given file manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafdb2a1b9d46d2ab731bdf5dee5388ea43f996f" translate="yes" xml:space="preserve">
          <source>Forwards calls to a given file manager. Subclasses of this class might override some of these methods and might also provide additional fields and methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03832796d22a88b6911f46a4e5e04c363796fb4" translate="yes" xml:space="preserve">
          <source>Forwards calls to a given file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a689cd87320d8b826e4a59b53eb47be5e13b21" translate="yes" xml:space="preserve">
          <source>Forwards calls to a given file object. Subclasses of this class might override some of these methods and might also provide additional fields and methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7af766849ecc68e44df8be9900725183e5c5b0" translate="yes" xml:space="preserve">
          <source>Forwards the property change event to the listener delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11b17e88c6f67283ceb02c46d70eb23b26f3ba8" translate="yes" xml:space="preserve">
          <source>Four digits for the &lt;a href=&quot;../temporal/chronofield#YEAR&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;. Only years in the range 0000 to 9999 are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b26473788eaed42f4b4e37cbe223a5277eac607" translate="yes" xml:space="preserve">
          <source>Four digits or more for the &lt;a href=&quot;../temporal/chronofield#YEAR&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;. Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits. Years outside that range will have a prefixed positive or negative symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a066ddbb88328d8623c1c08cf82fc646a39ae3fe" translate="yes" xml:space="preserve">
          <source>Four digits or more for the &lt;a href=&quot;../temporal/isofields#WEEK_BASED_YEAR&quot;&gt;&lt;code&gt;week-based-year&lt;/code&gt;&lt;/a&gt;. Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits. Years outside that range will have a prefixed positive or negative symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6d7e8ed38419a413725453d237573112074f40" translate="yes" xml:space="preserve">
          <source>Four examples make this clear:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58dfcfa57c79e16963d67d6913e52b1432a78a8" translate="yes" xml:space="preserve">
          <source>Four-digit year divided by &lt;code&gt;100&lt;/code&gt;, formatted as two digits with leading zero as necessary, i.e. &lt;code&gt;00 - 99&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02cd083cadc446d31b5a3bfa2afe6f4d82fa3e1" translate="yes" xml:space="preserve">
          <source>Fraction - a fractional value including the decimal place. Always use this when outputting fractions to ensure that the fraction is parsed correctly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d218185fdb8b55bab6f291e36ba91c9acc9b20b8" translate="yes" xml:space="preserve">
          <source>FractionPart</source>
          <target state="translated">FractionPart</target>
        </trans-unit>
        <trans-unit id="b73832098d27c4f1a8629a1ad62b25e60cc0ebea" translate="yes" xml:space="preserve">
          <source>FractionPart:</source>
          <target state="translated">FractionPart:</target>
        </trans-unit>
        <trans-unit id="7163bebc819a2fe56c7648667ea0f4702332eb99" translate="yes" xml:space="preserve">
          <source>FractionPart&lt;sub&gt;opt&lt;/sub&gt;</source>
          <target state="translated">FractionPart&lt;sub&gt;opt&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4597878f45c9dea408987161b21c7c4419d33424" translate="yes" xml:space="preserve">
          <source>Framework-level interface defining an amount of time, such as &quot;6 hours&quot;, &quot;8 days&quot; or &quot;2 years and 3 months&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a2406753b8edd24c490557b4cffa46d7f74b89" translate="yes" xml:space="preserve">
          <source>Framework-level interface defining read-only access to a temporal object, such as a date, time, offset or some combination of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f9d31a11eb78309989f1765259ba01e4199307" translate="yes" xml:space="preserve">
          <source>Framework-level interface defining read-write access to a temporal object, such as a date, time, offset or some combination of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d150e0aaee05d4d7cee80412f889a1b8c7404089" translate="yes" xml:space="preserve">
          <source>French Fries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bf110420a675fc96b0986222d6ddf61340d72d" translate="yes" xml:space="preserve">
          <source>Frequency of persist cycle in seconds, for OnTime and NoMoreOftenThan PersistPolicy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fd12c420b362f1a14f0c1b42c73f1ec8a42dbf" translate="yes" xml:space="preserve">
          <source>Frequency of persist cycle in seconds. Used when persistPolicy is &quot;OnTimer&quot; or &quot;NoMoreOftenThan&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a69aed95e8ffae5bc036a7c37387e652f3fafb" translate="yes" xml:space="preserve">
          <source>Frequently it is necessary to represent a value of primitive type as if it were an object. The wrapper classes &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Double&lt;/code&gt; serve this purpose. An object of type &lt;code&gt;Double&lt;/code&gt;, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type. These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as equals and hashCode. The &lt;code&gt;Void&lt;/code&gt; class is a non-instantiable class that holds a reference to a &lt;code&gt;Class&lt;/code&gt; object representing the type void.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706001f631b76c03b217dd4e18c94a59f690ff2e" translate="yes" xml:space="preserve">
          <source>From a &lt;a href=&quot;../collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; via the &lt;code&gt;stream()&lt;/code&gt; and &lt;code&gt;parallelStream()&lt;/code&gt; methods;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a84b4560423407095a9b8295848644286e4bf8" translate="yes" xml:space="preserve">
          <source>From a given bean, obtain an object representing a specified type view of that source object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9688c1576f213bfdadf00559da94da247e651372" translate="yes" xml:space="preserve">
          <source>From an array via &lt;a href=&quot;../arrays#stream-T:A-&quot;&gt;&lt;code&gt;Arrays.stream(Object[])&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fd9b82b5f6aa647a2e836b39b0858b6a0bd49f" translate="yes" xml:space="preserve">
          <source>From static factory methods on the stream classes, such as &lt;a href=&quot;stream#of-T...-&quot;&gt;&lt;code&gt;Stream.of(Object[])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intstream#range-int-int-&quot;&gt;&lt;code&gt;IntStream.range(int, int)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stream#iterate-T-java.util.function.UnaryOperator-&quot;&gt;&lt;code&gt;Stream.iterate(Object, UnaryOperator)&lt;/code&gt;&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ccaf348e945423e6f19106f8de6956516d245d" translate="yes" xml:space="preserve">
          <source>Full text for stand-alone use, typically the full description. For example, day-of-week Monday might output &quot;Monday&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54e5414bfc1ac2859677ad141f69fa37c0a3b37" translate="yes" xml:space="preserve">
          <source>Full text style, with the most detail. For example, the format might be 'Tuesday, April 12, 1952 AD' or '3:30:42pm PST'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec931aacf271694b45a2e0e1b9e119efae7ee4f5" translate="yes" xml:space="preserve">
          <source>Full text, typically the full description. For example, day-of-week Monday might output &quot;Monday&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7a4d0ae8152bd76fad2dedf5daae347db425d8" translate="yes" xml:space="preserve">
          <source>Fully parses the text producing a temporal object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546d2325d4b2aa5bc631f54a6737200bab838276" translate="yes" xml:space="preserve">
          <source>Fully parses the text producing an object of one of the specified types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db11804ee7e711927998d3b9533884b9f427a57" translate="yes" xml:space="preserve">
          <source>Fully parses the text producing an object of the specified type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dee427616ccbd5a16afa4601c6d2134f31b876" translate="yes" xml:space="preserve">
          <source>Fully qualified filename to log events to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="552343e0d69d21e783e01d2088da6051eb7f808a" translate="yes" xml:space="preserve">
          <source>Function shapes have a natural arity based on how they are most commonly used. The basic shapes can be modified by an arity prefix to indicate a different arity, such as &lt;a href=&quot;bifunction&quot;&gt;&lt;code&gt;BiFunction&lt;/code&gt;&lt;/a&gt; (binary function from &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; to &lt;code&gt;R&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d05f292e634f5b383bb8e76c578ecae45a77d7e" translate="yes" xml:space="preserve">
          <source>Function.andThen()</source>
          <target state="translated">Function.andThen()</target>
        </trans-unit>
        <trans-unit id="123a7fdb6445d809d8f4d6f5511dc1305a43775d" translate="yes" xml:space="preserve">
          <source>Function.apply()</source>
          <target state="translated">Function.apply()</target>
        </trans-unit>
        <trans-unit id="355e3fad3f7669dcd5f1046001a574c47938b076" translate="yes" xml:space="preserve">
          <source>Function.compose()</source>
          <target state="translated">Function.compose()</target>
        </trans-unit>
        <trans-unit id="b99a9b56971fb2b34a3ac32f637069768149697d" translate="yes" xml:space="preserve">
          <source>Function.identity()</source>
          <target state="translated">Function.identity()</target>
        </trans-unit>
        <trans-unit id="7f506d9555e951d8f85e81d8d2b0229b68a1d076" translate="yes" xml:space="preserve">
          <source>Functional Interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0beefde6ddbe4d9c3da47c31869a7ab4640abdf" translate="yes" xml:space="preserve">
          <source>Functional in nature. An operation on a stream produces a result, but does not modify its source. For example, filtering a &lt;code&gt;Stream&lt;/code&gt; obtained from a collection produces a new &lt;code&gt;Stream&lt;/code&gt; without the filtered elements, rather than removing elements from the source collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef3e5bee35bc9f31da195fe1d6c755bb1bded40" translate="yes" xml:space="preserve">
          <source>Functional interfaces often represent abstract concepts like functions, actions, or predicates. In documenting functional interfaces, or referring to variables typed as functional interfaces, it is common to refer directly to those abstract concepts, for example using &quot;this function&quot; instead of &quot;the function represented by this object&quot;. When an API method is said to accept or return a functional interface in this manner, such as &quot;applies the provided function to...&quot;, this is understood to mean a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa336f8d2b9c33c191b9bca1b633e8ac77ec28f" translate="yes" xml:space="preserve">
          <source>FunctionalInterface</source>
          <target state="translated">FunctionalInterface</target>
        </trans-unit>
        <trans-unit id="042baa030c8a3e073d7351989aee02a023dcbe27" translate="yes" xml:space="preserve">
          <source>Further, at capture time, if &lt;code&gt;implMethod&lt;/code&gt; corresponds to an instance method, and there are any capture arguments (&lt;code&gt;K &amp;gt; 0&lt;/code&gt;), then the first capture argument (corresponding to the receiver) must be non-null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db83a4ff5e1ea854dcc3e9f618b0d1647e00276e" translate="yes" xml:space="preserve">
          <source>Further, however the computation is split, it must produce an equivalent result. For any input elements &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, the results &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; in the computation below must be equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb0ede5846b4f5b5308700b2ae5f5fe921d0e0e" translate="yes" xml:space="preserve">
          <source>Further, some operations are deemed &lt;em&gt;short-circuiting&lt;/em&gt; operations. An intermediate operation is short-circuiting if, when presented with infinite input, it may produce a finite stream as a result. A terminal operation is short-circuiting if, when presented with infinite input, it may terminate in finite time. Having a short-circuiting operation in the pipeline is a necessary, but not sufficient, condition for the processing of an infinite stream to terminate normally in finite time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ad44b0e461f23b762099673f0cfc2e6dd56467" translate="yes" xml:space="preserve">
          <source>Furthermore, every Java Print Service instance must fulfill these requirements for processing plain text print data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a0e54b7cf331112b0059d861f459232e967a4f" translate="yes" xml:space="preserve">
          <source>Furthermore, for systems that support federation, all names returned in a &lt;code&gt;NamingEnumeration&lt;/code&gt; from &lt;code&gt;list()&lt;/code&gt; and &lt;code&gt;listBindings()&lt;/code&gt; are composite names represented as strings. See &lt;code&gt;CompositeName&lt;/code&gt; for the string syntax of names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44083f7acbb195710d7a4f74aaffbfba8f6d2bc" translate="yes" xml:space="preserve">
          <source>Furthermore, listener registration/deregistration is with the &lt;code&gt;EventContext&lt;/code&gt;&lt;em&gt;instance&lt;/em&gt;, and not with the corresponding object in the namespace. If the program intends at some point to remove a listener, then it needs to keep a reference to the &lt;code&gt;EventContext&lt;/code&gt; instance on which it invoked &lt;code&gt;addNamingListener()&lt;/code&gt; (just as it needs to keep a reference to the listener in order to remove it later). It cannot expect to do a &lt;code&gt;lookup()&lt;/code&gt; and get another instance of a &lt;code&gt;EventContext&lt;/code&gt; on which to perform the deregistration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426a6acd10b051e29baa63cdfa5e8ae4114b1c8b" translate="yes" xml:space="preserve">
          <source>Furthermore, suppose we want to copy a file tree to a target location. In that case, symbolic links should be followed and the target directory should be created before the entries in the directory are copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bd37f4d44c536f8ac9392ec9bb17e5c0c890e7" translate="yes" xml:space="preserve">
          <source>Furthermore, the document must satisfy the properties DTD described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047ca54032a1756c098d3bc1a941a0ed8e583df8" translate="yes" xml:space="preserve">
          <source>Future</source>
          <target state="translated">Future</target>
        </trans-unit>
        <trans-unit id="d57afc5d447ffcd6ec5b80e38858a4e60fcba591" translate="yes" xml:space="preserve">
          <source>Future connections will not be able to resume or join this session. However, any existing connection using this session can continue to use the session until the connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed3c9a7e281085e7fdc7b4ff2bbb391120b582f" translate="yes" xml:space="preserve">
          <source>Future versions are permitted to add further queries to the if statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208d302164d0239e286d97282f9639de5e677bfe" translate="yes" xml:space="preserve">
          <source>Future versions of the platform may mandate compiler errors for such unsafe operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27aeef148316a57b5cb91edd424b2953746fe45d" translate="yes" xml:space="preserve">
          <source>Future versions of this API may accept additional types, such as abstract classes with single abstract methods. Future versions of this API may also equip wrapper instances with one or more additional public &quot;marker&quot; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4c2635b6d7badd1daaabc404943ff8430a2e2d" translate="yes" xml:space="preserve">
          <source>Future.cancel()</source>
          <target state="translated">Future.cancel()</target>
        </trans-unit>
        <trans-unit id="1b042df65e3113a75ba16fe8ac643a265d9119fd" translate="yes" xml:space="preserve">
          <source>Future.get()</source>
          <target state="translated">Future.get()</target>
        </trans-unit>
        <trans-unit id="b670ef80570cd98a095e67c524abf08c4dfafdda" translate="yes" xml:space="preserve">
          <source>Future.isCancelled()</source>
          <target state="translated">Future.isCancelled()</target>
        </trans-unit>
        <trans-unit id="a42ff6b88c6f35e3a3926420e27a5814beb48993" translate="yes" xml:space="preserve">
          <source>Future.isDone()</source>
          <target state="translated">Future.isDone()</target>
        </trans-unit>
        <trans-unit id="6255759d8a74c7639f11435cf3f2acc6ab79c1ff" translate="yes" xml:space="preserve">
          <source>FutureTask</source>
          <target state="translated">FutureTask</target>
        </trans-unit>
        <trans-unit id="49a2bf945a63a0976bc7bbef056ea284ebb6479e" translate="yes" xml:space="preserve">
          <source>FutureTask.cancel()</source>
          <target state="translated">FutureTask.cancel()</target>
        </trans-unit>
        <trans-unit id="fb69de3999745eb6e985a0fc14df2a837575b769" translate="yes" xml:space="preserve">
          <source>FutureTask.done()</source>
          <target state="translated">FutureTask.done()</target>
        </trans-unit>
        <trans-unit id="51ea9d9a2fd0f4581ac9bb9c314301cc11021766" translate="yes" xml:space="preserve">
          <source>FutureTask.get()</source>
          <target state="translated">FutureTask.get()</target>
        </trans-unit>
        <trans-unit id="97d8923557a39241f2ac57395a8a0dd9df34823a" translate="yes" xml:space="preserve">
          <source>FutureTask.isCancelled()</source>
          <target state="translated">FutureTask.isCancelled()</target>
        </trans-unit>
        <trans-unit id="79a0fc0144320da73b649e8d4d063cc5d1e70c1f" translate="yes" xml:space="preserve">
          <source>FutureTask.isDone()</source>
          <target state="translated">FutureTask.isDone()</target>
        </trans-unit>
        <trans-unit id="608bbbd39742e1e1d9dd5ba8da6b2f2e818ea498" translate="yes" xml:space="preserve">
          <source>FutureTask.run()</source>
          <target state="translated">FutureTask.run()</target>
        </trans-unit>
        <trans-unit id="319674ffee8304f4075dbd8cd4f6f8ed665bd178" translate="yes" xml:space="preserve">
          <source>FutureTask.runAndReset()</source>
          <target state="translated">FutureTask.runAndReset()</target>
        </trans-unit>
        <trans-unit id="b70fec878a1819129cbcd4d396b3e8acd58d9981" translate="yes" xml:space="preserve">
          <source>FutureTask.set()</source>
          <target state="translated">FutureTask.set()</target>
        </trans-unit>
        <trans-unit id="2b0d6f27efc1349a82078f1825d00623a05c96f9" translate="yes" xml:space="preserve">
          <source>FutureTask.setException()</source>
          <target state="translated">FutureTask.setException()</target>
        </trans-unit>
        <trans-unit id="5658b0a69e4cd6f71726feb73678de66c395dd28" translate="yes" xml:space="preserve">
          <source>GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE</source>
          <target state="translated">GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE</target>
        </trans-unit>
        <trans-unit id="91ac4188607e6f94103c99ef5ddb64099c56db38" translate="yes" xml:space="preserve">
          <source>GCMParameterSpec</source>
          <target state="translated">GCMParameterSpec</target>
        </trans-unit>
        <trans-unit id="1c7e42584cee26206818e7294282d186185ad903" translate="yes" xml:space="preserve">
          <source>GCMParameterSpec.getIV()</source>
          <target state="translated">GCMParameterSpec.getIV()</target>
        </trans-unit>
        <trans-unit id="ab7ec015560ec596890f44fe0c92fe889ceb55a8" translate="yes" xml:space="preserve">
          <source>GCMParameterSpec.getTLen()</source>
          <target state="translated">GCMParameterSpec.getTLen()</target>
        </trans-unit>
        <trans-unit id="78414175292d8e8aef50fdf42ad9895549cfd5cd" translate="yes" xml:space="preserve">
          <source>GE</source>
          <target state="translated">GE</target>
        </trans-unit>
        <trans-unit id="f278b32654fc1e386b7b86c0438752f8168e8d90" translate="yes" xml:space="preserve">
          <source>GENERAL_PUNCTUATION</source>
          <target state="translated">GENERAL_PUNCTUATION</target>
        </trans-unit>
        <trans-unit id="3241fe0de9b197bee88e6002dc176a488df9a684" translate="yes" xml:space="preserve">
          <source>GENERIC_FAILURE</source>
          <target state="translated">GENERIC_FAILURE</target>
        </trans-unit>
        <trans-unit id="780230ab36cee956264d803e619a1fa30405351e" translate="yes" xml:space="preserve">
          <source>GENERIC_FAILURE is used for failure that don't fit into one of the other categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bbb6c855512d31b9bbb7427775163fef0faecc" translate="yes" xml:space="preserve">
          <source>GEOMETRIC_SHAPES</source>
          <target state="translated">GEOMETRIC_SHAPES</target>
        </trans-unit>
        <trans-unit id="8770b11c48558ae6713cd93d502a977516745b09" translate="yes" xml:space="preserve">
          <source>GEORGIAN</source>
          <target state="translated">GEORGIAN</target>
        </trans-unit>
        <trans-unit id="a91fe8af81e08d82711943f19e296ef7e8e9dd19" translate="yes" xml:space="preserve">
          <source>GEORGIAN_SUPPLEMENT</source>
          <target state="translated">GEORGIAN_SUPPLEMENT</target>
        </trans-unit>
        <trans-unit id="f168c6faec11f959e2120bd1caeb2a4dc640f96d" translate="yes" xml:space="preserve">
          <source>GERMAN</source>
          <target state="translated">GERMAN</target>
        </trans-unit>
        <trans-unit id="50fa98722e2d7a6ac87084bfdecdc73bd8a3b0f8" translate="yes" xml:space="preserve">
          <source>GERMANY</source>
          <target state="translated">GERMANY</target>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="translated">GET</target>
        </trans-unit>
        <trans-unit id="758f6c9347b91091c38ad698a8eba6aeac47b9c4" translate="yes" xml:space="preserve">
          <source>GIF</source>
          <target state="translated">GIF</target>
        </trans-unit>
        <trans-unit id="94e9a00139f1282e78848b3de0aa3c71c33706a0" translate="yes" xml:space="preserve">
          <source>GIF metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b56b98bd280afbb91944bc0242eed58ec85330" translate="yes" xml:space="preserve">
          <source>GIF metadata format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b235bf1a645948547d6e51443ede24036ae226f0" translate="yes" xml:space="preserve">
          <source>GIF plug-in notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3523a44d98acef83223273ae123c919b2882e034" translate="yes" xml:space="preserve">
          <source>GLAGOLITIC</source>
          <target state="translated">GLAGOLITIC</target>
        </trans-unit>
        <trans-unit id="76940030cf4571f455ee0d7652034a7a2944acce" translate="yes" xml:space="preserve">
          <source>GLOBAL_LOGGER_NAME</source>
          <target state="translated">GLOBAL_LOGGER_NAME</target>
        </trans-unit>
        <trans-unit id="c719345d361024e2bdda11e0f0e4655ca34c95b4" translate="yes" xml:space="preserve">
          <source>GLOBAL_LOGGER_NAME is a name for the global logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ecbeebb320b6eef6209a0715779066704c9e11" translate="yes" xml:space="preserve">
          <source>GLOBAL_SCOPE</source>
          <target state="translated">GLOBAL_SCOPE</target>
        </trans-unit>
        <trans-unit id="d84234ce9f95c2df9a9cb91648dc0629d7b55a78" translate="yes" xml:space="preserve">
          <source>GMT</source>
          <target state="translated">GMT</target>
        </trans-unit>
        <trans-unit id="11b4504afef72ca53523e6426e25d0f24872b244" translate="yes" xml:space="preserve">
          <source>GNU zip compression technology described in &lt;a href=&quot;http://www.ietf.org/rfc/rfc1952.txt&quot;&gt;RFC 1952&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66ee2d2dcbdd0c384fb28b4728b2f73d3644fbf" translate="yes" xml:space="preserve">
          <source>GOPHER</source>
          <target state="translated">GOPHER</target>
        </trans-unit>
        <trans-unit id="ef9fa7728ecfe93114cc56fd734b5fd84438e30b" translate="yes" xml:space="preserve">
          <source>GOTHIC</source>
          <target state="translated">GOTHIC</target>
        </trans-unit>
        <trans-unit id="1dd07c7233f2a323964ee3f43fc6b5b615279cdc" translate="yes" xml:space="preserve">
          <source>GREEK</source>
          <target state="translated">GREEK</target>
        </trans-unit>
        <trans-unit id="aca9fa0a39214f182d5d7d04c7510251222b7af5" translate="yes" xml:space="preserve">
          <source>GREEK_EXTENDED</source>
          <target state="translated">GREEK_EXTENDED</target>
        </trans-unit>
        <trans-unit id="7ee759c1052dfdf296fc197b1e5215c37a048e30" translate="yes" xml:space="preserve">
          <source>GROUPING_SEPARATOR</source>
          <target state="translated">GROUPING_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="e5445936bd450ee8b30022bed0a62f1ecb7b9698" translate="yes" xml:space="preserve">
          <source>GROUP_EXECUTE</source>
          <target state="translated">GROUP_EXECUTE</target>
        </trans-unit>
        <trans-unit id="9ea98eaf4f60e18417119cf3e2c33e5fe9713e03" translate="yes" xml:space="preserve">
          <source>GROUP_READ</source>
          <target state="translated">GROUP_READ</target>
        </trans-unit>
        <trans-unit id="48776c6018f8a72db6196c735df345a7195374c8" translate="yes" xml:space="preserve">
          <source>GROUP_WRITE</source>
          <target state="translated">GROUP_WRITE</target>
        </trans-unit>
        <trans-unit id="d6bd15fefa4d03886f6170295684b38d8d5b725b" translate="yes" xml:space="preserve">
          <source>GSSAPI (&lt;a href=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/a&gt;). This mechanism uses the &lt;a href=&quot;http://www.ietf.org/rfc/rfc2078.txt&quot;&gt;GSSAPI&lt;/a&gt; for obtaining authentication information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1b07ba1d3f58af4c465921af5b16d96fd0bc35" translate="yes" xml:space="preserve">
          <source>GT</source>
          <target state="translated">GT</target>
        </trans-unit>
        <trans-unit id="f47ded0a99798803e57671d91143e9e9c92fdf97" translate="yes" xml:space="preserve">
          <source>GUJARATI</source>
          <target state="translated">GUJARATI</target>
        </trans-unit>
        <trans-unit id="8f15b553993bae14d515d962490acdc5e5bd00a0" translate="yes" xml:space="preserve">
          <source>GURMUKHI</source>
          <target state="translated">GURMUKHI</target>
        </trans-unit>
        <trans-unit id="c0a0df7086cece5998142ac057f6fc84ddc5c9a2" translate="yes" xml:space="preserve">
          <source>GZIP</source>
          <target state="translated">GZIP</target>
        </trans-unit>
        <trans-unit id="d84f67fb8d620d5451e6a2f44aa9ec41817591ab" translate="yes" xml:space="preserve">
          <source>GZIP header magic number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6381de18a20c7500d2fd9e1c3b3f370fca62fe" translate="yes" xml:space="preserve">
          <source>GZIPInputStream</source>
          <target state="translated">GZIPInputStream</target>
        </trans-unit>
        <trans-unit id="c7c6a5cf3ac3d1022e8ebd59f163a99e3b907ae0" translate="yes" xml:space="preserve">
          <source>GZIPInputStream.close()</source>
          <target state="translated">GZIPInputStream.close()</target>
        </trans-unit>
        <trans-unit id="64d8448ac62a57fd9e3c1d2c441eb1a49e38e961" translate="yes" xml:space="preserve">
          <source>GZIPInputStream.read()</source>
          <target state="translated">GZIPInputStream.read()</target>
        </trans-unit>
        <trans-unit id="57bc855f91b19ca5b6a63177631137cc65690cd2" translate="yes" xml:space="preserve">
          <source>GZIPOutputStream</source>
          <target state="translated">GZIPOutputStream</target>
        </trans-unit>
        <trans-unit id="dbab7e44bc7e45033cab897b13fb1ce5c919989b" translate="yes" xml:space="preserve">
          <source>GZIPOutputStream.finish()</source>
          <target state="translated">GZIPOutputStream.finish()</target>
        </trans-unit>
        <trans-unit id="4f23d26a42049becacb4ba185e2f8eb61caa6038" translate="yes" xml:space="preserve">
          <source>GZIPOutputStream.write()</source>
          <target state="translated">GZIPOutputStream.write()</target>
        </trans-unit>
        <trans-unit id="819bfa912aa5f2d206f83d4016c278bad87a16e0" translate="yes" xml:space="preserve">
          <source>GZIP_MAGIC</source>
          <target state="translated">GZIP_MAGIC</target>
        </trans-unit>
        <trans-unit id="c6e3ce2a23ca8a064493484e79449c6b95db4454" translate="yes" xml:space="preserve">
          <source>Gain is a quantity in decibels (dB) that is added to the intrinsic decibel level of the audio signal--that is, the level of the signal before it is altered by the gain control. A positive gain amplifies (boosts) the signal's volume, and a negative gain attenuates (cuts) it. The gain setting defaults to a value of 0.0 dB, meaning the signal's loudness is unaffected. Note that gain measures dB, not amplitude. The relationship between a gain in decibels and the corresponding linear amplitude multiplier is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9dd59335435521795e16af2dfd0031eb1a08688" translate="yes" xml:space="preserve">
          <source>Gap, with zero valid offsets. This is when clocks jump forward typically due to the spring daylight savings change from &quot;winter&quot; to &quot;summer&quot;. In a gap there are local date-time values with no valid offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d392deec5a5c147dd2cb41b1a52dfabacb2fe1" translate="yes" xml:space="preserve">
          <source>Gaps occur where there are local date-times that simply do not exist. An example would be when the offset changes from &lt;code&gt;+01:00&lt;/code&gt; to &lt;code&gt;+02:00&lt;/code&gt;. This might be described as 'the clocks will move forward one hour tonight at 1am'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518e9429e83c5dafc261d5730c35a5402baf6820" translate="yes" xml:space="preserve">
          <source>Gaps occur where there are local date-times that simply do not exist. An example would be when the offset changes from &lt;code&gt;+03:00&lt;/code&gt; to &lt;code&gt;+04:00&lt;/code&gt;. This might be described as 'the clocks will move forward one hour tonight at 1am'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f614ac324abb74a228247af73545afac53e42a36" translate="yes" xml:space="preserve">
          <source>Garage</source>
          <target state="translated">Garage</target>
        </trans-unit>
        <trans-unit id="21ca96a038a03cc7b9b9164e03cf2dbb40c8af56" translate="yes" xml:space="preserve">
          <source>GarbageCollectorMXBean</source>
          <target state="translated">GarbageCollectorMXBean</target>
        </trans-unit>
        <trans-unit id="d845c34ca16032508ee9e309d9e4e79d99e03c00" translate="yes" xml:space="preserve">
          <source>GarbageCollectorMXBean.getCollectionCount()</source>
          <target state="translated">GarbageCollectorMXBean.getCollectionCount()</target>
        </trans-unit>
        <trans-unit id="111b9659333be8476106460efc343f70d41b722b" translate="yes" xml:space="preserve">
          <source>GarbageCollectorMXBean.getCollectionTime()</source>
          <target state="translated">GarbageCollectorMXBean.getCollectionTime()</target>
        </trans-unit>
        <trans-unit id="79876b54e43ec31ff5e1e3d5ddfbffe69ef4c7bf" translate="yes" xml:space="preserve">
          <source>GatheringByteChannel</source>
          <target state="translated">GatheringByteChannel</target>
        </trans-unit>
        <trans-unit id="479491894e2007c73d0f10253983e83a8701001c" translate="yes" xml:space="preserve">
          <source>GatheringByteChannel.write()</source>
          <target state="translated">GatheringByteChannel.write()</target>
        </trans-unit>
        <trans-unit id="7fb0e8c79a7e829225289bb8a9b1a64dbde71457" translate="yes" xml:space="preserve">
          <source>Gauge monitors only:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371e4c4f202f175f0ff0695b96eed24052690b9f" translate="yes" xml:space="preserve">
          <source>GaugeMonitor</source>
          <target state="translated">GaugeMonitor</target>
        </trans-unit>
        <trans-unit id="1b84d1a03f380732e5bcb950a8af202d3147ff01" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getDerivedGauge()</source>
          <target state="translated">GaugeMonitor.getDerivedGauge()</target>
        </trans-unit>
        <trans-unit id="dc02294c16e76850a68775ddc7028c084174d740" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getDerivedGaugeTimeStamp()</source>
          <target state="translated">GaugeMonitor.getDerivedGaugeTimeStamp()</target>
        </trans-unit>
        <trans-unit id="533b7c662d8e3f090acf642447ab7a900f495858" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getDifferenceMode()</source>
          <target state="translated">GaugeMonitor.getDifferenceMode()</target>
        </trans-unit>
        <trans-unit id="cf035e37ab93c553eaf18d23cb2249d1b3f4d5ac" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getHighThreshold()</source>
          <target state="translated">GaugeMonitor.getHighThreshold()</target>
        </trans-unit>
        <trans-unit id="7e0995e7f310b25e991a1fe222580a76642fe3c7" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getLowThreshold()</source>
          <target state="translated">GaugeMonitor.getLowThreshold()</target>
        </trans-unit>
        <trans-unit id="a65a04da6b6a7c86c76a79a5f1f6d2e0bfaff123" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getNotificationInfo()</source>
          <target state="translated">GaugeMonitor.getNotificationInfo()</target>
        </trans-unit>
        <trans-unit id="0696acc6f7eba44b5f88f1805f7945e6cdeea1e7" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getNotifyHigh()</source>
          <target state="translated">GaugeMonitor.getNotifyHigh()</target>
        </trans-unit>
        <trans-unit id="aeff451e371d69f865dfd7285faf80b909bad281" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.getNotifyLow()</source>
          <target state="translated">GaugeMonitor.getNotifyLow()</target>
        </trans-unit>
        <trans-unit id="d3429dcecc80895f2627361a05c4da162e777888" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.setDifferenceMode()</source>
          <target state="translated">GaugeMonitor.setDifferenceMode()</target>
        </trans-unit>
        <trans-unit id="ff9bba51eda30d8963ead684e56df27cd8bba054" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.setNotifyHigh()</source>
          <target state="translated">GaugeMonitor.setNotifyHigh()</target>
        </trans-unit>
        <trans-unit id="cfa21417741690b7547fa18331196640d123f832" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.setNotifyLow()</source>
          <target state="translated">GaugeMonitor.setNotifyLow()</target>
        </trans-unit>
        <trans-unit id="09d7041e5cb24235be31f902c4c0cf08ad8893ad" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.setThresholds()</source>
          <target state="translated">GaugeMonitor.setThresholds()</target>
        </trans-unit>
        <trans-unit id="6cf50a40fd5c9658c5b9ddb96692dd3867760ce6" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.start()</source>
          <target state="translated">GaugeMonitor.start()</target>
        </trans-unit>
        <trans-unit id="abc7f3b68656dafd4f729dadcfbd275a523d09ff" translate="yes" xml:space="preserve">
          <source>GaugeMonitor.stop()</source>
          <target state="translated">GaugeMonitor.stop()</target>
        </trans-unit>
        <trans-unit id="0fa3bf8f1a3107569079c42ffe9ac7e5a2cce950" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean</source>
          <target state="translated">GaugeMonitorMBean</target>
        </trans-unit>
        <trans-unit id="14f45b31852d511abfa91bd3183fd80e99879627" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getDerivedGauge()</source>
          <target state="translated">GaugeMonitorMBean.getDerivedGauge()</target>
        </trans-unit>
        <trans-unit id="06276277905c744fe4989d52ed64579ef55a9a45" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getDerivedGaugeTimeStamp()</source>
          <target state="translated">GaugeMonitorMBean.getDerivedGaugeTimeStamp()</target>
        </trans-unit>
        <trans-unit id="1244a8f228cb7b1810984a908e3c9c4a3a564aff" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getDifferenceMode()</source>
          <target state="translated">GaugeMonitorMBean.getDifferenceMode()</target>
        </trans-unit>
        <trans-unit id="2e18204ed83b3a316183d4f96f875121686b158b" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getHighThreshold()</source>
          <target state="translated">GaugeMonitorMBean.getHighThreshold()</target>
        </trans-unit>
        <trans-unit id="8cc7255a0dea0ed69cf0f80416e7de907327b926" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getLowThreshold()</source>
          <target state="translated">GaugeMonitorMBean.getLowThreshold()</target>
        </trans-unit>
        <trans-unit id="b9f8458107b0fc0c8884c12e334128e8d26cc035" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getNotifyHigh()</source>
          <target state="translated">GaugeMonitorMBean.getNotifyHigh()</target>
        </trans-unit>
        <trans-unit id="f3026aa1a7f6240610d861c33cfb415f485f71b5" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.getNotifyLow()</source>
          <target state="translated">GaugeMonitorMBean.getNotifyLow()</target>
        </trans-unit>
        <trans-unit id="5123ed43a3e411fab0b1606a542dbf5a94686fbd" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.setDifferenceMode()</source>
          <target state="translated">GaugeMonitorMBean.setDifferenceMode()</target>
        </trans-unit>
        <trans-unit id="ffaec27765c305af7714c3f1d37bd05f0f2af0ad" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.setNotifyHigh()</source>
          <target state="translated">GaugeMonitorMBean.setNotifyHigh()</target>
        </trans-unit>
        <trans-unit id="102d4992c582b1ab788fd554832f7563c41d8f4b" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.setNotifyLow()</source>
          <target state="translated">GaugeMonitorMBean.setNotifyLow()</target>
        </trans-unit>
        <trans-unit id="a4b8ecceceae342264a6bcddefa2d7f58305837a" translate="yes" xml:space="preserve">
          <source>GaugeMonitorMBean.setThresholds()</source>
          <target state="translated">GaugeMonitorMBean.setThresholds()</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="29fce19832f9e3ca630f4a44627c0d688f2cd05c" translate="yes" xml:space="preserve">
          <source>General Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5537dfcf4040a457bb174bf6d48eae1b56f94aab" translate="yes" xml:space="preserve">
          <source>General category &quot;Cc&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3580200580fcd436242306f983f3b3507549a6d0" translate="yes" xml:space="preserve">
          <source>General category &quot;Cf&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1d6d98583bd5d286c8c74c0b9f29ebf1956524" translate="yes" xml:space="preserve">
          <source>General category &quot;Cn&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a106be07363c0507044c963eabc93ed51c9f075" translate="yes" xml:space="preserve">
          <source>General category &quot;Co&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ca4907122b18ef856396c0fa40bcff775e3854" translate="yes" xml:space="preserve">
          <source>General category &quot;Cs&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00468af6d9083b471cf09e0ab8f92739e492618c" translate="yes" xml:space="preserve">
          <source>General category &quot;Ll&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257f5f2650986b8ae0295dd63b1dad60b91f932e" translate="yes" xml:space="preserve">
          <source>General category &quot;Lm&quot; in the Unicode specification.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
