<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="8b6b8b03eba324c38b16026469fc914b0b26f4a1" translate="yes" xml:space="preserve">
          <source>Raise a Chebyshev series to a power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1433c91546e5b544c9112df5c69ea4b5d4bbc794" translate="yes" xml:space="preserve">
          <source>Raise a Hermite series to a power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830e9c594b1dd5342a4860749a769faf749549fb" translate="yes" xml:space="preserve">
          <source>Raise a Laguerre series to a power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f4ef6bf7525ff49b10c9a028f44177eac9984c" translate="yes" xml:space="preserve">
          <source>Raise a Legendre series to a power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ff1ebc98b580f0a868022ecc4bb583803a0e8d" translate="yes" xml:space="preserve">
          <source>Raise a polynomial to a power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598e74a434aa280ccb5a0d4397d1af3198e03b9c" translate="yes" xml:space="preserve">
          <source>Raise a square matrix to the (integer) power &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf84ebc042ea6ba8bccb29d049c9e9df161075d" translate="yes" xml:space="preserve">
          <source>Raise each base in &lt;code&gt;x1&lt;/code&gt; to the positionally-corresponding power in &lt;code&gt;x2&lt;/code&gt;. &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; must be broadcastable to the same shape. Note that an integer type raised to a negative integer power will raise a ValueError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cf32ba694b044c00f0cb66b55afd29db6e38fc" translate="yes" xml:space="preserve">
          <source>Raise each base in &lt;code&gt;x1&lt;/code&gt; to the positionally-corresponding power in &lt;code&gt;x2&lt;/code&gt;. &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; must be broadcastable to the same shape. This differs from the power function in that integers, float16, and float32 are promoted to floats with a minimum precision of float64 so that the result is always inexact. The intent is that the function will return a usable result for negative powers and seldom overflow for positive powers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0d5b5d189c7a09dcbd6dbfc47657c8961224d1" translate="yes" xml:space="preserve">
          <source>Raise other to the power self, masking the potential NaNs/Infs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a148c04bf6e6f56f5f6132becf78d9ad2242edd0" translate="yes" xml:space="preserve">
          <source>Raise self to the power other, in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9583ffb7f4b9306704e69d3a8957555d2004a941" translate="yes" xml:space="preserve">
          <source>Raise self to the power other, masking the potential NaNs/Infs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdc396d61629b1fa9fb440d595ae01de00998e3" translate="yes" xml:space="preserve">
          <source>Raise the bases to different exponents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946c9881117f4769309ccb4f4753b1c6ab104379" translate="yes" xml:space="preserve">
          <source>Raised if some values are missing and &lt;code&gt;allow_masked&lt;/code&gt; is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df850d5a3f4aea85bfff38777ca987935cf40c9" translate="yes" xml:space="preserve">
          <source>Raised if the matrix in the least-squares fit is rank deficient. The warning is only raised if &lt;code&gt;full&lt;/code&gt; == False. The warnings can be turned off by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da00b35a6bd8df92262b33514de89f40ea4bb4a" translate="yes" xml:space="preserve">
          <source>Raised when &lt;a href=&quot;#numpy.polynomial.polyutils.as_series&quot;&gt;&lt;code&gt;as_series&lt;/code&gt;&lt;/a&gt; cannot convert its input to 1-d arrays, or at least one of the resulting arrays is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d538ecf7534e2a4aee04c86789066cbbbbb7fd36" translate="yes" xml:space="preserve">
          <source>Raises RuntimeError if the command fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af06132783a2cdeb7f5589b89eb9795871b0985" translate="yes" xml:space="preserve">
          <source>Raises ValueError if &lt;code&gt;a&lt;/code&gt; contains NaN (Not a Number) or Inf (Infinity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0d8fd28b2334fc68f49585d60f498c5a36d167" translate="yes" xml:space="preserve">
          <source>Raises ValueError if array_like contains Nans or Infs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5838177ddf4176063a6650d7806535d5e216dfdd" translate="yes" xml:space="preserve">
          <source>Raises a TypeError if the &lt;code&gt;casting&lt;/code&gt; rule is violated, and if &lt;a href=&quot;numpy.where#numpy.where&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; is provided, it selects which elements to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d5a8fe7dd0c1df476c20449c53be56b0ebef4a" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two array_like objects are not equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56e528b14cd860cf45fa7404007589e1fc25f66" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two array_like objects are not ordered by less than.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63509722f9e035f7aa2150ce097ddf7f3f74dfee" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two items are not equal up to desired precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5050121b028d8c3f8f110816f192ec4646e9c08b" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two items are not equal up to significant digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18d49ef44903f9889dad409de993b3d2359c8f7" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two objects are not equal up to desired precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eec8aca4574ea8e79992164980d49f12a5bd41b" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two objects are not equal up to desired tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb74da1adf4a923cc1aa84dbeef31b75ab9ca5a4" translate="yes" xml:space="preserve">
          <source>Raises an AssertionError if two objects are not equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58c0eec05bcdb93f360c94ce4a7ad4931479f70" translate="yes" xml:space="preserve">
          <source>Random Generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ee7d5a782883cac7905ed8a5a7dfb0448b48c7" translate="yes" xml:space="preserve">
          <source>Random integers of type np.int between &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedcea91bbd64d179e04e09799d9cf9271d320c0" translate="yes" xml:space="preserve">
          <source>Random sampling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8019ea86d533243c05f28cf21472c16f3cb2fc40" translate="yes" xml:space="preserve">
          <source>Random sampling (&lt;code&gt;numpy.random&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2418a38e32562622d550e558d2e9dc0452ea8269" translate="yes" xml:space="preserve">
          <source>Random sampling (numpy.random)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39fb2d156cd5f94ddf1b4788fa2b0750d030bb8" translate="yes" xml:space="preserve">
          <source>Random seed used to initialize the pseudo-random number generator or an instantized BitGenerator. If an integer or array, used as a seed for the MT19937 BitGenerator. Values can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of such integers, or &lt;code&gt;None&lt;/code&gt; (the default). If &lt;a href=&quot;generated/numpy.random.mtrand.randomstate.seed#numpy.random.mtrand.RandomState.seed&quot;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;, then the &lt;code&gt;MT19937&lt;/code&gt; BitGenerator is initialized by reading data from &lt;code&gt;/dev/urandom&lt;/code&gt; (or the Windows analogue) if available or seed from the clock otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d22a70cdea35b31da003cddbde57b86c810e22e" translate="yes" xml:space="preserve">
          <source>Random values in a given shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369338c930fa5a03047b8e593e9d57e7c4df9574" translate="yes" xml:space="preserve">
          <source>Random values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe91084f9d7c58980cd791bb2c03f445f4027255" translate="yes" xml:space="preserve">
          <source>RandomState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abfe5b30869a44fa80ace33a57a4dea540d9c99" translate="yes" xml:space="preserve">
          <source>RandomState.beta()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117bbe1ad097b169318a184cf916d8bda21ad045" translate="yes" xml:space="preserve">
          <source>RandomState.binomial()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7688addfb058dd9c8bc6e7f0f652074d7e0da40" translate="yes" xml:space="preserve">
          <source>RandomState.bytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d807d100f1d2c078c3c4253dae51a58a84c725" translate="yes" xml:space="preserve">
          <source>RandomState.chisquare()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a8fa22fa591f0ac2812b6beccffbc081a8ced9" translate="yes" xml:space="preserve">
          <source>RandomState.choice()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca5326e42f24c901e5134a0c095ddfd8e987557" translate="yes" xml:space="preserve">
          <source>RandomState.dirichlet()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171c35300193fd242db5a609175de4e42464b605" translate="yes" xml:space="preserve">
          <source>RandomState.exponential()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a4d7b7c01aa82b660113e83c3a72985f6e27c5" translate="yes" xml:space="preserve">
          <source>RandomState.f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42925444a2ec80c48c1f18252c6161f41ab5886" translate="yes" xml:space="preserve">
          <source>RandomState.gamma()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6018a1baff27a9708d5584fb9cbb206b1685c2f" translate="yes" xml:space="preserve">
          <source>RandomState.geometric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05b37915f049416037034af2b422f51d76fc256" translate="yes" xml:space="preserve">
          <source>RandomState.get_state()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7475ddf3fd1008f6e5b7593284403fe2835bd476" translate="yes" xml:space="preserve">
          <source>RandomState.gumbel()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40909effe287310315dae74d2602a7f322f6e73d" translate="yes" xml:space="preserve">
          <source>RandomState.hypergeometric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bba1cd6ece88545bfc8dbc08714e80f22e7cdd" translate="yes" xml:space="preserve">
          <source>RandomState.laplace()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd8f116a0b956f305dcdb1b41d9260319ec7bd6" translate="yes" xml:space="preserve">
          <source>RandomState.logistic()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1e1ea0161b7064840f436c5f84019388b9b7dc" translate="yes" xml:space="preserve">
          <source>RandomState.lognormal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f224c663a40ba7265626084f8cd12a33fd8568e9" translate="yes" xml:space="preserve">
          <source>RandomState.logseries()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988b27397e7854ef35df1d0c12826a5ccc94bd34" translate="yes" xml:space="preserve">
          <source>RandomState.multinomial()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769a9ccf0f666dbfccaf0f4af7d45521f9392cae" translate="yes" xml:space="preserve">
          <source>RandomState.multivariate_normal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b3092e2cedc489b3877c56df33a7e90dfd450f" translate="yes" xml:space="preserve">
          <source>RandomState.negative_binomial()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508f85e2459cf4a4183832b94d93d83a1c064cf0" translate="yes" xml:space="preserve">
          <source>RandomState.noncentral_chisquare()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d36da4eda40e0fca9b4e45d8b6d2895907d231" translate="yes" xml:space="preserve">
          <source>RandomState.noncentral_f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af26d3b8a3ab88380bb8fefafa6e3ca3b422e32" translate="yes" xml:space="preserve">
          <source>RandomState.normal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd120fe46cefd3ac55e078d86b937f9ece900d3" translate="yes" xml:space="preserve">
          <source>RandomState.pareto()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80733382a116d845775cbeb2e9d5d64b32ccf6e1" translate="yes" xml:space="preserve">
          <source>RandomState.permutation()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85315ea19abeca7e80e9d82abaad760636c725b1" translate="yes" xml:space="preserve">
          <source>RandomState.poisson()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c006e82fdd89cb4c8db2432157c80a62193a2a7b" translate="yes" xml:space="preserve">
          <source>RandomState.power()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9865287ef22fce91629c4b2b8232b69b5b28df38" translate="yes" xml:space="preserve">
          <source>RandomState.rand()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51329c918acfc931a5fb899c24b774cb871f39bc" translate="yes" xml:space="preserve">
          <source>RandomState.randint()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494b50cf7893ce1ce93248bfc6f4199f99bededd" translate="yes" xml:space="preserve">
          <source>RandomState.randn()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1113329217565317a00d089412f90ae856753c06" translate="yes" xml:space="preserve">
          <source>RandomState.random_integers()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba610994fd27ef5c197ad8b1300cd958ee2a665" translate="yes" xml:space="preserve">
          <source>RandomState.random_sample()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa51e600210bbc45fea02f29afa5092add96d37c" translate="yes" xml:space="preserve">
          <source>RandomState.rayleigh()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5114ae5445053301631d549b7ff7a4a9d904a588" translate="yes" xml:space="preserve">
          <source>RandomState.seed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58759d27c958d2601c144cb64d09680c6804bc94" translate="yes" xml:space="preserve">
          <source>RandomState.set_state()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cc5f02060a215b80f771eb231e0a9a893edd21" translate="yes" xml:space="preserve">
          <source>RandomState.shuffle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea04e88185589f30a9e21cf62ef7dd79ddb3d14" translate="yes" xml:space="preserve">
          <source>RandomState.standard_cauchy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31462b22aa59395f2d79bc4b50eceffeb3a9eb0c" translate="yes" xml:space="preserve">
          <source>RandomState.standard_exponential()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a24bf06ea58bce33a5af1a5c126f0ee1f8025e1" translate="yes" xml:space="preserve">
          <source>RandomState.standard_gamma()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c35aebe764834e8404b41e305b1c2bdba81ebdd" translate="yes" xml:space="preserve">
          <source>RandomState.standard_normal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b083d9e6747bcde501e4678494db914871e70d" translate="yes" xml:space="preserve">
          <source>RandomState.standard_t()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3380e1b312af02ac89689bae2bb6088168223a" translate="yes" xml:space="preserve">
          <source>RandomState.triangular()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1143ee94f68c92354c17829b798d6cc61e45bf47" translate="yes" xml:space="preserve">
          <source>RandomState.uniform()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe3836c67c860d7724f8bafc1259729b6ded377" translate="yes" xml:space="preserve">
          <source>RandomState.vonmises()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4f5bbc134c386db78d0c089acb120512909293" translate="yes" xml:space="preserve">
          <source>RandomState.wald()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85bee6448fb71192f478db49619fa74c6205c64" translate="yes" xml:space="preserve">
          <source>RandomState.weibull()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6d01e0322dc4f43ff3387ee948254b54315337" translate="yes" xml:space="preserve">
          <source>RandomState.zipf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb6aff915e8a822868796528663cb7b4ac76735" translate="yes" xml:space="preserve">
          <source>Randomly permute a sequence, or return a permuted range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0794175b1e2c4f055f2ad52201bb8eb9b1378c74" translate="yes" xml:space="preserve">
          <source>Range of values (maximum - minimum) along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feec534742e6180bc6f13dfd13d717993840b899" translate="yes" xml:space="preserve">
          <source>Rank 1 array of values from &lt;code&gt;arr&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd7f56f262035bd5e958bc2b9266c571bfa88a4" translate="yes" xml:space="preserve">
          <source>Rank of M.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc92a2b8205da3a2012aa3e6853a0cd476fe05ee" translate="yes" xml:space="preserve">
          <source>Rank of matrix &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7144bb73f838f438a5e11fa3d98d000acb0f17" translate="yes" xml:space="preserve">
          <source>Rank of the array is the number of singular values of the array that are greater than &lt;code&gt;tol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a0c5cbfc5ad561b302b5c560c203ddf2c7bf6b" translate="yes" xml:space="preserve">
          <source>Rank-1 array of polynomial coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e1d8ef64d36f788a59d6164ff0298b7a7047c1" translate="yes" xml:space="preserve">
          <source>Rate of interest (per period)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8aa32f5c51e05514476bf761910b88e4024839" translate="yes" xml:space="preserve">
          <source>Rate of interest as decimal (not per cent) per period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adaf8c89741b32243adb83fb6b9be867b96b099" translate="yes" xml:space="preserve">
          <source>Rather than keeping the code and the tests in the same directory, we put all the tests for a given subpackage in a &lt;code&gt;tests/&lt;/code&gt; subdirectory. For our example, if it doesn&amp;rsquo;t already exist you will need to create a &lt;code&gt;tests/&lt;/code&gt; directory in &lt;code&gt;scipy/xxx/&lt;/code&gt;. So the path for &lt;code&gt;test_yyy.py&lt;/code&gt; is &lt;code&gt;scipy/xxx/tests/test_yyy.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09252db0f08958d1124c0c0ec83e5fbbce9daed" translate="yes" xml:space="preserve">
          <source>Rational routines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3804fd84cc4a91cdd7d78ef87d2bbbda2c97d1f4" translate="yes" xml:space="preserve">
          <source>Raw binary files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51edee93cd9862d17771b5ac5e5130d8486f2b82" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;max_rows&lt;/code&gt; lines of content after &lt;code&gt;skiprows&lt;/code&gt; lines. The default is to read all the lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d895fd833731cd91934c31c1d295d35fff066e" translate="yes" xml:space="preserve">
          <source>Read entropy from the system cryptographic provider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d979c06850d2683fe9b1c876d71b5624ad5492" translate="yes" xml:space="preserve">
          <source>Read the elements of &lt;code&gt;a&lt;/code&gt; using this index order, and place the elements into the reshaped array using this index order. &amp;lsquo;C&amp;rsquo; means to read / write the elements using C-like index order, with the last axis index changing fastest, back to the first axis index changing slowest. &amp;lsquo;F&amp;rsquo; means to read / write the elements using Fortran-like index order, with the first index changing fastest, and the last index changing slowest. Note that the &amp;lsquo;C&amp;rsquo; and &amp;lsquo;F&amp;rsquo; options take no account of the memory layout of the underlying array, and only refer to the order of indexing. &amp;lsquo;A&amp;rsquo; means to read / write the elements in Fortran-like index order if &lt;code&gt;a&lt;/code&gt; is Fortran &lt;em&gt;contiguous&lt;/em&gt; in memory, C-like order otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29d40e8d4dd2d512588c53efd334e247e7e23aa" translate="yes" xml:space="preserve">
          <source>Read the raw data from disk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d4558c1993f1b29279c7a9f130025b7da7b20a" translate="yes" xml:space="preserve">
          <source>Read this number of &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; elements from the data. If this is negative (the default), the count will be determined from the length of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cc822fd824db6dc3c5e8c1b3292b5536dfc41c" translate="yes" xml:space="preserve">
          <source>Read-only memmap:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65834d39c25553d999be0e64fb8eacebfad56291" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3336dfc766f437346d42527f2bb08bf580fcb5" translate="yes" xml:space="preserve">
          <source>Reading System Entropy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3f000cd2d7e0bbdf99b156ed745746ae0757e4" translate="yes" xml:space="preserve">
          <source>Reading help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00daacda1f774e8ef3b529d385313b9fab92249" translate="yes" xml:space="preserve">
          <source>Real FFTs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a043af6f91ffeca4e98ebd09648e0d02ca4f4cb9" translate="yes" xml:space="preserve">
          <source>Real and Hermitian transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ab8d27f935ef31b6984ab54d0a6f5e05b4ec7c" translate="yes" xml:space="preserve">
          <source>Real matrix possessing complex e-values and e-vectors; note that the e-values are complex conjugates of each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b776a7f6c2384d7b3b73263bccb6080fef0bf1" translate="yes" xml:space="preserve">
          <source>Real: [R, nan]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61a961728bcbe16c0ce754be8a27e780315994b" translate="yes" xml:space="preserve">
          <source>Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884f57aabc1de0b840a536e3520bd5b5883edcd3" translate="yes" xml:space="preserve">
          <source>Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216b49ee0aedfb3aedf77086e09a1b94f1f7c963" translate="yes" xml:space="preserve">
          <source>Rearranging elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743cf4148aa27f9df1a59d0b870d775d4774e993" translate="yes" xml:space="preserve">
          <source>Recall that all of these functions work element-by-element over an array, returning an array output. The description details only a single operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4178266088da93730148f2c6c6a01298ad6824" translate="yes" xml:space="preserve">
          <source>Recall that each ufunc operates element-by-element. Therefore, each scalar ufunc will be described as if acting on a set of scalar inputs to return a set of scalar outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980dc0df7cdb73496964620d15698c2f0428ced4" translate="yes" xml:space="preserve">
          <source>Recall that what is actually in the ndarray memory representing the Python object is the memory address of that object (a pointer). Special handling may be required, and this attribute is useful for distinguishing data types that may contain arbitrary Python objects and data-types that won&amp;rsquo;t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a66d47be53ca22fc5a34314e82490e949d4fe7" translate="yes" xml:space="preserve">
          <source>Reciprocal of pi (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6422fcc967f452634a501ffeeec039bbb50d3cbc" translate="yes" xml:space="preserve">
          <source>Recommendation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea4439882887c213c7ecb48fa62ede62e03097c" translate="yes" xml:space="preserve">
          <source>Recommended constructor for &lt;a href=&quot;#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d0cdeb4a32cff1ddff345090b62a580d3c3a7c" translate="yes" xml:space="preserve">
          <source>Reconstruct the input array from the unique values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491da7994f572bc7f9afd090d6016edd42393999" translate="yes" xml:space="preserve">
          <source>Reconstruction based on full SVD, 2D case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cdac481f2983ecaa3b30e7e594c24fcec60695" translate="yes" xml:space="preserve">
          <source>Reconstruction based on full SVD, 4D case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06c10b4a18c98f0fc7fe7b3cc3dcff2d3ae9caf" translate="yes" xml:space="preserve">
          <source>Reconstruction based on reduced SVD, 2D case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c930a24dbd33722c39241e13c6c2f20f8cc3d6" translate="yes" xml:space="preserve">
          <source>Reconstruction based on reduced SVD, 4D case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294f5d99cb2ed6671c3855e9edd67a04dae494d0" translate="yes" xml:space="preserve">
          <source>Record arrays (&lt;code&gt;numpy.rec&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ed172808a779dcbda53216460f117741bfc335" translate="yes" xml:space="preserve">
          <source>Rectangular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f37e89ccd8ccfdcb177990c914d24ef1b039af6" translate="yes" xml:space="preserve">
          <source>Recursively add files under data_path to data_files list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a4e79690668403704442ace81e98a32d6a2e19" translate="yes" xml:space="preserve">
          <source>Recursively add files under data_path to the list of data_files to be installed (and distributed). The data_path can be either a relative path-name, or an absolute path-name, or a 2-tuple where the first argument shows where in the install directory the data directory should be installed to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4026384e86db1d0db45b2ae656d5b4a36b00854" translate="yes" xml:space="preserve">
          <source>Red Hat 9 Linux, Python 2.1.3, 2.2.2, 2.3.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f62a19eebe00dd0d30914b3390d1fb624f823b3" translate="yes" xml:space="preserve">
          <source>Reduce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3e64f3984a8edfe88f799af15fac3fcfd7cb8b" translate="yes" xml:space="preserve">
          <source>Reduce a mask to nomask when possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcff1f4fa90545b42b9840306dd69fbde0260e4c" translate="yes" xml:space="preserve">
          <source>Reduce the degree of the series to &lt;code&gt;deg&lt;/code&gt; by discarding the high order terms. If &lt;code&gt;deg&lt;/code&gt; is greater than the current degree a copy of the current series is returned. This can be useful in least squares where the coefficients of the high degree terms may be very small.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060d2daa3132056c1d8c668ddf6a28bae2fd667a" translate="yes" xml:space="preserve">
          <source>Reduce the series to length &lt;code&gt;size&lt;/code&gt; by discarding the high degree terms. The value of &lt;code&gt;size&lt;/code&gt; must be a positive integer. This can be useful in least squares where the coefficients of the high degree terms may be very small.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2dbef2bd3f0f7a180ca5aa3e172bc1585d701e" translate="yes" xml:space="preserve">
          <source>Reduceat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5eee03f058f237d3f3d358449c6d0b29e023090" translate="yes" xml:space="preserve">
          <source>Reduces &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s dimension by one, by applying ufunc along one axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1108278c2fa794141e5f8e9a0528527267dffb" translate="yes" xml:space="preserve">
          <source>Reduction Iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee715ffdde579240ff023f4855c8b8d6155ee4f" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.all#numpy.all&quot;&gt;&lt;code&gt;numpy.all&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6587b92b542fdbb4a5baff56f6177ab573ecd7d3" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.amax#numpy.amax&quot;&gt;&lt;code&gt;numpy.amax&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b6d4dec5f70c0caab2509c6100745193391a46" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.amin#numpy.amin&quot;&gt;&lt;code&gt;numpy.amin&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918fb7a367ac7d5d4169e9e4b82eb726b27f5cfa" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.any#numpy.any&quot;&gt;&lt;code&gt;numpy.any&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c764781ecd32ed5a74be2fd1be8e60131c72834" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.argmax#numpy.argmax&quot;&gt;&lt;code&gt;numpy.argmax&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9356232f82cd1e512f768e5c93fccf615e650fb2" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.argmin#numpy.argmin&quot;&gt;&lt;code&gt;numpy.argmin&lt;/code&gt;&lt;/a&gt; for detailed documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f184257371f6cea08975ef0b761e6642a44ccaec" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.argpartition#numpy.argpartition&quot;&gt;&lt;code&gt;numpy.argpartition&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1432b93ab73b96155d745e69e77ca463bf6be416" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.argsort#numpy.argsort&quot;&gt;&lt;code&gt;numpy.argsort&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb4f53a14e59238d248398047b4ff3204cffe05" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.around#numpy.around&quot;&gt;&lt;code&gt;numpy.around&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc41dd41e10d2920b7ee810c276e5e38612c315" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.choose#numpy.choose&quot;&gt;&lt;code&gt;numpy.choose&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e9fb69d7b0e7310cd14c2976b9696534490507" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.clip#numpy.clip&quot;&gt;&lt;code&gt;numpy.clip&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b9bd379ffd948410aadd60426ca4104c098a5a" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.compress#numpy.compress&quot;&gt;&lt;code&gt;numpy.compress&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6a07d456831003d04fcdc6522f9078ba64965f" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.conjugate#numpy.conjugate&quot;&gt;&lt;code&gt;numpy.conjugate&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5e731505e2f0671af44fb7f7d9bbcb09b6ecc1" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.cumprod#numpy.cumprod&quot;&gt;&lt;code&gt;numpy.cumprod&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9545bf4fb39c4beeb5bc20851f26bf128953bfdd" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.cumsum#numpy.cumsum&quot;&gt;&lt;code&gt;numpy.cumsum&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427e6feb1b8e37ef3c25f942fc43b7db666c8df3" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.diagonal#numpy.diagonal&quot;&gt;&lt;code&gt;numpy.diagonal&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d7934f1e11ac9e5139550583972749b01c1828" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.dot#numpy.dot&quot;&gt;&lt;code&gt;numpy.dot&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c091085769dffc189899264667f0c8a177a86cfb" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.ma.maskedarray.reshape#numpy.ma.MaskedArray.reshape&quot;&gt;&lt;code&gt;MaskedArray.reshape&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a5641bf53ea8057597c5fb66b3691aecd5170c" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.mean#numpy.mean&quot;&gt;&lt;code&gt;numpy.mean&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6319f304f3f96bc433b8f67df52fbc6aaf508b1c" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.nonzero#numpy.nonzero&quot;&gt;&lt;code&gt;numpy.nonzero&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81e6ecf40d12e84db2d904a19c373a674035f6b" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.polyder#numpy.polyder&quot;&gt;&lt;code&gt;polyder&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7b3b5999853643086c583dcb8aed9ef1bcdd33" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.polyint#numpy.polyint&quot;&gt;&lt;code&gt;polyint&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b5eacd297ce85d813bc1561624fe4a69d72ff9" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.prod#numpy.prod&quot;&gt;&lt;code&gt;numpy.prod&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44d00efea2f39f7beb835577b5929890343cd64" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.prod#numpy.prod&quot;&gt;&lt;code&gt;prod&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace68dad5a51dc07901dd7e1e1e8a772c538d586" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.ptp#numpy.ptp&quot;&gt;&lt;code&gt;numpy.ptp&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c5a1f323273353bc38bc9465c5df6337f5f109" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.put#numpy.put&quot;&gt;&lt;code&gt;numpy.put&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2594925a3eb75b8ce851bff48d11a8b6006bc1e8" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.ravel#numpy.ravel&quot;&gt;&lt;code&gt;numpy.ravel&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499184cd72df6b91a11b82f7d74ac301cde10e53" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.ravel#numpy.ravel&quot;&gt;&lt;code&gt;numpy.ravel&lt;/code&gt;&lt;/a&gt; for more documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef541feb8d474f942d13a94aa89940188f4a804" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.repeat#numpy.repeat&quot;&gt;&lt;code&gt;numpy.repeat&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f907913bd4c8ccc10b9a13d0193775c55cc6ff7d" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;numpy.reshape&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24f4759b4d9b9199b3239774120b13bcea55aaf" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.squeeze#numpy.squeeze&quot;&gt;&lt;code&gt;numpy.squeeze&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51bcbb07b70b12d36653c7e9ef76d265208746c" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.squeeze#numpy.squeeze&quot;&gt;&lt;code&gt;numpy.squeeze&lt;/code&gt;&lt;/a&gt; for more documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04f65cfd29719dc36a01fdc76e322696284404a" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.std#numpy.std&quot;&gt;&lt;code&gt;numpy.std&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a10ec3c40044f36f315a0fa63eaf5ae029bc53" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;numpy.sum&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b70d05da30fb3940c04fa729e1ae62d5d48983" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.swapaxes#numpy.swapaxes&quot;&gt;&lt;code&gt;numpy.swapaxes&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71066e2045c3ab6ea36d4654e54228d16ca14ccb" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.take#numpy.take&quot;&gt;&lt;code&gt;numpy.take&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e15b9ca7b28dfec95eef1590fe0662ca2e6c41" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.trace#numpy.trace&quot;&gt;&lt;code&gt;numpy.trace&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544c58f3cd44bb3da554079fc3bed1688548f02e" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;numpy.var#numpy.var&quot;&gt;&lt;code&gt;numpy.var&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6879a5bf758b9e8e660dc546380f5ac35aa2db85" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;numpy.convolve#numpy.convolve&quot;&gt;&lt;code&gt;convolve&lt;/code&gt;&lt;/a&gt; docstring. Note that the default is &amp;lsquo;valid&amp;rsquo;, unlike &lt;a href=&quot;numpy.convolve#numpy.convolve&quot;&gt;&lt;code&gt;convolve&lt;/code&gt;&lt;/a&gt;, which uses &amp;lsquo;full&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263a6234208be5ef3d59a0890356284e292ca294" translate="yes" xml:space="preserve">
          <source>Referencing an array prevents resizing&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba13303e49009a23f584664b434e2957594a3528" translate="yes" xml:space="preserve">
          <source>Register a data-type as a new user-defined data type for arrays. The type must have most of its entries filled in. This is not always checked and errors can produce segfaults. In particular, the typeobj member of the &lt;code&gt;dtype&lt;/code&gt; structure must be filled with a Python type that has a fixed-size element-size that corresponds to the elsize member of &lt;em&gt;dtype&lt;/em&gt;. Also the &lt;code&gt;f&lt;/code&gt; member must have the required functions: nonzero, copyswap, copyswapn, getitem, setitem, and cast (some of the cast functions may be &lt;code&gt;NULL&lt;/code&gt; if no support is desired). To avoid confusion, you should choose a unique character typecode but this is not enforced and not relied on internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cfdbad5b80296572c0d3d59be04e6b4e33bf26" translate="yes" xml:space="preserve">
          <source>Register a low-level casting function, &lt;em&gt;castfunc&lt;/em&gt;, to convert from the data-type, &lt;em&gt;descr&lt;/em&gt;, to the given data-type number, &lt;em&gt;totype&lt;/em&gt;. Any old casting function is over-written. A &lt;code&gt;0&lt;/code&gt; is returned on success or a &lt;code&gt;-1&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ff906dee6928d7009768009956a73876cc7cb8" translate="yes" xml:space="preserve">
          <source>Register the data-type number, &lt;em&gt;totype&lt;/em&gt;, as castable from data-type object, &lt;em&gt;descr&lt;/em&gt;, of the given &lt;em&gt;scalar&lt;/em&gt; kind. Use &lt;em&gt;scalar&lt;/em&gt; = &lt;code&gt;NPY_NOSCALAR&lt;/code&gt; to register that an array of data-type &lt;em&gt;descr&lt;/em&gt; can be cast safely to a data-type whose type_number is &lt;em&gt;totype&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185de5dd74b4ec7dc6bb27c3efce24889bed33f" translate="yes" xml:space="preserve">
          <source>Regular expression matching the warning message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa175fea9fa468197f9e1e8718965f84abd10585" translate="yes" xml:space="preserve">
          <source>Regular expression used to parse the file. Groups in the regular expression correspond to fields in the dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6727b9b992a5091102e015f5469b72c67eeab6" translate="yes" xml:space="preserve">
          <source>Reiss, R.-D. and Thomas M. (2001), &amp;ldquo;Statistical Analysis of Extreme Values, from Insurance, Finance, Hydrology and Other Fields,&amp;rdquo; Birkhauser Verlag, Basel, pp 132-133.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6336c0c76e04197d244be3f3bc01fde02af864f7" translate="yes" xml:space="preserve">
          <source>Reiss, R.-D. and Thomas, M., &amp;ldquo;Statistical Analysis of Extreme Values from Insurance, Finance, Hydrology and Other Fields,&amp;rdquo; Basel: Birkhauser Verlag, 2001.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0545e38146369d589702536ced10cb991667e999" translate="yes" xml:space="preserve">
          <source>Reiss, R.D. and Thomas, M., &amp;ldquo;Statistical Analysis of Extreme Values,&amp;rdquo; Basel: Birkhauser Verlag, 2001, pp. 31-32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d625778c721b24ab67599b6846f999ed9f8fc44" translate="yes" xml:space="preserve">
          <source>Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme Values, Birkhauser Verlag, Basel, pp 23-30.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d98ab0e5da5a01661e4b5891b0a823090d6c4d7" translate="yes" xml:space="preserve">
          <source>Related Python type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0de42e3284e900c945db8ef5cc72983d751b45b" translate="yes" xml:space="preserve">
          <source>Relative condition number of the fit. Singular values smaller than &lt;code&gt;rcond&lt;/code&gt;, relative to the largest singular value, will be ignored. The default value is &lt;code&gt;len(x)*eps&lt;/code&gt;, where &lt;code&gt;eps&lt;/code&gt; is the relative precision of the platform&amp;rsquo;s float type, about 2e-16 in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc8c29d9e44d151818ff32bcfb6059b90a506b3" translate="yes" xml:space="preserve">
          <source>Relative condition number of the fit. Singular values smaller than this relative to the largest singular value will be ignored. The default value is len(x)*eps, where eps is the relative precision of the float type, about 2e-16 in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150f549109a3258102c45788bb4ad19927962624" translate="yes" xml:space="preserve">
          <source>Relative tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0083288cb66e576241f8201330a9d610d509d9" translate="yes" xml:space="preserve">
          <source>Relative tolerance. The relative difference is equal to &lt;code&gt;rtol * b&lt;/code&gt;. Default is 1e-5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eba15cf7a2e5875dfc14e4f85540324e5089ec" translate="yes" xml:space="preserve">
          <source>Release candidates: &amp;lsquo;1.8.0rc1&amp;rsquo;, &amp;lsquo;1.8.0rc2&amp;rsquo;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c720e6812094b3cb5d66f21f2988ede6f99f9ae4" translate="yes" xml:space="preserve">
          <source>Release:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d2a5024fdb35f54ca228db871e078e54e65f81" translate="yes" xml:space="preserve">
          <source>Released version: &amp;lsquo;1.8.0&amp;rsquo;, &amp;lsquo;1.8.1&amp;rsquo;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b8a9d38cd6170258663204bb46b62892a43e1c" translate="yes" xml:space="preserve">
          <source>Relevance is determined only roughly, by checking if the keywords occur in the function name, at the start of a docstring, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a882655de6da131c223642dbb3b9eede2f89eecc" translate="yes" xml:space="preserve">
          <source>Remainder complementary to floor_divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c888806803890c62ed8644b70e2cebae811a3ce7" translate="yes" xml:space="preserve">
          <source>Remainder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f760e6f150e4436f8dafb786626409dd9028c1" translate="yes" xml:space="preserve">
          <source>Remaining &lt;code&gt;Configuration&lt;/code&gt; arguments are all keyword arguments that will be used to initialize attributes of &lt;code&gt;Configuration&lt;/code&gt; instance. Usually, these keywords are the same as the ones that &lt;code&gt;setup(..)&lt;/code&gt; function would expect, for example, &lt;code&gt;packages&lt;/code&gt;, &lt;code&gt;ext_modules&lt;/code&gt;, &lt;code&gt;data_files&lt;/code&gt;, &lt;code&gt;include_dirs&lt;/code&gt;, &lt;code&gt;libraries&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;scripts&lt;/code&gt;, &lt;code&gt;package_dir&lt;/code&gt;, etc. However, the direct specification of these keywords is not recommended as the content of these keyword arguments will not be processed or checked for the consistency of SciPy building system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0b3467e4d0594b9e456ae527adc8fe85578977" translate="yes" xml:space="preserve">
          <source>Remember that a slicing tuple can always be constructed as &lt;em&gt;obj&lt;/em&gt; and used in the &lt;code&gt;x[obj]&lt;/code&gt; notation. Slice objects can be used in the construction in place of the &lt;code&gt;[start:stop:step]&lt;/code&gt; notation. For example, &lt;code&gt;x[1:10:5,::-1]&lt;/code&gt; can also be implemented as &lt;code&gt;obj = (slice(1,10,5), slice(None,None,-1)); x[obj]&lt;/code&gt; . This can be useful for constructing generic code that works on arrays of arbitrary dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17cc087461f5ff09ff60623667d9b82e6ef0b25" translate="yes" xml:space="preserve">
          <source>Remove &amp;ldquo;small&amp;rdquo; &amp;ldquo;trailing&amp;rdquo; coefficients from a polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb37e47b91d0eaaf68529647ece6ef29da40112b" translate="yes" xml:space="preserve">
          <source>Remove large jumps in angle by wrapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab267f7ccd4d54c990d5a9b4faf95c66dfc424f5" translate="yes" xml:space="preserve">
          <source>Remove single-dimensional entries from the shape of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178d549ab751bd0409fce46f2c4c10321cf852af" translate="yes" xml:space="preserve">
          <source>Remove single-dimensional entries from the shape of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dd102c7fe56fdcb5c1b1369100b159cda98b0f" translate="yes" xml:space="preserve">
          <source>Remove small Poly series coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab57e15c3e2608f787c6675d92389afb5c71bce2" translate="yes" xml:space="preserve">
          <source>Remove trailing coefficients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ea3c2af216a48c6c93b6370c0db0e13b1ddcb8" translate="yes" xml:space="preserve">
          <source>Remove trailing coefficients until a coefficient is reached whose absolute value greater than &lt;code&gt;tol&lt;/code&gt; or the beginning of the series is reached. If all the coefficients would be removed the series is set to &lt;code&gt;[0]&lt;/code&gt;. A new series instance is returned with the new coefficients. The current instance remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97614711300d3559a70979f5944161ea7806fdd9" translate="yes" xml:space="preserve">
          <source>Removes an axis from iteration. This requires that &lt;a href=&quot;#c.NPY_ITER_MULTI_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_MULTI_INDEX&lt;/code&gt;&lt;/a&gt; was set for iterator creation, and does not work if buffering is enabled or an index is being tracked. This function also resets the iterator to its initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05df733174e150e42797da4f7348831bce3b423d" translate="yes" xml:space="preserve">
          <source>Removes axis &lt;code&gt;i&lt;/code&gt; from the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c721251db4bf4c660e103a8238872011781b6c" translate="yes" xml:space="preserve">
          <source>Removes axis &lt;code&gt;i&lt;/code&gt; from the iterator. Requires that the flag &amp;ldquo;multi_index&amp;rdquo; be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f49cae3beb4164314b79a381a8eee0522cac55" translate="yes" xml:space="preserve">
          <source>Repeat a 0-D to 2-D array or matrix MxN times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da8a346b5eb3de793d5ca85c842fb180f455420" translate="yes" xml:space="preserve">
          <source>Repeat elements of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7e0a40833f5ee86086c63dc4f61d4fb6c93d4d" translate="yes" xml:space="preserve">
          <source>Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the &lt;a href=&quot;../constants#numpy.nan&quot;&gt;&lt;code&gt;nan&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;posinf&lt;/code&gt; and/or &lt;code&gt;neginf&lt;/code&gt; keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6f360c4b9d09951ba6f209bc15a37b95fa3e42" translate="yes" xml:space="preserve">
          <source>Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the &lt;a href=&quot;constants#numpy.nan&quot;&gt;&lt;code&gt;nan&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;posinf&lt;/code&gt; and/or &lt;code&gt;neginf&lt;/code&gt; keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7254cbaff84040dcc9368f8cd26114efc5140f68" translate="yes" xml:space="preserve">
          <source>Replace a 1-d loop matching the given &lt;em&gt;signature&lt;/em&gt; in the already-created &lt;em&gt;ufunc&lt;/em&gt; with the new 1-d loop newfunc. Return the old 1-d loop function in &lt;em&gt;oldfunc&lt;/em&gt;. Return 0 on success and -1 on failure. This function works only with built-in types (use &lt;a href=&quot;#c.PyUFunc_RegisterLoopForType&quot;&gt;&lt;code&gt;PyUFunc_RegisterLoopForType&lt;/code&gt;&lt;/a&gt; for user-defined types). A signature is an array of data-type numbers indicating the inputs followed by the outputs assumed by the 1-d loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4fe3ae134c18fa9855727458e2adefb3a31912" translate="yes" xml:space="preserve">
          <source>Replace tabs with &lt;code&gt;tabsize&lt;/code&gt; number of spaces. If not given defaults to 8 spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f701afaff1621d2ebc617120f5080cb1c2711d18" translate="yes" xml:space="preserve">
          <source>Replacement functions in &lt;a href=&quot;#module-numpy.matlib&quot;&gt;&lt;code&gt;matlib&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c296794a183bed35c3c17be57c4da03a4014694d" translate="yes" xml:space="preserve">
          <source>Replaces specified elements of an array with given values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0810b570c409ef57a61dd7f13e7a9513771224b7" translate="yes" xml:space="preserve">
          <source>Represent numbers &amp;ldquo;very close&amp;rdquo; to zero as zero; default is False. Very close is defined by precision: if the precision is 8, e.g., numbers smaller (in absolute value) than 5e-9 are represented as zero. Defaults to &lt;code&gt;numpy.get_printoptions()['suppress']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bdfaf483c0a74b51fdd19ece034b39c338067a" translate="yes" xml:space="preserve">
          <source>Represents the data in its native binary form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e109635830067e2be7432585a937e2c5ae0f9bf" translate="yes" xml:space="preserve">
          <source>Require &lt;code&gt;ary&lt;/code&gt; to have a specified number of dimensions. If the array has the specified number of dimensions, return 1. Otherwise, set a Python error and return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aaf8d707a1cdbeea0b98c9afdbb9b06a67f53ab" translate="yes" xml:space="preserve">
          <source>Require &lt;code&gt;ary&lt;/code&gt; to have a specified shape. If the array has the specified shape, return 1. Otherwise, set the Python error string and return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2843d4f2dd954291c9e0b30c50c2076357177f8b" translate="yes" xml:space="preserve">
          <source>Require &lt;code&gt;ary&lt;/code&gt; to have one of a list of specified number of dimensions. If the array has one of the specified number of dimensions, return 1. Otherwise, set the Python error string and return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6c6ab9808318c6dfbeb3cd32bd5fa9595db086" translate="yes" xml:space="preserve">
          <source>Require that &lt;code&gt;ary&lt;/code&gt; is not byte-swapped. If the array is not byte-swapped, return 1. Otherwise, set a Python error and return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9621414160d5366f21cf056c150fb07e957f1b1" translate="yes" xml:space="preserve">
          <source>Require the given &lt;code&gt;PyArrayObject&lt;/code&gt; to to be Fortran ordered. If the &lt;code&gt;PyArrayObject&lt;/code&gt; is already Fortran ordered, do nothing. Else, set the Fortran ordering flag and recompute the strides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec9eba4a4aabbb75c7a771c3cb16f091f6c1a0b" translate="yes" xml:space="preserve">
          <source>Required tolerance for the solution, default 1e-6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5557b8c7a4078474bd9420a5e046cd6c5cfcc8d8" translate="yes" xml:space="preserve">
          <source>Requirements for SciPy packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41487c917b07553e0c89fe1e8da0790f733063c8" translate="yes" xml:space="preserve">
          <source>Requires: Python 2.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4675af44afd83a37bb665a5f55186d4fa182682f" translate="yes" xml:space="preserve">
          <source>Reseed a legacy MT19937 BitGenerator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb432682e6e174d3fa345c0a29c1663268cfb43" translate="yes" xml:space="preserve">
          <source>Reset all the iterators to the beginning in a multi-iterator object, &lt;em&gt;multi&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348a1269b5edd90c644547fa67df603e71329c4c" translate="yes" xml:space="preserve">
          <source>Reset an &lt;em&gt;iterator&lt;/em&gt; to the beginning of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddca2f08a4b84c36d2712fea6cd440a0e598418" translate="yes" xml:space="preserve">
          <source>Reset the broadcasted result&amp;rsquo;s iterator(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a7f05b5509f243e0b123ec92781745f9cbc59f" translate="yes" xml:space="preserve">
          <source>Reset the iterator position to the first point of the neighborhood. This should be called whenever the iter argument given at PyArray_NeighborhoodIterObject is changed (see example)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157eb05bc1063737defb3aaa3d37e8a937aa6169" translate="yes" xml:space="preserve">
          <source>Reset the iterator to its initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c8fba1cc962c4cb501911e267969446b1035d2" translate="yes" xml:space="preserve">
          <source>Reset to default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9d34e9b8d5c18e7758a43e87feb292bfce95bf" translate="yes" xml:space="preserve">
          <source>Resets the iterator and restricts it to the &lt;code&gt;iterindex&lt;/code&gt; range &lt;code&gt;[istart, iend)&lt;/code&gt;. See &lt;a href=&quot;#c.NpyIter_Copy&quot;&gt;&lt;code&gt;NpyIter_Copy&lt;/code&gt;&lt;/a&gt; for an explanation of how to use this for multi-threaded iteration. This requires that the flag &lt;a href=&quot;#c.NPY_ITER_RANGED&quot;&gt;&lt;code&gt;NPY_ITER_RANGED&lt;/code&gt;&lt;/a&gt; was passed to the iterator constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff24a673089be816e4c40398dead3af513af774" translate="yes" xml:space="preserve">
          <source>Resets the iterator back to its initial state, at the beginning of the iteration range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b583188eb4151f14030389235fe3f76d32fe0f1" translate="yes" xml:space="preserve">
          <source>Resets the iterator back to its initial state, but using the values in &lt;code&gt;baseptrs&lt;/code&gt; for the data instead of the pointers from the arrays being iterated. This functions is intended to be used, together with the &lt;code&gt;op_axes&lt;/code&gt; parameter, by nested iteration code with two or more iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b9e5063e5042c78dcfc2599d9423480ff19e4d" translate="yes" xml:space="preserve">
          <source>Resolve all writeback semantics in writeable operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d850abfb4a9180a2bf655c8eceee0708525fbf34" translate="yes" xml:space="preserve">
          <source>Restore the internal state of the masked array, for pickling purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc369eacf1c95507d27a4023881b6510384a2a36" translate="yes" xml:space="preserve">
          <source>Restore the internal state of the masked array, for pickling purposes. &lt;code&gt;state&lt;/code&gt; is typically the output of the &lt;code&gt;__getstate__&lt;/code&gt; output, and is a 5-tuple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc05e8f97c35dafd6a93108b86ba1537b49f1d0d" translate="yes" xml:space="preserve">
          <source>Result when mask == &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc88521d4f82f61ebd70be11b092c5c62f24434a" translate="yes" xml:space="preserve">
          <source>Result when mask == &lt;code&gt;nomask&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588b3d01b506bfab38a1e1a80e0afd09d837fc20" translate="yes" xml:space="preserve">
          <source>Result will be a new array (pointing to the same memory location as &lt;em&gt;self&lt;/em&gt; if possible), but having a shape given by &lt;em&gt;newshape&lt;/em&gt;. If the new shape is not compatible with the strides of &lt;em&gt;self&lt;/em&gt;, then a copy of the array with the new specified shape will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2073abfa2583feee725813a0aa7b4d4a00652b5b" translate="yes" xml:space="preserve">
          <source>Result. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacbf4188ea173ea64cbcfc6c1a2ebe9c7368253" translate="yes" xml:space="preserve">
          <source>Result. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b704a49ea0f270aaeb2fa062a86d4a208d4bdeee" translate="yes" xml:space="preserve">
          <source>Results are from the &amp;ldquo;continuous uniform&amp;rdquo; distribution over the stated interval. To sample</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c568ccd2504e9c8367afdab82be525b80fc3483" translate="yes" xml:space="preserve">
          <source>Retrieves the array parameters for viewing/converting an arbitrary PyObject* to a NumPy array. This allows the &amp;ldquo;innate type and shape&amp;rdquo; of Python list-of-lists to be discovered without actually converting to an array. PyArray_FromAny calls this function to analyze its input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea648a3db0e0b4553bd9dd2a7829fa7481157b81" translate="yes" xml:space="preserve">
          <source>Return (a % i), that is pre-Python 2.6 string formatting (iterpolation), element-wise for a pair of array_likes of str or unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3020c036840e53c7e8d167bddbad0cd1c405b6" translate="yes" xml:space="preserve">
          <source>Return (a * i), that is string multiple concatenation, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da4ff192d7465e38103ce9c749286f7d9de247f" translate="yes" xml:space="preserve">
          <source>Return (maximum - minimum) along the given dimension (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ef75f410be308b93316d3b21f0eb6407eb40cd" translate="yes" xml:space="preserve">
          <source>Return (maximum - minimum) along the given dimension (i.e. peak-to-peak value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adeafcc70b23e232235895bcdf55e36a646b3e4" translate="yes" xml:space="preserve">
          <source>Return (status,output) of executed command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49c4d9d3908bcdddb32c5857584b4580f75831d" translate="yes" xml:space="preserve">
          <source>Return (x1 != x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b675dee05c47dba27162bfc7bff609a478fa7a33" translate="yes" xml:space="preserve">
          <source>Return (x1 &amp;gt; x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc2feb612a398c1ca0bc0648d58947256e06fda" translate="yes" xml:space="preserve">
          <source>Return (x1 &amp;gt;= x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ad5d947f96d7f059a3dad859c9742b804b0aec" translate="yes" xml:space="preserve">
          <source>Return (x1 &amp;lt; x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f09d6c97e69f835ef6dc53afec7d3aa725f2ad" translate="yes" xml:space="preserve">
          <source>Return (x1 &amp;lt;= x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed29abc94e32e786d4a38106b1e3fd1909b5b3ec" translate="yes" xml:space="preserve">
          <source>Return (x1 == x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7dd7eb58972995af93ce5d8c32d5580c5b4edd" translate="yes" xml:space="preserve">
          <source>Return (y1, y2) from &lt;code&gt;x = y1 * 2**y2&lt;/code&gt;, inverse to &lt;a href=&quot;#numpy.ldexp&quot;&gt;&lt;code&gt;ldexp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ef3463bcf3827b20880b37a94902671ef30382" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;#c.NPY_TRUE&quot;&gt;&lt;code&gt;NPY_TRUE&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;a1&lt;/em&gt; and &lt;em&gt;a2&lt;/em&gt; are arrays with equivalent types for this platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ab398a886f5a338c4bcd391e63b7966b0ceee4" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;#c.NPY_TRUE&quot;&gt;&lt;code&gt;NPY_TRUE&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;type1&lt;/em&gt; and &lt;em&gt;type2&lt;/em&gt; actually represent equivalent types for this platform (the fortran member of each type is ignored). For example, on 32-bit platforms, &lt;a href=&quot;c-api.dtype#c.NPY_LONG&quot;&gt;&lt;code&gt;NPY_LONG&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;c-api.dtype#c.NPY_INT&quot;&gt;&lt;code&gt;NPY_INT&lt;/code&gt;&lt;/a&gt; are equivalent. Otherwise return &lt;a href=&quot;#c.NPY_FALSE&quot;&gt;&lt;code&gt;NPY_FALSE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdb3259d10c008137e983f5b3c17ebd6e49650d" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;mailto:self%40value&quot;&gt;self@value&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ed1ce818375b334e64310c8c59e8fe95503a9d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;a&lt;/code&gt; as an array masked where &lt;code&gt;condition&lt;/code&gt; is True. Any masked values of &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;condition&lt;/code&gt; are also masked in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b510555c4321a24851694576ead415921116512" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;a&lt;/code&gt; where condition is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b70610621d36f74b8521944d039f57cdf33d34f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;a&lt;/code&gt; with each element rounded to the given number of decimals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a18485439b35916dc5f997e5963d33a7e35452" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;m&lt;/code&gt; as a boolean mask, creating a copy if necessary or requested. The function can accept any sequence that is convertible to integers, or &lt;code&gt;nomask&lt;/code&gt;. Does not require that contents must be 0s and 1s, values of 0 are interepreted as False, everything else as True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec101325a56d61d51870105ee9260d907655bf98" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;self&lt;/code&gt; as a flattened &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929e1c6e3be4a54fa787f22fa084aac1ba626ae2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;self&lt;/code&gt; as an &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be20763c874efd67eb290e3ad06aad0e90938c68" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;self&lt;/code&gt; as an &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0797a064673cc5729ee06640138925df0a0b635c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;x1&lt;/code&gt; with bits shifted &lt;code&gt;x2&lt;/code&gt; times to the left. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453ab7b6038fdf951e9754315ab9e83d8f83e77d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;x1&lt;/code&gt; with bits shifted &lt;code&gt;x2&lt;/code&gt; times to the right. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b5709a87c4768c8b3232bfe9f788eb6643e507" translate="yes" xml:space="preserve">
          <source>Return NULL on failure (in which case the reference count of iter is not changed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607783436b747557c4014e3eeaa7e2d4377ee410" translate="yes" xml:space="preserve">
          <source>Return Pearson product-moment correlation coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2626f3f02e48b03ddf27a0104abeda6947755186" translate="yes" xml:space="preserve">
          <source>Return True if all elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal subject to given tolerances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e28d221e0f25c7a98fe78a1e454144dabc4eec" translate="yes" xml:space="preserve">
          <source>Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e3af57a92c7bcc5752912e21eb8a42fbc6b70e" translate="yes" xml:space="preserve">
          <source>Return True if all items in lst are string objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdbb15645f2cb7ccd7a3b7ac81b64530429ab6d" translate="yes" xml:space="preserve">
          <source>Return True if m is a valid, standard mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d2f9317679838302e7f7267a6f84e8db1ad24a" translate="yes" xml:space="preserve">
          <source>Return True if sources contains C++ files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3802a4a5b8659cfe2e5fc13fa239e1795042f9b" translate="yes" xml:space="preserve">
          <source>Return True if sources contains Fortran files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e78d089ac3d88820c882d46d8143de7c68e18b" translate="yes" xml:space="preserve">
          <source>Return True if x is a complex type or an array of complex numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa94ce7eb99f882612387971d94f98f2249e10a" translate="yes" xml:space="preserve">
          <source>Return True if x is a not complex type or an array of complex numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949586ac8687fefdaada25290c949ae12be49d65" translate="yes" xml:space="preserve">
          <source>Return True if x is not a complex type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff4baa0675de7fc24bd7cacdcde0d347af2ba21" translate="yes" xml:space="preserve">
          <source>Return a 0-dimensional array of type determined by &lt;em&gt;outcode&lt;/em&gt; from &lt;em&gt;scalar&lt;/em&gt; which should be an array-scalar object. If &lt;em&gt;outcode&lt;/em&gt; is NULL, then the type is determined from &lt;em&gt;scalar&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52ef40bd717923edba3b2673120d5aafcb4ed62" translate="yes" xml:space="preserve">
          <source>Return a 1-D array containing the elements of the input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bdfe648209432914da520e37e737b85aa14cf4" translate="yes" xml:space="preserve">
          <source>Return a 2-D array with ones on the diagonal and zeros elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91517544536a7c5b8d2ff9c7e78afdfb3aef44df" translate="yes" xml:space="preserve">
          <source>Return a 3-tuple for pickling a MaskedArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e53c37d6b77aaad4ef67ffa0933d21c98e80b4" translate="yes" xml:space="preserve">
          <source>Return a MaskedArray, masked where the data in array &lt;code&gt;x&lt;/code&gt; are approximately equal to &lt;code&gt;value&lt;/code&gt;, determined using &lt;code&gt;isclose&lt;/code&gt;. The default tolerances for &lt;a href=&quot;#numpy.ma.masked_values&quot;&gt;&lt;code&gt;masked_values&lt;/code&gt;&lt;/a&gt; are the same as those for &lt;code&gt;isclose&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3673193517a6493ea6d7bd92c412ba5e0c3a5f81" translate="yes" xml:space="preserve">
          <source>Return a Python dictionary containing the callable Python objects stored in the internal arithmetic operation table. The keys of this dictionary are given in the explanation for &lt;a href=&quot;#c.PyArray_SetNumericOps&quot;&gt;&lt;code&gt;PyArray_SetNumericOps&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc69ad6044ff027feb0d3fdc25e8b39058d6eeac" translate="yes" xml:space="preserve">
          <source>Return a boolean indicating whether the data is contiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f696ef239486981e576e48f6564e9101d37ba6c" translate="yes" xml:space="preserve">
          <source>Return a boolean mask of the given shape, filled with False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664bb9fa387ff0eede3291e4637ec9237e7d4003" translate="yes" xml:space="preserve">
          <source>Return a contiguous array (ndim &amp;gt;= 1) in memory (C order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33728b7601018ae71bcefebae8379558c9171ab5" translate="yes" xml:space="preserve">
          <source>Return a contiguous flattened array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbef29fca8fa327d15bdd98bf55a361ea5eb16e" translate="yes" xml:space="preserve">
          <source>Return a copy of &lt;code&gt;a&lt;/code&gt; with its elements centered in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88886d32c956bee86995b83b237737283cb8bbf9" translate="yes" xml:space="preserve">
          <source>Return a copy of &lt;code&gt;a&lt;/code&gt; with only the first character of each element capitalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16a99a7cd41ef9815eca635cb6782a3736ff419" translate="yes" xml:space="preserve">
          <source>Return a copy of a matrix with the elements below the &lt;code&gt;k&lt;/code&gt;-th diagonal zeroed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3e289b93725eae0153b5a7f0f809573e71ee4c" translate="yes" xml:space="preserve">
          <source>Return a copy of a, rounded to &amp;lsquo;decimals&amp;rsquo; places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aab5ac7cb1261dfee6a4476c63cfa6e7ff4886" translate="yes" xml:space="preserve">
          <source>Return a copy of an array sorted along the first axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e543cd4880dededfe90bdf87a6349661e52f24a" translate="yes" xml:space="preserve">
          <source>Return a copy of an array with elements above the &lt;code&gt;k&lt;/code&gt;-th diagonal zeroed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb09f908f4d8842be8d810a5dda78cfde408ef2" translate="yes" xml:space="preserve">
          <source>Return a copy of each string element where all tab characters are replaced by one or more spaces, depending on the current column and the given &lt;code&gt;tabsize&lt;/code&gt;. The column number is reset to zero after each newline occurring in the string. This doesn&amp;rsquo;t understand other non-printing characters or escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52d1817faa0489d41a2297f6a44b1321dd17b7b" translate="yes" xml:space="preserve">
          <source>Return a copy of each string element where all tab characters are replaced by one or more spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adee7741b5feb572ad64b5aafa747a23667c6d0b" translate="yes" xml:space="preserve">
          <source>Return a copy of self, with masked values filled with a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e11419b302195588d9f7c41a94e599bf78c841" translate="yes" xml:space="preserve">
          <source>Return a copy of self, with masked values filled with a given value. &lt;strong&gt;However&lt;/strong&gt;, if there are no masked values to fill, self will be returned instead as an ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65c034c766c929fc8e8515317122d09c8f553f4" translate="yes" xml:space="preserve">
          <source>Return a copy of the array collapsed into one dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad9094be8eea9eed0b8caa7aaa709dd8a78a556" translate="yes" xml:space="preserve">
          <source>Return a copy of the array data as a (nested) Python list. Data items are converted to the nearest compatible builtin Python type, via the &lt;a href=&quot;numpy.ndarray.item#numpy.ndarray.item&quot;&gt;&lt;code&gt;item&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b980439b8813bd7e38e164ed9f2e0c99f8274be6" translate="yes" xml:space="preserve">
          <source>Return a copy of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8bbe6743ef8941b2ffe79a35b3a694572a1ef4" translate="yes" xml:space="preserve">
          <source>Return a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acbc21966cb7a2646dcaa4b438f4b9a27e30965" translate="yes" xml:space="preserve">
          <source>Return a data-type object from an array-scalar object. No checking is done to be sure that &lt;em&gt;scalar&lt;/em&gt; is an array scalar. If no suitable data-type can be determined, then a data-type of &lt;a href=&quot;c-api.dtype#c.NPY_OBJECT&quot;&gt;&lt;code&gt;NPY_OBJECT&lt;/code&gt;&lt;/a&gt; is returned by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd50dfbb3184486913583c1c389ba169493af8a" translate="yes" xml:space="preserve">
          <source>Return a derivative of this polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aea1a7b00cc07d1e68b875078581401387e6dc" translate="yes" xml:space="preserve">
          <source>Return a description for the given data type code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6117a29a298384179c86a605d9141ecafb1e0fd5" translate="yes" xml:space="preserve">
          <source>Return a diagonal, &lt;a href=&quot;numpy.diag#numpy.diag&quot;&gt;&lt;code&gt;numpy.diag&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adde3b917fd9c1390d394a53053e18ebd28924e5" translate="yes" xml:space="preserve">
          <source>Return a dictionary compatible with the keyword arguments of distutils setup function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88749f378ab59c1c779adb2ce5fc812a248de10a" translate="yes" xml:space="preserve">
          <source>Return a domain suitable for given abscissae.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9b3f3ddec09d4e9ab3746bc0635f9681a4420a" translate="yes" xml:space="preserve">
          <source>Return a flat iterator over an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b5368028869f26406aac8d009ad5ad9272f8f3" translate="yes" xml:space="preserve">
          <source>Return a flat iterator, or set a flattened version of self to value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c92497175e0afbe05534b4dc205f173e44dcae6" translate="yes" xml:space="preserve">
          <source>Return a flattened array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfef0460a1c33d4ce0b30bb4d74507ce7b18060b" translate="yes" xml:space="preserve">
          <source>Return a flattened copy of the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0c08169386efecd6dbb5c99513b8608e8ee355" translate="yes" xml:space="preserve">
          <source>Return a flattened matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775091a441a9fe6c509e6eac8914147738ae0ebd" translate="yes" xml:space="preserve">
          <source>Return a full array with the same shape and type as a given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a89b43bf21a827410094352cafcbd70b7b093d" translate="yes" xml:space="preserve">
          <source>Return a masked array with elements from &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;, depending on condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c3441a078f53e98541ad04f4f000bc26e30fb2" translate="yes" xml:space="preserve">
          <source>Return a matrix of given shape and type, filled with ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3215bbd81fea624d6a34b40bd33eda825ba5a0ec" translate="yes" xml:space="preserve">
          <source>Return a matrix of given shape and type, filled with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1939220966d050fe46ef32a5756b8c3e9b93fe43" translate="yes" xml:space="preserve">
          <source>Return a matrix of ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69829526a35cf00c4aab1bc57f23d18bda709816" translate="yes" xml:space="preserve">
          <source>Return a matrix of random values with given shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa52769fade88f165e1e6b19c6fefe4b078b4e1" translate="yes" xml:space="preserve">
          <source>Return a matrix with ones on the diagonal and zeros elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec9f1c6f41ab360a84892cc5eb8e1bfb3a26629" translate="yes" xml:space="preserve">
          <source>Return a new &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; with a different byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e308003e0daa1b669914ea3640892334366132e" translate="yes" xml:space="preserve">
          <source>Return a new array of given shape and type, filled with &lt;code&gt;fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6e5f2e8abf7154aa290d36d300ec998dd78ac5" translate="yes" xml:space="preserve">
          <source>Return a new array of given shape and type, filled with ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e2632cca8d1d734350311ac3c7c0fdbb818975" translate="yes" xml:space="preserve">
          <source>Return a new array of given shape and type, filled with zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f023e998d4498716e267f981d56b70c1849604" translate="yes" xml:space="preserve">
          <source>Return a new array of given shape and type, without initializing entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec022809e1e8df1391835bc6104b62ff64b0e4a" translate="yes" xml:space="preserve">
          <source>Return a new array of given shape filled with value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7889ee95d708e619f9f136620743f75253306560" translate="yes" xml:space="preserve">
          <source>Return a new array of the &lt;em&gt;type&lt;/em&gt; specified, casting the elements of &lt;em&gt;arr&lt;/em&gt; as appropriate. The fortran argument specifies the ordering of the output array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e7adce468f032b241e6f3f4d863e7cc0a9aea6" translate="yes" xml:space="preserve">
          <source>Return a new array setting values to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef2024f4e382c1f0d34374cb0a551fe920f2f40" translate="yes" xml:space="preserve">
          <source>Return a new array setting values to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0a6cb3468a356aea15ba59cf8a26ba7feb2fde" translate="yes" xml:space="preserve">
          <source>Return a new array with shape of input filled with value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58bf55dd74db8cdb131211206ed655cd79c5312" translate="yes" xml:space="preserve">
          <source>Return a new array with sub-arrays along an axis deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6283c52c5dd7532b6acc7c4858235c6c9dcf2f1f" translate="yes" xml:space="preserve">
          <source>Return a new array with sub-arrays along an axis deleted. For a one dimensional array, this returns those entries not returned by &lt;code&gt;arr[obj]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24c92c86cceb929ca5a57450467b3018e9ca6d2" translate="yes" xml:space="preserve">
          <source>Return a new array with the same shape and type as a given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888468a67b158752120bf7aad0907d225286b96f" translate="yes" xml:space="preserve">
          <source>Return a new array with the specified shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2bdb72b5ea4cc88bd3af8bed8c594a3e8ad281" translate="yes" xml:space="preserve">
          <source>Return a new data-type object copied from &lt;em&gt;obj&lt;/em&gt; (the fields reference is just updated so that the new object points to the same fields dictionary if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00c4497cb20249180f5cc002a7f870062fa7d9c" translate="yes" xml:space="preserve">
          <source>Return a new dtype with a different byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f0b2192ea788359b82b9940bfc8ce53ba36765" translate="yes" xml:space="preserve">
          <source>Return a new masked array with the specified size and shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b97c7cdd0c52df929f85c56c9008ae403f5119c" translate="yes" xml:space="preserve">
          <source>Return a new matrix of given shape and type, without initializing entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a5e1c9ff27f882a4c11f29f7940f25047ce131" translate="yes" xml:space="preserve">
          <source>Return a new uninitialized array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145459239b266df133889e07ea0d4280854c1000" translate="yes" xml:space="preserve">
          <source>Return a parititioned copy of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a065725c5133d0cbe64183a0ffd5cb73c5839c49" translate="yes" xml:space="preserve">
          <source>Return a partitioned copy of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c8d86e1b061dfb280c405f0466ad8e650740b7" translate="yes" xml:space="preserve">
          <source>Return a path to a temporary directory where temporary files should be placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f80ab216d72e2c78c4fa0b6bd848f067d2fc48" translate="yes" xml:space="preserve">
          <source>Return a pointer to the data of the ndarray, &lt;em&gt;aobj&lt;/em&gt;, at the N-dimensional index given by the c-array, &lt;em&gt;ind&lt;/em&gt;, (which must be at least &lt;em&gt;aobj&lt;/em&gt; -&amp;gt;nd in size). You may want to typecast the returned pointer to the data type of the ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7f61b11971c1ad8e737004571a4f0870667828" translate="yes" xml:space="preserve">
          <source>Return a possibly reshaped matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff40c73d765733f44f99e1b3a2d920d2b654808" translate="yes" xml:space="preserve">
          <source>Return a random matrix with data from the &amp;ldquo;standard normal&amp;rdquo; distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae7033f1a0e744826d269ec0ba2f40bd5fd3daa" translate="yes" xml:space="preserve">
          <source>Return a sample (or samples) from the &amp;ldquo;standard normal&amp;rdquo; distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13f9f203f3c17efcbcef4c841e8c9704bc7ebca" translate="yes" xml:space="preserve">
          <source>Return a scalar type which is common to the input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63a1b287ca4888daabd9a1edcfb9f1e609e071b" translate="yes" xml:space="preserve">
          <source>Return a series instance of that is the derivative of the current series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be3bab3c7ce2a4fdde876c5655404aa0047a549" translate="yes" xml:space="preserve">
          <source>Return a series instance that is the definite integral of the current series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b225efd4dfce58c9a38bffe5147a1a4e3c84ce" translate="yes" xml:space="preserve">
          <source>Return a series instance that is the least squares fit to the data &lt;code&gt;y&lt;/code&gt; sampled at &lt;code&gt;x&lt;/code&gt;. The domain of the returned instance can be specified and this will often result in a superior fit with less chance of ill conditioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830d7f320c53ee48889eed091d514fe0214f98ef" translate="yes" xml:space="preserve">
          <source>Return a sorted copy of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab607a136d6ba12da14d48cc8dc2c6b1289be81" translate="yes" xml:space="preserve">
          <source>Return a sparse representation of the grid instead of a dense representation. Default is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05923109da0a7ddb7038e93693ea541efa00c398" translate="yes" xml:space="preserve">
          <source>Return a string corresponding to the pickling of a masked array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74dcb41a777b2df955ae96f395f746a7b8f2c2c3" translate="yes" xml:space="preserve">
          <source>Return a string describing the type corresponding to the NumPy &lt;code&gt;typecode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0619e1062515cc88487d581e0a56d9acfa92127" translate="yes" xml:space="preserve">
          <source>Return a string describing the type of &lt;code&gt;py_obj&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170f36e7a1533323378ac01975fc88b830ac9237" translate="yes" xml:space="preserve">
          <source>Return a string representation of a number in the given base system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fd41eb410f441568a30c3fa1655d8162a3d9ec" translate="yes" xml:space="preserve">
          <source>Return a string representation of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8610c5f439d32a176e13634197d79c0564315a7" translate="yes" xml:space="preserve">
          <source>Return a string representation of the data in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df00559c5c5cc5cc5fd466d621ac52faa8be2fea" translate="yes" xml:space="preserve">
          <source>Return a string which is the concatenation of the strings in the sequence &lt;code&gt;seq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879fbd3d4645c43c568195d4cb56b98d1c438c1b" translate="yes" xml:space="preserve">
          <source>Return a tuple representing the internal state of the generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181d2af75ba3f44bd05085994fdbae10de3fb98d" translate="yes" xml:space="preserve">
          <source>Return a version string of the current package or None if the version information could not be detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3660600aef853f94a98106c6764985ecaf0527d9" translate="yes" xml:space="preserve">
          <source>Return a view of the array with &lt;code&gt;axis1&lt;/code&gt; and &lt;code&gt;axis2&lt;/code&gt; interchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc073acf13e62fa61ea36092d502a1616860a186" translate="yes" xml:space="preserve">
          <source>Return absolute path of file in the DataSource directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e7ff73ee52b8b861dd79f5b9cb1eb541060c75" translate="yes" xml:space="preserve">
          <source>Return all the non-masked data as a 1-D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f767ff856d792720f8ab5dc126531696bc9c21" translate="yes" xml:space="preserve">
          <source>Return an aligned and in native-byteorder array from any nested sequence or array-interface exporting object, op, of a type given by the enumerated typenum. The minimum number of dimensions the array can have is given by min_depth while the maximum is max_depth. This is equivalent to a call to &lt;a href=&quot;#c.PyArray_FromAny&quot;&gt;&lt;code&gt;PyArray_FromAny&lt;/code&gt;&lt;/a&gt; with requirements set to BEHAVED.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66279e2d53118bd68e050fae27493d00d8d8e96" translate="yes" xml:space="preserve">
          <source>Return an antiderivative (indefinite integral) of a polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfc9e1a86b3fc8a3522f688b2f10859a2eee985" translate="yes" xml:space="preserve">
          <source>Return an antiderivative (indefinite integral) of this polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5117c8b82d7c28967c4a7bd7f57699969ebb235a" translate="yes" xml:space="preserve">
          <source>Return an array (ndim &amp;gt;= 1) laid out in Fortran order in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4afbdf67931d9476f269bff0e3f090d3a9d2c8" translate="yes" xml:space="preserve">
          <source>Return an array converted to a float type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d017e1d1615664dabeba2d574ee7b74d5acc9b20" translate="yes" xml:space="preserve">
          <source>Return an array copy of the given object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170e5dca8042aeabefb47af0e960f0b599a7de9a" translate="yes" xml:space="preserve">
          <source>Return an array drawn from elements in choicelist, depending on conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af786f00e24a9329539eb423a718fa8f5fc3469" translate="yes" xml:space="preserve">
          <source>Return an array formed from the elements of &lt;code&gt;a&lt;/code&gt; at the given indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d5e16ee6e20869b410e5b872f9359fdc357cdd" translate="yes" xml:space="preserve">
          <source>Return an array iterator object from the array, &lt;em&gt;arr&lt;/em&gt;. This is equivalent to &lt;em&gt;arr&lt;/em&gt;. &lt;strong&gt;flat&lt;/strong&gt;. The array iterator object makes it easy to loop over an N-dimensional non-contiguous array in C-style contiguous fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77506242fd4ae97ca7ccbff9f520fe9fbb4835f1" translate="yes" xml:space="preserve">
          <source>Return an array iterator that is broadcast to iterate as an array of the shape provided by &lt;em&gt;dimensions&lt;/em&gt; and &lt;em&gt;nd&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00434db0950175f84a37dd2cb42bb1827e4a4ef1" translate="yes" xml:space="preserve">
          <source>Return an array iterator that will iterate over all axes but the one provided in &lt;em&gt;*axis&lt;/em&gt;. The returned iterator cannot be used with &lt;a href=&quot;#c.PyArray_ITER_GOTO1D&quot;&gt;&lt;code&gt;PyArray_ITER_GOTO1D&lt;/code&gt;&lt;/a&gt;. This iterator could be used to write something similar to what ufuncs do wherein the loop over the largest axis is done by a separate sub-routine. If &lt;em&gt;*axis&lt;/em&gt; is negative then &lt;em&gt;*axis&lt;/em&gt; will be set to the axis having the smallest stride and that axis will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8066cd7632ba39c67d1a98283f2a29b24a505220" translate="yes" xml:space="preserve">
          <source>Return an array of ones with shape and type of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e04cba6b3d0a722a761046137f33e8343a544f" translate="yes" xml:space="preserve">
          <source>Return an array of ones with the same shape and type as a given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6344adc68aba46044eb292608cf8837556104b5a" translate="yes" xml:space="preserve">
          <source>Return an array of zeros with shape and type of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d75443385d040d8c8d874ee2340e5551d0c701" translate="yes" xml:space="preserve">
          <source>Return an array of zeros with the same shape and type as a given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d9ff53081358660342429c958079def9b00591" translate="yes" xml:space="preserve">
          <source>Return an array representing the indices of a grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbb54e923e9a6d04f0c7fcaa662d1dd67c5e43a" translate="yes" xml:space="preserve">
          <source>Return an array scalar object of the given enumerated &lt;em&gt;typenum&lt;/em&gt; and &lt;em&gt;itemsize&lt;/em&gt; by &lt;strong&gt;copying&lt;/strong&gt; from memory pointed to by &lt;em&gt;data&lt;/em&gt; . If &lt;em&gt;swap&lt;/em&gt; is nonzero then this function will byteswap the data if appropriate to the data-type because array scalars are always in correct machine-byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399d4e635ec1adbd5dfbf3230db78e0c12779cd3" translate="yes" xml:space="preserve">
          <source>Return an array scalar object of the type and itemsize indicated by the array object &lt;em&gt;arr&lt;/em&gt; copied from the memory pointed to by &lt;em&gt;data&lt;/em&gt; and swapping if the data in &lt;em&gt;arr&lt;/em&gt; is not in machine byte-order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1190f74ad965959fb48a3dc80fe92f2c3f3103" translate="yes" xml:space="preserve">
          <source>Return an array whose values are limited to &lt;code&gt;[min, max]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2154a6a6b19b3b662ec1a206d44e31ac573cf8" translate="yes" xml:space="preserve">
          <source>Return an array whose values are limited to &lt;code&gt;[min, max]&lt;/code&gt;. One of max or min must be given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86785ec02149d694e5087521991c50fb5ad7ba3b" translate="yes" xml:space="preserve">
          <source>Return an array with the elements converted to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a28776d4d2ac4783194393ab802545c72661b7f" translate="yes" xml:space="preserve">
          <source>Return an array with the elements converted to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9696cce12133fb07b1d5edefab2a3bd33019311" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;a&lt;/code&gt; left-justified in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c23a149ac47d3848455a8aee8eeca7f1196fb3b" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;a&lt;/code&gt; right-justified in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d6531878f0685fceadebe2f43cdb40b13d704c" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;self&lt;/code&gt; converted to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cf6418e3495dbc819b81c691cc00f776e49dc6" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;self&lt;/code&gt; converted to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecf7d11b05471a8c237ab086fb40fe8490ee8c7" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;self&lt;/code&gt; left-justified in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5ccddcb7e4de21f973f75aa06355164cc00ded" translate="yes" xml:space="preserve">
          <source>Return an array with the elements of &lt;code&gt;self&lt;/code&gt; right-justified in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef32cb089162ebbc8e52b7e2dd930d6fb4a7e4e4" translate="yes" xml:space="preserve">
          <source>Return an empty array with shape and type of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2b4921b83bb1b13bd60e474a88f58755588214" translate="yes" xml:space="preserve">
          <source>Return an empty masked array of the given shape and dtype, where all the data are masked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e767ab3a7aae5ce7ffe9d2df07fade983f9e9244" translate="yes" xml:space="preserve">
          <source>Return an empty masked array of the same shape and dtype as the array &lt;code&gt;arr&lt;/code&gt;, where all the data are masked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad0f08f99be9b044f2ed4322537f71b7c843b63" translate="yes" xml:space="preserve">
          <source>Return an iterator yielding pairs of array coordinates and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c59378e179c2432aba52e141f97ebf90abae57a" translate="yes" xml:space="preserve">
          <source>Return an ndarray object from a Python object that exposes the &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; method can take 0, 1, or 2 arguments ([dtype, context]) where &lt;em&gt;context&lt;/em&gt; is used to pass information about where the &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; method is being called from (currently only used in ufuncs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6664aaaa0641f0ccc95d3d4eb54350eccb532a51" translate="yes" xml:space="preserve">
          <source>Return an ndarray of indices that sort the array along the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d17e0398a169a53ba50c2c1b319d33e0140ffa" translate="yes" xml:space="preserve">
          <source>Return an ndarray of indices that sort the array along the specified axis. Masked values are filled beforehand to &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ffb60c0b3a0efc23fb632fe354e482e35cd7a6" translate="yes" xml:space="preserve">
          <source>Return an ndarray of indices that sort the array along the specified axis. Masked values are filled beforehand to &lt;code&gt;fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fbf8220103ddb9c53170063536b30474a33647" translate="yes" xml:space="preserve">
          <source>Return an ndarray of the provided type that satisfies requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ada08d8047b8df4503fc4522bfcc89c1a25638" translate="yes" xml:space="preserve">
          <source>Return an ndarray that satisfies requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e1a9c5253a377f8506194fde1a0366a56d0452" translate="yes" xml:space="preserve">
          <source>Return angle in degrees if True, radians if False (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc97163bbaf810ad94899db6b407050a1d72893" translate="yes" xml:space="preserve">
          <source>Return argument as a list of 1-d arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65e8de3edca7d51a52dbb7e866b657f80db9fc9" translate="yes" xml:space="preserve">
          <source>Return array of indices to the minimum values along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98152078b349ec5d519e8a6a71c6e66c4d29e3fe" translate="yes" xml:space="preserve">
          <source>Return array. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0661c214d2d0844b0d359a1af55f448de09a3656" translate="yes" xml:space="preserve">
          <source>Return arrays with the results of &lt;code&gt;pyfunc&lt;/code&gt; broadcast (vectorized) over &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; not in &lt;code&gt;excluded&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5fb9eeccde5c9c7236050ce7125538aa893324" translate="yes" xml:space="preserve">
          <source>Return coordinate matrices from coordinate vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8ee345f22c13090cbd2835276652e43114d963" translate="yes" xml:space="preserve">
          <source>Return current fill value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f729ca85d8f9d1b1461590bf5883214f95a308" translate="yes" xml:space="preserve">
          <source>Return divmod(self, value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8629cc0f96b954806ed6ee5e1df4b14918dc93c4" translate="yes" xml:space="preserve">
          <source>Return divmod(value, self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128825b3bf2b3ea4df47587be0de36fcbc688dc5" translate="yes" xml:space="preserve">
          <source>Return each element rounded to the given number of decimals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef351dc645829077720b3431460e8268f0837b2" translate="yes" xml:space="preserve">
          <source>Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d896070c4728289c4f19df6b7db496a522962e7" translate="yes" xml:space="preserve">
          <source>Return element-wise quotient and remainder simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca204fd37a7a4a3b46282b6ed19dffe665cc94ce" translate="yes" xml:space="preserve">
          <source>Return element-wise remainder of division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea3f02c278fe4b6a68bfe9759fdc49bc980bd7a" translate="yes" xml:space="preserve">
          <source>Return element-wise string concatenation for two arrays of str or unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87347b80d55d5b4b95e9de495b5ee0615cc35270" translate="yes" xml:space="preserve">
          <source>Return element-wise title cased version of string or unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3de68e1002d9cc42fa2e59eabedd905c8452ed" translate="yes" xml:space="preserve">
          <source>Return elements chosen from &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; depending on &lt;code&gt;condition&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff1c0935b9d253793c15c707adff4cd22ea5eb3" translate="yes" xml:space="preserve">
          <source>Return elements from one of two arrays depending on condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8455e3b64d335f63bd00c06673ed005bca48e50" translate="yes" xml:space="preserve">
          <source>Return evenly spaced numbers over a specified interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c30939f37a827553c0024d78babd3f4ad2fa87" translate="yes" xml:space="preserve">
          <source>Return evenly spaced values within a given interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99394c77c90b30de96d7c974f4a4b1fd264d4481" translate="yes" xml:space="preserve">
          <source>Return four lists of filenames containing C, C++, Fortran, and Fortran 90 module sources, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7387b418d9f6dfd808d5a006f1821b54a6eec51" translate="yes" xml:space="preserve">
          <source>Return full path of a executable or None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1bd17605fa0487f34d589570003ec49fbd2285" translate="yes" xml:space="preserve">
          <source>Return in &lt;em&gt;ctypeptr&lt;/em&gt; a pointer to the actual value in an array scalar. There is no error checking so &lt;em&gt;scalar&lt;/em&gt; must be an array-scalar object, and ctypeptr must have enough space to hold the correct type. For flexible-sized types, a pointer to the data is copied into the memory of &lt;em&gt;ctypeptr&lt;/em&gt;, for all other types, the actual data is copied into the address pointed to by &lt;em&gt;ctypeptr&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873e597a31c34fe96c973365624c44fe45d0d7d7" translate="yes" xml:space="preserve">
          <source>Return indices of the maximum values along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041af7ad25cd95d6f6f1b8938190424428178ec5" translate="yes" xml:space="preserve">
          <source>Return indices of the minimum values along the given axis of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd29e51aaf57b191eecd4fc9b13a04ba5fa2e91" translate="yes" xml:space="preserve">
          <source>Return indices that are non-zero in the flattened version of a.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c16b5d89e590cb6d8c1a867eabb703f3eb14a31" translate="yes" xml:space="preserve">
          <source>Return indices that are non-zero in the flattened version of the input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1860e4004449695d790cbba55c6224f09b2baf87" translate="yes" xml:space="preserve">
          <source>Return information (from system_info.get_info) for all of the names in the argument list in a single dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e1bc4a156b6f026125ee65f12de5a3128e7409" translate="yes" xml:space="preserve">
          <source>Return input as an array with masked data replaced by a fill value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9744e747f2b1f674d9941b1a1e3d9abcfe1fb035" translate="yes" xml:space="preserve">
          <source>Return input with invalid data masked and replaced by a fill value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b653cdf8611cf1f0478e2d3c0735b2921b794baa" translate="yes" xml:space="preserve">
          <source>Return key in self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1de5f0bace36216d6e256f4c76393c8e600e13" translate="yes" xml:space="preserve">
          <source>Return len(a) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d576870585f90e333487220c512c1a51875cb0dd" translate="yes" xml:space="preserve">
          <source>Return len(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4887f31ac3d6334741d7265aeea8144ca7014c7" translate="yes" xml:space="preserve">
          <source>Return list of slices corresponding to the unmasked clumps of a 1-D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2d4afd33f706ab53730aff1eea4d1bf0613dd0" translate="yes" xml:space="preserve">
          <source>Return list of slices corresponding to the unmasked clumps of a 1-D array. (A &amp;ldquo;clump&amp;rdquo; is defined as a contiguous region of the array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0a807d3796d53139734276e3195436111aa0de" translate="yes" xml:space="preserve">
          <source>Return list of subpackage configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0f64fe1c28c681e7e2a55e51d7b9b858cadecf" translate="yes" xml:space="preserve">
          <source>Return matrix rank of array using SVD method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832874161951d5b4d63e9c73341b8dc2a238dea2" translate="yes" xml:space="preserve">
          <source>Return minimum of an array or minimum along an axis, ignoring any NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93145b3b4eb9c25f250f22bfae16e4311d2c06c9" translate="yes" xml:space="preserve">
          <source>Return minimum of an array or minimum along an axis, ignoring any NaNs. When all-NaN slices are encountered a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised and Nan is returned for that slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80737688b70b41c1ef4edcf9d7deb5e1618fb0ca" translate="yes" xml:space="preserve">
          <source>Return numbers spaced evenly on a log scale (a geometric progression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11808e9c937b1321f4e999a48d25c13ad47453a3" translate="yes" xml:space="preserve">
          <source>Return numbers spaced evenly on a log scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e27e01e89b5a3d1aa3d0371caeb283721d935e2" translate="yes" xml:space="preserve">
          <source>Return pow(self, value, mod).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e8c597196da7c65ddf89579e6fe597cb85e4ff" translate="yes" xml:space="preserve">
          <source>Return random bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a683fb570e10edeb9cc13b12a726fe2dd30255" translate="yes" xml:space="preserve">
          <source>Return random floats in the half-open interval [0.0, 1.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b09dab43b6c7bb7380f85506b73fd770e8ca3a" translate="yes" xml:space="preserve">
          <source>Return random integers from &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (exclusive), or if endpoint=True, &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796677177cbd9c9dc8ce4db8cf18e41fbff19804" translate="yes" xml:space="preserve">
          <source>Return random integers from &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (exclusive), or if endpoint=True, &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (inclusive). Replaces &lt;code&gt;RandomState.randint&lt;/code&gt; (with endpoint=False) and &lt;code&gt;RandomState.random_integers&lt;/code&gt; (with endpoint=True)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b6c986d9a15a5e07319436d1e8beebf1515839" translate="yes" xml:space="preserve">
          <source>Return random integers from &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (exclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c338afb5862bc6062e9cdc1e51e0d790a4b8136" translate="yes" xml:space="preserve">
          <source>Return random integers from the &amp;ldquo;discrete uniform&amp;rdquo; distribution of the specified dtype in the &amp;ldquo;half-open&amp;rdquo; interval [&lt;code&gt;low&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt;). If &lt;code&gt;high&lt;/code&gt; is None (the default), then results are from [0, &lt;code&gt;low&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4929b70c69998becf7685a33d2d9a9f3015377f" translate="yes" xml:space="preserve">
          <source>Return random integers from the &amp;ldquo;discrete uniform&amp;rdquo; distribution of the specified dtype. If &lt;code&gt;high&lt;/code&gt; is None (the default), then results are from 0 to &lt;code&gt;low&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ea3812dd860d28929c4d807dcde0771c5d9986" translate="yes" xml:space="preserve">
          <source>Return random integers of type np.int from the &amp;ldquo;discrete uniform&amp;rdquo; distribution in the closed interval [&lt;code&gt;low&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt;]. If &lt;code&gt;high&lt;/code&gt; is None (the default), then results are from [1, &lt;code&gt;low&lt;/code&gt;]. The np.int type translates to the C long integer type and its precision is platform dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8f9fe066dbf62430e4d42a4ec499b3573bf7df" translate="yes" xml:space="preserve">
          <source>Return randoms as generated by the underlying BitGenerator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec37cb57da1f255e6c2d2d2e17028f5b1d8bb8cd" translate="yes" xml:space="preserve">
          <source>Return repr(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6383d5a6c17ca0abcefc02690bba60e0561864c8" translate="yes" xml:space="preserve">
          <source>Return selected slices of an array along given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0fd0a8f2343addeb1c68ba36e2e05acf3b6d39" translate="yes" xml:space="preserve">
          <source>Return selected slices of this array along given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc27ba337413347f79be0b609647582c1f22e13e" translate="yes" xml:space="preserve">
          <source>Return self!=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1c5be61e3dd597bada50bbfa8e6dd4fb7c2392" translate="yes" xml:space="preserve">
          <source>Return self%=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7787a077c80e8349350de9abbe606e3523165c78" translate="yes" xml:space="preserve">
          <source>Return self%value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f0714c5fc9115159e11d3fd89439f75dfa3286" translate="yes" xml:space="preserve">
          <source>Return self&amp;amp;=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237de3324c92c285797fedb96a68e2d6640ed3c9" translate="yes" xml:space="preserve">
          <source>Return self&amp;amp;value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44827376552b2a842128319ca3318e39ae34bd2e" translate="yes" xml:space="preserve">
          <source>Return self&amp;gt;&amp;gt;=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011150f6388f658d9e3d21942fee57cc14a79639" translate="yes" xml:space="preserve">
          <source>Return self&amp;gt;&amp;gt;value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8baa4a5325ec11bc689bd0db62f117abf8da901a" translate="yes" xml:space="preserve">
          <source>Return self&amp;gt;=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7394ebaac6c7494522d67297bedddf0478e1ba44" translate="yes" xml:space="preserve">
          <source>Return self&amp;gt;value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a698376c94178010fa87711e3457d502de173543" translate="yes" xml:space="preserve">
          <source>Return self&amp;lt;&amp;lt;=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4723f2f576660db58b4b2f9339ea62652e38455a" translate="yes" xml:space="preserve">
          <source>Return self&amp;lt;&amp;lt;value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5100132214d61bf45b79a5b20e0340140a23d289" translate="yes" xml:space="preserve">
          <source>Return self&amp;lt;=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc86df02efdb82e554a4bbb7a1a182ae6e5d07cf" translate="yes" xml:space="preserve">
          <source>Return self&amp;lt;value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44547f5740a99bd8ecfb49927c153b3a9c1b220e" translate="yes" xml:space="preserve">
          <source>Return self**=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce082d316f4a4afe7869689f71546081e449dd0" translate="yes" xml:space="preserve">
          <source>Return self*=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd808afc929c9a5a43900e5ca4727123df36d77" translate="yes" xml:space="preserve">
          <source>Return self*value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0fbec6801cc4f6d2711624032f93782157348d" translate="yes" xml:space="preserve">
          <source>Return self+=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2d46c8ac67bc610dd228e7d6aa84df21988375" translate="yes" xml:space="preserve">
          <source>Return self+value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad77198cfe01947089734297020a2c0a56bb6d04" translate="yes" xml:space="preserve">
          <source>Return self-=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886ded690781d661dde797edc5633d180e8dfb26" translate="yes" xml:space="preserve">
          <source>Return self-value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685d93c4c91a1240b76ac1f18de095c6ce750923" translate="yes" xml:space="preserve">
          <source>Return self//=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71abc6977b1b5fb4223886b50331f0c4fdb800a7" translate="yes" xml:space="preserve">
          <source>Return self//value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9787285f95825a002f6f95f38f467599e6c68b9" translate="yes" xml:space="preserve">
          <source>Return self/=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87ab5115ec630a67c531dc071bb80cdc3a2bd97" translate="yes" xml:space="preserve">
          <source>Return self/value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb74c996b266a0aa0ae21f7bf70d6f69e0020c3" translate="yes" xml:space="preserve">
          <source>Return self==value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb93dff1e98693906538a3f98f35374d9a2bd867" translate="yes" xml:space="preserve">
          <source>Return self[key].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c93325f57b48591aa97bd53f5c63a2ec39bd657" translate="yes" xml:space="preserve">
          <source>Return self^=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3126659c6526e28bb7153cfcfd03ff4ab8dd800" translate="yes" xml:space="preserve">
          <source>Return self^value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8094eb3d3da8ab9a45f38819941cdef743cb1fca" translate="yes" xml:space="preserve">
          <source>Return self|=value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da260362ecb1b626c0014c65867009eccbc0858f" translate="yes" xml:space="preserve">
          <source>Return self|value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9121393e642e36bf30a2c9b84acaca405edc4339" translate="yes" xml:space="preserve">
          <source>Return series instance that has the specified roots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb647ff4a80853ce579365ffd9d52a8b38c5c6d" translate="yes" xml:space="preserve">
          <source>Return specified diagonals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b365ab7b1e29bf26c41c3af8df7860485113ba4" translate="yes" xml:space="preserve">
          <source>Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions. In a future version the read-only restriction will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1cb29405b1bc906272c1067dd4d35540e32cc8" translate="yes" xml:space="preserve">
          <source>Return str(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a7c66114e74f59de33226d45065de420080980" translate="yes" xml:space="preserve">
          <source>Return the (builtin) typenumber for the elements of this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c12644e0c8484eda0b2cff1b78a348369bc182" translate="yes" xml:space="preserve">
          <source>Return the &lt;a href=&quot;arrays.classes#numpy.class.__array_priority__&quot;&gt;&lt;code&gt;__array_priority__&lt;/code&gt;&lt;/a&gt; attribute (converted to a double) of &lt;em&gt;obj&lt;/em&gt; or &lt;em&gt;def&lt;/em&gt; if no attribute of that name exists. Fast returns that avoid the attribute lookup are provided for objects of type &lt;a href=&quot;c-api.types-and-structures#c.PyArray_Type&quot;&gt;&lt;code&gt;PyArray_Type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59dbba03c62f10cf91c2ce18678cc1627e0baff0" translate="yes" xml:space="preserve">
          <source>Return the Bartlett window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90e381dab188e19738d44cb26ddfd57d3e899f4" translate="yes" xml:space="preserve">
          <source>Return the Blackman window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2700804f46d3f323c9b4fbb9565dd810df413854" translate="yes" xml:space="preserve">
          <source>Return the Cholesky decomposition, &lt;code&gt;L * L.H&lt;/code&gt;, of the square matrix &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;L&lt;/code&gt; is lower-triangular and .H is the conjugate transpose operator (which is the ordinary transpose if &lt;code&gt;a&lt;/code&gt; is real-valued). &lt;code&gt;a&lt;/code&gt; must be Hermitian (symmetric if real-valued) and positive-definite. Only &lt;code&gt;L&lt;/code&gt; is actually returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb653cad78e245bd3dc2eae6f945e424681f60a" translate="yes" xml:space="preserve">
          <source>Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f23a84d36ce116942c9dbcc705845b92af4584" translate="yes" xml:space="preserve">
          <source>Return the Discrete Fourier Transform sample frequencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de1c8285514e46dfcf3db584fc0a16543254ff4" translate="yes" xml:space="preserve">
          <source>Return the Hamming window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd9a7b19984d105be88f0145dd5ba76d2bea242" translate="yes" xml:space="preserve">
          <source>Return the Hanning window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6e388ba3a92b5c9858c571d028c38b2e3e32af" translate="yes" xml:space="preserve">
          <source>Return the Internal Rate of Return (IRR).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433ed9faa69d98de5c16e688b54637a716ec1b02" translate="yes" xml:space="preserve">
          <source>Return the Kaiser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2044f5632f8f78806cde4cd166e8562f85969ce9" translate="yes" xml:space="preserve">
          <source>Return the addresses of the data and mask areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f07c1ed328647d449fbd1991ebde85eb9513ae2" translate="yes" xml:space="preserve">
          <source>Return the angle of the complex argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47d1f137c577e571514929a713330c5a1f2709f" translate="yes" xml:space="preserve">
          <source>Return the array as an &lt;code&gt;a.ndim&lt;/code&gt;-levels deep nested list of Python scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c134ee0d8cd3c61d0996edfc1615333223652f2" translate="yes" xml:space="preserve">
          <source>Return the array data as a string containing the raw bytes in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01347bb67c2eed84d3df8676a79ed41fc3ab703" translate="yes" xml:space="preserve">
          <source>Return the array with the same data viewed with a different byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b819e213aad8225d8bab5fee13aeddd95a04b37b" translate="yes" xml:space="preserve">
          <source>Return the average along the specified axis. When &lt;code&gt;returned&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, return a tuple with the average as the first element and the sum of the weights as the second element. &lt;code&gt;sum_of_weights&lt;/code&gt; is of the same type as &lt;code&gt;retval&lt;/code&gt;. The result dtype follows a genereal pattern. If &lt;code&gt;weights&lt;/code&gt; is None, the result dtype will be that of &lt;code&gt;a&lt;/code&gt; , or &lt;code&gt;float64&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is integral. Otherwise, if &lt;code&gt;weights&lt;/code&gt; is not None and &lt;code&gt;a&lt;/code&gt; is non- integral, the result type will be the type of lowest precision capable of representing values of both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;weights&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; happens to be integral, the previous rules still applies but the result dtype will at least be &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e790c341833768703ae28277a828488dbb4ccc5" translate="yes" xml:space="preserve">
          <source>Return the base 10 logarithm of the input array, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c91544626a93e259a7d328b7c8e9e3bc61e0b9" translate="yes" xml:space="preserve">
          <source>Return the bin edges &lt;code&gt;(length(hist)+1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717c38f150702f547fff8f470de20526485be865" translate="yes" xml:space="preserve">
          <source>Return the binary representation of the input number as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cb7a9021f6ebef49b3beaaf080fae07e8bb3b3" translate="yes" xml:space="preserve">
          <source>Return the ceiling of the input, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e815c127df4fa978cfa8313340cadcea3f4ca5" translate="yes" xml:space="preserve">
          <source>Return the character for the minimum-size type to which given types can be safely cast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81bc03212c90c5cc5ec033f587ea9e84258f174" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a Chebyshev series of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094f7e83e63a84ae3298249f2c0f4dd3300b102b" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a Hermite series of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43df7b715d9b7ca42399203d1d775f575da8188" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a HermiteE series of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0ef637c2bd4a1996cc5ab306e09c25ffc96afa" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a Laguerre series of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea852724b637a7c74620ec4a4272acff0201dd3" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a Legendre series of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23771e05270d3342052ca7018e78be7f695d586" translate="yes" xml:space="preserve">
          <source>Return the coefficients of a polynomial of degree &lt;code&gt;deg&lt;/code&gt; that is the least squares fit to the data values &lt;code&gt;y&lt;/code&gt; given at points &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;y&lt;/code&gt; is 1-D the returned coefficients will also be 1-D. If &lt;code&gt;y&lt;/code&gt; is 2-D multiple fits are done, one for each column of &lt;code&gt;y&lt;/code&gt;, and the resulting coefficients are stored in the corresponding columns of a 2-D return. The fitted polynomial(s) are in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c278519486b71d5dea961e7975bb299a52877d0a" translate="yes" xml:space="preserve">
          <source>Return the coefficients of the polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37ae5d3086166bb430af87ece0e6c96cfcc5ddf" translate="yes" xml:space="preserve">
          <source>Return the common filling value of two masked arrays, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d88442f098e1e70bbdfacf473df16f0911dec8d" translate="yes" xml:space="preserve">
          <source>Return the companion matrix of c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bff30508a6452c14f550f9ae13e224f526c8fd" translate="yes" xml:space="preserve">
          <source>Return the complex conjugate, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35011452a751eebc1f3bc4539ecd7fac117d869c" translate="yes" xml:space="preserve">
          <source>Return the coordinates of all the non-zero values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ae1c4ca2f088dedf5b85d158674c005d0552c4" translate="yes" xml:space="preserve">
          <source>Return the cross product of two (arrays of) vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06365e1fb95e9f5a0bfa329aea19daceaf90abbb" translate="yes" xml:space="preserve">
          <source>Return the cube-root of an array, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e0604ea188e2232bd3de741c76b0df5bd6a733" translate="yes" xml:space="preserve">
          <source>Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709034b99b655358d670908fb89adaaa6caabb86" translate="yes" xml:space="preserve">
          <source>Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one. The cumulative product does not change when NaNs are encountered and leading NaNs are replaced by ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05783c27257d0e912c3de75930f37a7d6949eee" translate="yes" xml:space="preserve">
          <source>Return the cumulative product of elements along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ba67c8490d62e8e8b1330c312d453f9b10f10b" translate="yes" xml:space="preserve">
          <source>Return the cumulative product of the array elements over the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a749224838b735e2ef4f586e1b995ce99a7c6a13" translate="yes" xml:space="preserve">
          <source>Return the cumulative product of the elements along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0aae9bb479e789cd29928067bcf95116970ccb" translate="yes" xml:space="preserve">
          <source>Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7dc08579a55d77ab24e46b6b65ebc38e611553" translate="yes" xml:space="preserve">
          <source>Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero. The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db82feb043b5b4ca001ec7ecdddbd7cf17da3a70" translate="yes" xml:space="preserve">
          <source>Return the cumulative sum of the array elements over the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bed9aa0e529150f58fd1656c1ec9a7c9cdb48d" translate="yes" xml:space="preserve">
          <source>Return the cumulative sum of the elements along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f46eef6061a556e56e15414baaf486af827b3bb" translate="yes" xml:space="preserve">
          <source>Return the cumulative sum of the elements along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdfff21a271ffd8fb3b48dfe12e050df2fd9051" translate="yes" xml:space="preserve">
          <source>Return the current callback function used on floating-point errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a234b663607d5d6e00b725f2f14860803912b28" translate="yes" xml:space="preserve">
          <source>Return the current object that defines floating-point error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1dcd0f19b5235844d8c635c6083a03f7def8d1" translate="yes" xml:space="preserve">
          <source>Return the current print options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de1a99f2ef7d479abd7d40b61acaef7dacc730c" translate="yes" xml:space="preserve">
          <source>Return the data (cast to the data type indicated by &lt;em&gt;outcode&lt;/em&gt;) from the array-scalar, &lt;em&gt;scalar&lt;/em&gt;, into the memory pointed to by &lt;em&gt;ctypeptr&lt;/em&gt; (which must be large enough to handle the incoming memory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a2cd7bf0ae041396085181eacf84b53acec016" translate="yes" xml:space="preserve">
          <source>Return the data of &lt;code&gt;a&lt;/code&gt; (if any) as an ndarray if &lt;code&gt;a&lt;/code&gt; is a &lt;code&gt;MaskedArray&lt;/code&gt;, else return &lt;code&gt;a&lt;/code&gt; as a ndarray or subclass (depending on &lt;code&gt;subok&lt;/code&gt;) if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8000545072516ea887097e2a6ae1bbd77994ae0c" translate="yes" xml:space="preserve">
          <source>Return the data of a masked array as an ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0eef55456acfbe20b4e2320e5bb8cec5baabf6" translate="yes" xml:space="preserve">
          <source>Return the data pointer cast to a particular c-types object. For example, calling &lt;code&gt;self._as_parameter_&lt;/code&gt; is equivalent to &lt;code&gt;self.data_as(ctypes.c_void_p)&lt;/code&gt;. Perhaps you want to use the data as a pointer to a ctypes array of floating-point data: &lt;code&gt;self.data_as(ctypes.POINTER(ctypes.c_double))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32991c4433156b35ff43a42eac0d317f9e1dfe58" translate="yes" xml:space="preserve">
          <source>Return the data portion of the masked array as a hierarchical Python list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ac23894ebb372f51c1be150ee43e1761806afc" translate="yes" xml:space="preserve">
          <source>Return the data-pointer of the &lt;em&gt;i&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a879a9abd2e3616b32ddc30c41652a8cfdfada" translate="yes" xml:space="preserve">
          <source>Return the default fill value for a dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9640c8aa3fff69daa178e0f74506ff5a2781f8b" translate="yes" xml:space="preserve">
          <source>Return the default fill value for the argument object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cf20ac348478ebe8124e75066b89e138df17b8" translate="yes" xml:space="preserve">
          <source>Return the derivative of the specified order of a polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c808e4b18f9235d62d361045a9d5ab1e558f3b" translate="yes" xml:space="preserve">
          <source>Return the distance between x and the nearest adjacent number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3003640086f7fa3be93691c586509dfb3ef9aa89" translate="yes" xml:space="preserve">
          <source>Return the distutils distribution object for self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfef9abed9be013b165cad3b58841220c6b069b4" translate="yes" xml:space="preserve">
          <source>Return the dot product of two arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c184d6b947d06315a2d153cb6b6a65c9d0d8dabf" translate="yes" xml:space="preserve">
          <source>Return the dot product of two vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8aec29562b12d28a48061980edb7e9ad8409ab8" translate="yes" xml:space="preserve">
          <source>Return the dot product without using the complex conjugate of the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a8f7d6cc689c4ee04b9f9af9cce72e3092351c" translate="yes" xml:space="preserve">
          <source>Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82a01897b25aecd0a2bac345fb19171c1c47989" translate="yes" xml:space="preserve">
          <source>Return the element-wise remainder of division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15abca1b02af816fc2c7d92271c0ec14598e4aae" translate="yes" xml:space="preserve">
          <source>Return the element-wise square of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37cb7f4a8edbd4aaea1fdec4d291555569d0666" translate="yes" xml:space="preserve">
          <source>Return the elements of an array that satisfy some condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4396b363749a7262ae6166356ce90b433945f5" translate="yes" xml:space="preserve">
          <source>Return the floor of the input, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59525a02671ff78d902574c688c5db8c02befbc0" translate="yes" xml:space="preserve">
          <source>Return the fractional and integral parts of an array, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515f47b4abb1dce9e97ea49d8204403e4611929e" translate="yes" xml:space="preserve">
          <source>Return the gradient of an N-dimensional array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54965ed70981b14b23ce26ba30cb8a61bb8dbfa1" translate="yes" xml:space="preserve">
          <source>Return the identity array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e04984c1484e1e4dcf34d9dc6f11aff682b763" translate="yes" xml:space="preserve">
          <source>Return the imaginary part of the complex argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e7563dc1251e29d97c223a7b05292bf504e42" translate="yes" xml:space="preserve">
          <source>Return the indexes of the first occurrences of the maximum values along the specified axis. If axis is None, the index is for the flattened matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1228d8108fbf8d52c529bcc94d32966a7e5b27" translate="yes" xml:space="preserve">
          <source>Return the indexes of the first occurrences of the minimum values along the specified axis. If axis is None, the index is for the flattened matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d360522b4f2a96bea2ce9398f71c49e37722bf" translate="yes" xml:space="preserve">
          <source>Return the indices for the lower-triangle of an (n, m) array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1322e5a732eed85297de913acf0b27628cd9452" translate="yes" xml:space="preserve">
          <source>Return the indices for the lower-triangle of arr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44902a69b78de07a74336b790e1c31eddccc5838" translate="yes" xml:space="preserve">
          <source>Return the indices for the upper-triangle of an (n, m) array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d7b25641bd326be0f5a2a4cfc7452db33961b0" translate="yes" xml:space="preserve">
          <source>Return the indices for the upper-triangle of arr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29dadabf708bcad650ad81ab36fa832a296c27d" translate="yes" xml:space="preserve">
          <source>Return the indices of the bins to which each value in input array belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57114216c9d3e42a32857164a24535225ac0a426" translate="yes" xml:space="preserve">
          <source>Return the indices of the elements that are non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17c758bfa538562da0c345226481fc6238a17c0" translate="yes" xml:space="preserve">
          <source>Return the indices of the maximum values in the specified axis ignoring NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a20a6f54b6e3e86de467c01b7e0887a181f4546" translate="yes" xml:space="preserve">
          <source>Return the indices of the maximum values in the specified axis ignoring NaNs. For all-NaN slices &lt;code&gt;ValueError&lt;/code&gt; is raised. Warning: the results cannot be trusted if a slice contains only NaNs and -Infs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e4ea1c0f2fa42d3f6e2a5a187509f3f6638f38" translate="yes" xml:space="preserve">
          <source>Return the indices of the maximum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286dea54db15d8e84b11e2db5daed487563abbe3" translate="yes" xml:space="preserve">
          <source>Return the indices of the minimum values in the specified axis ignoring NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb0c04e85bf537fe60e46b11458237f129ab9ca" translate="yes" xml:space="preserve">
          <source>Return the indices of the minimum values in the specified axis ignoring NaNs. For all-NaN slices &lt;code&gt;ValueError&lt;/code&gt; is raised. Warning: the results cannot be trusted if a slice contains only NaNs and Infs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191234538d4cd09da1e38080198d78f2b517790d" translate="yes" xml:space="preserve">
          <source>Return the indices of the minimum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8395f2b6b23337ed22750523af7576e4add042f" translate="yes" xml:space="preserve">
          <source>Return the indices of the non-zero elements of the input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b018b42e7dddbc80c723a674ff56f4709807d4ff" translate="yes" xml:space="preserve">
          <source>Return the indices of the original array that give the unique values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c353b46419aea81b7f823e72abae74eb21131eb" translate="yes" xml:space="preserve">
          <source>Return the indices of unmasked elements that are not zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e853c289f0a4c50584b3abf98ba2751b3843b3" translate="yes" xml:space="preserve">
          <source>Return the indices to access (n, n) arrays, given a masking function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07776a93c8082aece145909bfa76971f4d685e04" translate="yes" xml:space="preserve">
          <source>Return the indices to access the main diagonal of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f740ddbb458c4878ea93f81c268f2934b93fc0e" translate="yes" xml:space="preserve">
          <source>Return the indices to access the main diagonal of an n-dimensional array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2648e5d3aaac410fe82ad287374403b4dc999e46" translate="yes" xml:space="preserve">
          <source>Return the internal state of the masked array, for pickling purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8aec3a9964d351d08e5a7f9d6708ffcf5e1fb12" translate="yes" xml:space="preserve">
          <source>Return the item described by i, as a masked array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04156679d18e2b0323f8d67cbef4542e3e2f0bde" translate="yes" xml:space="preserve">
          <source>Return the itemsize for the elements of this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2a699f4de6609dceba5d0d4948f589e35b0463" translate="yes" xml:space="preserve">
          <source>Return the kind of scalar represented by &lt;em&gt;typenum&lt;/em&gt; and the array in &lt;em&gt;*arr&lt;/em&gt; (if &lt;em&gt;arr&lt;/em&gt; is not &lt;code&gt;NULL&lt;/code&gt; ). The array is assumed to be rank-0 and only used if &lt;em&gt;typenum&lt;/em&gt; represents a signed integer. If &lt;em&gt;arr&lt;/em&gt; is not &lt;code&gt;NULL&lt;/code&gt; and the first element is negative then &lt;code&gt;NPY_INTNEG_SCALAR&lt;/code&gt; is returned, otherwise &lt;code&gt;NPY_INTPOS_SCALAR&lt;/code&gt; is returned. The possible return values are &lt;code&gt;NPY_{kind}_SCALAR&lt;/code&gt; where &lt;code&gt;{kind}&lt;/code&gt; can be &lt;strong&gt;INTPOS&lt;/strong&gt;, &lt;strong&gt;INTNEG&lt;/strong&gt;, &lt;strong&gt;FLOAT&lt;/strong&gt;, &lt;strong&gt;COMPLEX&lt;/strong&gt;, &lt;strong&gt;BOOL&lt;/strong&gt;, or &lt;strong&gt;OBJECT&lt;/strong&gt;. &lt;code&gt;NPY_NOSCALAR&lt;/code&gt; is also an enumerated value &lt;a href=&quot;#c.NPY_SCALARKIND&quot;&gt;&lt;code&gt;NPY_SCALARKIND&lt;/code&gt;&lt;/a&gt; variables can take on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789567c68dcbd08ff14776ed4411a09c33e2a312" translate="yes" xml:space="preserve">
          <source>Return the largest integer smaller or equal to the division of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c517411957215d985fac612bc1905d101f0cfaab" translate="yes" xml:space="preserve">
          <source>Return the largest integer smaller or equal to the division of the inputs. It is equivalent to the Python &lt;code&gt;//&lt;/code&gt; operator and pairs with the Python &lt;code&gt;%&lt;/code&gt; (&lt;a href=&quot;numpy.remainder#numpy.remainder&quot;&gt;&lt;code&gt;remainder&lt;/code&gt;&lt;/a&gt;), function so that &lt;code&gt;a = a % b + b * (a // b)&lt;/code&gt; up to roundoff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528461915ba0f1c1489223d3271632c604ed396c" translate="yes" xml:space="preserve">
          <source>Return the least-squares solution to a linear matrix equation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7505ab931d94494348d1865877183d42e29298d" translate="yes" xml:space="preserve">
          <source>Return the low-level casting function to cast from the given descriptor to the builtin type number. If no casting function exists return &lt;code&gt;NULL&lt;/code&gt; and set an error. Using this function instead of direct access to &lt;em&gt;from&lt;/em&gt; -&amp;gt;f-&amp;gt;cast will allow support of any user-defined casting functions added to a descriptors casting dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b9fb8d90e52afdcdeab93b462fbf6e6a689ebb" translate="yes" xml:space="preserve">
          <source>Return the mapping parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff3942feb9dba326e808546dfb88526a0e9d175" translate="yes" xml:space="preserve">
          <source>Return the mask of &lt;code&gt;a&lt;/code&gt; as an ndarray if &lt;code&gt;a&lt;/code&gt; is a &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; and the mask is not &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;, else return &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;. To guarantee a full array of booleans of the same shape as a, use &lt;a href=&quot;numpy.ma.getmaskarray#numpy.ma.getmaskarray&quot;&gt;&lt;code&gt;getmaskarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b73278202e52f0b0978a45563c250eb1da46dd3" translate="yes" xml:space="preserve">
          <source>Return the mask of &lt;code&gt;arr&lt;/code&gt; as an ndarray if &lt;code&gt;arr&lt;/code&gt; is a &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; and the mask is not &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;, else return a full boolean array of False of the same shape as &lt;code&gt;arr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ffa512217eecf2cc4d2d9e1aa59071a56f7fb4" translate="yes" xml:space="preserve">
          <source>Return the mask of a masked array, or full array of False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7ab0f436b4820908a4b89bd8836b70b97a073a" translate="yes" xml:space="preserve">
          <source>Return the mask of a masked array, or full boolean array of False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241cb3cf7384faa4c4ba57264752a9aa6b9e8f43" translate="yes" xml:space="preserve">
          <source>Return the mask of a masked array, or nomask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0198943da3b2ac1cb3042b4991d279273cca5974" translate="yes" xml:space="preserve">
          <source>Return the matrix as a (possibly nested) list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75e38b4a3b223b45cf14c221c144c99d0ffaeed" translate="yes" xml:space="preserve">
          <source>Return the matrix flattened to shape &lt;code&gt;(1, N)&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; is the number of elements in the original matrix. A copy is made only if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ac3cfce9665c3cd02b10ff7990e423188fc733" translate="yes" xml:space="preserve">
          <source>Return the maximum along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a0cfedf661c554e6b13ad2a3f76cce3aa97b9e" translate="yes" xml:space="preserve">
          <source>Return the maximum of an array or maximum along an axis, ignoring any NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c64eaf9042035c98bae94065193fe6421fc65c1" translate="yes" xml:space="preserve">
          <source>Return the maximum of an array or maximum along an axis, ignoring any NaNs. When all-NaN slices are encountered a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised and NaN is returned for that slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fad07ed00988f48334295989ff3e32f4254aee0" translate="yes" xml:space="preserve">
          <source>Return the maximum of an array or maximum along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851ea9260a5c21c8b727a2f6b44099b7b71e7056" translate="yes" xml:space="preserve">
          <source>Return the maximum value along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4844e2555ec3f77d41a2101fd364ed4802fa533" translate="yes" xml:space="preserve">
          <source>Return the minimum along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf1f8e7f200d22e79de4a554dee2f449cbc594f" translate="yes" xml:space="preserve">
          <source>Return the minimum of an array or minimum along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb55176d6f2b7693402f506634ef43a5e1cf03e9" translate="yes" xml:space="preserve">
          <source>Return the minimum value along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b621e1221b1b7a270f0bbc888c5ba071f9536129" translate="yes" xml:space="preserve">
          <source>Return the minimum value that can be represented by the dtype of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1886a1a2095a1e33aaa9aebfe4fcb46744940ce5" translate="yes" xml:space="preserve">
          <source>Return the natural logarithm of one plus the input array, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f96c6a38d1c3f4e2d6d5ff607c908ce46c30ea7" translate="yes" xml:space="preserve">
          <source>Return the next floating-point value after x1 towards x2, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd9047e81a2cc3ba4d8daca4480b9f6b8dd9ac8" translate="yes" xml:space="preserve">
          <source>Return the non-negative square-root of an array, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45827f2b29e4e9a1d268845f6d8bb0e2a53735eb" translate="yes" xml:space="preserve">
          <source>Return the number of elements along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407a2ca0094d9ee1b81e339bb0d79c3fcf85fc89" translate="yes" xml:space="preserve">
          <source>Return the numeric string left-filled with zeros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9544acb9157f395e427dd8e0d80feef13e818eae" translate="yes" xml:space="preserve">
          <source>Return the numeric string left-filled with zeros in a string of length &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6a849467932edbb809fc9db124421d14bf2efd" translate="yes" xml:space="preserve">
          <source>Return the parameters of the linear map &lt;code&gt;offset + scale*x&lt;/code&gt; that maps &lt;code&gt;old&lt;/code&gt; to &lt;code&gt;new&lt;/code&gt; such that &lt;code&gt;old[i] -&amp;gt; new[i]&lt;/code&gt;, &lt;code&gt;i = 0, 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c1365ff2854ce55ab4f1f5872cdf1b41dbce0d" translate="yes" xml:space="preserve">
          <source>Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9562cc8c04f37c48df649c5316be9c38535c7c22" translate="yes" xml:space="preserve">
          <source>Return the product of array elements over a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066647f3f555c31df8e132b65d8e8b6c769a5401" translate="yes" xml:space="preserve">
          <source>Return the product of the array elements over the given axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae507ac3212bace881909d4291099e9b4046c87c" translate="yes" xml:space="preserve">
          <source>Return the product of the array elements over the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50aba3722f13757177ea008511d3ee09acd52904" translate="yes" xml:space="preserve">
          <source>Return the real part of the complex argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f21463a9997e5c8887cb6a085d642583ab5f63e" translate="yes" xml:space="preserve">
          <source>Return the reciprocal of the argument, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2bb28ab4eb150d26fcb11a8d3977b832d53e55" translate="yes" xml:space="preserve">
          <source>Return the requested number of words for PRNG seeding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919518dfceb075aabef35d7360930e2226924a20" translate="yes" xml:space="preserve">
          <source>Return the roots (a.k.a. &amp;ldquo;zeros&amp;rdquo;) of the polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a470e7003e669496edea1faf7c2d56ae8dffe15f" translate="yes" xml:space="preserve">
          <source>Return the roots of a polynomial with coefficients given in p.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b88d6413411ad58520ea8ce29927c55bdae3f1" translate="yes" xml:space="preserve">
          <source>Return the roots of a polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a03d4dd8ba5afdabef0640c41b07be54872cd19" translate="yes" xml:space="preserve">
          <source>Return the roots of the series polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e97b43cd32c17446d70eb26c0286035be48eb1" translate="yes" xml:space="preserve">
          <source>Return the scalar dtype or NumPy equivalent of Python type of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a73158c5b52af48040bdb4fee91974f5540fc8d" translate="yes" xml:space="preserve">
          <source>Return the scalar type of highest precision of the same kind as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3c5f80b5d93fb6b55e59c93265b18fd4268c77" translate="yes" xml:space="preserve">
          <source>Return the scaled companion matrix of c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bcd2523cffabebe7c604503f7c790947eb2094" translate="yes" xml:space="preserve">
          <source>Return the shape in the &lt;em&gt;n&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fe0040824229eb5bbff9e6f6994f8f512d5882" translate="yes" xml:space="preserve">
          <source>Return the shape of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37b8e166f6b9e20972a03eec6e6411b0f7ce3b1" translate="yes" xml:space="preserve">
          <source>Return the shape tuple as an array of some other c-types type. For example: &lt;code&gt;self.shape_as(ctypes.c_short)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baaab661a54b51d6a154d38d3a1c30a2d216053d" translate="yes" xml:space="preserve">
          <source>Return the sinc function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c459ccc30062a19eb1e782165048d90a682d1c59" translate="yes" xml:space="preserve">
          <source>Return the size of the buffer used in ufuncs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b2664823259b33b12cf47409b310d349cab197" translate="yes" xml:space="preserve">
          <source>Return the sorted, unique values that are in both of the input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48a3dd22ad0eedf4c3e43152db4039e70f6f623" translate="yes" xml:space="preserve">
          <source>Return the sorted, unique values that are in only one (not both) of the input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b211bbd5ccdf8b8125d11c8a542bcd2849733a96" translate="yes" xml:space="preserve">
          <source>Return the standard deviation of the array elements along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292e6e2cd5f2e85caa1a63e76e83e33760a06771" translate="yes" xml:space="preserve">
          <source>Return the stride in the &lt;em&gt;n&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8829f8c9f0d1186a68b848fd0d4166204ee8ce93" translate="yes" xml:space="preserve">
          <source>Return the strides tuple as an array of some other c-types type. For example: &lt;code&gt;self.strides_as(ctypes.c_longlong)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741a2da88e9a6a4388a1806db634c3c49732d30a" translate="yes" xml:space="preserve">
          <source>Return the string representation of a scalar dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f8ea013e9775d66642865ae77d3cc344db4829" translate="yes" xml:space="preserve">
          <source>Return the string representation of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a263364698df4237186fc32cc479614a10bc1c81" translate="yes" xml:space="preserve">
          <source>Return the sum along diagonals of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504fc3d79cf94aad87b10aa92ba8d6b1ce2cf5fa" translate="yes" xml:space="preserve">
          <source>Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ee1b9bb46d4f9f9b79d3a5ce24a42b62ed6ebc" translate="yes" xml:space="preserve">
          <source>Return the sum of the array elements over the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19b066cb142b245e290decb6be06e605f0bf088" translate="yes" xml:space="preserve">
          <source>Return the truncated value of the input, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2599b6cc3a4c38afe543a65ffcabe345fb26585d" translate="yes" xml:space="preserve">
          <source>Return the truth value of (x1 &amp;gt; x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7752788b070df597322f38ebb4dc9213f3c683fd" translate="yes" xml:space="preserve">
          <source>Return the truth value of (x1 &amp;gt;= x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4fbaf3562e8cca96ecf9eebd0e2bd0cecc0427" translate="yes" xml:space="preserve">
          <source>Return the truth value of (x1 &amp;lt; x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4856478cbd72d0f4f1146167eba942296e3b8143" translate="yes" xml:space="preserve">
          <source>Return the truth value of (x1 =&amp;lt; x2) element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ac86217f7990ab6baeea71048d9c94fc9a1d88" translate="yes" xml:space="preserve">
          <source>Return the unique rows of a 2D array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c469ebfe7cb33b937f591d4fa3a929ff9a01dfd2" translate="yes" xml:space="preserve">
          <source>Return the unique values in &lt;code&gt;ar1&lt;/code&gt; that are not in &lt;code&gt;ar2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2998311b7b1c99551e770cbe5d2291b619d2a6ce" translate="yes" xml:space="preserve">
          <source>Return the unique, sorted array of values that are in either of the two input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b05d0baa4de012c3a57f18d2544332f4e706037" translate="yes" xml:space="preserve">
          <source>Return the weighted average of array over the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d25e4b98f01704ffd521078e96e2665bea656da" translate="yes" xml:space="preserve">
          <source>Return true if all the given flags are set for the data-type object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5430635a01a4925fc9263c96d90c0babbb45a914" translate="yes" xml:space="preserve">
          <source>Return true if directory is local directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aebabfeb629269cee4178e22c4a40b3331dc0d0" translate="yes" xml:space="preserve">
          <source>Return type: &lt;code&gt;PyArrayObject*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c4caf11ea89b10e3e07372602e19b9d3f5d7b2" translate="yes" xml:space="preserve">
          <source>Return type: &lt;code&gt;const char*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd2aef4e4644db8d3572d2b60b5474addd70554" translate="yes" xml:space="preserve">
          <source>Return type: &lt;code&gt;int&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4359385fde24967ca356ab6b8c59a0bf57309beb" translate="yes" xml:space="preserve">
          <source>Return value of &lt;code&gt;iternext&lt;/code&gt; function pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af845a82cc2614607d54a7161ad36a9bc37ba532" translate="yes" xml:space="preserve">
          <source>Return value%self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31dfafa17646a229170f1ade518e458663718971" translate="yes" xml:space="preserve">
          <source>Return value&amp;amp;self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90daf8d5aa851317dd3679efcafdf465a0633b6" translate="yes" xml:space="preserve">
          <source>Return value&amp;gt;&amp;gt;self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ba43664eef558139c9b1acfa23030565253845" translate="yes" xml:space="preserve">
          <source>Return value&amp;lt;&amp;lt;self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5902a10e0a47ff68bb91e658fc910d52a6c8ad" translate="yes" xml:space="preserve">
          <source>Return value^self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f98dcf7fb0e963db3dbe8a24f301986499e81e" translate="yes" xml:space="preserve">
          <source>Return value|self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62839b2e419eef7cee01f90ad40701ed5235ed3" translate="yes" xml:space="preserve">
          <source>Return x, y values at equally spaced points in domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2d96565dc06a866465216373028dc31bfc11ee" translate="yes" xml:space="preserve">
          <source>Return:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e7c173de43cc7d4a2d20753b6d48002de600f4" translate="yes" xml:space="preserve">
          <source>Returned array or scalar: &lt;code&gt;y = +x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e872913f7fb85827ecd897f9a8c7b8381fbcd6" translate="yes" xml:space="preserve">
          <source>Returned array or scalar: &lt;code&gt;y = -x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967676e6b10999300a584227863a4ba1b08da2c2" translate="yes" xml:space="preserve">
          <source>Returns &amp;lsquo;None&amp;rsquo; on success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e55f850228e3cf85705b30b246127c963cc1f3" translate="yes" xml:space="preserve">
          <source>Returns (&lt;code&gt;mantissa&lt;/code&gt;, &lt;code&gt;exponent&lt;/code&gt;), where &lt;code&gt;x = mantissa * 2**exponent`&lt;/code&gt;. The mantissa is lies in the open interval(-1, 1), while the twos exponent is a signed integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cbce73ac835ade8c7506537810d6d87510af85" translate="yes" xml:space="preserve">
          <source>Returns 0 for success, -1 for failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115737b79c1838ec68c9067bcc9e58a706c69cf2" translate="yes" xml:space="preserve">
          <source>Returns 0 if &lt;em&gt;obj&lt;/em&gt; is not a sub-class of ndarray. Otherwise, returns the total number of elements in the array. Safer version of &lt;a href=&quot;#c.PyArray_SIZE&quot;&gt;&lt;code&gt;PyArray_SIZE&lt;/code&gt;&lt;/a&gt; (&lt;em&gt;obj&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eeaaadff86a0865cb617b460306672621245e72" translate="yes" xml:space="preserve">
          <source>Returns 0 if nothing was done, -1 on error, and 1 if action was taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6712a5e3dc71d74ee825d5e63bac86197f6e5c9c" translate="yes" xml:space="preserve">
          <source>Returns 0 on success, -1 on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2b7dfb346d75cdc21e598dc1d034d91960f26f" translate="yes" xml:space="preserve">
          <source>Returns 0 when &lt;code&gt;x2&lt;/code&gt; is 0 and both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are (arrays of) integers. &lt;code&gt;mod&lt;/code&gt; is an alias of &lt;code&gt;remainder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02125e071c8b94170ef70aa1eddcf2caa5d6d226" translate="yes" xml:space="preserve">
          <source>Returns 1 if the caller needs to handle the inner-most 1-dimensional loop, or 0 if the iterator handles all looping. This is controlled by the constructor flag &lt;a href=&quot;#c.NPY_ITER_EXTERNAL_LOOP&quot;&gt;&lt;code&gt;NPY_ITER_EXTERNAL_LOOP&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#c.NpyIter_EnableExternalLoop&quot;&gt;&lt;code&gt;NpyIter_EnableExternalLoop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e040ea16828a7af098812246ada10b737a3018" translate="yes" xml:space="preserve">
          <source>Returns 1 if the flag &lt;a href=&quot;#c.NPY_ITER_DELAY_BUFALLOC&quot;&gt;&lt;code&gt;NPY_ITER_DELAY_BUFALLOC&lt;/code&gt;&lt;/a&gt; was passed to the iterator constructor, and no call to one of the Reset functions has been done yet, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0eabf7ad3fd7b74468203994ab254ca9f092705" translate="yes" xml:space="preserve">
          <source>Returns 1 if the iterator requires buffering, which occurs when an operand needs conversion or alignment and so cannot be used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07efa4c5ad0c190a842da7877da8f8a7ecc05afc" translate="yes" xml:space="preserve">
          <source>Returns 1 if the iterator was created with the &lt;a href=&quot;#c.NPY_ITER_BUFFERED&quot;&gt;&lt;code&gt;NPY_ITER_BUFFERED&lt;/code&gt;&lt;/a&gt; flag, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe75eb194456195b6d1b8d969b6406be6143f07" translate="yes" xml:space="preserve">
          <source>Returns 1 if the iterator was created with the &lt;a href=&quot;#c.NPY_ITER_C_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_C_INDEX&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#c.NPY_ITER_F_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_F_INDEX&lt;/code&gt;&lt;/a&gt; flag, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38631735810573a469f961bd65c472da0a8230c7" translate="yes" xml:space="preserve">
          <source>Returns 1 if the iterator was created with the &lt;a href=&quot;#c.NPY_ITER_GROWINNER&quot;&gt;&lt;code&gt;NPY_ITER_GROWINNER&lt;/code&gt;&lt;/a&gt; flag, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d1389e5f77607a3b12ae5b77c6639df8690f30" translate="yes" xml:space="preserve">
          <source>Returns 1 if the iterator was created with the &lt;a href=&quot;#c.NPY_ITER_MULTI_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_MULTI_INDEX&lt;/code&gt;&lt;/a&gt; flag, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3326607915053b072db3754b1468eb7f280b7fd" translate="yes" xml:space="preserve">
          <source>Returns 1 is h is negative, 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e3a4672660c3fef2c4d418a19dc79d3aa04f9c" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;#c.NPY_TRUE&quot;&gt;&lt;code&gt;NPY_TRUE&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;typenum&lt;/em&gt; represents a valid type-number (builtin or user-defined or character code). Otherwise, this function returns &lt;a href=&quot;#c.NPY_FALSE&quot;&gt;&lt;code&gt;NPY_FALSE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403725e5bd16147bddc5c00206db6d225b14ec1b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NPY_SUCCEED&lt;/code&gt; or &lt;code&gt;NPY_FAIL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ee97c7d4d45cc3feedc9a8d0d04c663fbfdb87" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NPY_SUCCEED&lt;/code&gt; or &lt;code&gt;NPY_FAIL&lt;/code&gt;. If errmsg is non-NULL, no Python exception is set when &lt;code&gt;NPY_FAIL&lt;/code&gt; is returned. Instead, *errmsg is set to an error message. When errmsg is non-NULL, the function may be safely called without holding the Python GIL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47389ff75ac1dac4fc9061aae7ecb422b035bc40" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434e6107888cc3fe5eea38850e0297bb0baa2361" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;num&lt;/code&gt; evenly spaced samples, calculated over the interval [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed514510f3b537bea9e9077fa3f766a0eb88a65f" translate="yes" xml:space="preserve">
          <source>Returns NULL if there is an error, otherwise returns the allocated iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd5102c0c0283a9bb6087aae24006067b8fa0ad" translate="yes" xml:space="preserve">
          <source>Returns NULL if there is an error. If errmsg is non-NULL, no Python exception is set when &lt;code&gt;NPY_FAIL&lt;/code&gt; is returned. Instead, *errmsg is set to an error message. When errmsg is non-NULL, the function may be safely called without holding the Python GIL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51e8551ebfe6fca028ffaed0b3dcc12d1cfd551" translate="yes" xml:space="preserve">
          <source>Returns True if all elements evaluate to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f8cc1023b8b8b461233c324cdae40c59f8861" translate="yes" xml:space="preserve">
          <source>Returns True if any of the elements of &lt;code&gt;a&lt;/code&gt; evaluate to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e09465575f73a123f17dab8ca49ad32c13ae007" translate="yes" xml:space="preserve">
          <source>Returns True if cast between data types can occur according to the casting rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26515f3430c1beb03327c19aea3c862cf87e2819" translate="yes" xml:space="preserve">
          <source>Returns True if cast between data types can occur according to the casting rule. If from is a scalar or array scalar, also returns True if the scalar value can be cast without overflow or truncation to an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca8bde0449dc63fab8f1009f5405759a6a25b60" translate="yes" xml:space="preserve">
          <source>Returns True if first argument is a typecode lower/equal in type hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22a5e45572f21d466de38f8cf1f9bde8fa5c7c6" translate="yes" xml:space="preserve">
          <source>Returns True if input arrays are shape consistent and all elements equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a811e0e866b438205e75d605f3c9be1e70ce941c" translate="yes" xml:space="preserve">
          <source>Returns True if the array is Fortran contiguous but &lt;em&gt;not&lt;/em&gt; C contiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e3425ff31e0cbaa9952242fc3d0c4e5347e2df" translate="yes" xml:space="preserve">
          <source>Returns True if the arrays are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657502feb806168cc5b8212642e98def4223ed9a" translate="yes" xml:space="preserve">
          <source>Returns True if the two arrays are equal within the given tolerance, False otherwise. If either array contains NaN, then False is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3960bd971c0cba3eb94501357090736485e6a466" translate="yes" xml:space="preserve">
          <source>Returns True if the two arrays are equal within the given tolerance; False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cc2cb62c0b5499b9399d976d2df9b55d8de11d" translate="yes" xml:space="preserve">
          <source>Returns True if the type of &lt;code&gt;num&lt;/code&gt; is a scalar type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea4ca820c758a490715c100d25b4440eef8f8a1" translate="yes" xml:space="preserve">
          <source>Returns True if two arrays are element-wise equal within a tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c624ab991c8dcb608801a88a5aa060b39bad3f6" translate="yes" xml:space="preserve">
          <source>Returns a 1D version of self, as a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26557217ee751540d08e486aa9eef727e5531028" translate="yes" xml:space="preserve">
          <source>Returns a NumPy universal function (&lt;code&gt;ufunc&lt;/code&gt;) object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e407833134eebbc319885c05c271c5a57ef5854" translate="yes" xml:space="preserve">
          <source>Returns a bitmask with following possible flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b109ae0c5c39185976689bba7a552fbf29fc0e" translate="yes" xml:space="preserve">
          <source>Returns a bool array, where True if input element is complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabfcb617950873e8b96e392c7720c623c079877" translate="yes" xml:space="preserve">
          <source>Returns a bool array, where True if input element is real.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ea7c5e7a626408c091c717ccb87ff9842c5dab" translate="yes" xml:space="preserve">
          <source>Returns a boolean array indicating valid days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a798bd13b7830305d14f0afef753c930fa84ef" translate="yes" xml:space="preserve">
          <source>Returns a boolean array of the same shape as &lt;code&gt;x&lt;/code&gt;, True where &lt;code&gt;x ==
+/-inf&lt;/code&gt;, otherwise False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ce4c56a2d469c6e69d1b58412023cf9af003eb" translate="yes" xml:space="preserve">
          <source>Returns a boolean array of where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal within the given tolerance. If both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are scalars, returns a single boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ee034b20cdef524b1b56d45efc976fcf29daf9" translate="yes" xml:space="preserve">
          <source>Returns a boolean array the same length as &lt;code&gt;ar1&lt;/code&gt; that is True where an element of &lt;code&gt;ar1&lt;/code&gt; is in &lt;code&gt;ar2&lt;/code&gt; and False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9137a4dac459c56407a0eff3e78727c7563c0934" translate="yes" xml:space="preserve">
          <source>Returns a boolean array where two arrays are element-wise equal within a tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39e7df99fe1f81eb255ab72edb28ea68c868dfa" translate="yes" xml:space="preserve">
          <source>Returns a boolean array which is &lt;code&gt;True&lt;/code&gt; where the string element in &lt;code&gt;a&lt;/code&gt; ends with &lt;code&gt;suffix&lt;/code&gt;, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a334fe58c8a986c427834f6fe9b5cd8d9fb82c01" translate="yes" xml:space="preserve">
          <source>Returns a boolean array which is &lt;code&gt;True&lt;/code&gt; where the string element in &lt;code&gt;a&lt;/code&gt; starts with &lt;code&gt;prefix&lt;/code&gt;, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd38d9a8e9f8c407e8e3f280919c951e2d0c907" translate="yes" xml:space="preserve">
          <source>Returns a boolean array which is &lt;code&gt;True&lt;/code&gt; where the string element in &lt;code&gt;self&lt;/code&gt; ends with &lt;code&gt;suffix&lt;/code&gt;, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2033519e4602085304e1e9678984a15d9cc301af" translate="yes" xml:space="preserve">
          <source>Returns a boolean array which is &lt;code&gt;True&lt;/code&gt; where the string element in &lt;code&gt;self&lt;/code&gt; starts with &lt;code&gt;prefix&lt;/code&gt;, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84ecb9e671fe5a62ffff4868951710fc18cbbe4" translate="yes" xml:space="preserve">
          <source>Returns a borrowed reference to the dtype property (&lt;code&gt;PyArray_Descr*&lt;/code&gt;) of &lt;code&gt;a&lt;/code&gt;, assuming &lt;code&gt;a&lt;/code&gt; can be cast to a &lt;code&gt;PyArrayObject*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d22ee0a05554fc3e02d3abc3080d943e7a932" translate="yes" xml:space="preserve">
          <source>Returns a borrowed reference to the dtype property of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9d16c849ee627a07de34d3c7c60fb103ea46a" translate="yes" xml:space="preserve">
          <source>Returns a data-type object corresponding to &lt;em&gt;typenum&lt;/em&gt;. The &lt;em&gt;typenum&lt;/em&gt; can be one of the enumerated types, a character code for one of the enumerated types, or a user-defined type. If you want to use a flexible size array, then you need to &lt;code&gt;flexible typenum&lt;/code&gt; and set the results &lt;code&gt;elsize&lt;/code&gt; parameter to the desired size. The typenum is one of the &lt;a href=&quot;c-api.dtype#c.NPY_TYPES&quot;&gt;&lt;code&gt;NPY_TYPES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5795a0049817d205be48c9819c929b8acc52949f" translate="yes" xml:space="preserve">
          <source>Returns a field of the given array as a certain type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed85eacf19d11d52b6d79ef57328eaa6ff1884e" translate="yes" xml:space="preserve">
          <source>Returns a flattened copy of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3cb09fe46e6a87a1feae1dc5ef282345db3f60" translate="yes" xml:space="preserve">
          <source>Returns a function pointer for getting the current multi-index of the iterator. Returns NULL if the iterator is not tracking a multi-index. It is recommended that this function pointer be cached in a local variable before the iteration loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac0b6f2ec24de0c744fa0d16cddbbf8b9be417a" translate="yes" xml:space="preserve">
          <source>Returns a function pointer for iteration. A specialized version of the function pointer may be calculated by this function instead of being stored in the iterator structure. Thus, to get good performance, it is required that the function pointer be saved in a variable rather than retrieved for each loop iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10c17be31eedd0bba6a40970571d6f7ad579178" translate="yes" xml:space="preserve">
          <source>Returns a list of files named &amp;lsquo;fname&amp;rsquo; from 1) System-wide directory (directory-location of this module) 2) Users HOME directory (os.environ[&amp;lsquo;HOME&amp;rsquo;]) 3) Local directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470736429ce15047825d29117adb4e0e0bcf7e7b" translate="yes" xml:space="preserve">
          <source>Returns a list of slices corresponding to the masked clumps of a 1-D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff03f876a6e223e8fd0b7dd5a3bf0d6a33a4de9f" translate="yes" xml:space="preserve">
          <source>Returns a list of slices corresponding to the masked clumps of a 1-D array. (A &amp;ldquo;clump&amp;rdquo; is defined as a contiguous region of the array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21fca56f91f1c5a4d143b1ee3460eb700de0353" translate="yes" xml:space="preserve">
          <source>Returns a list with types grouped input-&amp;gt;output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0272a490b459b53e6a460ee6dccbcaf9058f37a" translate="yes" xml:space="preserve">
          <source>Returns a masked array containing the same data, but with a new shape. The result is a view on the original array; if this is not possible, a ValueError is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5cf56c302519782e893744ba414d38c09a1f71" translate="yes" xml:space="preserve">
          <source>Returns a matrix from an array-like object, or from a string of data. A matrix is a specialized 2-D array that retains its 2-D nature through operations. It has certain special operators, such as &lt;code&gt;*&lt;/code&gt; (matrix multiplication) and &lt;code&gt;**&lt;/code&gt; (matrix power).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318e63603ad5502f105445287c0a8e45500fc3d7" translate="yes" xml:space="preserve">
          <source>Returns a matrix object, which is a specialized 2-D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56c7bf918f34dbbdfaab7d29a7d2d783ce5ea93" translate="yes" xml:space="preserve">
          <source>Returns a new bit generator with the state jumped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5151209d098f68dae7578cd8812927e8535ffd5" translate="yes" xml:space="preserve">
          <source>Returns a new bit generator with the state jumped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9993ad4416ff33a234df99302634d35edd192413" translate="yes" xml:space="preserve">
          <source>Returns a new dtype object, with the type of all fields in &lt;code&gt;ndtype&lt;/code&gt; to a boolean type. Field names are not altered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223e1f5bba425e5a7dd6c215bc7f90e351b648a8" translate="yes" xml:space="preserve">
          <source>Returns a pointer to an array of the &lt;code&gt;nop&lt;/code&gt; strides, one for each iterated object, to be used by the inner loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838538d04561d6a9d16bd3bb4e63fec4b29ad727" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the dimensions/shape of the array. The number of elements matches the number of dimensions of the array. Can return &lt;code&gt;NULL&lt;/code&gt; for 0-dimensional arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46e48e23c89e64929900374a373bb27be1a34b2" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the number of iterations the inner loop should execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808286411c5d2579f73d07bbb321d374dc0eccdc" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the strides of the array. The number of elements matches the number of dimensions of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83c4a09f9ed920ca4753bed9ece5a39f0600246" translate="yes" xml:space="preserve">
          <source>Returns a scalar type-object from a type-number, &lt;em&gt;type&lt;/em&gt; . Equivalent to &lt;a href=&quot;#c.PyArray_DescrFromType&quot;&gt;&lt;code&gt;PyArray_DescrFromType&lt;/code&gt;&lt;/a&gt; (&lt;em&gt;type&lt;/em&gt;)-&amp;gt;typeobj except for reference counting and error-checking. Returns a new reference to the typeobject on success or &lt;code&gt;NULL&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a902c79dd4c838787c681b0d4416e4369385827a" translate="yes" xml:space="preserve">
          <source>Returns a series representing the product &lt;code&gt;(x - r[0])*(x - r[1])*...*(x - r[n-1])&lt;/code&gt;, where &lt;code&gt;r&lt;/code&gt; is a list of roots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0aa23a8d558edba28782ba899073b3f7ca7aa8" translate="yes" xml:space="preserve">
          <source>Returns a single bool if &lt;code&gt;axis&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;; otherwise, returns &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcabb281b53f9ab6610007c6f4cc947d93898ab5" translate="yes" xml:space="preserve">
          <source>Returns a true division of the inputs, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859cc83c125a67c9e1d2ef23db058a23816a9fa1" translate="yes" xml:space="preserve">
          <source>Returns a tuple containing the indices of the current iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52830cbf09e3acc294145e0b75c673b00250e3be" translate="yes" xml:space="preserve">
          <source>Returns a tuple of &lt;a href=&quot;numpy.flatiter#numpy.flatiter&quot;&gt;&lt;code&gt;numpy.flatiter&lt;/code&gt;&lt;/a&gt; objects, one for each &amp;ldquo;component&amp;rdquo; of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d14b7c215283230bbde4fde3fbe238d5e3e4d1" translate="yes" xml:space="preserve">
          <source>Returns a tuple of arrays, one for each dimension of &lt;code&gt;a&lt;/code&gt;, containing the indices of the non-zero elements in that dimension. The values in &lt;code&gt;a&lt;/code&gt; are always tested and returned in row-major, C-style order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb24f4887cf31f7b0741a4e6974577466201ed4d" translate="yes" xml:space="preserve">
          <source>Returns a tuple of arrays, one for each dimension, containing the indices of the non-zero elements in that dimension. The corresponding non-zero values can be obtained with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399659d2ce9197e3f68969e3461f22fc719d209a" translate="yes" xml:space="preserve">
          <source>Returns a tuple of arrays, with &lt;code&gt;grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)&lt;/code&gt; with dimensions[i] in the ith place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d2e5ef20dc9f641259b52e69f8f4329425a2a3" translate="yes" xml:space="preserve">
          <source>Returns a view of the array with axes transposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27391d004074faca53b46e3996c6c3c219480d2d" translate="yes" xml:space="preserve">
          <source>Returns an array containing the same data with a new shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeea1524bbb4b99f1bdbceae7089113e87b36b9" translate="yes" xml:space="preserve">
          <source>Returns an array of anomalies, with the same shape as the input and where the arithmetic mean is computed along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0f58d6dddf5cd41797684629530254cf6a8c8a" translate="yes" xml:space="preserve">
          <source>Returns an array representing a linear polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94de1f6c7639ea5d7ce403286395619048ad47d" translate="yes" xml:space="preserve">
          <source>Returns an array with the number of non-overlapping occurrences of substring &lt;code&gt;sub&lt;/code&gt; in the range [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a88ec2bccba0b1c19ca07ff9136eb845b66f52" translate="yes" xml:space="preserve">
          <source>Returns an element-wise indication of the sign of a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9635b520b34813723c2f4f44400040e004496303" translate="yes" xml:space="preserve">
          <source>Returns an integer representing the flags of &lt;code&gt;a&lt;/code&gt;, assuming &lt;code&gt;a&lt;/code&gt; can be cast to a &lt;code&gt;PyArrayObject*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e486ab7595a742e750c6b5fb68a5e7723e7b7d" translate="yes" xml:space="preserve">
          <source>Returns an ndarray object from a Python object that exposes the &lt;a href=&quot;arrays.interface#__array_interface__&quot;&gt;&lt;code&gt;__array_interface__&lt;/code&gt;&lt;/a&gt; attribute following the array interface protocol. If the object does not contain this attribute then a borrowed reference to &lt;a href=&quot;https://docs.python.org/dev/c-api/object.html#c.Py_NotImplemented&quot;&gt;&lt;code&gt;Py_NotImplemented&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defd61a16e8456c3662e0bbcd8b6e4544c88f9f5" translate="yes" xml:space="preserve">
          <source>Returns an ndarray object from a Python object that exposes the &lt;code&gt;__array_struct__&lt;/code&gt; attribute and follows the array interface protocol. If the object does not contain this attribute then a borrowed reference to &lt;a href=&quot;https://docs.python.org/dev/c-api/object.html#c.Py_NotImplemented&quot;&gt;&lt;code&gt;Py_NotImplemented&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68745ac983845b9eb541855dfdd4c1cfa0ba166" translate="yes" xml:space="preserve">
          <source>Returns array of indices of the maximum values along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71dcc827b5e07f838075d3a5caff5e6a8e138b7" translate="yes" xml:space="preserve">
          <source>Returns array of indices of the maximum values along the given axis. Masked values are treated as if they had the value fill_value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3272962658178566710f9691c655f62f6f462ac4" translate="yes" xml:space="preserve">
          <source>Returns dtype for the base element of the subarrays, regardless of their dimension or shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3c5a765826dbc160b2629b990fe6fbc4be3cdb" translate="yes" xml:space="preserve">
          <source>Returns either a new reference to self if dtype is not given or a new array of provided data type if dtype is different from the current dtype of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9f415a99f80c456ba9880f70ef07188c8051bb" translate="yes" xml:space="preserve">
          <source>Returns element-wise True where signbit is set (less than zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f338a78b0e40859071dbd16839fbebae883403c5" translate="yes" xml:space="preserve">
          <source>Returns element-wise base array raised to power from second array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8019b995da064a9519ce144fc0391726fe3412ea" translate="yes" xml:space="preserve">
          <source>Returns non-zero if &lt;em&gt;arr&lt;/em&gt; can be cast to &lt;em&gt;totype&lt;/em&gt; according to the casting rule given in &lt;em&gt;casting&lt;/em&gt;. If &lt;em&gt;arr&lt;/em&gt; is an array scalar, its value is taken into account, and non-zero is also returned when the value will not overflow or be truncated to an integer when converting to a smaller type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578c25be3a47f3925ec3d30b6194822d36f3b53b" translate="yes" xml:space="preserve">
          <source>Returns non-zero if an array of data type &lt;em&gt;fromtype&lt;/em&gt; (which can include flexible types) can be cast safely to an array of data type &lt;em&gt;totype&lt;/em&gt; (which can include flexible types) according to the casting rule &lt;em&gt;casting&lt;/em&gt;. For simple types with &lt;a href=&quot;#c.NPY_SAFE_CASTING&quot;&gt;&lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt;&lt;/a&gt;, this is basically a wrapper around &lt;a href=&quot;#c.PyArray_CanCastSafely&quot;&gt;&lt;code&gt;PyArray_CanCastSafely&lt;/code&gt;&lt;/a&gt;, but for flexible types such as strings or unicode, it produces results taking into account their sizes. Integer and float types can only be cast to a string or unicode type using &lt;a href=&quot;#c.NPY_SAFE_CASTING&quot;&gt;&lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt;&lt;/a&gt; if the string or unicode type is big enough to hold the max value of the integer/float type being cast from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6b8f0c4ec83a1402de56c2e34413bf75b42ffd" translate="yes" xml:space="preserve">
          <source>Returns non-zero if an array of data type &lt;em&gt;fromtype&lt;/em&gt; can be cast to an array of data type &lt;em&gt;totype&lt;/em&gt; without losing information. An exception is that 64-bit integers are allowed to be cast to 64-bit floating point values even though this can lose precision on large integers so as not to proliferate the use of long doubles without explicit requests. Flexible array types are not checked according to their lengths with this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009a9310deb92537b808ab91212710a189e4451a" translate="yes" xml:space="preserve">
          <source>Returns one array of grid indices, &lt;code&gt;grid.shape = (len(dimensions),) + tuple(dimensions)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b929aa0e64f62d714c79c20bb2ed4cff9005cd" translate="yes" xml:space="preserve">
          <source>Returns single boolean unless &lt;code&gt;axis&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f124d396a8cca8daf0b6150db2c3baa3bbed2f" translate="yes" xml:space="preserve">
          <source>Returns the (complex) conjugate transpose of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd94f46441fb0a066c178a4c64f1a6085b905a48" translate="yes" xml:space="preserve">
          <source>Returns the (multiplicative) inverse of invertible &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17b1f28b2d0326d95a4ac69d5a18555cadbe967" translate="yes" xml:space="preserve">
          <source>Returns the Chebyshev series &lt;code&gt;c&lt;/code&gt; raised to the power &lt;code&gt;pow&lt;/code&gt;. The argument &lt;code&gt;c&lt;/code&gt; is a sequence of coefficients ordered from low to high. i.e., [1,2,3] is the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19ff72c5e7b4b33394346a0b149ffa3dd267dc3" translate="yes" xml:space="preserve">
          <source>Returns the Chebyshev series coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;1*T_0 + 2*T_1 + 3*T_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) +
2*T_0(x)*T_1(y) + 2*T_1(x)*T_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c140591b74a0d1fee97f09b426cb62c831fe6c" translate="yes" xml:space="preserve">
          <source>Returns the Chebyshev series coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) + 2*T_0(x)*T_1(y) +
2*T_1(x)*T_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07ebc531340b87673abfd1f024bdc89d45d7007" translate="yes" xml:space="preserve">
          <source>Returns the Hermite series &lt;code&gt;c&lt;/code&gt; raised to the power &lt;code&gt;pow&lt;/code&gt;. The argument &lt;code&gt;c&lt;/code&gt; is a sequence of coefficients ordered from low to high. i.e., [1,2,3] is the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bb43fa9b0cd1cba2d7e700e138a1ce808ed498" translate="yes" xml:space="preserve">
          <source>Returns the Hermite series coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;1*H_0 + 2*H_1 + 3*H_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) +
2*H_0(x)*H_1(y) + 2*H_1(x)*H_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdd479f3684cd6fab81a5f0c83cd2978f6db6a0" translate="yes" xml:space="preserve">
          <source>Returns the Hermite series coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;H_0 + 2*H_1 + 3*H_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +
2*H_1(x)*H_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e03d85b7cb766e37b49f36881ce04d9561050c0" translate="yes" xml:space="preserve">
          <source>Returns the Hermite_e series coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;H_0 + 2*H_1 + 3*H_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +
2*H_1(x)*H_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f994c1c77662952de13b72ec1cb9b59a30088124" translate="yes" xml:space="preserve">
          <source>Returns the Laguerre series &lt;code&gt;c&lt;/code&gt; raised to the power &lt;code&gt;pow&lt;/code&gt;. The argument &lt;code&gt;c&lt;/code&gt; is a sequence of coefficients ordered from low to high. i.e., [1,2,3] is the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd67bccd89dec7b84a0f263cadef9ef3b8b2abf4" translate="yes" xml:space="preserve">
          <source>Returns the Laguerre series coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;1*L_0 + 2*L_1 + 3*L_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +
2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36104a44d4c73e587b5267fdc3125d9e9962c93" translate="yes" xml:space="preserve">
          <source>Returns the Laguerre series coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;L_0 + 2*L_1 + 3*L_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +
2*L_1(x)*L_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c884d7d7bbacfa0d8c4f0d11afe877e72a8762a9" translate="yes" xml:space="preserve">
          <source>Returns the Legendre series &lt;code&gt;c&lt;/code&gt; raised to the power &lt;code&gt;pow&lt;/code&gt;. The argument &lt;code&gt;c&lt;/code&gt; is a sequence of coefficients ordered from low to high. i.e., [1,2,3] is the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aec3f7374402168612096c12626ad1ed5c82577" translate="yes" xml:space="preserve">
          <source>Returns the Legendre series coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;1*L_0 + 2*L_1 + 3*L_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +
2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a51274546bf924dd416ea8425edac23e0abc587" translate="yes" xml:space="preserve">
          <source>Returns the Legendre series coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;L_0 + 2*L_1 + 3*L_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +
2*L_1(x)*L_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d64806d0f573e6aae1d9ab8498480317b34be4" translate="yes" xml:space="preserve">
          <source>Returns the NPV (Net Present Value) of a cash flow series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c137d6ab752a1a419551450441663ea9713ac92" translate="yes" xml:space="preserve">
          <source>Returns the Vandermonde matrix of degree &lt;code&gt;deg&lt;/code&gt; and sample points &lt;code&gt;x&lt;/code&gt;. The Vandermonde matrix is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfc8cf62cfe82f2c9a3492a2538db7f55bfc867" translate="yes" xml:space="preserve">
          <source>Returns the average of the array elements along given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7a0a83f8ee3f88fa0c20189c0d4ac30a4fefe0" translate="yes" xml:space="preserve">
          <source>Returns the average of the array elements. The average is taken over the flattened array by default, otherwise over the specified axis. &lt;code&gt;float64&lt;/code&gt; intermediate and return values are used for integer inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da94c213a46beb19d86e10459dc3048a91bbf7b6" translate="yes" xml:space="preserve">
          <source>Returns the average of the matrix elements along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0068e75a5ec4a982069a5c11ee5893dfa3f6ee69" translate="yes" xml:space="preserve">
          <source>Returns the broadcast shape of the iterator in &lt;code&gt;outshape&lt;/code&gt;. This can only be called on an iterator which is tracking a multi-index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cb40edade0a60821e9c8728c90ce4019cc7711" translate="yes" xml:space="preserve">
          <source>Returns the coefficients of the polynomial whose leading coefficient is one for the given sequence of zeros (multiple roots must be included in the sequence as many times as their multiplicity; see Examples). A square matrix (or array, which will be treated as a matrix) can also be given, in which case the coefficients of the characteristic polynomial of the matrix are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3ee119768a6a76dde85f3db63eca898fd52187" translate="yes" xml:space="preserve">
          <source>Returns the data type with the smallest size and smallest scalar kind to which both &lt;code&gt;type1&lt;/code&gt; and &lt;code&gt;type2&lt;/code&gt; may be safely cast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4339e8090b0a422018db91db164d57c296f3de6" translate="yes" xml:space="preserve">
          <source>Returns the data type with the smallest size and smallest scalar kind to which both &lt;code&gt;type1&lt;/code&gt; and &lt;code&gt;type2&lt;/code&gt; may be safely cast. The returned data type is always in native byte order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652ac6762e24a3418b146937904fd1f674c2224b" translate="yes" xml:space="preserve">
          <source>Returns the difference of two Chebyshev series &lt;code&gt;c1&lt;/code&gt; - &lt;code&gt;c2&lt;/code&gt;. The sequences of coefficients are from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810185597496d8c0a086bcfb1d063b53f5bfeb16" translate="yes" xml:space="preserve">
          <source>Returns the difference of two Hermite series &lt;code&gt;c1&lt;/code&gt; - &lt;code&gt;c2&lt;/code&gt;. The sequences of coefficients are from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208a2d78d3f934b924e6ee9dc9fe7f3d628be890" translate="yes" xml:space="preserve">
          <source>Returns the difference of two Laguerre series &lt;code&gt;c1&lt;/code&gt; - &lt;code&gt;c2&lt;/code&gt;. The sequences of coefficients are from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0457d2a096b03dacb16ec4b9b3e6226803db10" translate="yes" xml:space="preserve">
          <source>Returns the difference of two Legendre series &lt;code&gt;c1&lt;/code&gt; - &lt;code&gt;c2&lt;/code&gt;. The sequences of coefficients are from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d084870c51f5e13c851d15b086b19fb99d050125" translate="yes" xml:space="preserve">
          <source>Returns the difference of two polynomials &lt;code&gt;c1&lt;/code&gt; - &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order term to highest, i.e., [1,2,3] represents the polynomial &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0189ccd9f65586480cc5f3ba179ed30ed4323e1" translate="yes" xml:space="preserve">
          <source>Returns the discrete, linear convolution of two one-dimensional sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af372a1a4631fac47072f3f87c81329981478748" translate="yes" xml:space="preserve">
          <source>Returns the dot product of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both scalars or both 1-D arrays then a scalar is returned; otherwise an array is returned. If &lt;code&gt;out&lt;/code&gt; is given, then it is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b48088bf8a056601fc331a8831fcde05c38bc2a" translate="yes" xml:space="preserve">
          <source>Returns the dot product of the supplied arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db092eb9af5a3e3a76fb82a7afe5490aa2ddcea7" translate="yes" xml:space="preserve">
          <source>Returns the endianness of the current platform. One of &lt;code&gt;NPY_CPU_BIG&lt;/code&gt;, &lt;code&gt;NPY_CPU_LITTLE&lt;/code&gt;, or &lt;code&gt;NPY_CPU_UNKNOWN_ENDIAN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0c2322eb3e3266616e01e73e5e13553faba179" translate="yes" xml:space="preserve">
          <source>Returns the greatest common divisor of &lt;code&gt;|x1|&lt;/code&gt; and &lt;code&gt;|x2|&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e5cd14b263d3f1d7e13bd1da219d8e84004c5d" translate="yes" xml:space="preserve">
          <source>Returns the indices of the maximum values along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd0ce4f3a8a5599013e0e8bf8afc094b6c66089" translate="yes" xml:space="preserve">
          <source>Returns the indices of the minimum values along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac39c0a6c8eb391ea93991374f33f2d985224b6b" translate="yes" xml:space="preserve">
          <source>Returns the indices that would partition this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066f0bc1f78b8495c8fc78fba6ab6dd35e66306d" translate="yes" xml:space="preserve">
          <source>Returns the indices that would sort an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1537d0d9b6c521d0eaec523829a299d0b0d35b3" translate="yes" xml:space="preserve">
          <source>Returns the indices that would sort this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44599c6fb1f0a7514d2bd99b73cb153b26fa2f4a" translate="yes" xml:space="preserve">
          <source>Returns the lowest common multiple of &lt;code&gt;|x1|&lt;/code&gt; and &lt;code&gt;|x2|&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cac07fcea754e8297dd0565e7202c4a107b869" translate="yes" xml:space="preserve">
          <source>Returns the maximum filling value for a given datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4457ed798c0061e3ce7961eee7f4387c54e6d803" translate="yes" xml:space="preserve">
          <source>Returns the maximum of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;. If (&lt;em&gt;a&lt;/em&gt;) or (&lt;em&gt;b&lt;/em&gt;) are expressions they are evaluated twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d834b35582d6f8df6f939a50065823f0b5b2cafc" translate="yes" xml:space="preserve">
          <source>Returns the median of the array elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62ef342a59cb61c6779dde6629cd016952c832b" translate="yes" xml:space="preserve">
          <source>Returns the minimum filling value for a given datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8e83436c0220effd776390ac8f193176b9b632" translate="yes" xml:space="preserve">
          <source>Returns the minimum of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;. If (&lt;em&gt;a&lt;/em&gt;) or (&lt;em&gt;b&lt;/em&gt;) are expressions they are evaluated twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ada65f8805ea4046c6d097e360ca3e3c9ff5d1" translate="yes" xml:space="preserve">
          <source>Returns the number of dimensions being iterated. If a multi-index was not requested in the iterator constructor, this value may be smaller than the number of dimensions in the original objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b2edcfbc5eb4395e5fb93768ca15e6ea15c51e" translate="yes" xml:space="preserve">
          <source>Returns the number of elements being iterated. This is the product of all the dimensions in the shape. When a multi index is being tracked (and &lt;code&gt;NpyIter_RemoveAxis&lt;/code&gt; may be called) the size may be &lt;code&gt;-1&lt;/code&gt; to indicate an iterator is too large. Such an iterator is invalid, but may become valid after &lt;code&gt;NpyIter_RemoveAxis&lt;/code&gt; is called. It is not necessary to check for this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a1b267bdc9613fdc34f48e560867b69e9bf01b" translate="yes" xml:space="preserve">
          <source>Returns the number of operands in the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104ede44e50eab53cdc70c000280ef712803aebb" translate="yes" xml:space="preserve">
          <source>Returns the numpy.distutils config command instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c979c27368e89d132692f0e48b3260c993e96e6f" translate="yes" xml:space="preserve">
          <source>Returns the one-dimensional piecewise linear interpolant to a function with given discrete data points (&lt;code&gt;xp&lt;/code&gt;, &lt;code&gt;fp&lt;/code&gt;), evaluated at &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6d974e97dff6b874b62e637b76121df7cd3fd0" translate="yes" xml:space="preserve">
          <source>Returns the pickle of the array as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3d2ea9cca86da6ee47a885279507f66b7426dc" translate="yes" xml:space="preserve">
          <source>Returns the pickle of the array as a string. pickle.loads or numpy.loads will convert the string back to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668f0eb9cb2aecc346de205aa45b54c97c370a13" translate="yes" xml:space="preserve">
          <source>Returns the polynomial &lt;code&gt;c&lt;/code&gt; raised to the power &lt;code&gt;pow&lt;/code&gt;. The argument &lt;code&gt;c&lt;/code&gt; is a sequence of coefficients ordered from low to high. i.e., [1,2,3] is the series &lt;code&gt;1 + 2*x + 3*x**2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98788735767277cb3a2812c6f467184b53c81177" translate="yes" xml:space="preserve">
          <source>Returns the polynomial coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the polynomial &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1 + 1*x + 2*y + 2*x*y&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812803e3d789955f6635617a019a448f8a912cff" translate="yes" xml:space="preserve">
          <source>Returns the polynomial coefficients &lt;code&gt;c&lt;/code&gt; integrated &lt;code&gt;m&lt;/code&gt; times from &lt;code&gt;lbnd&lt;/code&gt; along &lt;code&gt;axis&lt;/code&gt;. At each iteration the resulting series is &lt;strong&gt;multiplied&lt;/strong&gt; by &lt;code&gt;scl&lt;/code&gt; and an integration constant, &lt;code&gt;k&lt;/code&gt;, is added. The scaling factor is for use in a linear change of variable. (&amp;ldquo;Buyer beware&amp;rdquo;: note that, depending on what one is doing, one may want &lt;code&gt;scl&lt;/code&gt; to be the reciprocal of what one might expect; for more information, see the Notes section below.) The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients, from low to high degree along each axis, e.g., [1,2,3] represents the polynomial &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1 + 1*x + 2*y + 2*x*y&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034f18e1309d3af00dcecfcccba40ebc63a2dfc0" translate="yes" xml:space="preserve">
          <source>Returns the polynomial resulting from the sum of two input polynomials. Each input must be either a poly1d object or a 1D sequence of polynomial coefficients, from highest to lowest degree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d74340cddf0d729cebcaf8b2e4de65ebcd90b5" translate="yes" xml:space="preserve">
          <source>Returns the product of two Chebyshev series &lt;code&gt;c1&lt;/code&gt; * &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90407e92cc9ae107c5141f61cdb115c9772b8d39" translate="yes" xml:space="preserve">
          <source>Returns the product of two Hermite series &lt;code&gt;c1&lt;/code&gt; * &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b4851756e2216b22eca249f48dd9a0645c91af" translate="yes" xml:space="preserve">
          <source>Returns the product of two Laguerre series &lt;code&gt;c1&lt;/code&gt; * &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3d1969be746bdc953ad6a50b9f5f53423cb887" translate="yes" xml:space="preserve">
          <source>Returns the product of two Legendre series &lt;code&gt;c1&lt;/code&gt; * &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f47f44fd535dccc1d40014124d8bffd47f6c24e" translate="yes" xml:space="preserve">
          <source>Returns the product of two polynomials &lt;code&gt;c1&lt;/code&gt; * &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order term to highest, e.g., [1,2,3] represents the polynomial &lt;code&gt;1 + 2*x + 3*x**2.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca0e8567184e99925ad16f6cb0ea2e6f81257a6" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-Vandermonde matrix of degree &lt;code&gt;deg&lt;/code&gt; and sample points &lt;code&gt;x&lt;/code&gt;. The pseudo-Vandermonde matrix is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba4324de2b007c57da9981c59bca1e95d6295d5" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-Vandermonde matrix of degrees &lt;code&gt;deg&lt;/code&gt; and sample points &lt;code&gt;(x, y)&lt;/code&gt;. The pseudo-Vandermonde matrix is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0505a85f1546cf212b05a18cdbfac51ab8f0edab" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-Vandermonde matrix of degrees &lt;code&gt;deg&lt;/code&gt; and sample points &lt;code&gt;(x, y, z)&lt;/code&gt;. If &lt;code&gt;l, m, n&lt;/code&gt; are the given degrees in &lt;code&gt;x, y, z&lt;/code&gt;, then Hehe pseudo-Vandermonde matrix is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcba6a788557e27d1600c939b7e0e6bcee3df211" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-Vandermonde matrix of degrees &lt;code&gt;deg&lt;/code&gt; and sample points &lt;code&gt;(x, y, z)&lt;/code&gt;. If &lt;code&gt;l, m, n&lt;/code&gt; are the given degrees in &lt;code&gt;x, y, z&lt;/code&gt;, then The pseudo-Vandermonde matrix is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dfe6f7c95bdb4b62f68b53ef4ef0355bd56e7e" translate="yes" xml:space="preserve">
          <source>Returns the q-th percentile(s) of the array elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c4335c3eca743136a785e996958b7d4dd32720" translate="yes" xml:space="preserve">
          <source>Returns the qth percentile(s) of the array elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71204c4bcdfc548b2d775b43fa93febb5cb5c86" translate="yes" xml:space="preserve">
          <source>Returns the quotient and remainder of polynomial division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5539394ed1f9159fbcd5498b07cf3011c1c6013c" translate="yes" xml:space="preserve">
          <source>Returns the quotient-with-remainder of two Chebyshev series &lt;code&gt;c1&lt;/code&gt; / &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9b32eb3913036ab4848efb8a09e03a2b485c78" translate="yes" xml:space="preserve">
          <source>Returns the quotient-with-remainder of two Hermite series &lt;code&gt;c1&lt;/code&gt; / &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfe346de71f03469f33afec6b946010bed57838" translate="yes" xml:space="preserve">
          <source>Returns the quotient-with-remainder of two Laguerre series &lt;code&gt;c1&lt;/code&gt; / &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb4329aa6f46cc7b9b33ece62fbf989fb8a3eff" translate="yes" xml:space="preserve">
          <source>Returns the quotient-with-remainder of two Legendre series &lt;code&gt;c1&lt;/code&gt; / &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order &amp;ldquo;term&amp;rdquo; to highest, e.g., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3689b38a43f155518ee2dc202a48e26e60d74e0" translate="yes" xml:space="preserve">
          <source>Returns the quotient-with-remainder of two polynomials &lt;code&gt;c1&lt;/code&gt; / &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients, from lowest order term to highest, e.g., [1,2,3] represents &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c102b720ec8b29fab2892f9d407b1e75bc2dddf" translate="yes" xml:space="preserve">
          <source>Returns the real valued &lt;code&gt;n&lt;/code&gt;-point inverse discrete Fourier transform of &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; contains the non-negative frequency terms of a Hermitian-symmetric sequence. &lt;code&gt;n&lt;/code&gt; is the length of the result, not the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14414e7247ed656c7f8ecc2881b9ef6b21189dbd" translate="yes" xml:space="preserve">
          <source>Returns the reference count of any Python object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfd044511fa063c6d57e2098157507a22a9cd2d" translate="yes" xml:space="preserve">
          <source>Returns the result of: &lt;a href=&quot;#r3b2e08cf0480-g&quot; id=&quot;id1&quot;&gt;[G]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc97b6ac9048eac7422cd909b32da73491e7ee0" translate="yes" xml:space="preserve">
          <source>Returns the series coefficients &lt;code&gt;c&lt;/code&gt; differentiated &lt;code&gt;m&lt;/code&gt; times along &lt;code&gt;axis&lt;/code&gt;. At each iteration the result is multiplied by &lt;code&gt;scl&lt;/code&gt; (the scaling factor is for use in a linear change of variable). The argument &lt;code&gt;c&lt;/code&gt; is an array of coefficients from low to high degree along each axis, e.g., [1,2,3] represents the series &lt;code&gt;1*He_0 + 2*He_1 + 3*He_2&lt;/code&gt; while [[1,2],[1,2]] represents &lt;code&gt;1*He_0(x)*He_0(y) + 1*He_1(x)*He_0(y)
+ 2*He_0(x)*He_1(y) + 2*He_1(x)*He_1(y)&lt;/code&gt; if axis=0 is &lt;code&gt;x&lt;/code&gt; and axis=1 is &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c79d5bd1b828fe56fff7ab34262c86ebedb4db" translate="yes" xml:space="preserve">
          <source>Returns the series representing the basis polynomial of degree &lt;code&gt;deg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1459d65cb63a34507944e05e2b25e7a7d6d497" translate="yes" xml:space="preserve">
          <source>Returns the series that interpolates &lt;code&gt;func&lt;/code&gt; at the Chebyshev points of the first kind scaled and shifted to the &lt;a href=&quot;numpy.polynomial.chebyshev.chebyshev.domain#numpy.polynomial.chebyshev.Chebyshev.domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt;. The resulting series tends to a minmax approximation of &lt;code&gt;func&lt;/code&gt; when the function is continuous in the domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889a78eaaf95eb1635de57e9289a6f27c0493f50" translate="yes" xml:space="preserve">
          <source>Returns the sorted unique elements of an array. There are three optional outputs in addition to the unique elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1328cab3aac8e2dbdd547945290ba74e96f6f7e8" translate="yes" xml:space="preserve">
          <source>Returns the square identity matrix of given size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861999a4d2797ac1402d6d7712689a58393d7d9b" translate="yes" xml:space="preserve">
          <source>Returns the standard deviation of the array elements along given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3992f1b6b548da7f78877dbf11faaf6ecdfed3" translate="yes" xml:space="preserve">
          <source>Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63aef6e94d92ea777f2481ab542787c8497e5843" translate="yes" xml:space="preserve">
          <source>Returns the standard deviation, a measure of the spread of a distribution, of the non-NaN array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a9d452b0a14e574110fec9c963939343b0a696" translate="yes" xml:space="preserve">
          <source>Returns the sum of the matrix elements, along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56df12876e3ef3c2d6402f1711e1dd9e201b9d47" translate="yes" xml:space="preserve">
          <source>Returns the sum of two Chebyshev series &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients ordered from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;T_0 + 2*T_1 + 3*T_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8d90e8f5058c85c858181fdd853bb681b639b1" translate="yes" xml:space="preserve">
          <source>Returns the sum of two Hermite series &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients ordered from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e343afc4ec403ddb4a07a175db27c8b934548217" translate="yes" xml:space="preserve">
          <source>Returns the sum of two Laguerre series &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients ordered from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ebba99b5e682337f429d0518b0a4b4683cc9ba" translate="yes" xml:space="preserve">
          <source>Returns the sum of two Legendre series &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients ordered from lowest order term to highest, i.e., [1,2,3] represents the series &lt;code&gt;P_0 + 2*P_1 + 3*P_2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d3aa31dd6cc24bc5142adf29bfe7ab68a96cdb" translate="yes" xml:space="preserve">
          <source>Returns the sum of two polynomials &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt;. The arguments are sequences of coefficients from lowest order term to highest, i.e., [1,2,3] represents the polynomial &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555517df976270d26d220b5abd37ae3b29e81e02" translate="yes" xml:space="preserve">
          <source>Returns the total number of bytes consumed by the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a3eedbbc4447295f4b3ab0817e2c8e44d52e17" translate="yes" xml:space="preserve">
          <source>Returns the total size (in number of elements) of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0122f2e064e120539e47c2e76d79dd0769a6974" translate="yes" xml:space="preserve">
          <source>Returns the transpose of the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8103951f3b101ed891e0245214697d04e8671403" translate="yes" xml:space="preserve">
          <source>Returns the type that results from applying the NumPy type promotion rules to the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdf7db87570a7f6c52908fc3ad9fbec4db3a6e1" translate="yes" xml:space="preserve">
          <source>Returns the type that results from applying the numpy type promotion rules to the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcb970733afa5b097af33d9de77b7cbac4cb640" translate="yes" xml:space="preserve">
          <source>Returns the underlying data, as a view of the masked array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed561673c346b9f16c4ec4d4ff08b3f280f244d" translate="yes" xml:space="preserve">
          <source>Returns the value of x with the sign bit copied from y. Works for any value, including Inf and NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16099bcc078e16d07a4ae75c8b6b654b6332317e" translate="yes" xml:space="preserve">
          <source>Returns the variance of the array elements, a measure of the spread of a distribution. The variance is computed for the flattened array by default, otherwise over the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb18ae95c5e35204046cc09e398511056be63bc4" translate="yes" xml:space="preserve">
          <source>Returns the variance of the array elements, along given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e9acb4bd3a02b91f54dfa17e1b2f763becd3b7" translate="yes" xml:space="preserve">
          <source>Returns the variance of the matrix elements, along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b884a60c7fe7f37e25842c08ff53b680b391dc" translate="yes" xml:space="preserve">
          <source>Returns the x, y values at &lt;code&gt;n&lt;/code&gt; linearly spaced points across the domain. Here y is the value of the polynomial at the points x. By default the domain is the same as that of the series instance. This method is intended mostly as a plotting aid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c294f4eec79060386173bdf27e8490ba02b492" translate="yes" xml:space="preserve">
          <source>Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753528b5ab5f175f46668650b8bacacaa16504ef" translate="yes" xml:space="preserve">
          <source>Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfbeb6b6c0b416ee8e5cf4faf5b53f0aadf96a8" translate="yes" xml:space="preserve">
          <source>Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7fa053bb092cbadbd2af9aae8682af88372ecd" translate="yes" xml:space="preserve">
          <source>Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9557a4d0e93669375c528934eeb8740504713415" translate="yes" xml:space="preserve">
          <source>Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cb6901402641740a602c53764c017cb120ceda" translate="yes" xml:space="preserve">
          <source>Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9518f21664e4afe6128d00ac71f7d1491d8fae5" translate="yes" xml:space="preserve">
          <source>Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc23eaf8decd7d27362fe8a53e892bd8e30c837d" translate="yes" xml:space="preserve">
          <source>Returns two objects, a 1-D array containing the eigenvalues of &lt;code&gt;a&lt;/code&gt;, and a 2-D square array or matrix (depending on the input type) of the corresponding eigenvectors (in columns).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df936a304bc9cb4981c0751ad709ae03295d24c" translate="yes" xml:space="preserve">
          <source>Returns x1 * 2**x2, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de06e6a3f0a0e4f05c1785f0626100e3a7e7650" translate="yes" xml:space="preserve">
          <source>Reusing a C library from another package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231aa4b8807deb9df59f688eef9ddc9a775ad8bb" translate="yes" xml:space="preserve">
          <source>Reverse the order of elements in an array along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98e658c19c9f301dd9e3485679871cb4ee5e57f" translate="yes" xml:space="preserve">
          <source>Right-hand tensor, which can be of any shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6a870cf722e4c806fc7839a0d6357be9862122" translate="yes" xml:space="preserve">
          <source>Right-most separator to split each element in array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7220212e40671919000e3bf88fe1b3c9fdb58d86" translate="yes" xml:space="preserve">
          <source>Robust (resilient to outliers) estimator that takes into account data variability and data size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632fe7c40d78f157a979c1254b96d791cf9757c5" translate="yes" xml:space="preserve">
          <source>Roll array elements along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f0226b8f652356fa69f1458fcf0dac541d2f26" translate="yes" xml:space="preserve">
          <source>Roll the elements of an array by a number of positions along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e111e906c0921c62bf2e9cb93a9ad178fda871c0" translate="yes" xml:space="preserve">
          <source>Roll the specified axis backwards, until it lies in a given position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98b0ca605945d95c50600bf91067a279fbd44fc" translate="yes" xml:space="preserve">
          <source>Roll two six sided dice 1000 times and sum the results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcb398cc910717cb25001dcf54232455707365a" translate="yes" xml:space="preserve">
          <source>Roots:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb153005d9e21d383a2c6e3be0c44b1fe3a63a2d" translate="yes" xml:space="preserve">
          <source>Rotate an array by 90 degrees in the plane specified by axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a259a41b2e5b39d4b06f8e1a5fe18db3ab0c4b" translate="yes" xml:space="preserve">
          <source>Rotate array counterclockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ab8ec584238c82a5212e48cb3759a55758f2a7" translate="yes" xml:space="preserve">
          <source>Rotation direction is from the first towards the second axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef6710278af843c63eb4804971e9e7223129ff9" translate="yes" xml:space="preserve">
          <source>Round a number to the nearest integer toward infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e06589436e268833d1881f2f6462dd9a4c08f4" translate="yes" xml:space="preserve">
          <source>Round a number to the nearest integer toward minus infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbd6fdca0872074d7ea10498d4f4539891707a4" translate="yes" xml:space="preserve">
          <source>Round an array of floats element-wise to nearest integer towards zero. The rounded values are returned as floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00de80754bba4d0e8ba276a85eb44caf0893d44b" translate="yes" xml:space="preserve">
          <source>Round an array to the given number of decimals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0073184d9bc88d5eb76d1886770536810e5e88c8" translate="yes" xml:space="preserve">
          <source>Round elements of the array to the nearest integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1202882c35083babeaf5c44663b51b79c7528ec" translate="yes" xml:space="preserve">
          <source>Round to given number of decimals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0435f2a63e7a6f18b43a28bac8f5340822cb081f" translate="yes" xml:space="preserve">
          <source>Round to nearest integer towards zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905cc3792492961c10eb158788a7c9f956d57aa5" translate="yes" xml:space="preserve">
          <source>Rounding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a445e5ad1fb1907481f4ddbc262ce7d8458bf4fe" translate="yes" xml:space="preserve">
          <source>Routines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a0442e12c879ca82d9a4ff475b0a52a67d183e" translate="yes" xml:space="preserve">
          <source>Row-major (C-style) or column-major (Fortran-style) order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b10de0c605d74957808597fe0048296ee8e401f" translate="yes" xml:space="preserve">
          <source>Rules for installation paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482c3d9df82671ce896fb7bde9617c5b2fb25b36" translate="yes" xml:space="preserve">
          <source>Run a test module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cad5152fa9dd89c0311e56531d8eb651e932a8" translate="yes" xml:space="preserve">
          <source>Run doctests found in the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696e4c661450d7937db29b17bc26dfb494678b53" translate="yes" xml:space="preserve">
          <source>Running this from the Python interpreter produces the same answers as our native Python/NumPy code did.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9cb5b040f4dae3fe4cb250a7e3cfe66da6fdda" translate="yes" xml:space="preserve">
          <source>SFC64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c387eaab9d4aa15a891083867d719e44ab39eeb7" translate="yes" xml:space="preserve">
          <source>SFC64 - A fast generator based on random invertible mappings. Usually the fastest generator of the four. See the &lt;a href=&quot;http://pracrand.sourceforge.net/RNG_engines.txt&quot;&gt;SFC author&amp;rsquo;s page&lt;/a&gt; for (a little) more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0159189813715cb594d6925030c6b1c554da97" translate="yes" xml:space="preserve">
          <source>SFC64 Small Fast Chaotic PRNG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93db16809e7e08fc5b307c5dac1d071ac2ffe024" translate="yes" xml:space="preserve">
          <source>SFC64.cffi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c70f8e77e814d093abf0c432b09e04412d07414" translate="yes" xml:space="preserve">
          <source>SFC64.ctypes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c29743e92aa8405c74e1aec744ed96cb16b9a6" translate="yes" xml:space="preserve">
          <source>SFC64.state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a081af39b5090da8572fb3b42d46a96a05c3a63" translate="yes" xml:space="preserve">
          <source>SVD is usually described for the factorization of a 2D matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5284a44de20af4d8fda72c52069fea5f8f3e96f7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#c.NPY_ITEM_REFCOUNT&quot;&gt;&lt;code&gt;NPY_ITEM_REFCOUNT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0821f9ed8f87afd42b3c108e416912412bf96c6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;numpy.ndarray.mean#numpy.ndarray.mean&quot;&gt;&lt;code&gt;ndarray.mean&lt;/code&gt;&lt;/a&gt; except that, where that returns an &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;, this returns a &lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe606b4476f6db839be0cc036e84badd1677b28e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;numpy.ndarray.prod#numpy.ndarray.prod&quot;&gt;&lt;code&gt;ndarray.prod&lt;/code&gt;&lt;/a&gt;, except, where that returns an &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;, this returns a &lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/a&gt; object instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5cffd944b6e5b6c1e94c80f05651121d801fb2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;numpy.ndarray.ptp#numpy.ndarray.ptp&quot;&gt;&lt;code&gt;ndarray.ptp&lt;/code&gt;&lt;/a&gt;, except, where that would return an &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; object, this returns a &lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0643e4a16350ea173b9b0a8912b24ff1de619acc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;eps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf57153dc4245d12e46ba27a1830237c75c5b31" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;self.transpose()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986319e53de4261fe58310c58f31ac3908578e97" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;xmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ff064d357d2d9014f1d60ce928cc8ed1a10b62" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;xmin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f13898983ea35ed65c623a2897bcfed3c118b7" translate="yes" xml:space="preserve">
          <source>Same as PyArray_MatrixProduct, but store the result in &lt;em&gt;out&lt;/em&gt;. The output array must have the correct shape, type, and be C-contiguous, or an exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9aa2f95bc6e9d0f3a61f32a8c597c512d3672d" translate="yes" xml:space="preserve">
          <source>Same thing without the added noise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859449a4d3d6686c281e85a475b499646f970b6e" translate="yes" xml:space="preserve">
          <source>Sample spacing (inverse of the sampling rate). Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d485289c6f6dc71bf065ec3cda03098a214efc" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a Gamma distribution with specified parameters, &lt;code&gt;shape&lt;/code&gt; (sometimes designated &amp;ldquo;k&amp;rdquo;) and &lt;code&gt;scale&lt;/code&gt; (sometimes designated &amp;ldquo;theta&amp;rdquo;), where both parameters are &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292bf0606e0fce9a550ce09f811744a2d52ff4b2" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a Gamma distribution with specified parameters, shape (sometimes designated &amp;ldquo;k&amp;rdquo;) and scale=1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df7e41bdf9569985c1aa43e6794e3eeb780c017" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a Zipf distribution with specified parameter &lt;code&gt;a&lt;/code&gt; &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5250057b4b5fd8c546513ca9ab55476b863ba678" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a binomial distribution with specified parameters, n trials and p probability of success where n an integer &amp;gt;= 0 and p is in the interval [0,1]. (n may be input as a float, but it is truncated to an integer in use)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbb69b6e5ec7d08f0e2435ee1314b66a818968b" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a hypergeometric distribution with specified parameters, &lt;code&gt;ngood&lt;/code&gt; (ways to make a good selection), &lt;code&gt;nbad&lt;/code&gt; (ways to make a bad selection), and &lt;code&gt;nsample&lt;/code&gt; (number of items sampled, which is less than or equal to the sum &lt;code&gt;ngood + nbad&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4da6fd6cd239d95203286c66f246b73ebba651" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a log series distribution with specified shape parameter, 0 &amp;lt; &lt;code&gt;p&lt;/code&gt; &amp;lt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2642093206fd7f788ffdf56363454a5315a935c3" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a logistic distribution with specified parameters, loc (location or mean, also median), and scale (&amp;gt;0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7898fb57c300f285ca6a3cce375169d55effe7" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a negative binomial distribution with specified parameters, &lt;code&gt;n&lt;/code&gt; successes and &lt;code&gt;p&lt;/code&gt; probability of success where &lt;code&gt;n&lt;/code&gt; is &amp;gt; 0 and &lt;code&gt;p&lt;/code&gt; is in the interval [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455cf138a17b68d1fc0c1eed8d31fa7c4006171d" translate="yes" xml:space="preserve">
          <source>Samples are drawn from a von Mises distribution with specified mode (mu) and dispersion (kappa), on the interval [-pi, pi].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4f03b29c8e3b63c24cec04cc545cc1fd8cf5d6" translate="yes" xml:space="preserve">
          <source>Samples are drawn from an F distribution with specified parameters, &lt;code&gt;dfnum&lt;/code&gt; (degrees of freedom in numerator) and &lt;code&gt;dfden&lt;/code&gt; (degrees of freedom in denominator), where both parameters &amp;gt; 1. &lt;code&gt;nonc&lt;/code&gt; is the non-centrality parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4892bdfe2aaeaf82fbd092fa5988f294bc583a61" translate="yes" xml:space="preserve">
          <source>Samples are drawn from an F distribution with specified parameters, &lt;code&gt;dfnum&lt;/code&gt; (degrees of freedom in numerator) and &lt;code&gt;dfden&lt;/code&gt; (degrees of freedom in denominator), where both parameters must be greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb08e3515ffd6aa9d5bee107026229ac17863ca" translate="yes" xml:space="preserve">
          <source>Samples are uniformly distributed over the half-open interval &lt;code&gt;[low, high)&lt;/code&gt; (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by &lt;a href=&quot;#numpy.random.Generator.uniform&quot;&gt;&lt;code&gt;uniform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9383c411a0915a47021cbe45a442f8d0fdfdd3e" translate="yes" xml:space="preserve">
          <source>Samples are uniformly distributed over the half-open interval &lt;code&gt;[low, high)&lt;/code&gt; (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by &lt;a href=&quot;#numpy.random.mtrand.RandomState.uniform&quot;&gt;&lt;code&gt;uniform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e0b005ca82c3880442e9e9a7df96f006de258b" translate="yes" xml:space="preserve">
          <source>Save a masked array to a file in binary format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911a916b79ab4bc074d4f36912c7fcb7aa4fb620" translate="yes" xml:space="preserve">
          <source>Save a single array to a binary file in NumPy format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be789a78cf6b85597d4ddf6213d2224a3e631822" translate="yes" xml:space="preserve">
          <source>Save an array to a binary file in NumPy &lt;code&gt;.npy&lt;/code&gt; format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba53caacee0f1259455de36e504f82387901221" translate="yes" xml:space="preserve">
          <source>Save an array to a binary file in NumPy &lt;code&gt;.npy&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae01427f92b7456f5ec5bc4f8ee0ae7409a744f4" translate="yes" xml:space="preserve">
          <source>Save an array to a file as plain text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e71c5c94b983abfad5d7a619c58515029b9590" translate="yes" xml:space="preserve">
          <source>Save an array to a text file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54418cd6e366b63c682bf48fc64d3d0a4bf3ce65" translate="yes" xml:space="preserve">
          <source>Save several arrays into a &lt;code&gt;.npz&lt;/code&gt; archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021c93af546584623236047204c21bba0386e331" translate="yes" xml:space="preserve">
          <source>Save several arrays into a compressed &lt;code&gt;.npz&lt;/code&gt; archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c68241efc575af7cb341cd4262bbd68e582701" translate="yes" xml:space="preserve">
          <source>Save several arrays into a single file in compressed &lt;code&gt;.npz&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ff9d364225dd18ab7f086fb25a1a8994e9b5f3" translate="yes" xml:space="preserve">
          <source>Save several arrays into a single file in uncompressed &lt;code&gt;.npz&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe177b86d821a794e0add75b799a949b995201f" translate="yes" xml:space="preserve">
          <source>Save several arrays into an uncompressed &lt;code&gt;.npz&lt;/code&gt; archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3834037486fe19959e5d74bb67ba75ca5f90b37c" translate="yes" xml:space="preserve">
          <source>Save several arrays into an uncompressed &lt;code&gt;.npz&lt;/code&gt; file format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96abd2c6b79ee8cefdc4d885ebbf8bf5eb950e9e" translate="yes" xml:space="preserve">
          <source>Save the raw data to disk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbae089728fbd07d2074ad963d381420ee002558" translate="yes" xml:space="preserve">
          <source>Scalar inputs are converted to 1-dimensional arrays, whilst higher-dimensional inputs are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a487a95dda8c7320c2a85629036aba70a8b62f6" translate="yes" xml:space="preserve">
          <source>Scalar multiplication raises an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059145f049285d511ac68922d472332e007411c0" translate="yes" xml:space="preserve">
          <source>Scalar representation of &lt;code&gt;a&lt;/code&gt;. The output data type is the same type returned by the input&amp;rsquo;s &lt;code&gt;item&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f022d1745ad0c0eeb0f1290564887589cd41951" translate="yes" xml:space="preserve">
          <source>ScalarArrayTypes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b48aed2add2b87361aacba152bfad9a3b60a3a" translate="yes" xml:space="preserve">
          <source>Scalars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4826e6ef9018b6fbf17f3255b508abfe544913" translate="yes" xml:space="preserve">
          <source>Scale parameter, must be &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d36d2d6ae526784915f210e3fb8dde2023d2741" translate="yes" xml:space="preserve">
          <source>Scale, also equals the mode. Must be non-negative. Default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d8be118bc39d12d4a10d74286dab4f70d176d9" translate="yes" xml:space="preserve">
          <source>Scaled companion matrix of dimensions (deg, deg).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f0936d7f1fd48b7b8ab09a84e5ccbd404fee5f" translate="yes" xml:space="preserve">
          <source>SciPy &amp;mdash; a collection of scientific tools for Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e184aada462085df37c7560cdb13c82af8c9fb" translate="yes" xml:space="preserve">
          <source>SciPy consists of Python packages, called SciPy packages, that are available to Python users via the &lt;code&gt;scipy&lt;/code&gt; namespace. Each SciPy package may contain other SciPy packages. And so on. Therefore, the SciPy directory tree is a tree of packages with arbitrary depth and width. Any SciPy package may depend on NumPy packages but the dependence on other SciPy packages should be kept minimal or zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e94aba713782c22853e995a20e9f3be2dad06e8" translate="yes" xml:space="preserve">
          <source>SciPy pure Python package example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56355002d65034ce1206bc48c155f52fefbd24f" translate="yes" xml:space="preserve">
          <source>SciPy structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034e5d890cd435fe540161b6563bbf26cb52539a" translate="yes" xml:space="preserve">
          <source>SciPy uses the testing framework from &lt;a href=&quot;routines.testing#module-numpy.testing&quot;&gt;&lt;code&gt;numpy.testing&lt;/code&gt;&lt;/a&gt;, so all the SciPy examples shown here are also applicable to NumPy. NumPy&amp;rsquo;s full test suite can be run as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2e1da1c964383188e00a10d2e39b923197f807" translate="yes" xml:space="preserve">
          <source>Second argument to the dot product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef33b9083ac3caeba432f4b438a6779b5a70013" translate="yes" xml:space="preserve">
          <source>Second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5ad8b50723a7d1fd17584bedb0f83a41415a3b" translate="yes" xml:space="preserve">
          <source>Second array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221217640b561f4f6031bb5b13fc0d6996901859" translate="yes" xml:space="preserve">
          <source>Second axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c1b237f4f300bba4fa4c9ac90f12b44936dc59" translate="yes" xml:space="preserve">
          <source>Second data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4787861f1057c421779e8f1dedf89da61ae27f" translate="yes" xml:space="preserve">
          <source>Second input vector. Input is flattened if not already 1-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb13a05930d9e71ca1063cf578d1a9fdd2a8c6d" translate="yes" xml:space="preserve">
          <source>Second mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d29ac55b3ec08df028359b5d454eb4ba1e410b" translate="yes" xml:space="preserve">
          <source>Second one-dimensional input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e2f5f8f159edc62dbf9c3ce59c926f0a69e928" translate="yes" xml:space="preserve">
          <source>Second operand for ufuncs requiring two operands. Operand must be broadcastable over first operand after indexing or slicing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc1e296313c284444e01aa95fbe95c897b4202e" translate="yes" xml:space="preserve">
          <source>Section &amp;ldquo;Output arguments&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfb9ee7c8187701f4953f4898745e4a0133d308" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt;&lt;code&gt;numpy.fft&lt;/code&gt;&lt;/a&gt; for definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39476c56ef5f38d2b1f008f544da6916173b58b1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt;&lt;code&gt;numpy.fft&lt;/code&gt;&lt;/a&gt; for details, definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f111cce9ed2d7158c1f45c1a7d864f18edbaaf3f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;arrays.dtypes#string-dtype-note&quot;&gt;Note on string types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e4d97067b946e4ef690b272184e4efc5ede623" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;new-or-different#new-or-different&quot;&gt;What&amp;rsquo;s New or Different&lt;/a&gt; for a complete list of improvements and differences from the traditional &lt;code&gt;Randomstate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f0e6dd051b734927a01c5db87a2be927d800dd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.diag_indices#numpy.diag_indices&quot;&gt;&lt;code&gt;diag_indices&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5443e9a54948aa9c9379a327531c6bccc7711bdf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.einsum_path#numpy.einsum_path&quot;&gt;&lt;code&gt;numpy.einsum_path&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686c392217c3aaf7298c3e78ad0a9f7cb212a937" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.fft.fft#numpy.fft.fft&quot;&gt;&lt;code&gt;fft&lt;/code&gt;&lt;/a&gt; for definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205ca8dcd159fbcee76df1b2fef8925f1440e59e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.fft.fft#numpy.fft.fft&quot;&gt;&lt;code&gt;fft&lt;/code&gt;&lt;/a&gt; for details, definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9478a5052b310742b09afa66203bc879673c7b08" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.fft.fftn#numpy.fft.fftn&quot;&gt;&lt;code&gt;fftn&lt;/code&gt;&lt;/a&gt; for details and a plotting example, and &lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt;&lt;code&gt;numpy.fft&lt;/code&gt;&lt;/a&gt; for definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675d16e4fa406a9a6c6a04ecb2e8ae0357bdec4d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.fft.ifftn#numpy.fft.ifftn&quot;&gt;&lt;code&gt;ifftn&lt;/code&gt;&lt;/a&gt; for details and a plotting example, and &lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt;&lt;code&gt;numpy.fft&lt;/code&gt;&lt;/a&gt; for definition and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7538fd13cf14ea1644418142ccb8df97c6be45c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.fft.rfft#numpy.fft.rfft&quot;&gt;&lt;code&gt;rfft&lt;/code&gt;&lt;/a&gt; for definitions and conventions used for real input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d8b147d16c03edc0300c16ec51d7d6ca5bbe18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.ma.sort#numpy.ma.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; for notes on the different sorting algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cb24d59875b3cc3574d8087b692673ddcdb195" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.ndarray.tolist#numpy.ndarray.tolist&quot;&gt;&lt;code&gt;ndarray.tolist&lt;/code&gt;&lt;/a&gt; for full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9267ac587bed3ccf047481f2944300dad26164" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; parameters of the same name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45cefa68ab5a49c7fc455bfaecdfb960c92f083" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.partition#numpy.partition&quot;&gt;&lt;code&gt;partition&lt;/code&gt;&lt;/a&gt; for notes on the different selection algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40a1aa29fa9651123546ac2519835462e20cae8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;numpy.sort&lt;/code&gt;&lt;/a&gt; for notes on the different sorting algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba13a78a2a0a3fa0752c74cc8d90a5244ecac0db" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; for notes on the different sorting algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193831fdc2be9f5768df3d003b30aca1e44dbbda" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.tril_indices#numpy.tril_indices&quot;&gt;&lt;code&gt;tril_indices&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd11c543ebfdc5c211e4a6d71346d0822c268b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numpy.triu_indices#numpy.triu_indices&quot;&gt;&lt;code&gt;triu_indices&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d124b82767a9a18459a70bf42d4d1a5c2cabceaa" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;new-or-different&lt;/code&gt; for more information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9ae24d30e172d05736d39babb905ced23075a8" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;np.partition&lt;/code&gt; for notes on the different algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad79a6d0f605b65724a6a24d54e33980e6ab85b" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;numpy.polynomial.chebfromfunction&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d7757a34f4e9d0f656d306b6f251fdbb133f09" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;sort&lt;/code&gt; for notes on the different sorting algorithms.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
