<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="d95c8bef773580433166be7c2c32b85e8e849e6f" translate="yes" xml:space="preserve">
          <source>If a 2-digit code is entered, it is converted to 3 digits by prepending a 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64a7d7369be70b0218a1b95be79c2c2deb28c1d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; is used in a context that is looking for a list, a list comprising all input lines is returned, one line per list element. It's easy to grow to a rather large data space this way, so use with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259cdf2dd383c0f84fbe2ca3b6aceeeeaeccb785" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; can find a &lt;code&gt;CxEVAL&lt;/code&gt; block on the context stack, then the stack is popped to that level and the return op in that block is assigned to &lt;code&gt;PL_restartop&lt;/code&gt; ; then a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; is performed. This normally passes control back to the guard. In the case of &lt;code&gt;perl_run&lt;/code&gt; and &lt;code&gt;call_sv&lt;/code&gt; , a non-null &lt;code&gt;PL_restartop&lt;/code&gt; triggers re-entry to the runops loop. The is the normal way that &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt; is handled within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e842b426c14ec5c17e64ac341313bcce514b5ce" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is taken from the current locale. If Unicode (for example, &lt;code&gt;\N{}&lt;/code&gt; or code points of 0x100 or beyond) is being used, the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is as defined by Unicode. That means that case-mapping a single character can sometimes produce a sequence of several characters. Under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; produces the same results as &lt;code&gt;\L&lt;/code&gt; for all locales but a UTF-8 one, where it instead uses the Unicode definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549e5fcf45cf7944f8141812970bb7a27ad11345" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Net::POP3&lt;/code&gt; object goes out of scope before &lt;code&gt;quit&lt;/code&gt; method is called then the &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; method will called before the connection is closed. This means that any messages marked to be deleted will not be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043d74f31a25532198b1527d3ae5c4b1da9715ef" translate="yes" xml:space="preserve">
          <source>If a CODE reference is not used, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12066458359083bdcf249636aa07df8a14816c7" translate="yes" xml:space="preserve">
          <source>If a CODE reference is used then a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ad0abaf0eff45a492a44f419b412cf87f4dd03" translate="yes" xml:space="preserve">
          <source>If a FILEHANDLE is supplied, it must be writable and opened in append mode (i.e., use &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FH, '&amp;gt;&amp;gt;filename')&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen(FH,...,O_APPEND|O_RDWR)&lt;/a&gt;&lt;/code&gt;. If a filename is supplied, it should not be held open elsewhere. (Win32)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af3f41934dd0fe8f979cc12d4f4c701b5fb0dcf" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any command other than the ones listed above (like &quot;=head&quot;, or &quot;=haed1&quot;, or &quot;=stuff&quot;, or &quot;=cuttlefish&quot;, or &quot;=w123&quot;), that processor must by default treat this as an error. It must not process the paragraph beginning with that command, must by default warn of this as an error, and may abort the parse. A Pod parser may allow a way for particular applications to add to the above list of known commands, and to stipulate, for each additional command, whether formatting codes should be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d7b60c1fec814496b3c4bc1816a8d5d03c5699" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any formatting code other than the ones listed above (as in &quot;N&amp;lt;...&amp;gt;&quot;, or &quot;Q&amp;lt;...&amp;gt;&quot;, etc.), that processor must by default treat this as an error. A Pod parser may allow a way for particular applications to add to the above list of known formatting codes; a Pod parser might even allow a way to stipulate, for each additional command, whether it requires some form of special processing, as L&amp;lt;...&amp;gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69d2c6e5370a359253a714b367c144cea0b32a3" translate="yes" xml:space="preserve">
          <source>If a SKIP directive is included with the plan, this method will return it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc36fbb42452cd08e5fbc977b40571fcb5ba6163" translate="yes" xml:space="preserve">
          <source>If a SKIP directive was included with the plan, this method will return the explanation, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c8d4e7e9fdf0b61712f2ee7b9d5069189ec21c" translate="yes" xml:space="preserve">
          <source>If a TODO test does succeed, then the feature in question shouldn't be on the TODO list, now should it?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc13fa8b4104f174148a214dadae282567de13a" translate="yes" xml:space="preserve">
          <source>If a character that isn't an octal digit is encountered, a warning is raised, and the value is based on the octal digits before it, discarding it and all following characters up to the closing brace. It is a fatal error if there are no octal digits at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ce7778730981e7a416c117aaec163fa0497dba" translate="yes" xml:space="preserve">
          <source>If a check for non-empty is what you wanted then just put it in boolean context (see &lt;a href=&quot;perldata#Scalar-values&quot;&gt;Scalar values in perldata&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbe66a04a030c6e054fb0dfd4a30c2a7ed6df30" translate="yes" xml:space="preserve">
          <source>If a child calls &quot;skip_all&quot; in the plan, a &lt;code&gt;Test::Builder::Exception&lt;/code&gt; is thrown. Trap this error, call &lt;code&gt;finalize()&lt;/code&gt; and don't run any more tests on the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2b6a0e0e45f39177eb31d01e15e452bd57cce8" translate="yes" xml:space="preserve">
          <source>If a comparison subroutine (comp) is defined, it must return less than zero, zero, or greater than zero, if the first comparand is less than, equal, or greater than the second comparand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcefbb01c642f7f0fc9b06ad8c1d9b86690b30e" translate="yes" xml:space="preserve">
          <source>If a config variable name ends with &lt;code&gt;list&lt;/code&gt; , it is a list. &lt;code&gt;o conf
KEY &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; removes the first element of the list, &lt;code&gt;o conf KEY &lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; removes the last element of the list. &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; LIST&lt;/code&gt; prepends a list of values to the list, &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; LIST&lt;/code&gt; appends a list of valued to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5109117db036bd8645f50a5e04d368af63084ec5" translate="yes" xml:space="preserve">
          <source>If a container object, such as a hash or array, is locked, all the elements of that container are not locked. For example, if a thread does a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt; @a&lt;/code&gt; , any other thread doing a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock($a[12])&lt;/a&gt;&lt;/code&gt; won't block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca4e72f15d2d8185a5bffef1f8b63be490eec41" translate="yes" xml:space="preserve">
          <source>If a default timeout ($def_timeout) in seconds is provided, it is used when a timeout is not given to the ping() method (below). The timeout must be greater than 0 and the default, if not specified, is 5 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb3d5a547282377cc66b4c5457632db46bb8ed9" translate="yes" xml:space="preserve">
          <source>If a dereference operator is overloaded then it must return a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe98464b03f834d1a964476866ec0454738cfc5e" translate="yes" xml:space="preserve">
          <source>If a directory name is specified, Perl will switch to that directory before running the program. The &lt;b&gt;-x&lt;/b&gt; switch controls only the disposal of leading garbage. The program must be terminated with &lt;code&gt;__END__&lt;/code&gt; if there is trailing garbage to be ignored; the program can process any or all of the trailing garbage via the &lt;code&gt;DATA&lt;/code&gt; filehandle if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaf565f5088172c3b4f50e88e5260fa4d43f871" translate="yes" xml:space="preserve">
          <source>If a distribution defines a minimal required perl version, this is added to the output as an additional line of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b6266ffbedee9d19b5a6a2dc00e2ab21c075e3" translate="yes" xml:space="preserve">
          <source>If a false value (but not &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideHangul&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f3060c136c5cb39245327e845028b89a018338" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideCJK&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce3e5ab6913747cb34ccc5fe411d22f75b39a20" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideOut&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cf492ed81687842dddeeef058d5e33b14e6b8c" translate="yes" xml:space="preserve">
          <source>If a field width obtained through &lt;code&gt;*&lt;/code&gt; is negative, it has the same effect as the &lt;code&gt;-&lt;/code&gt; flag: left-justification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9605e9893d52ad305cb79e90d906d025024d5412" translate="yes" xml:space="preserve">
          <source>If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the &lt;b&gt;-n&lt;/b&gt; switch. A &lt;b&gt;-p&lt;/b&gt; overrides a &lt;b&gt;-n&lt;/b&gt; switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7607c4673d0f39465175ed86077289b9bf56cef9" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a key from a DBM database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcdc45cfdda9fabc4fc72ffad32b6bd83924c58" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a value from a DBM database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd250eca2a3b32b9a72984e5551322c2a78954ba" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a key to a DBM database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4a7b6c0f00f48df8682a8b26e45e64646603ea" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a value to a DBM database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c644e7c4d09f78ea460ddc805cbed0f24eef71" translate="yes" xml:space="preserve">
          <source>If a fully qualified $class is given, its abbreviated version is checked first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61efacc190b96b684717f3100b2802427ca3f5f2" translate="yes" xml:space="preserve">
          <source>If a hyphen in a character class cannot syntactically be part of a range, for instance because it is the first or the last character of the character class, or if it immediately follows a range, the hyphen isn't special, and so is considered a character to be matched literally. If you want a hyphen in your set of characters to be matched and its position in the class is such that it could be considered part of a range, you must escape that hyphen with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9b736d2bd9dc9660e81744f77377a13eb0a302" translate="yes" xml:space="preserve">
          <source>If a key appears more than once in the initializer list of a hash, the last occurrence wins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38101b895429346e058b0e8e435924731bb16b2" translate="yes" xml:space="preserve">
          <source>If a layer provides &lt;code&gt;Open()&lt;/code&gt; it should normally call the &lt;code&gt;Open()&lt;/code&gt; method of next layer down (if any) and then push itself on top if that succeeds. &lt;code&gt;PerlIOBase_open&lt;/code&gt; is provided to do exactly that, so in most cases you don't have to write your own &lt;code&gt;Open()&lt;/code&gt; method. If this method is not defined, other layers may have difficulty pushing themselves on top of it during open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dbe9c1af884c682c784ff2164f939b559495d3" translate="yes" xml:space="preserve">
          <source>If a lexical variable is given an attribute, there is no symbol table to which it belongs, so the symbol table argument (&lt;code&gt;$_[1]&lt;/code&gt; ) is set to the string &lt;code&gt;'LEXICAL'&lt;/code&gt; in that case. Likewise, ascribing an attribute to an anonymous subroutine results in a symbol table argument of &lt;code&gt;'ANON'&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373e9d26b4e220dbf14e875851af78e4ef70cdec" translate="yes" xml:space="preserve">
          <source>If a line was available from the source stream, &lt;code&gt;filter_read()&lt;/code&gt; returns a status value greater than zero and appends the line to &lt;code&gt;$_&lt;/code&gt; . A status value of zero indicates end-of-file, less than zero means an error. The filter function itself is expected to return its status in the same way, and put the filtered line it wants written to the source stream in &lt;code&gt;$_&lt;/code&gt; . The use of &lt;code&gt;$_&lt;/code&gt; accounts for the brevity of most Perl source filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb73e02f11dc05b75008088bd5b205cf808a5add" translate="yes" xml:space="preserve">
          <source>If a matching entry cannot be found, and a default entry exists, then a reference to the default entry is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c613dbc045a6d1ccd39d5e4d8985654cb6efdedb" translate="yes" xml:space="preserve">
          <source>If a message can be controlled by the &lt;code&gt;warnings&lt;/code&gt; pragma, its warning category is included with the classification letter in the description below. E.g. &lt;code&gt;(W closed)&lt;/code&gt; means a warning in the &lt;code&gt;closed&lt;/code&gt; category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00576e48e7083129f4536c4d9542b2af3efddb9" translate="yes" xml:space="preserve">
          <source>If a method for an operation is not found then Perl tries to autogenerate a substitute implementation from the operations that have been defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bdd74a3b17bde34780674e393224f07968f9f1d" translate="yes" xml:space="preserve">
          <source>If a module attempts to import any of these symbols the Exporter will give the module an opportunity to handle the situation before generating an error. The Exporter will call an export_fail method with a list of the failed symbols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e9244ade28e8f11cc0bc5968d58da31945ce21" translate="yes" xml:space="preserve">
          <source>If a module does not build for some reason, look carefully for why it failed, and report problems to the module author. If it looks like the extension building support is at fault, report that with full details of how the build failed using the perlbug utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094a8b4d892c0d307d87dac5429320ae267e0ba1" translate="yes" xml:space="preserve">
          <source>If a module implements XSUBs, you will need one of the supported C compilers. You must make sure you have set up the environment for the compiler for command-line compilation before running &lt;code&gt;perl Makefile.PL&lt;/code&gt; or any invocation of make.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9711733a9e84337767e9b5acb7ff59757c774ea1" translate="yes" xml:space="preserve">
          <source>If a name does not already have a suitable prefix and/or suffix then the corresponding file will be searched for by trying combinations of prefix and suffix appropriate to the platform: &quot;$name.o&quot;, &quot;lib$name.*&quot; and &quot;$name&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71674c3e4540508bc53564e31d00df9a0af1f1d2" translate="yes" xml:space="preserve">
          <source>If a name resolve operation fails to provide a name, then this flag will cause getnameinfo() to indicate an error, rather than returning the numeric representation as a human-readable string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b368c0d757e116a5dfb072a97b4193c426b9b0" translate="yes" xml:space="preserve">
          <source>If a negative array index is used to read from an array, the index will be translated to a positive one internally by calling FETCHSIZE before being passed to FETCH. You may disable this feature by assigning a true value to the variable &lt;code&gt;$NEGATIVE_INDICES&lt;/code&gt; in the tied array class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fd7f19527eab5261c210a54c173bb0abc87920" translate="yes" xml:space="preserve">
          <source>If a package uses overload, it carries a special flag. This flag is also set when new functions are defined or @ISA is modified. There will be a slight speed penalty on the very first operation thereafter that supports overloading, while the overload tables are updated. If there is no overloading present, the flag is turned off. Thus the only speed penalty thereafter is the checking of this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef6b1875e2dcae080c75ee35ffb78afc980a5f8" translate="yes" xml:space="preserve">
          <source>If a pattern does not contain a special backtracking verb that allows an argument, then &lt;code&gt;$REGERROR&lt;/code&gt; and &lt;code&gt;$REGMARK&lt;/code&gt; are not touched at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0b6253b5fcfd411b56a12da1005e8889d7cecd" translate="yes" xml:space="preserve">
          <source>If a piece of code is under the control of the &lt;code&gt;warnings&lt;/code&gt; pragma, both the &lt;code&gt;$^W&lt;/code&gt; variable and the &lt;b&gt;-w&lt;/b&gt; flag will be ignored for the scope of the lexical warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc66a04b7fd6c8f1331b2adb91a4455713a61616" translate="yes" xml:space="preserve">
          <source>If a plan has not yet been output, it will do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d2f49ea2b290886ecf360d9425d5113040021a" translate="yes" xml:space="preserve">
          <source>If a precision obtained through &lt;code&gt;*&lt;/code&gt; is negative, it counts as having no precision at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2493d17a98c3b1f685aa6fcd91f6a228a3382409" translate="yes" xml:space="preserve">
          <source>If a precompiled pattern is embedded in a larger pattern then the effect of &lt;code&gt;&quot;msixpluadn&quot;&lt;/code&gt; will be propagated appropriately. The effect that the &lt;code&gt;/o&lt;/code&gt; modifier has is not propagated, being restricted to those patterns explicitly using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe77c7e04c6532a52f2ea4bb204b4b081b46114" translate="yes" xml:space="preserve">
          <source>If a program's environment specifies an LC_NUMERIC locale and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; is in effect when the format is declared, the locale is used to specify the decimal point character in formatted output. Formatted output cannot be controlled by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; at the time when write() is called. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for further discussion of locale handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdd7653484d14bb99878153118f9a9fc7a64201" translate="yes" xml:space="preserve">
          <source>If a queue is empty, &lt;code&gt;dequeue()&lt;/code&gt; blocks until another thread enqueues something. This makes queues ideal for event loops and other communications between threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a808372475f8c939dd3899bae64db28b71a73e" translate="yes" xml:space="preserve">
          <source>If a reference happens to be a reference to an object, then there are probably methods to access the things referred to, and you should probably stick to those methods unless you're in the class package that defines the object's methods. In other words, be nice, and don't violate the object's encapsulation without a very good reason. Perl does not enforce encapsulation. We are not totalitarians here. We do expect some basic civility though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8efe9417a8ca522054e8e0f20aa5ebe3ad20734" translate="yes" xml:space="preserve">
          <source>If a regexp has a variable that interpolates a code expression, Perl treats the regexp as an error. If the code expression is precompiled into a variable, however, interpolating is ok. The question is, why is this an error?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bd95a2da72abd4235bfb3025f329041ecd2afc" translate="yes" xml:space="preserve">
          <source>If a regexp matches in more than one place in the string, Perl will always match at the earliest possible point in the string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf4b93182f52023e0f84b564980685b7296c6d9" translate="yes" xml:space="preserve">
          <source>If a regular bracketed character class contains a &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; and is matched against a non-Unicode code point, a warning may be raised, as the result is not Unicode-defined. No such warning will come when using this extended form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85e430ff8e0f946fbbcd7fbdf03ad676d0029b5" translate="yes" xml:space="preserve">
          <source>If a result does not have a callback defined for it, this callback will be invoked. Thus, if all of the previous result types are specified as callbacks, this callback will</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c88e9a20d1a229d11dbc65d34fee24d0f8252b1" translate="yes" xml:space="preserve">
          <source>If a script does not contain such a cooky, then to avoid calling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6d780b3e70414e72c5be7308b60f82c00d250e" translate="yes" xml:space="preserve">
          <source>If a second argument is given and it corresponds to a valid locale, the locale for the category is set to that value, and the function returns the now-current locale value. You can then use this in yet another call to &lt;code&gt;setlocale()&lt;/code&gt; . (In some implementations, the return value may sometimes differ from the value you gave as the second argument--think of it as an alias for the value you gave.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a945f54fa17399a38d6421bac299acb5873c21" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should be the name of the desired output file. If the special output filename &quot;-&quot; or &quot;&amp;gt;&amp;amp;STDOUT&quot; is given then the STDOUT filehandle is used for output (and no open or close is performed). If the special output filename &quot;&amp;gt;&amp;amp;STDERR&quot; is given then the STDERR filehandle is used for output (and no open or close is performed). If no output filehandle is currently in use and no output filename is specified, then &quot;-&quot; is implied. Alternatively, filehandle references or objects that support the regular IO operations (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, e.g. &lt;a href=&quot;http://search.cpan.org/perldoc/IO::String&quot;&gt;IO::String&lt;/a&gt;) are also accepted; the object must already be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477169172ccc2cfa646e6b1ff7ebcaf7ea663dbd" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should correspond to a filehandle where output should be sent (otherwise the default output filehandle is &lt;code&gt;STDOUT&lt;/code&gt; if no output filehandle is currently in use).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e01c4263faa2fd7e903bd96fbfc6f719b4224a" translate="yes" xml:space="preserve">
          <source>If a signal of any given type fires multiple times during an opcode (such as from a fine-grained timer), the handler for that signal will be called only once, after the opcode completes; all other instances will be discarded. Furthermore, if your system's signal queue gets flooded to the point that there are signals that have been raised but not yet caught (and thus not deferred) at the time an opcode completes, those signals may well be caught and deferred during subsequent opcodes, with sometimes surprising results. For example, you may see alarms delivered even after calling &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm(0)&lt;/a&gt;&lt;/code&gt; as the latter stops the raising of alarms but does not cancel the delivery of alarms raised but not yet caught. Do not depend on the behaviors described in this paragraph as they are side effects of the current implementation and may change in future versions of Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca9f14adad1a4346557fbd963ffe8837b4e2de6" translate="yes" xml:space="preserve">
          <source>If a specified constant &lt;code&gt;EFOO&lt;/code&gt; does not exist on the system, &lt;code&gt;$!{EFOO}&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt; . You may use &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{EFOO}&lt;/code&gt; to check whether the constant is available on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f800d47729ac41db50a73befe5a0c18db31026bf" translate="yes" xml:space="preserve">
          <source>If a string is UTF-8, &lt;b&gt;always&lt;/b&gt; use &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; to get at the value, unless &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; in which case you can use &lt;code&gt;*s&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be10a035bc9dd04a9faa3e7d6666d736bd26b25" translate="yes" xml:space="preserve">
          <source>If a sub has both a PROTO and a BLOCK, the prototype is not applied until after the BLOCK is completely defined. This means that a recursive function with a prototype has to be predeclared for the prototype to take effect, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0608dc713e7e2ffc835fe7b94ed6aa1dd9da10a4" translate="yes" xml:space="preserve">
          <source>If a subroutine reference was given, it is invoked as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b26c7bacf7c0c773c98a08b7cfd7b95eaadc8d" translate="yes" xml:space="preserve">
          <source>If a substring is known to match at end-of-line only, it may be followed by &lt;code&gt;$&lt;/code&gt; , as in &lt;code&gt;floating 'k'$&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bac00f48a56f95c981f68b27c67c1613b3abed" translate="yes" xml:space="preserve">
          <source>If a test had either a &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;SKIP&lt;/code&gt; directive, this method will return the accompanying explanation, if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b9290b4f037c914cf42f893f1aba1433a9e97a" translate="yes" xml:space="preserve">
          <source>If a test number is greater than the number of planned tests, this method will return true. Unplanned tests will</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f0a88031cba297a38b9bb2a8d9794138cdfcc6" translate="yes" xml:space="preserve">
          <source>If a transformation subroutine (xfrm) is defined, its value is used to transform the lines read from the filehandle before their comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571f9ad4d812cfdda52b01e4ae41c48c7aa1a889" translate="yes" xml:space="preserve">
          <source>If a true value is given (non-zero but should be positive), it will be added as a terminator primary weight to the end of every standard Hangul syllable. Secondary and any higher weights for terminator are set to zero. If the value is false or &lt;code&gt;hangul_terminator&lt;/code&gt; key does not exist, insertion of terminator weights will not be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c503e180fbd73d4ade263d4ec3fc736e96785b" translate="yes" xml:space="preserve">
          <source>If a typed lexical variable (&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; Class
$var&lt;/code&gt; ) holding a reference is used to access a hash element and a package with the same name as the type has declared class fields using this pragma, then the hash key is verified at compile time. If the variables are not typed, access is only checked at run time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56a688e323d9747dee356792880eafa156d2877" translate="yes" xml:space="preserve">
          <source>If a utility or module isn't available, it will be marked in a cache (see the &lt;code&gt;$METHOD_FAIL&lt;/code&gt; variable further down), so it will not be tried again. The &lt;code&gt;fetch&lt;/code&gt; method will only fail when all options are exhausted, and it was not able to retrieve the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e415afdb54d5332d73e9d658477c2317a9747c" translate="yes" xml:space="preserve">
          <source>If a variable is declared inside a CODE: section it will follow any typemap code that is emitted for the input parameters. This may result in the declaration ending up after C code, which is C syntax error. Similar errors may happen with an explicit &lt;code&gt;;&lt;/code&gt; -type or &lt;code&gt;+&lt;/code&gt; -type initialization of parameters is used (see &lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;Initializing Function Parameters&lt;/a&gt;). Declaring these variables in an INIT: section will not help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e1471095c4d68dab8592febf94b7e3ac2a2016" translate="yes" xml:space="preserve">
          <source>If accept() is interrupted by a signal, $! will be set to EINTR. If this happens, we can safely continue to the next iteration of the loop and another call to accept(). It is important that your signal handling code not modify the value of $!, or else this test will likely fail. In the REAPER subroutine we create a local version of $! before calling waitpid(). When waitpid() sets $! to ECHILD as it inevitably does when it has no more children waiting, it updates the local copy and leaves the original unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752e6cffd40215caddfd723588dccf4863a5ed16" translate="yes" xml:space="preserve">
          <source>If adding a new module to a set, follow the original author's standards for naming modules and the interface to methods in those modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30aaa76b20fc01d8891caaf8c421bdbbefa39ad" translate="yes" xml:space="preserve">
          <source>If after that process the layer is still not defined then the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5b65dba45a85e174c3b613f61ee902daa93694" translate="yes" xml:space="preserve">
          <source>If all actions were successful install will return a hashref of the results as described above for the $result parameter. If any action is a failure then install will die, therefore it is recommended to pass in the $result parameter instead of using the return value. If the result parameter is provided then the returned hashref will be the passed in hashref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127255eea385053cfe8f53f8f2c648f76a8be49c" translate="yes" xml:space="preserve">
          <source>If all data that comes from a certain handle is encoded in exactly the same way, you can tell the PerlIO system to automatically decode everything, with the &lt;code&gt;encoding&lt;/code&gt; layer. If you do this, you can't accidentally forget to decode or encode anymore, on things that use the layered handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7d1b1bb140827b5655410f34d1155c7f80618e" translate="yes" xml:space="preserve">
          <source>If all goes okay and no errors during a build, you'll get two independent distributions: &lt;code&gt;wince-mips-pocket-wce300&lt;/code&gt; and &lt;code&gt;mips-wce300-thr&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab3e0df4f550d075ed2874e19cdd1793f373e2a" translate="yes" xml:space="preserve">
          <source>If all this is intimidating, have no (well, maybe only a little) fear. There are modules that can help. The &lt;code&gt;File::Spec&lt;/code&gt; modules provide methods to do the Right Thing on whatever platform happens to be running the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7ad2a8e725968ebffe98c6ec06a2f880b60f52" translate="yes" xml:space="preserve">
          <source>If all you want to do is pretend to be telnet but don't need the initial telnet handshaking, then the standard dual-process approach will suffice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114fc5763881eaed2b695ddb5eda1e514b33dd63" translate="yes" xml:space="preserve">
          <source>If all your tests passed, &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98f6624ef41fa5865752ff72d1c88c5adce8ff1" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Builder will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Builder will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec52cc18e24a40a3b425f46525ccb32d3bbfcd0d" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Simple will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Simple will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf21a78dfdb342ccff4796ddae824fa3095f386e" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, it must conform to the sub-field structure as defined in RFC 1952.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703bb32d1796efb54146381859e7e166335fd702" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, the structure will not be checked. The only error is if the length is too big.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5888ada14b086770c285ef36da99e64d4b36a12" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified the second byte of the ID will be checked in each subfield to ensure that it does not contain the reserved value 0x00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba67c55f0a73d622c034c758b4c54c06d0297ce" translate="yes" xml:space="preserve">
          <source>If an AUTOLOAD routine is an XSUB, as with Perl subroutines, Perl puts the fully-qualified name of the autoloaded subroutine in the $AUTOLOAD variable of the XSUB's package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bdc376fb833e498b49e6edb80ebe7de88f4149" translate="yes" xml:space="preserve">
          <source>If an Input glob matches the same file more than once, only the first will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7ac1d42b2433b8600fc2dd6eb1a16139df0641" translate="yes" xml:space="preserve">
          <source>If an XSUB is created to offer a direct translation between this function and Perl, then this XSUB will be used from Perl with the following code. The $status and $timep variables will contain the output of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b382afe3d07f60c5f6eced5294d3838170432890" translate="yes" xml:space="preserve">
          <source>If an XSUB name contains &lt;code&gt;::&lt;/code&gt; , it is considered to be a C++ method. The generated Perl function will assume that its first argument is an object pointer. The object pointer will be stored in a variable called THIS. The object should have been created by C++ with the new() function and should be blessed by Perl with the sv_setref_pv() macro. The blessing of the object by Perl can be handled by a typemap. An example typemap is shown at the end of this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be5707a4fed01d7fc6a9c5c683f16ea2406809" translate="yes" xml:space="preserve">
          <source>If an argument callback routine is specified, &lt;code&gt;@ARGV&lt;/code&gt; will always be empty upon successful return of GetOptions() since all options have been processed. The only exception is when &lt;code&gt;--&lt;/code&gt; is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39b97b3c5875ed6ddbb4cadef1665f0d49ebbe7" translate="yes" xml:space="preserve">
          <source>If an argument is given, it must correspond to the desired section heading number, in which case only the specified section heading is returned. If there is no current section heading at the specified level, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7271fc38171101f8ded47e78d280e28ab4aefe24" translate="yes" xml:space="preserve">
          <source>If an attribute handler is declared and the &lt;code&gt;:ATTR&lt;/code&gt; specifier is given the name of a built-in type (&lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;ARRAY&lt;/code&gt; , &lt;code&gt;HASH&lt;/code&gt; , or &lt;code&gt;CODE&lt;/code&gt; ), the handler is only applied to declarations of that type. For example, the following definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62eb757e944d2fdd579513e058242369fd9ee059" translate="yes" xml:space="preserve">
          <source>If an element of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34964fb1164dd648c7d2582c841b9ac59c8a6438" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b9ed06c157d2ccb39c11bcda5c6ea1f6b42a42" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f919dfddbef4a1a12f08337d7a834831006d9b11" translate="yes" xml:space="preserve">
          <source>If an error is encountered during conversion, output file will be removed and a warning emitted instead of terminating the conversion immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9714806e81ca60318ef1d507fb9add3187535d9b" translate="yes" xml:space="preserve">
          <source>If an error occurs &lt;code&gt;blocking&lt;/code&gt; will return undef and &lt;code&gt;$!&lt;/code&gt; will be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223081f636c4dc0e612cdeecd4fd8749800bcc2c" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree (most likely null) is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409c88cc16ea56deb3ee2fd13496f8443cdeb8ed" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3a0347b1d41b96c13bdbefc10e2d1afbf9de50" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing, which can only occur if the label is mandatory, a valid label is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bdcdf03abe1ba577aa0e79f3435579268caad1" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the fragment of string that has been converted and modify $octets in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf7457198e3f9cd671a04a577836ab4a9017358" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the octet sequence for the fragment of string that has been converted and modify $string in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2d11e497e2ae0afa960e508853e27c914d2845" translate="yes" xml:space="preserve">
          <source>If an existing module &lt;b&gt;almost&lt;/b&gt; does what you want, consider writing a patch, writing a subclass, or otherwise extending the existing module rather than rewriting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c1aacb1c3709d4e7d697aae2bed5c77802f47c" translate="yes" xml:space="preserve">
          <source>If an exit status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea12036a9c231320c44066b7b5457646bd39537" translate="yes" xml:space="preserve">
          <source>If an exit status is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2873de2f1e9af5ea740b20953d89320900ebe0e" translate="yes" xml:space="preserve">
          <source>If an extant $SIG{__WARN__} handler is discovered, it will continue to be honored, but only after the diagnostics::splainthis() function (the module's $SIG{__WARN__} interceptor) has had its way with your warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72e4c503af6f4a09cfa2171e2474d37da483a9b" translate="yes" xml:space="preserve">
          <source>If an extension is being built away from the perl source then MakeMaker will leave PERL_SRC undefined and default to using the installed copy of the perl library. The other variables default to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c876b366d6c58e85d7243f2dbcbb0c36548470" translate="yes" xml:space="preserve">
          <source>If an extension is being built below the &lt;code&gt;ext/&lt;/code&gt; directory of the perl source then MakeMaker will set PERL_SRC automatically (e.g., &lt;code&gt;../..&lt;/code&gt;). If PERL_SRC is defined and the extension is recognized as a standard extension, then other variables default to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0316d054e0262fb322cda466200340b0b6b9a08" translate="yes" xml:space="preserve">
          <source>If an extractor returns a defined value, that value is immediately treated as the next extracted field and pushed onto the list of fields. If the extractor was specified in a hash reference, the field is also blessed into the appropriate class,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e24bf211ae35444c0a5b02834d4c163f847646" translate="yes" xml:space="preserve">
          <source>If an infinity or a not-a-number is recognized, the *sp will point to one byte past the end of the recognized string. If the recognition fails, zero is returned, and the *sp will not move.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce09f2ed6b39791e05ffc528e1a968457528299e" translate="yes" xml:space="preserve">
          <source>If an object does not support the method specified (determined using UNIVERSAL::can()) then the call will be skipped. If the method dies a warning will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24adf3fb9ad8a72560fd633d7f97a817649bd630" translate="yes" xml:space="preserve">
          <source>If an operation is trapped in this way, then the code in STRING will not be executed. If such a trapped operation occurs or any other compile-time or return error, then $@ is set to the error message, just as with an eval().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215592828190613f91a4fc9378ebe41cd5d2be61" translate="yes" xml:space="preserve">
          <source>If an uncaught exception results in interpreter exit, the exit code is determined from the values of &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt; with this pseudocode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b864a885bc89443cbce8d662bf2be7249be99d8" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;test_args&lt;/code&gt; are given they will be appended to the end of the command argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37251314e00b333d40467d467ca5c0c35c0e366e" translate="yes" xml:space="preserve">
          <source>If any argument to &lt;b&gt;podselect&lt;/b&gt; is a reference to a hash (associative array) then the values with the following keys are processed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa7b6de1acc5eb4980a2653a96afb04a72dd14b" translate="yes" xml:space="preserve">
          <source>If any arguments remain, and &lt;code&gt;GetOptionsFromString&lt;/code&gt; was not called in list context, a message will be given and &lt;code&gt;GetOptionsFromString&lt;/code&gt; will return failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b5cfa2ac91aed4f93a07d4f29fc54a851c06d0" translate="yes" xml:space="preserve">
          <source>If any destructors are triggered as a result, the hv itself may be freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7074163e07f37b8a41bd25ef8050c203f85577" translate="yes" xml:space="preserve">
          <source>If any directories are included in @names they are searched before @dl_library_path. Directories may be specified as &lt;b&gt;-Ldir&lt;/b&gt;. Any other names are treated as filenames to be searched for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864b32c42a324d7506e9ca2ec49f2bbc8bbdcf83" translate="yes" xml:space="preserve">
          <source>If any element of LIST is an lvalue, you can modify it by modifying VAR inside the loop. Conversely, if any element of LIST is NOT an lvalue, any attempt to modify that element will fail. In other words, the &lt;code&gt;foreach&lt;/code&gt; loop index variable is an implicit alias for each item in the list that you're looping over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705cbac0d6d9464ed1b8a92ba681b4a46a07d153" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec7c53718240c968018769a330928a1255918e0" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call. For example, because named unary operators are higher precedence than &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b227e6f9b5d8d36337845d9688db6eb8efa3551d" translate="yes" xml:space="preserve">
          <source>If any module's own AUTOLOAD subroutine has no need to fallback to the AutoLoader's AUTOLOAD subroutine (because it doesn't have any AutoSplit subroutines), then that module should not use &lt;b&gt;AutoLoader&lt;/b&gt; at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f05d2b51008f086be29ce06ad2dc1e36ce0970" translate="yes" xml:space="preserve">
          <source>If any of the alternatives matches, the hash &lt;code&gt;%+&lt;/code&gt; is bound to contain the three key-value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde2e9ba6df88b543ea738e9014946a615cc8feb" translate="yes" xml:space="preserve">
          <source>If any of the entries in an import list begins with !, : or / then the list is treated as a series of specifications which either add to or delete from the list of names to import. They are processed left to right. Specifications are in the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd2433b191431a7e89003ab4a4e523c3a5de0d9" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70d4afb0f7f0b8a4b2bcb0de7d2fe106cb41892" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eae7869337353cadd5cbfe4d84a955fd03cd8ba" translate="yes" xml:space="preserve">
          <source>If any of the given search directories contains a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0865eba790bb7da4cb38d4fafb11a71c0ca93d75" translate="yes" xml:space="preserve">
          <source>If any of the three values is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; that time value will not be used. So, for example, to set only the &lt;code&gt;$mtime&lt;/code&gt; you would use this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341a4d7e4dbc9eeb69d34b947d58bc6f15ecb9f2" translate="yes" xml:space="preserve">
          <source>If any part of LIST is an array, &lt;code&gt;foreach&lt;/code&gt; will get very confused if you add or remove elements within the loop body, for example with &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;. So don't do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cf9c709860eea50a338d60ff5edf1e2478723c" translate="yes" xml:space="preserve">
          <source>If applicable, please include details on what the user should do to correct the error; documenting an error as indicating &quot;the input buffer is too small&quot; without telling the user how to increase the size of the input buffer (or at least telling them that it isn't possible) aren't very useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ebb7f065dcd7d1005a6e70cd7fc9ddab662a16" translate="yes" xml:space="preserve">
          <source>If argument is specified, it is an advice on minimal size of line to be included into history. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; means do not include anything into history. Returns the old value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd699eb48fd240fe4a2bcf57e3a3520a6ee8d6f2" translate="yes" xml:space="preserve">
          <source>If backward compatibility for Perls under 5.6 is important, one must write instead a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d0b9799b974e77c25f857fd60005fd09516395" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d4537f5763ddf89d58388ac5f77f55fec21e75" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0f5d848a9043e820336aaa7c2b5b535010685b" translate="yes" xml:space="preserve">
          <source>If both arguments to &lt;code&gt;copy&lt;/code&gt; are not file handles, then &lt;code&gt;copy&lt;/code&gt; will perform a &quot;system copy&quot; of the input file to a new output file, in order to preserve file attributes, indexed file structure,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9104a77e501731bf3173e5f8cc7012527cca560" translate="yes" xml:space="preserve">
          <source>If both the SIGNAL and the PROCESS are negative, the results are undefined. A warning may be produced in a future version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c2b718c80fc2756eb63ba9991217396d36da72" translate="yes" xml:space="preserve">
          <source>If braces are not needed to specify a property (e.g., &lt;code&gt;\pL&lt;/code&gt; ), the left column contains both forms, with and without braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4169e83148646605b11ff599e0ccd6579a7d78" translate="yes" xml:space="preserve">
          <source>If branches are involved (ie. $Revision: 1.5.3.4$) it's a little more complicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c319407a62fb715df8d4d26f7931f9374106237" translate="yes" xml:space="preserve">
          <source>If building natively on PASE, please do the build under the /QOpenSys directory, since Perl is happier when built on a case sensitive filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edb493675bf68411bac8372236ccf07c63ce62d" translate="yes" xml:space="preserve">
          <source>If building with the cross-compiler provided by mingw-w64.sourceforge.net you'll need to uncomment the line that sets GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie only if the bin folder doesn't contain a gcc.exe. (The cross-compiler does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these executables are prefixed with 'x86_64-w64-mingw32-'.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e17d613e1404f153f1b0ce16d928004818ba4b8" translate="yes" xml:space="preserve">
          <source>If by daemon process you mean one that's detached (disassociated from its tty), then the following process is reported to work on most Unixish systems. Non-Unix users should check their Your_OS::Process module for other solutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14156857ddead4c835ba55e44d3f79ccfb246a2" translate="yes" xml:space="preserve">
          <source>If by some reasons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a1911ef5d789d9bb6809a0f2c6b323a8f5cec0" translate="yes" xml:space="preserve">
          <source>If callbacks are used, they will be issued before this call returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706aad3a29650f166c943e5c886b39dcd0a4394e" translate="yes" xml:space="preserve">
          <source>If called as &lt;code&gt;sv_vcatpvfn&lt;/code&gt; or flags include &lt;code&gt;SV_GMAGIC&lt;/code&gt; , calls get magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614a0f52f1c33eb959730f1d5d32f8786b9d57d8" translate="yes" xml:space="preserve">
          <source>If called as an instance method (i.e. $md5-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8679ce9e8862eb205bcd677039372fd6e97a03da" translate="yes" xml:space="preserve">
          <source>If called in a list context and the global variable &lt;code&gt;$INSTANCES&lt;/code&gt; is a true value, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8293e343dafdb403ea7c5d5ddbde243205b61a6" translate="yes" xml:space="preserve">
          <source>If called in a list context, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522ffa67a9fbac5fe032f13cc8e4e97e4f0b245b" translate="yes" xml:space="preserve">
          <source>If called in a scalar context it will return the full path to the binary you asked for if it was found, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it was not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e86b593d758e5e3c8998823e4b17f5dfdc961bc" translate="yes" xml:space="preserve">
          <source>If called in scalar context, only the filehandle is returned and the file will automatically be deleted when closed on operating systems that support this (see the description of tmpfile() elsewhere in this document). This is the preferred mode of operation, as if you only have a filehandle, you can never create a race condition by fumbling with the filename. On systems that can not unlink an open file or can not mark a file as temporary when it is opened (for example, Windows NT uses the C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83187abf3e8e59deed13ec45be5007e63c321fb" translate="yes" xml:space="preserve">
          <source>If called with a property that doesn't have synonyms for its values, it returns the input value, possibly normalized with capitalization and underscores, but not necessarily checking that the input value is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcbf5b218ac08698c7495d3bca85cf2f5fc593a" translate="yes" xml:space="preserve">
          <source>If called with an argument &lt;code&gt;blocking&lt;/code&gt; will turn on non-blocking IO if &lt;code&gt;BOOL&lt;/code&gt; is false, and turn it off if &lt;code&gt;BOOL&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8fbca057a7b0f8546bef2e8eba78cd01155b5c" translate="yes" xml:space="preserve">
          <source>If called with an argument the &lt;code&gt;list&lt;/code&gt; returns the size of the message in octets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3101b42b801bc480044d4583af8814cf3a6fda1" translate="yes" xml:space="preserve">
          <source>If called without arguments a reference to a hash is returned. The keys will be the &lt;code&gt;MSGNUM&lt;/code&gt; 's of all undeleted messages and the values will be their size in octets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77963c1065ed922557c941a37ed57186c92ec48" translate="yes" xml:space="preserve">
          <source>If capturing parenthesis are used in a regular expression, we can refer to the part of the source string that was matched, and match exactly the same thing. There are three ways of referring to such</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef19162a844967deef3f5d85d04764641f71041" translate="yes" xml:space="preserve">
          <source>If compiled with &lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; , both memory and SV allocations go through logging functions, which is handy for breakpoint setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505c257963541e6d1081b0bfdec05dc2d7991e03" translate="yes" xml:space="preserve">
          <source>If constant folding was not performed, the execution-order thread is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0592ae26e8bb261300ebbed2b588cacc05e4ff" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable can be used to modify the environment on the target system. However, how and where it's used, and even if it's used at all, is entirely dependent on both the transport mechanism (targetrun) and what the target system is. Unless the relevant documentation says otherwise, it is genereally not useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66c617b16e576e77dc9dc8e186d44f33fe447f3" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the location of sh on the target system. If not, this will be the same as $sh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60357fb3a62a70cdf0b8804a617b55fe7b82dc59" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the target architecture. If not, this will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ce981aa84829db1548a6d11516c6b5fa9cbc60" translate="yes" xml:space="preserve">
          <source>If d_procselfexe is defined, $procselfexe is the filename of the symbolic link pointing to the absolute pathname of the executing program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4c096ee5da0f37bd52c68590795a5281826f8c" translate="yes" xml:space="preserve">
          <source>If declared at the outermost scope (the file scope), then lexicals work somewhat like C's file statics. They are available to all functions in that same file declared below them, but are inaccessible from outside that file. This strategy is sometimes used in modules to create private variables that the whole module can see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae3059e06d397630c09d4c165cce518cf89f33b" translate="yes" xml:space="preserve">
          <source>If defined specifies whether color output is desired. If &lt;code&gt;color&lt;/code&gt; is not defined it will default to color output if color support is available on the current platform and output is not being redirected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3bd5a9c7fbd30c1f819a008f41219b5c451f73" translate="yes" xml:space="preserve">
          <source>If desired, an optional hash-ref may be specified as the first argument to customize certain aspects of the parse-tree that is created and returned. The set of recognized option keywords are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c417457bb41c44d12dd8e05efc098db997c407b3" translate="yes" xml:space="preserve">
          <source>If developing modules for private internal or project specific use, that will never be released to the public, then you should ensure that their names will not clash with any future public module. You can do this either by using the reserved Local::* category or by using a category name that includes an underscore like Foo_Corp::*.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf0d1f77248c2c58d4104ac428f32e38cbba679" translate="yes" xml:space="preserve">
          <source>If either (or both!) is a subroutine reference, it is run and used as the value for comparing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0201c4d3bcdfd14f6a2e27e712be0d303b850c91" translate="yes" xml:space="preserve">
          <source>If either name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the property parameter, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3926f5454427802efbe3e6cffcb07732270c9a24" translate="yes" xml:space="preserve">
          <source>If either operand of scalar &lt;code&gt;&quot;..&quot;&lt;/code&gt; is a constant expression, that operand is considered true if it is equal (&lt;code&gt;==&lt;/code&gt; ) to the current input line number (the &lt;code&gt;$.&lt;/code&gt; variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99b132bd00ba92228931c93b4096f125672ade0" translate="yes" xml:space="preserve">
          <source>If either reader or writer is the null string, this will be replaced by an autogenerated filehandle. If so, you must pass a valid lvalue in the parameter slot so it can be overwritten in the caller, or an exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51794930a0cb952da1b5da2c73c8a1455bd1093" translate="yes" xml:space="preserve">
          <source>If embedded documentation (in pod format, see &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;) is detected in the script, &lt;code&gt;--help&lt;/code&gt; will also show how to access the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d066b26000935ae7bb2e10a40ebaebacd4b8b0" translate="yes" xml:space="preserve">
          <source>If enabled, case is ignored when matching option names. If, however, bundling is enabled as well, single character options will be treated case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7040756e9968d1786c608e978b27880a9b3f0b" translate="yes" xml:space="preserve">
          <source>If everything else fails, you need to build a stand-alone DLL for perl. Contact me, I did it once. Sockets would not work, as a lot of other stuff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7b09ae5de32a801bf3504292c1ba7f8a26bf8f" translate="yes" xml:space="preserve">
          <source>If exception handling is all you're interested in, use one of the many CPAN modules that handle exceptions, such as &lt;a href=&quot;http://search.cpan.org/perldoc/Try::Tiny&quot;&gt;Try::Tiny&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24299a423807f4b77a396032f4cc65f70fe49537" translate="yes" xml:space="preserve">
          <source>If explicitly enabled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ede30fd7e2f6fae82106f61a77ef1de04cb5cb3" translate="yes" xml:space="preserve">
          <source>If false, STDERR is not captured (though it is 'relayed' to keep it somewhat synchronized with STDOUT.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5838f52003c96db3e6bffb7f5e0838c7d79e5c" translate="yes" xml:space="preserve">
          <source>If false, readline support in the debugger is disabled in order to debug applications that themselves use ReadLine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fe899108d979b4e6baf329c011d799eeebe85b" translate="yes" xml:space="preserve">
          <source>If filenames might use strange characters, it is safest to open it with &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is magic and can translate characters like &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; , and &lt;code&gt;|&lt;/code&gt;, which may be the wrong thing to do. (Sometimes, though, it's the right thing.) Three-arg open can also help protect against this translation in cases where it is undesirable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca04d4d675b32f985d24c749a113dd2e8503548" translate="yes" xml:space="preserve">
          <source>If find is used in taint-mode (-T command line switch or if EUID != UID or if EGID != GID) then internally directory names have to be untainted before they can be chdir'ed to. Therefore they are checked against a regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae542d10e971a673bbde2971d115357debc351d4" translate="yes" xml:space="preserve">
          <source>If flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string will also be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f11c4bbd633be0ac4ec3da7d6d4106626b272c7" translate="yes" xml:space="preserve">
          <source>If for some reason you want to have complete control over the data connection, this includes generating it and calling the &lt;code&gt;response&lt;/code&gt; method when required, then the user can use these methods to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f20d3ebb86a1fb4909973670b43aa80acbb4c8" translate="yes" xml:space="preserve">
          <source>If hash values couldn't be lists, you lose. You'd probably have to combine all the cities into a single string somehow, and then when time came to write the output, you'd have to break the string into a list, sort the list, and turn it back into a string. This is messy and error-prone. And it's frustrating, because Perl already has perfectly good lists that would solve the problem if only you could use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8d248524799b9e3f004b01925fdada9567cc4f" translate="yes" xml:space="preserve">
          <source>If i&amp;lt;checked_at&amp;gt; is a reference to a scalar, then instead it gives the characters pre-checked at the beginning, (and the number of chars by which the C variable name has been advanced. These need to be chopped from the front of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd56861a4473054d59049046296e1c9cc1b21dc" translate="yes" xml:space="preserve">
          <source>If illegalproto warnings are enabled, the prototype declared inside this attribute will be sanity checked at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3aefb53a3e40d895443465bbfd3168415b47af" translate="yes" xml:space="preserve">
          <source>If in doubt, break the expression into simpler terms, or cast all operands to the desired resulting type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce224243c2c27e9c319eeded5da4d7520f7a48e0" translate="yes" xml:space="preserve">
          <source>If instead of the recommended GNU make you would like to use the system supplied make program then be sure to install the default rules file properly via the shell command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c224a826076db854fafc0daefe6f5025badc4ce" translate="yes" xml:space="preserve">
          <source>If instead you intended to match the word 'foo' at the end of the line followed by whitespace and the word 'bar' on the next line then you can use &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/$(?)\/&lt;/a&gt;&lt;/code&gt; (for example: &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo$(?)\s+bar/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03def7cbe4cc9c7f39111662b050f07a1bc1197" translate="yes" xml:space="preserve">
          <source>If instead you want to sort the array @key with the comparison routine &lt;code&gt;find_records()&lt;/code&gt; then you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fc62400435ca2b18e437e1de72ea45d0c40705" translate="yes" xml:space="preserve">
          <source>If invalid, a &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; warning is produced. The &quot;C0&quot; means &quot;process the string character per character&quot;. Without that, the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;U*&quot;, ...)&lt;/code&gt; would work in &lt;code&gt;U0&lt;/code&gt; mode (the default if the format string starts with &lt;code&gt;U&lt;/code&gt; ) and it would return the bytes making up the UTF-8 encoding of the target string, something that will always work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c33e52f177d40ae2c3679305c70e4a9572745e" translate="yes" xml:space="preserve">
          <source>If it ain't broke, don't fix it! Perl 4 library scripts should continue to work with no problems. You may need to make some minor changes (like escaping non-array @'s in double quoted strings) but there is no need to convert a .pl file into a Module for just that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae3aaa5715ffc32724b48d8610f7a354399dcc4" translate="yes" xml:space="preserve">
          <source>If it does not yet provide support for any encoding, one could write a derived class with such a &lt;code&gt;param&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed0026aa4685c99082bcd85012c95fb26671228" translate="yes" xml:space="preserve">
          <source>If it is defined and perl is compiled with the C macro &lt;code&gt;DL_UNLOAD_ALL_AT_EXIT&lt;/code&gt; defined, then it is called automatically when the interpreter exits for every shared object or library loaded by DynaLoader::bootstrap. All such library references are stored in @dl_librefs by DynaLoader::Bootstrap as it loads the libraries. The files are unloaded in last-in, first-out order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860a9992a29a5bed07a92916afafcc39c4466897" translate="yes" xml:space="preserve">
          <source>If it is important to you that your bug be fixed, do monitor the perl5-porters@perl.org mailing list (mailing lists are moderated, your message may take a while to show up) and the commit logs to development versions of Perl, and encourage the maintainers with kind words or offers of frosty beverages. (Please do be kind to the maintainers. Harassing or flaming them is likely to have the opposite effect of the one you want.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835fcc1c62a963fd6a71d84d2861d08fa2d6dba4" translate="yes" xml:space="preserve">
          <source>If it is impossible to tell from the parameters passed back from the C callback what the context is, then you may need to create a sequence of C callback interface functions, and store pointers to each in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5680f195fb6f8f7119b1a5d53970a5a24089ffc3" translate="yes" xml:space="preserve">
          <source>If it is intended that a new perl binary be produced, this variable may hold a name for that binary. Defaults to perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1ca7ba722f679f82900212b2623b7a140c3fd8" translate="yes" xml:space="preserve">
          <source>If it persists, you may disable this warnings, see &lt;a href=&quot;#PERL_BADFREE&quot;&gt;PERL_BADFREE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3596d2c66fdea5d09f2cf7238ff867c93df8d69a" translate="yes" xml:space="preserve">
          <source>If it runs thru the entire given list of language-tags, and finds no classes for those exact terms, it then tries &quot;superordinate&quot; language classes. So if no &quot;en-US&quot; class (i.e., YourProjClass::en_us) was found, nor classes for anything else in that list, we then try its superordinate, &quot;en&quot; (i.e., YourProjClass::en), and so on thru the other language-tags in the given list: &quot;es&quot;. (The other language-tags in our example list: happen to have no superordinates.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9c27ad93f7400ed6fd8cabde972a2941b1fcc1" translate="yes" xml:space="preserve">
          <source>If it's a regular enough string that it always has the same format, you can split it up and pass the parts to &lt;code&gt;timelocal&lt;/code&gt; in the standard &lt;a href=&quot;time/local&quot;&gt;Time::Local&lt;/a&gt; module. Otherwise, you should look into the &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date::Calc&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Parse&quot;&gt;Date::Parse&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Manip&quot;&gt;Date::Manip&lt;/a&gt; modules from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cd7c9791eb757b708be268b21d99a1603edf51" translate="yes" xml:space="preserve">
          <source>If it's run from a terminal,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec1e5cfa3f1d5f23853bddc58974b89d51e4343" translate="yes" xml:space="preserve">
          <source>If linking miniperl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdbff6d4225cd79b23186ed9cad6253292a76ca" translate="yes" xml:space="preserve">
          <source>If locale matching rules are in effect, the case map is taken from the current locale for code points less than 255, and from Unicode rules for larger code points. However, matches that would cross the Unicode rules/non-Unicode rules boundary (ords 255/256) will not succeed. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763f933c48615038adc7019dfce8f6c0c593c306" translate="yes" xml:space="preserve">
          <source>If locale rules are not in effect, the use of a Unicode property will force the regular expression into using Unicode rules, if it isn't already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d834fc3f63056ccac9737e1620e9488be6eb7541" translate="yes" xml:space="preserve">
          <source>If maketext goes to look in an individual %Lexicon for an entry for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3dcee3a8b9bd973fa29d705bfdb80867c80c81" translate="yes" xml:space="preserve">
          <source>If many functions use the same failure indication based on the return value, you may want to create a special typedef to handle this situation. Put</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b606db88e20200612d730cc961241a27da21957f" translate="yes" xml:space="preserve">
          <source>If module is installed, peeks into the module's manpage, reads the headline, and returns it. Moreover, if the module has been downloaded within this session, does the equivalent on the downloaded module even if it hasn't been installed yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd58d8ff347dcd8c05f67e1fd3ee4d2440157ff1" translate="yes" xml:space="preserve">
          <source>If more arguments are provided then they are all appended to the message, thus all these lines will have the same effect on the state of the $ctx object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d32d6074826a3d2d75814ea308b5ddeaca2f3c" translate="yes" xml:space="preserve">
          <source>If more delimiters than escape chars are specified, the last escape char is used for the remaining delimiters. If no escape char is specified for a given specified delimiter, '\' is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285c13c421c908ec1b5157ff1d11ce664fe6f585" translate="yes" xml:space="preserve">
          <source>If more than one argument is given then the entire argument list is assumed to be a hash. If a hash is supplied (either as a reference or as a list) it should contain one or more elements with the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e41b545db315dc5126671cc2bd5d88f5c30e3d" translate="yes" xml:space="preserve">
          <source>If more than one restriction of &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;distribution&lt;/code&gt; , etc. is specified, the results of the separately computed match values must all match. If so, the hashref represented by the YAML document is returned as the preference structure for the current distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da05e2a6f3037e503e2698db0f33736532af13ae" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5915108dabbdb47d0e6487842fce0264a4b8c92e" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f0dd65ec56750a188884a636ba7b4f0428367d" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc246b70384e8a417eb59e4e6e4575312d9d1e0a" translate="yes" xml:space="preserve">
          <source>If more than one variable or expression is given to &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, they must be placed in parentheses. This operator works by saving the current values of those variables in its argument list on a hidden stack and restoring them upon exiting the block, subroutine, or eval. This means that called subroutines can also reference the local variable, but not the global one. The argument list may be assigned to if desired, which allows you to initialize your local variables. (If no initializer is given for a particular variable, it is created with an undefined value.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e3db41fbfcf6140e9c02e059dd4c934fd6f5ad" translate="yes" xml:space="preserve">
          <source>If multiple distinct capture groups have the same name then the $+{NAME} will refer to the leftmost defined group in the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfee97a70420feb4c2945973c34123d251dd9c2" translate="yes" xml:space="preserve">
          <source>If multiple files from one program are desired an array ref can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081ad6caef0052cfab1aad2ae1061ca747e43248" translate="yes" xml:space="preserve">
          <source>If multiple transliterations are given for a character, only the first one is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766c6735ff098a4b925a773897fe49012fa4895d" translate="yes" xml:space="preserve">
          <source>If name passed in doesn't specify a readable file, appends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afec739c7f1e924deac0edbd4a6af96f74019ce" translate="yes" xml:space="preserve">
          <source>If necessary switch the input stream to handle unicode. This only has any effect for I/O handle based streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f88753647459114bf0fff92153d71fa3be1ef0c" translate="yes" xml:space="preserve">
          <source>If needed, &lt;code&gt;$new_size&lt;/code&gt; will be rounded up to the next multiple of the memory page size (usually 4096 or 8192).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ffb9e8f4aa9a45a3175ee9916b5d80efc23ef5" translate="yes" xml:space="preserve">
          <source>If needed, a thread can be exited at any time by calling &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; . This will cause the thread to return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in a scalar context, or the empty list in a list context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4f2509d5dd63a76d44f087cc7f42f7f77c757a" translate="yes" xml:space="preserve">
          <source>If needed, scripts can be written so as to run on both threaded and non-threaded Perls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fbdba912e7cde9b89fa3cefbc9b3e7d8d65343" translate="yes" xml:space="preserve">
          <source>If needed, these methods should be defined by the package inheriting from &lt;b&gt;Tie::Hash&lt;/b&gt;, &lt;b&gt;Tie::StdHash&lt;/b&gt;, or &lt;b&gt;Tie::ExtraHash&lt;/b&gt;. See &lt;a href=&quot;../perltie#SCALAR&quot;&gt;SCALAR in perltie&lt;/a&gt; to find out what happens when &lt;code&gt;SCALAR&lt;/code&gt; does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a52a7ddea6d450e656d921a0db2fecb1485c60" translate="yes" xml:space="preserve">
          <source>If needed, thread warnings can be suppressed by using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8270c68932b39381b724db912d7e0064edb351" translate="yes" xml:space="preserve">
          <source>If neither the &lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;-l&lt;/code&gt; prefix is present in an entry, the entry is considered a directory to search if it is in fact a directory, and a library to search for otherwise. The &lt;code&gt;$Config{lib_ext}&lt;/code&gt; suffix will be appended to any entries that are not directories and don't already have the suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d1d1804f2f0f5f5a1b0fb679650c8cfecd87fb" translate="yes" xml:space="preserve">
          <source>If neither the exit status nor the verbose level is specified, then the default is to use an exit status of 2 with a verbose level of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca010fd55b822b0537501828b1432d2b69dedb67" translate="yes" xml:space="preserve">
          <source>If neither your configured &lt;code&gt;yaml_module&lt;/code&gt; nor YAML.pm is installed, CPAN.pm falls back to using Data::Dumper and Storable and looks for files with the extensions &lt;code&gt;.dd&lt;/code&gt; or &lt;code&gt;.st&lt;/code&gt; in the &lt;code&gt;prefs_dir&lt;/code&gt; directory. These files are expected to contain one or more hashrefs. For Data::Dumper generated files, this is expected to be done with by defining &lt;code&gt;$VAR1&lt;/code&gt; , &lt;code&gt;$VAR2&lt;/code&gt; , etc. The YAML shell would produce these with the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff3f3f68e857a065a27224d0e20ede58778f1ae" translate="yes" xml:space="preserve">
          <source>If new() is called as an instance method (i.e. $ctx-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case, and the return value is the reference to the object (i.e. $ctx).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e13ee0a65adecfa0d8e7d8968c5c8fbe048cddb" translate="yes" xml:space="preserve">
          <source>If no $default is provided an empty string will be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0472c17854436e8327aa450d7bb9d0ca29c0fa4c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$VERSION&lt;/code&gt; was specified on the &lt;code&gt;bootstrap&lt;/code&gt; line, the last line becomes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4091cfd69b61e159053e0bbc2425f479136432" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$section_spec&lt;/code&gt; arguments are given, then the existing set of selected sections is cleared out (which means &lt;code&gt;all&lt;/code&gt; sections will be processed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0be16a9153a991182a683ab2886f1fa902dd9f4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is found and if the last statement is an expression, its value is returned. If the last statement is a loop control structure like a &lt;code&gt;foreach&lt;/code&gt; or a &lt;code&gt;while&lt;/code&gt; , the returned value is unspecified. The empty sub returns the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9cd2f55bd05fa55b1648853a5a5e34325f19ca" translate="yes" xml:space="preserve">
          <source>If no @args are given, no @cmds will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11be4d28581ad6cd28ff2cca82d45474710696d" translate="yes" xml:space="preserve">
          <source>If no MANIFEST.SKIP file is found, a default set of skips will be used, similar to the example above. If you want nothing skipped, simply make an empty MANIFEST.SKIP file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae10c8870eae9f10da944c7a01e813768cc713b" translate="yes" xml:space="preserve">
          <source>If no arguments are given to pod2man it will read from @ARGV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c6b87283ba7c4ecec068cb48f3ae13420b59ed" translate="yes" xml:space="preserve">
          <source>If no arguments are given, &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; returns the entire formatted archive as a string, which could be useful if you'd like to stuff the archive into a socket or a pipe to gzip or something.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886a141165f04df6d6f369bc4c3d2d482bb6efce" translate="yes" xml:space="preserve">
          <source>If no arguments are passed then the current article in the currently selected newsgroup is fetched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc296f09027fdaaecb023b3cebc4e9cba37abbb" translate="yes" xml:space="preserve">
          <source>If no extension is supplied, and your system supports it, the original</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c571c913f7bfa21e872b065c24a094b4bb7659" translate="yes" xml:space="preserve">
          <source>If no files or directories are supplied, &lt;code&gt;prove&lt;/code&gt; looks for all files matching the pattern &lt;code&gt;t/*.t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea57f19921408109bb2fb4d00e16350d27b4844" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible VMS-specific features are assumed. Currently, there are four VMS-specific features available: 'status' (a.k.a '$?'), 'exit', 'time' and 'hushed'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ceff2a6aadec6052244b97bba7012539a0b105" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible restrictions are assumed. (This is the safest mode to operate in, but is sometimes too strict for casual programming.) Currently, there are three possible things to be strict about: &quot;subs&quot;, &quot;vars&quot;, and &quot;refs&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d6512b9a9d5a5a9bf4112bcb1e3a393263f0b9" translate="yes" xml:space="preserve">
          <source>If no items exists at the specified index (i.e., the queue is empty, or the index is beyond the number of items on the queue), then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9e3e2a819c8fb3d75385fda77f033e08dfb423" translate="yes" xml:space="preserve">
          <source>If no options are given, Pod::Man uses the name of the input file with any trailing &lt;code&gt;.pod&lt;/code&gt;, &lt;code&gt;.pm&lt;/code&gt;, or &lt;code&gt;.pl&lt;/code&gt; stripped as the man page title, to section 1 unless the file ended in &lt;code&gt;.pm&lt;/code&gt; in which case it defaults to section 3, to a centered title of &quot;User Contributed Perl Documentation&quot;, to a centered footer of the Perl version it is run with, and to a left-hand footer of the modification date of its input (or the current date if given &lt;code&gt;STDIN&lt;/code&gt; for input).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1608fb3d0f72aad27d7541f9de6e52f802b4ee" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is &lt;code&gt;LC_ALL&lt;/code&gt; , the result is implementation-dependent. It may be a string of concatenated locale names (separator also implementation-dependent) or a single locale name. Please consult your</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed489574b7ebc8c696d017fb9515c4a591232a34" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is something other than &lt;code&gt;LC_ALL&lt;/code&gt; , the function returns a string naming the current locale for the category. You can use this value as the second argument in a subsequent call to &lt;code&gt;setlocale()&lt;/code&gt; , &lt;b&gt;but&lt;/b&gt; on some platforms the string is opaque, not something that most people would be able to decipher as to what locale it means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53385049e198591f3af9c0f621b19586d0e6e03c" translate="yes" xml:space="preserve">
          <source>If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; variable is searched and modified. Unless the &lt;code&gt;/r&lt;/code&gt; option is used, the string specified must be a scalar variable, an array element, a hash element, or an assignment to one of those; that is, some sort of scalar lvalue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee4d303ec9de35b4bd6b8caf1f726ddd4ca7c6e" translate="yes" xml:space="preserve">
          <source>If no such Pod file is found, this method returns undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cd3d77c3969309ab95d1d80fe464b5d299344d" translate="yes" xml:space="preserve">
          <source>If no urllist has been chosen yet, would you prefer CPAN.pm to connect to the built-in default sites without asking? (yes/no)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1457b54499e074ed5ffc48ffd57a11b298ba627" translate="yes" xml:space="preserve">
          <source>If no value is associated with the attribute, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3641612d3261f449a8b25c55086ede32d34dbbcb" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1328c99f7fc26be401ecc4c3daf8d11e272b065b" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3289643abb0e0247bc66bf82c16e180f16eb54" translate="yes" xml:space="preserve">
          <source>If none of the above apply, for backwards compatibility reasons, the &lt;code&gt;/d&lt;/code&gt; modifier is the one in effect by default. As this can lead to unexpected results, it is best to specify which other rule set should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7c7d8696c46f8858c11c99d7d1a93c5e34454b" translate="yes" xml:space="preserve">
          <source>If none of the three command line flags (&lt;b&gt;-w&lt;/b&gt;, &lt;b&gt;-W&lt;/b&gt; or &lt;b&gt;-X&lt;/b&gt;) that control warnings is used and neither &lt;code&gt;$^W&lt;/code&gt; nor the &lt;code&gt;warnings&lt;/code&gt; pragma are used, then default warnings will be enabled and optional warnings disabled. This means that legacy code that doesn't attempt to control the warnings will work unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3318e55dc39962c8bcf2ab6429b4489bcf36fce0" translate="yes" xml:space="preserve">
          <source>If none of those language-tags leads to loadable classes, we then try classes derived from YourProjClass-&amp;gt;fallback_languages() and then if nothing comes of that, we use classes named by YourProjClass-&amp;gt;fallback_language_classes(). Then in the (probably quite unlikely) event that that fails, we just return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92205bb5b979576b7a4566bdd880e8993ef8accb" translate="yes" xml:space="preserve">
          <source>If not 0, then it will be a count of the number of items returned by the subroutine. These items will be stored on the Perl stack. The section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15089e00b79e7ab36a4d99102807c33fe5f2fa61" translate="yes" xml:space="preserve">
          <source>If not already thread-shared, the other complex data types will be cloned (recursively, if needed, and including any &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;ings and read-only settings) into thread-shared structures before being placed onto a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6242ea32a785a3ff0172e42255ea915052f271" translate="yes" xml:space="preserve">
          <source>If not explicitly stated, the thread's context is implied from the context of the &lt;code&gt;-&amp;gt;create()&lt;/code&gt; call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546f552a865a929b4eb67739806b6d1165a21c9a" translate="yes" xml:space="preserve">
          <source>If not present or if it returns false, then the stream is left with the UTF-8 flag clear. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa39c0e8f5ce84edfe0042135e7b88219cc53b5" translate="yes" xml:space="preserve">
          <source>If not specified, this parameter defaults to the OS code of the Operating System this module was built on. The value 3 is used as a catch-all for all Unix variants and unknown Operating Systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be9107047108eada41300dc934c5b436deb60f0" translate="yes" xml:space="preserve">
          <source>If not successful &lt;code&gt;$status&lt;/code&gt; will hold the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff9c9f30e8137171bc8ec7e751402e0d4e840fb" translate="yes" xml:space="preserve">
          <source>If not successful, &lt;code&gt;$i&lt;/code&gt; will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50aafa5c3c8fb148f77f7f985f1a7044430dc1d" translate="yes" xml:space="preserve">
          <source>If not successful, the returned compression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8abade20743149de14f55b6a98559ef8ef9d29a" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation object, &lt;code&gt;$d&lt;/code&gt; , will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98576d6e30e44a960914f7dcf4587ee17092e2df" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation stream (&lt;code&gt;$d&lt;/code&gt; ) will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bd4ba1b78daba8a26ec4a9a7d4b9cf1b5da29e" translate="yes" xml:space="preserve">
          <source>If not successful, the returned uncompression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c88e7dc3b6ede485e4fd5bdcc2d18ce257150ea" translate="yes" xml:space="preserve">
          <source>If not under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; , the source is treated as ASCII + 128 extra controls, and identifiers should match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf92a54eaec2aef254d98d2b3572cf157430f6f" translate="yes" xml:space="preserve">
          <source>If not, you can use a Fisher-Yates shuffle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63aa47bb8d880da4c29744c1e2b5b0be9d2d8c10" translate="yes" xml:space="preserve">
          <source>If not, you may need to dig in the indices to find it in the directory of the current maintainer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dd66c8bbe90e184bf0c3b78ff920f066856ccf" translate="yes" xml:space="preserve">
          <source>If omitted, PATTERN defaults to a single space, &lt;code&gt;&quot; &quot;&lt;/code&gt; , triggering the previously described</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db6f61ce06c88ac7402efe003ec5c4f69fd8d53" translate="yes" xml:space="preserve">
          <source>If omitted, the maximum is the 4th.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf02da092076b8bc64e89cb4d51247518c5d4fc" translate="yes" xml:space="preserve">
          <source>If one attempts to print this value, then the overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; will be called, which will call &lt;code&gt;nomethod&lt;/code&gt; operator. The result of this operator will be stringified again, but this result is again of type &lt;code&gt;symbolic&lt;/code&gt; , which will lead to an infinite loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1adcb84ff8cdfac7bb94b3520eb9afd47061bae" translate="yes" xml:space="preserve">
          <source>If one can be sure that a particular program is a Perl script expecting filenames in @ARGV, the clever programmer can write something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a4785b4cb95e8fee7a09364380427defe0f204" translate="yes" xml:space="preserve">
          <source>If one is compiling Perl with the &lt;code&gt;-DPERL_GLOBAL_STRUCT&lt;/code&gt; the &lt;code&gt;dVAR&lt;/code&gt; definition is needed if the Perl global variables (see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e822ed5577ab52cc19452e08717fd8eeaeaafa" translate="yes" xml:space="preserve">
          <source>If one of the input arguments to the C function is the length of a string argument &lt;code&gt;NAME&lt;/code&gt; , one can substitute the name of the length-argument by &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; in the XSUB declaration. This argument must be omitted when the generated Perl function is called. E.g.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80356b3107601264757c736090081f30d00dbd0c" translate="yes" xml:space="preserve">
          <source>If one of the values is the string &quot;FATAL&quot;, then all the warnings in that list will be considered fatal, just as with the &lt;b&gt;warnings&lt;/b&gt; pragma itself. Should you need to specify that some warnings are fatal, and others are merely enabled, you can pass the &lt;b&gt;warnings&lt;/b&gt; parameter twice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b3d6b8eb5c53fb4bf738ec026bd17996fb8d7b" translate="yes" xml:space="preserve">
          <source>If one wants to use pure Perl and to be compatible with Perl versions prior to 5.10, the general answer is to use &lt;code&gt;if-elsif-else&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b8235b34f1e041150a031d0b9fbd780bdea304" translate="yes" xml:space="preserve">
          <source>If only PATTERN is given, EXPR defaults to &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16392afc89510c0fc9dd7ff46ccb0d1b3e97fcef" translate="yes" xml:space="preserve">
          <source>If other charset support is needed, please file a bug report against CPAN.pm at rt.cpan.org and describe your needs. Maybe we can extend the support or maybe UTF-8 terminals become widely available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07176206cda4e320bb3d161ccf541de7489aeb9" translate="yes" xml:space="preserve">
          <source>If our include file had contained #include directives, these would not have been processed by h2xs. There is no good solution to this right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1342cd54e96ee75c7832a17e50d7545968334b8a" translate="yes" xml:space="preserve">
          <source>If parse errors are found in the TAP output, a note of this will be made in the summary report. To see all of the parse errors, set this argument to true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390961095f8040e196a232b583180a54cb19ea61" translate="yes" xml:space="preserve">
          <source>If passed a filehandle will write a copy of all parsed TAP to that handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4f883097b033ba66596455cc092c01c5e9be39" translate="yes" xml:space="preserve">
          <source>If performance is an issue, and you don't care if the output is in the same case as the input, Use &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; to transform to the case most employed within the data. If the data are primarily UPPERCASE non-Latin1, then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[a-z]/[A-Z]/&lt;/a&gt;&lt;/code&gt;, and then &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt;. If the data are primarily lowercase non Latin1 then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[A-Z]/[a-z]/&lt;/a&gt;&lt;/code&gt; before sorting. If the data are primarily UPPERCASE and include Latin-1 characters then apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab79de5389c6af407dc202c7877566f66fb7264b" translate="yes" xml:space="preserve">
          <source>If perl has not yet been installed then PERL_SRC can be defined on the command line as shown in the previous section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527ed5a2bdcdb5849d3d992698d64bca35b1da28" translate="yes" xml:space="preserve">
          <source>If perl is invoked using the &lt;b&gt;-e&lt;/b&gt; option or the perl script is read from &lt;code&gt;STDIN&lt;/code&gt; then FindBin sets both &lt;code&gt;$Bin&lt;/code&gt; and &lt;code&gt;$RealBin&lt;/code&gt; to the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28bb9f5b57ae9540614c1c058beb6e3302cae11" translate="yes" xml:space="preserve">
          <source>If perl was installed correctly and your shadow library was written properly, the &lt;code&gt;getpw*()&lt;/code&gt; functions described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa77499616bd2f38224ed594fc316a580948f20" translate="yes" xml:space="preserve">
          <source>If possible, move() will simply rename the file. Otherwise, it copies the file to the new location and deletes the original. If an error occurs during this copy-and-delete process, you may be left with a (possibly partial) copy of the file under the destination name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821e3f8f257e241afb18f9d12ceda656792b21cb" translate="yes" xml:space="preserve">
          <source>If possible, register the module with CPAN. You should include details of its location in your announcement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00df1bad6fa3810b7a0fb796a7103c7f28a05f8c" translate="yes" xml:space="preserve">
          <source>If possible, this form should be used to prevent possible race conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d4da8aa87987ec9ceda1c43801e78b64cdc28a" translate="yes" xml:space="preserve">
          <source>If present on a regex, &lt;code&gt;&quot;#&quot;&lt;/code&gt; comments will be handled differently by the tokenizer in some cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb106d01e2834098b09ad25220c5df2510aa768" translate="yes" xml:space="preserve">
          <source>If present, $hints should be a reference to a hash, where the following keys are recognised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768b78e920d55b41dde42ac4d330e515e86f1cd7" translate="yes" xml:space="preserve">
          <source>If present, each callback corresponding to a given result type will be called with the result as the argument if the &lt;code&gt;run&lt;/code&gt; method is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e76146570d6b35c93035dd97f6090cb9b7cbba" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store all files and directories unlinked during the call. If nothing is unlinked, the array will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf6326ff6faceb306eebc039298d3cef21ae0f2" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store any errors that are encountered. See the &lt;a href=&quot;#ERROR-HANDLING&quot;&gt;ERROR HANDLING&lt;/a&gt; section for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28236ec2fcbd77071db6f4df51ebe2ad1353410f" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;make_path&lt;/code&gt; to print the name of each directory as it is created. By default nothing is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba616b58ac8bd248e0e92e90224a9f0e82a7126d" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;remove_tree&lt;/code&gt; to print the name of each file as it is unlinked. By default nothing is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da38e80a5de666bdd4124bbd72eac17c8b7acaf5" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by &lt;code&gt;$owner&lt;/code&gt; . If the value is numeric, it will be interpreted as a uid, otherwise as username is assumed. An error will be issued if the username cannot be mapped to a uid, or the uid does not exist, or the process lacks the privileges to change ownership.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bc6a6c714ec1098b00e8f4665bf29765d41191" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by the group &lt;code&gt;$group&lt;/code&gt; . If the value is numeric, it will be interpreted as a gid, otherwise as group name is assumed. An error will be issued if the group name cannot be mapped to a gid, or the gid does not exist, or the process lacks the privileges to change group ownership.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a365bb62991d043cada86ad3beb15687e9b5977b" translate="yes" xml:space="preserve">
          <source>If program usage has been explicitly requested by the user, it is often desirable to exit with a status of 1 (as opposed to 0) after issuing the user-requested usage message. It is also desirable to give a more verbose description of program usage in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3608d191706961b1f05c1c4d43ca10631cdf8b" translate="yes" xml:space="preserve">
          <source>If run on any operating system other than Windows, this will import the functions &lt;code&gt;setlocale&lt;/code&gt; and &lt;code&gt;LC_ALL&lt;/code&gt; from &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;. On Windows it does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9d2ff0e902fe5020fe3d38bdc23ea71c9ea208" translate="yes" xml:space="preserve">
          <source>If run with no arguments, filters standard input to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f4c878607755d2bdfa2564e4393c026538b21e" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if $ENV{TMPDIR} is tainted, it is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c028c3067c9e1833a7b2f721beaf502c1d3b87c3" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if the environment variables are tainted, they are not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc42709752d603d6e86a31cea878bd9ef78c5a40" translate="yes" xml:space="preserve">
          <source>If safety matters to you (and why else would you be using the Opcode module?) then you should not rely on the definition of this, or indeed any other, optag!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49a3b26a25358ee584c0e87edb350360c053486" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;formatter&lt;/code&gt; must be an object that is capable of formatting the TAP output. See &lt;a href=&quot;formatter/console&quot;&gt;TAP::Formatter::Console&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6406e3d3c8ec686d43e0bd0630b45054571335" translate="yes" xml:space="preserve">
          <source>If set forward, the details of the missing tests are filled in as 'unknown'. if set backward, the details of the intervening tests are deleted. You can erase history if you really want to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a6b6735d1cf67d97faf5afa93385c976f8d9ca" translate="yes" xml:space="preserve">
          <source>If set to 'none', no man pages will be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35193d3a52f1a67d3457cb0804a53caff3b762a2" translate="yes" xml:space="preserve">
          <source>If set to 0, the contents of the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method will be overwritten by the uncompressed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63134c061d53f609b58fe4db77f806b2b217214c" translate="yes" xml:space="preserve">
          <source>If set to 1, all uncompressed data will be appended to the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99badbf73893e25506e2b45aeb306043f0421e4" translate="yes" xml:space="preserve">
          <source>If set to a true value instruct &lt;code&gt;TAP::Parser&lt;/code&gt; to ignore exit and wait status from test scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7addd0cdb6e060b7f425d641cdc5802f63dc6646" translate="yes" xml:space="preserve">
          <source>If set to a true value then MakeMaker's prompt function will always return the default without waiting for user input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37acce4270c3ae4d059b2f5d5497684bcefbd070" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::PlainText will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e0bdf314190ede062d43bfa363f6d6ba57f992" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::Text will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ea67874e15073f2f8a8748dd116175b232517b" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=head1&lt;/code&gt; heading. If set to false (the default), no blank line is printed after &lt;code&gt;=head1&lt;/code&gt; , although one is still printed after &lt;code&gt;=head2&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c7d693600594b39fe949ae434a7a5fc8a792dc" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=headN&lt;/code&gt; headings. If set to false (the default), no blank line is printed after &lt;code&gt;=headN&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb0153c7c54ce2bccc40f5b7e2d5aff19532ce7" translate="yes" xml:space="preserve">
          <source>If set to a true value, indicates to the debugger that the code being debugged uses threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75bb2ef91a1a8c8b0ee4cbc07e5ef237213911f" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; , &lt;code&gt;failures&lt;/code&gt; , or &lt;code&gt;comments&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6403db7bde854649adecbe2fe72bc17d3ded2ac7" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; or &lt;code&gt;failures&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace0eebb3ad1da3562cf6ba2f4eb062020ce0829" translate="yes" xml:space="preserve">
          <source>If set to a true value, selects an alternate output format that, among other things, uses a different heading style and marks &lt;code&gt;=item&lt;/code&gt; entries with a colon in the left margin. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341f05ae650241bc98a8aa05ba502f05572aa8ee" translate="yes" xml:space="preserve">
          <source>If set to a true value, source entries will be converted into utf8-strings (available in Perl 5.6.1 or later). This feature needs the &lt;b&gt;Encode&lt;/b&gt; or &lt;b&gt;Encode::compat&lt;/b&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52de704a5928c9a6d768f4b0d7d8f6e786b6b18" translate="yes" xml:space="preserve">
          <source>If set to a true value, the non-POD parts of the input file will be included in the output. Useful for viewing code documented with POD blocks with the POD rendered and the code left intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ffaa19bbb496da1b7f2a485ed0c35990cc9fa8" translate="yes" xml:space="preserve">
          <source>If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel. Default is 0 (regardless of whether the channel is really buffered by the system or not; &lt;code&gt;$|&lt;/code&gt; tells you only whether you've asked Perl explicitly to flush after each write). STDOUT will typically be line buffered if output is to the terminal and block buffered otherwise. Setting this variable is useful primarily when you are outputting to a pipe or socket, such as when you are running a Perl program under &lt;b&gt;rsh&lt;/b&gt; and want to see the output as it's happening. This has no effect on input buffering. See &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt; for that. See &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt; on how to select the output channel. See also &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910076b95e48e767183ba95d8bfd82a29fd1f4b7" translate="yes" xml:space="preserve">
          <source>If set to the name of a file or device, certain operations of PerlIO subsystem will be logged to that file, which is opened in append mode. Typical uses are in Unix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907b3689c8943c9530c2bccd5f2399b3ea311ce8" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will &lt;code&gt;croak&lt;/code&gt; when an error during template validation occurs, rather than return &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262e77d8ecddf65d8252c722de18aca6dafa7dd4" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will no longer convert all keys from the user input to lowercase, but instead expect them to be in the case the template provided. This is useful when you want to use similar keys with different casing in your templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd2802dc60a0f5aa656aa8d36630b4a5a1195a7" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will require all values passed to be &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;. If you wish to enable this on a 'per key' basis, use the template option &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62a3740f4d2f3949ae331d68aff300bd8b9c5aa" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will sanity check templates, validating for errors and unknown keys. Although very useful for debugging, this can be somewhat slow in hot-code and large loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df88f116b1eff18f21bd345796868ca93d04ee66" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd8aed6bbb2cb495083f75e98d7497f01edca37" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a8f4d307b72654b7c09182b593e029ffb7af20" translate="yes" xml:space="preserve">
          <source>If set to true, all keys in the template that are marked as to be stored in a scalar, will also be removed from the result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9a61d55c40cdf983928fb90e5f246e820a5b49" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a30a93daed908c592b28db82a1a0b5d4a5ffc0" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc945146e02b49c89057b1636cf31aa2669f101" translate="yes" xml:space="preserve">
          <source>If set to true, immediately extract entries when reading them. This gives you the same memory break as the &lt;code&gt;extract_archive&lt;/code&gt; function. Note however that entries will not be read into memory, but written straight to disk. This means no &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects are created for you to inspect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be646f7a5def96ccc7c7343df2cffa456a1c220" translate="yes" xml:space="preserve">
          <source>If set to true, no &quot;1..N&quot; header will be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adb95e8ec0ed6e84fcb01131c2b90c160ee5335" translate="yes" xml:space="preserve">
          <source>If set to true, this option will remove compressed data from the input buffer of the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method as the inflate progresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55732bd7089a68f6b5548af27b4b056d17dc65d" translate="yes" xml:space="preserve">
          <source>If set true no diagnostics will be printed. This includes calls to &lt;code&gt;diag()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767e45d99bc3772f600dade44827bcaf3503a3c0" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;sources&lt;/code&gt; must be a hashref containing the names of the &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s to load and/or configure. The values are a hash of configuration that will be accessible to the source handlers via &lt;a href=&quot;parser/source#config_for&quot;&gt;config_for in TAP::Parser::Source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a162adb7a0dc8b66567284e3d48459cecdcd046" translate="yes" xml:space="preserve">
          <source>If set, a directory which fails the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e6aaabd1216511f49764603b89114f7c2c7520" translate="yes" xml:space="preserve">
          <source>If set, should be the name of a file (in the output directory) to write the HTML index to. The default value is &quot;index.html&quot;. If you set this to a false value, no contents file will be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed7ed0698b463358f79ea435791a3f79370827d" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into &lt;code&gt;NonStop&lt;/code&gt; mode and will not connect to a TTY. If interrupted (or if control goes to the debugger via explicit setting of $DB::signal or $DB::single from the Perl script), it connects to a TTY specified in the &lt;code&gt;TTY&lt;/code&gt; option at startup, or to a tty found at runtime using the &lt;code&gt;Term::Rendezvous&lt;/code&gt; module of your choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19bf560504f7c9497b672610231bba49eba7830" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into non-interactive mode until interrupted, or programmatically by setting $DB::signal or $DB::single.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825ea211f8cc0b564969fbeabe2d0a330315f1a6" translate="yes" xml:space="preserve">
          <source>If set, this dumps out memory statistics after execution. If set to an integer greater than one, also dumps out memory statistics after compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b969433f335481102ca199a1faf8cf07ca2debd" translate="yes" xml:space="preserve">
          <source>If set, this symbol indicates that only the version-specific components of a perl installation should be installed. This may be useful for making a test installation of a new version without disturbing the existing installation. Setting versiononly is equivalent to setting installperl's -v option. In particular, the non-versioned scripts and programs such as a2p, c2ph, h2xs, pod2*, and perldoc are not installed (see &lt;code&gt;INSTALL&lt;/code&gt; for a more complete list). Nor are the man pages installed. Usually, this is undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be95242fd4f1700426db0866219ce183a7c4d43" translate="yes" xml:space="preserve">
          <source>If setmagic is false then no set magic will be called on the new (empty) SV. This typically means that assignment will soon follow (e.g. 'local $x = $y'), and that will handle the magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7db0eb29b687c30aa2094a54d8f1f63ca4df7c5" translate="yes" xml:space="preserve">
          <source>If several symbol categories exist in &lt;code&gt;%EXPORT_TAGS&lt;/code&gt; , it's usually useful to create the utility &quot;:all&quot; to simplify &quot;use&quot; statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d650df7f1b284cce9178200761c079c663691a8" translate="yes" xml:space="preserve">
          <source>If so, please try to reuse the existing modules either in whole or by inheriting useful features into a new class. If this is not practical try to get together with the module authors to work on extending or enhancing the functionality of the existing modules. A perfect example is the plethora of packages in perl4 for dealing with command line options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc2c875ef26b86def7f4287ef7a97e0b0212c08" translate="yes" xml:space="preserve">
          <source>If so, that's great news; bug reports with patches are likely to receive significantly more attention and interest than those without patches. Please attach your patch to the report using the &lt;code&gt;-p&lt;/code&gt; option. When sending a patch, create it using &lt;code&gt;git format-patch&lt;/code&gt; if possible, though a unified diff created with &lt;code&gt;diff -pu&lt;/code&gt; will do nearly as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41db44860ffe2b84a712b997e64175db6318266" translate="yes" xml:space="preserve">
          <source>If some events detected in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a24b9aa82fff6a4581557ce8337d0476898456b" translate="yes" xml:space="preserve">
          <source>If some threads have not finished running when the main Perl thread ends, Perl will warn you about it and die, since it is impossible for Perl to clean up itself while other threads are running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c202d6491a5606cc9c88606232cf0104e601803" translate="yes" xml:space="preserve">
          <source>If something in a program isn&amp;rsquo;t the value you&amp;rsquo;re looking for but indicates where the value is, that&amp;rsquo;s indirection. This can be done with either &lt;b&gt;symbolic references&lt;/b&gt; or &lt;b&gt;hard&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d353132ec4a6837954d3ce352dc8e97cba1ae50" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;deprecated&lt;/b&gt;, we may remove it from the core in the future, though we might not. Generally, backward incompatible changes will have deprecation warnings for two release cycles before being removed, but may be removed after just one cycle if the risk seems quite low or the benefits quite high.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdc0cac0824435fe5437bd44fc271afb23e92f6" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;experimental&lt;/b&gt;, we may change its behaviour, deprecate or remove it without notice. While we'll always do our best to smooth the transition path for users of experimental features, you should contact the perl5-porters mailinglist if you find an experimental feature useful and want to help shape its future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12083dc2cfbc1c39486c5540691a063ce5c5018f" translate="yes" xml:space="preserve">
          <source>If spaces extend into the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dd58d3559146e497eb5b446f27a9cb126713f8" translate="yes" xml:space="preserve">
          <source>If specified, strings are normalized before preparation of sort keys (the normalization is executed after preprocess).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54d25c0a371a4a7533e5b6eb7a37c54566669f4" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to preprocess each string before the formation of sort keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df742ffc92755882ac205c4e8f1710a25c417cf9" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to rewrite lines in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; . The coderef will get each line, and then should return a rewritten line according to the UCA file format. If the coderef returns an empty line, the line will be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd186f184cd201e115617cc1e9809ac56ff41627" translate="yes" xml:space="preserve">
          <source>If specified, the given string will be stripped off from the beginning of the C function name in the generated XS functions (if it starts with that prefix). This only applies to XSUBs without &lt;code&gt;CODE&lt;/code&gt; or &lt;code&gt;PPCODE&lt;/code&gt; blocks. For example, the XS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db33e17f1262611ad9b1ad5050ad6146c6b090c4" translate="yes" xml:space="preserve">
          <source>If specified, this option will disable the creation of all extra fields in the zip local and central headers. So the &lt;code&gt;exTime&lt;/code&gt; , &lt;code&gt;exUnix2&lt;/code&gt; , &lt;code&gt;exUnixN&lt;/code&gt; , &lt;code&gt;ExtraFieldLocal&lt;/code&gt; and &lt;code&gt;ExtraFieldCentral&lt;/code&gt; options will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0066c7ecc8871ce3a62f9b83ef61508d6113e7" translate="yes" xml:space="preserve">
          <source>If specified, this option will force the creation of the smallest possible compliant gzip header (which is exactly 10 bytes long) as defined in RFC 1952.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b346bb75048f3d43315e1f91c059eb29d865aa" translate="yes" xml:space="preserve">
          <source>If speed is of little concern, the common idiom uses grep in scalar context (which returns the number of items that passed its condition) to traverse the entire list. This does have the benefit of telling you how many matches it found, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8029f3ea6d316f66b8a86b9af29af453cce204da" translate="yes" xml:space="preserve">
          <source>If start_color is non-null then it will be inserted after the opening quote (if there is one) but before the escaped text. If end_color is non-null then it will be inserted after the escaped text but before any quotes or ellipses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741bc8e54000bbf6547a93a37e27f9bd7b7bf22e" translate="yes" xml:space="preserve">
          <source>If straightforward stream-based parsing wont meet your needs (as is likely the case for tasks such as translating PODs into structured markup languages like HTML and XML) then you may need to take the tree-based approach. Rather than doing everything in one pass and calling the &lt;b&gt;interpolate()&lt;/b&gt; method to expand sequences into text, it may be desirable to instead create a parse-tree using the &lt;b&gt;parse_text()&lt;/b&gt; method to return a tree-like structure which may contain an ordered list of children (each of which may be a text-string, or a similar tree-like structure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d14b7e2a788098ee234bfc1585ff4767dfdaee2" translate="yes" xml:space="preserve">
          <source>If subroutine signatures are enabled (see &lt;a href=&quot;#Signatures&quot;&gt;Signatures&lt;/a&gt;), then the shorter PROTO syntax is unavailable, because it would clash with signatures. In that case, a prototype can only be declared in the form of an attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c7d01f7359f4959eaf7c155ab3009451137cea" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation object and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec38a973765ca012bc6fc104f4b8ef70937c9614" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation stream and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34b524a05a94eda9eec45a5e52e923221e9853a" translate="yes" xml:space="preserve">
          <source>If successful, it returns the in-memory gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a46b7cfb2406db4688f3a0ac9d424f4865a652" translate="yes" xml:space="preserve">
          <source>If successful, it returns the uncompressed gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f77490ec0c061ac3ae6e48aedaf1d41d413b95c" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised compression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d593630b18abe30c9939f8d44076e1ce90807" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation object, &lt;code&gt;$d&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f86208486cf7be6093bb8b7191e306d09fb04dc" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation stream, &lt;code&gt;$d&lt;/code&gt; and &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation stream, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d2c70da3dce90528345981e79d77f52c5f5ddb" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised uncompression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9905dac4184f6f7193dddf39eab6d02ad4540f03" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, &lt;code&gt;charblock()&lt;/code&gt; tries to do the opposite and interpret the argument as an old-style block name. On an ASCII platform, the return value is a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343b1f1d2e0b0c3a0e2a3dffed0083feca7d527c" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, charscript() tries to do the opposite and interpret the argument as a script name. The return value is a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608c69ec5dc593b8e31469808e911c9b8c28fab1" translate="yes" xml:space="preserve">
          <source>If tcsh is your login shell then use the setenv command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6722301f4d6d5b294f3eee46d693b203a67e97d7" translate="yes" xml:space="preserve">
          <source>If that doesn't make much sense, consider the analogy of a command pipeline. Say you have a shell script stored in the compressed file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce337d0a942d7a20e0ccbeff20a1fe0816cdba5" translate="yes" xml:space="preserve">
          <source>If that doesn't work (it relies on features of your stdio implementation), then you need something more like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace9cde0327f63e0372278440efb1605dee92be3" translate="yes" xml:space="preserve">
          <source>If that doesn't work (some I/O implementations are particularly cantankerous), you might need something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b21d1151e484221dbc92ea1c2c56d3ec4082a9" translate="yes" xml:space="preserve">
          <source>If that doesn't work, give up on your stdio package and use sysread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0580b926aa13464eaf5222ef23bd075e2a2e806d" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file and then back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4eb30982662b9e20db4ab3ae1666e6a76a6e58a" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file, reading something, and then seeking back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c63d398b08eb5cb7f3f37514cbe92856008dc42" translate="yes" xml:space="preserve">
          <source>If that gives too much output every day, you may want to watch only for three modules. You can write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c73f5392dc820a97b0a4426cb998de73cb28f26" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the calling module then die. Otherwise return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313f3cd86007469b883802f17e39affb3f8c8794" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the scope where &lt;code&gt;$object&lt;/code&gt; is first used then die. Otherwise return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4493cf703f913ddbd099cc80db075e294c3617b1" translate="yes" xml:space="preserve">
          <source>If the &quot;external&quot; protocol is specified, the ping() method attempts to use the &lt;code&gt;Net::Ping::External&lt;/code&gt; module to ping the remote host. &lt;code&gt;Net::Ping::External&lt;/code&gt; interfaces with your system's default &lt;code&gt;ping&lt;/code&gt; utility to perform the ping, and generally produces relatively accurate results. If &lt;code&gt;Net::Ping::External&lt;/code&gt; if not installed on your system, specifying the &quot;external&quot; protocol will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022b01a378125712b4875c54365686882089f63" translate="yes" xml:space="preserve">
          <source>If the &quot;icmp&quot; protocol is specified, the ping() method sends an icmp echo message to the remote host, which is what the UNIX ping program does. If the echoed message is received from the remote host and the echoed information is correct, the remote host is considered reachable. Specifying the &quot;icmp&quot; protocol requires that the program be run as root or that the program be setuid to root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3280089081e0a65bf27928777cbd13d99f6f66b" translate="yes" xml:space="preserve">
          <source>If the &quot;syn&quot; protocol is specified, the ping() method will only send a TCP SYN packet to the remote host then immediately return. If the syn packet was sent successfully, it will return a true value, otherwise it will return false. NOTE: Unlike the other protocols, the return value does NOT determine if the remote host is alive or not since the full TCP three-way handshake may not have completed yet. The remote host is only considered reachable if it receives a TCP ACK within the timeout specified. To begin waiting for the ACK packets, use the ack() method as explained below. Use the &quot;syn&quot; protocol instead the &quot;tcp&quot; protocol to determine reachability of multiple destinations simultaneously by sending parallel TCP SYN packets. It will not block while testing each remote host. demo/fping is provided in this distribution to demonstrate the &quot;syn&quot; protocol as an example. This protocol does not require any special privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318d6b49d6250a4816190433cf297845eb70cba7" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcc06c7fad286b05b36114515df89ab3f899db0" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302e31c3384df8bb8c31ef52a9d8291c6e65b38e" translate="yes" xml:space="preserve">
          <source>If the $must_be_file argument is provided and is TRUE, then return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless the image looks like it belongs to a file dump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865165ad77b0593f721d466f6d0ebabfe1d34482" translate="yes" xml:space="preserve">
          <source>If the $string is &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076c07280263c9d15e3255695b14d837c538bc87" translate="yes" xml:space="preserve">
          <source>If the &amp;lt;$input_filename_or_reference&amp;gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for reading and the input data will be read from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e87357913d48be4073006d8b0866ceef5457d5" translate="yes" xml:space="preserve">
          <source>If the 'name' is '&amp;amp;' the corresponding entry in the PAD is a CV representing a possible closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cb5ded2282f7dcd41dd84a212cb40770ba3961" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;-W&lt;/b&gt; flag is used on the command line, it will enable all warnings throughout the program regardless of whether warnings were disabled locally using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; or &lt;code&gt;$^W =0&lt;/code&gt; . This includes all files that get included via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;. Think of it as the Perl equivalent of the &quot;lint&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544ad5b88e657a2b04055790eb69377a583771e6" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;ExtUtils::Embed&lt;/b&gt; module isn't part of your Perl distribution, you can retrieve it from &lt;a href=&quot;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&quot;&gt;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&lt;/a&gt; (If this documentation came from your Perl distribution, then you're running 5.004 or better and you already have it.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e97ddfc26315857071022b6a58a8c5330f9bda" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;-S&quot;&lt;/code&gt; or &lt;code&gt;-&quot;S&quot;&lt;/code&gt; switch is present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfb6b5f36fe9b097b6d4cfdd0d5b8347d4498d3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;#!&lt;/code&gt; line does not contain the word &quot;perl&quot; nor the word &quot;indir&quot; the program named after the &lt;code&gt;#!&lt;/code&gt; is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do &lt;code&gt;#!&lt;/code&gt; , because they can tell a program that their SHELL is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263d47f71006c52e232d04a65727d383732b439a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; variable is set to a true value, no heuristics will be applied to UTF8/16/32, and the result will be limited to the suspects and &lt;code&gt;ascii&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad3f883582e4c647a3748b90c080c6161d8d898" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a filehandle, the compressed data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b21ca0ba17da1de5557b8c2561a39c672e345ba" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a scalar, it is assumed to be a filename. This file will be opened for reading and the compressed data will be read from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c806bbadc7d9dce5be50aca2c285d39455523f0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is a filehandle, the input data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573972f31f94bcc5ce697159aca1ad87294adc22" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4cccbcdf0c65cc8f40030797afae3d268325f9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$need&lt;/code&gt; argument is given then it will check that the current version (as defined by the $VERSION variable in the package) is greater than or equal to &lt;code&gt;$need&lt;/code&gt; ; it will die if this is not the case. This method is called automatically by the &lt;code&gt;VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e612a8de15e6e3ebce7b57945845f8b7dc29222" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1b12c1cf4a15c9b6156dfb74283d87ea201fd5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59757227a4fe8fdd27a95b595bd3ff8c8a163939" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; ::new will return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadc0cd9a0990edba8eef6811ffbf43a8f495bbc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; ::new will return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e714bc9d0ca60a68f45566881bf3e6145bc1ce5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; ::new will return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876928fea8ebdaa591df8075f9c404fb23d04a28" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; ::new will return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38552f9e6ec9c67c09d8bddc8275dd8bdd5d8803" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Zip&lt;/code&gt; ::new will return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc18113fea92f93f29a91b56f7f76e4dd3fc2c3e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b000e8d3bf3971a53c3d271eb802381bc6b99814" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the uncompressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4843925dd2f30aabd060449fee92e5566394585d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c61471bec0e7ab85ea6d51b841a7cd924bb91c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the uncompressed data will be written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171f6debdc3c19e16dbddc9b4ccb5eb09a1f9e1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2259a2e974894cbf8831f8e74de6dee67d652d9c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$regexp&lt;/code&gt; variable contains a code expression, the user could then execute arbitrary Perl code. For instance, some joker could search for &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;('rm -rf *');&lt;/code&gt; to erase your files. In this sense, the combination of interpolation and code expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cead10e67b406c29ab565d567b9609063d5776ca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a buffer, this method will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dcaddb355cecd931c021172a4bedf908dd76a9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return the underlying file descriptor. Once the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method is called &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8acbfda88a1601bef7d039c62529de82f9b15c5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, this method returns the current autoflush setting for the underlying filehandle. If &lt;code&gt;EXPR&lt;/code&gt; is present, and is non-zero, it will enable flushing after every write/print operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f22b38f141c1394908e5c44c3cf641e6013a601" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;(*ACCEPT)&lt;/code&gt; is inside of capturing groups then the groups are marked as ended at the point at which the &lt;code&gt;(*ACCEPT)&lt;/code&gt; was encountered. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96d9f9f8c91a22bdf7e1a3536eeb47596adfe1c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is disabled, the comment field can contain any character except NULL. If any null characters are present, the field will be truncated at the first NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0625a9517209d9c735d420fbb7b372c06cae56" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, &lt;code&gt;$string&lt;/code&gt; can only consist of ISO 8859-1 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e727e67c9a9b626ab111993b625d6fae0b44b5e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, the comment can only consist of ISO 8859-1 characters plus line feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687858bb0364e03075315214e49915f4063efd20" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-i&lt;/code&gt; switch is present but no extension for a backup copy is given, then inplace editing creates a new version of a file; the existing copy is not deleted. (Note that if an extension is given, an existing file is renamed to the backup file, as is the case under other operating systems, so it does not remain as a previous version under the original filename.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a06195ed61d1ad05b053f7cec670bab3d1b47d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/c&lt;/code&gt; modifier is specified, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f363164df63c08b01c2f8d842eb83178238fca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/d&lt;/code&gt; modifier is used, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228d53bdcd18fe101fa332b95e05c49d501e9bd9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/g&lt;/code&gt; option is not used, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; in list context returns a list consisting of the subexpressions matched by the parentheses in the pattern, that is, (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; ...) (Note that here &lt;code&gt;$1&lt;/code&gt; etc. are also set). When there are no parentheses in the pattern, the return value is the list &lt;code&gt;(1)&lt;/code&gt; for success. With or without parentheses, an empty list is returned upon failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f80ef36f0d767bd1b67ec24494f102a4ec7c1e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is present, a new copy of the string is made and its characters transliterated, and this copy is returned no matter whether it was modified or not: the original string is always left unchanged. The new copy is always a plain string, even if the input string is an object or a tied variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9229f75d9765b6c9e80a754666b4ec3786ce235" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is used then it runs the substitution on a copy of the string and instead of returning the number of substitutions, it returns the copy whether or not a substitution occurred. The original string is never changed when &lt;code&gt;/r&lt;/code&gt; is used. The copy will always be a plain string, even if the input is an object or a tied variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98015ad9cab949396e11223bb4b809b828f32a12" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ADLER32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e3cc3b120420d3fe3e5903cbe74d0d544abd6d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to false, the output buffers in the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods will be truncated before uncompressed data is written to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc67d2e9493b30b20a1a27f63c6bc36f875e42fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for the &lt;code&gt;$d&lt;/code&gt; object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any compressed data is written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241ec910d4c3fc198870214959a19e4587117b91" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for this object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any uncompressed data is written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a4bdafd5b4aee2bfba5a403d17509d788319bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Archive::Tar&lt;/code&gt; module is installed and either the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da717ba776ac7b943780ea377cd85c35cc7f2655" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Bzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2451f14f493fd0c1b2a744f1ca680885802c97fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Deflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a262cca6ca624ccbcc230f0a9a299f301469ea87" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Gzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1abc2a1019c01d985ed7b90e95e969f6f299bf2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::RawDeflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ea66329ad2b4187630d779016bfcf01873661d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Zip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa0131be286b8ee087293f106c69cc7176b941b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7295924866c46c6268e8a714d1d64a580c31683" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyUncompress object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d590344cfdd3022553efe336602191d1dbf477b6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Bunzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48a250e20975c54010e5628db4f5baad9a34122" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Gunzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52452c9550cd8363c6c8237af362cc345e53f457" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Inflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f0502573716752984911463b9f0d1cdbf46468" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::RawInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a69474f66acefa05c78e7afea37ef49d0b67b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Unzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ac2a9fbc05192cf46afe1261683a81419aaa4d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CRC32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1078abcc96e5bc5e00a4c013f64ebcf42ad64647" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ConsumeInput&lt;/code&gt; option has been set to true when the &lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; object is created, the &lt;code&gt;$input&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt; . On completion it will contain what remains of the input buffer after inflation. In practice, this means that when the return status is &lt;code&gt;Z_OK&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contain an empty string, and when the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a12981a50e52bd8360e58342fda216fd19888ef" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; bit is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd3991b928d2bed7eef1e209952394cc1a3b16f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Listen&lt;/code&gt; argument is given, but false, the queue size will be set to 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1143100ee61e97ea2197747ccc58abb62c39ba7a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Minimal&lt;/code&gt; option is set to true, this option will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0cd9b590461a3324fa8fa68396f36ebee97301" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Strict&lt;/code&gt; is on it will automatically enable this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5a03dfea212cb5b29a1fbf2d5e717d48359451" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;YAML&lt;/code&gt; or the &lt;code&gt;YAML::Syck&lt;/code&gt; module is installed a record of the internal state of all modules is written to disk after each step. The files contain a signature of the currently running perl version for later perusal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82a6fc0a2f95bf7629d02360284d3c7a1ca8a6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;can&lt;/code&gt; returns false, then that is passed to &lt;code&gt;ok&lt;/code&gt; . If it returns true, then the larger expression &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; returns 1, which &lt;code&gt;ok&lt;/code&gt; sees as a simple signal of success, as you would expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb03363c1cc83c40db7187bc0c1808c11643507" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;charscript()&lt;/code&gt; argument is not a known script, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15aaa040db904ad0d7e939ff87d0289e4ed113e7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; conversion cannot be done without loss of information, the result is compatible with the conversion sequence &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; . In particular, rounding is strongly biased to 0, though a number like &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; has a chance of being rounded to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4484ac7779a53de50aea47a7a5981f680fda36" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;encoding&lt;/code&gt; pragma is in scope then the lengths returned are calculated from the length of &lt;code&gt;$/&lt;/code&gt; in Unicode characters, which is not always the same as the length of &lt;code&gt;$/&lt;/code&gt; in the native encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb917cbee0d97141aac38b7ae445c57c18b27f43" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;export_fail&lt;/code&gt; method returns an empty list then no error is recorded and all the requested symbols are exported. If the returned list is not empty then an error is generated for each symbol and the export fails. The Exporter provides a default &lt;code&gt;export_fail&lt;/code&gt; method which simply returns the list unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276362d098a443c72a3870f2a2d48ae260499ef9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gv&lt;/code&gt; is present and is not in the symbol table, then this function simply returns. This checked will be skipped if &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798f35bb0e17493f55f47f1e0e601507174d7021" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;maxdepth&lt;/code&gt; is included, it must be a numeral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4672f4a6483db1b05eeb609d8e652aab384c295c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;timelocal()&lt;/code&gt; function is given a non-existent local time, it will simply return an epoch value for the time one hour later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b1721e1ae657f367e4018c29dc66b147cf1c09" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files from &lt;code&gt;Archive::Tar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddc99dbc25aed0c730c0fe2bb39cef906b6e6a7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;#evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e45908e093ce58a5e789307a68cc9a88437767" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094a307e3b02182e7190ab8c7d41908a31be7b6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;utf8&lt;/code&gt; option is not given, the encoding of its output file handle will be forced to the detected encoding of the input POD, which preserves whatever the input text is. This ensures backward compatibility with earlier, pre-Unicode versions of this module, without large numbers of Perl warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5abb9df31ef6516fcae104f653339d0026bd9e0" translate="yes" xml:space="preserve">
          <source>If the AIX Toolbox version of lib gdbm &amp;lt; 1.8.3-5 is installed on your system then Perl will not work. This library contains the header files /opt/freeware/include/gdbm/dbm.h|ndbm.h which conflict with the AIX system versions. The lib gdbm will be automatically removed from the wanted libraries if the presence of one of these two header files is detected. If you want to build Perl with GDBM support then please install at least gdbm-devel-1.8.3-5 (or higher).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f37200eb3cc7a4dd0c87959fbb6c2e093e138e" translate="yes" xml:space="preserve">
          <source>If the C function setvbuf() is available, then &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; sets the buffering policy for the FileHandle. The calling sequence for the Perl function is the same as its C counterpart, including the macros &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; , except that the buffer parameter specifies a scalar variable to use as a buffer. WARNING: A variable used as a buffer by &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; must not be modified in any way until the FileHandle is closed or until &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; is called again, or memory corruption may result!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7ae4abb775cdaecaa965021a5be89b2c2a0678" translate="yes" xml:space="preserve">
          <source>If the C functions fgetpos() and fsetpos() are available, then &lt;code&gt;FileHandle::getpos&lt;/code&gt; returns an opaque value that represents the current position of the FileHandle, and &lt;code&gt;FileHandle::setpos&lt;/code&gt; uses that value to return to a previously visited position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ebbabfe865d409f0b42636c02f4e83fa99aca9" translate="yes" xml:space="preserve">
          <source>If the C functions setbuf() and/or setvbuf() are available, then &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; and &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their C counterparts--including the constants &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; for setvbuf()--except that the buffer parameter specifies a scalar variable to use as a buffer. You should only change the buffer before any I/O, or immediately after calling flush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7a6c24ac237588ebe82997b3227d4077970889" translate="yes" xml:space="preserve">
          <source>If the FHCRC bit is set in the gzip FLG header byte, the CRC16 bytes in the header must match the crc16 value of the gzip header actually read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716df9a8cd6dfb775c171f4188701d3aabf993bd" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;../perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;../perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d842f2ab3731c9a4a0e7946b2b84aa92b80adc" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7443d40abaa23829b9ab709311a1922fe461b6" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in string were output then an ellipsis &lt;code&gt;...&lt;/code&gt; will be appended to the string. Note that this happens AFTER it has been quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09680d261a6a88f2e5836c919a2510509957b1e5" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_QUOTE flag is set then the result will be double quoted with any double quotes in the string escaped. Otherwise if the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in angle brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b990fe2846203877eedfbcf554045c1e773431f8" translate="yes" xml:space="preserve">
          <source>If the POD is inconsistent about the indentation of verbatim blocks, but you have figured out a heuristic to determine how much a particular verbatim block is indented, you can pass a code reference instead. The code reference will be executed with one argument, an array reference of all the lines in the verbatim block, and should return the value to be stripped from each line. For example, if you decide that you're fine to use the first line of the verbatim block to set the standard for indentation of the rest of the block, you can look at the first line and return the appropriate value, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fd97e2c853d040e2b1f08382eba5acd7317a9d" translate="yes" xml:space="preserve">
          <source>If the POD source does not include an &lt;code&gt;=encoding&lt;/code&gt; declaration, the parser will attempt to guess the encoding (selecting one of UTF-8 or Latin-1) by examining the first non-ASCII bytes and applying the heuristic described in &lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539121ee50a224917b8fad7fe828de50a4356761" translate="yes" xml:space="preserve">
          <source>If the POD you're parsing adheres to a consistent indentation policy, you can have such indentation stripped from the beginning of every line of your verbatim blocks. This method tells Pod::Simple what to strip. For two-space indents, you'd use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767d61bbd817028665e597ffd44d52d2f3072a5a" translate="yes" xml:space="preserve">
          <source>If the PV of the SV is an octet sequence in UTF-8 and contains a multiple-byte character, the &lt;code&gt;SvUTF8&lt;/code&gt; flag is turned on so that it looks like a character. If the PV contains only single-byte characters, the &lt;code&gt;SvUTF8&lt;/code&gt; flag stays off. Scans PV for validity and returns false if the PV is invalid UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce916c1cc7717c4e805155c2d7548fbc24c77ee" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as &lt;code&gt;perl scriptname&lt;/code&gt; , then the &lt;b&gt;-%c&lt;/b&gt; option must appear on the command line: &lt;code&gt;perl -%c scriptname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde4187a6aa163d9c96f574141763bdd38ae34f7" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the &lt;b&gt;-%c&lt;/b&gt; option is a part of Perl's first argument: e.g. change &lt;code&gt;perl -n -%c&lt;/code&gt; to &lt;code&gt;perl -%c -n&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c878ced38c4f673dcc4c3921e7ce406e54b4b71" translate="yes" xml:space="preserve">
          <source>If the README file seems to be getting too large you may wish to split out some of the sections into separate files: INSTALL, Copying, ToDo etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcda0ef071779fc235b5cd85b1d75a393d7ae1e4" translate="yes" xml:space="preserve">
          <source>If the Time::HiRes module has been installed, you can specify the special tag &lt;code&gt;:hireswallclock&lt;/code&gt; for Benchmark (if Time::HiRes is not available, the tag will be silently ignored). This tag will cause the wallclock time to be measured in microseconds, instead of integer seconds. Note though that the speed computations are still conducted in CPU time, not wallclock time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0de044d27a1f06d198fa6cd4b199e7a501a7e3" translate="yes" xml:space="preserve">
          <source>If the UNTIE method exists then the warning above does not occur. Instead the UNTIE method is passed the count of &quot;extra&quot; references and can issue its own warning if appropriate. e.g. to replicate the no UNTIE case this method can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcfedf6cd11f719819da193333a7cf6de0732a7" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fd8c6bb88e030936b47d8b396e97702a34b855" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333bd150f2ebb931ff98dd0682381076be3b30d6" translate="yes" xml:space="preserve">
          <source>If the XSUB has a return type of &lt;code&gt;void&lt;/code&gt; then the compiler will not declare a RETVAL variable for that function. When using a PPCODE: section no manipulation of the RETVAL variable is required, the section may use direct stack manipulation to place output values on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebee72fc9aa0a9b169227a410e90f7f3df000ed" translate="yes" xml:space="preserve">
          <source>If the above does not work, or is not adequate for your application, then file a bug report on &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt; against the problematic module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f8b1f2470978bb7eb295cba54688c501c99623" translate="yes" xml:space="preserve">
          <source>If the above evaluates as true, the following methods will be available on the &lt;code&gt;$result&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3626e8a47b75cd9814f9aabb6f3226e20a12cd72" translate="yes" xml:space="preserve">
          <source>If the act of unimporting your module (via a &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;) should cause source code filtering to cease, create an &lt;code&gt;unimport&lt;/code&gt; subroutine, and have it call &lt;code&gt;filter_del&lt;/code&gt; . Make sure that the call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; in step 5 will not accidentally read past the &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Effectively this limits source code filters to line-by-line operation, unless the &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine does some fancy pre-pre-parsing of the source code it's filtering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14d384ae54d7fd6956617c902dc52b4f7c913e2" translate="yes" xml:space="preserve">
          <source>If the archive creation fails for any reason, &lt;code&gt;create_archive&lt;/code&gt; will return false. Please use the &lt;code&gt;error&lt;/code&gt; method to find the cause of the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb2a47c2b4d923874ce10a47d541cda074eec3d" translate="yes" xml:space="preserve">
          <source>If the argument has any characters in it other than those matching &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;, it must be a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad412a6b0ecba8c1d6ad813bdece11aeaddeb49" translate="yes" xml:space="preserve">
          <source>If the argument is &quot;/cygdrive&quot;, then just the volume mount settings, and the cygdrive mount prefix are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f2982f0afdcf62760763525865c85306c36f4e" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b654339779464179184dbeba32e40251c7e2e80" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns what the optimiser considers to be the longest anchored fixed string and longest floating fixed string in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5788205c6ad8a4a8ebfb81bffe26f845a9b7bbcb" translate="yes" xml:space="preserve">
          <source>If the argument is a distribution file name (recognized by embedded slashes), it is processed. If it is a module, CPAN determines the distribution file in which this module is included and processes that, following any dependencies named in the module's META.yml or Makefile.PL (this behavior is controlled by the configuration parameter &lt;code&gt;prerequisites_policy&lt;/code&gt; ). If an argument is enclosed in slashes it is treated as a regular expression: it is expanded and if the result is a single object (distribution, bundle or module), this object is processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b117f48b026da0b0825304f95daf71b17bbf61f6" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;[\w:']&lt;/code&gt;, it must be a module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af3cf093a2df4958131449dc2e48cabc581ef28" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;\w&lt;/code&gt; , it could either be a module or a file. We will try to find &lt;code&gt;file.pm&lt;/code&gt; first in &lt;code&gt;@INC&lt;/code&gt; and if that fails, we will try to find &lt;code&gt;file&lt;/code&gt; in @INC. If both fail, we die with the respective error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950fc5f071c3850318ce53caaa9abf5b8d7e4b09" translate="yes" xml:space="preserve">
          <source>If the argument ops disagree with the prototype, for example by having an unacceptable number of arguments, a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. In the error message, the callee is referred to by the name defined by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4e5120bb33dd7cd87d33b762323635453284d3" translate="yes" xml:space="preserve">
          <source>If the argument to &lt;code&gt;charblock()&lt;/code&gt; is not a known block, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7830cf54412f961c402c681fff76496d227d2f2" translate="yes" xml:space="preserve">
          <source>If the attribute name is unqualified, the attribute is installed in the current package. Otherwise it is installed in the qualifier's package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1735572aa151643b864cff0b5bfb1e1bb6554fd" translate="yes" xml:space="preserve">
          <source>If the author's vision of the future of their module is sufficiently different from the vision of the pumpkin holder and perl5-porters as a whole so as to cause serious problems for Perl, the pumpkin holder may choose to formally fork the version of the module in the Perl core from the one maintained by the author. This should not be done lightly and should &lt;b&gt;always&lt;/b&gt; if at all possible be done only after direct input from Larry. If this is done, it must then be made explicit in the module as distributed with the Perl core that it is a forked version and that while it is based on the original author's work, it is no longer maintained by them. This must be noted in both the documentation and in the comments in the source of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff96c964c43432c71bf023f75aff4edc100165c" translate="yes" xml:space="preserve">
          <source>If the backslash is followed by a single digit, it's a backreference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1567cb832ddb83a0b923a12411e03c46deba90f" translate="yes" xml:space="preserve">
          <source>If the beginning of some prebuilt path matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10167b28b5bd2cad97967630ae689888c6716c8a" translate="yes" xml:space="preserve">
          <source>If the block of code given to &lt;a href=&quot;#pairmap&quot;&gt;pairmap&lt;/a&gt; contains lexical variables that are captured by a returned closure, and the closure is executed after the block has been re-used for the next iteration, these lexicals will not see the correct values. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440a5d8f345e7d80a2856dd0eeb83f250fbc92a1" translate="yes" xml:space="preserve">
          <source>If the byte length &lt;code&gt;l1&lt;/code&gt; is non-zero, it says how far into &lt;code&gt;s1&lt;/code&gt; to check for fold equality. In other words, &lt;code&gt;s1&lt;/code&gt; +&lt;code&gt;l1&lt;/code&gt; will be used as a goal to reach. The scan will not be considered to be a match unless the goal is reached, and scanning won't continue past that goal. Correspondingly for &lt;code&gt;l2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7b55adcf46426f8905247d52b7cd465b36f52b" translate="yes" xml:space="preserve">
          <source>If the c89 compiler complains of syntax errors during the build of the Socket extension then be sure to fix the syntax error in the system header /usr/include/sys/socket.h.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440bf862cd2a86e099efb047265c5fac0693c286" translate="yes" xml:space="preserve">
          <source>If the call is to an lvalue subroutine, and &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; is defined &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e23c7323ae1871ee025af31121766b37b8d3a26" translate="yes" xml:space="preserve">
          <source>If the call to &lt;code&gt;load&lt;/code&gt; is from &lt;code&gt;YourPackage&lt;/code&gt; , then that can be further simplified to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5682bd082d01ef4bbac6126150d3b6f81612d0af" translate="yes" xml:space="preserve">
          <source>If the character following the backslash is an ASCII letter or an ASCII digit, then the sequence may be special; if so, it's listed below. A few letters have not been used yet, so escaping them with a backslash doesn't change them to be special. A future version of Perl may assign a special meaning to them, so if you have warnings turned on, Perl issues a warning if you use such a sequence. [1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da17f25e114b45ba4ef865a9786c813cdbdd1421" translate="yes" xml:space="preserve">
          <source>If the character is canonically decomposable (including Hangul Syllables), it returns the (full) canonical decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a39c4975b03ffeafb0215bb69dbcb4fdb18e47" translate="yes" xml:space="preserve">
          <source>If the character is compatibility decomposable (including Hangul Syllables), it returns the (full) compatibility decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65221cae28ebb56c2b7e384de16ed70d718d62d1" translate="yes" xml:space="preserve">
          <source>If the child falls out of scope before &lt;code&gt;finalize&lt;/code&gt; is called, a failure diagnostic will be issued and the child is considered to have failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc80dbef3fa7a98447bcda86b6b6a922737dbbf" translate="yes" xml:space="preserve">
          <source>If the child process dies for any reason, the next write to CHLD_IN is likely to generate a SIGPIPE in the parent, which is fatal by default. So you may wish to handle this signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd5594c7134763067cde3b54f3bfaeaa68b552a" translate="yes" xml:space="preserve">
          <source>If the child process follows the convention of C programs compiled with the _POSIX_EXIT macro set, the status value will contain the actual value of 0 to 255 returned by that program on a normal exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2359effbd1215640880aada1292b5fa0877c9a" translate="yes" xml:space="preserve">
          <source>If the class shown in &lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt; were placed in the MyClass.pm module, then the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9ec72ad3a19d5c4b84af5eba887a50b7eef9b5" translate="yes" xml:space="preserve">
          <source>If the client asks for &quot;fr&quot;, that will look up successfully in %greetings, to the value &quot;Bonjour&quot;. And if the client asks for &quot;i-mingo&quot;, that will look up successfully in %greetings, to the value &quot;Hau'&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e012fb4a0052bc107066983e24cd424b0582af0" translate="yes" xml:space="preserve">
          <source>If the code point is unassigned, this returns the block it would belong to if it were assigned. (If the Unicode version being used is so early as to not have blocks, all code points are considered to be in &lt;code&gt;No_Block&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced2db748e9e7079888c75fca8f7175caebcea61" translate="yes" xml:space="preserve">
          <source>If the code to be executed doesn't vary, you may use the eval-BLOCK form to trap run-time errors without incurring the penalty of recompiling each time. The error, if any, is still returned in &lt;code&gt;$@&lt;/code&gt; . Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd498c74c7384947431c9fbfc4c96437164ae53" translate="yes" xml:space="preserve">
          <source>If the code to execute had been passed in as a string, &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; , there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller's scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5dcda0eb63d695c2273d9f58a5b27fc7e844c60" translate="yes" xml:space="preserve">
          <source>If the configurations variable &lt;code&gt;build_dir_reuse&lt;/code&gt; is set to a true value, then CPAN.pm reads the collected YAML files. If the stored signature matches the currently running perl, the stored state is loaded into memory such that persistence between sessions is effectively established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91d44bc473043f072a494275450d9c876250d17" translate="yes" xml:space="preserve">
          <source>If the connection is via a firewall then the &lt;code&gt;authorize&lt;/code&gt; method will be called with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880ff18ec98ddcf514d383275dae13c355bbcadf" translate="yes" xml:space="preserve">
          <source>If the construct is a here-doc, the ending delimiter is a line that has a terminating string as the content. Therefore &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; is terminated by &lt;code&gt;EOF&lt;/code&gt; immediately followed by &lt;code&gt;&quot;\n&quot;&lt;/code&gt; and starting from the first column of the terminating line. When searching for the terminating line of a here-doc, nothing is skipped. In other words, lines after the here-doc syntax are compared with the terminating string line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f5405c8fb7cef756ea27523f26d6d391697258" translate="yes" xml:space="preserve">
          <source>If the constructor fails undef will be returned and an error message will be in $@</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03d6a855f28c1f0fcb373d36da3e2b752b1b618" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;Peer&lt;/code&gt; specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d6c514d80580b526f459658680b5bcb3039600" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;PeerAddr&lt;/code&gt; specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1d4da7e238174b01de906293d93c6822b7ffed" translate="yes" xml:space="preserve">
          <source>If the count doesn't impress your friends, then the code might. :-)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2812a31f32729d7d8acbab2252b618f1597089e" translate="yes" xml:space="preserve">
          <source>If the current directory is not writable, file is created using modified &lt;code&gt;tmpnam&lt;/code&gt; , so there may be a race condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494e23aba89eecf5e12f5237686e230eddf4cf1f" translate="yes" xml:space="preserve">
          <source>If the current tests are considered &quot;TODO&quot; it will return the reason, if any. This reason can come from a &lt;code&gt;$TODO&lt;/code&gt; variable or the last call to &lt;code&gt;todo_start()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc2b173d8d4940a748b9c83e49e0862799d41a0" translate="yes" xml:space="preserve">
          <source>If the debugging output of &lt;code&gt;-D&lt;/code&gt; doesn't help you, it's time to step through perl's execution with a source-level debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9b61b179e59a5faa76c718b44a80bf30b29231" translate="yes" xml:space="preserve">
          <source>If the deferred-write buffer isn't yet full, but the total size of the buffer and the read cache would exceed the &lt;code&gt;memory&lt;/code&gt; limit, the oldest records will be expired from the read cache until the total size is under the limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d787ba93d433e8611c0010f5b5125e21c2fae5b" translate="yes" xml:space="preserve">
          <source>If the delimiter chosen is a single quote, no interpolation is done on either the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd691ad27529116a3a5593dc1f80d4b01d408999" translate="yes" xml:space="preserve">
          <source>If the destination (second argument) already exists and is a directory, and the source (first argument) is not a filehandle, then the source file will be copied into the directory specified by the destination, using the same base name as the source file. It's a failure to have a filehandle as the source when the destination is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf967ef029273cc2d212ca164cc9a8a6a20b4430" translate="yes" xml:space="preserve">
          <source>If the element type does not start with a &lt;code&gt;'*'&lt;/code&gt; , the accessor returns the element value (after assignment). If the element type starts with a &lt;code&gt;'*'&lt;/code&gt; , a reference to the element itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e23930732591461e14ec21d8b1f90dcd530ad74" translate="yes" xml:space="preserve">
          <source>If the element type is &lt;code&gt;'$'&lt;/code&gt; , the value of the element (after assignment) is returned. If the element type is &lt;code&gt;'*$'&lt;/code&gt; , a reference to the element is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bac597df37b35f3a7dd05dd8ec187e68ab2f23b" translate="yes" xml:space="preserve">
          <source>If the empty regex &lt;code&gt;//&lt;/code&gt; is used, the string is split into individual characters. If the regex has groupings, then the list produced contains the matched substrings from the groupings as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e04e07bd20c824f00e23be10a97b35d7d8bdaf8" translate="yes" xml:space="preserve">
          <source>If the empty regexp &lt;code&gt;//&lt;/code&gt; is used, the regexp always matches and the string is split into individual characters. If the regexp has groupings, then the resulting list contains the matched substrings from the groupings as well. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9160efcd7b61ecdb5eab89bb5f1048b8690bd897" translate="yes" xml:space="preserve">
          <source>If the entereval op is permitted then the code can use eval &quot;...&quot; to 'hide' code which might use denied ops. This is not a major problem since when the code tries to execute the eval it will fail because the opmask is still in effect. However this technique would allow clever, and possibly harmful, code to 'probe' the boundaries of what is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dd91d8fc44e261add22f788040f3b0d9653b9a" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;PERL_TEST_HARNESS_DUMP_TAP&lt;/code&gt; is defined it should name a directory into which a copy of the raw TAP for each test will be written. TAP is written to files named for each test. Subdirectories will be created as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e66c1c6198ecf06cc2142e9e5e1dd957bf8c18d" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is a script with the &quot;magic&quot; &lt;code&gt;#!&lt;/code&gt; line or &lt;code&gt;extproc&lt;/code&gt; line which specifies shell;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a754fbd5a5705920e61152dd8c6911b9ca9d965" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is a script without &quot;magic&quot; line, and &lt;code&gt;$ENV{EXECSHELL}&lt;/code&gt; is set to shell;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6143c4a0521be912f40be9869aedf7b75cf3c5aa" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is not found (is not this remark obsolete?);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b9d8b532d25e89b151dc2833716077761d9468" translate="yes" xml:space="preserve">
          <source>If the exit status used is less than 2, then output is printed on &lt;code&gt;STDOUT&lt;/code&gt; . Otherwise output is printed on &lt;code&gt;STDERR&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f5e0e5ea6330c7048648eb2edf1ad4ccc05a55" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;), a fifth TRUE argument is passed to subroutines handling &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; . This indicates that the caller is expecting numeric behaviour. The fourth argument will be &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, as that position (&lt;code&gt;$_[3]&lt;/code&gt; ) is reserved for use by &lt;a href=&quot;#nomethod&quot;&gt;nomethod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d70ab84f3a316c00496bd0dced7b93acc9fa6af" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'bitwise'&lt;/code&gt; , then this operator always treats its operand as numbers. This feature produces a warning unless you also use &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
'experimental::bitwise'&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429f3423b67c7b1e2fda19e3e61bde6079c26d75" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'bitwise'&lt;/code&gt; , then unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; always treats its argument as a number, and an alternate form of the operator, &lt;code&gt;&quot;~.&quot;&lt;/code&gt; , always treats its argument as a string. So &lt;code&gt;~0&lt;/code&gt; and &lt;code&gt;~&quot;0&quot;&lt;/code&gt; will both give 2**32-1 on 32-bit platforms, whereas &lt;code&gt;~.0&lt;/code&gt; and &lt;code&gt;~.&quot;0&quot;&lt;/code&gt; will both yield &lt;code&gt;&quot;\xff&quot;&lt;/code&gt; . This feature produces a warning unless you use &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::bitwise'&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c964489535901a948a3b23073f9b9bb3c0a3e6" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a label name, its scope will be resolved dynamically. This allows for computed &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c3c70b730f0e2950f8179af548175b3c6ef32a" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a label name, its scope will be resolved dynamically. This allows for computed &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5f344d7e209018f81b3bb395e41710ea76000e" translate="yes" xml:space="preserve">
          <source>If the extension doesn't contain a &lt;code&gt;*&lt;/code&gt; , then it is appended to the end of the current filename as a suffix. If the extension does contain one or more &lt;code&gt;*&lt;/code&gt; characters, then each &lt;code&gt;*&lt;/code&gt; is replaced with the current filename. In Perl terms, you could think of this as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912122ed04813ef6afa69c21de9ff5d7b9578a1b" translate="yes" xml:space="preserve">
          <source>If the extension links to a library that it builds, set this to the name of the library (see SDBM_File)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a643174ddd0d9876c30f4ff9ae6dc788ca282c" translate="yes" xml:space="preserve">
          <source>If the extension might need extra libraries, they should be included here. The extension Makefile.PL will take care of checking whether the libraries actually exist and how they should be loaded. The extra libraries should be specified in the form -lm -lposix, etc, just as on the cc command line. By default, the Makefile.PL will search through the library path determined by Configure. That path can be augmented by including arguments of the form &lt;b&gt;-L/another/library/path&lt;/b&gt; in the extra-libraries argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effa256cfcef0cdd6582a1503da6bdf1fb1d1f9e" translate="yes" xml:space="preserve">
          <source>If the external</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e204c469081d0ce7742a3d71bcaeedaf9240cda" translate="yes" xml:space="preserve">
          <source>If the extractor fails to match (in the case of a regex extractor), or returns an empty list or an undefined value (in the case of a subroutine extractor), it is assumed to have failed to extract. If none of the extractor subroutines succeeds, then one character is extracted from the start of the text and the extraction subroutines reapplied. Characters which are thus removed are accumulated and eventually become the next field (unless the fourth argument is true, in which case they are discarded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d2c98a680d0b983c00126ba7fbf7037583b89d" translate="yes" xml:space="preserve">
          <source>If the extractor is a hash reference, it must contain exactly one element. The value of that element is one of the above extractor types (subroutine reference, regular expression, or string). The key of that element is the name of a class into which the successful return value of the extractor will be blessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2187e610c6c9ce986c9ab2bc434fe210c96d6c7" translate="yes" xml:space="preserve">
          <source>If the extractor is a precompiled regular expression or a string, it is matched against the text in a scalar context with a leading '\G' and the gc modifiers enabled. The extracted value is either $1 if that variable is defined after the match, or else the complete match (i.e. $&amp;amp;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efec72894ea829331e728164da92723ccc10f46" translate="yes" xml:space="preserve">
          <source>If the extractor is a subroutine it is called in a list context and is expected to return a list of a single element, namely the extracted text. It may optionally also return two further arguments: a string representing the text left after extraction (like $' for a pattern match), and a string representing any prefix skipped before the extraction (like $` in a pattern match). Note that this is designed to facilitate the use of other Text::Balanced subroutines with &lt;code&gt;extract_multiple&lt;/code&gt; . Note too that the value returned by an extractor subroutine need not bear any relationship to the corresponding substring of the original text (see examples below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4293d2972da49b7deee5cbac8e57e93be999a13" translate="yes" xml:space="preserve">
          <source>If the file is a symlink, the file it's pointing to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1260f14708b5c4f0e969b3d9b19ac87d75cb1573" translate="yes" xml:space="preserve">
          <source>If the file is pulled in by &lt;code&gt;perl_parse()&lt;/code&gt; , compiled into a newly constructed interpreter, and subsequently cleaned out with &lt;code&gt;perl_destruct()&lt;/code&gt; afterwards, you're shielded from most namespace troubles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972b095c8cf0635710238db90318d20a5a12c4b1" translate="yes" xml:space="preserve">
          <source>If the file named by FILENAME does not exist and the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; call creates it (typically because MODE includes the &lt;code&gt;O_CREAT&lt;/code&gt; flag), then the value of PERMS specifies the permissions of the newly created file. If you omit the PERMS argument to &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, Perl uses the octal value &lt;code&gt;0666&lt;/code&gt; . These permission values need to be in octal, and are modified by your process's current &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa66e9311c9629d0b8c20e950c88829b4d37f7e" translate="yes" xml:space="preserve">
          <source>If the file named by FILENAME does not exist and the &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; call creates it (typically because MODE includes the &lt;code&gt;O_CREAT&lt;/code&gt; flag), then the value of PERMS specifies the permissions of the newly created file. If you omit the PERMS argument to &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, Perl uses the octal value &lt;code&gt;0666&lt;/code&gt; . These permission values need to be in octal, and are modified by your process's current &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9e946eeefcb8ca3ed866d0a22b192157304573" translate="yes" xml:space="preserve">
          <source>If the file to be opened contains binary data instead of text characters, then the &lt;code&gt;MODE&lt;/code&gt; argument to &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is a little different. Instead of specifying the encoding, you tell Perl that your data are in raw bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7727f14d3896e4199132a911f1277a6913be80" translate="yes" xml:space="preserve">
          <source>If the file was loaded via a hook (e.g. a subroutine reference, see &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; for a description of these hooks), this hook is by default inserted into &lt;code&gt;%INC&lt;/code&gt; in place of a filename. Note, however, that the hook may have set the &lt;code&gt;%INC&lt;/code&gt; entry by itself to provide some more specific info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e74503c754d78c3ba0f9051478f8b0d722c72c1" translate="yes" xml:space="preserve">
          <source>If the filehandle came from a piped open, &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; returns false if one of the other syscalls involved fails or if its program exits with non-zero status. If the only problem was that the program exited non-zero, &lt;code&gt;$!&lt;/code&gt; will be set to &lt;code&gt;0&lt;/code&gt; . Closing a pipe also waits for the process executing on the pipe to exit--in case you wish to look at the output of the pipe afterwards--and implicitly puts the exit status value of that command into &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a275dda5ca271e5742fe50c27b80a1dea7fadc2a" translate="yes" xml:space="preserve">
          <source>If the filehandle came from a piped open, &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; returns false if one of the other syscalls involved fails or if its program exits with non-zero status. If the only problem was that the program exited non-zero, &lt;code&gt;$!&lt;/code&gt; will be set to &lt;code&gt;0&lt;/code&gt; . Closing a pipe also waits for the process executing on the pipe to exit--in case you wish to look at the output of the pipe afterwards--and implicitly puts the exit status value of that command into &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc5e1415bd14e8d1ec6ad1e512653e073ea2d16" translate="yes" xml:space="preserve">
          <source>If the filename supplied contains directory separators (and so is an absolute or relative pathname), and if that file is not found, platforms that append file extensions will do so and try to look for the file with those extensions added, one by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b638dc989817125971a607e8fa00529b2b307c1" translate="yes" xml:space="preserve">
          <source>If the final value specified is not in the sequence that the magical increment would produce, the sequence goes until the next value would be longer than the final value specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f8e1e30b780f6553cc08550f9370ae0ed9b97a" translate="yes" xml:space="preserve">
          <source>If the first argument is a reference to an array, the pseudo-hash will be created with keys from that array. If a second argument is supplied, it must also be a reference to an array whose elements will be used as the values. If the second array contains less elements than the first, the trailing elements of the pseudo-hash will not be initialized. This makes it particularly useful for creating a pseudo-hash from subroutine arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f235f80bacbd6f2376896bcd2071e6b6ed89634" translate="yes" xml:space="preserve">
          <source>If the first argument is an empty string &quot;&quot; or is a volume name, i.e. matches the pattern /^[^:]+:/, the resulting path is &lt;b&gt;absolute&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89aa8ef2f6a6df7b419aa16ffe18ced8031ac672" translate="yes" xml:space="preserve">
          <source>If the first character after the &lt;b&gt;-M&lt;/b&gt; or &lt;b&gt;-m&lt;/b&gt; is a dash (&lt;b&gt;-&lt;/b&gt;) then the 'use' is replaced with 'no'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781d0d29a2affd4018c32ec572f1b116a7081027" translate="yes" xml:space="preserve">
          <source>If the first chars of a Perl script are &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; , this line is treated as &lt;code&gt;#!&lt;/code&gt; -line, thus all the switches on this line are processed (twice if script was started via cmd.exe). See &lt;a href=&quot;perlrun#DESCRIPTION&quot;&gt;DESCRIPTION in perlrun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46518f452342a5c022fec8e53026c8608f2e02a" translate="yes" xml:space="preserve">
          <source>If the first digit following the backslash is a 0, it's an octal escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5675bafb3dc48482ba4a4f320234c0b4d704c9a0" translate="yes" xml:space="preserve">
          <source>If the first element of the return value (&lt;code&gt;success&lt;/code&gt; ) was 0, then some error occurred. This second element is the error message the command you requested exited with, if available. This is generally a pretty printed value of &lt;code&gt;$?&lt;/code&gt; or &lt;code&gt;$@&lt;/code&gt; . See &lt;code&gt;perldoc perlvar&lt;/code&gt; for details on what they can contain. If the error was a timeout, the &lt;code&gt;error message&lt;/code&gt; will be prefixed with the string &lt;code&gt;IPC::Cmd::TimeOut&lt;/code&gt; , the timeout class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a57fb9b1830952d24356efef9c0744590e7e139" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group is &quot;*&quot;, it's taken as shorthand for the so commonly called &quot;quant&quot; method. Similarly, if the first item in a bracket group is &quot;#&quot;, it's taken to be shorthand for &quot;numf&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1953104edb77654c33631a60ba8219310b08e426" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group is the empty-string, or &quot;_*&quot; or &quot;_</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6e94a3fad4e68b50306c3295f243e0a73b5811" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group looks like a method name, then that group is interpreted like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf14e3215a8aeb1aa87eb4f44052cead882fc98" translate="yes" xml:space="preserve">
          <source>If the first operand has a &quot;nomethod&quot; method then use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dadbb13895f7c7975effc9602b93ea5e861379" translate="yes" xml:space="preserve">
          <source>If the first operand has declared a subroutine to overload the operator then use that implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63722d831a3c09d59c00e59b75ba5f74f6230f38" translate="yes" xml:space="preserve">
          <source>If the flag is present in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; will delete whitespace from the start of the subject string before it's operated on. What is considered whitespace depends on if the subject is a UTF-8 string and if the &lt;code&gt;RXf_PMf_LOCALE&lt;/code&gt; flag is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc08ae29def75bcb01866771948171d3f78fd50" translate="yes" xml:space="preserve">
          <source>If the function is used across several files, but intended only for Perl's internal use (and this should be the common case), do not export it to the public API. See the discussion about</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd096b932efa03a9f98d53e47997c47f5475a48" translate="yes" xml:space="preserve">
          <source>If the function is used only inside one source code file, make it static. See the discussion about</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d809f75a0fec341370456ffe5542097322b23570" translate="yes" xml:space="preserve">
          <source>If the function wants to handle the keyword, it first must parse anything following the keyword that is part of the syntax introduced by the keyword. See &lt;a href=&quot;#Lexer-interface&quot;&gt;Lexer interface&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4257aa9162577acd082afc2803cd5eba4d35b6a8" translate="yes" xml:space="preserve">
          <source>If the function's name is &lt;b&gt;DESTROY&lt;/b&gt; then the C++ &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; function will be called and &lt;code&gt;THIS&lt;/code&gt; will be given as its parameter. The generated C++ code for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9d5afefb1f72725e3effbcde85fc42f858949b" translate="yes" xml:space="preserve">
          <source>If the function's name is &lt;b&gt;new&lt;/b&gt; then the C++ &lt;code&gt;new&lt;/code&gt; function will be called to create a dynamic C++ object. The XSUB will expect the class name, which will be kept in a variable called &lt;code&gt;CLASS&lt;/code&gt; , to be given as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf92d6194fe17b6faa691c083e3aa66b73fd41bc" translate="yes" xml:space="preserve">
          <source>If the given file is a Storable image return a hash describing it. If the file is readable, but not a Storable image return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If the file does not exist or is unreadable then croak.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5f5dfa299a465aa9a0110ad7326e956c843743" translate="yes" xml:space="preserve">
          <source>If the given string is in FCD (&quot;Fast C or D&quot; form; cf. UTN #5), it returns the string without modification; otherwise it returns an FCD string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d092a8012a2b0bc17122d5b49e40f14ceca06d" translate="yes" xml:space="preserve">
          <source>If the global variable $KEEP_ALL is true, the file or directory will not be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1c6dee6d24dc894200423540415887a91afb83" translate="yes" xml:space="preserve">
          <source>If the groupings in a regex are nested, &lt;code&gt;$1&lt;/code&gt; gets the group with the leftmost opening parenthesis, &lt;code&gt;$2&lt;/code&gt; the next opening parenthesis, etc. For example, here is a complex regex and the matching variables indicated below it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b41f5fdfcf62fc4686ef889212a3544a4d2078" translate="yes" xml:space="preserve">
          <source>If the groupings in a regexp are nested, &lt;code&gt;$1&lt;/code&gt; gets the group with the leftmost opening parenthesis, &lt;code&gt;$2&lt;/code&gt; the next opening parenthesis, etc. Here is a regexp with nested groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7672fac594e6a7dd98d2bae0c51d24e5065e39e4" translate="yes" xml:space="preserve">
          <source>If the gzip FEXTRA header field is present it must conform to the sub-field structure as defined in RFC 1952.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948511a86fa3a757ed333c1057a05dc236b1ed7b" translate="yes" xml:space="preserve">
          <source>If the gzip header contains a comment field (FCOMMENT) it consists solely of ISO 8859-1 characters plus line-feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309f2d92f5e86ee4880748347a713d797525d1c3" translate="yes" xml:space="preserve">
          <source>If the gzip header contains a name field (FNAME) it consists solely of ISO 8859-1 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76da98a8a76e4650e3f026f7c68c78b99cc6936b" translate="yes" xml:space="preserve">
          <source>If the hash is very large, you might not want to create a long list of keys. To save some memory, you can grab one key-value pair at a time using &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt;, which returns a pair you haven't seen yet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d353d642decb66a3abbcefcf79e58c99b0ba1e9" translate="yes" xml:space="preserve">
          <source>If the hook is an array reference, its first element must be a subroutine reference. This subroutine is called as above, but the first parameter is the array reference. This lets you indirectly pass arguments to the subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089781c4ed94b59afd45ade73f63dd3ae0adcf17" translate="yes" xml:space="preserve">
          <source>If the hook is an object, it must provide an INC method that will be called as above, the first parameter being the object itself. (Note that you must fully qualify the sub's name, as unqualified &lt;code&gt;INC&lt;/code&gt; is always forced into package &lt;code&gt;main&lt;/code&gt; .) Here is a typical code layout:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5ac6730609a596bd949c3bb5ec01a23d4ffce0" translate="yes" xml:space="preserve">
          <source>If the initial value specified isn't part of a magical increment sequence (that is, a non-empty string matching &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; ), only the initial value will be returned. So the following will only return an alpha:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1ecd771a78ded6bdca0c84c4a8624d300c4df7" translate="yes" xml:space="preserve">
          <source>If the initialization begins with &lt;code&gt;=&lt;/code&gt; , then it is output in the declaration for the input variable, replacing the initialization supplied by the typemap. If the initialization begins with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; , then it is performed after all of the input variables have been declared. In the &lt;code&gt;;&lt;/code&gt; case the initialization normally supplied by the typemap is not performed. For the &lt;code&gt;+&lt;/code&gt; case, the declaration for the variable will include the initialization from the typemap. A global variable, &lt;code&gt;%v&lt;/code&gt; , is available for the truly rare case where information from one initialization is needed in another initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a641a3d375c74024ce1445924cf66af681f41ebd" translate="yes" xml:space="preserve">
          <source>If the input code point's name has more than one synonym, they are returned joined into a single comma-separated string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e071ed158601437a7fd928632778e71dc9740aa" translate="yes" xml:space="preserve">
          <source>If the input file/buffer contains multiple compressed data streams, this option will uncompress the whole lot as a single data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c582e01c3ed1134227361002db4abc5ef87f0a6" translate="yes" xml:space="preserve">
          <source>If the input is a buffer, &lt;code&gt;trailingData&lt;/code&gt; will return everything from the end of the compressed data stream to the end of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646ddea5cc7fe42fca7b5f673b48b7968e951a94" translate="yes" xml:space="preserve">
          <source>If the input is a filehandle, &lt;code&gt;trailingData&lt;/code&gt; will return the data that is left in the filehandle input buffer once the end of the compressed data stream has been reached. You can then use the filehandle to read the rest of the input file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ffb2242fbe49d90e0f353510f536b7c97b26ff" translate="yes" xml:space="preserve">
          <source>If the input is a gzip (RFC 1952) data stream, the following will be checked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb62e9bad07668939b33bd6b3f35cbd2a29221c" translate="yes" xml:space="preserve">
          <source>If the input is an RFC 1950 data stream, the following will be checked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681895bf526e306295ee60c6f4d01df1e2e0e233" translate="yes" xml:space="preserve">
          <source>If the input is being interpreted as UTF-8 and a UTF-8 encoding error is encountered, an exception is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3ba700c41877fa613cc375e9afc8a49773890d" translate="yes" xml:space="preserve">
          <source>If the input is unknown &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned in scalar context; an empty-list in list context. If the input is known, the number of elements in the list is returned if called in scalar context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45a90c97d69c88324a18a4a975329202a110a46" translate="yes" xml:space="preserve">
          <source>If the input string is longer than needed, extra characters are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daec947152f5e00d64f719376318858935b663a6" translate="yes" xml:space="preserve">
          <source>If the input string is longer than needed, remaining characters are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a191161ccbd661c7961516bab02ad1f7aadb16a" translate="yes" xml:space="preserve">
          <source>If the interdependence of your &lt;code&gt;BOOT:&lt;/code&gt; section and Perl code is more complicated than this (e.g., the &lt;code&gt;BOOT:&lt;/code&gt; section makes calls to Perl functions which make calls to XSUBs with prototypes), get rid of the &lt;code&gt;BOOT:&lt;/code&gt; section altogether. Replace it with a function &lt;code&gt;onBOOT()&lt;/code&gt; , and call it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4a966e522ce068cba366c74c39330ba735c481" translate="yes" xml:space="preserve">
          <source>If the key does not exist the method returns 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74ad7c032adb69e8741c3ce089dbedf2af387c8" translate="yes" xml:space="preserve">
          <source>If the language handle has a &quot;fail&quot; attribute whose value is a coderef, then $lh-&amp;gt;maketext(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b0a2c233bae54a5a0a22d4c6904ecf217ffcc9" translate="yes" xml:space="preserve">
          <source>If the language handle has no &quot;fail&quot; attribute, maketext will simply throw an exception (i.e., it calls &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, mentioning the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f576169bf47c87f2f0af12c0e2e1a4146c280c" translate="yes" xml:space="preserve">
          <source>If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied. Note that the &quot;input line number&quot; (also known as &quot;chunk&quot;) is subject to whatever notion of &quot;line&quot; happens to be currently in effect, and is also available as the special variable &lt;code&gt;$.&lt;/code&gt; . See &lt;a href=&quot;../perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt; and &lt;a href=&quot;../perlvar#%24.&quot;&gt;$. in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddf8780e7e7d9b3df1dc954871c1e6b0c532c31" translate="yes" xml:space="preserve">
          <source>If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied. Note that the &quot;input line number&quot; (also known as &quot;chunk&quot;) is subject to whatever notion of &quot;line&quot; happens to be currently in effect, and is also available as the special variable &lt;code&gt;$.&lt;/code&gt; . See &lt;a href=&quot;perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt; and &lt;a href=&quot;perlvar#%24.&quot;&gt;$. in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90835049bf9dceb2b3128f6e0da3805c87bc497" translate="yes" xml:space="preserve">
          <source>If the left hand side is neither a package name nor an object, then the method call will cause an error, but see the section on &lt;a href=&quot;#Method-Call-Variations&quot;&gt;Method Call Variations&lt;/a&gt; for more nuances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bacecd2332508665ec81733fbdffa749ac5bfa" translate="yes" xml:space="preserve">
          <source>If the length of the input string is not even, it behaves as if padded by a null character at the end. Similarly, &quot;extra&quot; nybbles are ignored during unpacking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b7864a27a0577ffff54b7d555aea0617e9d505" translate="yes" xml:space="preserve">
          <source>If the length of the input string is not evenly divisible by 8, the remainder is packed as if the input string were padded by null characters at the end. Similarly during unpacking, &quot;extra&quot; bits are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e67d3ea522ed96fe7a9c8431714f7f3d0ba5c5" translate="yes" xml:space="preserve">
          <source>If the library happens to be in a location not in &lt;code&gt;$Config{libpth}&lt;/code&gt; , you need:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96118a855a2f1b2515701521249ef16334052e1f" translate="yes" xml:space="preserve">
          <source>If the line number is &lt;code&gt;.&lt;/code&gt;, sets a breakpoint on the current line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93c03970a56584f9fb61994432bc17cb7db5f12" translate="yes" xml:space="preserve">
          <source>If the list moderators tell you that you are not being civil, carefully consider how your words have appeared before responding in any way. You may protest, but repeated protest in the face of a repeatedly reaffirmed decision is not acceptable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a9f58b026642b9c9e8e7bb8deab3007d5236f6" translate="yes" xml:space="preserve">
          <source>If the locale from the user's environment is desired, there should be no need for XS code to set the locale except for &lt;code&gt;LC_NUMERIC&lt;/code&gt; , as perl has already set it up. XS code should avoid changing the locale, as it can adversely affect other, unrelated, code and may not be thread safe. However, some alien libraries that may be called do set it, such as &lt;code&gt;Gtk&lt;/code&gt; . This can cause problems for the perl core and other modules. Starting in v5.20.1, calling the function &lt;a href=&quot;perlapi#sync_locale&quot;&gt;sync_locale()&lt;/a&gt; from XS should be sufficient to avoid most of these problems. Prior to this, you need a pure Perl statement that does this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823e97e3e713d61f96695c0b7d66500ba0535b81" translate="yes" xml:space="preserve">
          <source>If the make process encounters trouble with either compilation or linking then try setting the _C89_CCMODE to 1. Assuming sh is your login shell then run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae0fed8c834da6c72af01b4cce727e6b5ec751e" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;Module&lt;/code&gt; is already loaded, then the declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3cd9a44d834ecaba373518cdced67ef6882e1c" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;Module&lt;/code&gt; is not loaded yet, then the above declaration declares functions func1() and func2() in the current package. When these functions are called, they load the package &lt;code&gt;Module&lt;/code&gt; if needed, and substitute themselves with the correct definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa83e5ba98e2e00acddd7117050d321e4e9d54d9" translate="yes" xml:space="preserve">
          <source>If the module is already loaded, &lt;code&gt;mark_as_loaded&lt;/code&gt; will carp about this and tell you from where the &lt;code&gt;PACKAGE&lt;/code&gt; has been loaded already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cec740a866f3242f2245723f611d8e6a35a17e" translate="yes" xml:space="preserve">
          <source>If the module is already unloaded, &lt;code&gt;mark_as_unloaded&lt;/code&gt; will carp about this and tell you the &lt;code&gt;PACKAGE&lt;/code&gt; has been unloaded already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dd2ee6ad71be855cc8cea6dc45014e0de598b9" translate="yes" xml:space="preserve">
          <source>If the module is needed inside the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab3a0f11307492451a39d88e9be980974dcb4d2" translate="yes" xml:space="preserve">
          <source>If the module will only be used inside a thread, you can try loading the module from inside the thread entry point function using &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; if needed):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3b3934908dc77b79dcbb0b789e5b838d36463c" translate="yes" xml:space="preserve">
          <source>If the name is given in UTF-8, set this to &lt;code&gt;HVhek_UTF8&lt;/code&gt; . The value is passed direct as the parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ddfa3306f944720376a989f9d5fd87c400eb47" translate="yes" xml:space="preserve">
          <source>If the name is omitted, format &quot;STDOUT&quot; is defined. A single &quot;.&quot; in column 1 is used to terminate a format. FORMLIST consists of a sequence of lines, each of which may be one of three types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0def4cf3757d0553a2341afef733c2c0849f1052" translate="yes" xml:space="preserve">
          <source>If the name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned (or an empty list in list context). Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the input, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. Nor are they included in the output as possible synonyms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79bb3cadb8f975e939ef18071a526a4b5d3363e" translate="yes" xml:space="preserve">
          <source>If the named parameter &lt;code&gt;config_override&lt;/code&gt; is specified, it should be a reference to a hash which contains all information usually found in &lt;code&gt;%Config::Config&lt;/code&gt; . For example, you can obtain the configuration information for a separate perl installation and pass that in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3ef5746e8cd5bab310439aa50dba89f545a584" translate="yes" xml:space="preserve">
          <source>If the named parameter &lt;code&gt;skip_cwd&lt;/code&gt; is true, the current directory &lt;code&gt;.&lt;/code&gt; will be stripped from &lt;code&gt;@INC&lt;/code&gt; before searching for .packlists. This keeps ExtUtils::Installed from finding modules installed in other perls that happen to be located below the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6facbdb87684a56df7a20a0d54e6b8073b8eb9" translate="yes" xml:space="preserve">
          <source>If the new version of the C library is ABI-compatible (that's Application Binary Interface compatible) with the version you're upgrading from, and if the shared library version didn't change, no re-compilation should be necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6451aaf2bf86188eece8b63b5bab6c7257462f" translate="yes" xml:space="preserve">
          <source>If the next character is in (or extends into) the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7862ebb65f1805f38240d9ec3614885b02e6ad" translate="yes" xml:space="preserve">
          <source>If the number following the backslash is N (in decimal), and Perl already has seen N capture groups, Perl considers this a backreference. Otherwise, it considers it an octal escape. If N has more than three digits, Perl takes only the first three for the octal escape; the rest are matched as is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad0df49da49393094ec039045da70fce50b5429" translate="yes" xml:space="preserve">
          <source>If the number of data bytes ($bytes) is given, that many data bytes are included in the ping packet sent to the remote host. The number of data bytes is ignored if the protocol is &quot;tcp&quot;. The minimum (and default) number of data bytes is 1 if the protocol is &quot;udp&quot; and 0 otherwise. The maximum number of data bytes that can be specified is 1024.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf726231b3d599cdbe46b108046dbf7815381c4c" translate="yes" xml:space="preserve">
          <source>If the object has been passed to a child process during a fork, the file will be deleted when the object goes out of scope in the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e52d92c6b313ed3349d0401be82f80d273536a" translate="yes" xml:space="preserve">
          <source>If the only casing for a code point is locale-dependent, then the returned hash will not have any of the base keys, like &lt;code&gt;code&lt;/code&gt; , &lt;code&gt;upper&lt;/code&gt; , etc., but will contain only locale keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addcad10a864d1cffc4846608d394fea1feac09a" translate="yes" xml:space="preserve">
          <source>If the operands to a binary bitwise op are strings of different sizes, &lt;b&gt;|&lt;/b&gt; and &lt;b&gt;^&lt;/b&gt; ops act as though the shorter operand had additional zero bits on the right, while the &lt;b&gt;&amp;amp;&lt;/b&gt; op acts as though the longer operand were truncated to the length of the shorter. The granularity for such extension or truncation is one or more bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7870bd3c024159f240305b7047279e21ad1fe56" translate="yes" xml:space="preserve">
          <source>If the operating system supports it (for example BSD derived systems), the filehandle will be opened with O_EXLOCK (open with exclusive file lock). This can sometimes cause problems if the intention is to pass the filename to another system that expects to take an exclusive lock itself (such as DBD::SQLite) whilst ensuring that the tempfile is not reused. In this situation the &quot;EXLOCK&quot; option can be passed to tempfile. By default EXLOCK will be true (this retains compatibility with earlier releases).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19b7bb4d69a3c985ce8931960025916d3561c3a" translate="yes" xml:space="preserve">
          <source>If the operation being timed out is system() or qx(), this technique is liable to generate zombies. If this matters to you, you'll need to do your own fork() and exec(), and kill the errant child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f4a71ea34fe9d7ddbd210db5290a2dfa223838" translate="yes" xml:space="preserve">
          <source>If the operation shown is &quot;ToFold&quot;, it means that case-insensitive matching in a regular expression was done on the code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a982ec5add551174c87d54c0c75cad924249147a" translate="yes" xml:space="preserve">
          <source>If the option destination is a reference to a hash, the option will take, as value, strings of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8a370e734c2b7f25ad3475fabaef52fd095ddb" translate="yes" xml:space="preserve">
          <source>If the option is provided, and &lt;code&gt;PERL_PERTURB_KEYS&lt;/code&gt; is NOT set, then a value of '0' implies &lt;code&gt;PERL_PERTURB_KEYS=0&lt;/code&gt; and any other value implies &lt;code&gt;PERL_PERTURB_KEYS=2&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb774833de734f7b65efa56e3c7c5f53234542f8" translate="yes" xml:space="preserve">
          <source>If the option is set to false, the output buffer in the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method will be truncated before uncompressed data is written to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e5a140437039036cbeabf084c8f96c887a93f7" translate="yes" xml:space="preserve">
          <source>If the option is set to true, uncompressed data will be appended to the output buffer by the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22c2720bbc793b56d2bdb2031cd852762e79aba" translate="yes" xml:space="preserve">
          <source>If the option is set to true, uncompressed data will be appended to the output buffer in the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943c28148863687139f9e45e03407da89d7e13fa" translate="yes" xml:space="preserve">
          <source>If the option value is required, Getopt::Long will take the command line argument that follows the option and assign this to the option variable. If, however, the option value is specified as optional, this will only be done if that value does not look like a valid command line option itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b25fc0c82dd37f9c4b9d7996e6e001cd8c1c22e" translate="yes" xml:space="preserve">
          <source>If the order of &lt;code&gt;sv_setiv&lt;/code&gt; and &lt;code&gt;sv_setpv&lt;/code&gt; had been reversed, then the macro &lt;code&gt;SvPOK_on&lt;/code&gt; would need to be called instead of &lt;code&gt;SvIOK_on&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0f391156a0e1896106ec41b93d3c42cc8fd48b" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is reused after appending &lt;code&gt;&quot;\t...propagated&quot;&lt;/code&gt; . This is useful for propagating exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d81dad12165191ac2a4d2f3e667fda9ababd8e" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is used after appending &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; to &lt;code&gt;$@&lt;/code&gt; . This is useful for staying almost, but not entirely similar to &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e420bc5858eb45a1dddd4a10cb455bd1ce4cc1" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is used after appending &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; to &lt;code&gt;$@&lt;/code&gt; . This is useful for staying almost, but not entirely similar to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfa46357b1516decacabae244126181d8b80b21" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; contains an object reference that has a &lt;code&gt;PROPAGATE&lt;/code&gt; method, that method will be called with additional file and line number parameters. The return value replaces the value in &lt;code&gt;$@&lt;/code&gt; ; i.e., as if &lt;code&gt;$@ = &lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; were called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97492155e7589378bb301645dfa7c34b680ef04" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; contains an object reference that has a &lt;code&gt;PROPAGATE&lt;/code&gt; method, that method will be called with additional file and line number parameters. The return value replaces the value in &lt;code&gt;$@&lt;/code&gt; ; i.e., as if &lt;code&gt;$@ = &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; were called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e71a254b15b38644afabad82376b2bb1e4f7fab" translate="yes" xml:space="preserve">
          <source>If the output of the &lt;code&gt;h h&lt;/code&gt; command (or any command, for that matter) scrolls past your screen, precede the command with a leading pipe symbol so that it's run through your pager, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7911c6fed712fb085afb893540153d04c3ba2b2" translate="yes" xml:space="preserve">
          <source>If the package has a mailing list, include a URL or subscription instructions here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd5efd382acc87571dd747451ad45f157dd85d7" translate="yes" xml:space="preserve">
          <source>If the package has a web site, include a URL here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128d72462f8fdf7586cd07b73dc9169d6e753911" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, &lt;code&gt;U+FFFE&lt;/code&gt; has a minimal primary weight. The comparison between &lt;code&gt;&quot;$a1\x{FFFE}$a2&quot;&lt;/code&gt; and &lt;code&gt;&quot;$b1\x{FFFE}$b2&quot;&lt;/code&gt; first compares &lt;code&gt;$a1&lt;/code&gt; and &lt;code&gt;$b1&lt;/code&gt; at level 1, and then &lt;code&gt;$a2&lt;/code&gt; and &lt;code&gt;$b2&lt;/code&gt; at level 1, as followed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bc1d540aa212d81d3c27835031fe5adbb0eee1" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, &lt;code&gt;U+FFFF&lt;/code&gt; has a highest primary weight. When a boolean of &lt;code&gt;$coll-&amp;gt;ge($str, &quot;abc&quot;)&lt;/code&gt; and &lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; is true, it is expected that &lt;code&gt;$str&lt;/code&gt; begins with &lt;code&gt;&quot;abc&quot;&lt;/code&gt; , or another primary equivalent. &lt;code&gt;$str&lt;/code&gt; may be &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , &lt;code&gt;&quot;abc012&quot;&lt;/code&gt; , but should not include &lt;code&gt;U+FFFF&lt;/code&gt; such as &lt;code&gt;&quot;abc\x{FFFF}xyz&quot;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2379a678967ce11b206cce9256eec402c626744e" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, a final, tie-breaking level is used. If no difference of weights is found after the comparison through all the level specified by &lt;code&gt;level&lt;/code&gt; , the comparison with code points will be performed. For the tie-breaking comparison, the sort key has code points of the original string appended. Completely ignorable characters are not ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d70ed0cf4279c5cf91d7d6890341737c51d4df" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, accents (and other primary ignorable characters) are ignored, even though cases are taken into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffce08d047eaee75c853cd8ab3be63e13efe5a7" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, for a contraction with three or more characters (here nicknamed &quot;long contraction&quot;), initial substrings will be handled. For example, a contraction ABC, where A is a starter, and B and C are non-starters (character with non-zero combining character class), will be detected even if there is not AB as a contraction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6196ed90d85a5642d1f2bff307d9850731d3ee76" translate="yes" xml:space="preserve">
          <source>If the parameters to the INCLUDE: keyword are followed by a pipe (&lt;code&gt;|&lt;/code&gt;) then the compiler will interpret the parameters as a command. This feature is mildly deprecated in favour of the &lt;code&gt;INCLUDE_COMMAND:&lt;/code&gt; directive, as documented below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60984150a4a273c37051fdd1024089806a686df1" translate="yes" xml:space="preserve">
          <source>If the parent process is killed (either using Perl's kill() builtin, or using some external means) all the pseudo-processes are killed as well, and the whole process exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa64f5b5dc3063c1ec88bf3714d6a78f8885563e" translate="yes" xml:space="preserve">
          <source>If the pattern contains embedded code, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400ab285c2500104132be9cd3fcc1a752df8a4f5" translate="yes" xml:space="preserve">
          <source>If the pattern does not match any pathname, then bsd_glob() returns a list consisting of only the pattern. If &lt;code&gt;GLOB_QUOTE&lt;/code&gt; is set, its effect is present in the pattern returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adde583f90fd2399e3928b4e6217841c09c97fb" translate="yes" xml:space="preserve">
          <source>If the pattern may match only at a handful of places, with &lt;code&gt;TYPE&lt;/code&gt; being &lt;code&gt;SBOL&lt;/code&gt; , &lt;code&gt;MBOL&lt;/code&gt; , or &lt;code&gt;GPOS&lt;/code&gt; . See the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ce5cbb841f39a51912df72d9768f6a6a5fae33" translate="yes" xml:space="preserve">
          <source>If the pattern was used as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd05fadef47c4bd45462fdfaa94e04afc77ad22" translate="yes" xml:space="preserve">
          <source>If the performance in such cases is unacceptable, you may defer the actual writing, and then have it done all at once. The following loop will perform much better for large files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956656b1b2d0c77e2fbe4d0d92677dc48070a8ed" translate="yes" xml:space="preserve">
          <source>If the platform is MS-DOS like and normally does CRLF to &quot;\n&quot; translation for text files then the default layers are :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee788dad0c5b1cd15e2fa5ddb122d4f9bd910af" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;code&gt;langinfo(CODESET)&lt;/code&gt; interface, the codeset returned is used as the default encoding for the open pragma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e029b7bfe44b40ce79cdafd38dd9f57646af8f39" translate="yes" xml:space="preserve">
          <source>If the program exits without all threads having either been joined or detached, then a warning will be issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68122aab68b9511758161a833aab14bd7cf8f3f4" translate="yes" xml:space="preserve">
          <source>If the program exits without all threads having either been joined or detached, then this warning will be issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f05e0c9adcc7343a41a8d24201ee4c19ce64a54" translate="yes" xml:space="preserve">
          <source>If the program has been given to perl via the switches &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;-E&lt;/code&gt; , &lt;code&gt;$0&lt;/code&gt; will contain the string &lt;code&gt;&quot;-e&quot;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187d3c3b9917db708f6b4997f1f577493d56ad38" translate="yes" xml:space="preserve">
          <source>If the program is syntactically correct, it is executed. If the program runs off the end without hitting an exit() or die() operator, an implicit &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit(0)&lt;/a&gt;&lt;/code&gt; is provided to indicate successful completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf82d5604429bbfe1cb41298b645fa1f014e9ae" translate="yes" xml:space="preserve">
          <source>If the property doesn't have such a restricted set, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f736ee647a4d5e1589838b72f5b05af7545714ad" translate="yes" xml:space="preserve">
          <source>If the property name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the property parameter, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afaf0816b79f3c9b4d1b468e6b1d9a01691cd781" translate="yes" xml:space="preserve">
          <source>If the protocol is set to &quot;tcp&quot;, this method may be called any number of times, and each call to the ping() method (below) will use the most recent $local_addr. If the protocol is &quot;icmp&quot; or &quot;udp&quot;, then bind() must be called at most once per object, and (if it is called at all) must be called before the first call to ping() for that object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd278d79ed04376a1ab23bc38f3813d0d8a95858" translate="yes" xml:space="preserve">
          <source>If the prototypes are enabled, you can disable it locally for a given XSUB as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22222d2992db775cc93f4e6df7a745c81e01a6be" translate="yes" xml:space="preserve">
          <source>If the referenced object has been blessed into a package, then that package name is returned instead. But don't use that, as it's now considered &quot;bad practice&quot;. For one reason, an object could be using a class called &lt;code&gt;Regexp&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt; , or even &lt;code&gt;HASH&lt;/code&gt; . Also, &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; doesn't take into account subclasses, like &lt;code&gt;isa&lt;/code&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf268542a8929b7e398cc1536659093d140d5216" translate="yes" xml:space="preserve">
          <source>If the referenced object has been blessed into a package, then that package name is returned instead. But don't use that, as it's now considered &quot;bad practice&quot;. For one reason, an object could be using a class called &lt;code&gt;Regexp&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt; , or even &lt;code&gt;HASH&lt;/code&gt; . Also, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; doesn't take into account subclasses, like &lt;code&gt;isa&lt;/code&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e68bc71ae659a158de263698e821903752a759" translate="yes" xml:space="preserve">
          <source>If the referred library is an archive library, then it is treated as a simple collection of .o modules (all of which must contain PIC). These modules are then linked into the shared library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487c69f3c32cf6208263be856047bd1120b5cb11" translate="yes" xml:space="preserve">
          <source>If the regex engine was entered, the output may look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4071da6362bfae97335d6ccd04527e0675ca1ecf" translate="yes" xml:space="preserve">
          <source>If the remote server sends data a byte at time, and you need that data immediately without waiting for a newline (which might not happen), you may wish to replace the &lt;code&gt;while&lt;/code&gt; loop in the parent with the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e886a06c0d6c64ae06980c39f4979b0d06c657" translate="yes" xml:space="preserve">
          <source>If the repeat count is &lt;code&gt;*&lt;/code&gt; , the offset is relative to the start of the packed string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71535d2706781140ebf79d95c5c1eb0328f89697" translate="yes" xml:space="preserve">
          <source>If the repeat count is &lt;code&gt;0&lt;/code&gt; , it's relative to the current position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adddd684b7b4b320c5c6cd3d4e144f8d42b00be2" translate="yes" xml:space="preserve">
          <source>If the requested class doesn't yet exist, this function will still succeed, and return &lt;code&gt;[ $classname ]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c8df40676c5ef413c4d428cc8bce1edd4a74be" translate="yes" xml:space="preserve">
          <source>If the required version is older than Perl 5.10, the &quot;:default&quot; feature bundle is automatically loaded instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d407bfa98e92001cef51aaea080c36419318c881" translate="yes" xml:space="preserve">
          <source>If the result is a fraction, it is converted into a floating point number to the accuracy of your platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f32bf4dd5015a300ddb6707d47fae5eba9e46c" translate="yes" xml:space="preserve">
          <source>If the result is multiple script names, they are returned joined into a single comma-separated string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ec7fbff805996e6714524f94283d541160e6c3" translate="yes" xml:space="preserve">
          <source>If the return type of the XSUB includes &lt;code&gt;static&lt;/code&gt; , the method is considered to be a static method. It will call the C++ function using the class::method() syntax. If the method is not static the function will be called using the THIS-&amp;gt;method() syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ff7ce638cb043eea1113e455241d4090a0ba15" translate="yes" xml:space="preserve">
          <source>If the return value of reval() is (or contains) any code reference, those code references are wrapped to be themselves executed always in the compartment. See &lt;a href=&quot;#wrap_code_refs_within&quot;&gt;wrap_code_refs_within&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5b2e1517f57a24f52793e2d523bf3e3916b624" translate="yes" xml:space="preserve">
          <source>If the revision (previously &quot;tracking version&quot;) number of UCA is given, behavior of that revision is emulated on collating. If omitted, the return value of &lt;code&gt;UCA_Version()&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7a3bfd506eaa3a5969fb39449cbd90048c5cd5" translate="yes" xml:space="preserve">
          <source>If the right argument is an expression rather than a search pattern, substitution, or transliteration, it is interpreted as a search pattern at run time. Note that this means that its contents will be interpolated twice, so</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397d47eee4fc1ac1405170a336868a5dec199f77" translate="yes" xml:space="preserve">
          <source>If the same C type is used in several different contexts which require different translations, &lt;code&gt;typedef&lt;/code&gt; several new types mapped to this C type, and create separate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456756c29fcce7da570891f767727aa9e1c8ea70" translate="yes" xml:space="preserve">
          <source>If the same character (or a sequence of characters) exists in the collation element table through &lt;code&gt;table&lt;/code&gt; , mapping to collation elements is overridden. If it does not exist, the mapping is defined additionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250b229660b09d1a93cecb0077c43fdb021bc44f" translate="yes" xml:space="preserve">
          <source>If the scalar contains a number the raw SV will be leaner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129cba7aa8d1059953f619ec45963493064daafb" translate="yes" xml:space="preserve">
          <source>If the scalar from the previous example had an extra reference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942a6cfe1787a0e79c2fbf6e9025269b48593e53" translate="yes" xml:space="preserve">
          <source>If the script says that your package is incomplete, and asks whether to continue, just answer with Y (this can only happen if you don't use long filenames or forget to issue &quot;set FNCASE=y&quot; first).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebc636a0a5f78fe0991b4d30678c7a47413c67b" translate="yes" xml:space="preserve">
          <source>If the second argument to a piped &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; contains shell metacharacters, perl &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;s, then &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;s a shell to decode the metacharacters and eventually run the desired program. If the program couldn't be run, it's the shell that gets the message, not Perl. All your Perl program can find out is whether the shell itself could be successfully started. You can still capture the shell's STDERR and check it for error messages. See &lt;a href=&quot;#How-can-I-capture-STDERR-from-an-external-command%3f&quot;&gt;How can I capture STDERR from an external command?&lt;/a&gt; elsewhere in this document, or use the &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a485d6980d01df96f56ec659ef159a6f3e30c7c" translate="yes" xml:space="preserve">
          <source>If the second operand has a &quot;nomethod&quot; method then use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89fc930c903cfb2489602dfe78fa395aab16a02" translate="yes" xml:space="preserve">
          <source>If the second parameter (a boolean) is omitted or false, the decomposition is canonical decomposition; if the second parameter (a boolean) is true, the decomposition is compatibility decomposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc3a4f8b493e77f4b46b059968dc0b38f7409ec" translate="yes" xml:space="preserve">
          <source>If the selected element is outside the string, the value 0 is returned. If an element off the end of the string is written to, Perl will first extend the string with sufficiently many zero bytes. It is an error to try to write off the beginning of the string (i.e., negative OFFSET).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08309d3b072967d3ab275a7c77649be9b9f2f474" translate="yes" xml:space="preserve">
          <source>If the semaphore's count would drop below zero, this method will block until such time as the semaphore's count is greater than or equal to the amount you're &lt;code&gt;down&lt;/code&gt; ing the semaphore's count by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cf6efaba2d8b062462556a6172122cd62a7391" translate="yes" xml:space="preserve">
          <source>If the semaphore's count would drop below zero, this method will return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaf413a0792a40fde39688dd7794f1b79d23f9d" translate="yes" xml:space="preserve">
          <source>If the shareable image isn't in any of these places, you'll need to define a logical name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d77daa474d5b520bbe270f2db415132f8e51945" translate="yes" xml:space="preserve">
          <source>If the socket is in a connected state, the peer address is returned. If the socket is not in a connected state, undef is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc839afaf75ab77ac378c573dd37cfe67fada222" translate="yes" xml:space="preserve">
          <source>If the source number can be represented in the target form, that representation is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2456e62439e41ca828e4d7a559faef86d9a12f" translate="yes" xml:space="preserve">
          <source>If the source number is between two numbers representable in the target form, a representation of one of these numbers is used. (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5807a3edb0534ce60ac2857df2fbffa4467c6e15" translate="yes" xml:space="preserve">
          <source>If the source number is outside of the limits representable in the target form, a representation of the closest limit is used. (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b6fc7f507aeb4c29a8733766d6c6136c45fda9" translate="yes" xml:space="preserve">
          <source>If the special input filename &quot;&quot;, &quot;-&quot; or &quot;&amp;lt;&amp;amp;STDIN&quot; is given then the STDIN filehandle is used for input (and no open or close is performed). If no input filename is specified then &quot;-&quot; is implied. Filehandle references, or objects that support the regular IO operations (like &lt;code&gt;&amp;lt;$fh&amp;gt;&lt;/code&gt; or &lt;code&gt;$fh-&amp;lt;Egt&lt;/code&gt;getline&amp;gt;) are also accepted; the handles must already be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec8f0307ac0cd29be9e31e20412d0003c85f12a" translate="yes" xml:space="preserve">
          <source>If the standard options aren't enough, you may want to subclass Pod::Simple::XHMTL. These are the most likely candidates for methods you'll want to override when subclassing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c4f5fed91805150d0fb1f5cc265445f3719afe" translate="yes" xml:space="preserve">
          <source>If the string happens to be encoded as UTF-8 internally (and thus has the UTF8 flag set), this is ignored by &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, and it operates on the internal byte string, not the conceptual character string, even if you only have characters with values less than 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46f7dff46b6e909ca2a4c0f1cd989e3474f6367" translate="yes" xml:space="preserve">
          <source>If the string happens to be encoded as UTF-8 internally (and thus has the UTF8 flag set), this is ignored by &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, and it operates on the internal byte string, not the conceptual character string, even if you only have characters with values less than 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556906a3727707516e15ba62fe70b3006b4bd52d" translate="yes" xml:space="preserve">
          <source>If the string is just one character in length, the Unicode numeric value is returned if it has one, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; otherwise. Note that this need not be a whole number. &lt;code&gt;num(&quot;\N{TIBETAN DIGIT HALF ZERO}&quot;)&lt;/code&gt; , for example returns -0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98175c6574b582a8455429e44a48ac7e74d895" translate="yes" xml:space="preserve">
          <source>If the string is more than one character, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned unless all its characters are decimal digits (that is, they would match &lt;code&gt;\d+&lt;/code&gt; ), from the same script. For example if you have an ASCII '0' and a Bengali '3', mixed together, they aren't considered a valid number, and &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. A further restriction is that the digits all have to be of the same form. A half-width digit mixed with a full-width one will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. The Arabic script has two sets of digits; &lt;code&gt;num&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless all the digits in the string come from the same set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c4922eb5c062cef768c57176fb78d4965487a5" translate="yes" xml:space="preserve">
          <source>If the subroutine is an XSUB, the elements to be compared are pushed on to the stack, the way arguments are usually passed to XSUBs. $a and $b are not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976151f66fa723fd3131374feb62ee8e2fa9f3b7" translate="yes" xml:space="preserve">
          <source>If the subroutine needs to signal an error, it should call die() with the desired error message as its argument. GetOptions() will catch the die(), issue the error message, and record that an error result must be returned upon completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40540ec0b48601a220c70ec78c454bb0e1f51c33" translate="yes" xml:space="preserve">
          <source>If the subroutine returns a scalar with a newline or a filehandle, it will be interpreted as raw TAP or as a TAP stream, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca613cca9ddf94b18fd3a6da5979f02e2a0a3fcf" translate="yes" xml:space="preserve">
          <source>If the subroutine's prototype is &lt;code&gt;($$)&lt;/code&gt; , the elements to be compared are passed by reference in &lt;code&gt;@_&lt;/code&gt; , as for a normal subroutine. This is slower than unprototyped subroutines, where the elements to be compared are passed into the subroutine as the package global variables $a and $b (see example below). Note that in the latter case, it is usually highly counter-productive to declare $a and $b as lexicals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8a697c5090fd8ce94c13b5cefb41955f99b010" translate="yes" xml:space="preserve">
          <source>If the sv already is UTF-8 (or if it is not POK), or if the encoding is not a reference, nothing is done to the sv. If the encoding is not an &lt;code&gt;Encode::XS&lt;/code&gt; Encoding object, bad things will happen. (See</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e6d11786b2dfdb0f52678b6850a3dff8731c46" translate="yes" xml:space="preserve">
          <source>If the sv is the target of a weak reference then it returns the back references structure associated with the sv; otherwise return NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b0821b14cc4cbb805ab8ac00aa5900da22e409" translate="yes" xml:space="preserve">
          <source>If the symbol &lt;code&gt;:void&lt;/code&gt; appears in the import list, then functions named later in that import list raise an exception only when these are called in void context--that is, when their return values are ignored. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cf7df5061941de64a11ddf12781ae7a8f3290f" translate="yes" xml:space="preserve">
          <source>If the system Perl is compiled in has thread-safe variants of such calls, they will be used. Beyond that, Perl is at the mercy of the thread-safety or -unsafety of the calls. Please consult your C library call documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b1234bec481f7f0fb540471e8867994b10762a" translate="yes" xml:space="preserve">
          <source>If the target machine is little-endian, we could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff635540edd5aea28a885e06a80c5c6844ba7c11" translate="yes" xml:space="preserve">
          <source>If the template is not specified, a template is always automatically generated. This temporary file is placed in tmpdir() (L&amp;lt;:spec&amp;gt;) unless a directory is specified explicitly with the DIR option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593ec0746d963b28de5ba2cf0799b3f4777c63c7" translate="yes" xml:space="preserve">
          <source>If the temporary file can not be created undef is returned. Currently this command will probably not work when the temporary directory is on an NFS file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326e7cf804954bda3811121b38cb7c631e7575fe" translate="yes" xml:space="preserve">
          <source>If the terminating string is quoted, the type of quotes used determine the treatment of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957eb5ae659823f7ba1c0183ec0ac873de8b4109" translate="yes" xml:space="preserve">
          <source>If the test is unplanned, this method will always return false. See &lt;code&gt;is_unplanned&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfabe273698ccd033cf292d0d277e005ca02c57" translate="yes" xml:space="preserve">
          <source>If the tests fail &lt;code&gt;prove&lt;/code&gt; will exit with non-zero status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269c79628ff3b9a7faad565d0d36f6d320d9b282" translate="yes" xml:space="preserve">
          <source>If the text of the L&amp;lt;&amp;gt; escape is entirely enclosed in double quotes, it's interpreted as a link to a section for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92e03b607dab58b8f2f2e3c224ccb0a3fc3ca6c" translate="yes" xml:space="preserve">
          <source>If the text of the error message starts with an exclamation mark &lt;code&gt;!&lt;/code&gt; it is interpreted specially by GetOptions(). There is currently one special command implemented: &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die(&quot;!FINISH&quot;)&lt;/a&gt;&lt;/code&gt; will cause GetOptions() to stop processing options, as if it encountered a double dash &lt;code&gt;--&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a21a0dcb36b1ce3d43912ccebce5a460b97864" translate="yes" xml:space="preserve">
          <source>If the third argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b232866b6ad063c73d4ad37ea476edb565d6de63" translate="yes" xml:space="preserve">
          <source>If the third argument,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bf0740d3ced4e3ce4166e93bb8bdf81549240a" translate="yes" xml:space="preserve">
          <source>If the thread being &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;ed &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;d, the error it died with will be returned at this time. If you don't want the thread performing the &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; to die as well, you should either wrap the &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or use the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; thread method instead of &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd970acc5e28ee89d2e82334dde273c65bae5b7" translate="yes" xml:space="preserve">
          <source>If the title can't be found, then get_short_title returns empty-string (&quot;&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697a489e14d5b870ec5510bd4b458c67ab45bad8" translate="yes" xml:space="preserve">
          <source>If the typeglob &lt;code&gt;gv&lt;/code&gt; can be expressed more succinctly, by having something other than a real GV in its place in the stash, replace it with the optimised form. Basic requirements for this are that &lt;code&gt;gv&lt;/code&gt; is a real typeglob, is sufficiently ordinary, and is only referenced from its package. This function is meant to be used when a GV has been looked up in part to see what was there, causing upgrading, but based on what was found it turns out that the real GV isn't required after all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e317e256420ab2a48b2f7e7b312c3d9f416e521" translate="yes" xml:space="preserve">
          <source>If the underlying &lt;code&gt;IO::Handle&lt;/code&gt; is closed, or if there are any read or write failures, the file handle will be forced closed, and &lt;code&gt;code()&lt;/code&gt; will return &quot;421&quot; (temporary connection failure) and &lt;code&gt;message()&lt;/code&gt; will return &quot;[$pkg] Connection closed&quot; (where $pkg is the name of the class that subclassed &lt;code&gt;Net::Cmd&lt;/code&gt; ). The _set_status_closed() method can be overridden to set a different message (by calling set_status()) or otherwise trap this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc3b2cf894256f273b0349af8d5d688d0cdcb39" translate="yes" xml:space="preserve">
          <source>If the user builds a shared</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32324af5745fb70c85007da7a27faa556a189cfd" translate="yes" xml:space="preserve">
          <source>If the user didn't specify anything, it's interpreted as having used the &lt;code&gt;please&lt;/code&gt; tag. It's up to you to make this useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd074d1ec9315994a5770ffd227be188d8ea3674" translate="yes" xml:space="preserve">
          <source>If the user does not have HTML::Lint installed, the whole block of code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39c8811f479889c6eabed43038bf7a333557852" translate="yes" xml:space="preserve">
          <source>If the user has superuser privileges, and is not working on AFS or relatives, then the defaults for INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSCRIPT, etc. will be appropriate, and this incantation will be the best:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9745c4616cab220c27715466f7a222d8b72268" translate="yes" xml:space="preserve">
          <source>If the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1676523b419ae746e43ad6553d2687aea42c504e" translate="yes" xml:space="preserve">
          <source>If the value doesn't match the 'make' program you want to use, edit Config.pm to fix it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa86f4743abc7079a416abc9073771271ff4394" translate="yes" xml:space="preserve">
          <source>If the value is &amp;lt;= &lt;code&gt;UV_MAX&lt;/code&gt; it is returned as a UV, the output flags are clear, and nothing is written to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd15952acdcd265d4f18a816b3be548c37a82d83" translate="yes" xml:space="preserve">
          <source>If the value is &amp;lt;= UV_MAX it is returned as a UV, the output flags are clear, and nothing is written to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10d8690679793d91d603d7249997075229bffed" translate="yes" xml:space="preserve">
          <source>If the value is a coderef, we return &amp;amp;$value($lh, ...parameters...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef50a320b2209faad43a3f8213d92ea4b618e424" translate="yes" xml:space="preserve">
          <source>If the value is a scalarref, the scalar is dereferenced and returned (and any parameters are ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f950a468109b8d39520112d3f58effdc56407fc" translate="yes" xml:space="preserve">
          <source>If the value is a string that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034aa5dfb1d3fc388ace8815e3c3af316b7fe0f0" translate="yes" xml:space="preserve">
          <source>If the value is true, then the appropriate pragma is assumed to be in the ambient scope, otherwise not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b0ded1a1deef22b5fab46f3c6efeda2921b5b8" translate="yes" xml:space="preserve">
          <source>If the value of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3799e4ea2da2d340ca2beed8a5872250c216eb41" translate="yes" xml:space="preserve">
          <source>If the value of the number can fit in a UV, it is returned in the *valuep IS_NUMBER_IN_UV will be set to indicate that *valuep is valid, IS_NUMBER_IN_UV will never be set unless *valuep is valid, but *valuep may have been assigned to during processing even though IS_NUMBER_IN_UV is not set on return. If valuep is NULL, IS_NUMBER_IN_UV will be set for the same cases as when valuep is non-NULL, but no actual assignment (or SEGV) will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d417792987cefdc8fbbad820c7047930346b40c5" translate="yes" xml:space="preserve">
          <source>If the value to pack is too long, the result is truncated. If it's too long and an explicit count is provided, &lt;code&gt;Z&lt;/code&gt; packs only &lt;code&gt;$count-1&lt;/code&gt; bytes, followed by a null byte. Thus &lt;code&gt;Z&lt;/code&gt; always packs a trailing null, except when the count is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b18faee7915986e7efaa1de04f931c2b8c71f1c" translate="yes" xml:space="preserve">
          <source>If the values are all small integers, you could use a simple indexed array. This kind of an array will take up less space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc9e16e91b4a8896cd9faaa5f9549cbc7085c8f" translate="yes" xml:space="preserve">
          <source>If the values in question are integers instead of strings, you can save quite a lot of space by using bit strings instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e7da39372f108fea1077e432f6f8a5490ef1c9" translate="yes" xml:space="preserve">
          <source>If the variable is locked by another thread, the &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; call will block until it's available. &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; is recursive, so multiple calls to &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; are safe--the variable will remain locked until the outermost lock on the variable goes out of scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a274850c71686d34e3baa803737f0dedda24d3" translate="yes" xml:space="preserve">
          <source>If the variable is not set, or if the head of space-separated list is empty, the best available package is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b83d018cb7a8db8be65fb54c56d8b5b7e8cb24" translate="yes" xml:space="preserve">
          <source>If the warnings category, &lt;code&gt;$category&lt;/code&gt; , has been set to &quot;FATAL&quot; in the calling module then die. Otherwise return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de09cf9a89a26f0cb448619847689ec2527d3db" translate="yes" xml:space="preserve">
          <source>If the whole program is Unicode (signified by using 8-bit &lt;b&gt;U&lt;/b&gt;nicode &lt;b&gt;T&lt;/b&gt;ransformation &lt;b&gt;F&lt;/b&gt;ormat), then all strings within it must be Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdf7f58b72ea89ccbb496e2eb6b9b4bc7fadaa5" translate="yes" xml:space="preserve">
          <source>If the word &lt;code&gt;while&lt;/code&gt; is replaced by the word &lt;code&gt;until&lt;/code&gt; , the sense of the test is reversed, but the conditional is still tested before the first iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10166029e96e7fe67231308fbe3c16515584c847" translate="yes" xml:space="preserve">
          <source>If there are additional casing rules that apply only in certain locales, an additional key for each will be defined in the returned hash. Each such key will be its locale name, defined as a 2-letter ISO 3166 country code, possibly followed by a &quot;_&quot; and a 2-letter ISO language code (possibly followed by a &quot;_&quot; and a variant code). You can find the lists of all possible locales, see &lt;a href=&quot;../locale/country&quot;&gt;Locale::Country&lt;/a&gt; and &lt;a href=&quot;../locale/language&quot;&gt;Locale::Language&lt;/a&gt;. (In Unicode 6.0, the only locales returned by this function are &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;az&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c264a98231858c182cc8e558543c798b7c30e957" translate="yes" xml:space="preserve">
          <source>If there are more pack codes or if the repeat count of a field or a group is larger than what the remainder of the input string allows, the result is not well defined: the repeat count may be decreased, or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; may produce empty strings or zeros, or it may raise an exception. If the input string is longer than one described by the TEMPLATE, the remainder of that input string is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76f7ceb246d4c2d7fabcbfce30f4b0cda04fc65" translate="yes" xml:space="preserve">
          <source>If there are more pack codes or if the repeat count of a field or a group is larger than what the remainder of the input string allows, the result is not well defined: the repeat count may be decreased, or &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; may produce empty strings or zeros, or it may raise an exception. If the input string is longer than one described by the TEMPLATE, the remainder of that input string is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8ae3d8fd9e42e9aba417d2727a1cef25f1654d" translate="yes" xml:space="preserve">
          <source>If there are multiple threads running, &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on a filehandle from a piped open returns true without waiting for the child process to terminate, if the filehandle is still open in another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d703ea78c6bd312ccc4d4536374984caf742a2c" translate="yes" xml:space="preserve">
          <source>If there are multiple threads running, &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on a filehandle from a piped open returns true without waiting for the child process to terminate, if the filehandle is still open in another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ca3b8e4b7d3fd6327a3431ba332cb4654544b7" translate="yes" xml:space="preserve">
          <source>If there are no case mappings for the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;, or if all three possible mappings (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d288bab40c0346d55a3c0eb77940eab7a6641ad" translate="yes" xml:space="preserve">
          <source>If there are no shell metacharacters in the argument of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;, Perl runs the command directly, without using the shell, and can correctly report whether the command started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b3c9dc933e2482f8eba281e591135e3899389e" translate="yes" xml:space="preserve">
          <source>If there are no threads blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the variable, the signal is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf5c5ee7e0424ea7ada5c7826f4b90fdb2a116c" translate="yes" xml:space="preserve">
          <source>If there are no threads blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the variable, the signal is discarded. By always locking before signaling, you can (with care), avoid signaling before another thread has entered cond_wait().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5de19948908467a5a983001d47b7d9a0689b746" translate="yes" xml:space="preserve">
          <source>If there are no valid digits between the braces, the generated character is the NULL character (&lt;code&gt;\x{00}&lt;/code&gt; ). However, an explicit empty brace (&lt;code&gt;\x{}&lt;/code&gt; ) will not cause a warning (currently).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b342c6d59112da790e47e12118a22cde8dbcaf22" translate="yes" xml:space="preserve">
          <source>If there are only a few field hashes to declare, it is simplest to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8e9a2c571cd018342d9c2118caec048fd77da4" translate="yes" xml:space="preserve">
          <source>If there are only three arguments and the third argument is a hash reference, the keys of that hash can have values &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;fold&lt;/code&gt; , and &lt;code&gt;comp&lt;/code&gt; or &lt;code&gt;xfrm&lt;/code&gt; (see below), and their corresponding values will be used as the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e86b013905dd12651149e8ec83c3ae6cf6c6b73" translate="yes" xml:space="preserve">
          <source>If there are two modules using &lt;code&gt;FindBin&lt;/code&gt; from different directories under the same interpreter, this won't work. Since &lt;code&gt;FindBin&lt;/code&gt; uses a &lt;code&gt;BEGIN&lt;/code&gt; block, it'll be executed only once, and only the first caller will get it right. This is a problem under mod_perl and other persistent Perl environments, where you shouldn't use this module. Which also means that you should avoid using &lt;code&gt;FindBin&lt;/code&gt; in modules that you plan to put on CPAN. To make sure that &lt;code&gt;FindBin&lt;/code&gt; will work is to call the &lt;code&gt;again&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc3c3e2760c5e396f33222005be848fc9fe18e0" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; BLOCK, it is always executed just before the conditional is about to be evaluated again. Thus it can be used to increment a loop variable, even when the loop has been continued via the &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b36be5061281671022cf399b379651681b1d4d0" translate="yes" xml:space="preserve">
          <source>If there is a case folding for that code point, a reference to a hash with the following fields is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6424bf8b1f44f30e366f5038ca9bafadec447990" translate="yes" xml:space="preserve">
          <source>If there is a read or write timeout &lt;code&gt;code()&lt;/code&gt; will return &quot;421&quot; (temporary connection failure) and &lt;code&gt;message()&lt;/code&gt; will return &quot;[$pkg] Timeout&quot; (where $pkg is the name of the class that subclassed &lt;code&gt;Net::Cmd&lt;/code&gt; ). The _set_status_timeout() method can be overridden to set a different message (by calling set_status()) or otherwise trap this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aba41a92baa1006f7ccfb764892fd564d365da" translate="yes" xml:space="preserve">
          <source>If there is a syntax error or runtime error, or a &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; statement is executed, &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context or an empty list in list context, and &lt;code&gt;$@&lt;/code&gt; is set to the error message. (Prior to 5.16, a bug caused &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to be returned in list context for syntax errors, but not for runtime errors.) If there was no error, &lt;code&gt;$@&lt;/code&gt; is set to the empty string. A control flow operator like &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; can bypass the setting of &lt;code&gt;$@&lt;/code&gt; . Beware that using &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; neither silences Perl from printing warnings to STDERR, nor does it stuff the text of warning messages into &lt;code&gt;$@&lt;/code&gt; . To do either of those, you have to use the &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; facility, or turn off warnings inside the BLOCK or EXPR using &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; . See &lt;a href=&quot;warn&quot;&gt;warn&lt;/a&gt;, &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt;, and &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebacccba519ce29c0edb6165a1d7c06041545422" translate="yes" xml:space="preserve">
          <source>If there is a syntax error or runtime error, or a &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; statement is executed, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context or an empty list in list context, and &lt;code&gt;$@&lt;/code&gt; is set to the error message. (Prior to 5.16, a bug caused &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to be returned in list context for syntax errors, but not for runtime errors.) If there was no error, &lt;code&gt;$@&lt;/code&gt; is set to the empty string. A control flow operator like &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; can bypass the setting of &lt;code&gt;$@&lt;/code&gt; . Beware that using &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; neither silences Perl from printing warnings to STDERR, nor does it stuff the text of warning messages into &lt;code&gt;$@&lt;/code&gt; . To do either of those, you have to use the &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; facility, or turn off warnings inside the BLOCK or EXPR using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; . See &lt;a href=&quot;#warn&quot;&gt;warn&lt;/a&gt;, &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;, and &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5466934b0ce09952bbdf7a873d8e98baf5e63870" translate="yes" xml:space="preserve">
          <source>If there is an error then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467d2ed550f37bc1b9fda912fd43e11ff12b4118" translate="yes" xml:space="preserve">
          <source>If there is any question about whether a given patch might merit inclusion in a maint release, then it almost certainly should not be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8376c45472eeb9e97a43b3d977d663509a5686" translate="yes" xml:space="preserve">
          <source>If there is more than one argument in LIST, this calls execvp(3) with the arguments in LIST. If there is only one element in LIST, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system's command shell for parsing (this is &lt;code&gt;/bin/sh -c&lt;/code&gt; on Unix platforms, but varies on other platforms). If there are no shell metacharacters in the argument, it is split into words and passed directly to &lt;code&gt;execvp&lt;/code&gt; , which is more efficient. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2594b97a91aa3fa79863d35058be1a8172ac679a" translate="yes" xml:space="preserve">
          <source>If there is no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836d7eec1f71c6b6f4181b3811b03cbac0e80430" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;\E&lt;/code&gt; , case is converted until the end of the string. The regexps &lt;code&gt;\L\u$word&lt;/code&gt; or &lt;code&gt;\u\L$word&lt;/code&gt; convert the first character of &lt;code&gt;$word&lt;/code&gt; to uppercase and the rest of the characters to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73d7b3af9d178254858949bc270c269c6e2e60d" translate="yes" xml:space="preserve">
          <source>If there is no INSTALL.SKIP file in the make directory then this value can be used to provide a default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349639462c1781c6c7203933948097f1b032dbf1" translate="yes" xml:space="preserve">
          <source>If there is no case folding for the input code point, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a8d9cc6cec6caebf969b32884584509dabbda2" translate="yes" xml:space="preserve">
          <source>If there is no corresponding capture group defined, then it is a fatal error. Recursing deeper than 50 times without consuming any input string will also result in a fatal error. The maximum depth is compiled into perl, so changing it requires a custom build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c7947682ddf8ce5897cbba5d096660017802ec" translate="yes" xml:space="preserve">
          <source>If there is no description, its the same as the parameter to WriteMakefile() documented in ExtUtils::MakeMaker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a08244ff3de5da70abd74d4f48bc9a98bd5fd63" translate="yes" xml:space="preserve">
          <source>If there is no error, then the method returns the value of the last expression evaluated, or a return statement may be used, just as with subroutines and &lt;b&gt;eval()&lt;/b&gt;. The context (list or scalar) is determined by the caller as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcf9881e5055fcb38df136c867429f9722c1a7e" translate="yes" xml:space="preserve">
          <source>If there is no global precision or accuracy set, &lt;b&gt;and&lt;/b&gt; the operation in question was not called with a requested precision or accuracy, &lt;b&gt;and&lt;/b&gt; the input $x has no accuracy or precision set, then a fallback parameter will be used. For historical reasons, it is called &lt;code&gt;div_scale&lt;/code&gt; and can be accessed via:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd1fd130f18a572d29a93b5834a0fdb0347ebb7" translate="yes" xml:space="preserve">
          <source>If there is no interactivity then you may still want to look at using something like &lt;a href=&quot;http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fmodule%2fTemplate&quot;&gt;Template Toolkit&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::TemplateToolkit&quot;&gt;Plack::Middleware::TemplateToolkit&lt;/a&gt; so maintenance of your HTML files (and other assets) is easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd8956e9b63cae584008cf6c1bbe7cd26c8c5c5" translate="yes" xml:space="preserve">
          <source>If there is no matching entry found and there is no default defined, or no .netrc file is found, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40165726268e187e7ad5a226c93cb70fb5e7ae2c" translate="yes" xml:space="preserve">
          <source>If there is only one argument and it is a reference to an array then the array is assumed to contain a list of key-value pairs specifying the options. In this case the option &quot;from_to&quot; is mandatory. This style means that you do not have to supply a cryptic list of arguments and can use a self documenting argument list that is easier to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663e6f7ad7626839945e055f61dd00fa139292d7" translate="yes" xml:space="preserve">
          <source>If there was an error authenticating the user then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4805e4afe7a0ccfe45caa54514a077972082082" translate="yes" xml:space="preserve">
          <source>If there's already an entry in &lt;code&gt;%table&lt;/code&gt; for the current &lt;code&gt;$country&lt;/code&gt; , then nothing is different. Line 6 will locate the value in &lt;code&gt;$table{$country}&lt;/code&gt; , which is a reference to an array, and push &lt;code&gt;$city&lt;/code&gt; into the array. But what does it do when &lt;code&gt;$country&lt;/code&gt; holds a key, say &lt;code&gt;Greece&lt;/code&gt; , that is not yet in &lt;code&gt;%table&lt;/code&gt; ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79b95fc8b6f0bdad9a42663607fbb6bbfce24c2" translate="yes" xml:space="preserve">
          <source>If there's no &lt;code&gt;\w&lt;/code&gt; in &lt;code&gt;s1&lt;/code&gt; nor in &lt;code&gt;s2&lt;/code&gt; , why does their concatenation have one?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d867e0a4fd4a8ea827c16a08b87197c9c461d55" translate="yes" xml:space="preserve">
          <source>If these dependent libraries are not listed at shared library creation time, you will get fatal &quot;Unresolved symbol&quot; errors at run time when the library is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c4d2d6f3874b5b92940f178682f9bbdd8c1db5" translate="yes" xml:space="preserve">
          <source>If these operators are not explicitly overloaded then they work in the normal way, yielding the underlying scalar, array, or whatever stores the object data (or the appropriate error message if the dereference operator doesn't match it). Defining a catch-all &lt;code&gt;'nomethod'&lt;/code&gt; (see &lt;a href=&quot;#nomethod&quot;&gt;below&lt;/a&gt;) makes no difference to this as the catch-all function will not be called to implement a missing dereference operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e81ed1aafee87e39f3bf4df7400134171b1b47" translate="yes" xml:space="preserve">
          <source>If these were ordinary paragraphs, the Pod parser would try to expand the &quot;E&amp;lt;/em&amp;gt;&quot; (in the first paragraph) as a formatting code, just like &quot;E&amp;lt;lt&amp;gt;&quot; or &quot;E&amp;lt;eacute&amp;gt;&quot;. But since this is in a &quot;=begin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135dfc8a9407c20cefc1359ee43028a8d9e9a77" translate="yes" xml:space="preserve">
          <source>If they are not composable, it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7928853cb29cf0ed7b6549f627a68e66710a9993" translate="yes" xml:space="preserve">
          <source>If they wanted to clobber something, they might say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005637a170229ceb4ce45f18dce99b88396f9f92" translate="yes" xml:space="preserve">
          <source>If things aren't broken, upgrading perl may break them (or at least issue new warnings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3184843a959ec8cbcadf6df48b4b495b6b3f78" translate="yes" xml:space="preserve">
          <source>If this behaviour is not desirable, the &lt;code&gt;error&lt;/code&gt; attribute may be used to hold a reference to a variable, which will be used to store the diagnostics. The variable is made a reference to an array of hash references. Each hash contain a single key/value pair where the key is the name of the file, and the value is the error message (including the contents of &lt;code&gt;$!&lt;/code&gt; when appropriate). If a general error is encountered the diagnostic key will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfffc413c869bcf00848584ef88629d0cba8d4b7" translate="yes" xml:space="preserve">
          <source>If this command lists any paths that don't exist on your system, then you may need to move the appropriate libraries to these locations, or create symbolic links, aliases, or shortcuts appropriately. &lt;code&gt;@INC&lt;/code&gt; is also printed as part of the output of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4975023e8ced451b521e66f7c64344d22c9935aa" translate="yes" xml:space="preserve">
          <source>If this directory is exactly the same as the prefix which was compiled into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285c8028480f1bd9da414482302791b2b2e5917d" translate="yes" xml:space="preserve">
          <source>If this displays any &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; symbols (or possibly &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; ), you have non-const data. The symbols the &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; removed are as follows: &lt;code&gt;Tt&lt;/code&gt; are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abdac7aa391382bc2754c2374cb867d27e05580" translate="yes" xml:space="preserve">
          <source>If this environment variable is set to a true value, all of the functions defined by this module (color(), colored(), and all of the constants not previously used in the program) will not output any escape sequences and instead will just return the empty string or pass through the original text as appropriate. This is intended to support easy use of scripts using this module on platforms that don't support ANSI escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876cbaf8d98a55944949f12e34d25c434a20bad7" translate="yes" xml:space="preserve">
          <source>If this environment variable is true then normal install processes will always overwrite older identical files during the install process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fe5d03fc19f605909f122565e563658cd995e6" translate="yes" xml:space="preserve">
          <source>If this field is zero then &lt;code&gt;PerlIO_pushed&lt;/code&gt; does not malloc anything and assumes layer's Pushed function will do any required layer stack manipulation - used to avoid malloc/free overhead for dummy layers. If the field is non-zero it must be at least the size of &lt;code&gt;PerlIOl&lt;/code&gt; , &lt;code&gt;PerlIO_pushed&lt;/code&gt; will allocate memory for the layer's data structures and link new layer onto the stream's stack. (If the layer's Pushed method returns an error indication the layer is popped again.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eff879286b0f884c3e6b0dc473e05a91d80d4a8" translate="yes" xml:space="preserve">
          <source>If this function is being sourced in from a separate file via &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, then this is probably just fine. If it's all in the main program, you'll need to arrange for the &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; to be executed early, either by putting the whole block above your main program, or more likely, placing merely a &lt;code&gt;BEGIN&lt;/code&gt; code block around it to make sure it gets executed before your program starts to run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5121e7b7256f6d0ab378dc9bff9a8c6dad43577" translate="yes" xml:space="preserve">
          <source>If this happens to you, there's not much you can do except switch to use a different locale or use &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; to translate from the locale into UTF-8; if that's impracticable, you have been warned that some things may break.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa64c33180aaefa8582782daf214d7a2f4780a7" translate="yes" xml:space="preserve">
          <source>If this interior sequence is nested inside of another interior sequence, then the outer/parent sequence that contains it is returned. Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7d995797b0338af1d03b9d03a8511323aeb269" translate="yes" xml:space="preserve">
          <source>If this is a TODO test and an 'ok' line, this method returns true. Otherwise, it will always return false (regardless of passing status on non-todo tests).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7666722db0ac2cfa26e5cabc574e02e68556877" translate="yes" xml:space="preserve">
          <source>If this is being called as &lt;code&gt;re::regname&lt;/code&gt; , &lt;code&gt;re::regnames&lt;/code&gt; or &lt;code&gt;re::regnames_count&lt;/code&gt; , if any. The first two will be combined with &lt;code&gt;RXapif_ONE&lt;/code&gt; or &lt;code&gt;RXapif_ALL&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edbce2664bb4f91955d900ea95b27deaa6b5a4b" translate="yes" xml:space="preserve">
          <source>If this is in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; it will be passed to &lt;code&gt;Perl_fbm_instr&lt;/code&gt; by &lt;code&gt;pp_split&lt;/code&gt; which will treat the subject string as a multi-line string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0c042153cf9f6ff54247584b15672ab611a4af" translate="yes" xml:space="preserve">
          <source>If this is negative, and amounts to &lt;code&gt;HEf_SVKEY&lt;/code&gt; , it indicates the entry holds an &lt;code&gt;SV*&lt;/code&gt; key. Otherwise, holds the actual length of the key. Can be assigned to. The &lt;code&gt;HePV()&lt;/code&gt; macro is usually preferable for finding key lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddda819aeefa94d361f2fc0677ccc065e6c33f4f" translate="yes" xml:space="preserve">
          <source>If this is starting to sound scarier than it's worth, relax. Perl has some features to help you avoid its most common pitfalls. The best way to avoid getting confused is to start every program like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cd7396387cdb373b2dd32a6d21ffa39a9fbdd0" translate="yes" xml:space="preserve">
          <source>If this is true, none of that will be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998c59b2484753d1482d0ff9ba7497a84e80fcd4" translate="yes" xml:space="preserve">
          <source>If this is what you intended then you can silence the warning by using &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/${\}/&lt;/a&gt;&lt;/code&gt; (for example: &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo${\}s+bar/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f4b7328771b0d9e19ff0a7ce5f9c13e4b36300" translate="yes" xml:space="preserve">
          <source>If this is your first use of Sys::Syslog, you must read the doc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51861420a23f19227e776c6bc3a38fdcea309df1" translate="yes" xml:space="preserve">
          <source>If this option is not present, the value stored in XFL field will be determined by the setting of the &lt;code&gt;Level&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415323d14a6e182890345d78f7ae3f3149cdff1f" translate="yes" xml:space="preserve">
          <source>If this option is set and the input file/buffer is not compressed data, the module will allow reading of it anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805aae725ba9def01f764562edc887adcbc46d85" translate="yes" xml:space="preserve">
          <source>If this option is set, Pod::Man will instead output UTF-8. If your *roff implementation can handle it, this is the best output format to use and avoids corruption of documents containing non-ASCII characters. However, be warned that *roff source with literal UTF-8 characters is not supported by many implementations and may even result in segfaults and other bad behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9276827e0a43ce0cd98e803156d215d94a1cfced" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the name of the command (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc44b3b4b66c03b7a2464f3e737f50efd9dbf21" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the prefix used to denote the command (which should be the string &quot;=&quot; or &quot;==&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d5af9792754821d43f791eb7a3e99d0e1078a4" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the text used to separate the command name from the rest of the paragraph (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f4b76081f3628eb70be0fbee8dbf0d6e9f3ca4" translate="yes" xml:space="preserve">
          <source>If this parameter is not used, certain error conditions may raise a fatal error that will cause the program will halt, unless trapped in an &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2fb08e29fba6225fdf1f445f37f2366e459721" translate="yes" xml:space="preserve">
          <source>If this regexp matches, &lt;code&gt;$1&lt;/code&gt; contains a string starting with &lt;code&gt;'ab'&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; is either set to &lt;code&gt;'cd'&lt;/code&gt; or &lt;code&gt;'ef'&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; equals either &lt;code&gt;'gi'&lt;/code&gt; or &lt;code&gt;'j'&lt;/code&gt; , and &lt;code&gt;$4&lt;/code&gt; is either set to &lt;code&gt;'gi'&lt;/code&gt; , just like &lt;code&gt;$3&lt;/code&gt; , or it remains undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f92dc123bfc535dc7925652fedf35a2b5f0876" translate="yes" xml:space="preserve">
          <source>If this seems like a lot, then feel free to inherit from merely the standard Tie::StdHash module for most of your methods, redefining only the interesting ones. See &lt;a href=&quot;tie/hash&quot;&gt;Tie::Hash&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f60efe640d39524c6e11c22deb74b1e7bd6e48" translate="yes" xml:space="preserve">
          <source>If this still doesn't work, look into the &lt;code&gt;clearerr&lt;/code&gt; method from &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;, which resets the error and end-of-file states on the handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f660c829995c0ccf8574939955dcb34cbb1fbc2" translate="yes" xml:space="preserve">
          <source>If this template key is true, enforces that if this key is provided by user input, its value is &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;. This just means that the user is not allowed to pass &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; as a value for this key and is equivalent to: allow =&amp;gt; sub { defined $_[0] &amp;amp;&amp;amp; OTHER TESTS }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bbabb48932b2f041b390c777de07be84c85182" translate="yes" xml:space="preserve">
          <source>If this value is defined but false then such an operation has ocurred, but should not impact later operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6a20a1fa0fe02624d3822b74f6ca89396c5ee4" translate="yes" xml:space="preserve">
          <source>If this variable is set to a true value, then &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt; on Windows will not try to open the file. This means that the link count cannot be determined and file attributes may be out of date if additional hardlinks to the file exist. On the other hand, not opening the file is considerably faster, especially for files on network drives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e9d7214894094637d48b5893992a1d4deebf1e" translate="yes" xml:space="preserve">
          <source>If this variable is true then such an operation has occurred and anything depending on this module cannot proceed until a reboot has occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c3e520fc9953b8c23b0cb154effeffba4245f7" translate="yes" xml:space="preserve">
          <source>If three (or more) arguments are specified, the open mode (including optional encoding) in the second argument are distinct from the filename in the third. If MODE is &lt;code&gt;&amp;lt;&lt;/code&gt; or nothing, the file is opened for input. If MODE is &lt;code&gt;&amp;gt;&lt;/code&gt;, the file is opened for output, with existing files first being truncated (&quot;clobbered&quot;) and nonexisting files newly created. If MODE is &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , the file is opened for appending, again being created if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e10a47d1100af2f4e741fa10c714b1d6eb83c05" translate="yes" xml:space="preserve">
          <source>If true (the default value), we autogenerate a JavaScript in the output directory, and set our HTML files to use it. Currently, the JavaScript is used only to get the browser to remember what stylesheet it prefers. TODO: continue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634c500cd04e5d0b913158c1c6e9ccddc0f9bc06" translate="yes" xml:space="preserve">
          <source>If true (the default value), we autogenerate some CSS files in the output directory, and set our HTML files to use those. TODO: continue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed672b2b381b7d94345040cc4eb4667fc3d97c8b" translate="yes" xml:space="preserve">
          <source>If true and a code reference, will be called with the symbolic link name and the directory it lives in as arguments. Otherwise, if true and warnings are on, warning &quot;symbolic_link_name is a dangling symbolic link\n&quot; will be issued. If false, the dangling symbolic link will be silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3fdfd0a40c103a2211bdac354013485a8b6be3" translate="yes" xml:space="preserve">
          <source>If true is returned, those arguments &lt;b&gt;should&lt;/b&gt; in theory be processed with quadmath_snprintf(), but in case there is more than one such format specifier (see &lt;a href=&quot;#quadmath_format_single&quot;&gt;quadmath_format_single&lt;/a&gt;), and if there is anything else beyond that one (even just a single byte), they &lt;b&gt;cannot&lt;/b&gt; be processed because quadmath_snprintf() is very strict, accepting only one format spec, and nothing else. In this case, the code should probably fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0653af7b3995880e12e86c1b6df46b2abdc8adcd" translate="yes" xml:space="preserve">
          <source>If true then &lt;code&gt;Configure&lt;/code&gt; will check each hostname given that it exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e192827bd7624c2eefa078600e9250f2fd8d099" translate="yes" xml:space="preserve">
          <source>If true then &lt;code&gt;make test&lt;/code&gt; may attempt to connect to hosts given in the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd986bfa48b8d9de9607995da53c20f474abed0" translate="yes" xml:space="preserve">
          <source>If true, &lt;code&gt;Test::Harness&lt;/code&gt; will output the verbose results of running its tests. Setting &lt;code&gt;$Test::Harness::verbose&lt;/code&gt; will override this, or you can use the &lt;code&gt;-v&lt;/code&gt; switch in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44529fee5d3eb44416500710e8dc9bea67c57ded" translate="yes" xml:space="preserve">
          <source>If true, STDERR and STDOUT are the same filehandle. This may cause breakage if STDERR contains anything resembling TAP format, but does allow exact synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1c5580c4e77a7f54f6b42fc274494bf3ad60b5" translate="yes" xml:space="preserve">
          <source>If true, make install will be verbose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2c5a318ef60df6e780dd24e4ef173dd23b6b3c" translate="yes" xml:space="preserve">
          <source>If true, uses proxy subs. See &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Constant::ProxySubs&quot;&gt;ExtUtils::Constant::ProxySubs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b670decc24a56dd9e5e0101143f31051cabe4b" translate="yes" xml:space="preserve">
          <source>If two arrays smartmatch each other, then they are deep copies of each others' values, as this example reports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acee3e1d7871c445b42f87ba144a405a067cf53f" translate="yes" xml:space="preserve">
          <source>If two characters here and next (as code points) are composable (including Hangul Jamo/Syllables and Composition Exclusions), it returns the code point of the composite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42360b0ce037c1aa50c01166917adec5fecc2590" translate="yes" xml:space="preserve">
          <source>If type is non-Unix (see &lt;a href=&quot;#fileparse_set_fstype&quot;&gt;fileparse_set_fstype&lt;/a&gt;) then the pattern matching for suffix removal is performed case-insensitively, since those systems are not case-sensitive when opening existing files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd48f2e17e1f717f9f154bd3292076827285d01" translate="yes" xml:space="preserve">
          <source>If umask(2) is not implemented on your system and you are trying to restrict access for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a1f447b6ee3db12f569b14d8d5a13cc81a620d" translate="yes" xml:space="preserve">
          <source>If unsafe signals is in effect, then signal handling is not thread-safe, and the &lt;code&gt;-&amp;gt;kill()&lt;/code&gt; signalling method cannot be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70663a96a9c0a32a9a2fde13b31bf56729b3885e" translate="yes" xml:space="preserve">
          <source>If upgrading is in effect, returns PI, rounded to N digits with the current rounding mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d763c9ab9f9ca920e89e5e82fe0a4c19ddec98c7" translate="yes" xml:space="preserve">
          <source>If used with a single argument in a scalar context, returns the string consisting of the code points of the named sequence, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no named sequence by that name exists. If used with a single argument in a list context, it returns the list of the ordinals of the code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaceddc3b74ab2a5e89e9e5517463a3fd4ed9e1" translate="yes" xml:space="preserve">
          <source>If used with no arguments in a list context, it returns a hash with the names of all the named sequences as the keys and their sequences as strings as the values. Otherwise, it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or an empty list depending on the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1f504c6467cdb5b94820cfba3df9e446f6d20a" translate="yes" xml:space="preserve">
          <source>If using &lt;b&gt;BerkeleyDB&lt;/b&gt; isn't an option, there are a number of modules available on CPAN that can be used to implement locking. Each one implements locking differently and has different goals in mind. It is therefore worth knowing the difference, so that you can pick the right one for your application. Here are the three locking wrappers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d8dee3f60efc11f28b77ac32acb4a0d6da837c" translate="yes" xml:space="preserve">
          <source>If using a Perl file as a source, optional switches may be passed which will be used when invoking the perl executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c2e41b4856cbf4192df9fdfdae8eb4debbc3b0" translate="yes" xml:space="preserve">
          <source>If using crypt() on a Unicode string (which</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cfcf2e0c855940dc64008801ae135f972cfd74" translate="yes" xml:space="preserve">
          <source>If using ftp remember to transfer the distribution in binary format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fa09de90b513e62acb77e553ed8a67bf3a34b1" translate="yes" xml:space="preserve">
          <source>If using gcc, you can add the &lt;code&gt;-std=c89&lt;/code&gt; option which will hopefully catch most of these unportabilities. (However it might also catch incompatibilities in your system's header files.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664754e120bf0080d8c4c2636edd9c4d43e0b86a" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding&lt;/code&gt; pragma without an explicit encoding name, the PERL_ENCODING environment variable is consulted for an encoding name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca052b74a8f394827d7f4faa9fd4f5bf5109bf" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;gcc -Wall&lt;/code&gt; note that not all the possible warnings (like &lt;code&gt;-Wunitialized&lt;/code&gt; ) are given unless you also compile with &lt;code&gt;-O&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f6a03b7ab2b25638142acde2118920ba4f7593" translate="yes" xml:space="preserve">
          <source>If we add a &lt;code&gt;(*PRUNE)&lt;/code&gt; before the count like the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49196da102bf295b3091d7157018af8c9071a57" translate="yes" xml:space="preserve">
          <source>If we call a method on a &lt;code&gt;Child&lt;/code&gt; object and that method is not defined in the &lt;code&gt;Child&lt;/code&gt; class, Perl will look for that method in the &lt;code&gt;Parent&lt;/code&gt; class and then, if necessary, in the &lt;code&gt;Grandparent&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef968fd799fd1b1033f77f3853f27266c25aff48" translate="yes" xml:space="preserve">
          <source>If we can tell that there is no valid start point then we don't bother running the interpreter at all. Likewise, if we know from the analysis phase that we cannot detect a short-cut to the start position, we go straight to the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd027f23ebc9bafdd0ef83ac988a2e8f6205abb" translate="yes" xml:space="preserve">
          <source>If we encrypt this with &lt;code&gt;mkrot13&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b742d69e435d1dc4ae57558eae468b9e3038bfd1" translate="yes" xml:space="preserve">
          <source>If we have a string which needs to be modified, while a regex will almost always be much more flexible, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, an oft underused tool, can still be a useful. One scenario might be replace all vowels with another character. The regex solution might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e855f5e5eecc49e2e1826c2e605b2358ee8b64" translate="yes" xml:space="preserve">
          <source>If we look at any of the C code generated by any of the examples except example 1, you will notice a number of references to ST(n), where n is usually 0. &quot;ST&quot; is actually a macro that points to the n'th argument on the argument stack. ST(0) is thus the first argument on the stack and therefore the first argument passed to the XSUB, ST(1) is the second argument, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b727c2115d816f7a5edf98b373babd311821be" translate="yes" xml:space="preserve">
          <source>If we replace the &lt;code&gt; (?{local $c = $c + 1;})&lt;/code&gt; with &lt;code&gt; (?{$c = $c + 1;})&lt;/code&gt;, the variable changes are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b22701c7de1c1b18f83a3da253320877e6db57e" translate="yes" xml:space="preserve">
          <source>If we want to call the function in scalar context, we have to do a bit more work. We can really have any code we like inside the braces, so we simply have to end with the scalar reference, although how you do that is up to you, and you can use code inside the braces. Note that the use of parens creates a list context, so we need &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; to force the scalar context on the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa4af82f261a5bfccad859728bbc5e698f2ad5a" translate="yes" xml:space="preserve">
          <source>If we want to sort by the hash value instead, we use the hash key to look it up. We still get out a list of keys, but this time they are ordered by their value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0a23be20e0afdc53dc3805694c934e04c1d63f" translate="yes" xml:space="preserve">
          <source>If we wanted to include the mp3's title in the greeting, we could override the method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215abf71d62aea6c4bacd7ab63842ca42cbc8d09" translate="yes" xml:space="preserve">
          <source>If we were interested in performance, not in code compactness, in the success branch we would not use &lt;code&gt;XPUSHs&lt;/code&gt; macros, but &lt;code&gt;PUSHs&lt;/code&gt; macros, and would pre-extend the stack before pushing the return values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed55ede23a733b9689b8f241805b425f9dc0c341" translate="yes" xml:space="preserve">
          <source>If we've done things right, you'll probably want to write a new source, rather than sub-classing this (see &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; for that).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433a6e7876c97a91d0108a2079322b6917a252c6" translate="yes" xml:space="preserve">
          <source>If what the angle brackets contain is a simple scalar variable (for example, &lt;code&gt;$foo&lt;/code&gt; ), then that variable contains the name of the filehandle to input from, or its typeglob, or a reference to the same. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b51d046d4f4e47130f90dab13b7fc186caff6e3" translate="yes" xml:space="preserve">
          <source>If what's within the angle brackets is neither a filehandle nor a simple scalar variable containing a filehandle name, typeglob, or typeglob reference, it is interpreted as a filename pattern to be globbed, and either a list of filenames or the next filename in the list is returned, depending on context. This distinction is determined on syntactic grounds alone. That means &lt;code&gt;&amp;lt;$x&amp;gt;&lt;/code&gt; is always a &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline()&lt;/a&gt;&lt;/code&gt; from an indirect handle, but &lt;code&gt;&amp;lt;$hash{key}&amp;gt;&lt;/code&gt; is always a &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt;. That's because &lt;code&gt;$x&lt;/code&gt; is a simple scalar variable, but &lt;code&gt;$hash{key}&lt;/code&gt; is not--it's a hash element. Even &lt;code&gt;&amp;lt;$x &amp;gt;&lt;/code&gt; (note the extra space) is treated as &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;(&quot;$x &quot;)&lt;/code&gt; , not &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline($x)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b842d8a427447b55d56f0f86ffb1407d7bbf70b" translate="yes" xml:space="preserve">
          <source>If whitespace is mostly irrelevant, how does one include space characters in an extended regexp? The answer is to backslash it &lt;code&gt;'\ '&lt;/code&gt; or put it in a character class &lt;code&gt;[ ]&lt;/code&gt; . The same thing goes for pound signs: use &lt;code&gt;\#&lt;/code&gt; or &lt;code&gt;[#]&lt;/code&gt;. For instance, Perl allows a space between the sign and the mantissa or integer, and we could add this to our regexp as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac523288e8907db49cd44aeec42c46983d54f41" translate="yes" xml:space="preserve">
          <source>If you</source>
          <target state="translated">Si tú...</target>
        </trans-unit>
        <trans-unit id="a97a499d1638eac60812016983597e71f2e68467" translate="yes" xml:space="preserve">
          <source>If you &quot;mmap&quot; the file with the File::Map module from CPAN, you can virtually load the entire file into a string without actually storing it in memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fdf3b9fc81571db27bb02cd29a8e0b53b10cc5" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; without ever waiting on your children, you will accumulate zombies. On some systems, you can avoid this by setting &lt;code&gt;$SIG{CHLD}&lt;/code&gt; to &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; . See also &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt; for more examples of forking and reaping moribund children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3342529f369584d116691354aca02d8a637cdc3f" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; without ever waiting on your children, you will accumulate zombies. On some systems, you can avoid this by setting &lt;code&gt;$SIG{CHLD}&lt;/code&gt; to &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; . See also &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more examples of forking and reaping moribund children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb90d14b290d4320ac5634dcbc5bece03b18182e" translate="yes" xml:space="preserve">
          <source>If you actually need to be able to get a real reference back from each hash entry, you can use the Tie::RefHash module, which does the required work for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0863c378529bcaaf05a08fbe7b9d62fcdd40f533" translate="yes" xml:space="preserve">
          <source>If you actually want to bless into the stringified version of the reference supplied, you need to stringify it yourself, for example by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7632fd79ddaeaed4fd83611844af65a8558ccb38" translate="yes" xml:space="preserve">
          <source>If you actually want to pack Unicode codepoints, use the &lt;code&gt;&quot;U&quot;&lt;/code&gt; format instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a06cdba55cf94e2b0d8887615268f65da700c2" translate="yes" xml:space="preserve">
          <source>If you add the &lt;code&gt;stringify&lt;/code&gt; import option to your &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads&lt;/code&gt; declaration, then using a threads object in a string or a string context (e.g., as a hash key) will cause its ID to be used as the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f0b688e7f7db776b8a41a0294b1be395b96046" translate="yes" xml:space="preserve">
          <source>If you already have the data in memory or if you want to keep your code simple, you can use one of the sv_cat*() variants, such as sv_catpvn(). If you want to insert anywhere in the string you can use sv_insert() or sv_insert_flags().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e6e027d69f3e21d5d8d4eaafdf5a18b7a271a0" translate="yes" xml:space="preserve">
          <source>If you also specify the &lt;code&gt;save&lt;/code&gt; option newly passing tests will be excluded from subsequent runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2315b4f443374dc91536026901e2322007448a6" translate="yes" xml:space="preserve">
          <source>If you alter your @_ arguments in a subroutine (such as with &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;), the stack backtrace will not show the original values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcce70763746b8ab89abce0fda8214efc82356bb" translate="yes" xml:space="preserve">
          <source>If you are accustomed to using perl from various command-line shells found in UNIX environments, you will be less than pleased with what Windows offers by way of a command shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75851b1a6055f8c9601d27bb8e4f2638f62e5f5e" translate="yes" xml:space="preserve">
          <source>If you are advanced enough with building C code, here is a suggestion to speed up building perl, and the later &lt;code&gt;make test&lt;/code&gt; . Try to keep your PATH enviromental variable with the least number of folders possible (remember to keep your C compiler's folders there). &lt;code&gt;C:\WINDOWS\system32&lt;/code&gt; or &lt;code&gt;C:\WINNT\system32&lt;/code&gt; depending on your OS version should be first folder in PATH, since &quot;cmd.exe&quot; is the most commonly launched program during the build and later testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6e47c6af55350e3bd275924a9467fa5be92cb6" translate="yes" xml:space="preserve">
          <source>If you are author of a package and wonder if your $VERSION can be parsed, please try the above method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9341f5fe0aca50dc1a438efa6a2a0829ec331a7" translate="yes" xml:space="preserve">
          <source>If you are building Perl from source, the Perl test suite file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd709122178ec9749d3b052901d53a7e7c059f96" translate="yes" xml:space="preserve">
          <source>If you are calling &lt;b&gt;pod2usage()&lt;/b&gt; from a module and want to display that module's POD, you can use this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b3eed9ee23b3eafd899b21c185d1c6a6521682" translate="yes" xml:space="preserve">
          <source>If you are careful, it is possible to mix API calls with the tied hash/array interface in the same piece of code. Although only a few of the methods used to implement the tied interface currently make use of the cursor, you should always assume that the cursor has been changed any time the tied hash/array interface is used. As an example, this code will probably not do what you expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46443ee64846124969f99d9a251a1b5c33defa28" translate="yes" xml:space="preserve">
          <source>If you are coming here because code of yours is being adversely affected by someone's use of this variable, you can usually work around it by doing this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580a992ac4c85198002e3da1ab0af0114ef2843d" translate="yes" xml:space="preserve">
          <source>If you are compiling Perl on a remotely-mounted NFS filesystem, the test io/fs.t may fail on test #18. This appears to be a bug in HP-UX and no fix is currently available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b33c19354a1a90e2387b434d12153c90f20f627" translate="yes" xml:space="preserve">
          <source>If you are compiling in PASE, then &quot;make install&quot; is the only thing you will need to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81413ae9ed04e602e1a5e2aa34f9a9228c164afc" translate="yes" xml:space="preserve">
          <source>If you are compiling on AIX, simply do a &quot;make install&quot; on the AIX box. Once the install finishes, tar up the /QOpenSys/perl directory. Transfer the tarball to the OS/400 using FTP with the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c32dcfc58ac17c09099d20bc9bc3a8e41bba8b" translate="yes" xml:space="preserve">
          <source>If you are content with the test result, just &quot;make install&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6a61423fd16b04dc17486be56b73db7a8c3506" translate="yes" xml:space="preserve">
          <source>If you are creating a PerlIO layer, you may want to be lazy, in other words, implement only the methods that interest you. The other methods you can either replace with the &quot;blank&quot; methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2de75d9b2a463fc1f9325a0ae503a9f6861718" translate="yes" xml:space="preserve">
          <source>If you are developing a suite of related modules/classes it's good practice to use nested classes with a common prefix as this will avoid namespace clashes. For example: Xyz::Control, Xyz::View, Xyz::Model etc. Use the modules in this list as a naming guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3f54058ec5c3861eafa70f589fb5c16feca4d3" translate="yes" xml:space="preserve">
          <source>If you are doing a blocking &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread()&lt;/a&gt;&lt;/code&gt;, you'll have to arrange for an alarm handler to provide a timeout (see &lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;). If you have a non-blocking open, you'll likely have a non-blocking read, which means you may have to use a 4-arg &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select()&lt;/a&gt;&lt;/code&gt; to determine whether I/O is ready on that device (see &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eb5f2751e7b3c976fa3693eb1b047c9ea468b5" translate="yes" xml:space="preserve">
          <source>If you are doing something complex, such as moving through many pages and forms or a web site, you can use &lt;a href=&quot;http://search.cpan.org/perldoc/WWW::Mechanize&quot;&gt;WWW::Mechanize&lt;/a&gt;. See its documentation for all the details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9b4d7923308acf7ee68c13a2cd11f90f3c70ce" translate="yes" xml:space="preserve">
          <source>If you are experiencing variable suicide, that &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $f&lt;/code&gt; in the subroutine doesn't pick up a fresh copy of the &lt;code&gt;$f&lt;/code&gt; whose value is &lt;code&gt;'foo'&lt;/code&gt; . The output shows that inside the subroutine the value of &lt;code&gt;$f&lt;/code&gt; leaks through when it shouldn't, as in this output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbeae6d94c0568a9909c55582ce46133df1b3000" translate="yes" xml:space="preserve">
          <source>If you are familiar with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b5540260d1429f031cae6d4fea34d1c0219ed0" translate="yes" xml:space="preserve">
          <source>If you are forking many processes in parallel that are all creating temporary files, you may need to reset the random number seed using srand(EXPR) in each child else all the children will attempt to walk through the same set of random file names and may well cause themselves to give up if they exceed the number of retry attempts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79eaecd3ef824520bc14f0a6f551bc580fb007f0" translate="yes" xml:space="preserve">
          <source>If you are going to convert the script to a module you can use the opportunity to redesign the interface. The guidelines for module creation above include many of the issues you should consider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c8864889db08a398c2a1fd61fb5557dd86b1b1" translate="yes" xml:space="preserve">
          <source>If you are going to put something onto the Perl stack, you need to know where to put it. This is the purpose of the macro &lt;code&gt;dSP&lt;/code&gt; --it declares and initializes a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf3f133791811ca9201975358ebf1e226d3c50a" translate="yes" xml:space="preserve">
          <source>If you are going to use the HP DCE package, the library used for threading is /usr/lib/libcma.sl, but there have been multiple updates of that library over time. Perl will build with the first version, but it will not pass the test suite. Older Oracle versions might be a compelling reason not to update that library, otherwise please find a newer version in one of the following patches: PHSS_19739, PHSS_20608, or PHSS_23672</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330882464199f1a0851acc4b79e3a966cdc91c15" translate="yes" xml:space="preserve">
          <source>If you are going to use this method you have to be aware of a possible memory leak which can arise under very specific circumstances. To explain these circumstances you need to know a bit about the flow of control between Perl and the callback routine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91073f8278c247bf05c5742a59e2d0906bf12cbd" translate="yes" xml:space="preserve">
          <source>If you are going to write a platform specific MM package, please try to limit the necessary overrides to primitive methods, and if it is not possible to do so, let's work out how to achieve that gain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3470649433d76902fec9be392ea404a581213006" translate="yes" xml:space="preserve">
          <source>If you are having trouble with square brackets then consider switching your rlogin or telnet client. Try to avoid older 3270 emulators and ISHELL for working with Perl on USS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be777d0c50e7b77da7283f3ff8a7e540b7f7344c" translate="yes" xml:space="preserve">
          <source>If you are in any doubt about the license situation, contact either the Berkeley DB authors or the author of DB_File. See &lt;a href=&quot;#AUTHOR&quot;&gt;AUTHOR&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99320978b9537887ebc85e1dfd4bdf0910cbc812" translate="yes" xml:space="preserve">
          <source>If you are in doubt which package contains a file you are missing, try to find an installation that has that file. Then do a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92276bc0e44e1b658a5288e18f73cfbd284b63bb" translate="yes" xml:space="preserve">
          <source>If you are intending to manipulate bitstrings, be certain that you're supplying bitstrings: If an operand is a number, that will imply a &lt;b&gt;numeric&lt;/b&gt; bitwise operation. You may explicitly show which type of operation you intend by using &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;0+&lt;/code&gt; , as in the examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e74d8ccd8d67f221dc38d69397982438ef8887" translate="yes" xml:space="preserve">
          <source>If you are interested in the guts underlying these systems, check out &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81bce975381ffe867c89af365021d38913e30eb" translate="yes" xml:space="preserve">
          <source>If you are interested in the z/OS (formerly known as OS/390) and POSIX-BC (BS2000) ports of Perl then see the perl-mvs mailing list. To subscribe, send an empty message to perl-mvs-subscribe@perl.org.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d9bbb97bd39f15f79a0ad6f3bd53d77bb54ef1" translate="yes" xml:space="preserve">
          <source>If you are looking for a &quot;bar&quot; that isn't preceded by a &quot;foo&quot;, &lt;code&gt;/(?!foo)bar/&lt;/code&gt; will not do what you want. That's because the &lt;code&gt;(?!foo)&lt;/code&gt; is just saying that the next thing cannot be &quot;foo&quot;--and it's not, it's a &quot;bar&quot;, so &quot;foobar&quot; will match. Use look-behind instead (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20427718038bfba8c53137f8646eb9abfc2ff46" translate="yes" xml:space="preserve">
          <source>If you are looking for a class that does everything for you you don't define yourself, use the &lt;code&gt;Tie::StdScalar&lt;/code&gt; class, not the &lt;code&gt;Tie::Scalar&lt;/code&gt; one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7787fb3feb00a627232c8ef4ce3954c9d7deed73" translate="yes" xml:space="preserve">
          <source>If you are looking for a table of contents to the Perl library modules documentation, see the &lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;perltoc&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fac826063cfc00ef4ae02f7626b0848d723ad5d" translate="yes" xml:space="preserve">
          <source>If you are looking for an example, I recommend that you look at the simple example in the Memoize::Expire documentation, or at the code for Memoize::Expire itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33652a525614ae7d89321a43fb11331d7e5b6fa" translate="yes" xml:space="preserve">
          <source>If you are making use of the Perl stack pointer in your code you must always refresh the local copy using SPAGAIN whenever you make use of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0468c5bae6319f4655b5720508b9d190b598ea2a" translate="yes" xml:space="preserve">
          <source>If you are on a Unix-like system, you might be able to get away with a system call where you put an &lt;code&gt;&amp;amp;&lt;/code&gt; on the end of the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fb92ccab7935bd1e0cc2c8300a7bef29eb75de" translate="yes" xml:space="preserve">
          <source>If you are on a non-UNIX platform &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;, as some features may be unimplemented or work differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f59ff52a71652ecb89231c85ecae2ce17688eb9" translate="yes" xml:space="preserve">
          <source>If you are on a system that correctly implements &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; and you use the example appending code from &quot;perldoc -f flock&quot; everything will be OK even if the OS you are on doesn't implement append mode correctly (if such a system exists). So if you are happy to restrict yourself to OSs that implement &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; (and that's not really much of a restriction) then that is what you should do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d7fa3e38420fc843370b116c9be081ea5603e0" translate="yes" xml:space="preserve">
          <source>If you are only exporting function names it is recommended to omit the ampersand, as the implementation is faster this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de91fd61e5dabce87e62b432c1af2d2e0384486" translate="yes" xml:space="preserve">
          <source>If you are overriding any of these methods in your Makefile.PL (in the MY class), please report that to the makemaker mailing list. We are trying to minimize the necessary method overrides and switch to data driven Makefile.PLs wherever possible. In the long run less methods will be overridable via the MY class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25095e5b9b6ab11015f95ba50809b8be1a58758d" translate="yes" xml:space="preserve">
          <source>If you are particularly interested in customizing this module's output even more, see the source and/or write to me.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40865e3f4f814dc75edbc20fbc8762037c6c824" translate="yes" xml:space="preserve">
          <source>If you are printing IVs, UVs, or NVS instead of the stdio(3) style formatting codes like &lt;code&gt;%d&lt;/code&gt; , &lt;code&gt;%ld&lt;/code&gt; , &lt;code&gt;%f&lt;/code&gt; , you should use the following macros for portability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b082a380f246d61dd682cd511f2ea77809e32735" translate="yes" xml:space="preserve">
          <source>If you are printing addresses of pointers, use UVxf combined with PTR2UV(), do not use %lx or %p.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f4ed221243b9dde4f0f2cc29b067e485bbf822" translate="yes" xml:space="preserve">
          <source>If you are reading this documentation, looking for a replacement for the &lt;code&gt;FileHandle&lt;/code&gt; package, then I suggest you read the documentation for &lt;code&gt;IO::File&lt;/code&gt; too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c40246fed4e0a31f96c46a72d0a85e56bbe29c3" translate="yes" xml:space="preserve">
          <source>If you are reading this in the future then it's possible that the state of the art has changed. We recommend you start by reading the perlootut document in the latest stable release of Perl, rather than this version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0add6c557074aa94dbce442362b0e5da76c5396" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Bzip2 can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e4df4e4f27db0bf9a46e2a1941e85758d61068" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Deflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e65ffc69fed189ecd525fba0988f92db4e7035" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Gzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b6ef257ae9881b6bd3fd8eaa22b1a4c05c99ca" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::RawDeflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c423a94c7fc5cb61812044d70c6c094354f683a" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Zip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fea5722273a1695c99b2d6f3f73bb1257cd24c3" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::AnyInflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2972d5cdbb1eb98b989631b3ded397e40e59e75" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::AnyUncompress can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18aa1921698d337e93a7e4edaa2b66e95de457bf" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Bunzip2 can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86eb994b5def7f39f87b382b570ded31372309e" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Gunzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ab40d4db9fa577fb79380b48870abe52f5c6be" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Inflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70a4ecbd7bb1c964123dba102fe8a49b561cb00" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::RawInflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3608890b582bffd465c544ac9e831ad2b06501a0" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Unzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f53b731da5c3618fcf6d87c9434da7f9ed2f65" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.6.0 or better, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma allows fine control of what warnings are produced. See &lt;a href=&quot;perllexwarn&quot;&gt;perllexwarn&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8514c8e63d77882efdff2789324ce75a2c20f4" translate="yes" xml:space="preserve">
          <source>If you are running VOS Release 14.4.1 or later, you can obtain a pre-compiled, supported copy of perl by purchasing the GNU Tools product from Stratus Technologies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90113b08f2e5803b4f4fa9119cc6038c86b7bb42" translate="yes" xml:space="preserve">
          <source>If you are running a Unix derivative this value defaults to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae421a254aed7ffd059cb6be52110578a85cd308" translate="yes" xml:space="preserve">
          <source>If you are running experiments with embedding perl as a library into other applications, you might find MakeMaker is not sufficient. You'd better have a look at ExtUtils::Embed which is a collection of utilities for embedding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743cbf656ee357233b7747fd85635a26f54ae749" translate="yes" xml:space="preserve">
          <source>If you are running the tests from a emacs shell window, you may see failures in op/stat.t. Run &quot;dmake test-notty&quot; in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb661707e45d0fa6207ff65030fca0e35ac953eb" translate="yes" xml:space="preserve">
          <source>If you are running under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; (and if you aren't, why in the world aren't you?), you'll have to add some declarations to make it happy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767de91007776d2ff4bd67fc3c5e04ab7cebdfa3" translate="yes" xml:space="preserve">
          <source>If you are seeing spaces between the elements of your array when you print the array, you are probably interpolating the array in double quotes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bb00dc57c212c5f89aeced92e2138d70407e36" translate="yes" xml:space="preserve">
          <source>If you are stuck with older Perls, you can do Unicode with the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::String&quot;&gt;Unicode::String&lt;/a&gt; module, and character conversions using the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map8&quot;&gt;Unicode::Map8&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map&quot;&gt;Unicode::Map&lt;/a&gt; modules. If you are using Japanese encodings, you might try using the jperl 5.005_03.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4539f5703f218245f234df49c0b9e75bd10857f" translate="yes" xml:space="preserve">
          <source>If you are submitting a code patch there are several things that you can do to help the Perl 5 Porters accept your patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2ae6978c448ceee8a44a91cddc4545fb9e5c5e" translate="yes" xml:space="preserve">
          <source>If you are targetting an ARM device -- which currently includes the vast majority of phones and tablets -- you'll want to pass -Dcc=arm-unknown-nto-qnx8.0.0eabi-gcc to Configure. Alternatively, if you are targetting an x86 device, or using the simulator provided with the NDK, you should specify -Dcc=ntox86-gcc instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81847f52511bd6e6f2d950ba6b028d46d7fda4c" translate="yes" xml:space="preserve">
          <source>If you are testing locales (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), there are helper functions in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1005d40b52c8fba9456ef2a3b1ec6cff90f7233f" translate="yes" xml:space="preserve">
          <source>If you are testing only once, the standard module &lt;a href=&quot;list/util&quot;&gt;List::Util&lt;/a&gt; exports the function &lt;code&gt;first&lt;/code&gt; for this purpose. It works by stopping once it finds the element. It's written in C for speed, and its Perl equivalent looks like this subroutine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf3c25ab12fb420d9fdf6ea0144e15dc43f0fe2" translate="yes" xml:space="preserve">
          <source>If you are trying to use this instead of &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; to capture the output, you may find it easier to open a filehandle to a scalar (&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) and write to that instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f126d580b9d17eb9520e5adc6ebcd7b64cbce8" translate="yes" xml:space="preserve">
          <source>If you are trying to use this instead of &lt;code&gt;&lt;a href=&quot;write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; to capture the output, you may find it easier to open a filehandle to a scalar (&lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) and write to that instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0601abe3b8fe05fc06de5499fb9941a40db6bc0" translate="yes" xml:space="preserve">
          <source>If you are unable to send your report using &lt;b&gt;perlbug&lt;/b&gt; (most likely because your system doesn't have a way to send mail that perlbug recognizes), you may be able to use this tool to compose your report and save it to a file which you can then send to &lt;b&gt;perlbug@perl.org&lt;/b&gt; using your regular mail client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd788f693f0912cff62f6c5004a3304201e94790" translate="yes" xml:space="preserve">
          <source>If you are used to working with a version of Perl prior to the introduction of lexically scoped warnings, or have code that uses both lexical warnings and &lt;code&gt;$^W&lt;/code&gt; , this section will describe how they interact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c883172a7bd8c24338f9dd7a287c030969e4c2" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt; or one of its subclasses, you can call the &lt;code&gt;autoflush&lt;/code&gt; method to change the settings of the filehandle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ca3a901cfd38d2b33b77415f58b3c173825a91" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;HePV&lt;/code&gt; to get values to pass to &lt;code&gt;newSVpvn()&lt;/code&gt; to create a new SV, you should consider using &lt;code&gt;newSVhek(HeKEY_hek(he))&lt;/code&gt; as it is more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987d668924ef21e965c8815374cd5ece61317689" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;nanosleep&lt;/code&gt; for something else than mixing sleeping with signals, give some thought to whether Perl is the tool you should be using for work requiring nanosecond accuracies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a45f762f42b66675541c22b88f50402f53057c" translate="yes" xml:space="preserve">
          <source>If you are using ACLs, there is a pragma called &lt;code&gt;filetest&lt;/code&gt; that may produce more accurate results than the bare stat() mode bits. When under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; the above-mentioned filetests test whether the permission can(not) be granted using the access(2) family of system calls. Also note that the &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; may under this pragma return true even if there are no execute permission bits set (nor any extra execute permission ACLs). This strangeness is due to the underlying system calls' definitions. Note also that, due to the implementation of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; , the &lt;code&gt;_&lt;/code&gt; special filehandle won't cache the results of the file tests when this pragma is in effect. Read the documentation for the &lt;code&gt;filetest&lt;/code&gt; pragma for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536f259afd4833a386595561631d799b0872387d" translate="yes" xml:space="preserve">
          <source>If you are using ACLs, there is a pragma called &lt;code&gt;filetest&lt;/code&gt; that may produce more accurate results than the bare stat() mode bits. When under &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; the above-mentioned filetests test whether the permission can(not) be granted using the access(2) family of system calls. Also note that the &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; may under this pragma return true even if there are no execute permission bits set (nor any extra execute permission ACLs). This strangeness is due to the underlying system calls' definitions. Note also that, due to the implementation of &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; , the &lt;code&gt;_&lt;/code&gt; special filehandle won't cache the results of the file tests when this pragma is in effect. Read the documentation for the &lt;code&gt;filetest&lt;/code&gt; pragma for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb0cc5912b1065f25576985628bc261176328a3" translate="yes" xml:space="preserve">
          <source>If you are using MacOS, the same concerns apply. MacPerl (for Classic environments) comes with a simple editor. Popular external editors are BBEdit ( &lt;a href=&quot;http://www.barebones.com/products/bbedit/&quot;&gt;http://www.barebones.com/products/bbedit/&lt;/a&gt; ) or Alpha ( &lt;a href=&quot;http://www.his.com/~jguyer/Alpha/Alpha8.html&quot;&gt;http://www.his.com/~jguyer/Alpha/Alpha8.html&lt;/a&gt; ). MacOS X users can use Unix editors as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4548a312b12b5507979ee1df1e5c700b717005" translate="yes" xml:space="preserve">
          <source>If you are using Plack (which most frameworks do), then &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::Rewrite&quot;&gt;Plack::Middleware::Rewrite&lt;/a&gt; is worth looking at if you are migrating from Apache or have URL's you want to always redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b08c775dc3592188f9dd4afa0190ccbb806664" translate="yes" xml:space="preserve">
          <source>If you are using Windows, you can use any editor that lets you work with plain text, such as NotePad or WordPad. Word processors, such as Microsoft Word or WordPerfect, typically do not work since they insert all sorts of behind-the-scenes information, although some allow you to save files as &quot;Text Only&quot;. You can also download text editors designed specifically for programming, such as Textpad ( &lt;a href=&quot;http://www.textpad.com/&quot;&gt;http://www.textpad.com/&lt;/a&gt; ) and UltraEdit ( &lt;a href=&quot;http://www.ultraedit.com/&quot;&gt;http://www.ultraedit.com/&lt;/a&gt; ), among others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b14c31c340803d7d1a8907e87c3b623cebca0d" translate="yes" xml:space="preserve">
          <source>If you are using a SOCKS firewall, you will need to compile perl and link it with the SOCKS library. This is what is normally called a 'socksified' perl. With this executable you will be able to connect to servers outside the firewall as if it were not there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c561106308348f3755c72923d0a263a80ca5d3" translate="yes" xml:space="preserve">
          <source>If you are using a regex here, you have to use the quotes as shown or it won't work. Also note that regex handling is tricky even for the experienced. Use this feature with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a12a925a69a2c6041232d382cd6683ae36d2da6" translate="yes" xml:space="preserve">
          <source>If you are using a version of Perl earlier than 5.004_57, the tied array interface is quite limited. In the example script above &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; or determining the array length will not work with a tied array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360a39abe6795afd63327f3e470a092ad595cbfe" translate="yes" xml:space="preserve">
          <source>If you are using cpan-mac, just drop the folder on the &lt;b&gt;installme&lt;/b&gt; droplet, and use the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc1c37b5a3d2067860bd9ba4aa2038972693c34" translate="yes" xml:space="preserve">
          <source>If you are using gcc, just</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd5d7695f8aa3649f7196f528604d5d3ae20e06" translate="yes" xml:space="preserve">
          <source>If you are using gcc, you would need to use -mcpu=v9 -m64 instead. This option is not yet supported as of gcc 2.95.2; from install/SPECIFIC in that release:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b374ff761647040bfef238a2f344855f86b957" translate="yes" xml:space="preserve">
          <source>If you are using locale purely for its characteristics related to things like its numeric and time formatting (and not &lt;code&gt;LC_CTYPE&lt;/code&gt; ), consider using a restricted form of the locale pragma (see &lt;a href=&quot;perllocale#The-%22use-locale%22-pragma&quot;&gt;The use locale pragma in perllocale&lt;/a&gt;) like &quot;&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale ':not_characters'&lt;/code&gt; &quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c7cadf9ebf06d221687f1101781684817f90c8" translate="yes" xml:space="preserve">
          <source>If you are using the DB_RECNO interface and you intend making use of &lt;code&gt;bval&lt;/code&gt; , you should check out &lt;a href=&quot;#The-'bval'-Option&quot;&gt;The 'bval' Option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e34b95c988ef9ff5f011e4473a6842bbc8f305e" translate="yes" xml:space="preserve">
          <source>If you are using the Visual C compiler, you can get the C runtime's command line wildcard expansion built into perl binary. The resulting binary will always expand unquoted command lines, which may not be what you want if you use a shell that does that for you. The expansion done is also somewhat less powerful than the approach suggested above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a368c00c8ef926e64658830003081d5eb361bb8d" translate="yes" xml:space="preserve">
          <source>If you are using zlib 1.2.0 or older, &lt;code&gt;zlibCompileFlags&lt;/code&gt; will return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d19a794a39cad7420e5c34d0bb89a7b77ddba40" translate="yes" xml:space="preserve">
          <source>If you are willing to accept all the defaults run Configure with &lt;b&gt;-de&lt;/b&gt;. However, several useful customizations are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5b1c2924a349d7291d8ad147e3c28043609419" translate="yes" xml:space="preserve">
          <source>If you are working with a git clone of the Perl repository, you will want to create a branch for your changes. This will make creating a proper patch much simpler. See the &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt; for details on how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a5c5d66921962ee5d2f131da55a853da5b0930" translate="yes" xml:space="preserve">
          <source>If you are working with data you know to be valid, you can speed your code up by using the &quot;nocheck&quot; variants, &lt;code&gt;timelocal_nocheck()&lt;/code&gt; and &lt;code&gt;timegm_nocheck()&lt;/code&gt; . These variants must be explicitly imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fdba02c2ad23e42f49d14ef3350c451024e80f" translate="yes" xml:space="preserve">
          <source>If you are writing a module to expand an already existing set of modules, please coordinate with the author of the package. It helps if you follow the same naming scheme and module interaction scheme as the original author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd2c8d5447831e253b224430edc3070841bc27c" translate="yes" xml:space="preserve">
          <source>If you are writing a package that &lt;code&gt;AUTOLOAD&lt;/code&gt; s, consider forcing an &lt;code&gt;AUTOLOAD&lt;/code&gt; for any constants explicitly imported by other packages or which are usually used when your package is &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5966f6f48bbef92de0797373659162ca479de0d" translate="yes" xml:space="preserve">
          <source>If you are writing new code, your first port of call should be one of the new &lt;code&gt;IO::Compress&lt;/code&gt; or &lt;code&gt;IO::Uncompress&lt;/code&gt; modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5955743a0fa060d529640f937e917d974a0fd9" translate="yes" xml:space="preserve">
          <source>If you ask for nothing in particular, you'll be asking for &lt;code&gt;less
'please'&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d232183f686226b9e4d9f0a9749bb4ab75350724" translate="yes" xml:space="preserve">
          <source>If you ask it to unmemoize a function that was never memoized, it croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac398bf0535c0d2bb95ebfd6fd6655ce0bd6b20" translate="yes" xml:space="preserve">
          <source>If you ask to override your chdir() built-in function,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae82346550e5f30641b00cfb651b5e652048f2e" translate="yes" xml:space="preserve">
          <source>If you attempt to compile Perl with (POSIX) threads on an 11.X system and also link in the GDBM library, then Perl will immediately core dump when it starts up. The only workaround at this point is to relink the GDBM library under 11.X, then relink it into Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372756b443de4017a28427029bf0d506d7081a2a" translate="yes" xml:space="preserve">
          <source>If you believe the scalar comes back as UTF-8, you will most likely want the UTF8 flag restored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1489e0cb25a613554ca1fb1509eb4766e09aaf06" translate="yes" xml:space="preserve">
          <source>If you believe you have found a security vulnerability in Perl, please email perl5-security-report@perl.org with details. This points to a closed subscription, unarchived mailing list. Please only use this address for security issues in the Perl core, not for modules independently distributed on CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2508e4352c00aad2e5cda3b21b798f7f8735a139" translate="yes" xml:space="preserve">
          <source>If you build with Visual C++ 2013 then three tests currently may fail with Daylight Saving Time related problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc747a2308602b12226c600429d56710358ba8a4" translate="yes" xml:space="preserve">
          <source>If you build with certain versions (e.g. 4.8.1) of gcc from www.mingw.org then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccb9cfffea038156e1e9bf29f1e74a06b7c692d" translate="yes" xml:space="preserve">
          <source>If you built perl with dynamic loading capability then that would also be the way to build xs based extensions. However, if you built perl with the default static linking you can still build xs based extensions for OS/390 but you will need to follow the instructions in ExtUtils::MakeMaker for building statically linked perl binaries. In the simplest configurations building a static perl + xs extension boils down to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bbe3ec8c3dbb9079b54edeba88cab20e6c6b9a" translate="yes" xml:space="preserve">
          <source>If you call $lh-&amp;gt;maketext(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b245ecec2ba731bc1217986ab8fe3ce3832fb6" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;plan()&lt;/code&gt; , don't call any of the other methods below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29b01f558f5cc8e37b47ab816256a32df3eb207" translate="yes" xml:space="preserve">
          <source>If you call a method that doesn't exist in a class, Perl will throw an error. However, if that class or any of its parent classes defines an &lt;code&gt;AUTOLOAD&lt;/code&gt; method, that &lt;code&gt;AUTOLOAD&lt;/code&gt; method is called instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945646515b442a128e465225a1d325a7ca2f3625" translate="yes" xml:space="preserve">
          <source>If you call a subroutine that is undefined, you would ordinarily get an immediate, fatal error complaining that the subroutine doesn't exist. (Likewise for subroutines being used as methods, when the method doesn't exist in any base class of the class's package.) However, if an &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine is defined in the package or packages used to locate the original subroutine, then that &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine is called with the arguments that would have been passed to the original subroutine. The fully qualified name of the original subroutine magically appears in the global $AUTOLOAD variable of the same package as the &lt;code&gt;AUTOLOAD&lt;/code&gt; routine. The name is not passed as an ordinary argument because, er, well, just because, that's why. (As an exception, a method call to a nonexistent &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;unimport&lt;/code&gt; method is just skipped instead. Also, if the AUTOLOAD subroutine is an XSUB, there are other ways to retrieve the subroutine name. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;Autoloading with XSUBs in perlguts&lt;/a&gt; for details.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71cdebace5c6abb01b81af0b4383d9f3787c035" translate="yes" xml:space="preserve">
          <source>If you can arrange for everyone to deal with this through references, it's cleaner code, although not so nice to look at. Here's a function that takes two array references as arguments, returning the two array elements in order of how many elements they have in them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b6ce07b51bd0ae187fbd5346ee2bf854f2bb10" translate="yes" xml:space="preserve">
          <source>If you can avoid it, don't, or if you can use a templating system, such as &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Template&quot;&gt;Text::Template&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Template&quot;&gt;Template&lt;/a&gt; Toolkit, do that instead. You might even be able to get the job done with &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9556f6832194ce02eb38bf13ea3951955c6d164" translate="yes" xml:space="preserve">
          <source>If you can do these things, you've started on the long road to Perl porting. Thanks for wanting to help make Perl better - and happy hacking!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5e8e457d8aab789523193251b0cae471debcb4" translate="yes" xml:space="preserve">
          <source>If you can go through your firewall with e.g. lynx, presumably with a command such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d913b1c7a6af16ecff397b87485204b5a8ebbc" translate="yes" xml:space="preserve">
          <source>If you can not reach the author for some reason contact the PAUSE admins at modules@perl.org who may be able to help, but each case is treated separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ff87acae1d2fe61dfcf4190a982955e52a9134" translate="yes" xml:space="preserve">
          <source>If you can't configure &lt;code&gt;TAP::Harness&lt;/code&gt; to do exactly what you want, and writing a plugin isn't an option, consider extending it. It is designed to be (mostly) easy to subclass, though the cases when sub-classing is necessary should be few and far between.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
