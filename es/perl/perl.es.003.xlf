<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="20739558e894101738b809f5961ce2ec15d5ef69" translate="yes" xml:space="preserve">
          <source>) which itself uses a C or C++ library, this probably happened:</source>
          <target state="translated">) which itself uses a C or C++ library, this probably happened:</target>
        </trans-unit>
        <trans-unit id="555eb93c31c2ff33a5f28e75533e9b13d5846308" translate="yes" xml:space="preserve">
          <source>) will return true but not actually set the bit. (Android)</source>
          <target state="translated">) will return true but not actually set the bit. (Android)</target>
        </trans-unit>
        <trans-unit id="76964257ee68bb8fca6aa80c00dd5fc9f2ec1a64" translate="yes" xml:space="preserve">
          <source>) with a character class, and no string shorter than 7 characters can possibly match.</source>
          <target state="translated">) with a character class, and no string shorter than 7 characters can possibly match.</target>
        </trans-unit>
        <trans-unit id="7b62adc5f8c3abd2eb86b6b1533af991c7edca58" translate="yes" xml:space="preserve">
          <source>) would otherwise terminate the loop. Again, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned only once. So if you're expecting a single value from a glob, it is much better to say</source>
          <target state="translated">) would otherwise terminate the loop. Again, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned only once. So if you're expecting a single value from a glob, it is much better to say</target>
        </trans-unit>
        <trans-unit id="4810b75ef754b672275a3af2b5a078e21220cbc9" translate="yes" xml:space="preserve">
          <source>) you must still call the &lt;code&gt;PUSHMARK&lt;/code&gt; macro before you can call any of the</source>
          <target state="translated">) you must still call the &lt;code&gt;PUSHMARK&lt;/code&gt; macro before you can call any of the</target>
        </trans-unit>
        <trans-unit id="dd68868e123f57ff7ef38ff164a231d0c0a76fe0" translate="yes" xml:space="preserve">
          <source>) you want to rebuild.</source>
          <target state="translated">) you want to rebuild.</target>
        </trans-unit>
        <trans-unit id="02a91090e67572144de2f031f1bbc5cd3c4a2837" translate="yes" xml:space="preserve">
          <source>)&quot;). They may derive from the project class. They may derive from some other class altogether. Or via multiple inheritance, it may derive from any mixture of these.</source>
          <target state="translated">)&quot;). They may derive from the project class. They may derive from some other class altogether. Or via multiple inheritance, it may derive from any mixture of these.</target>
        </trans-unit>
        <trans-unit id="e6747b651e587fe4f0093d11936c478b09099030" translate="yes" xml:space="preserve">
          <source>), &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;</source>
          <target state="translated">), &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba220f5b6e6ddf875b36f2ab6036ca1e73f1dfa8" translate="yes" xml:space="preserve">
          <source>), a binary distribution, or a non-core module (such as Tk, DBI, etc), then please see the documentation that came with that distribution to determine the correct place to report bugs.</source>
          <target state="translated">), a binary distribution, or a non-core module (such as Tk, DBI, etc), then please see the documentation that came with that distribution to determine the correct place to report bugs.</target>
        </trans-unit>
        <trans-unit id="7bbfc61f89bcf69b7d112e66034a33a974882ccb" translate="yes" xml:space="preserve">
          <source>), and into the Perl interpreter itself. Older versions of Perl contain bugs that may manifest themselves despite using the latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; from CPAN. There is no workaround for this other than upgrading to the latest version of Perl.</source>
          <target state="translated">), and into the Perl interpreter itself. Older versions of Perl contain bugs that may manifest themselves despite using the latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; from CPAN. There is no workaround for this other than upgrading to the latest version of Perl.</target>
        </trans-unit>
        <trans-unit id="a812a48223447ff4a00c61dec758c7f63fc7d624" translate="yes" xml:space="preserve">
          <source>), and the Korn shell (</source>
          <target state="translated">), and the Korn shell (</target>
        </trans-unit>
        <trans-unit id="5582722a931d80faec2c2604d236f55218c4801c" translate="yes" xml:space="preserve">
          <source>), but never achieved universal adoption. The &lt;a href=&quot;http://search.cpan.org/perldoc/Object::InsideOut&quot;&gt;Object::InsideOut&lt;/a&gt; module on CPAN provides a comprehensive implementation of this technique, and you may see it or other inside-out modules in the wild.</source>
          <target state="translated">), but never achieved universal adoption. The &lt;a href=&quot;http://search.cpan.org/perldoc/Object::InsideOut&quot;&gt;Object::InsideOut&lt;/a&gt; module on CPAN provides a comprehensive implementation of this technique, and you may see it or other inside-out modules in the wild.</target>
        </trans-unit>
        <trans-unit id="be22299e2551650ec9efe8f43bc6cd3596bc5a87" translate="yes" xml:space="preserve">
          <source>), but the literal data is in the specified encoding.</source>
          <target state="translated">), but the literal data is in the specified encoding.</target>
        </trans-unit>
        <trans-unit id="a13d6f5c889dfb868a65c83873de9aa4af2cc116" translate="yes" xml:space="preserve">
          <source>), especially many little-endians do the latter. This is only useful if you have select(), naturally.</source>
          <target state="translated">), especially many little-endians do the latter. This is only useful if you have select(), naturally.</target>
        </trans-unit>
        <trans-unit id="8e07233c7cb7d125bda9afb2d089c66b7362165d" translate="yes" xml:space="preserve">
          <source>), or &lt;code&gt;`glob a*b`&lt;/code&gt; (internal for ksh)? You need to specify your shell explicitly, like &lt;code&gt;`cmd /c copy a b`&lt;/code&gt; , since Perl cannot deduce which commands are internal to your shell.</source>
          <target state="translated">), or &lt;code&gt;`glob a*b`&lt;/code&gt; (internal for ksh)? You need to specify your shell explicitly, like &lt;code&gt;`cmd /c copy a b`&lt;/code&gt; , since Perl cannot deduce which commands are internal to your shell.</target>
        </trans-unit>
        <trans-unit id="0628cf3503bf4bbbc2ce5d535a543d4ded04903a" translate="yes" xml:space="preserve">
          <source>), or in configurable location (see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;).</source>
          <target state="translated">), or in configurable location (see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="2491f48be12de5636116c5c0fd0e291876db397a" translate="yes" xml:space="preserve">
          <source>), or libdlcompat to</source>
          <target state="translated">), or libdlcompat to</target>
        </trans-unit>
        <trans-unit id="b76430f0a63614c0383c191e6bda6c8b60a93154" translate="yes" xml:space="preserve">
          <source>), resulting in garbled output from the unrecognized attribute. Even if there were a way around that problem, the format doesn't know that the non-printing escape sequence is zero-length and would incorrectly format the output. For formatted output using color or other attributes, either use sprintf() instead or use formline() and then add the color or other attributes after formatting and before output.</source>
          <target state="translated">), resulting in garbled output from the unrecognized attribute. Even if there were a way around that problem, the format doesn't know that the non-printing escape sequence is zero-length and would incorrectly format the output. For formatted output using color or other attributes, either use sprintf() instead or use formline() and then add the color or other attributes after formatting and before output.</target>
        </trans-unit>
        <trans-unit id="27d4e0b75aa9979af9c60f48e50541e1084c0f21" translate="yes" xml:space="preserve">
          <source>), the C shell (</source>
          <target state="translated">), the C shell (</target>
        </trans-unit>
        <trans-unit id="8921d13cc2e9b0e14e6863e00a16b9ef9534ecde" translate="yes" xml:space="preserve">
          <source>), the Unicode version of normalization implemented by this module depends on your perl's version.</source>
          <target state="translated">), the Unicode version of normalization implemented by this module depends on your perl's version.</target>
        </trans-unit>
        <trans-unit id="7847189040b71cd51c130c2436b0e22235a3d864" translate="yes" xml:space="preserve">
          <source>), the remainder of the text, and the skipped prefix (if any). If a suitable delimited substring is not found, the first element of the array is the empty string, the second is the complete original text, and the prefix returned in the third element is an empty string.</source>
          <target state="translated">), the remainder of the text, and the skipped prefix (if any). If a suitable delimited substring is not found, the first element of the array is the empty string, the second is the complete original text, and the prefix returned in the third element is an empty string.</target>
        </trans-unit>
        <trans-unit id="f615146b0c5326d45eb59116d40a716c8d44a5d9" translate="yes" xml:space="preserve">
          <source>), while the latter is useful if $prefix is shared by many packages, e.g. if $prefix=</source>
          <target state="translated">), while the latter is useful if $prefix is shared by many packages, e.g. if $prefix=</target>
        </trans-unit>
        <trans-unit id="2ddb6d2a78b2c77758ab5631f959dfe309c8ee8b" translate="yes" xml:space="preserve">
          <source>). A few platforms need to be told the location of the dependent library explicitly. Use @dl_resolve_using for this.</source>
          <target state="translated">). A few platforms need to be told the location of the dependent library explicitly. Use @dl_resolve_using for this.</target>
        </trans-unit>
        <trans-unit id="6e0d8f2fab340ca3e828a3d60cdc124f6a7963fd" translate="yes" xml:space="preserve">
          <source>). Almost all internally-used routines in</source>
          <target state="translated">). Almost all internally-used routines in</target>
        </trans-unit>
        <trans-unit id="2e3178a172620d14bf2d6fd49572a7f8b300111a" translate="yes" xml:space="preserve">
          <source>). And it is &lt;code&gt;F&lt;/code&gt; if there is only a</source>
          <target state="translated">). And it is &lt;code&gt;F&lt;/code&gt; if there is only a</target>
        </trans-unit>
        <trans-unit id="191441749ef940028953be8e584c0530088683d7" translate="yes" xml:space="preserve">
          <source>). Anyhow, this module will neither refer to</source>
          <target state="translated">). Anyhow, this module will neither refer to</target>
        </trans-unit>
        <trans-unit id="740873c13ba23b24200aa2080c4fd9faa64f0e57" translate="yes" xml:space="preserve">
          <source>). If necessary, run just the failing scripts again sequentially and see if the failures go away.</source>
          <target state="translated">). If necessary, run just the failing scripts again sequentially and see if the failures go away.</target>
        </trans-unit>
        <trans-unit id="f4fa6174028d9716fdac2ed031a49f5b83d140fe" translate="yes" xml:space="preserve">
          <source>). If this Perl code makes calls into this XS code, and/or this XS code makes calls to the Perl code, one should be careful with the order of initialization.</source>
          <target state="translated">). If this Perl code makes calls into this XS code, and/or this XS code makes calls to the Perl code, one should be careful with the order of initialization.</target>
        </trans-unit>
        <trans-unit id="d00d1fa6ee0d8fc40d4a6589099f366d00ea1908" translate="yes" xml:space="preserve">
          <source>). In this model, each thread runs in its own Perl interpreter, and any data sharing between threads must be explicit. The user-level interface for</source>
          <target state="translated">). In this model, each thread runs in its own Perl interpreter, and any data sharing between threads must be explicit. The user-level interface for</target>
        </trans-unit>
        <trans-unit id="7d5472f1ffe12c98e459541b4ae02160b6a93b4f" translate="yes" xml:space="preserve">
          <source>). It is &lt;code&gt;S&lt;/code&gt; if there are distinct folds,</source>
          <target state="translated">). It is &lt;code&gt;S&lt;/code&gt; if there are distinct folds,</target>
        </trans-unit>
        <trans-unit id="05a6e878bb179497ab31f32f00f95fb3899c774b" translate="yes" xml:space="preserve">
          <source>). Perl is not strictly a shell because it&amp;rsquo;s not interactive (although Perl programs can be interactive).</source>
          <target state="translated">). Perl is not strictly a shell because it&amp;rsquo;s not interactive (although Perl programs can be interactive).</target>
        </trans-unit>
        <trans-unit id="f78cffbbf89f8002aea6399c7a9ddf0dfac97229" translate="yes" xml:space="preserve">
          <source>). So long as</source>
          <target state="translated">). So long as</target>
        </trans-unit>
        <trans-unit id="ea5a3d55458bd648431ff33d784b7d2a42d0fac1" translate="yes" xml:space="preserve">
          <source>). The following example computes the SHA-224 digest of the 7-bit message</source>
          <target state="translated">). The following example computes the SHA-224 digest of the 7-bit message</target>
        </trans-unit>
        <trans-unit id="f2791a078af14b6f53c92cc496607d9ac596dc19" translate="yes" xml:space="preserve">
          <source>). These are &lt;b&gt;not&lt;/b&gt; yet available with newlib, the Cygwin libc.</source>
          <target state="translated">). These are &lt;b&gt;not&lt;/b&gt; yet available with newlib, the Cygwin libc.</target>
        </trans-unit>
        <trans-unit id="560023602febe7a40239bc4208c087508750d63d" translate="yes" xml:space="preserve">
          <source>). These ordinals can be accessed via the APIs:</source>
          <target state="translated">). These ordinals can be accessed via the APIs:</target>
        </trans-unit>
        <trans-unit id="b347823ca9f713e85046a6075137cf021c306fdd" translate="yes" xml:space="preserve">
          <source>). This is best demonstrated with this code:</source>
          <target state="translated">). This is best demonstrated with this code:</target>
        </trans-unit>
        <trans-unit id="a1d6564a7c3672bec1a1bc0e927d67a7df20f8a1" translate="yes" xml:space="preserve">
          <source>). This is done, as in the examples above, by having the two components separated by an equal sign (or interchangeably, a colon), like &lt;code&gt;\p{Bidi_Class: Left}&lt;/code&gt; .</source>
          <target state="translated">). This is done, as in the examples above, by having the two components separated by an equal sign (or interchangeably, a colon), like &lt;code&gt;\p{Bidi_Class: Left}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="705bf65f5f48be0531b7a87c6aca35d55ff144f4" translate="yes" xml:space="preserve">
          <source>). This means that even if you do not</source>
          <target state="translated">). This means that even if you do not</target>
        </trans-unit>
        <trans-unit id="d67ecb26991744a9d2868c66788af481b16bc33d" translate="yes" xml:space="preserve">
          <source>). Those flags, and others, are discussed in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">). Those flags, and others, are discussed in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6aa020a5258af192f5be7bb87b11f10731cd4d0d" translate="yes" xml:space="preserve">
          <source>). You need the latest version of</source>
          <target state="translated">). You need the latest version of</target>
        </trans-unit>
        <trans-unit id="53971837c357909ccaf3a6ac8079d2f764d799a4" translate="yes" xml:space="preserve">
          <source>). cereg.exe (which must be executed on a desktop pc with ActiveSync) is reported not to work on some devices. You have to create the registry entries by hand using a registry editor.</source>
          <target state="translated">). cereg.exe (which must be executed on a desktop pc with ActiveSync) is reported not to work on some devices. You have to create the registry entries by hand using a registry editor.</target>
        </trans-unit>
        <trans-unit id="3e0ee17e99cbf2528fa040abfe91674006a4598e" translate="yes" xml:space="preserve">
          <source>); these were automatically generated by the installation process. You may also discover files in the library directory that end in either</source>
          <target state="translated">); these were automatically generated by the installation process. You may also discover files in the library directory that end in either</target>
        </trans-unit>
        <trans-unit id="f0f1ab06aabff0dd04ec2e7fdd0330f3f72717ad" translate="yes" xml:space="preserve">
          <source>* $status = $i-&amp;gt;inflate($input, $output [,$eof]) *</source>
          <target state="translated">* $status = $i-&amp;gt;inflate($input, $output [,$eof]) *</target>
        </trans-unit>
        <trans-unit id="711683a62464c1b947fc95a05857522c610a2052" translate="yes" xml:space="preserve">
          <source>* ($i, $status) = new Compress::Raw::Zlib::Inflate( [OPT] ) *</source>
          <target state="translated">* ($i, $status) = new Compress::Raw::Zlib::Inflate( [OPT] ) *</target>
        </trans-unit>
        <trans-unit id="662154abd6b12506d6af987521bf74a19afd4fd0" translate="yes" xml:space="preserve">
          <source>* &lt;a href=&quot;langtags/list&quot;&gt;I18N::LangTags::List&lt;/a&gt;</source>
          <target state="translated">* &lt;a href=&quot;langtags/list&quot;&gt;I18N::LangTags::List&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53698d1b06e8dd4ae73bc9c6c3f72d465836ed18" translate="yes" xml:space="preserve">
          <source>* Characters regarded as CJK unified ideographs (cf. &lt;code&gt;overrideCJK&lt;/code&gt; ) depend on &lt;code&gt;UCA_Version&lt;/code&gt; .</source>
          <target state="translated">* Characters regarded as CJK unified ideographs (cf. &lt;code&gt;overrideCJK&lt;/code&gt; ) depend on &lt;code&gt;UCA_Version&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff54b7fd765cf7407f178535811ac43fe11764ba" translate="yes" xml:space="preserve">
          <source>* Fully ignorable characters were ignored, and would not interrupt contractions with &lt;code&gt;UCA_Version&lt;/code&gt; 9 and 11.</source>
          <target state="translated">* Fully ignorable characters were ignored, and would not interrupt contractions with &lt;code&gt;UCA_Version&lt;/code&gt; 9 and 11.</target>
        </trans-unit>
        <trans-unit id="c482699ba0d9eda15c09384bf56262c0a8ead969" translate="yes" xml:space="preserve">
          <source>* ISO 639-2, &quot;Codes for the representation of names of languages&quot;, including two-letter and three-letter codes, &lt;code&gt;&lt;a href=&quot;http://www.loc.gov/standards/iso639-2/php/code_list.php&quot;&gt;http://www.loc.gov/standards/iso639-2/php/code_list.php&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">* ISO 639-2, &quot;Codes for the representation of names of languages&quot;, including two-letter and three-letter codes, &lt;code&gt;&lt;a href=&quot;http://www.loc.gov/standards/iso639-2/php/code_list.php&quot;&gt;http://www.loc.gov/standards/iso639-2/php/code_list.php&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c970a3c0abb4e4f41ee7e5d7374c3df2f2d33f28" translate="yes" xml:space="preserve">
          <source>* Locale::Codes, in &lt;code&gt;&lt;a href=&quot;http://www.perl.com/CPAN/modules/by-module/Locale/&quot;&gt;http://www.perl.com/CPAN/modules/by-module/Locale/&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">* Locale::Codes, in &lt;code&gt;&lt;a href=&quot;http://www.perl.com/CPAN/modules/by-module/Locale/&quot;&gt;http://www.perl.com/CPAN/modules/by-module/Locale/&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a89954fdb3af5eae5e55d02be3ce39795c43b97" translate="yes" xml:space="preserve">
          <source>* Many hangul jamo are assigned at &lt;code&gt;UCA_Version&lt;/code&gt; 20, that will affect &lt;code&gt;hangul_terminator&lt;/code&gt; .</source>
          <target state="translated">* Many hangul jamo are assigned at &lt;code&gt;UCA_Version&lt;/code&gt; 20, that will affect &lt;code&gt;hangul_terminator&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e7cdc6678b63f68f1f731cd796dc594743e79af" translate="yes" xml:space="preserve">
          <source>* Noncharacters (e.g. U+FFFF) are not ignored, and can be overridden since &lt;code&gt;UCA_Version&lt;/code&gt; 22.</source>
          <target state="translated">* Noncharacters (e.g. U+FFFF) are not ignored, and can be overridden since &lt;code&gt;UCA_Version&lt;/code&gt; 22.</target>
        </trans-unit>
        <trans-unit id="b1c01b3ace60123b87b3f718dd69b661047bea89" translate="yes" xml:space="preserve">
          <source>* Out-of-range codepoints (greater than U+10FFFF) are not ignored, and can be overridden since &lt;code&gt;UCA_Version&lt;/code&gt; 22.</source>
          <target state="translated">* Out-of-range codepoints (greater than U+10FFFF) are not ignored, and can be overridden since &lt;code&gt;UCA_Version&lt;/code&gt; 22.</target>
        </trans-unit>
        <trans-unit id="3acf57a3122fd8676139be1b54b77e7a6c0f4419" translate="yes" xml:space="preserve">
          <source>* RFC 2231, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2231.txt&quot;&gt;http://www.ietf.org/rfc/rfc2231.txt&lt;/a&gt;&lt;/code&gt;, &quot;MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations&quot;.</source>
          <target state="translated">* RFC 2231, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2231.txt&quot;&gt;http://www.ietf.org/rfc/rfc2231.txt&lt;/a&gt;&lt;/code&gt;, &quot;MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations&quot;.</target>
        </trans-unit>
        <trans-unit id="7a7d7dbfc55209a71c5f7e824d67a357a6a16bbc" translate="yes" xml:space="preserve">
          <source>* RFC 2277, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2277.txt&quot;&gt;http://www.ietf.org/rfc/rfc2277.txt&lt;/a&gt;&lt;/code&gt;, &quot;IETF Policy on Character Sets and Languages&quot;.</source>
          <target state="translated">* RFC 2277, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2277.txt&quot;&gt;http://www.ietf.org/rfc/rfc2277.txt&lt;/a&gt;&lt;/code&gt;, &quot;IETF Policy on Character Sets and Languages&quot;.</target>
        </trans-unit>
        <trans-unit id="9e8c6c9d9a4f36c517c3f295833e4f6eab416286" translate="yes" xml:space="preserve">
          <source>* RFC 2482, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2482.txt&quot;&gt;http://www.ietf.org/rfc/rfc2482.txt&lt;/a&gt;&lt;/code&gt;, &quot;Language Tagging in Unicode Plain Text&quot;.</source>
          <target state="translated">* RFC 2482, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2482.txt&quot;&gt;http://www.ietf.org/rfc/rfc2482.txt&lt;/a&gt;&lt;/code&gt;, &quot;Language Tagging in Unicode Plain Text&quot;.</target>
        </trans-unit>
        <trans-unit id="a0423bc09cf4060b0b568dded73ce94844a1cdfb" translate="yes" xml:space="preserve">
          <source>* RFC 3066, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3066.txt&quot;&gt;http://www.ietf.org/rfc/rfc3066.txt&lt;/a&gt;&lt;/code&gt;, &quot;Tags for the Identification of Languages&quot;. (Obsoletes RFC 1766)</source>
          <target state="translated">* RFC 3066, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3066.txt&quot;&gt;http://www.ietf.org/rfc/rfc3066.txt&lt;/a&gt;&lt;/code&gt;, &quot;Tags for the Identification of Languages&quot;. (Obsoletes RFC 1766)</target>
        </trans-unit>
        <trans-unit id="0d995187844c913f0fc72fa490ae73510b255678" translate="yes" xml:space="preserve">
          <source>* See below &lt;code&gt;long_contraction&lt;/code&gt; with &lt;code&gt;UCA_Version&lt;/code&gt; 22 and 24.</source>
          <target state="translated">* See below &lt;code&gt;long_contraction&lt;/code&gt; with &lt;code&gt;UCA_Version&lt;/code&gt; 22 and 24.</target>
        </trans-unit>
        <trans-unit id="9659d778014dc9fe8cc992c94d2c75debd111108" translate="yes" xml:space="preserve">
          <source>* The IANA list of registered languages (hopefully up-to-date), &lt;code&gt;&lt;a href=&quot;http://www.iana.org/assignments/language-tags&quot;&gt;http://www.iana.org/assignments/language-tags&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">* The IANA list of registered languages (hopefully up-to-date), &lt;code&gt;&lt;a href=&quot;http://www.iana.org/assignments/language-tags&quot;&gt;http://www.iana.org/assignments/language-tags&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc59265402b2bcf12a045f141f3c84d1ac00a64c" translate="yes" xml:space="preserve">
          <source>* There are two exceptions to a bracketed character class matching a single character only. Each requires special handling by Perl to make things work:</source>
          <target state="translated">* There are two exceptions to a bracketed character class matching a single character only. Each requires special handling by Perl to make things work:</target>
        </trans-unit>
        <trans-unit id="897931bec8a15698dae5c444e1fbf89e322d1e04" translate="yes" xml:space="preserve">
          <source>* Treatment of ignorables after variables and some behaviors were changed at &lt;code&gt;UCA_Version&lt;/code&gt; 9.</source>
          <target state="translated">* Treatment of ignorables after variables and some behaviors were changed at &lt;code&gt;UCA_Version&lt;/code&gt; 9.</target>
        </trans-unit>
        <trans-unit id="eb19d00dbb35076b2cfb43afaaa8a44bc7567ca5" translate="yes" xml:space="preserve">
          <source>* an encoding of a formally valid language tag always is a string value that is defined, has length, and is true if considered as a boolean.</source>
          <target state="translated">* an encoding of a formally valid language tag always is a string value that is defined, has length, and is true if considered as a boolean.</target>
        </trans-unit>
        <trans-unit id="cb89de7628537cdbcdcd2d5c31607dcd65d29209" translate="yes" xml:space="preserve">
          <source>* tags representing different languages never get the same encoding.</source>
          <target state="translated">* tags representing different languages never get the same encoding.</target>
        </trans-unit>
        <trans-unit id="cfc914db0008bc5c5328a3a2456a7e925514bb85" translate="yes" xml:space="preserve">
          <source>* tags representing the same language always get the same encoding.</source>
          <target state="translated">* tags representing the same language always get the same encoding.</target>
        </trans-unit>
        <trans-unit id="f632df7964dda121448ae6e5ca4eb877ed15fde2" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;adler32()*</source>
          <target state="translated">*$d-&amp;gt;adler32()*</target>
        </trans-unit>
        <trans-unit id="c35eaa4aaa4b0b36d04700f984d9950b54e08112" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;crc32()*</source>
          <target state="translated">*$d-&amp;gt;crc32()*</target>
        </trans-unit>
        <trans-unit id="0c971c521366bf298521a0d1cb12de8653928b4d" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;dict_adler()*</source>
          <target state="translated">*$d-&amp;gt;dict_adler()*</target>
        </trans-unit>
        <trans-unit id="64629fc19b2eab3d05adbf52fc5e32abcf625962" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;get_BufSize()*</source>
          <target state="translated">*$d-&amp;gt;get_BufSize()*</target>
        </trans-unit>
        <trans-unit id="56aed9950c73a350f4bbada6fc3d5abe3158462a" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;get_Level()*</source>
          <target state="translated">*$d-&amp;gt;get_Level()*</target>
        </trans-unit>
        <trans-unit id="3bf087cdc68f5ef42e9bbc91a4a61bc60dd22717" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;get_Strategy()*</source>
          <target state="translated">*$d-&amp;gt;get_Strategy()*</target>
        </trans-unit>
        <trans-unit id="6a81c6c52f16a8d6923233b258116bbaae34938f" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;msg()*</source>
          <target state="translated">*$d-&amp;gt;msg()*</target>
        </trans-unit>
        <trans-unit id="b63a3f7f425b1954a977386ef5d279e257384ce4" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;total_in()*</source>
          <target state="translated">*$d-&amp;gt;total_in()*</target>
        </trans-unit>
        <trans-unit id="7be11abe1a981cdfe5c58e90cbe56c74620650fb" translate="yes" xml:space="preserve">
          <source>*$d-&amp;gt;total_out()*</source>
          <target state="translated">*$d-&amp;gt;total_out()*</target>
        </trans-unit>
        <trans-unit id="d80a4fc42d0165881aa2fa21601335f6a5b174f7" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;adler32()*</source>
          <target state="translated">*$i-&amp;gt;adler32()*</target>
        </trans-unit>
        <trans-unit id="68674a7b4388b0adebddc415278aa8a461b56203" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;crc32()*</source>
          <target state="translated">*$i-&amp;gt;crc32()*</target>
        </trans-unit>
        <trans-unit id="1660d213fb0cf4bed038244acbc0c77e58a9ffde" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;dict_adler()*</source>
          <target state="translated">*$i-&amp;gt;dict_adler()*</target>
        </trans-unit>
        <trans-unit id="ed00afb6796ebd2d75d5fb6836b1271979dc5acd" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;msg()*</source>
          <target state="translated">*$i-&amp;gt;msg()*</target>
        </trans-unit>
        <trans-unit id="2b2b2852d7c10fd41b04fd33545a78d54c94f1e6" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;total_in()*</source>
          <target state="translated">*$i-&amp;gt;total_in()*</target>
        </trans-unit>
        <trans-unit id="a00928e02457981385f8e4dd086f63b3c7d4708f" translate="yes" xml:space="preserve">
          <source>*$i-&amp;gt;total_out()*</source>
          <target state="translated">*$i-&amp;gt;total_out()*</target>
        </trans-unit>
        <trans-unit id="04bb5391ea5a418de25822f423a009711407d686" translate="yes" xml:space="preserve">
          <source>*$status = $d-&amp;gt;deflate($input, $output)*</source>
          <target state="translated">*$status = $d-&amp;gt;deflate($input, $output)*</target>
        </trans-unit>
        <trans-unit id="c0ba780f9e7693de09966236201daf25c2601f99" translate="yes" xml:space="preserve">
          <source>*$status = $d-&amp;gt;deflateParams([OPT])*</source>
          <target state="translated">*$status = $d-&amp;gt;deflateParams([OPT])*</target>
        </trans-unit>
        <trans-unit id="254a6aafb8b04918fd23639de431468d8ff29ccd" translate="yes" xml:space="preserve">
          <source>*$status = $d-&amp;gt;deflateReset() *</source>
          <target state="translated">*$status = $d-&amp;gt;deflateReset() *</target>
        </trans-unit>
        <trans-unit id="d497a45f9cb78ca6b50b3a7e156fd6b9c7fb384d" translate="yes" xml:space="preserve">
          <source>*$status = $d-&amp;gt;deflateTune($good_length, $max_lazy, $nice_length, $max_chain)*</source>
          <target state="translated">*$status = $d-&amp;gt;deflateTune($good_length, $max_lazy, $nice_length, $max_chain)*</target>
        </trans-unit>
        <trans-unit id="141b772af4aeeaea008ed027db1ed7bde5ce5676" translate="yes" xml:space="preserve">
          <source>*$status = $d-&amp;gt;flush($output [, $flush_type]) *</source>
          <target state="translated">*$status = $d-&amp;gt;flush($output [, $flush_type]) *</target>
        </trans-unit>
        <trans-unit id="74f8a4eb98878730ef2f86aea42e666e1ee160bc" translate="yes" xml:space="preserve">
          <source>*$status = $i-&amp;gt;inflateReset() *</source>
          <target state="translated">*$status = $i-&amp;gt;inflateReset() *</target>
        </trans-unit>
        <trans-unit id="9db33bbf75bca37e8376afc3d73136b2ed6357e1" translate="yes" xml:space="preserve">
          <source>*$status = $i-&amp;gt;inflateSync($buffer)*</source>
          <target state="translated">*$status = $i-&amp;gt;inflateSync($buffer)*</target>
        </trans-unit>
        <trans-unit id="112c6b855140730d98a28cbfad625ebe4443a357" translate="yes" xml:space="preserve">
          <source>*$status = $i-&amp;gt;inflateSync($input)*</source>
          <target state="translated">*$status = $i-&amp;gt;inflateSync($input)*</target>
        </trans-unit>
        <trans-unit id="ac1cc2e7b1d14736f7f3c26c35c1e7b862a74263" translate="yes" xml:space="preserve">
          <source>*($d, $status) = deflateInit( [OPT] )*</source>
          <target state="translated">*($d, $status) = deflateInit( [OPT] )*</target>
        </trans-unit>
        <trans-unit id="a1e0d6d4dfa07bb414b033b626ca0cac87b1dd85" translate="yes" xml:space="preserve">
          <source>*($d, $status) = new Compress::Raw::Zlib::Deflate( [OPT] ) *</source>
          <target state="translated">*($d, $status) = new Compress::Raw::Zlib::Deflate( [OPT] ) *</target>
        </trans-unit>
        <trans-unit id="3374bc8edae5ea56b3cf3599aae276d721728d25" translate="yes" xml:space="preserve">
          <source>*($i, $status) = inflateInit()*</source>
          <target state="translated">*($i, $status) = inflateInit()*</target>
        </trans-unit>
        <trans-unit id="10ad095b48dbd0069e2864202f1242314d07a5ef" translate="yes" xml:space="preserve">
          <source>*($out, $status) = $d-&amp;gt;deflate($buffer)*</source>
          <target state="translated">*($out, $status) = $d-&amp;gt;deflate($buffer)*</target>
        </trans-unit>
        <trans-unit id="abc6e06c1d13c4e3bda0992462832a237f5a44c8" translate="yes" xml:space="preserve">
          <source>*($out, $status) = $d-&amp;gt;flush()* =head2 *($out, $status) = $d-&amp;gt;flush($flush_type)*</source>
          <target state="translated">*($out, $status) = $d-&amp;gt;flush()* =head2 *($out, $status) = $d-&amp;gt;flush($flush_type)*</target>
        </trans-unit>
        <trans-unit id="3c4770a854a915518ba1ea48502e3961a3be7950" translate="yes" xml:space="preserve">
          <source>*($out, $status) = $i-&amp;gt;inflate($buffer)*</source>
          <target state="translated">*($out, $status) = $i-&amp;gt;inflate($buffer)*</target>
        </trans-unit>
        <trans-unit id="0d672a53a05ad4df9358326135542cc74a9d72d5" translate="yes" xml:space="preserve">
          <source>** If you are unfamiliar with testing &lt;b&gt;read &lt;a href=&quot;tutorial&quot;&gt;Test::Tutorial&lt;/a&gt; first!&lt;/b&gt; **</source>
          <target state="translated">** If you are unfamiliar with testing &lt;b&gt;read &lt;a href=&quot;tutorial&quot;&gt;Test::Tutorial&lt;/a&gt; first!&lt;/b&gt; **</target>
        </trans-unit>
        <trans-unit id="5c455cfeca9fc61305db058d5b67796ca3d8f994" translate="yes" xml:space="preserve">
          <source>*.t</source>
          <target state="translated">*.t</target>
        </trans-unit>
        <trans-unit id="e06fa715f3e3bd676f73309b058b71ea1c00418c" translate="yes" xml:space="preserve">
          <source>*/man/</source>
          <target state="translated">*/man/</target>
        </trans-unit>
        <trans-unit id="030b7462745046bec4a3476bbbd9b7c622cb263d" translate="yes" xml:space="preserve">
          <source>*AutoLoader* vs. *SelfLoader*</source>
          <target state="translated">*AutoLoader* vs. *SelfLoader*</target>
        </trans-unit>
        <trans-unit id="b6da558cc8e40a9588c5a25bffee14e91b6e21e0" translate="yes" xml:space="preserve">
          <source>*Blocks versus Scripts*</source>
          <target state="translated">*Blocks versus Scripts*</target>
        </trans-unit>
        <trans-unit id="6a49ec15388c609953d1dfeb20a9de1712f85c3d" translate="yes" xml:space="preserve">
          <source>*Matching Scripts and Blocks*</source>
          <target state="translated">*Matching Scripts and Blocks*</target>
        </trans-unit>
        <trans-unit id="4dbc7db62720fd7c360f08690c42352d5d4fde10" translate="yes" xml:space="preserve">
          <source>*Pod::InteriorSequence*</source>
          <target state="translated">*Pod::InteriorSequence*</target>
        </trans-unit>
        <trans-unit id="bd484e6a3fa2a69cf1b2fa912e8c64e369203cf3" translate="yes" xml:space="preserve">
          <source>*Pod::Paragraph*</source>
          <target state="translated">*Pod::Paragraph*</target>
        </trans-unit>
        <trans-unit id="f6118e75f44bd9c2e2e7a4dbaf8b93141735b0c7" translate="yes" xml:space="preserve">
          <source>*Pod::ParseTree*</source>
          <target state="translated">*Pod::ParseTree*</target>
        </trans-unit>
        <trans-unit id="a839f625dd453146a9ced9341bbff5ba4836fc73" translate="yes" xml:space="preserve">
          <source>*Warning*</source>
          <target state="translated">*Warning*</target>
        </trans-unit>
        <trans-unit id="39c05f977c871385cfb2ac67c7071d2d0749325c" translate="yes" xml:space="preserve">
          <source>*add_selection()*</source>
          <target state="translated">*add_selection()*</target>
        </trans-unit>
        <trans-unit id="22677ec6b58cd6de560696c1281301c8215b2261" translate="yes" xml:space="preserve">
          <source>*all_casefolds()*</source>
          <target state="translated">*all_casefolds()*</target>
        </trans-unit>
        <trans-unit id="495bb86a56fbdcbecef4efb0a07e0fb5a52d90bb" translate="yes" xml:space="preserve">
          <source>*begin_input()*</source>
          <target state="translated">*begin_input()*</target>
        </trans-unit>
        <trans-unit id="21491eaf691d94ff4dc5e18150f5741423ca33f3" translate="yes" xml:space="preserve">
          <source>*begin_pod()*</source>
          <target state="translated">*begin_pod()*</target>
        </trans-unit>
        <trans-unit id="e63f038d7ccfb8b7ed87a3e9a94136cc3acbaa84" translate="yes" xml:space="preserve">
          <source>*bidi_types()*</source>
          <target state="translated">*bidi_types()*</target>
        </trans-unit>
        <trans-unit id="3323378f9f296b7e09bbde8389f91b3f2e90a612" translate="yes" xml:space="preserve">
          <source>*casefold()*</source>
          <target state="translated">*casefold()*</target>
        </trans-unit>
        <trans-unit id="a382525e3184f3292d70ce3e64c30b550c9d60ca" translate="yes" xml:space="preserve">
          <source>*casespec()*</source>
          <target state="translated">*casespec()*</target>
        </trans-unit>
        <trans-unit id="2acb520d2f999e48e1e23f31071debab4019805a" translate="yes" xml:space="preserve">
          <source>*charblock()*</source>
          <target state="translated">*charblock()*</target>
        </trans-unit>
        <trans-unit id="5a1a95773194bbecc12f391b4130725b29ef1d4a" translate="yes" xml:space="preserve">
          <source>*charblocks()*</source>
          <target state="translated">*charblocks()*</target>
        </trans-unit>
        <trans-unit id="892910658fd4f7c8f9957928bae7464e9f794524" translate="yes" xml:space="preserve">
          <source>*charinfo()*</source>
          <target state="translated">*charinfo()*</target>
        </trans-unit>
        <trans-unit id="298c43cb9d5cbe40f064250a448e61dd4cb8783e" translate="yes" xml:space="preserve">
          <source>*charinrange()*</source>
          <target state="translated">*charinrange()*</target>
        </trans-unit>
        <trans-unit id="98a743c2f5c3d0d1a69423f01cff293fd38d8edb" translate="yes" xml:space="preserve">
          <source>*charprop()*</source>
          <target state="translated">*charprop()*</target>
        </trans-unit>
        <trans-unit id="aff3e7777f49ee087b89c8a05dbee3af17a26546" translate="yes" xml:space="preserve">
          <source>*charprops_all()*</source>
          <target state="translated">*charprops_all()*</target>
        </trans-unit>
        <trans-unit id="2096c542c885e6ff5b205d9c49075754580714c3" translate="yes" xml:space="preserve">
          <source>*charscript()*</source>
          <target state="translated">*charscript()*</target>
        </trans-unit>
        <trans-unit id="95242ddcdfaf5eacd2a726f8aaa11d7bc03daf57" translate="yes" xml:space="preserve">
          <source>*charscripts()*</source>
          <target state="translated">*charscripts()*</target>
        </trans-unit>
        <trans-unit id="e4821a2674ad1d26afcb87813851f804da9f5ead" translate="yes" xml:space="preserve">
          <source>*ckfun_p</source>
          <target state="translated">*ckfun_p</target>
        </trans-unit>
        <trans-unit id="0b5ab6a4a90ff2c6437322fa15586407ef2b4d11" translate="yes" xml:space="preserve">
          <source>*ckobj_p</source>
          <target state="translated">*ckobj_p</target>
        </trans-unit>
        <trans-unit id="5f7f65bb7d96d645f65805f5d460c10a6f06b354" translate="yes" xml:space="preserve">
          <source>*clear_selections()*</source>
          <target state="translated">*clear_selections()*</target>
        </trans-unit>
        <trans-unit id="5d9dc7c769c9e8f4cbeee5398ed00b6384904253" translate="yes" xml:space="preserve">
          <source>*command()*</source>
          <target state="translated">*command()*</target>
        </trans-unit>
        <trans-unit id="a139e96d8189b5a55d4a4e8e2d33902d4d0c5b9d" translate="yes" xml:space="preserve">
          <source>*compexcl()*</source>
          <target state="translated">*compexcl()*</target>
        </trans-unit>
        <trans-unit id="1b540946e2151155f214582cd243507ba7640019" translate="yes" xml:space="preserve">
          <source>*curr_headings()*</source>
          <target state="translated">*curr_headings()*</target>
        </trans-unit>
        <trans-unit id="b44c1e16cdabb8e05ed00563725662b1898a3124" translate="yes" xml:space="preserve">
          <source>*cutting()*</source>
          <target state="translated">*cutting()*</target>
        </trans-unit>
        <trans-unit id="1ddba136bdb0a3b6dbf3f58b0168d4a9181d08fc" translate="yes" xml:space="preserve">
          <source>*end_input()*</source>
          <target state="translated">*end_input()*</target>
        </trans-unit>
        <trans-unit id="a5f7375fd2de061c65ad2bf50ef73effa4294574" translate="yes" xml:space="preserve">
          <source>*end_pod()*</source>
          <target state="translated">*end_pod()*</target>
        </trans-unit>
        <trans-unit id="1d38830083f7ab5197ea4473920fe3ec232e92e5" translate="yes" xml:space="preserve">
          <source>*errorsub()*</source>
          <target state="translated">*errorsub()*</target>
        </trans-unit>
        <trans-unit id="83ae438f6c5d4adfa7da1a2ac708671df372b4bb" translate="yes" xml:space="preserve">
          <source>*filter() and anonymous sub*</source>
          <target state="translated">*filter() and anonymous sub*</target>
        </trans-unit>
        <trans-unit id="c5d36b4a9ac4410d0011698855500ff129fe6378" translate="yes" xml:space="preserve">
          <source>*filter_add()*</source>
          <target state="translated">*filter_add()*</target>
        </trans-unit>
        <trans-unit id="c590fd9b9ee4cb77f8c87dcc99cff21706f50d16" translate="yes" xml:space="preserve">
          <source>*flags</source>
          <target state="translated">*flags</target>
        </trans-unit>
        <trans-unit id="87bf87677970cfb50487269d83b12971442cad62" translate="yes" xml:space="preserve">
          <source>*general_categories()*</source>
          <target state="translated">*general_categories()*</target>
        </trans-unit>
        <trans-unit id="c8093d60d704e74fc21bb32d9a8ddd7a40063485" translate="yes" xml:space="preserve">
          <source>*import()*</source>
          <target state="translated">*import()*</target>
        </trans-unit>
        <trans-unit id="4af0e2a6bb704b69c7748e25de2a62d813d13313" translate="yes" xml:space="preserve">
          <source>*initialize()*</source>
          <target state="translated">*initialize()*</target>
        </trans-unit>
        <trans-unit id="a26c0f1de05a3c3080ce231702af1d37d1ffdcef" translate="yes" xml:space="preserve">
          <source>*input_file()*</source>
          <target state="translated">*input_file()*</target>
        </trans-unit>
        <trans-unit id="7b32820eda1a4cbba59b3c51ef02fe178f80b148" translate="yes" xml:space="preserve">
          <source>*input_handle()*</source>
          <target state="translated">*input_handle()*</target>
        </trans-unit>
        <trans-unit id="37cf554dca7439d60a53244dbe9a6f6f66666dbc" translate="yes" xml:space="preserve">
          <source>*interior_sequence()*</source>
          <target state="translated">*interior_sequence()*</target>
        </trans-unit>
        <trans-unit id="c16b57ca8bb2b15c81ee7888fb0cc3c088fd5605" translate="yes" xml:space="preserve">
          <source>*interpolate()*</source>
          <target state="translated">*interpolate()*</target>
        </trans-unit>
        <trans-unit id="1c763b56009fbad09ca114bbc6ad819659ad6849" translate="yes" xml:space="preserve">
          <source>*is_selected()*</source>
          <target state="translated">*is_selected()*</target>
        </trans-unit>
        <trans-unit id="950f1ac016fdc438a26ebe09acd34140f5d0a0b3" translate="yes" xml:space="preserve">
          <source>*len</source>
          <target state="translated">*len</target>
        </trans-unit>
        <trans-unit id="beaf32cf7b2e540d90a96b6fc45fac3a314cd55f" translate="yes" xml:space="preserve">
          <source>*len_p</source>
          <target state="translated">*len_p</target>
        </trans-unit>
        <trans-unit id="d670fa291475b584f9b4236a8ddfefd0211dcd71" translate="yes" xml:space="preserve">
          <source>*match_section()*</source>
          <target state="translated">*match_section()*</target>
        </trans-unit>
        <trans-unit id="159da2978736cbc50e92916d4ff2e95e3a6a3290" translate="yes" xml:space="preserve">
          <source>*namedseq()*</source>
          <target state="translated">*namedseq()*</target>
        </trans-unit>
        <trans-unit id="6523eee7c8959f955cebf19b0aaf21b556b5b09d" translate="yes" xml:space="preserve">
          <source>*new()*</source>
          <target state="translated">*new()*</target>
        </trans-unit>
        <trans-unit id="999e9b24506786f32dd08362c3037e9728f69c8e" translate="yes" xml:space="preserve">
          <source>*num()*</source>
          <target state="translated">*num()*</target>
        </trans-unit>
        <trans-unit id="7834a1138a40b68be0feedf680b5fc18cc6f66fd" translate="yes" xml:space="preserve">
          <source>*old_checker_p</source>
          <target state="translated">*old_checker_p</target>
        </trans-unit>
        <trans-unit id="3f69d68aed17e619c04ffa05320c5c7f0a776f85" translate="yes" xml:space="preserve">
          <source>*output_file()*</source>
          <target state="translated">*output_file()*</target>
        </trans-unit>
        <trans-unit id="068f4b4b0837c6d09f198f53062edaca42ca04da" translate="yes" xml:space="preserve">
          <source>*output_handle()*</source>
          <target state="translated">*output_handle()*</target>
        </trans-unit>
        <trans-unit id="e31580f4b34415c38c50584a8776797a08860c70" translate="yes" xml:space="preserve">
          <source>*parse_from_file()*</source>
          <target state="translated">*parse_from_file()*</target>
        </trans-unit>
        <trans-unit id="0e4cafcb90bfc690fd27784f3955de4a3db5693b" translate="yes" xml:space="preserve">
          <source>*parse_from_filehandle()*</source>
          <target state="translated">*parse_from_filehandle()*</target>
        </trans-unit>
        <trans-unit id="d75b3a0e94d1dfb9614e94eb5cd073abcca5f774" translate="yes" xml:space="preserve">
          <source>*parse_text()*</source>
          <target state="translated">*parse_text()*</target>
        </trans-unit>
        <trans-unit id="7e9078f3ae0ce35ce16daab81c0d4418d0c4ed4f" translate="yes" xml:space="preserve">
          <source>*parseopts()*</source>
          <target state="translated">*parseopts()*</target>
        </trans-unit>
        <trans-unit id="3da2f47adeba78e93b545821850c23066406dbeb" translate="yes" xml:space="preserve">
          <source>*podselect()*</source>
          <target state="translated">*podselect()*</target>
        </trans-unit>
        <trans-unit id="78275badea2a77aee3c8465d83cc3c29a208ed8e" translate="yes" xml:space="preserve">
          <source>*preprocess_line()*</source>
          <target state="translated">*preprocess_line()*</target>
        </trans-unit>
        <trans-unit id="e7392b32b770b3c307b1ac3aae8f31c9a2750031" translate="yes" xml:space="preserve">
          <source>*preprocess_paragraph()*</source>
          <target state="translated">*preprocess_paragraph()*</target>
        </trans-unit>
        <trans-unit id="1e0522e99f043488d01967be6bf4f6d936d08801" translate="yes" xml:space="preserve">
          <source>*prop_aliases()*</source>
          <target state="translated">*prop_aliases()*</target>
        </trans-unit>
        <trans-unit id="d5d69a3ec3326224cb4550ade7aa539c5fb45f01" translate="yes" xml:space="preserve">
          <source>*prop_invlist()*</source>
          <target state="translated">*prop_invlist()*</target>
        </trans-unit>
        <trans-unit id="234f2ef007831363f45ef51c92f38d945d0737d9" translate="yes" xml:space="preserve">
          <source>*prop_invmap()*</source>
          <target state="translated">*prop_invmap()*</target>
        </trans-unit>
        <trans-unit id="df3580135f73b64d1d0f62af129b6dd0b45e63bb" translate="yes" xml:space="preserve">
          <source>*prop_value_aliases()*</source>
          <target state="translated">*prop_value_aliases()*</target>
        </trans-unit>
        <trans-unit id="c188181d7f65501ad8b99f693c9e5ec20c1820a3" translate="yes" xml:space="preserve">
          <source>*prop_values()*</source>
          <target state="translated">*prop_values()*</target>
        </trans-unit>
        <trans-unit id="3f4b3903dff14b7e8a38a7f6ff8d3b0fa7159477" translate="yes" xml:space="preserve">
          <source>*result</source>
          <target state="translated">*result</target>
        </trans-unit>
        <trans-unit id="e290a8472581248e50ff3784a40db196f11140bd" translate="yes" xml:space="preserve">
          <source>*roff</source>
          <target state="translated">*roff</target>
        </trans-unit>
        <trans-unit id="ac8814bb7facb31b6ba9ea89e4e2f1de11aa27af" translate="yes" xml:space="preserve">
          <source>*search_invlist()*</source>
          <target state="translated">*search_invlist()*</target>
        </trans-unit>
        <trans-unit id="f3dfb0ed0691863c50f58061da07cc12a0958750" translate="yes" xml:space="preserve">
          <source>*select()*</source>
          <target state="translated">*select()*</target>
        </trans-unit>
        <trans-unit id="ae2a6aae4f89e2c4aba8b451b3f1c9a851c4e28e" translate="yes" xml:space="preserve">
          <source>*textblock()*</source>
          <target state="translated">*textblock()*</target>
        </trans-unit>
        <trans-unit id="35292c70accf6e1bc4a136d07d88e046e56f7fe0" translate="yes" xml:space="preserve">
          <source>*use Filter::Util::Call*</source>
          <target state="translated">*use Filter::Util::Call*</target>
        </trans-unit>
        <trans-unit id="90337027d7a839db57d3cb410b0b9d7721ba0b7c" translate="yes" xml:space="preserve">
          <source>*verbatim()*</source>
          <target state="translated">*verbatim()*</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="9834fcb181aba28c7b6e23e1a30b0012fd3c7711" translate="yes" xml:space="preserve">
          <source>, &quot;Creating a Perl Debugger&quot;, &lt;a href=&quot;http://www.ddj.com/184404522&quot;&gt;http://www.ddj.com/184404522&lt;/a&gt; , and &quot;Profiling in Perl&quot; &lt;a href=&quot;http://www.ddj.com/184404580&quot;&gt;http://www.ddj.com/184404580&lt;/a&gt; .</source>
          <target state="translated">, &quot;Creating a Perl Debugger&quot;, &lt;a href=&quot;http://www.ddj.com/184404522&quot;&gt;http://www.ddj.com/184404522&lt;/a&gt; , and &quot;Profiling in Perl&quot; &lt;a href=&quot;http://www.ddj.com/184404580&quot;&gt;http://www.ddj.com/184404580&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1ee9b85d69a1a45808d43e30360a8f9162ce4c12" translate="yes" xml:space="preserve">
          <source>, (abbreviated NFC), and the sequence &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; followed by &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; represents the same character in</source>
          <target state="translated">, (abbreviated NFC), and the sequence &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; followed by &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; represents the same character in</target>
        </trans-unit>
        <trans-unit id="730ddc40c82a93777903d7aac75c47f7ae79794b" translate="yes" xml:space="preserve">
          <source>, (places where the code seems to run slowly), change the code with the intention of making it run faster. Using version control software, like &lt;code&gt;subversion&lt;/code&gt; , will ensure no changes are irreversible. It's too easy to fiddle here and fiddle there - don't change too much at any one time or you might not discover which piece of code &lt;b&gt;really&lt;/b&gt; was the slow bit.</source>
          <target state="translated">, (places where the code seems to run slowly), change the code with the intention of making it run faster. Using version control software, like &lt;code&gt;subversion&lt;/code&gt; , will ensure no changes are irreversible. It's too easy to fiddle here and fiddle there - don't change too much at any one time or you might not discover which piece of code &lt;b&gt;really&lt;/b&gt; was the slow bit.</target>
        </trans-unit>
        <trans-unit id="b189223f9e086284fb9e5a2d4ce238755de8f49e" translate="yes" xml:space="preserve">
          <source>, ...parameters...) and there's no</source>
          <target state="translated">, ...parameters...) and there's no</target>
        </trans-unit>
        <trans-unit id="7d9c9fe99988b3556a05480d92acc265eff93ca8" translate="yes" xml:space="preserve">
          <source>, ...parameters...), and there's no entry</source>
          <target state="translated">, ...parameters...), and there's no entry</target>
        </trans-unit>
        <trans-unit id="91498e567e65fc55ee351426beca20dc70eece67" translate="yes" xml:space="preserve">
          <source>, ...parameters...), which should return a string that is generally meant for be used for &quot;output&quot; to the user -- regardless of whether this actually means printing to STDOUT, writing to a file, or putting into a GUI widget.</source>
          <target state="translated">, ...parameters...), which should return a string that is generally meant for be used for &quot;output&quot; to the user -- regardless of whether this actually means printing to STDOUT, writing to a file, or putting into a GUI widget.</target>
        </trans-unit>
        <trans-unit id="68cb9c38401d32e374d45576d1fe16f98edccd5c" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt;, &lt;a href=&quot;select&quot;&gt;IO::Select&lt;/a&gt;</source>
          <target state="translated">, &lt;a href=&quot;handle&quot;&gt;IO::Handle&lt;/a&gt;, &lt;a href=&quot;select&quot;&gt;IO::Select&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f38c4631f06af453e92ba616992751a1a1e31124" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;http://lexington.pm.org/meetings/022001.html&quot;&gt;http://lexington.pm.org/meetings/022001.html&lt;/a&gt;</source>
          <target state="translated">, &lt;a href=&quot;http://lexington.pm.org/meetings/022001.html&quot;&gt;http://lexington.pm.org/meetings/022001.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="007315ce711051c2a3299693a5a40842913289dd" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3164.html&quot;&gt;http://www.faqs.org/rfcs/rfc3164.html&lt;/a&gt; -- Please note that this is an informational RFC, and therefore does not specify a standard of any kind.</source>
          <target state="translated">, &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3164.html&quot;&gt;http://www.faqs.org/rfcs/rfc3164.html&lt;/a&gt; -- Please note that this is an informational RFC, and therefore does not specify a standard of any kind.</target>
        </trans-unit>
        <trans-unit id="d3b3dad532b1f051eeb3fba0becc6bea982f5b86" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3195.html&quot;&gt;http://www.faqs.org/rfcs/rfc3195.html&lt;/a&gt;</source>
          <target state="translated">, &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3195.html&quot;&gt;http://www.faqs.org/rfcs/rfc3195.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="35d9e0f29d4fed3c7ae0a33dd19ec98ac2183348" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;http://www.stonehenge.com/merlyn/LinuxMag/col75.html&quot;&gt;http://www.stonehenge.com/merlyn/LinuxMag/col75.html&lt;/a&gt; .</source>
          <target state="translated">, &lt;a href=&quot;http://www.stonehenge.com/merlyn/LinuxMag/col75.html&quot;&gt;http://www.stonehenge.com/merlyn/LinuxMag/col75.html&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b47d0918c2a38bd4e2af6702ab10cf50ebd2add8" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;http://www.stonehenge.com/merlyn/UnixReview/col49.html&quot;&gt;http://www.stonehenge.com/merlyn/UnixReview/col49.html&lt;/a&gt; , and &quot;Profiling in Template Toolkit via Overriding&quot; for</source>
          <target state="translated">, &lt;a href=&quot;http://www.stonehenge.com/merlyn/UnixReview/col49.html&quot;&gt;http://www.stonehenge.com/merlyn/UnixReview/col49.html&lt;/a&gt; , and &quot;Profiling in Template Toolkit via Overriding&quot; for</target>
        </trans-unit>
        <trans-unit id="c492919f48867530188fb7d22191a67fbb7c3fa3" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;perldbmfilter&quot;&gt;perldbmfilter&lt;/a&gt;</source>
          <target state="translated">, &lt;a href=&quot;perldbmfilter&quot;&gt;perldbmfilter&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e96b82193d3adc8ae90d1b6a1d39c967eceb5aec" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;spec&quot;&gt;File::Spec&lt;/a&gt;</source>
          <target state="translated">, &lt;a href=&quot;spec&quot;&gt;File::Spec&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48c993c3ad6fdcd73107b423983292a0b10d7d43" translate="yes" xml:space="preserve">
          <source>, &lt;b&gt;AutoLoader&lt;/b&gt; will look for perl subroutines &lt;b&gt;POSIX&lt;/b&gt; in</source>
          <target state="translated">, &lt;b&gt;AutoLoader&lt;/b&gt; will look for perl subroutines &lt;b&gt;POSIX&lt;/b&gt; in</target>
        </trans-unit>
        <trans-unit id="38f2da13d7f63c25ad1931eef771da2bdb146cd3" translate="yes" xml:space="preserve">
          <source>, &lt;b&gt;Tgetent&lt;/b&gt; searches the files</source>
          <target state="translated">, &lt;b&gt;Tgetent&lt;/b&gt; searches the files</target>
        </trans-unit>
        <trans-unit id="1e03ac4e29872e2c267670242061f02f12f57063" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;$self&lt;/code&gt; , is the same reference that was passed to &lt;code&gt;filter_add&lt;/code&gt; blessed into the filter's package. See the example filters later on for details of using &lt;code&gt;$self&lt;/code&gt; .</source>
          <target state="translated">, &lt;code&gt;$self&lt;/code&gt; , is the same reference that was passed to &lt;code&gt;filter_add&lt;/code&gt; blessed into the filter's package. See the example filters later on for details of using &lt;code&gt;$self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae56078784168c372862d15f35078dd7477dd624" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;&amp;ndash;a &amp;ndash;b &amp;ndash;c&lt;/code&gt; ) into one switch (</source>
          <target state="translated">, &lt;code&gt;&amp;ndash;a &amp;ndash;b &amp;ndash;c&lt;/code&gt; ) into one switch (</target>
        </trans-unit>
        <trans-unit id="2809b44d364e51b37846cda09da4d124638daab2" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;&amp;ndash;abc&lt;/code&gt; ). Any switch with an additional &lt;b&gt;argument&lt;/b&gt; must be the last switch in a cluster.</source>
          <target state="translated">, &lt;code&gt;&amp;ndash;abc&lt;/code&gt; ). Any switch with an additional &lt;b&gt;argument&lt;/b&gt; must be the last switch in a cluster.</target>
        </trans-unit>
        <trans-unit id="0ad542fba4a49b259c0748e429b369dce74c977b" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;Encode::FB_DEFAULT&lt;/code&gt; (== 0) is assumed.</source>
          <target state="translated">, &lt;code&gt;Encode::FB_DEFAULT&lt;/code&gt; (== 0) is assumed.</target>
        </trans-unit>
        <trans-unit id="d4b64e63a3c0223fd25236e90f27d457472226a1" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;code-style&lt;/code&gt; , &lt;a href=&quot;perlfaq&quot;&gt;hyperlinks&lt;/a&gt;, and more. Such codes are explained in the &quot;&lt;a href=&quot;#Formatting-Codes&quot;&gt;Formatting Codes&lt;/a&gt;&quot; section, below.</source>
          <target state="translated">, &lt;code&gt;code-style&lt;/code&gt; , &lt;a href=&quot;perlfaq&quot;&gt;hyperlinks&lt;/a&gt;, and more. Such codes are explained in the &quot;&lt;a href=&quot;#Formatting-Codes&quot;&gt;Formatting Codes&lt;/a&gt;&quot; section, below.</target>
        </trans-unit>
        <trans-unit id="2357bd7f4335eff8d8daf0fa1da32b05aadee0e0" translate="yes" xml:space="preserve">
          <source>, C</source>
          <target state="translated">, C</target>
        </trans-unit>
        <trans-unit id="4a3b6b54a01d06829186977454076430f1593339" translate="yes" xml:space="preserve">
          <source>, Copyright &amp;copy; 2012 Tom Christiansen &amp;lt;et al.&amp;gt;, 2012-02-13 by O&amp;rsquo;Reilly Media. The code itself is freely redistributable, and you are encouraged to transplant, fold, spindle, and mutilate any of the examples in this manpage however you please for inclusion into your own programs without any encumbrance whatsoever. Acknowledgement via code comment is polite but not required.</source>
          <target state="translated">, Copyright &amp;copy; 2012 Tom Christiansen &amp;lt;et al.&amp;gt;, 2012-02-13 by O&amp;rsquo;Reilly Media. The code itself is freely redistributable, and you are encouraged to transplant, fold, spindle, and mutilate any of the examples in this manpage however you please for inclusion into your own programs without any encumbrance whatsoever. Acknowledgement via code comment is polite but not required.</target>
        </trans-unit>
        <trans-unit id="283d166baa4da2433ea6b8c5023e0c5383a472d9" translate="yes" xml:space="preserve">
          <source>, Fourth Edition, by Tom Christiansen, brian d foy, Larry Wall, &amp;amp; Jon Orwant. Copyright (c) 2000, 1996, 1991, 2012 O'Reilly Media, Inc. This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">, Fourth Edition, by Tom Christiansen, brian d foy, Larry Wall, &amp;amp; Jon Orwant. Copyright (c) 2000, 1996, 1991, 2012 O'Reilly Media, Inc. This document may be distributed under the same terms as Perl itself.</target>
        </trans-unit>
        <trans-unit id="a4710510ddd5139b0d57b1444caca5a0e1dbc934" translate="yes" xml:space="preserve">
          <source>, Fourth Edition. Words or phrases in bold are defined elsewhere in this glossary.</source>
          <target state="translated">, Fourth Edition. Words or phrases in bold are defined elsewhere in this glossary.</target>
        </trans-unit>
        <trans-unit id="eb3f1d4a19fa8c41000422fe5f0f14f333cda54d" translate="yes" xml:space="preserve">
          <source>, I hesitate to make 10 ways to do something&quot;. This is a tricky heuristic to navigate, though--one man's essential addition is another man's pointless cruft.</source>
          <target state="translated">, I hesitate to make 10 ways to do something&quot;. This is a tricky heuristic to navigate, though--one man's essential addition is another man's pointless cruft.</target>
        </trans-unit>
        <trans-unit id="ad45c1c8eec7555ccd92edae836e62ba22314f7b" translate="yes" xml:space="preserve">
          <source>, I used something like this:</source>
          <target state="translated">, I used something like this:</target>
        </trans-unit>
        <trans-unit id="c65991634f6aa7daad894716fa3515f707c0dcd9" translate="yes" xml:space="preserve">
          <source>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1. The year (&lt;code&gt;year&lt;/code&gt; ) is given in years since 1900,</source>
          <target state="translated">, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1. The year (&lt;code&gt;year&lt;/code&gt; ) is given in years since 1900,</target>
        </trans-unit>
        <trans-unit id="278251f0cd32cd452e601bfc7f4ba837feb500cf" translate="yes" xml:space="preserve">
          <source>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1. The year (&lt;code&gt;year&lt;/code&gt; ) is given in years since 1900;</source>
          <target state="translated">, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1. The year (&lt;code&gt;year&lt;/code&gt; ) is given in years since 1900;</target>
        </trans-unit>
        <trans-unit id="dd182ebc9d81517e21729c826fb7210f389d7052" translate="yes" xml:space="preserve">
          <source>, L</source>
          <target state="translated">, L</target>
        </trans-unit>
        <trans-unit id="7fbf5c6d0f24b18219afd1efb585538657616790" translate="yes" xml:space="preserve">
          <source>, L&amp;lt;:spec&amp;gt;, L&amp;lt;:path&amp;gt;</source>
          <target state="translated">, L&amp;lt;:spec&amp;gt;, L&amp;lt;:path&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cff6989687fa00c2222ce15a90a800a548dbd994" translate="yes" xml:space="preserve">
          <source>, Perl uses the same algorithm as</source>
          <target state="translated">, Perl uses the same algorithm as</target>
        </trans-unit>
        <trans-unit id="df8f77da47481a5590b158d0835c14c3d411493e" translate="yes" xml:space="preserve">
          <source>, Recipe 13.12).</source>
          <target state="translated">, Recipe 13.12).</target>
        </trans-unit>
        <trans-unit id="6a45be8c0a733008fda1873b6942b65ae06a110b" translate="yes" xml:space="preserve">
          <source>, Tim Kientzle (tkientzle@ddj.com), Dr. Dobb's Journal, Issue 295, January 1999, pp 34-41</source>
          <target state="translated">, Tim Kientzle (tkientzle@ddj.com), Dr. Dobb's Journal, Issue 295, January 1999, pp 34-41</target>
        </trans-unit>
        <trans-unit id="2a5671053104bfa65fdb1b845e8f918f200dbaad" translate="yes" xml:space="preserve">
          <source>, Volume 2, Section 3.4.2, by Donald E. Knuth.</source>
          <target state="translated">, Volume 2, Section 3.4.2, by Donald E. Knuth.</target>
        </trans-unit>
        <trans-unit id="633875e12973ea9004215c69c80143c016eb22c8" translate="yes" xml:space="preserve">
          <source>, a German magazine dedicated to Perl, at ( &lt;a href=&quot;http://www.foo-magazin.de&quot;&gt;http://www.foo-magazin.de&lt;/a&gt; ). The</source>
          <target state="translated">, a German magazine dedicated to Perl, at ( &lt;a href=&quot;http://www.foo-magazin.de&quot;&gt;http://www.foo-magazin.de&lt;/a&gt; ). The</target>
        </trans-unit>
        <trans-unit id="14297948b11112ed3c840f341ffecd330757f94c" translate="yes" xml:space="preserve">
          <source>, a Perl script which uses the &lt;code&gt;MakeMaker&lt;/code&gt; library modules supplied with Perl to generate a</source>
          <target state="translated">, a Perl script which uses the &lt;code&gt;MakeMaker&lt;/code&gt; library modules supplied with Perl to generate a</target>
        </trans-unit>
        <trans-unit id="855e80b07db61e1b1fac17edd36f618a095e2b73" translate="yes" xml:space="preserve">
          <source>, a collator via &lt;code&gt;Unicode::Collate-&amp;gt;new( )&lt;/code&gt; should be used; for</source>
          <target state="translated">, a collator via &lt;code&gt;Unicode::Collate-&amp;gt;new( )&lt;/code&gt; should be used; for</target>
        </trans-unit>
        <trans-unit id="337354a63807d72c18305c9618bef7795ca2d6b6" translate="yes" xml:space="preserve">
          <source>, a collator via &lt;code&gt;Unicode::Collate-&amp;gt;new(variable =&amp;gt; &quot;non-ignorable&quot;, level =&amp;gt; 3)&lt;/code&gt; .</source>
          <target state="translated">, a collator via &lt;code&gt;Unicode::Collate-&amp;gt;new(variable =&amp;gt; &quot;non-ignorable&quot;, level =&amp;gt; 3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="181354d61db1393a6d43dac9c961eb59f80b38ac" translate="yes" xml:space="preserve">
          <source>, a crude but sufficient utility to check the integrity of a UCM file. Check under the Encode/bin directory for this.</source>
          <target state="translated">, a crude but sufficient utility to check the integrity of a UCM file. Check under the Encode/bin directory for this.</target>
        </trans-unit>
        <trans-unit id="ee470b6f82053958faf72f7660a0d296d09184d4" translate="yes" xml:space="preserve">
          <source>, a debug aid which allowed callers to identify themselves. This aid has been superseded by a new build option, PERL_MEM_LOG (see &lt;a href=&quot;perlhacktips#PERL_MEM_LOG&quot;&gt;PERL_MEM_LOG in perlhacktips&lt;/a&gt;). The older API is still there for use in XS modules supporting older perls.</source>
          <target state="translated">, a debug aid which allowed callers to identify themselves. This aid has been superseded by a new build option, PERL_MEM_LOG (see &lt;a href=&quot;perlhacktips#PERL_MEM_LOG&quot;&gt;PERL_MEM_LOG in perlhacktips&lt;/a&gt;). The older API is still there for use in XS modules supporting older perls.</target>
        </trans-unit>
        <trans-unit id="be95971fca9604306918e6af9caf54dadcd9baea" translate="yes" xml:space="preserve">
          <source>, a non-UTF-8 one), a multi-byte character was encountered. Perl considers this character to be the specified Unicode code point. Combining non-UTF-8 locales and Unicode is dangerous. Almost certainly some characters will have two different representations. For example, in the ISO 8859-7 (Greek) locale, the code point 0xC3 represents a Capital Gamma. But so also does 0x393. This will make string comparisons unreliable.</source>
          <target state="translated">, a non-UTF-8 one), a multi-byte character was encountered. Perl considers this character to be the specified Unicode code point. Combining non-UTF-8 locales and Unicode is dangerous. Almost certainly some characters will have two different representations. For example, in the ISO 8859-7 (Greek) locale, the code point 0xC3 represents a Capital Gamma. But so also does 0x393. This will make string comparisons unreliable.</target>
        </trans-unit>
        <trans-unit id="4a8a9cd0090598c42711026e8b2bedbe13afa859" translate="yes" xml:space="preserve">
          <source>, a scalar variable containing a filehandle. You can use it the same way you would a normal filehandle. For example, you can read one line from it this way:</source>
          <target state="translated">, a scalar variable containing a filehandle. You can use it the same way you would a normal filehandle. For example, you can read one line from it this way:</target>
        </trans-unit>
        <trans-unit id="87346f4ea924d98273903e7b08eb5bb50fb07524" translate="yes" xml:space="preserve">
          <source>, a standard for representing the alphabets from virtually all of the world's written languages, and a host of symbols. Perl's text strings are Unicode strings, so they can contain characters with a value (codepoint or character number) higher than 255.</source>
          <target state="translated">, a standard for representing the alphabets from virtually all of the world's written languages, and a host of symbols. Perl's text strings are Unicode strings, so they can contain characters with a value (codepoint or character number) higher than 255.</target>
        </trans-unit>
        <trans-unit id="a9ff749a1a77a1bd6de5d5980b0e406d37de2a87" translate="yes" xml:space="preserve">
          <source>, a utility to extract named sections from documents written in POD. For instance, while utilities have &quot;USAGE&quot; sections, Perl modules usually have &quot;SYNOPSIS&quot; sections: &lt;code&gt;podselect -s &quot;SYNOPSIS&quot; ...&lt;/code&gt; will extract this section for a given file.</source>
          <target state="translated">, a utility to extract named sections from documents written in POD. For instance, while utilities have &quot;USAGE&quot; sections, Perl modules usually have &quot;SYNOPSIS&quot; sections: &lt;code&gt;podselect -s &quot;SYNOPSIS&quot; ...&lt;/code&gt; will extract this section for a given file.</target>
        </trans-unit>
        <trans-unit id="db014a48cc1ae20706ba0b5682336d456105e57c" translate="yes" xml:space="preserve">
          <source>, above, below, to one side or the other,</source>
          <target state="translated">, above, below, to one side or the other,</target>
        </trans-unit>
        <trans-unit id="5bf0fa78a7fe771f1c10ae24e95162b1b6bb2a45" translate="yes" xml:space="preserve">
          <source>, albeit fairly useless ones. All they does is filter the source stream without modifying it at all.</source>
          <target state="translated">, albeit fairly useless ones. All they does is filter the source stream without modifying it at all.</target>
        </trans-unit>
        <trans-unit id="5362fe8d34331626858b75f7fc5b14ff4d9fc4ab" translate="yes" xml:space="preserve">
          <source>, all IN UPPER CASE. Some control-type code points do not have names. This field will be empty for &lt;code&gt;Surrogate&lt;/code&gt; and &lt;code&gt;Private Use&lt;/code&gt; code points, and for the others without a name, it will contain a description enclosed in angle brackets, like &lt;code&gt;&amp;lt;control&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">, all IN UPPER CASE. Some control-type code points do not have names. This field will be empty for &lt;code&gt;Surrogate&lt;/code&gt; and &lt;code&gt;Private Use&lt;/code&gt; code points, and for the others without a name, it will contain a description enclosed in angle brackets, like &lt;code&gt;&amp;lt;control&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f664646812299a02b0171f588d3e3b25b20c386d" translate="yes" xml:space="preserve">
          <source>, all but the first posthumously assembled by CJRT. But</source>
          <target state="translated">, all but the first posthumously assembled by CJRT. But</target>
        </trans-unit>
        <trans-unit id="bc5ed6d6260771787075622eea22b930d5fe4a65" translate="yes" xml:space="preserve">
          <source>, along with the header files</source>
          <target state="translated">, along with the header files</target>
        </trans-unit>
        <trans-unit id="1c56ef602b07cce67c23c54f38c6850a343a4ce2" translate="yes" xml:space="preserve">
          <source>, although you're better off reading the original YACC input in</source>
          <target state="translated">, although you're better off reading the original YACC input in</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">, and</target>
        </trans-unit>
        <trans-unit id="0010f4c714dfcbbc2cef143cc9657ab05ffac473" translate="yes" xml:space="preserve">
          <source>, and &lt;b&gt;pod2usage()&lt;/b&gt; adheres to this philosophy. If you are interested in seeing a number of different ways to invoke &lt;b&gt;pod2usage&lt;/b&gt; (although by no means exhaustive), please refer to &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt;.</source>
          <target state="translated">, and &lt;b&gt;pod2usage()&lt;/b&gt; adheres to this philosophy. If you are interested in seeing a number of different ways to invoke &lt;b&gt;pod2usage&lt;/b&gt; (although by no means exhaustive), please refer to &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dd9e2024ba8a9984c63410d51fe1a587ce82acdf" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;S_mro_get_linear_isa_dfs()&lt;/code&gt; in</source>
          <target state="translated">, and &lt;code&gt;S_mro_get_linear_isa_dfs()&lt;/code&gt; in</target>
        </trans-unit>
        <trans-unit id="7965adffe1bd5d2a5ae6fef9ed74cb1e415855b5" translate="yes" xml:space="preserve">
          <source>, and Perl will then dispatch the program to the correct interpreter for them.</source>
          <target state="translated">, and Perl will then dispatch the program to the correct interpreter for them.</target>
        </trans-unit>
        <trans-unit id="d17b3bf1e5023500587f0bcfd04e502c3bc08dca" translate="yes" xml:space="preserve">
          <source>, and a type of</source>
          <target state="translated">, and a type of</target>
        </trans-unit>
        <trans-unit id="11eff2ad6b0924ed9a9167101ce0e3ec0461d9bb" translate="yes" xml:space="preserve">
          <source>, and all standard-fearing programs ought to follow this convention. (This is, of course, a stern backing for one of the Lilliputian parties and may well influence the political development there.) So, if the protocol expects you to send a message by sending the length first, followed by just so many bytes, you could write:</source>
          <target state="translated">, and all standard-fearing programs ought to follow this convention. (This is, of course, a stern backing for one of the Lilliputian parties and may well influence the political development there.) So, if the protocol expects you to send a message by sending the length first, followed by just so many bytes, you could write:</target>
        </trans-unit>
        <trans-unit id="09f5aea40a8a98f4ed0812b20a5158126d6be5b5" translate="yes" xml:space="preserve">
          <source>, and an SV argument for it is returned in</source>
          <target state="translated">, and an SV argument for it is returned in</target>
        </trans-unit>
        <trans-unit id="907df61a5a10c19d07f5b25bb871f858cdf3aedb" translate="yes" xml:space="preserve">
          <source>, and an SV argument for it is supplied in</source>
          <target state="translated">, and an SV argument for it is supplied in</target>
        </trans-unit>
        <trans-unit id="07578e4d2c674557fed4e3b460e007cddc507081" translate="yes" xml:space="preserve">
          <source>, and appends that data to the current state. The return value is the updated object itself.</source>
          <target state="translated">, and appends that data to the current state. The return value is the updated object itself.</target>
        </trans-unit>
        <trans-unit id="47d93ebc28ad85bac43459b74d7c9dbb3a691abc" translate="yes" xml:space="preserve">
          <source>, and arrange for some changes to be automatically undone at the end of it, either explicit, or via a non-local exit (via die()). A</source>
          <target state="translated">, and arrange for some changes to be automatically undone at the end of it, either explicit, or via a non-local exit (via die()). A</target>
        </trans-unit>
        <trans-unit id="9662074e67662b5481a257ab591d1bcd6cd373a7" translate="yes" xml:space="preserve">
          <source>, and choose &lt;code&gt;Link
object modules&lt;/code&gt; in</source>
          <target state="translated">, and choose &lt;code&gt;Link
object modules&lt;/code&gt; in</target>
        </trans-unit>
        <trans-unit id="110d41533f5d3ce6a781ca76529c953253c32c91" translate="yes" xml:space="preserve">
          <source>, and do not want to hand-edit thousands of your scripts, the long-term solution proposed on p5-p is to have a directive</source>
          <target state="translated">, and do not want to hand-edit thousands of your scripts, the long-term solution proposed on p5-p is to have a directive</target>
        </trans-unit>
        <trans-unit id="cc9709da02255267935725dadd4e4f1b5070af04" translate="yes" xml:space="preserve">
          <source>, and even a blessed hash reference uses &quot;HASH&quot; as its</source>
          <target state="translated">, and even a blessed hash reference uses &quot;HASH&quot; as its</target>
        </trans-unit>
        <trans-unit id="5ef9d3e35d5e919080f798270609eb087c92e72c" translate="yes" xml:space="preserve">
          <source>, and executables go in</source>
          <target state="translated">, and executables go in</target>
        </trans-unit>
        <trans-unit id="e99a7bbd8a62347c5bce742eeae839d4eb74e152" translate="yes" xml:space="preserve">
          <source>, and for a detailed look at the semantics of regular expressions. In particular, all modifiers except the largely obsolete &lt;code&gt;/o&lt;/code&gt; are further explained in &lt;a href=&quot;perlre#Modifiers&quot;&gt;Modifiers in perlre&lt;/a&gt;. &lt;code&gt;/o&lt;/code&gt; is described in the next section.</source>
          <target state="translated">, and for a detailed look at the semantics of regular expressions. In particular, all modifiers except the largely obsolete &lt;code&gt;/o&lt;/code&gt; are further explained in &lt;a href=&quot;perlre#Modifiers&quot;&gt;Modifiers in perlre&lt;/a&gt;. &lt;code&gt;/o&lt;/code&gt; is described in the next section.</target>
        </trans-unit>
        <trans-unit id="fea8f1839cc7e75e58025f40c960d342144ecc35" translate="yes" xml:space="preserve">
          <source>, and have Perl create &lt;code&gt;#define&lt;/code&gt; 's for you, based on the current platform.</source>
          <target state="translated">, and have Perl create &lt;code&gt;#define&lt;/code&gt; 's for you, based on the current platform.</target>
        </trans-unit>
        <trans-unit id="900068e92f1192efacbc29ee3e1d53428f88cdd9" translate="yes" xml:space="preserve">
          <source>, and is initialized whenever Perl is invoked. In the &lt;b&gt;dynamic&lt;/b&gt; configuration, the extension's machine code is placed into a separate shareable image, which is mapped by Perl's DynaLoader when the extension is &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;d or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;d in your script. This allows you to maintain the extension as a separate entity, at the cost of keeping track of the additional shareable image. Most extensions can be set up as either static or dynamic.</source>
          <target state="translated">, and is initialized whenever Perl is invoked. In the &lt;b&gt;dynamic&lt;/b&gt; configuration, the extension's machine code is placed into a separate shareable image, which is mapped by Perl's DynaLoader when the extension is &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;d or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;d in your script. This allows you to maintain the extension as a separate entity, at the cost of keeping track of the additional shareable image. Most extensions can be set up as either static or dynamic.</target>
        </trans-unit>
        <trans-unit id="b914301e3b694e04eb4c8f6d66927ba02c63ec35" translate="yes" xml:space="preserve">
          <source>, and is mainly used if</source>
          <target state="translated">, and is mainly used if</target>
        </trans-unit>
        <trans-unit id="5131123bb887b411a05999cb591c474e9daf98b5" translate="yes" xml:space="preserve">
          <source>, and is noted with a horizontal bar above the number, or &lt;code&gt;~z&lt;/code&gt; here.</source>
          <target state="translated">, and is noted with a horizontal bar above the number, or &lt;code&gt;~z&lt;/code&gt; here.</target>
        </trans-unit>
        <trans-unit id="f3befe3ecdb52c3422eb6f93dd78d5aaedf3fabd" translate="yes" xml:space="preserve">
          <source>, and loaded by SWASHNEW, using</source>
          <target state="translated">, and loaded by SWASHNEW, using</target>
        </trans-unit>
        <trans-unit id="1787c9612788394f8950dccec477064ff47cc618" translate="yes" xml:space="preserve">
          <source>, and located either in the wired-in-during-compile locations (usually</source>
          <target state="translated">, and located either in the wired-in-during-compile locations (usually</target>
        </trans-unit>
        <trans-unit id="3f5db2f6d9247a04a8fdbc30fe1efcc305bcdcc0" translate="yes" xml:space="preserve">
          <source>, and many ops have their own optimizing functions.</source>
          <target state="translated">, and many ops have their own optimizing functions.</target>
        </trans-unit>
        <trans-unit id="5edcae719ec7875f046ff91c0210af5ff89c2790" translate="yes" xml:space="preserve">
          <source>, and on Windows it would result in</source>
          <target state="translated">, and on Windows it would result in</target>
        </trans-unit>
        <trans-unit id="744cb0990a11cbc554e464fe23863d4a00b4136e" translate="yes" xml:space="preserve">
          <source>, and returns one reference to the new &lt;code&gt;refcounted_he&lt;/code&gt; .</source>
          <target state="translated">, and returns one reference to the new &lt;code&gt;refcounted_he&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f2f2fac6d25d7ba621ec4876ee490192080dccc" translate="yes" xml:space="preserve">
          <source>, and returns the modified hash. The returned hash pointer is in general not the same as the hash pointer that was passed in. The input hash is consumed by the function, and the pointer to it must not be subsequently used. Use &lt;a href=&quot;#cophh_copy&quot;&gt;cophh_copy&lt;/a&gt; if you need both hashes.</source>
          <target state="translated">, and returns the modified hash. The returned hash pointer is in general not the same as the hash pointer that was passed in. The input hash is consumed by the function, and the pointer to it must not be subsequently used. Use &lt;a href=&quot;#cophh_copy&quot;&gt;cophh_copy&lt;/a&gt; if you need both hashes.</target>
        </trans-unit>
        <trans-unit id="def96a3fb64ab61d8b47c5c7c69ce7251de754fe" translate="yes" xml:space="preserve">
          <source>, and run</source>
          <target state="translated">, and run</target>
        </trans-unit>
        <trans-unit id="910d0b04d2f7ed13b6c81acf52dcf3b2185353b5" translate="yes" xml:space="preserve">
          <source>, and so we make a copy of</source>
          <target state="translated">, and so we make a copy of</target>
        </trans-unit>
        <trans-unit id="52cab3ae12ab735a21d73b832e20e1fc668ffa87" translate="yes" xml:space="preserve">
          <source>, and splits it up into chunks separated by lines of equal signs, which are placed in &lt;code&gt;@Fields&lt;/code&gt; .</source>
          <target state="translated">, and splits it up into chunks separated by lines of equal signs, which are placed in &lt;code&gt;@Fields&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34ecfa8acd326d9d67e3ffa2f086f02a68db8dfb" translate="yes" xml:space="preserve">
          <source>, and start it by typing</source>
          <target state="translated">, and start it by typing</target>
        </trans-unit>
        <trans-unit id="2df22aba65ded74733f8217023fc9a2c713a5813" translate="yes" xml:space="preserve">
          <source>, and that &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; cannot and do not attempt to emulate the reverse mapping. Other &lt;code&gt;.&lt;/code&gt;'s in filenames are translated to &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">, and that &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; cannot and do not attempt to emulate the reverse mapping. Other &lt;code&gt;.&lt;/code&gt;'s in filenames are translated to &lt;code&gt;/&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b3d815d4e6d0e0bf7a5070acb067a435d89afd9c" translate="yes" xml:space="preserve">
          <source>, and the</source>
          <target state="translated">, and the</target>
        </trans-unit>
        <trans-unit id="b3a5f939ce328cd3a253a4971e69a804f33e67d5" translate="yes" xml:space="preserve">
          <source>, and the Gulf of Guinea (think of the missing big chunk of Africa)</source>
          <target state="translated">, and the Gulf of Guinea (think of the missing big chunk of Africa)</target>
        </trans-unit>
        <trans-unit id="49678bf28719f40cbc47bf372671fcd223bd7354" translate="yes" xml:space="preserve">
          <source>, and the error message will include the line and file where the failed request happened.</source>
          <target state="translated">, and the error message will include the line and file where the failed request happened.</target>
        </trans-unit>
        <trans-unit id="c64023a04906dd729256ff3e0c07dcfe556d4b78" translate="yes" xml:space="preserve">
          <source>, and the rest of the things in the lexicon class as things that we know how to</source>
          <target state="translated">, and the rest of the things in the lexicon class as things that we know how to</target>
        </trans-unit>
        <trans-unit id="6c2c13f1fd18de7a45c45c3b6d611d0fa6d993db" translate="yes" xml:space="preserve">
          <source>, and the second being the</source>
          <target state="translated">, and the second being the</target>
        </trans-unit>
        <trans-unit id="10948b5578036f5ad32a0ed831bfc6d104fae454" translate="yes" xml:space="preserve">
          <source>, and the semaphore's count remains unchanged. Otherwise, the semaphore's count is decremented and this method returns</source>
          <target state="translated">, and the semaphore's count remains unchanged. Otherwise, the semaphore's count is decremented and this method returns</target>
        </trans-unit>
        <trans-unit id="73b36d5071f4b2d6973b107a88cccdf62d2e436d" translate="yes" xml:space="preserve">
          <source>, and the true value in the fourth argument means</source>
          <target state="translated">, and the true value in the fourth argument means</target>
        </trans-unit>
        <trans-unit id="759ee7d0b93dff6747c3fbd234956c01b3c8260a" translate="yes" xml:space="preserve">
          <source>, and then the CRTL &lt;code&gt;environ&lt;/code&gt; array. This default order is reversed when the logical name</source>
          <target state="translated">, and then the CRTL &lt;code&gt;environ&lt;/code&gt; array. This default order is reversed when the logical name</target>
        </trans-unit>
        <trans-unit id="4c771b3606fdd622281d6b0976acb1e8b29c8ab9" translate="yes" xml:space="preserve">
          <source>, and they will therefore all hold whatever was last in @array! It's similar to the problem demonstrated in the following C program:</source>
          <target state="translated">, and they will therefore all hold whatever was last in @array! It's similar to the problem demonstrated in the following C program:</target>
        </trans-unit>
        <trans-unit id="ea985a0949a3673c272b8e0d49f54e041583c6c4" translate="yes" xml:space="preserve">
          <source>, and will be examined later.</source>
          <target state="translated">, and will be examined later.</target>
        </trans-unit>
        <trans-unit id="c060f0c42881559e0dd3ac792535e84bb4d41c37" translate="yes" xml:space="preserve">
          <source>, and will free it.</source>
          <target state="translated">, and will free it.</target>
        </trans-unit>
        <trans-unit id="88f40c683f759884090876f282199945cd762ea4" translate="yes" xml:space="preserve">
          <source>, and with dynamic CRT DLL. This executable is a VIO application.</source>
          <target state="translated">, and with dynamic CRT DLL. This executable is a VIO application.</target>
        </trans-unit>
        <trans-unit id="f5ffc67dd22fb19007fd6dce315aac48234ca530" translate="yes" xml:space="preserve">
          <source>, and writes change the value. In both cases the position in</source>
          <target state="translated">, and writes change the value. In both cases the position in</target>
        </trans-unit>
        <trans-unit id="4aa138eb7154eb226a5d7af0b04c19ffd9e3302e" translate="yes" xml:space="preserve">
          <source>, and you want the perl module be named as &lt;code&gt;Ext::Ension&lt;/code&gt; . If you need some preprocessor directives and/or linking with external libraries, see the flags &lt;code&gt;-F&lt;/code&gt; , &lt;code&gt;-L&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; in &lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONS&lt;/a&gt;.</source>
          <target state="translated">, and you want the perl module be named as &lt;code&gt;Ext::Ension&lt;/code&gt; . If you need some preprocessor directives and/or linking with external libraries, see the flags &lt;code&gt;-F&lt;/code&gt; , &lt;code&gt;-L&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; in &lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONS&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f3432a5b49b7c2d6b8db782af36b21ccbf7c42da" translate="yes" xml:space="preserve">
          <source>, and you want to install the library in</source>
          <target state="translated">, and you want to install the library in</target>
        </trans-unit>
        <trans-unit id="548642e975a7aad08e0815d9a988055ad22fd668" translate="yes" xml:space="preserve">
          <source>, api_revision is the &lt;code&gt;5&lt;/code&gt; . Prior to 5.5.640, the format was a floating point number, like 5.00563.</source>
          <target state="translated">, api_revision is the &lt;code&gt;5&lt;/code&gt; . Prior to 5.5.640, the format was a floating point number, like 5.00563.</target>
        </trans-unit>
        <trans-unit id="188a87e7240228ac91dcd0c1a6be3953445dc39d" translate="yes" xml:space="preserve">
          <source>, api_subversion is the &lt;code&gt;1&lt;/code&gt; . See api_revision for full details.</source>
          <target state="translated">, api_subversion is the &lt;code&gt;1&lt;/code&gt; . See api_revision for full details.</target>
        </trans-unit>
        <trans-unit id="a73dc0145a278edd9b0c16fb3b9861e0ad5e4534" translate="yes" xml:space="preserve">
          <source>, api_version is the &lt;code&gt;6&lt;/code&gt; . See api_revision for full details. As a special case, 5.5.0 is rendered in the old-style as 5.005. (In the 5.005_0x maintenance series, this was the only versioned directory in $sitelib.)</source>
          <target state="translated">, api_version is the &lt;code&gt;6&lt;/code&gt; . See api_revision for full details. As a special case, 5.5.0 is rendered in the old-style as 5.005. (In the 5.005_0x maintenance series, this was the only versioned directory in $sitelib.)</target>
        </trans-unit>
        <trans-unit id="7a97d37b678b945a449c7d36a99037c11f17aab4" translate="yes" xml:space="preserve">
          <source>, are generated when</source>
          <target state="translated">, are generated when</target>
        </trans-unit>
        <trans-unit id="1677c7c3fc729a817e4acfa05dba2ce6dccfb2e7" translate="yes" xml:space="preserve">
          <source>, are reserved for use in regexp notation. The metacharacters are</source>
          <target state="translated">, are reserved for use in regexp notation. The metacharacters are</target>
        </trans-unit>
        <trans-unit id="5cb6624450c0504e407388bb9dd4d65ed8a21177" translate="yes" xml:space="preserve">
          <source>, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a cylinder surface. The radius of the cylinder is &lt;b&gt;rho&lt;/b&gt;, also known as the</source>
          <target state="translated">, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a cylinder surface. The radius of the cylinder is &lt;b&gt;rho&lt;/b&gt;, also known as the</target>
        </trans-unit>
        <trans-unit id="08ae511c03da62c55bc28f08c497a5cd99f011a3" translate="yes" xml:space="preserve">
          <source>, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a sphere surface. The radius of the sphere is &lt;b&gt;rho&lt;/b&gt;, also known as the</source>
          <target state="translated">, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a sphere surface. The radius of the sphere is &lt;b&gt;rho&lt;/b&gt;, also known as the</target>
        </trans-unit>
        <trans-unit id="f21c678c3b392bc1e40f88b091f81477c570711c" translate="yes" xml:space="preserve">
          <source>, as at &lt;a href=&quot;http://sunsite.dk/RFC/rfc/rfc3066.html&quot;&gt;http://sunsite.dk/RFC/rfc/rfc3066.html&lt;/a&gt;</source>
          <target state="translated">, as at &lt;a href=&quot;http://sunsite.dk/RFC/rfc/rfc3066.html&quot;&gt;http://sunsite.dk/RFC/rfc/rfc3066.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="66ae827ead4750ffe3370a29e9f62b3a997007cd" translate="yes" xml:space="preserve">
          <source>, as described in the next paragraph. Or, if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; is used with script name arguments, then for &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; the name</source>
          <target state="translated">, as described in the next paragraph. Or, if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; is used with script name arguments, then for &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; the name</target>
        </trans-unit>
        <trans-unit id="8a69d8284e4806cb3167c85fd84978d404a739e1" translate="yes" xml:space="preserve">
          <source>, as if the chain of unbroken output somehow ensures the survival of the program. If speed is in any way an issue, this approach is wrong.</source>
          <target state="translated">, as if the chain of unbroken output somehow ensures the survival of the program. If speed is in any way an issue, this approach is wrong.</target>
        </trans-unit>
        <trans-unit id="2447a9b3daed4b590f24d0dda264bc7a27cfb571" translate="yes" xml:space="preserve">
          <source>, as in &lt;code&gt;nstore&lt;/code&gt; and &lt;code&gt;nstore_fd&lt;/code&gt; . At retrieval time, your data will be correctly restored so you don't have to know whether you're restoring from native or network ordered data. Double values are stored stringified to ensure portability as well, at the slight risk of loosing some precision in the last decimals.</source>
          <target state="translated">, as in &lt;code&gt;nstore&lt;/code&gt; and &lt;code&gt;nstore_fd&lt;/code&gt; . At retrieval time, your data will be correctly restored so you don't have to know whether you're restoring from native or network ordered data. Double values are stored stringified to ensure portability as well, at the slight risk of loosing some precision in the last decimals.</target>
        </trans-unit>
        <trans-unit id="44e9ce8f895c605d8b566ef8add0326c89ba8c44" translate="yes" xml:space="preserve">
          <source>, as many platforms have case-insensitive (or at least case-forgiving) filenames. Also, try not to have non-word characters (except for &lt;code&gt;.&lt;/code&gt;) in the names, and keep them to the 8.3 convention, for maximum portability, onerous a burden though this may appear.</source>
          <target state="translated">, as many platforms have case-insensitive (or at least case-forgiving) filenames. Also, try not to have non-word characters (except for &lt;code&gt;.&lt;/code&gt;) in the names, and keep them to the 8.3 convention, for maximum portability, onerous a burden though this may appear.</target>
        </trans-unit>
        <trans-unit id="86c4b8b976d7fe73a2f1d8c81c5d4231eab338d9" translate="yes" xml:space="preserve">
          <source>, as the other binaries are found relative to the perl binary.</source>
          <target state="translated">, as the other binaries are found relative to the perl binary.</target>
        </trans-unit>
        <trans-unit id="66215e5d0d7fcdf3b23116101a903820fe1c82b9" translate="yes" xml:space="preserve">
          <source>, as we set the PL_exit_flag PERL_EXIT_DESTRUCT_END which executes END blocks in perl_destruct.</source>
          <target state="translated">, as we set the PL_exit_flag PERL_EXIT_DESTRUCT_END which executes END blocks in perl_destruct.</target>
        </trans-unit>
        <trans-unit id="f844aaaf402bacab2d52c88c71153b6f22ec5daa" translate="yes" xml:space="preserve">
          <source>, as well as make Perl the best language to use under OS/2. The secondary target is to try to make this work under DOS and Win* as well (but not &lt;b&gt;too&lt;/b&gt; hard).</source>
          <target state="translated">, as well as make Perl the best language to use under OS/2. The secondary target is to try to make this work under DOS and Win* as well (but not &lt;b&gt;too&lt;/b&gt; hard).</target>
        </trans-unit>
        <trans-unit id="246b91b96e62d4665dc1c91df63b1c10f4839a54" translate="yes" xml:space="preserve">
          <source>, as you'll need to understand the &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; API. A good place to start is by understanding how &lt;a href=&quot;#aggregate_tests&quot;&gt;aggregate_tests&lt;/a&gt; works.</source>
          <target state="translated">, as you'll need to understand the &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; API. A good place to start is by understanding how &lt;a href=&quot;#aggregate_tests&quot;&gt;aggregate_tests&lt;/a&gt; works.</target>
        </trans-unit>
        <trans-unit id="883a2167578552cc32e56e34c60f2a72656b4d09" translate="yes" xml:space="preserve">
          <source>, assumed to be a sequence of octets in</source>
          <target state="translated">, assumed to be a sequence of octets in</target>
        </trans-unit>
        <trans-unit id="e751512716d9aa9f5b3c28259b944c1f3b0c56d1" translate="yes" xml:space="preserve">
          <source>, attempts to bring some of the newer Perl API features to older versions of Perl, so that you can worry less about keeping track of old releases, but users can still reap the benefit.</source>
          <target state="translated">, attempts to bring some of the newer Perl API features to older versions of Perl, so that you can worry less about keeping track of old releases, but users can still reap the benefit.</target>
        </trans-unit>
        <trans-unit id="dcf124669e071fb32c507b660ca8a45e10a33382" translate="yes" xml:space="preserve">
          <source>, because the $1 variable is magical and read-only :</source>
          <target state="translated">, because the $1 variable is magical and read-only :</target>
        </trans-unit>
        <trans-unit id="24f1b41d67d203257d6ce62a6d577842a88809d7" translate="yes" xml:space="preserve">
          <source>, because the reduced pollution of newer Perl versions is an important thing. It's so important that the old polluting ways of original Perl modules will not be supported very far into the future, and your module will almost certainly break! By adapting to it now, you'll gain compatibility and a sense of having done the electronic ecology some good.</source>
          <target state="translated">, because the reduced pollution of newer Perl versions is an important thing. It's so important that the old polluting ways of original Perl modules will not be supported very far into the future, and your module will almost certainly break! By adapting to it now, you'll gain compatibility and a sense of having done the electronic ecology some good.</target>
        </trans-unit>
        <trans-unit id="cd35ebaf87e878605763ba0f4d65f6bf7f75dcc8" translate="yes" xml:space="preserve">
          <source>, because you were accidentally accessing &lt;code&gt;@aref&lt;/code&gt; , an undeclared variable, and it would thereby remind you to write instead:</source>
          <target state="translated">, because you were accidentally accessing &lt;code&gt;@aref&lt;/code&gt; , an undeclared variable, and it would thereby remind you to write instead:</target>
        </trans-unit>
        <trans-unit id="fc90bbfbb3e4cc7f9f2ca2bbceaeebbd891dbeb9" translate="yes" xml:space="preserve">
          <source>, below takes 2 parameters and increments each directly.</source>
          <target state="translated">, below takes 2 parameters and increments each directly.</target>
        </trans-unit>
        <trans-unit id="a6beabe044ad8f9d1627ed533c6a9c88995aa997" translate="yes" xml:space="preserve">
          <source>, but $siteprefix might be</source>
          <target state="translated">, but $siteprefix might be</target>
        </trans-unit>
        <trans-unit id="6fce1e601c1523c8b2526a111e9e136024aa2709" translate="yes" xml:space="preserve">
          <source>, but are no longer available with</source>
          <target state="translated">, but are no longer available with</target>
        </trans-unit>
        <trans-unit id="64ad796371383427b4cd0ba4371e73bd89ebb1b2" translate="yes" xml:space="preserve">
          <source>, but because &lt;code&gt;Foo&lt;/code&gt; defines a symbol (the &lt;code&gt;exclaim&lt;/code&gt; subroutine), &lt;code&gt;base&lt;/code&gt; will not die when the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; fails to load</source>
          <target state="translated">, but because &lt;code&gt;Foo&lt;/code&gt; defines a symbol (the &lt;code&gt;exclaim&lt;/code&gt; subroutine), &lt;code&gt;base&lt;/code&gt; will not die when the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; fails to load</target>
        </trans-unit>
        <trans-unit id="61e7380af3179cca867b3885f99b22e74a3249cf" translate="yes" xml:space="preserve">
          <source>, but because you access them via the &lt;code&gt;maketext&lt;/code&gt; method, which looks for entries across all the &lt;code&gt;%Lexicon&lt;/code&gt; hashes in a language class</source>
          <target state="translated">, but because you access them via the &lt;code&gt;maketext&lt;/code&gt; method, which looks for entries across all the &lt;code&gt;%Lexicon&lt;/code&gt; hashes in a language class</target>
        </trans-unit>
        <trans-unit id="a42a597d11c292d0f56cbf1684a5eac6028a67a1" translate="yes" xml:space="preserve">
          <source>, but can also be</source>
          <target state="translated">, but can also be</target>
        </trans-unit>
        <trans-unit id="7909130b18300cbb98ea4bbe9e66d49642019dec" translate="yes" xml:space="preserve">
          <source>, but cannot come at the end of a string, because the backslash would be parsed as escaping the end quote.</source>
          <target state="translated">, but cannot come at the end of a string, because the backslash would be parsed as escaping the end quote.</target>
        </trans-unit>
        <trans-unit id="42948efb81aca3fb2bd97534710c99990f79587a" translate="yes" xml:space="preserve">
          <source>, but from line 4.</source>
          <target state="translated">, but from line 4.</target>
        </trans-unit>
        <trans-unit id="bd1670f6de47acc9c9b7267ab71cba06c196ce25" translate="yes" xml:space="preserve">
          <source>, but it causes no harm.)</source>
          <target state="translated">, but it causes no harm.)</target>
        </trans-unit>
        <trans-unit id="37120fa0734b652eb610ce4ae8b5f1bcc7d622f5" translate="yes" xml:space="preserve">
          <source>, but it does not contain all the characters from those blocks. It does not, for example, contain the digits 0-9, because those digits are shared across many scripts, and hence are in the &lt;code&gt;Common&lt;/code&gt; script.</source>
          <target state="translated">, but it does not contain all the characters from those blocks. It does not, for example, contain the digits 0-9, because those digits are shared across many scripts, and hence are in the &lt;code&gt;Common&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="1f2db577fa7893e92367cf784603b9d9d657f707" translate="yes" xml:space="preserve">
          <source>, but it has no problem linking to symbols in the</source>
          <target state="translated">, but it has no problem linking to symbols in the</target>
        </trans-unit>
        <trans-unit id="bfb0016f55f0d3d559ba19fb54ebc0f455007395" translate="yes" xml:space="preserve">
          <source>, but it is a PM application.</source>
          <target state="translated">, but it is a PM application.</target>
        </trans-unit>
        <trans-unit id="bbe2c80423e439b3e4c161c99b0cea935717fc61" translate="yes" xml:space="preserve">
          <source>, but it is a very bad idea for two reasons.</source>
          <target state="translated">, but it is a very bad idea for two reasons.</target>
        </trans-unit>
        <trans-unit id="cdd23309b99a536c1f9d3df8a7c3d7430cce3c6b" translate="yes" xml:space="preserve">
          <source>, but it's really a 2D plane). The number</source>
          <target state="translated">, but it's really a 2D plane). The number</target>
        </trans-unit>
        <trans-unit id="b1b91a2c92813f244d7d492decf11786f03248cc" translate="yes" xml:space="preserve">
          <source>, but parameter order has been &quot;tidied up a little&quot;.</source>
          <target state="translated">, but parameter order has been &quot;tidied up a little&quot;.</target>
        </trans-unit>
        <trans-unit id="114efd0755f2064562435a7b7db5cf78b23a339b" translate="yes" xml:space="preserve">
          <source>, but that the meaning of the code point has been</source>
          <target state="translated">, but that the meaning of the code point has been</target>
        </trans-unit>
        <trans-unit id="e48be256548eb3d87af3b99e921dd4b6fcf05890" translate="yes" xml:space="preserve">
          <source>, but the &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt; module was unable to locate this library. See &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;.</source>
          <target state="translated">, but the &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt; module was unable to locate this library. See &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bec967278894f864c70eea888e73e74018b65bcb" translate="yes" xml:space="preserve">
          <source>, but the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Valid&quot;&gt;Email::Valid&lt;/a&gt; module will do both part</source>
          <target state="translated">, but the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Valid&quot;&gt;Email::Valid&lt;/a&gt; module will do both part</target>
        </trans-unit>
        <trans-unit id="7536c70955b6a15d5f19153fc86efe49d7b1220b" translate="yes" xml:space="preserve">
          <source>, but the latter parts after</source>
          <target state="translated">, but the latter parts after</target>
        </trans-unit>
        <trans-unit id="6b70056cdd55185377fa7fb36dcc37e7dfcc656b" translate="yes" xml:space="preserve">
          <source>, but there are legitimate cases where the polar style</source>
          <target state="translated">, but there are legitimate cases where the polar style</target>
        </trans-unit>
        <trans-unit id="083b89b36ef467b16cb732332b28ca7c58c02c6f" translate="yes" xml:space="preserve">
          <source>, but these are also sufficiently generic that the actual version of perl probably doesn't matter too much.)</source>
          <target state="translated">, but these are also sufficiently generic that the actual version of perl probably doesn't matter too much.)</target>
        </trans-unit>
        <trans-unit id="440fbd28d07d5c795b6c02a88a168111c4c2b6d4" translate="yes" xml:space="preserve">
          <source>, but they are &quot;shared in the private address space of the process&quot;; this is possible because the address at which different sections of the</source>
          <target state="translated">, but they are &quot;shared in the private address space of the process&quot;; this is possible because the address at which different sections of the</target>
        </trans-unit>
        <trans-unit id="e5d0a0fe8de2f9a20207b5984a8a5c6b03dfd271" translate="yes" xml:space="preserve">
          <source>, but those are both created with customizable</source>
          <target state="translated">, but those are both created with customizable</target>
        </trans-unit>
        <trans-unit id="30f76102144f22e473a3819c08962f84a35f7781" translate="yes" xml:space="preserve">
          <source>, but without any arguments at all, meaning it was called as &lt;code&gt;&amp;amp;infested&lt;/code&gt; . The next stack frame shows that the function &lt;code&gt;Ambulation::legs&lt;/code&gt; was called in list context from the</source>
          <target state="translated">, but without any arguments at all, meaning it was called as &lt;code&gt;&amp;amp;infested&lt;/code&gt; . The next stack frame shows that the function &lt;code&gt;Ambulation::legs&lt;/code&gt; was called in list context from the</target>
        </trans-unit>
        <trans-unit id="72ba937cc0e16bb306ca2b4bf857c5037ec4cf2e" translate="yes" xml:space="preserve">
          <source>, but you can also find it with &lt;code&gt;(get&lt;/code&gt;&lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt; . (Some platforms do not have a concept of a home directory.)</source>
          <target state="translated">, but you can also find it with &lt;code&gt;(get&lt;/code&gt;&lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt; . (Some platforms do not have a concept of a home directory.)</target>
        </trans-unit>
        <trans-unit id="d30cbc2585551375d5776769096b997571f847fa" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien and published posthumously by his son and literary executor, C.J.R. Tolkien, being the 3rd of the 12 volumes in Christopher's mammoth</source>
          <target state="translated">, by J.R.R. Tolkien and published posthumously by his son and literary executor, C.J.R. Tolkien, being the 3rd of the 12 volumes in Christopher's mammoth</target>
        </trans-unit>
        <trans-unit id="20a4c36993cdadf5b45a96ba6612a7047ca32e20" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien. The hardcover, 50th-anniversary edition of 2004 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</source>
          <target state="translated">, by J.R.R. Tolkien. The hardcover, 50th-anniversary edition of 2004 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</target>
        </trans-unit>
        <trans-unit id="efffb220c955e443cccb58c8907e329a0175c1d5" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien. The hardcover, 70th-anniversary edition of 2007 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</source>
          <target state="translated">, by J.R.R. Tolkien. The hardcover, 70th-anniversary edition of 2007 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</target>
        </trans-unit>
        <trans-unit id="074cc72ccfc535a7fd2e5dfd0338a00ba7d4e394" translate="yes" xml:space="preserve">
          <source>, by default. The format of the file looks like this:</source>
          <target state="translated">, by default. The format of the file looks like this:</target>
        </trans-unit>
        <trans-unit id="15848886de9254fb610ee7af8ef183ea5520e125" translate="yes" xml:space="preserve">
          <source>, calling its check function, allocating a target if it needs one, and folding constants.</source>
          <target state="translated">, calling its check function, allocating a target if it needs one, and folding constants.</target>
        </trans-unit>
        <trans-unit id="f1dcc83c1274d4f418815f27c4f79fd6d2c788ff" translate="yes" xml:space="preserve">
          <source>, chapter 20, or</source>
          <target state="translated">, chapter 20, or</target>
        </trans-unit>
        <trans-unit id="8ad183a82720f028dc83a25268edf18aae60bbed" translate="yes" xml:space="preserve">
          <source>, chapter 5.</source>
          <target state="translated">, chapter 5.</target>
        </trans-unit>
        <trans-unit id="8ae0b48133bb856879ab9974c904d27120fd6b88" translate="yes" xml:space="preserve">
          <source>, consisting of a first and last name (no middle initial). The name class has four methods:</source>
          <target state="translated">, consisting of a first and last name (no middle initial). The name class has four methods:</target>
        </trans-unit>
        <trans-unit id="7deb52a5ffa60ddf7faa0bfee1739d2eee5281b4" translate="yes" xml:space="preserve">
          <source>, depending on the operating system. The variable &lt;code&gt;&quot;_exe&quot;&lt;/code&gt; in the &lt;code&gt;Config&lt;/code&gt; module holds the executable suffix, if any. Third, the VMS port carefully sets up &lt;code&gt;$^X&lt;/code&gt; and &lt;code&gt;$Config{perlpath}&lt;/code&gt; so that no further processing is required. This is just as well, because the matching regular expression used below would then have to deal with a possible trailing version number in the VMS file name.</source>
          <target state="translated">, depending on the operating system. The variable &lt;code&gt;&quot;_exe&quot;&lt;/code&gt; in the &lt;code&gt;Config&lt;/code&gt; module holds the executable suffix, if any. Third, the VMS port carefully sets up &lt;code&gt;$^X&lt;/code&gt; and &lt;code&gt;$Config{perlpath}&lt;/code&gt; so that no further processing is required. This is just as well, because the matching regular expression used below would then have to deal with a possible trailing version number in the VMS file name.</target>
        </trans-unit>
        <trans-unit id="da5a4498d5cd3fe648547701b8b083a3ff8ca97c" translate="yes" xml:space="preserve">
          <source>, described in &lt;a href=&quot;util/fieldhash&quot;&gt;Hash::Util::FieldHash&lt;/a&gt;.</source>
          <target state="translated">, described in &lt;a href=&quot;util/fieldhash&quot;&gt;Hash::Util::FieldHash&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="191488e37062f1a4cf41a5aeb9e53d937285dc2f" translate="yes" xml:space="preserve">
          <source>, didn't find it, and set &lt;code&gt;$?&lt;/code&gt; to a non-zero value indicating failure.</source>
          <target state="translated">, didn't find it, and set &lt;code&gt;$?&lt;/code&gt; to a non-zero value indicating failure.</target>
        </trans-unit>
        <trans-unit id="bffed554a4db53bd8f296b3affa5430997fc3de5" translate="yes" xml:space="preserve">
          <source>, do</source>
          <target state="translated">, do</target>
        </trans-unit>
        <trans-unit id="94c2dbf1b9eb9f81052b5cb53ad3879e10f289ae" translate="yes" xml:space="preserve">
          <source>, do not fit into any of the other directories, but which, in addition, cannot use</source>
          <target state="translated">, do not fit into any of the other directories, but which, in addition, cannot use</target>
        </trans-unit>
        <trans-unit id="aa0a59da47187262d9d4bfa48199c7bce6f4c216" translate="yes" xml:space="preserve">
          <source>, does the opposite of the</source>
          <target state="translated">, does the opposite of the</target>
        </trans-unit>
        <trans-unit id="8fcd667169652690ef5e54800f7ff7538897e19e" translate="yes" xml:space="preserve">
          <source>, e.g. once you created a number under the influence of &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt; , all results from math operations with that number will also be rounded.</source>
          <target state="translated">, e.g. once you created a number under the influence of &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt; , all results from math operations with that number will also be rounded.</target>
        </trans-unit>
        <trans-unit id="5d483da9af92e1cedaee73a77b0f92e783cee701" translate="yes" xml:space="preserve">
          <source>, encountering an 8 or 9 will also trigger a warning. On return</source>
          <target state="translated">, encountering an 8 or 9 will also trigger a warning. On return</target>
        </trans-unit>
        <trans-unit id="d2f5d265b5802df06743d0d56f8ee6faa03ca24f" translate="yes" xml:space="preserve">
          <source>, encountering an invalid character will also trigger a warning. On return</source>
          <target state="translated">, encountering an invalid character will also trigger a warning. On return</target>
        </trans-unit>
        <trans-unit id="04677f3fac90b98f6c1dae663782f13b8cbddc16" translate="yes" xml:space="preserve">
          <source>, et al.) for your machine: &lt;code&gt;perl -MConfig -e 'print $Config{cc}'&lt;/code&gt; will tell you what to use.</source>
          <target state="translated">, et al.) for your machine: &lt;code&gt;perl -MConfig -e 'print $Config{cc}'&lt;/code&gt; will tell you what to use.</target>
        </trans-unit>
        <trans-unit id="cad820714976d3b25c5367f0c02ee50a22785739" translate="yes" xml:space="preserve">
          <source>, etc) determined by &lt;b&gt;Configure&lt;/b&gt; (&lt;code&gt;$Config{'libpth'}&lt;/code&gt; ). This should ensure portability across a wide range of platforms.</source>
          <target state="translated">, etc) determined by &lt;b&gt;Configure&lt;/b&gt; (&lt;code&gt;$Config{'libpth'}&lt;/code&gt; ). This should ensure portability across a wide range of platforms.</target>
        </trans-unit>
        <trans-unit id="a212453865c3ae5d769c013e9814daf8f2a214a4" translate="yes" xml:space="preserve">
          <source>, etc.</source>
          <target state="translated">, etc.</target>
        </trans-unit>
        <trans-unit id="b565fb66bcacd3184f91a476fa76a2a7c0432910" translate="yes" xml:space="preserve">
          <source>, etc. It is only used to set defaults for things in</source>
          <target state="translated">, etc. It is only used to set defaults for things in</target>
        </trans-unit>
        <trans-unit id="547884f80573a30a2c1775d0d189f35232800ed1" translate="yes" xml:space="preserve">
          <source>, etc.) show examples of general tied hashes, as does the &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; module. While these do not utilize &lt;b&gt;Tie::Hash&lt;/b&gt;, they serve as good working examples.</source>
          <target state="translated">, etc.) show examples of general tied hashes, as does the &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; module. While these do not utilize &lt;b&gt;Tie::Hash&lt;/b&gt;, they serve as good working examples.</target>
        </trans-unit>
        <trans-unit id="4f1210937e081e362e85df120171033ff4b61361" translate="yes" xml:space="preserve">
          <source>, etc., not keeping separate files for each little release.</source>
          <target state="translated">, etc., not keeping separate files for each little release.</target>
        </trans-unit>
        <trans-unit id="800135a8cf871bdccfdf925e7c9f67cb8dbd1d91" translate="yes" xml:space="preserve">
          <source>, even if the old Unicode string used EBCDIC.</source>
          <target state="translated">, even if the old Unicode string used EBCDIC.</target>
        </trans-unit>
        <trans-unit id="7ae4a1230d3f708e9962358a9ef97eda0e7da8ca" translate="yes" xml:space="preserve">
          <source>, executes three Perl strings, extracting an &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; from the first, a &lt;code&gt;float&lt;/code&gt; from the second, and a &lt;code&gt;char *&lt;/code&gt; from the third.</source>
          <target state="translated">, executes three Perl strings, extracting an &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; from the first, a &lt;code&gt;float&lt;/code&gt; from the second, and a &lt;code&gt;char *&lt;/code&gt; from the third.</target>
        </trans-unit>
        <trans-unit id="8592f41382d4e5c2d5d57b842dd51b103596cdc2" translate="yes" xml:space="preserve">
          <source>, first two will be issued to make the prompt standout, last two to make the input line standout.</source>
          <target state="translated">, first two will be issued to make the prompt standout, last two to make the input line standout.</target>
        </trans-unit>
        <trans-unit id="e326c61927837140eb9a99bc562c35954b12ff00" translate="yes" xml:space="preserve">
          <source>, followed by &quot;.&quot;, to represent the current directory. (&quot;.&quot; will not be appended if taint checks are enabled, either by &lt;code&gt;-T&lt;/code&gt; or by &lt;code&gt;-t&lt;/code&gt; .) If you need to modify this at runtime, you should use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib&lt;/code&gt; pragma to get the machine-dependent library properly loaded also:</source>
          <target state="translated">, followed by &quot;.&quot;, to represent the current directory. (&quot;.&quot; will not be appended if taint checks are enabled, either by &lt;code&gt;-T&lt;/code&gt; or by &lt;code&gt;-t&lt;/code&gt; .) If you need to modify this at runtime, you should use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib&lt;/code&gt; pragma to get the machine-dependent library properly loaded also:</target>
        </trans-unit>
        <trans-unit id="e47c6b2622df17cb9ac51798532485ad11e9ba2e" translate="yes" xml:space="preserve">
          <source>, for &quot;interpreter threads&quot;.</source>
          <target state="translated">, for &quot;interpreter threads&quot;.</target>
        </trans-unit>
        <trans-unit id="3da21179cff23cf6f4725a6914c2f3067c8f2e68" translate="yes" xml:space="preserve">
          <source>, for example &lt;code&gt;constant_5&lt;/code&gt; for names 5 characters long. The default</source>
          <target state="translated">, for example &lt;code&gt;constant_5&lt;/code&gt; for names 5 characters long. The default</target>
        </trans-unit>
        <trans-unit id="2fee34f87618999ee14e21bb687483c9271ed175" translate="yes" xml:space="preserve">
          <source>, for example).</source>
          <target state="translated">, for example).</target>
        </trans-unit>
        <trans-unit id="28da9ec75c809bccb5f08bba4f669c3533c7ba7b" translate="yes" xml:space="preserve">
          <source>, for example, this would include</source>
          <target state="translated">, for example, this would include</target>
        </trans-unit>
        <trans-unit id="7c331f0b5befe1a82f2eeb7e08fd9a086e46b9f4" translate="yes" xml:space="preserve">
          <source>, for example, which is usually in</source>
          <target state="translated">, for example, which is usually in</target>
        </trans-unit>
        <trans-unit id="1611b180f41bef969e37c18e79566f4a39e16c29" translate="yes" xml:space="preserve">
          <source>, for instance, have been placed there rather than in</source>
          <target state="translated">, for instance, have been placed there rather than in</target>
        </trans-unit>
        <trans-unit id="56372a1dac8b69b17464e5a00569b03f0872fcdf" translate="yes" xml:space="preserve">
          <source>, freeing all resources associated with it.</source>
          <target state="translated">, freeing all resources associated with it.</target>
        </trans-unit>
        <trans-unit id="f4b8256a6099f4e144fd62a3869c42ca7b38c688" translate="yes" xml:space="preserve">
          <source>, greater-than. Or Pod parsers may offer the alternative option of processing such unknown &quot;E&amp;lt;</source>
          <target state="translated">, greater-than. Or Pod parsers may offer the alternative option of processing such unknown &quot;E&amp;lt;</target>
        </trans-unit>
        <trans-unit id="e7f34752016620eedb00a8cbd6624ed4757364db" translate="yes" xml:space="preserve">
          <source>, handing it NULL for the second argument:</source>
          <target state="translated">, handing it NULL for the second argument:</target>
        </trans-unit>
        <trans-unit id="13918e9d4ee7ed5a5b531e3ce1c4548f829845bb" translate="yes" xml:space="preserve">
          <source>, has very helpful pictures:</source>
          <target state="translated">, has very helpful pictures:</target>
        </trans-unit>
        <trans-unit id="5b2d144fe487b3bdc6b5822c043f233ce157080f" translate="yes" xml:space="preserve">
          <source>, have aliases</source>
          <target state="translated">, have aliases</target>
        </trans-unit>
        <trans-unit id="4f6137d9065b22f545ac392077aa91739c927e9e" translate="yes" xml:space="preserve">
          <source>, however, a module under</source>
          <target state="translated">, however, a module under</target>
        </trans-unit>
        <trans-unit id="fa65a22e2f2e07e3150f049e4c966e6fcd3df9ae" translate="yes" xml:space="preserve">
          <source>, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="cb8b8da23653cf06debe3b23d1da5fd0c356db27" translate="yes" xml:space="preserve">
          <source>, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="e6769873a1cbe047b8a844d6fbd4ad589c9faed9" translate="yes" xml:space="preserve">
          <source>, if given, is the file to which to write the formatted output. If</source>
          <target state="translated">, if given, is the file to which to write the formatted output. If</target>
        </trans-unit>
        <trans-unit id="77eafd03fdb7f9d16237f45a4ce317d87b94c553" translate="yes" xml:space="preserve">
          <source>, if non-null, provides a string (in SV form) containing code to be parsed. A copy of the string is made, so subsequent modification of</source>
          <target state="translated">, if non-null, provides a string (in SV form) containing code to be parsed. A copy of the string is made, so subsequent modification of</target>
        </trans-unit>
        <trans-unit id="030106d2304ec93f9cf5e7c3317d1e0cb410b3da" translate="yes" xml:space="preserve">
          <source>, if non-null, provides an input stream from which code will be read to be parsed. If both are non-null, the code in</source>
          <target state="translated">, if non-null, provides an input stream from which code will be read to be parsed. If both are non-null, the code in</target>
        </trans-unit>
        <trans-unit id="6cbeb9fe895f728ef42c186aa976bba1c9ce0104" translate="yes" xml:space="preserve">
          <source>, if you're running setgid.</source>
          <target state="translated">, if you're running setgid.</target>
        </trans-unit>
        <trans-unit id="0dbb5d893ddb3b24557057bead5ebb8bfe161473" translate="yes" xml:space="preserve">
          <source>, if you're running setuid.</source>
          <target state="translated">, if you're running setuid.</target>
        </trans-unit>
        <trans-unit id="359ce93de57e677d41e4feae3db26ccadd5f4602" translate="yes" xml:space="preserve">
          <source>, in that order, unless the environment variable</source>
          <target state="translated">, in that order, unless the environment variable</target>
        </trans-unit>
        <trans-unit id="790ae18f398610e33985ad234301f212b618f615" translate="yes" xml:space="preserve">
          <source>, in that order.</source>
          <target state="translated">, in that order.</target>
        </trans-unit>
        <trans-unit id="a9ca71fd641028e60feb39e0200097fbb26b663e" translate="yes" xml:space="preserve">
          <source>, in the mode value it returns, if you need an approximation of the file's protections.</source>
          <target state="translated">, in the mode value it returns, if you need an approximation of the file's protections.</target>
        </trans-unit>
        <trans-unit id="ba423002f3a8458818555c6df33df9999f3fd327" translate="yes" xml:space="preserve">
          <source>, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;../perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="translated">, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;../perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</target>
        </trans-unit>
        <trans-unit id="adc9b471306d3e563016072b65846bf606376045" translate="yes" xml:space="preserve">
          <source>, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="translated">, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</target>
        </trans-unit>
        <trans-unit id="8770c2665fa7656dfe5c162a8df3a289203cc335" translate="yes" xml:space="preserve">
          <source>, included in the source distribution. Here's a bastardized, non-portable version of</source>
          <target state="translated">, included in the source distribution. Here's a bastardized, non-portable version of</target>
        </trans-unit>
        <trans-unit id="eb5f00bc57f8a74444c521b49f19146de255153e" translate="yes" xml:space="preserve">
          <source>, included with Perl 3.0. It was converted as a module with Perl 5.0, but had a version number only starting with Perl 5.6. Here is a small table with the matching Perl and &lt;code&gt;Sys::Syslog&lt;/code&gt; versions.</source>
          <target state="translated">, included with Perl 3.0. It was converted as a module with Perl 5.0, but had a version number only starting with Perl 5.6. Here is a small table with the matching Perl and &lt;code&gt;Sys::Syslog&lt;/code&gt; versions.</target>
        </trans-unit>
        <trans-unit id="8ea24d1d602be3c931482d6a832964fc845b16f4" translate="yes" xml:space="preserve">
          <source>, instructs &lt;code&gt;autosplit&lt;/code&gt; to check the module currently being split to ensure that it includes a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; specification for the AutoLoader module, and skips the module if AutoLoader is not detected. $check defaults to 1.</source>
          <target state="translated">, instructs &lt;code&gt;autosplit&lt;/code&gt; to check the module currently being split to ensure that it includes a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; specification for the AutoLoader module, and skips the module if AutoLoader is not detected. $check defaults to 1.</target>
        </trans-unit>
        <trans-unit id="e6083d57ec1ee8a0d3d6d5459b1cec9032efce60" translate="yes" xml:space="preserve">
          <source>, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</source>
          <target state="translated">, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</target>
        </trans-unit>
        <trans-unit id="d6fb9ba10623dfd1aded621d9ddedd7e1c61500b" translate="yes" xml:space="preserve">
          <source>, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</source>
          <target state="translated">, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</target>
        </trans-unit>
        <trans-unit id="13eb87bdfb3a3624e2f9e8a8d87bc78f8db7280d" translate="yes" xml:space="preserve">
          <source>, into Perl's internal form. As with encode(),</source>
          <target state="translated">, into Perl's internal form. As with encode(),</target>
        </trans-unit>
        <trans-unit id="cfa0115c245a8b3ea3252178af8759b7405c3a1b" translate="yes" xml:space="preserve">
          <source>, is copied under</source>
          <target state="translated">, is copied under</target>
        </trans-unit>
        <trans-unit id="aa6135a1a196ba8c00d8ec8b4a64ca9d1706801d" translate="yes" xml:space="preserve">
          <source>, is false, then any pre-existing &lt;code&gt;*.al&lt;/code&gt; files in the autoload directory are removed if they are no longer part of the module (obsoleted functions). $keep defaults to 0.</source>
          <target state="translated">, is false, then any pre-existing &lt;code&gt;*.al&lt;/code&gt; files in the autoload directory are removed if they are no longer part of the module (obsoleted functions). $keep defaults to 0.</target>
        </trans-unit>
        <trans-unit id="51eed46bc6e5b10c08d79ee20d1f1a587cafafba" translate="yes" xml:space="preserve">
          <source>, is similar to</source>
          <target state="translated">, is similar to</target>
        </trans-unit>
        <trans-unit id="79817a35af4a945dfd5b54b07a8db380c4bf6155" translate="yes" xml:space="preserve">
          <source>, is the op type. It's an addition operator, so we want the type to be &lt;code&gt;ADDOP&lt;/code&gt; . We could specify this directly, but it's right there as the second token in the input, so we use &lt;code&gt;$2&lt;/code&gt; . The second parameter is the op's flags: 0 means &quot;nothing special&quot;. Then the things to add: the left and right hand side of our expression, in scalar context.</source>
          <target state="translated">, is the op type. It's an addition operator, so we want the type to be &lt;code&gt;ADDOP&lt;/code&gt; . We could specify this directly, but it's right there as the second token in the input, so we use &lt;code&gt;$2&lt;/code&gt; . The second parameter is the op's flags: 0 means &quot;nothing special&quot;. Then the things to add: the left and right hand side of our expression, in scalar context.</target>
        </trans-unit>
        <trans-unit id="c0080e719ea6b38d68de4ba8b7693bc8dba72e5a" translate="yes" xml:space="preserve">
          <source>, it doesn't redirect stderr to stdout.</source>
          <target state="translated">, it doesn't redirect stderr to stdout.</target>
        </trans-unit>
        <trans-unit id="664f4ea1afd52b971da3d2f089f2511da29b2351" translate="yes" xml:space="preserve">
          <source>, it is enough to have them on your path. One does not need to specify them explicitly (though this</source>
          <target state="translated">, it is enough to have them on your path. One does not need to specify them explicitly (though this</target>
        </trans-unit>
        <trans-unit id="01bd8dd935a29b3fddd9c06ac4b13a42b2abe139" translate="yes" xml:space="preserve">
          <source>, it is not necessarily the case that any output will be produced by this method. So don't rely on the fact that &lt;code&gt;$out&lt;/code&gt; is empty for an error test.</source>
          <target state="translated">, it is not necessarily the case that any output will be produced by this method. So don't rely on the fact that &lt;code&gt;$out&lt;/code&gt; is empty for an error test.</target>
        </trans-unit>
        <trans-unit id="9b3b34697471a7e2dc56c68064b05288c536a237" translate="yes" xml:space="preserve">
          <source>, it is still good practice to check the return code from</source>
          <target state="translated">, it is still good practice to check the return code from</target>
        </trans-unit>
        <trans-unit id="d91455e8d254597cb96fe4e096fe840d6a39837b" translate="yes" xml:space="preserve">
          <source>, it is substituted with</source>
          <target state="translated">, it is substituted with</target>
        </trans-unit>
        <trans-unit id="d0bef723cdeef4c4aad0269573935dc64dcabf73" translate="yes" xml:space="preserve">
          <source>, just type:</source>
          <target state="translated">, just type:</target>
        </trans-unit>
        <trans-unit id="ec7445398596752b90e13adb72725edcb5f55fb9" translate="yes" xml:space="preserve">
          <source>, left justified to fill</source>
          <target state="translated">, left justified to fill</target>
        </trans-unit>
        <trans-unit id="58977f34d6981ce10f380c393153c619fec7c3b0" translate="yes" xml:space="preserve">
          <source>, library stuff in</source>
          <target state="translated">, library stuff in</target>
        </trans-unit>
        <trans-unit id="481f764300170b8cc2c8ab1fea2d90f4659012a0" translate="yes" xml:space="preserve">
          <source>, man pages in</source>
          <target state="translated">, man pages in</target>
        </trans-unit>
        <trans-unit id="c1eff063fa64539df3525a8920a33c120431c1d5" translate="yes" xml:space="preserve">
          <source>, man pages into</source>
          <target state="translated">, man pages into</target>
        </trans-unit>
        <trans-unit id="9a7745ab1fa8731e058fe3471019aec70206d842" translate="yes" xml:space="preserve">
          <source>, meaning it exposes several</source>
          <target state="translated">, meaning it exposes several</target>
        </trans-unit>
        <trans-unit id="23ecae591165a2e14c8b3c0c33e4b172cfbcd078" translate="yes" xml:space="preserve">
          <source>, meaning that functions and subroutines altered with &lt;code&gt;autodie&lt;/code&gt; will only change their behaviour until the end of the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">, meaning that functions and subroutines altered with &lt;code&gt;autodie&lt;/code&gt; will only change their behaviour until the end of the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="93ecb4223ec353ce10e70829975cf221b865ce31" translate="yes" xml:space="preserve">
          <source>, namely</source>
          <target state="translated">, namely</target>
        </trans-unit>
        <trans-unit id="f22a8444b47d43b843adb69f4a032eaa8696f19f" translate="yes" xml:space="preserve">
          <source>, normally via</source>
          <target state="translated">, normally via</target>
        </trans-unit>
        <trans-unit id="48a0cd2493fd04c9f828dcacdd2caee749e13027" translate="yes" xml:space="preserve">
          <source>, not</source>
          <target state="translated">, not</target>
        </trans-unit>
        <trans-unit id="c7bd8970e5dd3c5d725e534ee2e953570f617caa" translate="yes" xml:space="preserve">
          <source>, not byte.)</source>
          <target state="translated">, not byte.)</target>
        </trans-unit>
        <trans-unit id="11afc5e199c01f78460727b395aceca036378181" translate="yes" xml:space="preserve">
          <source>, not its line. So in the examples below, you can see that every command needs the blank line after it, to end its paragraph. (And some older Pod translators may require the &lt;code&gt;=encoding&lt;/code&gt; line to have a following blank line as well, even though it should be legal to omit.)</source>
          <target state="translated">, not its line. So in the examples below, you can see that every command needs the blank line after it, to end its paragraph. (And some older Pod translators may require the &lt;code&gt;=encoding&lt;/code&gt; line to have a following blank line as well, even though it should be legal to omit.)</target>
        </trans-unit>
        <trans-unit id="da92391795f61ed6c37622d31636bf92df08886e" translate="yes" xml:space="preserve">
          <source>, not programs. For programs, use the &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; API.</source>
          <target state="translated">, not programs. For programs, use the &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; API.</target>
        </trans-unit>
        <trans-unit id="43dff97702ab1cbd05f2458bbf9136c2e78c118d" translate="yes" xml:space="preserve">
          <source>, of which</source>
          <target state="translated">, of which</target>
        </trans-unit>
        <trans-unit id="731aa264d48130cd3456e01ac07965045097c74f" translate="yes" xml:space="preserve">
          <source>, one pair per line. Strings used as values must be quoted. Barewords are treated as numbers.</source>
          <target state="translated">, one pair per line. Strings used as values must be quoted. Barewords are treated as numbers.</target>
        </trans-unit>
        <trans-unit id="ba34082476e7f40b29ef9dab02566944508fe137" translate="yes" xml:space="preserve">
          <source>, one should call these API via a dynamic linking API. There is a subsystem in Perl to simplify such type of calls. A large number of entry points available for such linking is provided (see &lt;code&gt;entries_ordinals&lt;/code&gt; - and also &lt;code&gt;PMWIN_entries&lt;/code&gt; - in</source>
          <target state="translated">, one should call these API via a dynamic linking API. There is a subsystem in Perl to simplify such type of calls. A large number of entry points available for such linking is provided (see &lt;code&gt;entries_ordinals&lt;/code&gt; - and also &lt;code&gt;PMWIN_entries&lt;/code&gt; - in</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">, or</target>
        </trans-unit>
        <trans-unit id="942f527c84fd76c3bdcee70a53190e472c342844" translate="yes" xml:space="preserve">
          <source>, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6ba229fbb681a07aa0e4294378d9012aef942cf" translate="yes" xml:space="preserve">
          <source>, or Perl, such as the following:</source>
          <target state="translated">, or Perl, such as the following:</target>
        </trans-unit>
        <trans-unit id="55bfcc1de58da3cf74a6ff01324919bf5c853ff5" translate="yes" xml:space="preserve">
          <source>, or code, the &lt;code&gt;Rr&lt;/code&gt; are</source>
          <target state="translated">, or code, the &lt;code&gt;Rr&lt;/code&gt; are</target>
        </trans-unit>
        <trans-unit id="ffbadeb5936aabdc02bac70dff1ebf6c39606cc2" translate="yes" xml:space="preserve">
          <source>, or editing</source>
          <target state="translated">, or editing</target>
        </trans-unit>
        <trans-unit id="54a2f6c3e0bbeef4006390919d7b396d9e2b4da3" translate="yes" xml:space="preserve">
          <source>, or even</source>
          <target state="translated">, or even</target>
        </trans-unit>
        <trans-unit id="579214064014c46082b00e9396995d722bdba307" translate="yes" xml:space="preserve">
          <source>, or even something such as D:</source>
          <target state="translated">, or even something such as D:</target>
        </trans-unit>
        <trans-unit id="dd3dabc0fe007ede17230bb03b9e7e04c79af333" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, calls the</source>
          <target state="translated">, or if there is no such callback, calls the</target>
        </trans-unit>
        <trans-unit id="00c06bb9d1dbbcd4ab3b41b1fd0ea954aed36a82" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF and return</source>
          <target state="translated">, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF and return</target>
        </trans-unit>
        <trans-unit id="1db68edf4d518c843f678ca5c930a828630ad1ff" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF.</source>
          <target state="translated">, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF.</target>
        </trans-unit>
        <trans-unit id="3748c8a3236d4aa94aa312fa69d106a59ad85b20" translate="yes" xml:space="preserve">
          <source>, or if they compare equal with &lt;code&gt;eq&lt;/code&gt; .</source>
          <target state="translated">, or if they compare equal with &lt;code&gt;eq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b8290ca58e4b337d2e457234b98a169d325bc21" translate="yes" xml:space="preserve">
          <source>, or printing using</source>
          <target state="translated">, or printing using</target>
        </trans-unit>
        <trans-unit id="b97bcf82807eb070d0f663f018d630dbd84dfcb4" translate="yes" xml:space="preserve">
          <source>, or supply the stack size to &lt;code&gt;CreateThread()&lt;/code&gt;</source>
          <target state="translated">, or supply the stack size to &lt;code&gt;CreateThread()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="345ba69cc2fea67ce22656b09e83f149b6b96534" translate="yes" xml:space="preserve">
          <source>, or the</source>
          <target state="translated">, or the</target>
        </trans-unit>
        <trans-unit id="fb2724928018abae8bc9e57d76c637373cc20ea5" translate="yes" xml:space="preserve">
          <source>, or to restore &lt;code&gt;$!&lt;/code&gt; to a meaningful state.</source>
          <target state="translated">, or to restore &lt;code&gt;$!&lt;/code&gt; to a meaningful state.</target>
        </trans-unit>
        <trans-unit id="e7d923ba957c225be8a72ed7a758380976e4b860" translate="yes" xml:space="preserve">
          <source>, or using a separate</source>
          <target state="translated">, or using a separate</target>
        </trans-unit>
        <trans-unit id="9d0d91ae0fa92bac5f7cd8243e072cd7aef018d9" translate="yes" xml:space="preserve">
          <source>, or you could change certain filenames as needed:</source>
          <target state="translated">, or you could change certain filenames as needed:</target>
        </trans-unit>
        <trans-unit id="f9173cbefc36581419831ce91b8068d884c10958" translate="yes" xml:space="preserve">
          <source>, otherwise nothing.</source>
          <target state="translated">, otherwise nothing.</target>
        </trans-unit>
        <trans-unit id="a7f26ed799fd2c4c11b462f3e47d17d2a8c2c4ca" translate="yes" xml:space="preserve">
          <source>, overwriting the file with the new contents. With the &lt;code&gt;-p&lt;/code&gt; switch, Perl wraps a &lt;code&gt;while&lt;/code&gt; loop around the code you specify with &lt;code&gt;-e&lt;/code&gt; , and &lt;code&gt;-i&lt;/code&gt; turns on in-place editing. The current line is in &lt;code&gt;$_&lt;/code&gt; . With &lt;code&gt;-p&lt;/code&gt; , Perl automatically prints the value of &lt;code&gt;$_&lt;/code&gt; at the end of the loop. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details.</source>
          <target state="translated">, overwriting the file with the new contents. With the &lt;code&gt;-p&lt;/code&gt; switch, Perl wraps a &lt;code&gt;while&lt;/code&gt; loop around the code you specify with &lt;code&gt;-e&lt;/code&gt; , and &lt;code&gt;-i&lt;/code&gt; turns on in-place editing. The current line is in &lt;code&gt;$_&lt;/code&gt; . With &lt;code&gt;-p&lt;/code&gt; , Perl automatically prints the value of &lt;code&gt;$_&lt;/code&gt; at the end of the loop. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details.</target>
        </trans-unit>
        <trans-unit id="f8d0c96d2d2b2aafa291574fbf6087350a9988db" translate="yes" xml:space="preserve">
          <source>, performing the correct bookkeeping whenever a newline character is passed. This is the normal way to consume lexed text.</source>
          <target state="translated">, performing the correct bookkeeping whenever a newline character is passed. This is the normal way to consume lexed text.</target>
        </trans-unit>
        <trans-unit id="70ef65c7d96d2bd885c5b7612ef8e3946ac09c5f" translate="yes" xml:space="preserve">
          <source>, period.) If the &lt;code&gt;/s&lt;/code&gt; modifier is specified, sequences of characters that were transliterated to the same character are squashed down to a single instance of the character.</source>
          <target state="translated">, period.) If the &lt;code&gt;/s&lt;/code&gt; modifier is specified, sequences of characters that were transliterated to the same character are squashed down to a single instance of the character.</target>
        </trans-unit>
        <trans-unit id="60007a5d7f11a8090fc943b98a4327b72a97056b" translate="yes" xml:space="preserve">
          <source>, pointing up from the &lt;b&gt;theta&lt;/b&gt;-plane.</source>
          <target state="translated">, pointing up from the &lt;b&gt;theta&lt;/b&gt;-plane.</target>
        </trans-unit>
        <trans-unit id="c4604eaf3d1d886deab27e44f9f084a7eebe60a8" translate="yes" xml:space="preserve">
          <source>, presumably because of caching issues even when using autoflush (this is usually overcome by waiting a while after writing to the tempfile before attempting to C</source>
          <target state="translated">, presumably because of caching issues even when using autoflush (this is usually overcome by waiting a while after writing to the tempfile before attempting to C</target>
        </trans-unit>
        <trans-unit id="700f9b2825afd309ca4619c11e0d2d9e2e77290a" translate="yes" xml:space="preserve">
          <source>, provides access to the following elements of the Perl API that is not available in older Perl releases:</source>
          <target state="translated">, provides access to the following elements of the Perl API that is not available in older Perl releases:</target>
        </trans-unit>
        <trans-unit id="65e4734d8fbb856132be8332b98473e9a6090b22" translate="yes" xml:space="preserve">
          <source>, rather than something that it</source>
          <target state="translated">, rather than something that it</target>
        </trans-unit>
        <trans-unit id="f4e7af1322b9da55c415c39f9e7ff17666928572" translate="yes" xml:space="preserve">
          <source>, regardless of where STDOUT may be redirected to.</source>
          <target state="translated">, regardless of where STDOUT may be redirected to.</target>
        </trans-unit>
        <trans-unit id="778526e92b1eabba1ba99018f377d78629f31fa4" translate="yes" xml:space="preserve">
          <source>, respectively. &lt;code&gt;Re&lt;/code&gt; , &lt;code&gt;Im&lt;/code&gt; , &lt;code&gt;arg&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;rho&lt;/code&gt; , and &lt;code&gt;theta&lt;/code&gt; can be used also as mutators. The &lt;code&gt;cbrt&lt;/code&gt; returns only one of the solutions: if you want all three, use the &lt;code&gt;root&lt;/code&gt; function.</source>
          <target state="translated">, respectively. &lt;code&gt;Re&lt;/code&gt; , &lt;code&gt;Im&lt;/code&gt; , &lt;code&gt;arg&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;rho&lt;/code&gt; , and &lt;code&gt;theta&lt;/code&gt; can be used also as mutators. The &lt;code&gt;cbrt&lt;/code&gt; returns only one of the solutions: if you want all three, use the &lt;code&gt;root&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="c7afdf070db2b17186b849dea9ccbae8490266d4" translate="yes" xml:space="preserve">
          <source>, returns false; otherwise returns true.</source>
          <target state="translated">, returns false; otherwise returns true.</target>
        </trans-unit>
        <trans-unit id="294f1e85971ddf3faffa14fe9c113e1fb49247ca" translate="yes" xml:space="preserve">
          <source>, run</source>
          <target state="translated">, run</target>
        </trans-unit>
        <trans-unit id="405cbdde629a3d6806c42e7498957799c0c7e735" translate="yes" xml:space="preserve">
          <source>, run:</source>
          <target state="translated">, run:</target>
        </trans-unit>
        <trans-unit id="bbe01f117bad48eb679b7748a19ed0966f1fba4d" translate="yes" xml:space="preserve">
          <source>, same with</source>
          <target state="translated">, same with</target>
        </trans-unit>
        <trans-unit id="f3e57458037c62794ca5968e5d5cd43577521d99" translate="yes" xml:space="preserve">
          <source>, say, by issuing a command like</source>
          <target state="translated">, say, by issuing a command like</target>
        </trans-unit>
        <trans-unit id="5cc91dd4b05c40ee3836cd8a51b18923b0309266" translate="yes" xml:space="preserve">
          <source>, says which packages are</source>
          <target state="translated">, says which packages are</target>
        </trans-unit>
        <trans-unit id="42b0061f7d598e9846a6cb4198408f6e62c1c966" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;Handling Malformed Data&lt;/a&gt;.</source>
          <target state="translated">, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;Handling Malformed Data&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8d832948372c398a9280338201f9092bcd809e94" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Making&quot;&gt;Making&lt;/a&gt;.</source>
          <target state="translated">, see &lt;a href=&quot;#Making&quot;&gt;Making&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2b3e32c9f4e25b163e62562a312fffb640ca872c" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;.</source>
          <target state="translated">, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ee0c1ad5d5b448bff9df5b0bab0d2210c95e514e" translate="yes" xml:space="preserve">
          <source>, see below.</source>
          <target state="translated">, see below.</target>
        </trans-unit>
        <trans-unit id="4165c20cc560175b963da6bc4d77312447940a05" translate="yes" xml:space="preserve">
          <source>, setting &lt;code&gt;IS_NUMBER_TRAILING&lt;/code&gt; on the result.</source>
          <target state="translated">, setting &lt;code&gt;IS_NUMBER_TRAILING&lt;/code&gt; on the result.</target>
        </trans-unit>
        <trans-unit id="ba2c6475f8f940fb92ea77b169a003790260386a" translate="yes" xml:space="preserve">
          <source>, shows how you can make use of</source>
          <target state="translated">, shows how you can make use of</target>
        </trans-unit>
        <trans-unit id="4dd3298c6d1bd33b1bddecc4419b76b21ac63113" translate="yes" xml:space="preserve">
          <source>, so G_DISCARD is specified. Even if</source>
          <target state="translated">, so G_DISCARD is specified. Even if</target>
        </trans-unit>
        <trans-unit id="74317a6fb7a862910bba2f815752e8625fde38fb" translate="yes" xml:space="preserve">
          <source>, so here's some opportunity for some patching.</source>
          <target state="translated">, so here's some opportunity for some patching.</target>
        </trans-unit>
        <trans-unit id="99d2a210f65f1b750acbf3003b2617a271c06034" translate="yes" xml:space="preserve">
          <source>, so that it does not create a link between a VIO session and the session of &lt;code&gt;pm_porg&lt;/code&gt; . (Such a link closes the VIO window.) E.g., this works with</source>
          <target state="translated">, so that it does not create a link between a VIO session and the session of &lt;code&gt;pm_porg&lt;/code&gt; . (Such a link closes the VIO window.) E.g., this works with</target>
        </trans-unit>
        <trans-unit id="8075e1a34058df98200120ef8d7277ea339786f0" translate="yes" xml:space="preserve">
          <source>, so the directories are searched through for linkable libraries again.</source>
          <target state="translated">, so the directories are searched through for linkable libraries again.</target>
        </trans-unit>
        <trans-unit id="2a07866af21835710bc9a6f54723c0b9d52d41d7" translate="yes" xml:space="preserve">
          <source>, so there is no special &quot;test_harness&quot; target.</source>
          <target state="translated">, so there is no special &quot;test_harness&quot; target.</target>
        </trans-unit>
        <trans-unit id="39d37d1b4683a3fb66c0c9cb4ab07337524f0bd5" translate="yes" xml:space="preserve">
          <source>, so we may ignore them. The following list shows our errors, your results may differ:</source>
          <target state="translated">, so we may ignore them. The following list shows our errors, your results may differ:</target>
        </trans-unit>
        <trans-unit id="cf90afd63e53252a0999bd1484eafacffe771fa0" translate="yes" xml:space="preserve">
          <source>, so you can't set sh with a &lt;code&gt;-D&lt;/code&gt; option, though you can override this (and startsh) with &lt;code&gt;-O -Dsh=&lt;i&gt;/bin/whatever&lt;/i&gt; -Dstartsh=whatever&lt;/code&gt;</source>
          <target state="translated">, so you can't set sh with a &lt;code&gt;-D&lt;/code&gt; option, though you can override this (and startsh) with &lt;code&gt;-O -Dsh=&lt;i&gt;/bin/whatever&lt;/i&gt; -Dstartsh=whatever&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6d839faa6ea4a6b5e97b5d7bc7e2a56a2c58137" translate="yes" xml:space="preserve">
          <source>, so you might examine them if your console has only a limited number of cols.</source>
          <target state="translated">, so you might examine them if your console has only a limited number of cols.</target>
        </trans-unit>
        <trans-unit id="2276c8b5c561790372b3ca4478529f74cf3b1e94" translate="yes" xml:space="preserve">
          <source>, some systems may have to replace the &lt;code&gt;#!&lt;/code&gt; line with a line containing just a colon, which will be politely ignored by Perl. Other systems can't control that, and need a totally devious construct that will work under any of</source>
          <target state="translated">, some systems may have to replace the &lt;code&gt;#!&lt;/code&gt; line with a line containing just a colon, which will be politely ignored by Perl. Other systems can't control that, and need a totally devious construct that will work under any of</target>
        </trans-unit>
        <trans-unit id="a23e4409511836342736b9f02167e4000d6c659b" translate="yes" xml:space="preserve">
          <source>, sorcery, or wonder working. [From Middle English.]</source>
          <target state="translated">, sorcery, or wonder working. [From Middle English.]</target>
        </trans-unit>
        <trans-unit id="fd25e4b237d0de2bbe9c20b33a4bfd410153bc18" translate="yes" xml:space="preserve">
          <source>, specifically a listing of functions, macros, flags, and variables that may be used by extension writers. &lt;a href=&quot;#Undocumented-functions&quot;&gt;At the end&lt;/a&gt; is a list of functions which have yet to be documented. The interfaces of those are subject to change without notice. Anything not listed here is not part of the public API, and should not be used by extension writers at all. For these reasons, blindly using functions listed in proto.h is to be avoided when writing extensions.</source>
          <target state="translated">, specifically a listing of functions, macros, flags, and variables that may be used by extension writers. &lt;a href=&quot;#Undocumented-functions&quot;&gt;At the end&lt;/a&gt; is a list of functions which have yet to be documented. The interfaces of those are subject to change without notice. Anything not listed here is not part of the public API, and should not be used by extension writers at all. For these reasons, blindly using functions listed in proto.h is to be avoided when writing extensions.</target>
        </trans-unit>
        <trans-unit id="3eace3842ea85c92144047677156c458ddf9586e" translate="yes" xml:space="preserve">
          <source>, standard input (</source>
          <target state="translated">, standard input (</target>
        </trans-unit>
        <trans-unit id="dacd7df5d67e86f62828aca14d84822ce104e1a0" translate="yes" xml:space="preserve">
          <source>, stripped of their leading &quot;pw_&quot; parts, namely &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;uid&lt;/code&gt; , &lt;code&gt;gid&lt;/code&gt; , &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; , &lt;code&gt;quota&lt;/code&gt; , &lt;code&gt;comment&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , &lt;code&gt;dir&lt;/code&gt; , &lt;code&gt;shell&lt;/code&gt; , and &lt;code&gt;expire&lt;/code&gt; . The &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , and &lt;code&gt;shell&lt;/code&gt; fields are tainted when running in taint mode.</source>
          <target state="translated">, stripped of their leading &quot;pw_&quot; parts, namely &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;uid&lt;/code&gt; , &lt;code&gt;gid&lt;/code&gt; , &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; , &lt;code&gt;quota&lt;/code&gt; , &lt;code&gt;comment&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , &lt;code&gt;dir&lt;/code&gt; , &lt;code&gt;shell&lt;/code&gt; , and &lt;code&gt;expire&lt;/code&gt; . The &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , and &lt;code&gt;shell&lt;/code&gt; fields are tainted when running in taint mode.</target>
        </trans-unit>
        <trans-unit id="957091e96ecfa54157cc0d4139600a9a7f9d62d7" translate="yes" xml:space="preserve">
          <source>, such as having $x run from 4..8 and $y run from 7 to 12? Hmm... here's the simple way:</source>
          <target state="translated">, such as having $x run from 4..8 and $y run from 7 to 12? Hmm... here's the simple way:</target>
        </trans-unit>
        <trans-unit id="656da3fea3006661322b08824becf92984dd0aa9" translate="yes" xml:space="preserve">
          <source>, such as within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or a file, even though the statements aren&amp;rsquo;t delimited by braces.</source>
          <target state="translated">, such as within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or a file, even though the statements aren&amp;rsquo;t delimited by braces.</target>
        </trans-unit>
        <trans-unit id="e08e5efec9e9e043f2abcc148b97927bd245fcae" translate="yes" xml:space="preserve">
          <source>, terminated by a newline.)</source>
          <target state="translated">, terminated by a newline.)</target>
        </trans-unit>
        <trans-unit id="56e9bba4a207b86aa8dee08a4810ed2206bed901" translate="yes" xml:space="preserve">
          <source>, that is, a string beginning with a letter or underscore, and containing letters, underscores, and digits. In some cases, it may be a chain of identifiers, separated by &lt;code&gt;::&lt;/code&gt; (or by the slightly archaic &lt;code&gt;'&lt;/code&gt;); all but the last are interpreted as names of packages, to locate the namespace in which to look up the final identifier (see &lt;a href=&quot;perlmod#Packages&quot;&gt;Packages in perlmod&lt;/a&gt; for details). For a more in-depth discussion on identifiers, see &lt;a href=&quot;#Identifier-parsing&quot;&gt;Identifier parsing&lt;/a&gt;. It's possible to substitute for a simple identifier, an expression that produces a reference to the value at runtime. This is described in more detail below and in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">, that is, a string beginning with a letter or underscore, and containing letters, underscores, and digits. In some cases, it may be a chain of identifiers, separated by &lt;code&gt;::&lt;/code&gt; (or by the slightly archaic &lt;code&gt;'&lt;/code&gt;); all but the last are interpreted as names of packages, to locate the namespace in which to look up the final identifier (see &lt;a href=&quot;perlmod#Packages&quot;&gt;Packages in perlmod&lt;/a&gt; for details). For a more in-depth discussion on identifiers, see &lt;a href=&quot;#Identifier-parsing&quot;&gt;Identifier parsing&lt;/a&gt;. It's possible to substitute for a simple identifier, an expression that produces a reference to the value at runtime. This is described in more detail below and in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5ebe898ca0c994ef13e630acb20dae497030f2a1" translate="yes" xml:space="preserve">
          <source>, that is, all elements in either A or in B but not in both. Think of it as an xor operation.</source>
          <target state="translated">, that is, all elements in either A or in B but not in both. Think of it as an xor operation.</target>
        </trans-unit>
        <trans-unit id="fb1f30a577a9e343978298cf00190fde48358aaf" translate="yes" xml:space="preserve">
          <source>, that is, visible. This class consists of all alphanumeric characters and all punctuation characters.</source>
          <target state="translated">, that is, visible. This class consists of all alphanumeric characters and all punctuation characters.</target>
        </trans-unit>
        <trans-unit id="066c5c23cfa29a9ad5d5bae17b8dc8aeb40e3312" translate="yes" xml:space="preserve">
          <source>, that takes 2 integer parameters and simply returns their sum.</source>
          <target state="translated">, that takes 2 integer parameters and simply returns their sum.</target>
        </trans-unit>
        <trans-unit id="72fb706cc8e6bb54ff9e026e88c6735beb29bae1" translate="yes" xml:space="preserve">
          <source>, that uses all three (long lines have been wrapped here):</source>
          <target state="translated">, that uses all three (long lines have been wrapped here):</target>
        </trans-unit>
        <trans-unit id="c4ff75230dcb5fc1cf1b33f194533921c76a1f94" translate="yes" xml:space="preserve">
          <source>, that was introduced in release 5.005. That model was deprecated, and has been removed in version 5.10.</source>
          <target state="translated">, that was introduced in release 5.005. That model was deprecated, and has been removed in version 5.10.</target>
        </trans-unit>
        <trans-unit id="a9bcafc2113daaac812f1518346b8bb3f4ad5920" translate="yes" xml:space="preserve">
          <source>, the</source>
          <target state="translated">, the</target>
        </trans-unit>
        <trans-unit id="bbc14ad4bef82ce943fa383c1ed92a04f35ae9a8" translate="yes" xml:space="preserve">
          <source>, the C function required to call it is now a bit more complex.</source>
          <target state="translated">, the C function required to call it is now a bit more complex.</target>
        </trans-unit>
        <trans-unit id="4f74cf35d928e36b23641e736801a45580f16870" translate="yes" xml:space="preserve">
          <source>, the Perl library module for the extension, and</source>
          <target state="translated">, the Perl library module for the extension, and</target>
        </trans-unit>
        <trans-unit id="97438a08eda84c3bfc06c55a3bea0450b5e8f958" translate="yes" xml:space="preserve">
          <source>, the YACC grammar. Let's take the piece we need to construct the tree for &lt;code&gt;$a = $b + $c&lt;/code&gt;</source>
          <target state="translated">, the YACC grammar. Let's take the piece we need to construct the tree for &lt;code&gt;$a = $b + $c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3a75d4660639ffe74acee5e5672e890c4814fdd" translate="yes" xml:space="preserve">
          <source>, the character used to separate elements in the command shell search &lt;code&gt;PATH&lt;/code&gt; .</source>
          <target state="translated">, the character used to separate elements in the command shell search &lt;code&gt;PATH&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="855214b2662c5c1d8b850e9feee34272d5af2679" translate="yes" xml:space="preserve">
          <source>, the file</source>
          <target state="translated">, the file</target>
        </trans-unit>
        <trans-unit id="b1abcc10b694dd0025270a3db184b16a0fa38af6" translate="yes" xml:space="preserve">
          <source>, the final character is replicated till it is long enough. If the</source>
          <target state="translated">, the final character is replicated till it is long enough. If the</target>
        </trans-unit>
        <trans-unit id="dc1c5f98cffb439007008844e3a20f10ba40b400" translate="yes" xml:space="preserve">
          <source>, the first 16-bit unit being the</source>
          <target state="translated">, the first 16-bit unit being the</target>
        </trans-unit>
        <trans-unit id="cc0e409bb9bfdd351b146c8736f3bc9ef0f9e327" translate="yes" xml:space="preserve">
          <source>, the offset is relative to the start of the</source>
          <target state="translated">, the offset is relative to the start of the</target>
        </trans-unit>
        <trans-unit id="f8c58b0bde45ddae936256535fca27e27919543c" translate="yes" xml:space="preserve">
          <source>, the process</source>
          <target state="translated">, the process</target>
        </trans-unit>
        <trans-unit id="03d7028c2014dc1d6e04f06a4cda352756b2fdc6" translate="yes" xml:space="preserve">
          <source>, the reference can be used to store context information. The reference will be</source>
          <target state="translated">, the reference can be used to store context information. The reference will be</target>
        </trans-unit>
        <trans-unit id="503654fe46496135690eb6d481b68797ec8a3d06" translate="yes" xml:space="preserve">
          <source>, the resulting UTF8 flag is &lt;b&gt;on&lt;/b&gt;--</source>
          <target state="translated">, the resulting UTF8 flag is &lt;b&gt;on&lt;/b&gt;--</target>
        </trans-unit>
        <trans-unit id="3421355fa3000d28b30b10777add4df0ffdfb58a" translate="yes" xml:space="preserve">
          <source>, the resulting UTF8 flag is always &lt;b&gt;off&lt;/b&gt;.</source>
          <target state="translated">, the resulting UTF8 flag is always &lt;b&gt;off&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="68c1b175b8542016c468fb6ae172829284030bdd" translate="yes" xml:space="preserve">
          <source>, the second requests a</source>
          <target state="translated">, the second requests a</target>
        </trans-unit>
        <trans-unit id="d0bac92aa165b5fcbe5d15dd2a3c4caac7ecba0a" translate="yes" xml:space="preserve">
          <source>, the table file is searched as</source>
          <target state="translated">, the table file is searched as</target>
        </trans-unit>
        <trans-unit id="80701e28ff7424b803181d8d7ce930f56b53f8c9" translate="yes" xml:space="preserve">
          <source>, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;mktime()&lt;/code&gt; manpage for details about these and the other arguments.</source>
          <target state="translated">, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;mktime()&lt;/code&gt; manpage for details about these and the other arguments.</target>
        </trans-unit>
        <trans-unit id="9aea9e329eab2b9adcc970b72067fd0793c21cb5" translate="yes" xml:space="preserve">
          <source>, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;strftime()&lt;/code&gt; manpage for details about these and the other arguments.</source>
          <target state="translated">, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;strftime()&lt;/code&gt; manpage for details about these and the other arguments.</target>
        </trans-unit>
        <trans-unit id="e189049326051591313d1c5688fafbf491aeaf0f" translate="yes" xml:space="preserve">
          <source>, then</source>
          <target state="translated">, then</target>
        </trans-unit>
        <trans-unit id="2d7357221c057e21e0603b99d486d8d01e9f1d7b" translate="yes" xml:space="preserve">
          <source>, then each cached data item will be discarded and looked up afresh after the</source>
          <target state="translated">, then each cached data item will be discarded and looked up afresh after the</target>
        </trans-unit>
        <trans-unit id="0664c5508add1cbceda996e5b9d179cefd229787" translate="yes" xml:space="preserve">
          <source>, then extraction continues until</source>
          <target state="translated">, then extraction continues until</target>
        </trans-unit>
        <trans-unit id="e9be5594e1731bd928c54113aa6bba78d9d10daa" translate="yes" xml:space="preserve">
          <source>, then the above system() is translated to</source>
          <target state="translated">, then the above system() is translated to</target>
        </trans-unit>
        <trans-unit id="56ed743dadd72fa853ae506be49d8e7ef23c11ba" translate="yes" xml:space="preserve">
          <source>, then the verbose level will default to 1 if the exit status is less than 2 and will default to 0 otherwise.</source>
          <target state="translated">, then the verbose level will default to 1 if the exit status is less than 2 and will default to 0 otherwise.</target>
        </trans-unit>
        <trans-unit id="f388bd8ed28d6ec5148837e6886a6224018735fc" translate="yes" xml:space="preserve">
          <source>, then this is a no-op. Returns the number of octets necessary to represent the string as</source>
          <target state="translated">, then this is a no-op. Returns the number of octets necessary to represent the string as</target>
        </trans-unit>
        <trans-unit id="3e93eac954f44cb11630b056721e2f26edaf81c2" translate="yes" xml:space="preserve">
          <source>, then we actually define $Lexicon{</source>
          <target state="translated">, then we actually define $Lexicon{</target>
        </trans-unit>
        <trans-unit id="981255f700628f4a04da30c05e1f1345be156be9" translate="yes" xml:space="preserve">
          <source>, then we need to tell the &lt;code&gt;perl&lt;/code&gt; executable where it will be able to find the installed</source>
          <target state="translated">, then we need to tell the &lt;code&gt;perl&lt;/code&gt; executable where it will be able to find the installed</target>
        </trans-unit>
        <trans-unit id="a97f83b483632edd32d7566630fdf0b16cc8ac52" translate="yes" xml:space="preserve">
          <source>, then you need to change the path following the &lt;code&gt;-L&lt;/code&gt; . If it complains that it can't find</source>
          <target state="translated">, then you need to change the path following the &lt;code&gt;-L&lt;/code&gt; . If it complains that it can't find</target>
        </trans-unit>
        <trans-unit id="8911f644fb0560e46f52310cd354bac6558884ff" translate="yes" xml:space="preserve">
          <source>, there is no upper bound to the number of argument values taken.</source>
          <target state="translated">, there is no upper bound to the number of argument values taken.</target>
        </trans-unit>
        <trans-unit id="8da1ee6882503c12e13b4824907fc0653955992a" translate="yes" xml:space="preserve">
          <source>, there is the entry:</source>
          <target state="translated">, there is the entry:</target>
        </trans-unit>
        <trans-unit id="17e4f4b7efc3bfddeaaec858218e98d597284597" translate="yes" xml:space="preserve">
          <source>, there's no sense in being able to enable() or disable() processing.</source>
          <target state="translated">, there's no sense in being able to enable() or disable() processing.</target>
        </trans-unit>
        <trans-unit id="d5fc8a5e02b68374b799d5535dec84e053e8816a" translate="yes" xml:space="preserve">
          <source>, this directory contains modules which are only released as part of the core. Unlike</source>
          <target state="translated">, this directory contains modules which are only released as part of the core. Unlike</target>
        </trans-unit>
        <trans-unit id="133358768c237ba7c13e2e36ef10a76ee918db2a" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_REVISION&lt;/code&gt; .</source>
          <target state="translated">, this is referred to as &lt;code&gt;PERL_REVISION&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d5a14e004f2bf1eeac71229fa7540bd21823c5b" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_SUBVERSION&lt;/code&gt; . This is unique to perl.</source>
          <target state="translated">, this is referred to as &lt;code&gt;PERL_SUBVERSION&lt;/code&gt; . This is unique to perl.</target>
        </trans-unit>
        <trans-unit id="714cd1f92b0d5db09f723a91ae82e2d32331d86e" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_VERSION&lt;/code&gt; .</source>
          <target state="translated">, this is referred to as &lt;code&gt;PERL_VERSION&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ba8cba024fa50efc2185c250a93c4684f50f8b2" translate="yes" xml:space="preserve">
          <source>, this method is a read-once operation. Call</source>
          <target state="translated">, this method is a read-once operation. Call</target>
        </trans-unit>
        <trans-unit id="c5419160a5194a27a2e9670569f35b7ce53eec75" translate="yes" xml:space="preserve">
          <source>, this pragma looks in the table of standard Unicode names for the names</source>
          <target state="translated">, this pragma looks in the table of standard Unicode names for the names</target>
        </trans-unit>
        <trans-unit id="b0263513f039c38507b3d70b68ab4c5b60dd7020" translate="yes" xml:space="preserve">
          <source>, though it simply delegates to the</source>
          <target state="translated">, though it simply delegates to the</target>
        </trans-unit>
        <trans-unit id="18f1b111c2282bb1d52143843bb53f0e42f90748" translate="yes" xml:space="preserve">
          <source>, though it's possible that some systems will have</source>
          <target state="translated">, though it's possible that some systems will have</target>
        </trans-unit>
        <trans-unit id="2399ea48546f62dda016b66c915a33efba5ece8f" translate="yes" xml:space="preserve">
          <source>, to check use</source>
          <target state="translated">, to check use</target>
        </trans-unit>
        <trans-unit id="426b172db6893b6e9657e6e9162888abed4f4794" translate="yes" xml:space="preserve">
          <source>, to handle these for us. He suggests (assuming your string is contained in &lt;code&gt;$text&lt;/code&gt; ):</source>
          <target state="translated">, to handle these for us. He suggests (assuming your string is contained in &lt;code&gt;$text&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="06a97e60b438c8a77e2cd328d323df609691a533" translate="yes" xml:space="preserve">
          <source>, to print out the UID of the process.</source>
          <target state="translated">, to print out the UID of the process.</target>
        </trans-unit>
        <trans-unit id="faee7867e8ebfc988e6546f4dcbe9ad6cb8c536a" translate="yes" xml:space="preserve">
          <source>, use a name recognized by the &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; module. Some pod formatters may try to guess between a Latin-1 or CP-1252 versus UTF-8 encoding, but they may guess wrong. It's best to be explicit if you use anything besides strict ASCII. Examples:</source>
          <target state="translated">, use a name recognized by the &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; module. Some pod formatters may try to guess between a Latin-1 or CP-1252 versus UTF-8 encoding, but they may guess wrong. It's best to be explicit if you use anything besides strict ASCII. Examples:</target>
        </trans-unit>
        <trans-unit id="2a7de5b14d2a34b3272730993fe2dee6018ff3fd" translate="yes" xml:space="preserve">
          <source>, using embedded whitespace as the word delimiters. It can be understood as being roughly equivalent to:</source>
          <target state="translated">, using embedded whitespace as the word delimiters. It can be understood as being roughly equivalent to:</target>
        </trans-unit>
        <trans-unit id="e169e875a0353d0299dee5c8ba5ef4c88de61df4" translate="yes" xml:space="preserve">
          <source>, when it detects its program running with differing real and effective user or group IDs. The setuid bit in Unix permissions is mode 04000, the setgid bit mode 02000; either or both may be set. You can also enable taint mode explicitly by using the &lt;b&gt;-T&lt;/b&gt; command line flag. This flag is</source>
          <target state="translated">, when it detects its program running with differing real and effective user or group IDs. The setuid bit in Unix permissions is mode 04000, the setgid bit mode 02000; either or both may be set. You can also enable taint mode explicitly by using the &lt;b&gt;-T&lt;/b&gt; command line flag. This flag is</target>
        </trans-unit>
        <trans-unit id="a8fbd0202d5d59bb16abfc27a4a724fcbb5feb8c" translate="yes" xml:space="preserve">
          <source>, where</source>
          <target state="translated">, where</target>
        </trans-unit>
        <trans-unit id="8924bb9dd1f684020a4cba15af279a4d0d20f15e" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; myint;&lt;/code&gt; is in effect, addition operations are forced to integer, whereas by default they are not, with the default behaviour being restored via &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt;</source>
          <target state="translated">, where &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; myint;&lt;/code&gt; is in effect, addition operations are forced to integer, whereas by default they are not, with the default behaviour being restored via &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f41ab59091bd1f06b31a77ab9df95b2bc91cbcd" translate="yes" xml:space="preserve">
          <source>, where the &lt;code&gt;.al&lt;/code&gt; file has the same name as the subroutine, sans package. If such a file exists, AUTOLOAD will read and evaluate it, thus (presumably) defining the needed subroutine. AUTOLOAD will then &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; the newly defined subroutine.</source>
          <target state="translated">, where the &lt;code&gt;.al&lt;/code&gt; file has the same name as the subroutine, sans package. If such a file exists, AUTOLOAD will read and evaluate it, thus (presumably) defining the needed subroutine. AUTOLOAD will then &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; the newly defined subroutine.</target>
        </trans-unit>
        <trans-unit id="6aea3fc4b54551faf648d0b392baddc5ecb694ab" translate="yes" xml:space="preserve">
          <source>, whereas</source>
          <target state="translated">, whereas</target>
        </trans-unit>
        <trans-unit id="26c934aa9a989416f6aadbafbbddd8e4c4e1b0e5" translate="yes" xml:space="preserve">
          <source>, which are abstract numbers. To use these numbers, various encodings are needed.</source>
          <target state="translated">, which are abstract numbers. To use these numbers, various encodings are needed.</target>
        </trans-unit>
        <trans-unit id="03649386e3bc4e7a816e4620f028cf88bdb23bf9" translate="yes" xml:space="preserve">
          <source>, which are actually the same program but behave differently depending on how they are called, provide another way of getting at C with Perl - they'll convert C structures and union declarations to Perl code. This is deprecated in favour of</source>
          <target state="translated">, which are actually the same program but behave differently depending on how they are called, provide another way of getting at C with Perl - they'll convert C structures and union declarations to Perl code. This is deprecated in favour of</target>
        </trans-unit>
        <trans-unit id="0b151974aee7344a268313e90f86adde43defa23" translate="yes" xml:space="preserve">
          <source>, which creates a Perl counterpart for each of the extension's XSUBs. Don't worry about this part; leave that to the</source>
          <target state="translated">, which creates a Perl counterpart for each of the extension's XSUBs. Don't worry about this part; leave that to the</target>
        </trans-unit>
        <trans-unit id="0e4ba048b9a7447e52c228c8f75341de76908cb5" translate="yes" xml:space="preserve">
          <source>, which is always a good idea to supply if the number is known.</source>
          <target state="translated">, which is always a good idea to supply if the number is known.</target>
        </trans-unit>
        <trans-unit id="17829fa2132953972da0914ccd97c3e350358fce" translate="yes" xml:space="preserve">
          <source>, which is currently used (when needed) by all regular non-possessive expression quantifiers, namely &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}&lt;/code&gt;, and &lt;code&gt;{n,m}?&lt;/code&gt;. Backtracking is often optimized internally, but the general principle outlined here is valid.</source>
          <target state="translated">, which is currently used (when needed) by all regular non-possessive expression quantifiers, namely &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}&lt;/code&gt;, and &lt;code&gt;{n,m}?&lt;/code&gt;. Backtracking is often optimized internally, but the general principle outlined here is valid.</target>
        </trans-unit>
        <trans-unit id="03d1757cccf78573ee0182fd5b28a73a2d407dd6" translate="yes" xml:space="preserve">
          <source>, which is either a decimal or a hexadecimal scalar designating a code point in the platform's native character set (extended to Unicode), or a string containing &lt;code&gt;U+&lt;/code&gt; followed by hexadecimals designating a Unicode code point. A leading 0 will force a hexadecimal interpretation, as will a hexadecimal digit that isn't a decimal digit.</source>
          <target state="translated">, which is either a decimal or a hexadecimal scalar designating a code point in the platform's native character set (extended to Unicode), or a string containing &lt;code&gt;U+&lt;/code&gt; followed by hexadecimals designating a Unicode code point. A leading 0 will force a hexadecimal interpretation, as will a hexadecimal digit that isn't a decimal digit.</target>
        </trans-unit>
        <trans-unit id="baf38326329741523715bffba499968b7d0e87ce" translate="yes" xml:space="preserve">
          <source>, which is not the winpid. Use &lt;code&gt;Cygwin::pid_to_winpid()&lt;/code&gt; and &lt;code&gt;Cygwin::winpid_to_pid()&lt;/code&gt; to translate between them.</source>
          <target state="translated">, which is not the winpid. Use &lt;code&gt;Cygwin::pid_to_winpid()&lt;/code&gt; and &lt;code&gt;Cygwin::winpid_to_pid()&lt;/code&gt; to translate between them.</target>
        </trans-unit>
        <trans-unit id="0c16c9a97ba5ea538f1979d7f7d2fb2c51566d3a" translate="yes" xml:space="preserve">
          <source>, which matches any character but those in the brackets. Both &lt;code&gt;[...]&lt;/code&gt; and &lt;code&gt;[^...]&lt;/code&gt; must match a character, or the match fails. Then</source>
          <target state="translated">, which matches any character but those in the brackets. Both &lt;code&gt;[...]&lt;/code&gt; and &lt;code&gt;[^...]&lt;/code&gt; must match a character, or the match fails. Then</target>
        </trans-unit>
        <trans-unit id="b4454811042a626c864b08d42e1e9fe1a6f89db8" translate="yes" xml:space="preserve">
          <source>, which means it's going to be false in any sane context.</source>
          <target state="translated">, which means it's going to be false in any sane context.</target>
        </trans-unit>
        <trans-unit id="86643bdbf232568e22729fc55a9633ebd6eca7bc" translate="yes" xml:space="preserve">
          <source>, which must be an encoding name that &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; recognizes. (Encode's list of supported encodings, in &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;, is useful here.) If the Pod parser cannot decode the declared encoding, it should emit a warning and may abort parsing the document altogether.</source>
          <target state="translated">, which must be an encoding name that &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; recognizes. (Encode's list of supported encodings, in &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;, is useful here.) If the Pod parser cannot decode the declared encoding, it should emit a warning and may abort parsing the document altogether.</target>
        </trans-unit>
        <trans-unit id="6946244e23fae74ad07a1325f15207b7d2a7623a" translate="yes" xml:space="preserve">
          <source>, which must be of type &lt;code&gt;STRLEN&lt;/code&gt; . Evaluates</source>
          <target state="translated">, which must be of type &lt;code&gt;STRLEN&lt;/code&gt; . Evaluates</target>
        </trans-unit>
        <trans-unit id="d6c4d6b2342d9336a15bff4441fdc806ef9f1dda" translate="yes" xml:space="preserve">
          <source>, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems $0 doesn't always contain the full pathname, so the &lt;b&gt;-S&lt;/b&gt; tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable $running_under_some_shell is never true. If the program will be interpreted by csh, you will need to replace &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; with &lt;code&gt;$*&lt;/code&gt; , even though that doesn't understand embedded spaces (and such) in the argument list. To start up</source>
          <target state="translated">, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems $0 doesn't always contain the full pathname, so the &lt;b&gt;-S&lt;/b&gt; tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable $running_under_some_shell is never true. If the program will be interpreted by csh, you will need to replace &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; with &lt;code&gt;$*&lt;/code&gt; , even though that doesn't understand embedded spaces (and such) in the argument list. To start up</target>
        </trans-unit>
        <trans-unit id="d03971d8e8f6aae96dc846db2bbccfa1c43aa02c" translate="yes" xml:space="preserve">
          <source>, which processes the command line options, sets up any statically linked XS modules, opens the program and calls &lt;code&gt;yyparse&lt;/code&gt; to parse it.</source>
          <target state="translated">, which processes the command line options, sets up any statically linked XS modules, opens the program and calls &lt;code&gt;yyparse&lt;/code&gt; to parse it.</target>
        </trans-unit>
        <trans-unit id="d38a80b5f16db8cd8592888fcbc6ecb5cbfb16e6" translate="yes" xml:space="preserve">
          <source>, which provides a core to which the Perl executable image and all Perl extensions are linked. It is generally located via the logical name</source>
          <target state="translated">, which provides a core to which the Perl executable image and all Perl extensions are linked. It is generally located via the logical name</target>
        </trans-unit>
        <trans-unit id="5d983c580d2a071fc02ee59631c5c9b624e3d132" translate="yes" xml:space="preserve">
          <source>, which requires that all applications use its LSP but which is not IFS-compatible, because clearly Perl will normally avoid using such an LSP.</source>
          <target state="translated">, which requires that all applications use its LSP but which is not IFS-compatible, because clearly Perl will normally avoid using such an LSP.</target>
        </trans-unit>
        <trans-unit id="8ae6e3dda98fae8d31622d67dcd619e9e43cefbe" translate="yes" xml:space="preserve">
          <source>, which shall not modify any input argument, and</source>
          <target state="translated">, which shall not modify any input argument, and</target>
        </trans-unit>
        <trans-unit id="b3cd0cd1142152776fc2bac2a2e89c7f139dc35e" translate="yes" xml:space="preserve">
          <source>, which should be a full pathname found amongst the %INC values.</source>
          <target state="translated">, which should be a full pathname found amongst the %INC values.</target>
        </trans-unit>
        <trans-unit id="9149915d9aff75a334b3f754d9220c360d8f395f" translate="yes" xml:space="preserve">
          <source>, which will be open in a manner compatible with the supplied mode string, the call is thus equivalent to &lt;code&gt;PerlIO_fdopen&lt;/code&gt; . In this case</source>
          <target state="translated">, which will be open in a manner compatible with the supplied mode string, the call is thus equivalent to &lt;code&gt;PerlIO_fdopen&lt;/code&gt; . In this case</target>
        </trans-unit>
        <trans-unit id="e29affdf4265c07a24e87380ae0fc86e7811b273" translate="yes" xml:space="preserve">
          <source>, which you'll also need) will reside in a directory that looks like this:</source>
          <target state="translated">, which you'll also need) will reside in a directory that looks like this:</target>
        </trans-unit>
        <trans-unit id="b91b3346b580b5a72bcf19156716e69a40617494" translate="yes" xml:space="preserve">
          <source>, whichever is writable.</source>
          <target state="translated">, whichever is writable.</target>
        </trans-unit>
        <trans-unit id="1521c3e5024fb9d201b1510098752e0fbfadaa8f" translate="yes" xml:space="preserve">
          <source>, whichever is writable. For example Solaris and IRIX system may prefer &lt;code&gt;&quot;stream&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;unix&quot;&lt;/code&gt; .</source>
          <target state="translated">, whichever is writable. For example Solaris and IRIX system may prefer &lt;code&gt;&quot;stream&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;unix&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af1e6ea7c63a016f19ff1f20a75d322ca9d606dc" translate="yes" xml:space="preserve">
          <source>, will copy the files onto the NetWare server.</source>
          <target state="translated">, will copy the files onto the NetWare server.</target>
        </trans-unit>
        <trans-unit id="542c63558f82cc60301de087610ae8d702c1444e" translate="yes" xml:space="preserve">
          <source>, will the expression be treated as boolean. Otherwise, smartmatching is used.</source>
          <target state="translated">, will the expression be treated as boolean. Otherwise, smartmatching is used.</target>
        </trans-unit>
        <trans-unit id="434f72658ad0db42fd472dfe71b1d976ec669e77" translate="yes" xml:space="preserve">
          <source>, with a function</source>
          <target state="translated">, with a function</target>
        </trans-unit>
        <trans-unit id="22b8ca3ac41e774d45998884fc92354c868b6717" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a Base64 string. Multiple</source>
          <target state="translated">, with the result encoded as a Base64 string. Multiple</target>
        </trans-unit>
        <trans-unit id="677a292feedbf48a082a00acc87c06021be08f63" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a binary string. Multiple</source>
          <target state="translated">, with the result encoded as a binary string. Multiple</target>
        </trans-unit>
        <trans-unit id="2a314e18b1b4fa535233316b8d18d5a2b276138b" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a hexadecimal string. Multiple</source>
          <target state="translated">, with the result encoded as a hexadecimal string. Multiple</target>
        </trans-unit>
        <trans-unit id="b99d3c828cce13fde4656fc0fc0105ea617a8091" translate="yes" xml:space="preserve">
          <source>, yet another utility under Encode/bin directory.</source>
          <target state="translated">, yet another utility under Encode/bin directory.</target>
        </trans-unit>
        <trans-unit id="51f521f34eb9dfa708aba7876dbcd25e0b33259e" translate="yes" xml:space="preserve">
          <source>, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; (see below).</source>
          <target state="translated">, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; (see below).</target>
        </trans-unit>
        <trans-unit id="50c611f29a4f4c3132ca368f4ed25bf3706ad044" translate="yes" xml:space="preserve">
          <source>, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; to concatenate</source>
          <target state="translated">, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; to concatenate</target>
        </trans-unit>
        <trans-unit id="6e0466cebd730e6f201e1dc3e0fa65a5e7288ff5" translate="yes" xml:space="preserve">
          <source>, you can often gain a 10-25% performance benefit by rebuilding it to link with a static libc.a instead. This will make a bigger perl executable, but your Perl programs (and programmers) may thank you for it. See the</source>
          <target state="translated">, you can often gain a 10-25% performance benefit by rebuilding it to link with a static libc.a instead. This will make a bigger perl executable, but your Perl programs (and programmers) may thank you for it. See the</target>
        </trans-unit>
        <trans-unit id="1d331b88bfc2c65e1619a12d857298426cd92d30" translate="yes" xml:space="preserve">
          <source>, you can recompile with &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; , which will cause the addresses of all those leaked SVs to be dumped along with details as to where each SV was originally allocated. This information is also displayed by Devel::Peek. Note that the extra details recorded with each SV increases memory usage, so it shouldn't be used in production environments. It also converts &lt;code&gt;new_SV()&lt;/code&gt; from a macro into a real function, so you can use your favourite debugger to discover where those pesky SVs were allocated.</source>
          <target state="translated">, you can recompile with &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; , which will cause the addresses of all those leaked SVs to be dumped along with details as to where each SV was originally allocated. This information is also displayed by Devel::Peek. Note that the extra details recorded with each SV increases memory usage, so it shouldn't be used in production environments. It also converts &lt;code&gt;new_SV()&lt;/code&gt; from a macro into a real function, so you can use your favourite debugger to discover where those pesky SVs were allocated.</target>
        </trans-unit>
        <trans-unit id="b3880ec30cc2d5ebf349c1017f97c2cb7881519a" translate="yes" xml:space="preserve">
          <source>, you do not need to change anything. However, for perl to find the library if you use a different path, you need to &lt;code&gt;set PERLLIB_PREFIX&lt;/code&gt; in</source>
          <target state="translated">, you do not need to change anything. However, for perl to find the library if you use a different path, you need to &lt;code&gt;set PERLLIB_PREFIX&lt;/code&gt; in</target>
        </trans-unit>
        <trans-unit id="022efe6a8ac93e208088ce727015f5bc2ef4dbd9" translate="yes" xml:space="preserve">
          <source>, you may need to be extra careful when running Configure to not to confuse Configure and Perl about which libraries to use. Being confused will show up for example as &quot;dyld&quot; errors about symbol problems, for example during &quot;make test&quot;. The safest bet is to run Configure as</source>
          <target state="translated">, you may need to be extra careful when running Configure to not to confuse Configure and Perl about which libraries to use. Being confused will show up for example as &quot;dyld&quot; errors about symbol problems, for example during &quot;make test&quot;. The safest bet is to run Configure as</target>
        </trans-unit>
        <trans-unit id="021d52a6c6807f7976d981e9998715c511d43a0f" translate="yes" xml:space="preserve">
          <source>, you may need to reboot in between. Check EMX runtime by running</source>
          <target state="translated">, you may need to reboot in between. Check EMX runtime by running</target>
        </trans-unit>
        <trans-unit id="a357b8113a9e22a3eef60456621417078f84daeb" translate="yes" xml:space="preserve">
          <source>, you must explicitly &lt;code&gt;share()&lt;/code&gt; variables between the threads.</source>
          <target state="translated">, you must explicitly &lt;code&gt;share()&lt;/code&gt; variables between the threads.</target>
        </trans-unit>
        <trans-unit id="0a4cfad2d578d98a081e5b91f17f3d149edfc150" translate="yes" xml:space="preserve">
          <source>, you need to change the path following the &lt;code&gt;-I&lt;/code&gt; .</source>
          <target state="translated">, you need to change the path following the &lt;code&gt;-I&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a08a1ac95983f38539380ed39b4f27bf1fbb7125" translate="yes" xml:space="preserve">
          <source>, you probably don't expect it to run on both Unix and CP/M.)</source>
          <target state="translated">, you probably don't expect it to run on both Unix and CP/M.)</target>
        </trans-unit>
        <trans-unit id="a2d62578b1a9440577c8f95b2ea11ee98fbc944b" translate="yes" xml:space="preserve">
          <source>, you should always try to use</source>
          <target state="translated">, you should always try to use</target>
        </trans-unit>
        <trans-unit id="80d72f99e8c254f3d7a046575ea8e94531af8c78" translate="yes" xml:space="preserve">
          <source>, you should expect a bit of whimsy.</source>
          <target state="translated">, you should expect a bit of whimsy.</target>
        </trans-unit>
        <trans-unit id="87c1c3490c4a0eecd8de20c3cc69883c07b4ba2e" translate="yes" xml:space="preserve">
          <source>, you will need to run &lt;code&gt;make regen_headers&lt;/code&gt; to force a rebuild of</source>
          <target state="translated">, you will need to run &lt;code&gt;make regen_headers&lt;/code&gt; to force a rebuild of</target>
        </trans-unit>
        <trans-unit id="1d419e3c5bc7f5ea63240258fff8fb0654e4cb8f" translate="yes" xml:space="preserve">
          <source>, you'll have to rebuild Perl to incorporate a new extension. You should edit the main</source>
          <target state="translated">, you'll have to rebuild Perl to incorporate a new extension. You should edit the main</target>
        </trans-unit>
        <trans-unit id="fdf357edc958470810c296ee519d97c4d17b676d" translate="yes" xml:space="preserve">
          <source>, you'll probably need to subclass &lt;a href=&quot;grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; too, or else it'll never get used.</source>
          <target state="translated">, you'll probably need to subclass &lt;a href=&quot;grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; too, or else it'll never get used.</target>
        </trans-unit>
        <trans-unit id="8ce53fda25a5521f4426b98fc34aff8c177f37f2" translate="yes" xml:space="preserve">
          <source>, you'll see the results of using</source>
          <target state="translated">, you'll see the results of using</target>
        </trans-unit>
        <trans-unit id="3085b957b5d3ec5b39e504d18f16596194b3898c" translate="yes" xml:space="preserve">
          <source>, your issue is likely to receive more attention. You may want to start with &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt; for pointers to common traps that new (and experienced) Perl programmers run into.</source>
          <target state="translated">, your issue is likely to receive more attention. You may want to start with &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt; for pointers to common traps that new (and experienced) Perl programmers run into.</target>
        </trans-unit>
        <trans-unit id="001b22edb2fbe2a87d8cf96a1c82ed43978ed889" translate="yes" xml:space="preserve">
          <source>,...) was.</source>
          <target state="translated">,...) was.</target>
        </trans-unit>
        <trans-unit id="ad72be5c0d7fc1b8f77fe6354bc971428558be05" translate="yes" xml:space="preserve">
          <source>,...params...) can give up with:</source>
          <target state="translated">,...params...) can give up with:</target>
        </trans-unit>
        <trans-unit id="3ec37b4898d8fa711d06edd7a451aef6a2e60168" translate="yes" xml:space="preserve">
          <source>,...params...) gives up and calls:</source>
          <target state="translated">,...params...) gives up and calls:</target>
        </trans-unit>
        <trans-unit id="722cba868d267a82e7010bf92e684897c598bb02" translate="yes" xml:space="preserve">
          <source>,as that program depends on functionality which the test file itself is testing.</source>
          <target state="translated">,as that program depends on functionality which the test file itself is testing.</target>
        </trans-unit>
        <trans-unit id="92ec08014ef6e3572ce18cd210390b5494877bb0" translate="yes" xml:space="preserve">
          <source>- Home directory.</source>
          <target state="translated">- Home directory.</target>
        </trans-unit>
        <trans-unit id="bc43692f24635fad130f4c0b7605b093da1c6edc" translate="yes" xml:space="preserve">
          <source>- Root for accessing some special files, i.e.</source>
          <target state="translated">- Root for accessing some special files, i.e.</target>
        </trans-unit>
        <trans-unit id="3173574745b2a94d3ecbd9aad3aac008e1c75cf4" translate="yes" xml:space="preserve">
          <source>- Rows/cols for console.</source>
          <target state="translated">- Rows/cols for console.</target>
        </trans-unit>
        <trans-unit id="2a8384c45900eafb56b7372e12c87d95403210dd" translate="yes" xml:space="preserve">
          <source>- Size for console font.</source>
          <target state="translated">- Size for console font.</target>
        </trans-unit>
        <trans-unit id="ec35a1fcb1bf308cd068a9bee9a8176d037f75a7" translate="yes" xml:space="preserve">
          <source>- Tempdir.</source>
          <target state="translated">- Tempdir.</target>
        </trans-unit>
        <trans-unit id="a58249eb112a301215e90f4449910a61cde2399f" translate="yes" xml:space="preserve">
          <source>- may fail on recent cygwin installs.</source>
          <target state="translated">- may fail on recent cygwin installs.</target>
        </trans-unit>
        <trans-unit id="aa47440f5821f7fcd42136d522f634642510d036" translate="yes" xml:space="preserve">
          <source>- most probably RSX - decided to implement.</source>
          <target state="translated">- most probably RSX - decided to implement.</target>
        </trans-unit>
        <trans-unit id="586ed566ba05975ffadf370f1c6ecf01acb6d01a" translate="yes" xml:space="preserve">
          <source>- non-zero if the current XSUB has any aliases declared with &lt;code&gt;ALIAS&lt;/code&gt; .</source>
          <target state="translated">- non-zero if the current XSUB has any aliases declared with &lt;code&gt;ALIAS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c30b5265745c008d5265e386cbdf1dab87c47bde" translate="yes" xml:space="preserve">
          <source>- or with Perl!</source>
          <target state="translated">- or with Perl!</target>
        </trans-unit>
        <trans-unit id="6a5e7bde75d15d42f045f6c58b079f3857fc8edd" translate="yes" xml:space="preserve">
          <source>- see &lt;a href=&quot;https://rt.perl.org/Ticket/Display.html?id=78502&quot;&gt;https://rt.perl.org/Ticket/Display.html?id=78502&lt;/a&gt;</source>
          <target state="translated">- see &lt;a href=&quot;https://rt.perl.org/Ticket/Display.html?id=78502&quot;&gt;https://rt.perl.org/Ticket/Display.html?id=78502&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9eb095bd84343fa039df7c15c40c25123fcea513" translate="yes" xml:space="preserve">
          <source>- the argument stack offset of the argument. ie. 0 for the first argument, etc.</source>
          <target state="translated">- the argument stack offset of the argument. ie. 0 for the first argument, etc.</target>
        </trans-unit>
        <trans-unit id="b6fd27381e71b1b032ec8f7e7eff0c7d9ea88d03" translate="yes" xml:space="preserve">
          <source>- the full name of the XSUB, with including the &lt;code&gt;PACKAGE&lt;/code&gt; name, with any &lt;code&gt;PREFIX&lt;/code&gt; stripped. This is the non-ALIAS name.</source>
          <target state="translated">- the full name of the XSUB, with including the &lt;code&gt;PACKAGE&lt;/code&gt; name, with any &lt;code&gt;PREFIX&lt;/code&gt; stripped. This is the non-ALIAS name.</target>
        </trans-unit>
        <trans-unit id="ac306b045d6143c752e53a46375c4935a0210024" translate="yes" xml:space="preserve">
          <source>- the name of the input or output variable, eg. RETVAL for return values.</source>
          <target state="translated">- the name of the input or output variable, eg. RETVAL for return values.</target>
        </trans-unit>
        <trans-unit id="98a3328bb076d8bd2503f9a31ae579ee61669de1" translate="yes" xml:space="preserve">
          <source>- the package specified by the most recent &lt;code&gt;PACKAGE&lt;/code&gt; keyword.</source>
          <target state="translated">- the package specified by the most recent &lt;code&gt;PACKAGE&lt;/code&gt; keyword.</target>
        </trans-unit>
        <trans-unit id="f124ed3063522cd2ff8b8f4829e2a95edb5ad519" translate="yes" xml:space="preserve">
          <source>- the raw C type of the parameter, any &lt;code&gt;:&lt;/code&gt; replaced with &lt;code&gt;_&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo::Bar&lt;/code&gt; ,</source>
          <target state="translated">- the raw C type of the parameter, any &lt;code&gt;:&lt;/code&gt; replaced with &lt;code&gt;_&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo::Bar&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="76a588dc109d4b97adb8746f1e4fa8bce8a72431" translate="yes" xml:space="preserve">
          <source>- the stack entry, that the parameter is input from or output to, e.g. &lt;code&gt;ST(0)&lt;/code&gt;</source>
          <target state="translated">- the stack entry, that the parameter is input from or output to, e.g. &lt;code&gt;ST(0)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9cef40f084c3c3cb1207d8771f055a5a821202e" translate="yes" xml:space="preserve">
          <source>- the supplied type with &lt;code&gt;*&lt;/code&gt; replaced with &lt;code&gt;Ptr&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo*&lt;/code&gt; ,</source>
          <target state="translated">- the supplied type with &lt;code&gt;*&lt;/code&gt; replaced with &lt;code&gt;Ptr&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo*&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="a3d0e64f62d0aa67fc64844708eb009021bf6273" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Bless(</source>
          <target state="translated">-&amp;gt;Bless(</target>
        </trans-unit>
        <trans-unit id="f0722d974b50edb39d61682893cf91b3ae50c4aa" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Deepcopy(</source>
          <target state="translated">-&amp;gt;Deepcopy(</target>
        </trans-unit>
        <trans-unit id="5c0edfb04a76d90d803deb5fa319ba2663d74d18" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Deparse(</source>
          <target state="translated">-&amp;gt;Deparse(</target>
        </trans-unit>
        <trans-unit id="dba6f17f00a3608b5502035af168005f1d2e47c7" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Freezer(</source>
          <target state="translated">-&amp;gt;Freezer(</target>
        </trans-unit>
        <trans-unit id="f1b9e5eef8b3fe06ef615011915677eb670538c6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Indent(</source>
          <target state="translated">-&amp;gt;Indent(</target>
        </trans-unit>
        <trans-unit id="31b6bc539e0d7c7b5901a7311b172dd6898b322b" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Maxdepth(</source>
          <target state="translated">-&amp;gt;Maxdepth(</target>
        </trans-unit>
        <trans-unit id="2d566bc2e1d524d8205bee44364bc31e0a8e9197" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Maxrecurse(</source>
          <target state="translated">-&amp;gt;Maxrecurse(</target>
        </trans-unit>
        <trans-unit id="413ec10070e2ce7e4378ffb0f5cbabab43709ca5" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Pad(</source>
          <target state="translated">-&amp;gt;Pad(</target>
        </trans-unit>
        <trans-unit id="e06d02c9fdb1747ec2039cea96f30fea04b5b25b" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Pair(</source>
          <target state="translated">-&amp;gt;Pair(</target>
        </trans-unit>
        <trans-unit id="7e25804050e4aa77c61e8ee63bad263c485c56c6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Purity(</source>
          <target state="translated">-&amp;gt;Purity(</target>
        </trans-unit>
        <trans-unit id="56a023253cf1c514dba0cbce82b8b3814335f445" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Quotekeys(</source>
          <target state="translated">-&amp;gt;Quotekeys(</target>
        </trans-unit>
        <trans-unit id="c1f9dd12120a54d49e86f3d8be13375c987724d2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Sortkeys(</source>
          <target state="translated">-&amp;gt;Sortkeys(</target>
        </trans-unit>
        <trans-unit id="d589d85ec436baef14dce8d2143c792a949aba0d" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Sparseseen(</source>
          <target state="translated">-&amp;gt;Sparseseen(</target>
        </trans-unit>
        <trans-unit id="0057fcbaafc36dc5c0f396e5d6075530bfac1848" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Terse(</source>
          <target state="translated">-&amp;gt;Terse(</target>
        </trans-unit>
        <trans-unit id="71b97fccb0554a000a087174f590ad69f5d41fc2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Toaster(</source>
          <target state="translated">-&amp;gt;Toaster(</target>
        </trans-unit>
        <trans-unit id="b282f78e8ba680fc5f27fc13dba94b8c3b531e79" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Useperl(</source>
          <target state="translated">-&amp;gt;Useperl(</target>
        </trans-unit>
        <trans-unit id="4c7197d6a5caad4a177ca1b9e2de81de03660a61" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Useqq(</source>
          <target state="translated">-&amp;gt;Useqq(</target>
        </trans-unit>
        <trans-unit id="36470c86321f280aefd62b4ed122aaace7e7a771" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Varname(</source>
          <target state="translated">-&amp;gt;Varname(</target>
        </trans-unit>
        <trans-unit id="fa657bcce0cc7fe5acc50debb5fcfb4b7bdb8fc4" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new().</source>
          <target state="translated">-&amp;gt;new().</target>
        </trans-unit>
        <trans-unit id="2d61ca753759230bedde8cc40a1707eb6fef4cc2" translate="yes" xml:space="preserve">
          <source>-&amp;tau;&amp;omicron;&amp;mu;&amp;omicron;&amp;sigmaf;</source>
          <target state="translated">-&amp;tau;&amp;omicron;&amp;mu;&amp;omicron;&amp;sigmaf;</target>
        </trans-unit>
        <trans-unit id="585f1706ae18bcdc63ca722b491c6df4f0dde510" translate="yes" xml:space="preserve">
          <source>-- see 3.2.2 Alternate Weighting, version 8 of UTS #10</source>
          <target state="translated">-- see 3.2.2 Alternate Weighting, version 8 of UTS #10</target>
        </trans-unit>
        <trans-unit id="3a8cc74f261c3d51571350ca2868bd10ef52769b" translate="yes" xml:space="preserve">
          <source>-- see 3.4 Backward Accents, UTS #10.</source>
          <target state="translated">-- see 3.4 Backward Accents, UTS #10.</target>
        </trans-unit>
        <trans-unit id="07d3a1d428fe3461f8d9c80032441d87278b9654" translate="yes" xml:space="preserve">
          <source>-- see 3.5 Rearrangement, UTS #10.</source>
          <target state="translated">-- see 3.5 Rearrangement, UTS #10.</target>
        </trans-unit>
        <trans-unit id="5ee3edd6f51f1ea7fa47e8f98453c7d17eaea820" translate="yes" xml:space="preserve">
          <source>-- see 3.6 Variable Weighting, UTS #10.</source>
          <target state="translated">-- see 3.6 Variable Weighting, UTS #10.</target>
        </trans-unit>
        <trans-unit id="cd9a420c85ac25af87c2565ef4416f3f6d6ba5b1" translate="yes" xml:space="preserve">
          <source>-- see 3.8 Default Unicode Collation Element Table, UTS #10.</source>
          <target state="translated">-- see 3.8 Default Unicode Collation Element Table, UTS #10.</target>
        </trans-unit>
        <trans-unit id="a697b3f4a09d78b35f6bcaf2e5ac4b9c059bb5f9" translate="yes" xml:space="preserve">
          <source>-- see 3.8.2 Well-Formedness of the DUCET, 4.2 Produce Array, UTS #10.</source>
          <target state="translated">-- see 3.8.2 Well-Formedness of the DUCET, 4.2 Produce Array, UTS #10.</target>
        </trans-unit>
        <trans-unit id="7b4d0507deac646ef7351b3ecb3ba07f748dfa61" translate="yes" xml:space="preserve">
          <source>-- see 4.1 Normalize, UTS #10.</source>
          <target state="translated">-- see 4.1 Normalize, UTS #10.</target>
        </trans-unit>
        <trans-unit id="1cb743acecb2ab375f527cbafc47c0bbe3cabad0" translate="yes" xml:space="preserve">
          <source>-- see 4.3 Form Sort Key, UTS #10.</source>
          <target state="translated">-- see 4.3 Form Sort Key, UTS #10.</target>
        </trans-unit>
        <trans-unit id="cdabeb0028ef19f65abe871e2f9a75ea7690910d" translate="yes" xml:space="preserve">
          <source>-- see 5 Tailoring; 9.1 Allkeys File Format, UTS #10.</source>
          <target state="translated">-- see 5 Tailoring; 9.1 Allkeys File Format, UTS #10.</target>
        </trans-unit>
        <trans-unit id="5974db4d3861eb1b0da28b6b74de30e8c4d8e699" translate="yes" xml:space="preserve">
          <source>-- see 5.1 Parametric Tailoring, UTS #10.</source>
          <target state="translated">-- see 5.1 Parametric Tailoring, UTS #10.</target>
        </trans-unit>
        <trans-unit id="3269e638f6b6a348970d76d447ba7f62ead918d9" translate="yes" xml:space="preserve">
          <source>-- see 5.14 Collation Elements, UTS #35.</source>
          <target state="translated">-- see 5.14 Collation Elements, UTS #35.</target>
        </trans-unit>
        <trans-unit id="ba76558f052a895590fcc20803249a87f4f1a0f2" translate="yes" xml:space="preserve">
          <source>-- see 5.4 Preprocessing, UTS #10.</source>
          <target state="translated">-- see 5.4 Preprocessing, UTS #10.</target>
        </trans-unit>
        <trans-unit id="a41b8036c6ccf65060a4662dca1e11556455fd38" translate="yes" xml:space="preserve">
          <source>-- see 6.3.4 Reducing the Repertoire, UTS #10.</source>
          <target state="translated">-- see 6.3.4 Reducing the Repertoire, UTS #10.</target>
        </trans-unit>
        <trans-unit id="0e79a7c892b3daf587f7a8b3225aabd06c6a3025" translate="yes" xml:space="preserve">
          <source>-- see 6.5 Avoiding Normalization, UTS #10.</source>
          <target state="translated">-- see 6.5 Avoiding Normalization, UTS #10.</target>
        </trans-unit>
        <trans-unit id="1e7a49b0b256e287ad6547d96d0e85e9098bf1e7" translate="yes" xml:space="preserve">
          <source>-- see 6.6 Case Comparisons, UTS #10.</source>
          <target state="translated">-- see 6.6 Case Comparisons, UTS #10.</target>
        </trans-unit>
        <trans-unit id="921de278b720df4682ccde20a8a07d16048240f4" translate="yes" xml:space="preserve">
          <source>-- see 7.1 Derived Collation Elements, UTS #10.</source>
          <target state="translated">-- see 7.1 Derived Collation Elements, UTS #10.</target>
        </trans-unit>
        <trans-unit id="e6189b5fe4e700972d5d0c46522002017f4b74b4" translate="yes" xml:space="preserve">
          <source>-- see 7.1.1 Handling Ill-Formed Code Unit Sequences, UTS #10.</source>
          <target state="translated">-- see 7.1.1 Handling Ill-Formed Code Unit Sequences, UTS #10.</target>
        </trans-unit>
        <trans-unit id="d9b914c66e4ecd398f8a0454a4abbd3845ef4cdf" translate="yes" xml:space="preserve">
          <source>-- see 7.1.4 Trailing Weights, UTS #10.</source>
          <target state="translated">-- see 7.1.4 Trailing Weights, UTS #10.</target>
        </trans-unit>
        <trans-unit id="152aade877325529ccd0de6317a273f029c69056" translate="yes" xml:space="preserve">
          <source>-- see 7.2 Tertiary Weight Table, UTS #10.</source>
          <target state="translated">-- see 7.2 Tertiary Weight Table, UTS #10.</target>
        </trans-unit>
        <trans-unit id="800fd8691cb7a6b6fe172573590fed9e2fc75f8f" translate="yes" xml:space="preserve">
          <source>-- see A.3 Deterministic Comparison, UTS #10.</source>
          <target state="translated">-- see A.3 Deterministic Comparison, UTS #10.</target>
        </trans-unit>
        <trans-unit id="70594be556b0b2420c5652817454d7573669880a" translate="yes" xml:space="preserve">
          <source>-- see suppress contractions in 5.14.11 Special-Purpose Commands, UTS #35 (LDML).</source>
          <target state="translated">-- see suppress contractions in 5.14.11 Special-Purpose Commands, UTS #35 (LDML).</target>
        </trans-unit>
        <trans-unit id="0a3b88931de0f8a1585b737f1744b827120ed7e3" translate="yes" xml:space="preserve">
          <source>-- they are NOT used for</source>
          <target state="translated">-- they are NOT used for</target>
        </trans-unit>
        <trans-unit id="afe09f38de5b8547467dba38b00faf6ea82e1825" translate="yes" xml:space="preserve">
          <source>-----8&amp;lt;-----/usr/local/bin/yacc-----8&amp;lt;----- #! /usr/bin/sh</source>
          <target state="translated">-----8&amp;lt;-----/usr/local/bin/yacc-----8&amp;lt;----- #! /usr/bin/sh</target>
        </trans-unit>
        <trans-unit id="4c145d5d792c0de7497818416a3583ddc4ef3aed" translate="yes" xml:space="preserve">
          <source>--exec</source>
          <target state="translated">--exec</target>
        </trans-unit>
        <trans-unit id="1080c2b75030b9db6089441c365cd2e618af5b72" translate="yes" xml:space="preserve">
          <source>--help and --version</source>
          <target state="translated">--help and --version</target>
        </trans-unit>
        <trans-unit id="de00e86b4b1adf7de42f72b04311752a53fdd076" translate="yes" xml:space="preserve">
          <source>--merge</source>
          <target state="translated">--merge</target>
        </trans-unit>
        <trans-unit id="85bf17ebe87204a1c560eec7e29e5131edbd78fb" translate="yes" xml:space="preserve">
          <source>--no dangling statements allowed. If you want to write conditionals without curly brackets, there are several other ways to do it. The following all do the same thing:</source>
          <target state="translated">--no dangling statements allowed. If you want to write conditionals without curly brackets, there are several other ways to do it. The following all do the same thing:</target>
        </trans-unit>
        <trans-unit id="180267a3a01343dd30c8a524372d694ddfbee330" translate="yes" xml:space="preserve">
          <source>--or--</source>
          <target state="translated">--or--</target>
        </trans-unit>
        <trans-unit id="5f9031d8f64ccf1adae3a5bad83b3f0e15a74b6b" translate="yes" xml:space="preserve">
          <source>--rules</source>
          <target state="translated">--rules</target>
        </trans-unit>
        <trans-unit id="1c4f9522981e50119882c53cf2d78fbc6dacf356" translate="yes" xml:space="preserve">
          <source>--rules Glob-style pattern matching</source>
          <target state="translated">--rules Glob-style pattern matching</target>
        </trans-unit>
        <trans-unit id="b8de924ed5d19fde35d5385ab4502ea63fe9053a" translate="yes" xml:space="preserve">
          <source>--rules examples</source>
          <target state="translated">--rules examples</target>
        </trans-unit>
        <trans-unit id="b82e47ebb1972aa0b6e7d7ff1370d40055cb198c" translate="yes" xml:space="preserve">
          <source>--rules resolution</source>
          <target state="translated">--rules resolution</target>
        </trans-unit>
        <trans-unit id="c60ab85f89bb24a2195d98fc15206ae225307de2" translate="yes" xml:space="preserve">
          <source>--state</source>
          <target state="translated">--state</target>
        </trans-unit>
        <trans-unit id="f102bd60a1627e203f05c569bd70be2475447fb4" translate="yes" xml:space="preserve">
          <source>--trap</source>
          <target state="translated">--trap</target>
        </trans-unit>
        <trans-unit id="6ec1cf6284eb5ed1401a0fa4abb8cf38b2067e4a" translate="yes" xml:space="preserve">
          <source>-1 or +1 is returned if the shorter string was identical to the start of the longer string. -2 or +2 is returned if there was a difference between characters within the strings.</source>
          <target state="translated">-1 or +1 is returned if the shorter string was identical to the start of the longer string. -2 or +2 is returned if there was a difference between characters within the strings.</target>
        </trans-unit>
        <trans-unit id="ad9aee0e02aa7df5696f88c33c3f5b0003d54711" translate="yes" xml:space="preserve">
          <source>-D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="332ec780f224383a9f30f4660fe42ecd1206e248" translate="yes" xml:space="preserve">
          <source>-T</source>
          <target state="translated">-T</target>
        </trans-unit>
        <trans-unit id="66445fecf3db004bb006e432cfd80e60057aed1e" translate="yes" xml:space="preserve">
          <source>-Unicode bytes is not necessarily obvious. Probably only the first of these is what you want:</source>
          <target state="translated">-Unicode bytes is not necessarily obvious. Probably only the first of these is what you want:</target>
        </trans-unit>
        <trans-unit id="7241f5aad8466e538eb18ce72bac37865cce783f" translate="yes" xml:space="preserve">
          <source>-X</source>
          <target state="translated">-X</target>
        </trans-unit>
        <trans-unit id="f02421666194942fbfd487a0b89bc8e62902d2fe" translate="yes" xml:space="preserve">
          <source>-X DIRHANDLE</source>
          <target state="translated">-X DIRHANDLE</target>
        </trans-unit>
        <trans-unit id="2ab1b601b35fe8f8841c979e875fa9193b77c019" translate="yes" xml:space="preserve">
          <source>-X EXPR</source>
          <target state="translated">-X EXPR</target>
        </trans-unit>
        <trans-unit id="bc19678a7061febac0619b2e971988a6337acd07" translate="yes" xml:space="preserve">
          <source>-X FILEHANDLE</source>
          <target state="translated">-X FILEHANDLE</target>
        </trans-unit>
        <trans-unit id="f1141527e901e4fc62f73312648aa01ec2a552d5" translate="yes" xml:space="preserve">
          <source>-axis is &lt;b&gt;phi&lt;/b&gt;, also known as the</source>
          <target state="translated">-axis is &lt;b&gt;phi&lt;/b&gt;, also known as the</target>
        </trans-unit>
        <trans-unit id="60c94d22393c772d0f184d991bea821b935b05c4" translate="yes" xml:space="preserve">
          <source>-axis) is &lt;b&gt;theta&lt;/b&gt;, also known as the</source>
          <target state="translated">-axis) is &lt;b&gt;theta&lt;/b&gt;, also known as the</target>
        </trans-unit>
        <trans-unit id="a9dbc90b755d775e7f6bcfa29813702306e16afa" translate="yes" xml:space="preserve">
          <source>-based) logarithm of the numerical argument, see &lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;.</source>
          <target state="translated">-based) logarithm of the numerical argument, see &lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f7abb535a243486c680796806de8db55fd67e96f" translate="yes" xml:space="preserve">
          <source>-based) of the numerical argument, see &lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;.</source>
          <target state="translated">-based) of the numerical argument, see &lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="94a878f037fdf80e6f7650a48c7b4019c798e1bf" translate="yes" xml:space="preserve">
          <source>-coordinates.</source>
          <target state="translated">-coordinates.</target>
        </trans-unit>
        <trans-unit id="ae22cd44cab421b74b9cb1b713b21791222034bd" translate="yes" xml:space="preserve">
          <source>-equivalent suffix.</source>
          <target state="translated">-equivalent suffix.</target>
        </trans-unit>
        <trans-unit id="f9734ee333a629165fa782b725db07885fb85d5a" translate="yes" xml:space="preserve">
          <source>-expansion done.</source>
          <target state="translated">-expansion done.</target>
        </trans-unit>
        <trans-unit id="814937af05964f89600befa6ae3bfe386bb151b0" translate="yes" xml:space="preserve">
          <source>-ish meanings:</source>
          <target state="translated">-ish meanings:</target>
        </trans-unit>
        <trans-unit id="d913657d8a33916405c4c67553ab3a2992d6c95e" translate="yes" xml:space="preserve">
          <source>-like construct is created by a pair of &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; macros (see &lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;Returning a Scalar in perlcall&lt;/a&gt;). Such a construct may be created specially for some important localized task, or an existing one (like boundaries of enclosing Perl subroutine/block, or an existing pair for freeing TMPs) may be used. (In the second case the overhead of additional localization must be almost negligible.) Note that any XSUB is automatically enclosed in an &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; pair.</source>
          <target state="translated">-like construct is created by a pair of &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; macros (see &lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;Returning a Scalar in perlcall&lt;/a&gt;). Such a construct may be created specially for some important localized task, or an existing one (like boundaries of enclosing Perl subroutine/block, or an existing pair for freeing TMPs) may be used. (In the second case the overhead of additional localization must be almost negligible.) Note that any XSUB is automatically enclosed in an &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; pair.</target>
        </trans-unit>
        <trans-unit id="a98c9dc82b0940ee66ebaf6b3ab25db4d7a0b7ee" translate="yes" xml:space="preserve">
          <source>-lperl</source>
          <target state="translated">-lperl</target>
        </trans-unit>
        <trans-unit id="00a354ab6ba325dfea1f93fc702984e336b57ca9" translate="yes" xml:space="preserve">
          <source>-pi</source>
          <target state="translated">-pi</target>
        </trans-unit>
        <trans-unit id="d0ab9098221f275f405a3db51c04c836d2cd668f" translate="yes" xml:space="preserve">
          <source>-plane (around the</source>
          <target state="translated">-plane (around the</target>
        </trans-unit>
        <trans-unit id="fe06637685c925d5eec8bbd543cd92c006d957fa" translate="yes" xml:space="preserve">
          <source>-removal would give you. If you want to do this kind of processing, you probably want &lt;code&gt;Cwd&lt;/code&gt; 's &lt;code&gt;realpath()&lt;/code&gt; function to actually traverse the filesystem cleaning up paths like this.</source>
          <target state="translated">-removal would give you. If you want to do this kind of processing, you probably want &lt;code&gt;Cwd&lt;/code&gt; 's &lt;code&gt;realpath()&lt;/code&gt; function to actually traverse the filesystem cleaning up paths like this.</target>
        </trans-unit>
        <trans-unit id="1a8854d13cc7eda216c70c1e5b536a20cbd2d0a9" translate="yes" xml:space="preserve">
          <source>-style format specifier (without the leading '%') to use to print the times. It defaults to '5.2f'.</source>
          <target state="translated">-style format specifier (without the leading '%') to use to print the times. It defaults to '5.2f'.</target>
        </trans-unit>
        <trans-unit id="39757b603166b52e1a1e2021e629c21418eee11a" translate="yes" xml:space="preserve">
          <source>-th subpattern, or undef if the subpattern did not match.</source>
          <target state="translated">-th subpattern, or undef if the subpattern did not match.</target>
        </trans-unit>
        <trans-unit id="aaf1e4f6a10d49a5901590bb3b8c0dba1ef3ca8c" translate="yes" xml:space="preserve">
          <source>-utilities on path manually. They are installed in &lt;code&gt;$prefix/bin&lt;/code&gt; , here &lt;code&gt;$prefix&lt;/code&gt; is what you gave to</source>
          <target state="translated">-utilities on path manually. They are installed in &lt;code&gt;$prefix/bin&lt;/code&gt; , here &lt;code&gt;$prefix&lt;/code&gt; is what you gave to</target>
        </trans-unit>
        <trans-unit id="3a52ce780950d4d969792a2559cd519d7ee8c727" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>
        </trans-unit>
        <trans-unit id="46b9ed05b810c35c030b14df53138c9f8fb2464a" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;&lt;a href=&quot;../functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">. (Equivalent to &lt;code&gt;&lt;a href=&quot;../functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="b8d281ef9104c2b48d48df2a7cf5ddced0cf7e72" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;). For example:</source>
          <target state="translated">. (Equivalent to &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;). For example:</target>
        </trans-unit>
        <trans-unit id="694f35049a7ec5dc2b360d57bd881a28fa07da34" translate="yes" xml:space="preserve">
          <source>. (For the cleanup at program exit when the CLEANUP flag is set, this happens automatically.)</source>
          <target state="translated">. (For the cleanup at program exit when the CLEANUP flag is set, this happens automatically.)</target>
        </trans-unit>
        <trans-unit id="15693b683bd6294eb09618d3328be4ea6360e2ed" translate="yes" xml:space="preserve">
          <source>. (If you interrupt it, you would better reset &lt;code&gt;LineInfo&lt;/code&gt; to something &quot;interactive&quot;!)</source>
          <target state="translated">. (If you interrupt it, you would better reset &lt;code&gt;LineInfo&lt;/code&gt; to something &quot;interactive&quot;!)</target>
        </trans-unit>
        <trans-unit id="181e9a15b21b5b303a16988869863732a3c74ac2" translate="yes" xml:space="preserve">
          <source>. (If you interrupt it, you'd better reset &lt;code&gt;LineInfo&lt;/code&gt; to</source>
          <target state="translated">. (If you interrupt it, you'd better reset &lt;code&gt;LineInfo&lt;/code&gt; to</target>
        </trans-unit>
        <trans-unit id="4f2dc4447c7e1cbcca5316cceaa252e9049281ff" translate="yes" xml:space="preserve">
          <source>. (Perhaps, in retrospect, the &lt;code&gt;lib&lt;/code&gt; style should never have been supported, but it did seem like a nice idea at the time.)</source>
          <target state="translated">. (Perhaps, in retrospect, the &lt;code&gt;lib&lt;/code&gt; style should never have been supported, but it did seem like a nice idea at the time.)</target>
        </trans-unit>
        <trans-unit id="9f0b8aeca7daf268ae4d3b7f58d2547cb18964da" translate="yes" xml:space="preserve">
          <source>. (Setting BEGINLIBPATH to just &lt;code&gt;.&lt;/code&gt; is ignored by the OS/2 kernel.)</source>
          <target state="translated">. (Setting BEGINLIBPATH to just &lt;code&gt;.&lt;/code&gt; is ignored by the OS/2 kernel.)</target>
        </trans-unit>
        <trans-unit id="ebbcb028023ba5ec4bf990fcf6eb37768723056e" translate="yes" xml:space="preserve">
          <source>. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="cbf29a1e7711e856247e88a22d78403cd4097d96" translate="yes" xml:space="preserve">
          <source>. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="bc82a4dc120028594b84107495cbc0deaebe016c" translate="yes" xml:space="preserve">
          <source>. (Yes, Virginia, there &lt;b&gt;is&lt;/b&gt; a YACC grammar for Perl!) The job of the parser is to take your code and &quot;understand&quot; it, splitting it into sentences, deciding which operands go with which operators and so on.</source>
          <target state="translated">. (Yes, Virginia, there &lt;b&gt;is&lt;/b&gt; a YACC grammar for Perl!) The job of the parser is to take your code and &quot;understand&quot; it, splitting it into sentences, deciding which operands go with which operators and so on.</target>
        </trans-unit>
        <trans-unit id="cac2ef42eac4291ce9782faa9a407fa44d35265d" translate="yes" xml:space="preserve">
          <source>. (or</source>
          <target state="translated">. (or</target>
        </trans-unit>
        <trans-unit id="236152725d137990a457e4cd09f9fd7d5e6c1e40" translate="yes" xml:space="preserve">
          <source>. &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; and &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt; explain the</source>
          <target state="translated">. &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; and &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt; explain the</target>
        </trans-unit>
        <trans-unit id="0b97909f09c9f763ca3dc7911d0df0016488e3ca" translate="yes" xml:space="preserve">
          <source>. &lt;b&gt;It is especially important to do this in modules to avoid penalizing all applications which use them.&lt;/b&gt;</source>
          <target state="translated">. &lt;b&gt;It is especially important to do this in modules to avoid penalizing all applications which use them.&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c84bd932de16eb29265e3c78e34c63425be61866" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;$&lt;/code&gt; is a shell prompt.</source>
          <target state="translated">. &lt;code&gt;$&lt;/code&gt; is a shell prompt.</target>
        </trans-unit>
        <trans-unit id="a872501bd8eee376a90e33fd1da5d7ad22e00ebc" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;$Config{d_setlocale}&lt;/code&gt; is &lt;code&gt;'define'&lt;/code&gt; on OS/390 or z/OS.</source>
          <target state="translated">. &lt;code&gt;$Config{d_setlocale}&lt;/code&gt; is &lt;code&gt;'define'&lt;/code&gt; on OS/390 or z/OS.</target>
        </trans-unit>
        <trans-unit id="689f2d81347c4e95450de6a6b67d57924dc6366c" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;OUTLIST&lt;/code&gt; /&lt;code&gt;OUT&lt;/code&gt; keywords indicate that the C subroutine does not inspect the memory pointed by this parameter, but will write through this pointer to provide additional return values.</source>
          <target state="translated">. &lt;code&gt;OUTLIST&lt;/code&gt; /&lt;code&gt;OUT&lt;/code&gt; keywords indicate that the C subroutine does not inspect the memory pointed by this parameter, but will write through this pointer to provide additional return values.</target>
        </trans-unit>
        <trans-unit id="88901232fc748fdea60269bc910d226f97e1cb4d" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;Perl_runops_debug&lt;/code&gt; is used with DEBUGGING and &lt;code&gt;Perl_runops_standard&lt;/code&gt; is used otherwise. For fine control over the execution of the compile tree it is possible to provide your own runops function.</source>
          <target state="translated">. &lt;code&gt;Perl_runops_debug&lt;/code&gt; is used with DEBUGGING and &lt;code&gt;Perl_runops_standard&lt;/code&gt; is used otherwise. For fine control over the execution of the compile tree it is possible to provide your own runops function.</target>
        </trans-unit>
        <trans-unit id="84c7eee973f32ff4607b490bd51cf94d26808c4a" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;STDIN =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; turns the I/O transcoding completely off for that filehandle.</source>
          <target state="translated">. &lt;code&gt;STDIN =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; turns the I/O transcoding completely off for that filehandle.</target>
        </trans-unit>
        <trans-unit id="22e9affa2bbc7ae84004e12265378a617db34fa8" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;special&lt;/code&gt; (usually, but not always, a multicharacter mapping), is tried first.</source>
          <target state="translated">. &lt;code&gt;special&lt;/code&gt; (usually, but not always, a multicharacter mapping), is tried first.</target>
        </trans-unit>
        <trans-unit id="34b205465f826019a73312394da64a5166d0e847" translate="yes" xml:space="preserve">
          <source>. A &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; just gives temporary values to global (meaning package) variables. It does</source>
          <target state="translated">. A &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; just gives temporary values to global (meaning package) variables. It does</target>
        </trans-unit>
        <trans-unit id="20d7984adc37598924d34162f803580d6f8e4473" translate="yes" xml:space="preserve">
          <source>. A character class allows a set of possible characters, rather than just a single character, to match at a particular point in a regexp. You can define your own custom character classes. These are denoted by brackets &lt;code&gt;[...]&lt;/code&gt; , with the set of characters to be possibly matched inside. Here are some examples:</source>
          <target state="translated">. A character class allows a set of possible characters, rather than just a single character, to match at a particular point in a regexp. You can define your own custom character classes. These are denoted by brackets &lt;code&gt;[...]&lt;/code&gt; , with the set of characters to be possibly matched inside. Here are some examples:</target>
        </trans-unit>
        <trans-unit id="b629a81173e8b0555a45f0a8eab5759b801c2a12" translate="yes" xml:space="preserve">
          <source>. A code point is essentially the position of the character within the set of all possible Unicode characters, and thus in Perl, the term</source>
          <target state="translated">. A code point is essentially the position of the character within the set of all possible Unicode characters, and thus in Perl, the term</target>
        </trans-unit>
        <trans-unit id="6967b877b0a6419ec120bcf48175f4179b1d1c97" translate="yes" xml:space="preserve">
          <source>. A module can install custom translations (inside the scope which &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;s the module) with the following magic incantation:</source>
          <target state="translated">. A module can install custom translations (inside the scope which &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;s the module) with the following magic incantation:</target>
        </trans-unit>
        <trans-unit id="654c9133d804ea9801de6c352e63b0d752c4c7a2" translate="yes" xml:space="preserve">
          <source>. A source stream is created when the Perl parser opens a file, it continues to exist as the source code is read into memory, and it is destroyed when Perl is finished parsing the file. If the parser encounters a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement in a source stream, a new and distinct stream is created just for that file.</source>
          <target state="translated">. A source stream is created when the Perl parser opens a file, it continues to exist as the source code is read into memory, and it is destroyed when Perl is finished parsing the file. If the parser encounters a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement in a source stream, a new and distinct stream is created just for that file.</target>
        </trans-unit>
        <trans-unit id="1be7e388b24fed423d29f693852a90533c3dce34" translate="yes" xml:space="preserve">
          <source>. All regex engines must be able to correctly build such a structure in their &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; routine.</source>
          <target state="translated">. All regex engines must be able to correctly build such a structure in their &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; routine.</target>
        </trans-unit>
        <trans-unit id="0eb8ffacada74d7b0728dd1325a7888884aee218" translate="yes" xml:space="preserve">
          <source>. All the other functions are fairly simple wrappers which make it easier to call Perl subroutines in special cases. At the end of the day they will all call</source>
          <target state="translated">. All the other functions are fairly simple wrappers which make it easier to call Perl subroutines in special cases. At the end of the day they will all call</target>
        </trans-unit>
        <trans-unit id="27da16d87cc57fa070324d863cd8cedd53811405" translate="yes" xml:space="preserve">
          <source>. All versions of Berkeley DB are available there.</source>
          <target state="translated">. All versions of Berkeley DB are available there.</target>
        </trans-unit>
        <trans-unit id="233b57b3e77bae0ead5a8a30677ef0a77a1edf99" translate="yes" xml:space="preserve">
          <source>. And since the extension DLLs link with the Perl DLL, extension DLLs for older versions would load an older Perl DLL, and would most probably segfault (since the data in this DLL is not properly initialized).</source>
          <target state="translated">. And since the extension DLLs link with the Perl DLL, extension DLLs for older versions would load an older Perl DLL, and would most probably segfault (since the data in this DLL is not properly initialized).</target>
        </trans-unit>
        <trans-unit id="de259bd11ae330f9c68f383ed85ba6c2e159b450" translate="yes" xml:space="preserve">
          <source>. Any XS code should be in</source>
          <target state="translated">. Any XS code should be in</target>
        </trans-unit>
        <trans-unit id="75671be154b9c3d8b51b585074c5b9061967b6d3" translate="yes" xml:space="preserve">
          <source>. Any type of bracket not in the delimiter list is treated as an ordinary character.</source>
          <target state="translated">. Any type of bracket not in the delimiter list is treated as an ordinary character.</target>
        </trans-unit>
        <trans-unit id="a6bdcf75e96f17cc2c4c3a8be735b514fb9c36ef" translate="yes" xml:space="preserve">
          <source>. As a binary operator, it has two children: the add operator, providing the result of &lt;code&gt;$b+$c&lt;/code&gt; , is uppermost on line 5, and the left hand side is on line 10.</source>
          <target state="translated">. As a binary operator, it has two children: the add operator, providing the result of &lt;code&gt;$b+$c&lt;/code&gt; , is uppermost on line 5, and the left hand side is on line 10.</target>
        </trans-unit>
        <trans-unit id="53d4b5ccec1621f068b34a98df82654fe06d0665" translate="yes" xml:space="preserve">
          <source>. As a corollary, though the actual tree contains more nodes than our simplified example, the execution order is the same as in our example.</source>
          <target state="translated">. As a corollary, though the actual tree contains more nodes than our simplified example, the execution order is the same as in our example.</target>
        </trans-unit>
        <trans-unit id="c525726c99728c892ca019d38a86d797ed1a27e8" translate="yes" xml:space="preserve">
          <source>. As yet there is nothing useful you can do with the object at the perl level.</source>
          <target state="translated">. As yet there is nothing useful you can do with the object at the perl level.</target>
        </trans-unit>
        <trans-unit id="3a1ba0a96e2cd6c9d394a4472d471f9ff7cd31bc" translate="yes" xml:space="preserve">
          <source>. Assuming such an entry is found, various things then happen, depending on the value found:</source>
          <target state="translated">. Assuming such an entry is found, various things then happen, depending on the value found:</target>
        </trans-unit>
        <trans-unit id="da93ec95ac544504e474beee8e0bb9e569ea1865" translate="yes" xml:space="preserve">
          <source>. Basic blocks are sections of code that are entered only in the beginning and exited only at the end. For example, a conditional jump starts a basic block. Basic block profiling usually works by</source>
          <target state="translated">. Basic blocks are sections of code that are entered only in the beginning and exited only at the end. For example, a conditional jump starts a basic block. Basic block profiling usually works by</target>
        </trans-unit>
        <trans-unit id="922dde6fe40fcfb9ac9ff6d274634cfcd6f24ba2" translate="yes" xml:space="preserve">
          <source>. Because we want the program to continue after detecting this error, it is essential that the stack be tidied up by removing the</source>
          <target state="translated">. Because we want the program to continue after detecting this error, it is essential that the stack be tidied up by removing the</target>
        </trans-unit>
        <trans-unit id="38b8a4a88265debcef2bc8e73467237aa68e829c" translate="yes" xml:space="preserve">
          <source>. Both &lt;code&gt;sub1()&lt;/code&gt; and &lt;code&gt;sub2()&lt;/code&gt; access the global variable &lt;code&gt;$x&lt;/code&gt; , once to read and once to write. Depending on factors ranging from your thread implementation's scheduling algorithm to the phase of the moon, &lt;code&gt;$x&lt;/code&gt; can be 2 or 3.</source>
          <target state="translated">. Both &lt;code&gt;sub1()&lt;/code&gt; and &lt;code&gt;sub2()&lt;/code&gt; access the global variable &lt;code&gt;$x&lt;/code&gt; , once to read and once to write. Depending on factors ranging from your thread implementation's scheduling algorithm to the phase of the moon, &lt;code&gt;$x&lt;/code&gt; can be 2 or 3.</target>
        </trans-unit>
        <trans-unit id="998a439013a873f26870288508560a8fdb5f11eb" translate="yes" xml:space="preserve">
          <source>. But because of the nature of Macintosh paths, some additional possibilities are allowed to make using this routine give reasonable results for some common situations. In other words, you are also allowed to concatenate</source>
          <target state="translated">. But because of the nature of Macintosh paths, some additional possibilities are allowed to make using this routine give reasonable results for some common situations. In other words, you are also allowed to concatenate</target>
        </trans-unit>
        <trans-unit id="bd199e23140531c836914088d48f55487bf7e65c" translate="yes" xml:space="preserve">
          <source>. Can be used to make sure that the UTF-8 flag is on, so that &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; work as Unicode on strings containing characters in the range 0x80-0xFF (on ASCII and derivatives).</source>
          <target state="translated">. Can be used to make sure that the UTF-8 flag is on, so that &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; work as Unicode on strings containing characters in the range 0x80-0xFF (on ASCII and derivatives).</target>
        </trans-unit>
        <trans-unit id="7b8d29b7aaa3a46be9be50380ab1ce3e867db600" translate="yes" xml:space="preserve">
          <source>. Chapters and page numbers are given using the following editions:</source>
          <target state="translated">. Chapters and page numbers are given using the following editions:</target>
        </trans-unit>
        <trans-unit id="995d80ebe5e9c631b25033fd42a932b6fa61b6b7" translate="yes" xml:space="preserve">
          <source>. Child subroutines have &lt;code&gt;_&lt;/code&gt; and the name length appended, so constants with 10 character names would be in &lt;code&gt;constant_10&lt;/code&gt; with the default</source>
          <target state="translated">. Child subroutines have &lt;code&gt;_&lt;/code&gt; and the name length appended, so constants with 10 character names would be in &lt;code&gt;constant_10&lt;/code&gt; with the default</target>
        </trans-unit>
        <trans-unit id="c63971449e6c29f2a08f74ad23883b2558d36606" translate="yes" xml:space="preserve">
          <source>. Choice of American/British/Other spellings is left as an exercise for the author of each bit of documentation. When patching documentation, try to emulate the documentation around you, rather than changing the existing prose.</source>
          <target state="translated">. Choice of American/British/Other spellings is left as an exercise for the author of each bit of documentation. When patching documentation, try to emulate the documentation around you, rather than changing the existing prose.</target>
        </trans-unit>
        <trans-unit id="58ab3092f216e58d0241856d21b4fdcc0acc1fa6" translate="yes" xml:space="preserve">
          <source>. Common examples are &lt;code&gt;\t&lt;/code&gt; for a tab, &lt;code&gt;\n&lt;/code&gt; for a newline, &lt;code&gt;\r&lt;/code&gt; for a carriage return and &lt;code&gt;\a&lt;/code&gt; for a bell (or alert). If your string is better thought of as a sequence of arbitrary bytes, the octal escape sequence, e.g., &lt;code&gt;\033&lt;/code&gt; , or hexadecimal escape sequence, e.g., &lt;code&gt;\x1B&lt;/code&gt; may be a more natural representation for your bytes. Here are some examples of escapes:</source>
          <target state="translated">. Common examples are &lt;code&gt;\t&lt;/code&gt; for a tab, &lt;code&gt;\n&lt;/code&gt; for a newline, &lt;code&gt;\r&lt;/code&gt; for a carriage return and &lt;code&gt;\a&lt;/code&gt; for a bell (or alert). If your string is better thought of as a sequence of arbitrary bytes, the octal escape sequence, e.g., &lt;code&gt;\033&lt;/code&gt; , or hexadecimal escape sequence, e.g., &lt;code&gt;\x1B&lt;/code&gt; may be a more natural representation for your bytes. Here are some examples of escapes:</target>
        </trans-unit>
        <trans-unit id="3d7e30195a0de047a3242c04e44600623627b182" translate="yes" xml:space="preserve">
          <source>. Copy or link</source>
          <target state="translated">. Copy or link</target>
        </trans-unit>
        <trans-unit id="79825b16c77c06b44977118fac4eea014741e249" translate="yes" xml:space="preserve">
          <source>. Currently OS/2 support of threads is very preliminary.</source>
          <target state="translated">. Currently OS/2 support of threads is very preliminary.</target>
        </trans-unit>
        <trans-unit id="135c9f2f36a34ddc0a2893c23665c762d2104afc" translate="yes" xml:space="preserve">
          <source>. Currently the maximum possible number of distinct regops is restricted to 256, with about a quarter already used.</source>
          <target state="translated">. Currently the maximum possible number of distinct regops is restricted to 256, with about a quarter already used.</target>
        </trans-unit>
        <trans-unit id="f5a874263e45933953bf0ed324a58df137c7e708" translate="yes" xml:space="preserve">
          <source>. Currently, there are only two styles: &lt;code&gt;lib&lt;/code&gt; and</source>
          <target state="translated">. Currently, there are only two styles: &lt;code&gt;lib&lt;/code&gt; and</target>
        </trans-unit>
        <trans-unit id="53e5505050f1982d7363ce9cde826d9f92f57a58" translate="yes" xml:space="preserve">
          <source>. Decoding will terminate when $terminator (a string) appears in output.</source>
          <target state="translated">. Decoding will terminate when $terminator (a string) appears in output.</target>
        </trans-unit>
        <trans-unit id="59c539a141527ad47946cca8b46d791f7d164400" translate="yes" xml:space="preserve">
          <source>. Do not disturb that installation unless you really know what you are doing. If you remove the perl supplied with the OS, you will render some bits of your system inoperable. If you wish to install a newer version of perl, install it under a different prefix from /usr/perl5. Common prefixes to use are /usr/local and /opt/perl.</source>
          <target state="translated">. Do not disturb that installation unless you really know what you are doing. If you remove the perl supplied with the OS, you will render some bits of your system inoperable. If you wish to install a newer version of perl, install it under a different prefix from /usr/perl5. Common prefixes to use are /usr/local and /opt/perl.</target>
        </trans-unit>
        <trans-unit id="93b36a13a574d58a76b40f626c241af718c19914" translate="yes" xml:space="preserve">
          <source>. Don't use them in production code. Yet.</source>
          <target state="translated">. Don't use them in production code. Yet.</target>
        </trans-unit>
        <trans-unit id="7fd37bab10468d9938f078309153e9437be5450a" translate="yes" xml:space="preserve">
          <source>. E.g.</source>
          <target state="translated">. E.g.</target>
        </trans-unit>
        <trans-unit id="25ce36fbbb17f8d1b0a4109d1371fa2f34186024" translate="yes" xml:space="preserve">
          <source>. Each has at least four hexdigits.</source>
          <target state="translated">. Each has at least four hexdigits.</target>
        </trans-unit>
        <trans-unit id="b4404b6be911fb9ccd359c1128f3d94cffa4c329" translate="yes" xml:space="preserve">
          <source>. Each has at least four hexdigits. The codes may be preceded by a word enclosed in angle brackets, then a space, like &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt; , giving the type of decomposition</source>
          <target state="translated">. Each has at least four hexdigits. The codes may be preceded by a word enclosed in angle brackets, then a space, like &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt; , giving the type of decomposition</target>
        </trans-unit>
        <trans-unit id="63141e3b2c36400b64267234149999ae2c55ef9a" translate="yes" xml:space="preserve">
          <source>. Either because it doesn't make sense to back-port that part of the API, or simply because it hasn't been implemented yet. Patches welcome!</source>
          <target state="translated">. Either because it doesn't make sense to back-port that part of the API, or simply because it hasn't been implemented yet. Patches welcome!</target>
        </trans-unit>
        <trans-unit id="103da34daa28d7627bfd7c2b3ec90e61135c836c" translate="yes" xml:space="preserve">
          <source>. Finally, the &quot;.&quot; metacharacter matches any character except &quot;\n&quot; (unless you use &lt;code&gt;/s&lt;/code&gt;).</source>
          <target state="translated">. Finally, the &quot;.&quot; metacharacter matches any character except &quot;\n&quot; (unless you use &lt;code&gt;/s&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="b3d2c0dfaacb26c7f33418797db935878bbdde14" translate="yes" xml:space="preserve">
          <source>. For example,</source>
          <target state="translated">. For example,</target>
        </trans-unit>
        <trans-unit id="740611fcdc6870a843c2364c8e58c7ed97b112e4" translate="yes" xml:space="preserve">
          <source>. For example, a Korean Hangul syllable is considered a single logical character, but most often consists of three actual Unicode characters: a leading consonant followed by an interior vowel followed by a trailing consonant.</source>
          <target state="translated">. For example, a Korean Hangul syllable is considered a single logical character, but most often consists of three actual Unicode characters: a leading consonant followed by an interior vowel followed by a trailing consonant.</target>
        </trans-unit>
        <trans-unit id="042727f423f9fa6f93e1e3706fb37670c040c890" translate="yes" xml:space="preserve">
          <source>. For example, if your code would normally go into</source>
          <target state="translated">. For example, if your code would normally go into</target>
        </trans-unit>
        <trans-unit id="4f3f25bc941622e7175e3969043f856eeb61133e" translate="yes" xml:space="preserve">
          <source>. For example, they may crash the Perl interpreter during execution, or may dump core on termination. Depending on the module and the requirements of your application, it may be possible to work around such difficulties.</source>
          <target state="translated">. For example, they may crash the Perl interpreter during execution, or may dump core on termination. Depending on the module and the requirements of your application, it may be possible to work around such difficulties.</target>
        </trans-unit>
        <trans-unit id="b17ecac96b1adb18dd520ee9c0b9bae11aca3ab3" translate="yes" xml:space="preserve">
          <source>. For example:</source>
          <target state="translated">. For example:</target>
        </trans-unit>
        <trans-unit id="2fddca2af68b08afcb09b50d2195be9684be0734" translate="yes" xml:space="preserve">
          <source>. For exploring Unicode character names and character properties, see its</source>
          <target state="translated">. For exploring Unicode character names and character properties, see its</target>
        </trans-unit>
        <trans-unit id="547c378c2449b9e81e8aa82ca93843bb7c621101" translate="yes" xml:space="preserve">
          <source>. For other data types, or to examine return values, you'll need to manipulate the Perl stack. That's demonstrated in &lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;Fiddling with the Perl stack from your C program&lt;/a&gt;.</source>
          <target state="translated">. For other data types, or to examine return values, you'll need to manipulate the Perl stack. That's demonstrated in &lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;Fiddling with the Perl stack from your C program&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9acfc198f0b2223d41f4211f848b117ef3bae556" translate="yes" xml:space="preserve">
          <source>. FreeBSD 7 and earlier has a bug where either approach sometimes returns an incorrect value (see &lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&lt;/a&gt; ). In these cases perl will fall back to the old behaviour of using C's argv[0] value for &lt;code&gt;$^X&lt;/code&gt; .</source>
          <target state="translated">. FreeBSD 7 and earlier has a bug where either approach sometimes returns an incorrect value (see &lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&lt;/a&gt; ). In these cases perl will fall back to the old behaviour of using C's argv[0] value for &lt;code&gt;$^X&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5f2b60383e9beeed5eccc01696d85bb58945bce4" translate="yes" xml:space="preserve">
          <source>. Given the amount of time between releases of Perl the version that ships with Perl is quite likely to be out of date, so the most recent version can always be found on CPAN (see &lt;a href=&quot;perlmodlib#CPAN&quot;&gt;CPAN in perlmodlib&lt;/a&gt; for details), in the directory</source>
          <target state="translated">. Given the amount of time between releases of Perl the version that ships with Perl is quite likely to be out of date, so the most recent version can always be found on CPAN (see &lt;a href=&quot;perlmodlib#CPAN&quot;&gt;CPAN in perlmodlib&lt;/a&gt; for details), in the directory</target>
        </trans-unit>
        <trans-unit id="6f9e68beb7f0b151bc8fceae81cb1b8ad5d7794e" translate="yes" xml:space="preserve">
          <source>. Having perl build itself would be impossible with</source>
          <target state="translated">. Having perl build itself would be impossible with</target>
        </trans-unit>
        <trans-unit id="e70c7aa2494034e63eb8b4f2b22846a01d30041b" translate="yes" xml:space="preserve">
          <source>. However, it is possible to</source>
          <target state="translated">. However, it is possible to</target>
        </trans-unit>
        <trans-unit id="c7a0e55016332e0c5271c0854d6a9c26c89598fb" translate="yes" xml:space="preserve">
          <source>. However, your host system and Cygwin configuration will affect Perl's runtime behavior (see &lt;a href=&quot;#TEST&quot;&gt;TEST&lt;/a&gt;).</source>
          <target state="translated">. However, your host system and Cygwin configuration will affect Perl's runtime behavior (see &lt;a href=&quot;#TEST&quot;&gt;TEST&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="f863c23a93501fd973cdcb1d746f38bd8aa20cad" translate="yes" xml:space="preserve">
          <source>. If</source>
          <target state="translated">. If</target>
        </trans-unit>
        <trans-unit id="7f0c2910442f1f0b575ce98071a1f0ff5753a782" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;quoteHighBit&lt;/code&gt; is set, they will be quoted.</source>
          <target state="translated">. If &lt;code&gt;quoteHighBit&lt;/code&gt; is set, they will be quoted.</target>
        </trans-unit>
        <trans-unit id="d44fe27c9789df6d9edbedc8e0441cfadb796292" translate="yes" xml:space="preserve">
          <source>. If all that fails it &lt;code&gt;croak&lt;/code&gt; s.</source>
          <target state="translated">. If all that fails it &lt;code&gt;croak&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="dbe4ccac3b5962271b48921e81142f21abf8b496" translate="yes" xml:space="preserve">
          <source>. If an object is a noun, then methods are its verbs (save, print, open).</source>
          <target state="translated">. If an object is a noun, then methods are its verbs (save, print, open).</target>
        </trans-unit>
        <trans-unit id="d6d823fabc5313d54be7c53757154c9b35bde3e3" translate="yes" xml:space="preserve">
          <source>. If called as a class method, a new object is created; if called as an instance method, the object is reset to the state contained in</source>
          <target state="translated">. If called as a class method, a new object is created; if called as an instance method, the object is reset to the state contained in</target>
        </trans-unit>
        <trans-unit id="2be741d48d441b8c30f1f1c49c12f9fc308d28a8" translate="yes" xml:space="preserve">
          <source>. If defined, it should be a search list, each element of which specifies a location for &lt;code&gt;%ENV&lt;/code&gt; elements. If you tell Perl to read or set the element &lt;code&gt;$ENV{&lt;/code&gt;</source>
          <target state="translated">. If defined, it should be a search list, each element of which specifies a location for &lt;code&gt;%ENV&lt;/code&gt; elements. If you tell Perl to read or set the element &lt;code&gt;$ENV{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb88233b9470d06775dbd0f8abd50e567ad6f88f" translate="yes" xml:space="preserve">
          <source>. If found, Perl checks the start of the file for magic strings &lt;code&gt;&quot;#!&quot;&lt;/code&gt; and &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; . If found, Perl uses the rest of the first line as the beginning of the command line to run this script. The only mangling done to the first line is extraction of arguments (currently up to 3), and ignoring of the path-part of the &quot;interpreter&quot; name if it can't be found using the full path.</source>
          <target state="translated">. If found, Perl checks the start of the file for magic strings &lt;code&gt;&quot;#!&quot;&lt;/code&gt; and &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; . If found, Perl uses the rest of the first line as the beginning of the command line to run this script. The only mangling done to the first line is extraction of arguments (currently up to 3), and ignoring of the path-part of the &quot;interpreter&quot; name if it can't be found using the full path.</target>
        </trans-unit>
        <trans-unit id="7968febd03fe8bde1f86e5757cb445071be1de4f" translate="yes" xml:space="preserve">
          <source>. If it does not give an error -- wrong</source>
          <target state="translated">. If it does not give an error -- wrong</target>
        </trans-unit>
        <trans-unit id="3246f36b641961e96375e555d041b988c40cef52" translate="yes" xml:space="preserve">
          <source>. If it has no repeat count or uses a '*', the number of available items is used.</source>
          <target state="translated">. If it has no repeat count or uses a '*', the number of available items is used.</target>
        </trans-unit>
        <trans-unit id="cdd29a6866d7877a8bab1f7946635ac6580b7bf2" translate="yes" xml:space="preserve">
          <source>. If successful, the instance</source>
          <target state="translated">. If successful, the instance</target>
        </trans-unit>
        <trans-unit id="c4f93a6d580968e7afb023f127bdef8253516411" translate="yes" xml:space="preserve">
          <source>. If the &lt;code&gt;/a&lt;/code&gt; regular expression modifier is in effect, it matches [0-9]. Otherwise, it matches anything that is matched by &lt;code&gt;\p{Digit}&lt;/code&gt; , which includes [0-9]. (An unlikely possible exception is that under locale matching rules, the current locale might not have &lt;code&gt;[0-9]&lt;/code&gt; matched by &lt;code&gt;\d&lt;/code&gt; , and/or might match other characters whose code point is less than 256. The only such locale definitions that are legal would be to match &lt;code&gt;[0-9]&lt;/code&gt; plus another set of 10 consecutive digit characters; anything else would be in violation of the C language standard, but Perl doesn't currently assume anything in regard to this.)</source>
          <target state="translated">. If the &lt;code&gt;/a&lt;/code&gt; regular expression modifier is in effect, it matches [0-9]. Otherwise, it matches anything that is matched by &lt;code&gt;\p{Digit}&lt;/code&gt; , which includes [0-9]. (An unlikely possible exception is that under locale matching rules, the current locale might not have &lt;code&gt;[0-9]&lt;/code&gt; matched by &lt;code&gt;\d&lt;/code&gt; , and/or might match other characters whose code point is less than 256. The only such locale definitions that are legal would be to match &lt;code&gt;[0-9]&lt;/code&gt; plus another set of 10 consecutive digit characters; anything else would be in violation of the C language standard, but Perl doesn't currently assume anything in regard to this.)</target>
        </trans-unit>
        <trans-unit id="ed7f56f814a53f5d8a3417d988acd289ad7a8311" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, or equal to the empty string, the state information will be read from STDIN.</source>
          <target state="translated">. If the argument is missing, or equal to the empty string, the state information will be read from STDIN.</target>
        </trans-unit>
        <trans-unit id="5824b191dbb77148d2f73c4545651fad0017e95b" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, or equal to the empty string, the state information will be written to STDOUT.</source>
          <target state="translated">. If the argument is missing, or equal to the empty string, the state information will be written to STDOUT.</target>
        </trans-unit>
        <trans-unit id="86c19918bb0e315fb37ff3bcb89d4d1d00e53177" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, the object will continue using the same algorithm that was selected at creation.</source>
          <target state="translated">. If the argument is missing, the object will continue using the same algorithm that was selected at creation.</target>
        </trans-unit>
        <trans-unit id="ad394d00d49595ece3375d873bc65795f9a2a320" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_bin&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_bin&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</target>
        </trans-unit>
        <trans-unit id="340acc0c90a3ff630e29f3732ec436ada4a5d8ab" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_hex&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_hex&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</target>
        </trans-unit>
        <trans-unit id="d2fe051154b3bd8b24a4c3334242986da9165e62" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_oct&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_oct&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</target>
        </trans-unit>
        <trans-unit id="206aba5c7d9a84ce157c9a5e9c114a73d70137fc" translate="yes" xml:space="preserve">
          <source>. If there is no single code point folding defined for</source>
          <target state="translated">. If there is no single code point folding defined for</target>
        </trans-unit>
        <trans-unit id="1844efc2f3254e2a8d6a689f5eb6ab9ff69cba74" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions.</source>
          <target state="translated">. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions.</target>
        </trans-unit>
        <trans-unit id="c3aca0699f7236e45654ffe7027a808f1c3c2b60" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</source>
          <target state="translated">. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</target>
        </trans-unit>
        <trans-unit id="08fb67d65bc5a9b5387592c9b07f875d13efe0ce" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</source>
          <target state="translated">. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</target>
        </trans-unit>
        <trans-unit id="42dfc7aa5f4468ffdf4e181f7b588d8c5857bc31" translate="yes" xml:space="preserve">
          <source>. If you get into link386 prompts, press &lt;code&gt;Ctrl-C&lt;/code&gt; to exit.</source>
          <target state="translated">. If you get into link386 prompts, press &lt;code&gt;Ctrl-C&lt;/code&gt; to exit.</target>
        </trans-unit>
        <trans-unit id="1e7886d9569f9834e6bdaa9aa8eb1f34132432b7" translate="yes" xml:space="preserve">
          <source>. If you have such data then you should set &lt;code&gt;$Storable::interwork_56_64bit&lt;/code&gt; to a true value to make this Storable read and write files with the old header. You should also migrate your data, or any older perl you are communicating with, to this current version of Storable.</source>
          <target state="translated">. If you have such data then you should set &lt;code&gt;$Storable::interwork_56_64bit&lt;/code&gt; to a true value to make this Storable read and write files with the old header. You should also migrate your data, or any older perl you are communicating with, to this current version of Storable.</target>
        </trans-unit>
        <trans-unit id="d408ab7cf188c609a4c4840fba41a06a381a4651" translate="yes" xml:space="preserve">
          <source>. If your input lines might end in backslashes to indicate continuation, you want to skip ahead and get the next record.</source>
          <target state="translated">. If your input lines might end in backslashes to indicate continuation, you want to skip ahead and get the next record.</target>
        </trans-unit>
        <trans-unit id="1e5ca4130c539ef91a8bd43fde83a107301c6560" translate="yes" xml:space="preserve">
          <source>. If your platform doesn't support &lt;code&gt;NaN&lt;/code&gt; 's then &lt;code&gt;NaN&lt;/code&gt; is just a string with numeric value 0.</source>
          <target state="translated">. If your platform doesn't support &lt;code&gt;NaN&lt;/code&gt; 's then &lt;code&gt;NaN&lt;/code&gt; is just a string with numeric value 0.</target>
        </trans-unit>
        <trans-unit id="a4ca80b61fe20e9969c2abb733817edd354f5d14" translate="yes" xml:space="preserve">
          <source>. In 2010, version 2 of the &lt;a href=&quot;../cpan/meta/spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; was released, which mandates JSON format for the metadata in order to overcome certain compatibility issues between YAML serializers and to avoid breaking older clients unable to handle a new version of the spec. The &lt;a href=&quot;../cpan/meta&quot;&gt;CPAN::Meta&lt;/a&gt; library is now standard for accessing old and new-style Meta files.</source>
          <target state="translated">. In 2010, version 2 of the &lt;a href=&quot;../cpan/meta/spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; was released, which mandates JSON format for the metadata in order to overcome certain compatibility issues between YAML serializers and to avoid breaking older clients unable to handle a new version of the spec. The &lt;a href=&quot;../cpan/meta&quot;&gt;CPAN::Meta&lt;/a&gt; library is now standard for accessing old and new-style Meta files.</target>
        </trans-unit>
        <trans-unit id="d1c4b644424154ce3fe835b9230b290135cb482a" translate="yes" xml:space="preserve">
          <source>. In addition, if none of the functions in a list begin with the string &lt;b&gt;boot_&lt;/b&gt;, &lt;code&gt;Mksymlists&lt;/code&gt; will add a bootstrap function for that package, just as xsubpp does. (If a &lt;b&gt;boot_&amp;lt;pkg&amp;gt;&lt;/b&gt; function is present in the list, it is passed through unchanged.) If DL_FUNCS is not specified, it defaults to the bootstrap function for the extension specified in NAME.</source>
          <target state="translated">. In addition, if none of the functions in a list begin with the string &lt;b&gt;boot_&lt;/b&gt;, &lt;code&gt;Mksymlists&lt;/code&gt; will add a bootstrap function for that package, just as xsubpp does. (If a &lt;b&gt;boot_&amp;lt;pkg&amp;gt;&lt;/b&gt; function is present in the list, it is passed through unchanged.) If DL_FUNCS is not specified, it defaults to the bootstrap function for the extension specified in NAME.</target>
        </trans-unit>
        <trans-unit id="c632e42e7e1458b43dc1ad99933142821a596870" translate="yes" xml:space="preserve">
          <source>. In fact,</source>
          <target state="translated">. In fact,</target>
        </trans-unit>
        <trans-unit id="bce9b2b9f8142db7d9ce85b3fc070c1b985539e3" translate="yes" xml:space="preserve">
          <source>. In geographical terms</source>
          <target state="translated">. In geographical terms</target>
        </trans-unit>
        <trans-unit id="87c6ca62a4ff7bfc3de8b73b2cb60e71a538d7f6" translate="yes" xml:space="preserve">
          <source>. In the unlikely case this is not the correct root, it is possible to override this with a hint value or command line option. This will be used in subsequent tests for AFSness in the configure and test process.</source>
          <target state="translated">. In the unlikely case this is not the correct root, it is possible to override this with a hint value or command line option. This will be used in subsequent tests for AFSness in the configure and test process.</target>
        </trans-unit>
        <trans-unit id="dcbd585e38f590ba194a3793f06f22dab045cf12" translate="yes" xml:space="preserve">
          <source>. In this case all the above are true (but very simple) functions which call the underlying implementation.</source>
          <target state="translated">. In this case all the above are true (but very simple) functions which call the underlying implementation.</target>
        </trans-unit>
        <trans-unit id="d360c3eb53a832cf7747d52bf236e2b0eebf4a3e" translate="yes" xml:space="preserve">
          <source>. In those cases when you &lt;b&gt;require&lt;/b&gt; a &lt;b&gt;.ph&lt;/b&gt; file containing syntax errors, instead of the cryptic</source>
          <target state="translated">. In those cases when you &lt;b&gt;require&lt;/b&gt; a &lt;b&gt;.ph&lt;/b&gt; file containing syntax errors, instead of the cryptic</target>
        </trans-unit>
        <trans-unit id="7b376a04246f5e00596e857391b316083a63b99d" translate="yes" xml:space="preserve">
          <source>. In turn, this hooks into an XSUB,</source>
          <target state="translated">. In turn, this hooks into an XSUB,</target>
        </trans-unit>
        <trans-unit id="3420f60f0bca96a2a73c405a1a85c20704cb3bc5" translate="yes" xml:space="preserve">
          <source>. Individual modules in</source>
          <target state="translated">. Individual modules in</target>
        </trans-unit>
        <trans-unit id="a59f10c336a81d1ca73f037a2b8c92f6334418a6" translate="yes" xml:space="preserve">
          <source>. Inspect the &lt;code&gt;install&lt;/code&gt; logs (in the example above</source>
          <target state="translated">. Inspect the &lt;code&gt;install&lt;/code&gt; logs (in the example above</target>
        </trans-unit>
        <trans-unit id="25184bf63945467203d08f0de2a23c0f6dd54c05" translate="yes" xml:space="preserve">
          <source>. Instead, it will localize perl's notion of which filehandle &lt;code&gt;$.&lt;/code&gt; is currently aliased to.</source>
          <target state="translated">. Instead, it will localize perl's notion of which filehandle &lt;code&gt;$.&lt;/code&gt; is currently aliased to.</target>
        </trans-unit>
        <trans-unit id="99f7f86480d4ea94cae9f5397fe0142ca2f2d10b" translate="yes" xml:space="preserve">
          <source>. It cannot be cleared or deleted; attempts to do so are silently ignored.</source>
          <target state="translated">. It cannot be cleared or deleted; attempts to do so are silently ignored.</target>
        </trans-unit>
        <trans-unit id="e7f2139db1ad9c91528643fba773777f505b8d50" translate="yes" xml:space="preserve">
          <source>. It has the values &quot;unsigned char&quot; or &lt;code&gt;char&lt;/code&gt; .</source>
          <target state="translated">. It has the values &quot;unsigned char&quot; or &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f17a09d380724a3716b787a41ebd4613a73ee6f" translate="yes" xml:space="preserve">
          <source>. It is a plain '' if this is not the &lt;code&gt;GNU&lt;/code&gt; C library, or if the version is unknown.</source>
          <target state="translated">. It is a plain '' if this is not the &lt;code&gt;GNU&lt;/code&gt; C library, or if the version is unknown.</target>
        </trans-unit>
        <trans-unit id="d9968fc8b94f6a056c1a481b9936f565e393c904" translate="yes" xml:space="preserve">
          <source>. It is also used instead of explicit</source>
          <target state="translated">. It is also used instead of explicit</target>
        </trans-unit>
        <trans-unit id="d96c04f9a51ab5f437bd463e742a0003313be347" translate="yes" xml:space="preserve">
          <source>. It is conventionally invoked using the driver script &lt;b&gt;pod2man&lt;/b&gt;, but it can also be used directly.</source>
          <target state="translated">. It is conventionally invoked using the driver script &lt;b&gt;pod2man&lt;/b&gt;, but it can also be used directly.</target>
        </trans-unit>
        <trans-unit id="f513dd8d11fda24e9b49a220d530308d617cc39e" translate="yes" xml:space="preserve">
          <source>. It is defined primarily for backwards compatibility.</source>
          <target state="translated">. It is defined primarily for backwards compatibility.</target>
        </trans-unit>
        <trans-unit id="e2436b894ff16e0565f80d082127a7c7776b277b" translate="yes" xml:space="preserve">
          <source>. It is mainly used by other Configure units.</source>
          <target state="translated">. It is mainly used by other Configure units.</target>
        </trans-unit>
        <trans-unit id="cb63e0a589c7c79183e0aee5a650e0d846db99ab" translate="yes" xml:space="preserve">
          <source>. It is unrelated to English</source>
          <target state="translated">. It is unrelated to English</target>
        </trans-unit>
        <trans-unit id="b38290ed6629f0ba79cc60e3f039d22be0b31883" translate="yes" xml:space="preserve">
          <source>. It will always be 0.</source>
          <target state="translated">. It will always be 0.</target>
        </trans-unit>
        <trans-unit id="c8ebeb64dfaf88dcb282fb968e8e06bb8fcc9b5f" translate="yes" xml:space="preserve">
          <source>. It will use the following search path to find default typemaps, with the rightmost typemap taking precedence.</source>
          <target state="translated">. It will use the following search path to find default typemaps, with the rightmost typemap taking precedence.</target>
        </trans-unit>
        <trans-unit id="47b5a45699abc71afa96d3e0e904645134ffab28" translate="yes" xml:space="preserve">
          <source>. It works similar to the result of the Unix command</source>
          <target state="translated">. It works similar to the result of the Unix command</target>
        </trans-unit>
        <trans-unit id="4cf942d7c5a7a7cc8b5f51dca65695a4b4f21342" translate="yes" xml:space="preserve">
          <source>. It's an alternative to &lt;code&gt;make test&lt;/code&gt; .</source>
          <target state="translated">. It's an alternative to &lt;code&gt;make test&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f65c423102d4b2bb387d6ce7ac29cea0b802bdc1" translate="yes" xml:space="preserve">
          <source>. Just follow the instructions, and 99% of the installation blues would go away.</source>
          <target state="translated">. Just follow the instructions, and 99% of the installation blues would go away.</target>
        </trans-unit>
        <trans-unit id="f878690035ca0e58b744826cf63a8295cfc9f70e" translate="yes" xml:space="preserve">
          <source>. Later we'll see that this specification can contain more than just the option name. The reference to the variable is called the option</source>
          <target state="translated">. Later we'll see that this specification can contain more than just the option name. The reference to the variable is called the option</target>
        </trans-unit>
        <trans-unit id="c4bea9eaa9bee5e3756e1d73231b1234be2ae6f1" translate="yes" xml:space="preserve">
          <source>. Mac OS support by Paul Schinder &amp;lt;schinder@pobox.com&amp;gt; and Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;.</source>
          <target state="translated">. Mac OS support by Paul Schinder &amp;lt;schinder@pobox.com&amp;gt; and Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="d2af23a9a799aeb1d6f76fd39a5251808a1a50e8" translate="yes" xml:space="preserve">
          <source>. More information on how to write good perldelta entries is available in the &lt;code&gt;Style&lt;/code&gt; section of</source>
          <target state="translated">. More information on how to write good perldelta entries is available in the &lt;code&gt;Style&lt;/code&gt; section of</target>
        </trans-unit>
        <trans-unit id="5fa79d5fe358db59b924db9e3afc91c8c4c97989" translate="yes" xml:space="preserve">
          <source>. None of the other processing of &lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;pad_add_name_pvn in perlapi&lt;/a&gt; is done. Returns the offset of the allocated pad slot.</source>
          <target state="translated">. None of the other processing of &lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;pad_add_name_pvn in perlapi&lt;/a&gt; is done. Returns the offset of the allocated pad slot.</target>
        </trans-unit>
        <trans-unit id="d7039f806afb4a2ecb55b3bcaacedf3640a4cd77" translate="yes" xml:space="preserve">
          <source>. Note that all names passed to the user's</source>
          <target state="translated">. Note that all names passed to the user's</target>
        </trans-unit>
        <trans-unit id="15bf0a4269dea3ad18ee10b385dbdaef11b74bf4" translate="yes" xml:space="preserve">
          <source>. Note that before these macros were added, Perl internals used to directly use character literals, so you may occasionally come across old code or documentation referring to 'U' magic rather than &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; for example.</source>
          <target state="translated">. Note that before these macros were added, Perl internals used to directly use character literals, so you may occasionally come across old code or documentation referring to 'U' magic rather than &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; for example.</target>
        </trans-unit>
        <trans-unit id="d06789deb8b5a7ca71d14547a85c1b9baded3394" translate="yes" xml:space="preserve">
          <source>. Note that extension code should</source>
          <target state="translated">. Note that extension code should</target>
        </trans-unit>
        <trans-unit id="12457e722ccfc654c8bad69405188c5af0f50ae7" translate="yes" xml:space="preserve">
          <source>. Now we can add our tests to the end. First, we'll test that the &lt;code&gt;U&lt;/code&gt; does indeed create Unicode strings.</source>
          <target state="translated">. Now we can add our tests to the end. First, we'll test that the &lt;code&gt;U&lt;/code&gt; does indeed create Unicode strings.</target>
        </trans-unit>
        <trans-unit id="95d8b82e403a24e94a8215ff5138e9129ce71d0a" translate="yes" xml:space="preserve">
          <source>. Of course, it'll need to be executable first, so &lt;code&gt;chmod 755 script.pl&lt;/code&gt; (under Unix).</source>
          <target state="translated">. Of course, it'll need to be executable first, so &lt;code&gt;chmod 755 script.pl&lt;/code&gt; (under Unix).</target>
        </trans-unit>
        <trans-unit id="537b462bbd527cd649466c0e0e150e64a30e9e53" translate="yes" xml:space="preserve">
          <source>. On operating systems which do not require a specific extension for executable files, this variable is empty.</source>
          <target state="translated">. On operating systems which do not require a specific extension for executable files, this variable is empty.</target>
        </trans-unit>
        <trans-unit id="55026f126a81b220971a849c6c2cb68bb628095e" translate="yes" xml:space="preserve">
          <source>. Once the enclosing &quot;&amp;lt; ... &amp;gt;&quot; is removed, this is passed (more or less) unchanged to &lt;code&gt;File::Glob&lt;/code&gt; to carry out a file match.</source>
          <target state="translated">. Once the enclosing &quot;&amp;lt; ... &amp;gt;&quot; is removed, this is passed (more or less) unchanged to &lt;code&gt;File::Glob&lt;/code&gt; to carry out a file match.</target>
        </trans-unit>
        <trans-unit id="96e2b5e9bec44f8daa5c9f8eb8f20596cf31be4b" translate="yes" xml:space="preserve">
          <source>. One more rule is needed to understand how a match is determined for the whole regular expression: a match at an earlier position is always better than a match at a later position.</source>
          <target state="translated">. One more rule is needed to understand how a match is determined for the whole regular expression: a match at an earlier position is always better than a match at a later position.</target>
        </trans-unit>
        <trans-unit id="4160bde3f72822338469aa8433b4b5304c3dcc97" translate="yes" xml:space="preserve">
          <source>. One way to do this on some systems is to set the environment variable &lt;code&gt;LD_RUN_PATH&lt;/code&gt; to the directory that will be the final location of the shared</source>
          <target state="translated">. One way to do this on some systems is to set the environment variable &lt;code&gt;LD_RUN_PATH&lt;/code&gt; to the directory that will be the final location of the shared</target>
        </trans-unit>
        <trans-unit id="7be1ea0808dfeddc5a5ce7a2663e5bdfc11b4e99" translate="yes" xml:space="preserve">
          <source>. Otherwise it matches any character but &lt;code&gt;\n&lt;/code&gt; .</source>
          <target state="translated">. Otherwise it matches any character but &lt;code&gt;\n&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6969174e97789c0a8cbd61099ffc2a91dee5f32" translate="yes" xml:space="preserve">
          <source>. Otherwise, if the</source>
          <target state="translated">. Otherwise, if the</target>
        </trans-unit>
        <trans-unit id="41e0e8c07d38f87111e8a525a5b3f67ff5e752ad" translate="yes" xml:space="preserve">
          <source>. Otherwise, it returns the value of &lt;code&gt;$@&lt;/code&gt; associated with the thread's execution status in its &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; context.</source>
          <target state="translated">. Otherwise, it returns the value of &lt;code&gt;$@&lt;/code&gt; associated with the thread's execution status in its &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; context.</target>
        </trans-unit>
        <trans-unit id="b1e71ea4d22f53b2eb30fcb146b06118897444ae" translate="yes" xml:space="preserve">
          <source>. Over the years, it has become standard to keep this information in one or more CPAN Meta files distributed with each distribution.</source>
          <target state="translated">. Over the years, it has become standard to keep this information in one or more CPAN Meta files distributed with each distribution.</target>
        </trans-unit>
        <trans-unit id="06cf8affd89236a0eecaaa78bccddd732862b6d8" translate="yes" xml:space="preserve">
          <source>. Page numbers derive from the hardcover edition, first published in 1983 by George Allen &amp;amp; Unwin; no page numbers changed for the special 3-volume omnibus edition of 2002 or the various trade-paper editions, all again now by Harper Collins or Houghton Mifflin.</source>
          <target state="translated">. Page numbers derive from the hardcover edition, first published in 1983 by George Allen &amp;amp; Unwin; no page numbers changed for the special 3-volume omnibus edition of 2002 or the various trade-paper editions, all again now by Harper Collins or Houghton Mifflin.</target>
        </trans-unit>
        <trans-unit id="d4f4aa3da68de58187b7c018e5336cbc71134a54" translate="yes" xml:space="preserve">
          <source>. People who are interested in how to localize things in the containing scope should take a look there too.</source>
          <target state="translated">. People who are interested in how to localize things in the containing scope should take a look there too.</target>
        </trans-unit>
        <trans-unit id="c2b14d3f3d78674e56bc67813f86b24d2db0c711" translate="yes" xml:space="preserve">
          <source>. Perhaps what we ought to do is take the hard-wired value from</source>
          <target state="translated">. Perhaps what we ought to do is take the hard-wired value from</target>
        </trans-unit>
        <trans-unit id="1bb197e77339ac738cd4c23655f60abef9ee8faa" translate="yes" xml:space="preserve">
          <source>. Perl does not do this for you. The &lt;code&gt;passwd&lt;/code&gt; is one-way hashed garble, not clear text, and may not be unhashed save by brute-force guessing. Secure systems use more a more secure hashing than DES. On systems supporting shadow password systems, Perl automatically returns the shadow password entry when called by a suitably empowered user, even if your underlying vendor-provided C library was too short-sighted to realize it should do this.</source>
          <target state="translated">. Perl does not do this for you. The &lt;code&gt;passwd&lt;/code&gt; is one-way hashed garble, not clear text, and may not be unhashed save by brute-force guessing. Secure systems use more a more secure hashing than DES. On systems supporting shadow password systems, Perl automatically returns the shadow password entry when called by a suitably empowered user, even if your underlying vendor-provided C library was too short-sighted to realize it should do this.</target>
        </trans-unit>
        <trans-unit id="c2d4fd11e3c3c2ef4d3668c3eb6e94ff499b67de" translate="yes" xml:space="preserve">
          <source>. Perl isn't much like other computer languages; it's highly context sensitive at times, it can be tricky to work out what sort of token something is, or where a token ends. As such, there's a lot of interplay between the tokeniser and the parser, which can get pretty frightening if you're not used to it.</source>
          <target state="translated">. Perl isn't much like other computer languages; it's highly context sensitive at times, it can be tricky to work out what sort of token something is, or where a token ends. As such, there's a lot of interplay between the tokeniser and the parser, which can get pretty frightening if you're not used to it.</target>
        </trans-unit>
        <trans-unit id="cba1355f82c45a8fef21484f747404a76ae86f23" translate="yes" xml:space="preserve">
          <source>. Please remove this variable and put &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">. Please remove this variable and put &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3f1457da5e48adfeddc76831c3066a31d1b57f2e" translate="yes" xml:space="preserve">
          <source>. Pod processors should warn about this being deprecated syntax.</source>
          <target state="translated">. Pod processors should warn about this being deprecated syntax.</target>
        </trans-unit>
        <trans-unit id="78d896e0ef56e1d24740ae6e5074e45f9bb5ff12" translate="yes" xml:space="preserve">
          <source>. Programs must be prepared to deal with</source>
          <target state="translated">. Programs must be prepared to deal with</target>
        </trans-unit>
        <trans-unit id="46be1dc32b301883ac9f960a586983088faefae1" translate="yes" xml:space="preserve">
          <source>. Programs using this variable must be prepared to deal with</source>
          <target state="translated">. Programs using this variable must be prepared to deal with</target>
        </trans-unit>
        <trans-unit id="cd020a4f288e77d95d879b2ff99123114284aae5" translate="yes" xml:space="preserve">
          <source>. Programs using this variable must be prepared to deal with filename expansion.</source>
          <target state="translated">. Programs using this variable must be prepared to deal with filename expansion.</target>
        </trans-unit>
        <trans-unit id="16f0fa2c6457ccd5a1bef736f8b2f051584ca655" translate="yes" xml:space="preserve">
          <source>. Rarely needed.</source>
          <target state="translated">. Rarely needed.</target>
        </trans-unit>
        <trans-unit id="ab6a7d315e0a4101b03879bac7a3a3c3731c445f" translate="yes" xml:space="preserve">
          <source>. Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no matching</source>
          <target state="translated">. Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no matching</target>
        </trans-unit>
        <trans-unit id="17bd24a798e55f262ddde9c7e4ea74e8f691a79b" translate="yes" xml:space="preserve">
          <source>. Returns the new file position, or -1 if an error occurs.</source>
          <target state="translated">. Returns the new file position, or -1 if an error occurs.</target>
        </trans-unit>
        <trans-unit id="e4717fd7dfaf37fd66e5c1a6c2440f1a17feb75b" translate="yes" xml:space="preserve">
          <source>. Roles are relatively new to Perl, but have become rather popular. Roles are &lt;b&gt;applied&lt;/b&gt; to classes. Sometimes we say that classes &lt;b&gt;consume&lt;/b&gt; roles.</source>
          <target state="translated">. Roles are relatively new to Perl, but have become rather popular. Roles are &lt;b&gt;applied&lt;/b&gt; to classes. Sometimes we say that classes &lt;b&gt;consume&lt;/b&gt; roles.</target>
        </trans-unit>
        <trans-unit id="85adbd9d6de0bb6d69a95e5ac09cd801db6ef4b2" translate="yes" xml:space="preserve">
          <source>. Running the profiled version of Perl will create an output file called</source>
          <target state="translated">. Running the profiled version of Perl will create an output file called</target>
        </trans-unit>
        <trans-unit id="e550a655605c6f097b311744bc2ad2d1f7e02cd4" translate="yes" xml:space="preserve">
          <source>. Save your work and repeat...</source>
          <target state="translated">. Save your work and repeat...</target>
        </trans-unit>
        <trans-unit id="7143f409794e5396a72f2a6b101a534fc0b07928" translate="yes" xml:space="preserve">
          <source>. See</source>
          <target state="translated">. See</target>
        </trans-unit>
        <trans-unit id="0dc553c5d634355fec3724ccd2a074361b8ba50a" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f&quot;&gt;How do I add a directory to my include path (@INC) at runtime?&lt;/a&gt; for details on how to run your newly installed modules.</source>
          <target state="translated">. See &lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f&quot;&gt;How do I add a directory to my include path (@INC) at runtime?&lt;/a&gt; for details on how to run your newly installed modules.</target>
        </trans-unit>
        <trans-unit id="ba073e24f104c94d46d8d40d53b310f205b091a4" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="108cb27bf7c8d7031e4a5603b633fe94497e91da" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#sv_magic&quot;&gt;sv_magic&lt;/a&gt;.</source>
          <target state="translated">. See &lt;a href=&quot;#sv_magic&quot;&gt;sv_magic&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1981f0c642c0f907ef847d7c17536d36f0ee8920" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;../../perlref&quot;&gt;perlref&lt;/a&gt; for more details on the mechanics of</source>
          <target state="translated">. See &lt;a href=&quot;../../perlref&quot;&gt;perlref&lt;/a&gt; for more details on the mechanics of</target>
        </trans-unit>
        <trans-unit id="10889f2e8189c79b1f86ade1e2c38e0b8038ce1d" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</source>
          <target state="translated">. See &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="065f520588be974c5594d0397ea3e63f2dce18b1" translate="yes" xml:space="preserve">
          <source>. See AUTHORS for a full list of people involved. For any questions, send mail to</source>
          <target state="translated">. See AUTHORS for a full list of people involved. For any questions, send mail to</target>
        </trans-unit>
        <trans-unit id="1da2f25ee6e37cb910fd70d32927a95fc37e978b" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</source>
          <target state="translated">. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="526666d33c6dd6f0edce27a1b78dfa10ea26ace5" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt; .</source>
          <target state="translated">. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="269fb40594ac38479767dd170994fea4ce252e54" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</source>
          <target state="translated">. See also &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73ed177a1496b0ffabfd429dcad99a1b5e86269c" translate="yes" xml:space="preserve">
          <source>. See man1dir.</source>
          <target state="translated">. See man1dir.</target>
        </trans-unit>
        <trans-unit id="37f30b22c5af4841496858a795207dcf79c50797" translate="yes" xml:space="preserve">
          <source>. See man3dir.</source>
          <target state="translated">. See man3dir.</target>
        </trans-unit>
        <trans-unit id="c34835277b46e71de0c02bf6cf0f02eefcb4f7c6" translate="yes" xml:space="preserve">
          <source>. See the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; operator in Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="translated">. See the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; operator in Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="532cefe5f4e0e07491434bf06b22de1364858a22" translate="yes" xml:space="preserve">
          <source>. Sigh!</source>
          <target state="translated">. Sigh!</target>
        </trans-unit>
        <trans-unit id="15721d069cd060fbc46f89e07bfe13ca468f8232" translate="yes" xml:space="preserve">
          <source>. Similarly, \x</source>
          <target state="translated">. Similarly, \x</target>
        </trans-unit>
        <trans-unit id="e7f91a5e70762d437d2b010c7f3894adf3f22e05" translate="yes" xml:space="preserve">
          <source>. Since we're going to be altering this file, let's copy it to</source>
          <target state="translated">. Since we're going to be altering this file, let's copy it to</target>
        </trans-unit>
        <trans-unit id="a4b19e5f2af8ac1ad558abf4f3e809cbb78dad50" translate="yes" xml:space="preserve">
          <source>. Some non-western languages require more complicated models, so Unicode created the</source>
          <target state="translated">. Some non-western languages require more complicated models, so Unicode created the</target>
        </trans-unit>
        <trans-unit id="924583291a21ac53f389c53cb7d36575da128db8" translate="yes" xml:space="preserve">
          <source>. Sometimes confused with &lt;code&gt;PATH&lt;/code&gt; .</source>
          <target state="translated">. Sometimes confused with &lt;code&gt;PATH&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f60154f92db701fa8dfa7c281d9f6dd872168811" translate="yes" xml:space="preserve">
          <source>. Source filters alter the program text of a module before Perl sees it, much as a C preprocessor alters the source text of a C program before the compiler sees it. This article tells you more about what source filters are, how they work, and how to write your own.</source>
          <target state="translated">. Source filters alter the program text of a module before Perl sees it, much as a C preprocessor alters the source text of a C program before the compiler sees it. This article tells you more about what source filters are, how they work, and how to write your own.</target>
        </trans-unit>
        <trans-unit id="c5324fa1cfeb6989f1cc904db6d96f2b5cf34a5f" translate="yes" xml:space="preserve">
          <source>. Specifically, the function is applied to an &lt;code&gt;entersub&lt;/code&gt; op tree for a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , where the callee can be identified at compile time as</source>
          <target state="translated">. Specifically, the function is applied to an &lt;code&gt;entersub&lt;/code&gt; op tree for a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , where the callee can be identified at compile time as</target>
        </trans-unit>
        <trans-unit id="719bbeb528773685892fbb466263ed7992f1ef35" translate="yes" xml:space="preserve">
          <source>. Stratus &lt;code&gt;VOS&lt;/code&gt; uses</source>
          <target state="translated">. Stratus &lt;code&gt;VOS&lt;/code&gt; uses</target>
        </trans-unit>
        <trans-unit id="74794f3a0f64eaaac38d6eec10e61e0bb7ca4ab9" translate="yes" xml:space="preserve">
          <source>. Subpatterns are numbered based on the left to right order of their opening parenthesis. A backreference matches whatever actually matched the subpattern in the string being examined, not the rules for that subpattern. Therefore, &lt;code&gt;(0|0x)\d*\s\g1\d*&lt;/code&gt; will match &quot;0x1234 0x4321&quot;, but not &quot;0x1234 01234&quot;, because subpattern 1 matched &quot;0x&quot;, even though the rule &lt;code&gt;0|0x&lt;/code&gt; could potentially match the leading 0 in the second number.</source>
          <target state="translated">. Subpatterns are numbered based on the left to right order of their opening parenthesis. A backreference matches whatever actually matched the subpattern in the string being examined, not the rules for that subpattern. Therefore, &lt;code&gt;(0|0x)\d*\s\g1\d*&lt;/code&gt; will match &quot;0x1234 0x4321&quot;, but not &quot;0x1234 01234&quot;, because subpattern 1 matched &quot;0x&quot;, even though the rule &lt;code&gt;0|0x&lt;/code&gt; could potentially match the leading 0 in the second number.</target>
        </trans-unit>
        <trans-unit id="0bd33c43194e6d65ba167a5061ae6b129a64b1cb" translate="yes" xml:space="preserve">
          <source>. Such discretionary locks are more flexible, but offer fewer guarantees. This means that files locked with flock() may be modified by programs that do not also use flock(). Cars that stop for red lights get on well with each other, but not with cars that don't stop for red lights. See the perlport manpage, your port's specific documentation, or your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (If you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">. Such discretionary locks are more flexible, but offer fewer guarantees. This means that files locked with flock() may be modified by programs that do not also use flock(). Cars that stop for red lights get on well with each other, but not with cars that don't stop for red lights. See the perlport manpage, your port's specific documentation, or your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (If you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</target>
        </trans-unit>
        <trans-unit id="0219e78f15e9d632ec155375033bbb1f75756ae3" translate="yes" xml:space="preserve">
          <source>. Test::More will output special ok's which Test::Harness interprets as skipped, but passing, tests.</source>
          <target state="translated">. Test::More will output special ok's which Test::Harness interprets as skipped, but passing, tests.</target>
        </trans-unit>
        <trans-unit id="509fc989a8df02d181de3abd4b07ad24cc68349f" translate="yes" xml:space="preserve">
          <source>. Text following</source>
          <target state="translated">. Text following</target>
        </trans-unit>
        <trans-unit id="96afc36fdc9cac6d245d493ea1697bcf23f65cf9" translate="yes" xml:space="preserve">
          <source>. That is, every (possibly wide) character gets replaced with a sequence of one or more characters that represent the individual</source>
          <target state="translated">. That is, every (possibly wide) character gets replaced with a sequence of one or more characters that represent the individual</target>
        </trans-unit>
        <trans-unit id="d3ee68fda4cc70d1e9047807e735452ddfef368e" translate="yes" xml:space="preserve">
          <source>. That means that if $fred is a lexical variable created with my() in the above example, the code wouldn't work at all: you'd accidentally access the global and skip right over the private lexical altogether. Global variables are bad because they can easily collide accidentally and in general make for non-scalable and confusing code.</source>
          <target state="translated">. That means that if $fred is a lexical variable created with my() in the above example, the code wouldn't work at all: you'd accidentally access the global and skip right over the private lexical altogether. Global variables are bad because they can easily collide accidentally and in general make for non-scalable and confusing code.</target>
        </trans-unit>
        <trans-unit id="71cc74e6abc0852795fc00a102b3c6afa72a3049" translate="yes" xml:space="preserve">
          <source>. That way, the longer-lived variable will contain the expected reference until it goes out of scope.</source>
          <target state="translated">. That way, the longer-lived variable will contain the expected reference until it goes out of scope.</target>
        </trans-unit>
        <trans-unit id="338bcb0d0b4f6443c09736e45408c62579701cfd" translate="yes" xml:space="preserve">
          <source>. The</source>
          <target state="translated">. The</target>
        </trans-unit>
        <trans-unit id="fe300fb39c3e404963696de90c5f2b8fb1f4b10d" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.</source>
          <target state="translated">. The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="43b7a7d48b732a7b49c73edd40605094cd605257" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; operator assumes this so you don't have to spell out &quot;</source>
          <target state="translated">. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; operator assumes this so you don't have to spell out &quot;</target>
        </trans-unit>
        <trans-unit id="1d02d641b2daae8c8291ce30497232a482994b97" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt;.</source>
          <target state="translated">. The &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d34046a75c4b4b70cb801b77ce3dd9d1f648ec86" translate="yes" xml:space="preserve">
          <source>. The C subroutine it calls defaults to the name of the perl visible subroutine, unless you give the parameter</source>
          <target state="translated">. The C subroutine it calls defaults to the name of the perl visible subroutine, unless you give the parameter</target>
        </trans-unit>
        <trans-unit id="9397ab7f8e9744e2e3279022e0ab86d9f126e59f" translate="yes" xml:space="preserve">
          <source>. The amount of data in the read cache will not exceed the value you specified for &lt;code&gt;memory&lt;/code&gt; . If &lt;code&gt;Tie::File&lt;/code&gt; wants to cache a new record, but the read cache is full, it will make room by expiring the least-recently visited records from the read cache.</source>
          <target state="translated">. The amount of data in the read cache will not exceed the value you specified for &lt;code&gt;memory&lt;/code&gt; . If &lt;code&gt;Tie::File&lt;/code&gt; wants to cache a new record, but the read cache is full, it will make room by expiring the least-recently visited records from the read cache.</target>
        </trans-unit>
        <trans-unit id="79601f5e82d6d993fd5c764e5bd99eacf802094f" translate="yes" xml:space="preserve">
          <source>. The arrow operator (&lt;code&gt;-&amp;gt;&lt;/code&gt; ) tells Perl that we are calling a method.</source>
          <target state="translated">. The arrow operator (&lt;code&gt;-&amp;gt;&lt;/code&gt; ) tells Perl that we are calling a method.</target>
        </trans-unit>
        <trans-unit id="4ce742f8603278d1cc939bb3c2667ef58a5b743a" translate="yes" xml:space="preserve">
          <source>. The base64 encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable. A 65-character subset ([A-Za-z0-9+/=]) of US-ASCII is used, enabling 6 bits to be represented per printable character.</source>
          <target state="translated">. The base64 encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable. A 65-character subset ([A-Za-z0-9+/=]) of US-ASCII is used, enabling 6 bits to be represented per printable character.</target>
        </trans-unit>
        <trans-unit id="132df5e01ce9879e06e9a0bb9623693b913390a1" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is available as a Perl scalar, the &lt;a href=&quot;#lex_stuff_sv&quot;&gt;lex_stuff_sv&lt;/a&gt; function is more convenient.</source>
          <target state="translated">. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is available as a Perl scalar, the &lt;a href=&quot;#lex_stuff_sv&quot;&gt;lex_stuff_sv&lt;/a&gt; function is more convenient.</target>
        </trans-unit>
        <trans-unit id="d893afc509f6379c799028f22bba6115198b3dd0" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is not already a Perl scalar, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function avoids the need to construct a scalar.</source>
          <target state="translated">. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is not already a Perl scalar, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function avoids the need to construct a scalar.</target>
        </trans-unit>
        <trans-unit id="ee8a3d9771584b9a4ccf95284b3a8174d3f9cca7" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If it is not convenient to nul-terminate a string to be inserted, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function is more appropriate.</source>
          <target state="translated">. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If it is not convenient to nul-terminate a string to be inserted, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function is more appropriate.</target>
        </trans-unit>
        <trans-unit id="09b2a2d176e198b26fa708993e686fdffc215703" translate="yes" xml:space="preserve">
          <source>. The declaration &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; disables this feature, which can cause all sorts of trouble if you use it by accident.</source>
          <target state="translated">. The declaration &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; disables this feature, which can cause all sorts of trouble if you use it by accident.</target>
        </trans-unit>
        <trans-unit id="1f924a7620bcb58b87a1f9d9dd3fdfe4c62ff669" translate="yes" xml:space="preserve">
          <source>. The default is &quot;User Contributed Perl Documentation&quot;, but also see &lt;b&gt;--official&lt;/b&gt; below.</source>
          <target state="translated">. The default is &quot;User Contributed Perl Documentation&quot;, but also see &lt;b&gt;--official&lt;/b&gt; below.</target>
        </trans-unit>
        <trans-unit id="618c078508491fbfb47de5b8a07926b3458d7d8d" translate="yes" xml:space="preserve">
          <source>. The default library locations (e.g. privlib, sitelib) are either</source>
          <target state="translated">. The default library locations (e.g. privlib, sitelib) are either</target>
        </trans-unit>
        <trans-unit id="632ab13141757f9e687de51db78b780c50b12aa3" translate="yes" xml:space="preserve">
          <source>. The directory tree is left untouched.</source>
          <target state="translated">. The directory tree is left untouched.</target>
        </trans-unit>
        <trans-unit id="a378991e2ff9bbc4e73fa61ee57c00bdd052b15d" translate="yes" xml:space="preserve">
          <source>. The equivalent test can be made in C by using the &lt;code&gt;GIMME_V&lt;/code&gt; macro, which returns &lt;code&gt;G_ARRAY&lt;/code&gt; if you have been called in a list context, &lt;code&gt;G_SCALAR&lt;/code&gt; if in a scalar context, or &lt;code&gt;G_VOID&lt;/code&gt; if in a void context (i.e., the return value will not be used). An older version of this macro is called &lt;code&gt;GIMME&lt;/code&gt; ; in a void context it returns &lt;code&gt;G_SCALAR&lt;/code&gt; instead of &lt;code&gt;G_VOID&lt;/code&gt; . An example of using the &lt;code&gt;GIMME_V&lt;/code&gt; macro is shown in section</source>
          <target state="translated">. The equivalent test can be made in C by using the &lt;code&gt;GIMME_V&lt;/code&gt; macro, which returns &lt;code&gt;G_ARRAY&lt;/code&gt; if you have been called in a list context, &lt;code&gt;G_SCALAR&lt;/code&gt; if in a scalar context, or &lt;code&gt;G_VOID&lt;/code&gt; if in a void context (i.e., the return value will not be used). An older version of this macro is called &lt;code&gt;GIMME&lt;/code&gt; ; in a void context it returns &lt;code&gt;G_SCALAR&lt;/code&gt; instead of &lt;code&gt;G_VOID&lt;/code&gt; . An example of using the &lt;code&gt;GIMME_V&lt;/code&gt; macro is shown in section</target>
        </trans-unit>
        <trans-unit id="7cd333b30838b1fdef268a889fd4cb7c1f09da13" translate="yes" xml:space="preserve">
          <source>. The expression \c</source>
          <target state="translated">. The expression \c</target>
        </trans-unit>
        <trans-unit id="ef482f58ec037bafd28af56e419d7d82b45dc684" translate="yes" xml:space="preserve">
          <source>. The facility must be enabled first by a pragmatic declaration, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'signatures'&lt;/code&gt; , and it will produce a warning unless the &quot;experimental::signatures&quot; warnings category is disabled.</source>
          <target state="translated">. The facility must be enabled first by a pragmatic declaration, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'signatures'&lt;/code&gt; , and it will produce a warning unless the &quot;experimental::signatures&quot; warnings category is disabled.</target>
        </trans-unit>
        <trans-unit id="993996ea1755cbddf6e3835d13a493c47b042aa6" translate="yes" xml:space="preserve">
          <source>. The failures are caused by bugs in the CRT in VC++ 2013 which will be fixed in future releases of VC++, as explained by Microsoft here: &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&lt;/a&gt;. In the meantime, if you need fixed &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; functions then have a look at the CPAN distribution Win32::UTCFileTime.</source>
          <target state="translated">. The failures are caused by bugs in the CRT in VC++ 2013 which will be fixed in future releases of VC++, as explained by Microsoft here: &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&lt;/a&gt;. In the meantime, if you need fixed &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; functions then have a look at the CPAN distribution Win32::UTCFileTime.</target>
        </trans-unit>
        <trans-unit id="209db736727fc0813e037a50d64ce2c4cb62c7c1" translate="yes" xml:space="preserve">
          <source>. The following table shows them, along with their ASCII code points (in decimal and hex), their ASCII name, the control escape on ASCII platforms and a short description. (For EBCDIC platforms, see &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;OPERATOR DIFFERENCES in perlebcdic&lt;/a&gt;.)</source>
          <target state="translated">. The following table shows them, along with their ASCII code points (in decimal and hex), their ASCII name, the control escape on ASCII platforms and a short description. (For EBCDIC platforms, see &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;OPERATOR DIFFERENCES in perlebcdic&lt;/a&gt;.)</target>
        </trans-unit>
        <trans-unit id="eb9b603496778c52c1a2d77f91cb20b3c0e09316" translate="yes" xml:space="preserve">
          <source>. The format of</source>
          <target state="translated">. The format of</target>
        </trans-unit>
        <trans-unit id="98bd86fe1138202f1f9439203697d2e6ccc0c1d1" translate="yes" xml:space="preserve">
          <source>. The former is useful if $prefix is a directory dedicated to perl (e.g.</source>
          <target state="translated">. The former is useful if $prefix is a directory dedicated to perl (e.g.</target>
        </trans-unit>
        <trans-unit id="52456eda920c313c016ecbba8397c6a142320751" translate="yes" xml:space="preserve">
          <source>. The function is intended to be called in this manner:</source>
          <target state="translated">. The function is intended to be called in this manner:</target>
        </trans-unit>
        <trans-unit id="a592425b2e38798803c52cbd4beb0cd4ab9e044b" translate="yes" xml:space="preserve">
          <source>. The function should be defined like this:</source>
          <target state="translated">. The function should be defined like this:</target>
        </trans-unit>
        <trans-unit id="9b277cb2a54f819af8bf29778d7360ede4ccd6c6" translate="yes" xml:space="preserve">
          <source>. The initializer value for a scalar element is just a scalar value. The initializer for an array element is an array reference. The initializer for a hash is a hash reference.</source>
          <target state="translated">. The initializer value for a scalar element is just a scalar value. The initializer for an array element is an array reference. The initializer for a hash is a hash reference.</target>
        </trans-unit>
        <trans-unit id="afbe09239c4b0b80310b301635f392f6bbc5a351" translate="yes" xml:space="preserve">
          <source>. The input is the list of files that match the fileglob.</source>
          <target state="translated">. The input is the list of files that match the fileglob.</target>
        </trans-unit>
        <trans-unit id="352aab7b2d0eaa0bc5aa9fc494beb1975384b34a" translate="yes" xml:space="preserve">
          <source>. The key field in the database is the location string and the value field is the time the location was last visited stored as a 4 byte binary value.</source>
          <target state="translated">. The key field in the database is the location string and the value field is the time the location was last visited stored as a 4 byte binary value.</target>
        </trans-unit>
        <trans-unit id="95555a38b0d0fdd7e883cd86b3b46ad68f807768" translate="yes" xml:space="preserve">
          <source>. The latter is most probably already fixed, if you see it and can trace where the latter spurious warning comes from, please inform me.</source>
          <target state="translated">. The latter is most probably already fixed, if you see it and can trace where the latter spurious warning comes from, please inform me.</target>
        </trans-unit>
        <trans-unit id="92fd66a748779ee3429954e90cf1b31a9766b03d" translate="yes" xml:space="preserve">
          <source>. The latter means that if you just installed EMX, and made all the needed changes to</source>
          <target state="translated">. The latter means that if you just installed EMX, and made all the needed changes to</target>
        </trans-unit>
        <trans-unit id="7e4c4954b32c854b5ebec7089c4678970bb9dad2" translate="yes" xml:space="preserve">
          <source>. The logical character sequence itself is unchanged. If</source>
          <target state="translated">. The logical character sequence itself is unchanged. If</target>
        </trans-unit>
        <trans-unit id="cd29714c2a33b9f7328510e6da296e4c8f1474ee" translate="yes" xml:space="preserve">
          <source>. The makefile can use this with something like $shrpenv $(&lt;code&gt;CC&lt;/code&gt; ) -o perl</source>
          <target state="translated">. The makefile can use this with something like $shrpenv $(&lt;code&gt;CC&lt;/code&gt; ) -o perl</target>
        </trans-unit>
        <trans-unit id="d28baca6170ca62229fafab754ab3c6019b0a96c" translate="yes" xml:space="preserve">
          <source>. The mode argument should be a string as would be passed to fopen/PerlIO_open. If it is NULL then - for legacy support - the FILE * is opened in same mode as the PerlIO *.</source>
          <target state="translated">. The mode argument should be a string as would be passed to fopen/PerlIO_open. If it is NULL then - for legacy support - the FILE * is opened in same mode as the PerlIO *.</target>
        </trans-unit>
        <trans-unit id="d127834d1054b17ba75249e4716d18cafb707bc6" translate="yes" xml:space="preserve">
          <source>. The name information can be used for POD translators.</source>
          <target state="translated">. The name information can be used for POD translators.</target>
        </trans-unit>
        <trans-unit id="7e41d71ac7eded037c4670d30d4568b8d18ea55e" translate="yes" xml:space="preserve">
          <source>. The name of a feature bundle is prefixed with a colon, to distinguish it from an actual feature.</source>
          <target state="translated">. The name of a feature bundle is prefixed with a colon, to distinguish it from an actual feature.</target>
        </trans-unit>
        <trans-unit id="84b15d4f04c91fed2b935cf88259b619f7e87100" translate="yes" xml:space="preserve">
          <source>. The newly-allocated hash table may now have data stored and retrieved. Efforts to store more than &lt;code&gt;$table_size&lt;/code&gt; elements will result in a fatal error, as will efforts to store a value not exactly &lt;code&gt;$value_len&lt;/code&gt; characters in length, or reference through a key not exactly &lt;code&gt;$key_len&lt;/code&gt; characters in length. While these constraints may seem excessive, the result is a hash table using much less internal memory than an equivalent freely-allocated hash table.</source>
          <target state="translated">. The newly-allocated hash table may now have data stored and retrieved. Efforts to store more than &lt;code&gt;$table_size&lt;/code&gt; elements will result in a fatal error, as will efforts to store a value not exactly &lt;code&gt;$value_len&lt;/code&gt; characters in length, or reference through a key not exactly &lt;code&gt;$key_len&lt;/code&gt; characters in length. While these constraints may seem excessive, the result is a hash table using much less internal memory than an equivalent freely-allocated hash table.</target>
        </trans-unit>
        <trans-unit id="90f2a0f7f26f9ff04e556e24ec0e5a3e66bc88a2" translate="yes" xml:space="preserve">
          <source>. The object should provide the interface described in &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt;. If more than two arguments are provided, additional arguments are considered aliases for</source>
          <target state="translated">. The object should provide the interface described in &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt;. If more than two arguments are provided, additional arguments are considered aliases for</target>
        </trans-unit>
        <trans-unit id="96a94934114bd87c528984fa35f3cbd286f4a6de" translate="yes" xml:space="preserve">
          <source>. The old way was to declare it as &quot;int (*signal(...))()&quot;.</source>
          <target state="translated">. The old way was to declare it as &quot;int (*signal(...))()&quot;.</target>
        </trans-unit>
        <trans-unit id="af4d0c63d60ebd8bd921063f1610ae5b1868cae0" translate="yes" xml:space="preserve">
          <source>. The outlier &lt;code&gt;\c?&lt;/code&gt; on ASCII, which yields a non-C0 control &lt;code&gt;DEL&lt;/code&gt; , yields the outlier control &lt;code&gt;APC&lt;/code&gt; on EBCDIC, the one that isn't in the block of contiguous controls. Note that a subtlety of this is that &lt;code&gt;\c?&lt;/code&gt; on ASCII platforms is an ASCII character, while it isn't equivalent to any ASCII character in EBCDIC platforms.</source>
          <target state="translated">. The outlier &lt;code&gt;\c?&lt;/code&gt; on ASCII, which yields a non-C0 control &lt;code&gt;DEL&lt;/code&gt; , yields the outlier control &lt;code&gt;APC&lt;/code&gt; on EBCDIC, the one that isn't in the block of contiguous controls. Note that a subtlety of this is that &lt;code&gt;\c?&lt;/code&gt; on ASCII platforms is an ASCII character, while it isn't equivalent to any ASCII character in EBCDIC platforms.</target>
        </trans-unit>
        <trans-unit id="7bd4f959347af60366084a6b999d2b4170409fa5" translate="yes" xml:space="preserve">
          <source>. The output is the list of files that match the fileglob.</source>
          <target state="translated">. The output is the list of files that match the fileglob.</target>
        </trans-unit>
        <trans-unit id="3a753f8f2e7a43103d1ff1824cd727b6ecbdb4ec" translate="yes" xml:space="preserve">
          <source>. The pattern code expression is like a regular code expression, except that the result of the code evaluation is treated as a regular expression and matched immediately. A simple example is</source>
          <target state="translated">. The pattern code expression is like a regular code expression, except that the result of the code evaluation is treated as a regular expression and matched immediately. A simple example is</target>
        </trans-unit>
        <trans-unit id="a244cd3187379cc2fe2c070c785808570854282b" translate="yes" xml:space="preserve">
          <source>. The people with little desire to understand Perl can just rename main(), and do necessary modification in a custom main() which calls the renamed function in appropriate time.</source>
          <target state="translated">. The people with little desire to understand Perl can just rename main(), and do necessary modification in a custom main() which calls the renamed function in appropriate time.</target>
        </trans-unit>
        <trans-unit id="201d8370b36c2e56d7351b01de7f62376c175f87" translate="yes" xml:space="preserve">
          <source>. The perl headers (in particular &quot;perlio.h&quot;) will &lt;code&gt;#define&lt;/code&gt; them to the I/O mechanism selected at Configure time.</source>
          <target state="translated">. The perl headers (in particular &quot;perlio.h&quot;) will &lt;code&gt;#define&lt;/code&gt; them to the I/O mechanism selected at Configure time.</target>
        </trans-unit>
        <trans-unit id="ac04dd22ec2d3883b78a8c65c848b91a67ea61d0" translate="yes" xml:space="preserve">
          <source>. The quoted-printable encoding is intended to represent data that largely consists of bytes that correspond to printable characters in the ASCII character set. Each non-printable character (as defined by English Americans) is represented by a triplet consisting of the character &quot;=&quot; followed by two hexadecimal digits.</source>
          <target state="translated">. The quoted-printable encoding is intended to represent data that largely consists of bytes that correspond to printable characters in the ASCII character set. Each non-printable character (as defined by English Americans) is represented by a triplet consisting of the character &quot;=&quot; followed by two hexadecimal digits.</target>
        </trans-unit>
        <trans-unit id="500581814351c949b94b39e4cb44f6f66856596f" translate="yes" xml:space="preserve">
          <source>. The remaining content of the buffer will be moved, and all pointers into the buffer updated appropriately.</source>
          <target state="translated">. The remaining content of the buffer will be moved, and all pointers into the buffer updated appropriately.</target>
        </trans-unit>
        <trans-unit id="22430eb3a8c28a42cd2b9e57521a0c62f976ab90" translate="yes" xml:space="preserve">
          <source>. The repository contains many Perl revisions from Perl 1 onwards and all the revisions from Perforce, the previous version control system.</source>
          <target state="translated">. The repository contains many Perl revisions from Perl 1 onwards and all the revisions from Perforce, the previous version control system.</target>
        </trans-unit>
        <trans-unit id="bfb3d7ca2967ce75e740e5fdec318eba71ce3dd4" translate="yes" xml:space="preserve">
          <source>. The rules for this are different for lower-level loops given by the greedy quantifiers &lt;code&gt;*+{}&lt;/code&gt; , and for higher-level ones like the &lt;code&gt;/g&lt;/code&gt; modifier or split() operator.</source>
          <target state="translated">. The rules for this are different for lower-level loops given by the greedy quantifiers &lt;code&gt;*+{}&lt;/code&gt; , and for higher-level ones like the &lt;code&gt;/g&lt;/code&gt; modifier or split() operator.</target>
        </trans-unit>
        <trans-unit id="03aa66011823d9de16726ea950dd95ac9e1fd5d9" translate="yes" xml:space="preserve">
          <source>. The simple pipeline command below runs the script without needing to create a temporary file to hold the uncompressed file.</source>
          <target state="translated">. The simple pipeline command below runs the script without needing to create a temporary file to hold the uncompressed file.</target>
        </trans-unit>
        <trans-unit id="27721e0ebedbef76f0308d9d0eabaae4fcdb33f6" translate="yes" xml:space="preserve">
          <source>. The string pointed to by &lt;code&gt;key&lt;/code&gt; is Safefree()ed. If one has a</source>
          <target state="translated">. The string pointed to by &lt;code&gt;key&lt;/code&gt; is Safefree()ed. If one has a</target>
        </trans-unit>
        <trans-unit id="67287b42e112f78aab0082dd4f95584b4f318556" translate="yes" xml:space="preserve">
          <source>. The term 'backtracking' comes from the idea that matching a regexp is like a walk in the woods. Successfully matching a regexp is like arriving at a destination. There are many possible trailheads, one for each string position, and each one is tried in order, left to right. From each trailhead there may be many paths, some of which get you there, and some which are dead ends. When you walk along a trail and hit a dead end, you have to backtrack along the trail to an earlier point to try another trail. If you hit your destination, you stop immediately and forget about trying all the other trails. You are persistent, and only if you have tried all the trails from all the trailheads and not arrived at your destination, do you declare failure. To be concrete, here is a step-by-step analysis of what Perl does when it tries to match the regexp</source>
          <target state="translated">. The term 'backtracking' comes from the idea that matching a regexp is like a walk in the woods. Successfully matching a regexp is like arriving at a destination. There are many possible trailheads, one for each string position, and each one is tried in order, left to right. From each trailhead there may be many paths, some of which get you there, and some which are dead ends. When you walk along a trail and hit a dead end, you have to backtrack along the trail to an earlier point to try another trail. If you hit your destination, you stop immediately and forget about trying all the other trails. You are persistent, and only if you have tried all the trails from all the trailheads and not arrived at your destination, do you declare failure. To be concrete, here is a step-by-step analysis of what Perl does when it tries to match the regexp</target>
        </trans-unit>
        <trans-unit id="1199d660ecd25075f0cdf9eb332edd41306fb5d2" translate="yes" xml:space="preserve">
          <source>. The tiny</source>
          <target state="translated">. The tiny</target>
        </trans-unit>
        <trans-unit id="f827c6257f988b2cfbe83fce3e73ddf1d0943d59" translate="yes" xml:space="preserve">
          <source>. The undef third argument means:</source>
          <target state="translated">. The undef third argument means:</target>
        </trans-unit>
        <trans-unit id="ff757407b18554327da61107241354758c27a9bd" translate="yes" xml:space="preserve">
          <source>. The use of &lt;code&gt;autodie&lt;/code&gt; with block eval is considered good practice.</source>
          <target state="translated">. The use of &lt;code&gt;autodie&lt;/code&gt; with block eval is considered good practice.</target>
        </trans-unit>
        <trans-unit id="2a2e85546ff1b49b5a3d548ca91cc9bb13a0aea4" translate="yes" xml:space="preserve">
          <source>. The value will be stored with the specified key in the hash.</source>
          <target state="translated">. The value will be stored with the specified key in the hash.</target>
        </trans-unit>
        <trans-unit id="cc2849d1607b0f29dbd3fdbc14fdf69cbd91b077" translate="yes" xml:space="preserve">
          <source>. Then you can use the modules from your Perl programs with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; or sometimes just &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &quot;/my/perl_directory&quot;;&lt;/code&gt; . If you're on a system that requires superuser/root access to install modules into the directories you see when you type &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt; , you'll want to install them into a local directory (such as your home directory) and use this approach.</source>
          <target state="translated">. Then you can use the modules from your Perl programs with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; or sometimes just &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &quot;/my/perl_directory&quot;;&lt;/code&gt; . If you're on a system that requires superuser/root access to install modules into the directories you see when you type &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt; , you'll want to install them into a local directory (such as your home directory) and use this approach.</target>
        </trans-unit>
        <trans-unit id="41e2d95e78f178f418e712b7eaca32286569001d" translate="yes" xml:space="preserve">
          <source>. There are many possibilities among the world's languages. The number of combinations is astronomical, and if there were a character for each combination, it would soon exhaust Unicode's more than a million possible characters. So Unicode took a different approach: there is a character for the base &lt;code&gt;H&lt;/code&gt; , and a character for each of the possible marks, and these can be variously combined to get a final logical character. So a logical character--what appears to be a single character--can be a sequence of more than one individual characters. The Unicode standard calls these &quot;extended grapheme clusters&quot; (which is an improved version of the no-longer much used &quot;grapheme cluster&quot;); Perl furnishes the &lt;code&gt;\X&lt;/code&gt; regular expression construct to match such sequences in their entirety.</source>
          <target state="translated">. There are many possibilities among the world's languages. The number of combinations is astronomical, and if there were a character for each combination, it would soon exhaust Unicode's more than a million possible characters. So Unicode took a different approach: there is a character for the base &lt;code&gt;H&lt;/code&gt; , and a character for each of the possible marks, and these can be variously combined to get a final logical character. So a logical character--what appears to be a single character--can be a sequence of more than one individual characters. The Unicode standard calls these &quot;extended grapheme clusters&quot; (which is an improved version of the no-longer much used &quot;grapheme cluster&quot;); Perl furnishes the &lt;code&gt;\X&lt;/code&gt; regular expression construct to match such sequences in their entirety.</target>
        </trans-unit>
        <trans-unit id="1eadc7716975de872df1e240fa5e27efd9843f58" translate="yes" xml:space="preserve">
          <source>. There are quite a few result types available; choosing which class to use is the responsibility of the</source>
          <target state="translated">. There are quite a few result types available; choosing which class to use is the responsibility of the</target>
        </trans-unit>
        <trans-unit id="fc1d774c15da48c7b41ed72cf330c112b7557d27" translate="yes" xml:space="preserve">
          <source>. There is no expectation that a module under</source>
          <target state="translated">. There is no expectation that a module under</target>
        </trans-unit>
        <trans-unit id="f07748882481b43ba802e33458c4f0da3c02f2d4" translate="yes" xml:space="preserve">
          <source>. There is no limit to the number of captured substrings that you may use. Groups are numbered with the leftmost open parenthesis being number 1, etc. If a group did not match, the associated backreference won't match either. (This can happen if the group is optional, or in a different branch of an alternation.) You can omit the &lt;code&gt;&quot;g&quot;&lt;/code&gt; , and write &lt;code&gt;&quot;\1&quot;&lt;/code&gt; , etc, but there are some issues with this form, described below.</source>
          <target state="translated">. There is no limit to the number of captured substrings that you may use. Groups are numbered with the leftmost open parenthesis being number 1, etc. If a group did not match, the associated backreference won't match either. (This can happen if the group is optional, or in a different branch of an alternation.) You can omit the &lt;code&gt;&quot;g&quot;&lt;/code&gt; , and write &lt;code&gt;&quot;\1&quot;&lt;/code&gt; , etc, but there are some issues with this form, described below.</target>
        </trans-unit>
        <trans-unit id="eb3ae656b3d4dccde9a6b843783f9804004492bc" translate="yes" xml:space="preserve">
          <source>. There is some naming convention which allows Perl to distinguish correct lines from wrong ones. The above names are almost the only names allowed by this convention which do not contain digits (which have absolutely different semantics).</source>
          <target state="translated">. There is some naming convention which allows Perl to distinguish correct lines from wrong ones. The above names are almost the only names allowed by this convention which do not contain digits (which have absolutely different semantics).</target>
        </trans-unit>
        <trans-unit id="70ae579c941e1b2af83331b8b0575b24042dac0b" translate="yes" xml:space="preserve">
          <source>. Therefore data in these fields should NOT be used for dynamic (user-side) configuration.</source>
          <target state="translated">. Therefore data in these fields should NOT be used for dynamic (user-side) configuration.</target>
        </trans-unit>
        <trans-unit id="df7a4d889790cf742e680d4d6efa4fd1ee3dd47f" translate="yes" xml:space="preserve">
          <source>. These are extensions to the traditional regular expression syntax that provide powerful new tools for pattern matching. We have already seen extensions in the form of the minimal matching constructs &lt;code&gt;??&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}?&lt;/code&gt;, and &lt;code&gt;{n,}?&lt;/code&gt;. Most of the extensions below have the form &lt;code&gt;(?char...)&lt;/code&gt;, where the &lt;code&gt;char&lt;/code&gt; is a character that determines the type of extension.</source>
          <target state="translated">. These are extensions to the traditional regular expression syntax that provide powerful new tools for pattern matching. We have already seen extensions in the form of the minimal matching constructs &lt;code&gt;??&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}?&lt;/code&gt;, and &lt;code&gt;{n,}?&lt;/code&gt;. Most of the extensions below have the form &lt;code&gt;(?char...)&lt;/code&gt;, where the &lt;code&gt;char&lt;/code&gt; is a character that determines the type of extension.</target>
        </trans-unit>
        <trans-unit id="d0fe671376fe423873e5083176cea32f8c57ff41" translate="yes" xml:space="preserve">
          <source>. These are old libraries supplied so that old programs that use them still run. The</source>
          <target state="translated">. These are old libraries supplied so that old programs that use them still run. The</target>
        </trans-unit>
        <trans-unit id="8364539299fc6e8e877e8a93bec948c2c56a9805" translate="yes" xml:space="preserve">
          <source>. These days, your best bet is to look at the &lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;Expect&lt;/a&gt; module available from CPAN, which also requires two other modules from CPAN, &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Pty&quot;&gt;IO::Pty&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Stty&quot;&gt;IO::Stty&lt;/a&gt;.</source>
          <target state="translated">. These days, your best bet is to look at the &lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;Expect&lt;/a&gt; module available from CPAN, which also requires two other modules from CPAN, &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Pty&quot;&gt;IO::Pty&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Stty&quot;&gt;IO::Stty&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ba6b2c48d03193d3763913a4f9e3d93618b2d213" translate="yes" xml:space="preserve">
          <source>. These octets are interpreted as either UTF-8 or Latin-1, according to whether the &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; flag is set in</source>
          <target state="translated">. These octets are interpreted as either UTF-8 or Latin-1, according to whether the &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; flag is set in</target>
        </trans-unit>
        <trans-unit id="6319b650504012b1b53a50eecb57429c0a9dcfe4" translate="yes" xml:space="preserve">
          <source>. They are almost like subclasses in that they have the same fields as &lt;code&gt;regnode&lt;/code&gt; , with possibly additional fields following in the structure, and in some cases the specific meaning (and name) of some of base fields are overridden. The following is a more complete description.</source>
          <target state="translated">. They are almost like subclasses in that they have the same fields as &lt;code&gt;regnode&lt;/code&gt; , with possibly additional fields following in the structure, and in some cases the specific meaning (and name) of some of base fields are overridden. The following is a more complete description.</target>
        </trans-unit>
        <trans-unit id="57272a6cda3a773fa9ad5fcdc0dbe778246cc48b" translate="yes" xml:space="preserve">
          <source>. They need the braces, so are written as &lt;code&gt;/\p{Ll}/&lt;/code&gt; or &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt; , or &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; (the underscores are optional). &lt;code&gt;/\pLl/&lt;/code&gt; is valid, but means something different. It matches a two character string: a letter (Unicode property &lt;code&gt;\pL&lt;/code&gt; ), followed by a lowercase &lt;code&gt;l&lt;/code&gt; .</source>
          <target state="translated">. They need the braces, so are written as &lt;code&gt;/\p{Ll}/&lt;/code&gt; or &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt; , or &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; (the underscores are optional). &lt;code&gt;/\pLl/&lt;/code&gt; is valid, but means something different. It matches a two character string: a letter (Unicode property &lt;code&gt;\pL&lt;/code&gt; ), followed by a lowercase &lt;code&gt;l&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c18a582b7f92b4f78c23e95b1cf02accd986e21b" translate="yes" xml:space="preserve">
          <source>. This C code is places at the start of a block, so you can declare variables in it.</source>
          <target state="translated">. This C code is places at the start of a block, so you can declare variables in it.</target>
        </trans-unit>
        <trans-unit id="80f4d13b8729ed274f6a8a631317728de1b0336d" translate="yes" xml:space="preserve">
          <source>. This advances &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; to match</source>
          <target state="translated">. This advances &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; to match</target>
        </trans-unit>
        <trans-unit id="b35fcf8a74bd022a9580104a744f0bdc08475a29" translate="yes" xml:space="preserve">
          <source>. This affects Perl's &lt;code&gt;\w&lt;/code&gt; regular expression metanotation, which stands for alphanumeric characters--that is, alphabetic, numeric, and the platform's native underscore. (Consult &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for more information about regular expressions.) Thanks to &lt;code&gt;LC_CTYPE&lt;/code&gt; , depending on your locale setting, characters like &quot;&amp;aelig;&quot;, &quot;&amp;eth;&quot;, &quot;&amp;szlig;&quot;, and &quot;&amp;oslash;&quot; may be understood as &lt;code&gt;\w&lt;/code&gt; characters. It also affects things like &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\D&lt;/code&gt; , and the POSIX character classes, like &lt;code&gt;[[:graph:]]&lt;/code&gt; . (See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; for more information on all these.)</source>
          <target state="translated">. This affects Perl's &lt;code&gt;\w&lt;/code&gt; regular expression metanotation, which stands for alphanumeric characters--that is, alphabetic, numeric, and the platform's native underscore. (Consult &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for more information about regular expressions.) Thanks to &lt;code&gt;LC_CTYPE&lt;/code&gt; , depending on your locale setting, characters like &quot;&amp;aelig;&quot;, &quot;&amp;eth;&quot;, &quot;&amp;szlig;&quot;, and &quot;&amp;oslash;&quot; may be understood as &lt;code&gt;\w&lt;/code&gt; characters. It also affects things like &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\D&lt;/code&gt; , and the POSIX character classes, like &lt;code&gt;[[:graph:]]&lt;/code&gt; . (See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; for more information on all these.)</target>
        </trans-unit>
        <trans-unit id="50585be931797e352a16a31cff946364d2998523" translate="yes" xml:space="preserve">
          <source>. This construct is useful for optimizations of what would otherwise be &quot;eternal&quot; matches, because it will not backtrack (see &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). It may also be useful in places where the &quot;grab all you can, and do not give anything back&quot; semantic is desirable.</source>
          <target state="translated">. This construct is useful for optimizations of what would otherwise be &quot;eternal&quot; matches, because it will not backtrack (see &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). It may also be useful in places where the &quot;grab all you can, and do not give anything back&quot; semantic is desirable.</target>
        </trans-unit>
        <trans-unit id="5dbb5bbf55288455005a9b2624554c934ac032cd" translate="yes" xml:space="preserve">
          <source>. This entered computer lingo via the paper &quot;On Holy Wars and a Plea for Peace&quot; by Danny Cohen, USC/ISI IEN 137, April 1, 1980.</source>
          <target state="translated">. This entered computer lingo via the paper &quot;On Holy Wars and a Plea for Peace&quot; by Danny Cohen, USC/ISI IEN 137, April 1, 1980.</target>
        </trans-unit>
        <trans-unit id="3809e0e62de48ea8f912fa229a3b1c19f17c36c5" translate="yes" xml:space="preserve">
          <source>. This file acts as both forward declaration of all package routines, and as timestamp for the last update of the hierarchy.</source>
          <target state="translated">. This file acts as both forward declaration of all package routines, and as timestamp for the last update of the hierarchy.</target>
        </trans-unit>
        <trans-unit id="47f0695b79e4a62f046bf4d6a56dc69b6e31a2b7" translate="yes" xml:space="preserve">
          <source>. This file resides somewhere deep in the location you installed your perl library, find it out by</source>
          <target state="translated">. This file resides somewhere deep in the location you installed your perl library, find it out by</target>
        </trans-unit>
        <trans-unit id="ae2be3d4dab06ff8de1c3af65b87672a1f250c96" translate="yes" xml:space="preserve">
          <source>. This gives one an access to EMX's</source>
          <target state="translated">. This gives one an access to EMX's</target>
        </trans-unit>
        <trans-unit id="46aab4ac7dc98f7e211f64d569ae1ce3a7b4af8a" translate="yes" xml:space="preserve">
          <source>. This includes methods inherited or imported by &lt;code&gt;$obj&lt;/code&gt; , &lt;code&gt;CLASS&lt;/code&gt; , or &lt;code&gt;VAL&lt;/code&gt; .</source>
          <target state="translated">. This includes methods inherited or imported by &lt;code&gt;$obj&lt;/code&gt; , &lt;code&gt;CLASS&lt;/code&gt; , or &lt;code&gt;VAL&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d85307dde9a09b32449c60a5313b98a5973ff2c7" translate="yes" xml:space="preserve">
          <source>. This is a private hash where every object is stored. An &quot;object&quot; in this sense is any reference (blessed or unblessed) that has been used as a field hash key.</source>
          <target state="translated">. This is a private hash where every object is stored. An &quot;object&quot; in this sense is any reference (blessed or unblessed) that has been used as a field hash key.</target>
        </trans-unit>
        <trans-unit id="a2cdaa392edbf49e429fe1dc9214079db19f181c" translate="yes" xml:space="preserve">
          <source>. This is a special file already opened on the script, so that there can be no race condition for evil scripts to exploit. On these systems, Perl should be compiled with &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; . The</source>
          <target state="translated">. This is a special file already opened on the script, so that there can be no race condition for evil scripts to exploit. On these systems, Perl should be compiled with &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; . The</target>
        </trans-unit>
        <trans-unit id="a2864f51e0809a4502605d91af0e78f8003a6b91" translate="yes" xml:space="preserve">
          <source>. This is because 66 code points will always be unassigned, and so the &lt;code&gt;Age&lt;/code&gt; for them is the Unicode version in which the decision to make them so was made. For example, &lt;code&gt;U+FDD0&lt;/code&gt; is to be permanently unassigned to a character, and the decision to do that was made in version 3.1, so &lt;code&gt;\p{Age=3.1}&lt;/code&gt; matches this character, as also does &lt;code&gt;\p{Present_In: 3.1}&lt;/code&gt; and up.</source>
          <target state="translated">. This is because 66 code points will always be unassigned, and so the &lt;code&gt;Age&lt;/code&gt; for them is the Unicode version in which the decision to make them so was made. For example, &lt;code&gt;U+FDD0&lt;/code&gt; is to be permanently unassigned to a character, and the decision to do that was made in version 3.1, so &lt;code&gt;\p{Age=3.1}&lt;/code&gt; matches this character, as also does &lt;code&gt;\p{Present_In: 3.1}&lt;/code&gt; and up.</target>
        </trans-unit>
        <trans-unit id="bdf07babd3552a309bc961c0381ffe7de7e8f022" translate="yes" xml:space="preserve">
          <source>. This is because the makefile by default sets the drive letter to</source>
          <target state="translated">. This is because the makefile by default sets the drive letter to</target>
        </trans-unit>
        <trans-unit id="fc454fe001d6d36df58e092c61a2198720958a66" translate="yes" xml:space="preserve">
          <source>. This is because there is a conflict with a similarly-named file</source>
          <target state="translated">. This is because there is a conflict with a similarly-named file</target>
        </trans-unit>
        <trans-unit id="2a6af843b3f9c3758afa449207e6300ed8332e2a" translate="yes" xml:space="preserve">
          <source>. This is by design. If</source>
          <target state="translated">. This is by design. If</target>
        </trans-unit>
        <trans-unit id="93f5f59e9c411bf2b79d7d72c3b74942de22a532" translate="yes" xml:space="preserve">
          <source>. This is copied under the</source>
          <target state="translated">. This is copied under the</target>
        </trans-unit>
        <trans-unit id="4dd3c68fa5c32e16e123eaa693e773f653650f36" translate="yes" xml:space="preserve">
          <source>. This is currently only supported for &lt;code&gt;GNU&lt;/code&gt; ld on &lt;code&gt;ELF&lt;/code&gt; in dynamic loading builds.</source>
          <target state="translated">. This is currently only supported for &lt;code&gt;GNU&lt;/code&gt; ld on &lt;code&gt;ELF&lt;/code&gt; in dynamic loading builds.</target>
        </trans-unit>
        <trans-unit id="e7af8025fe87d5aab31b7a47c749ea1a87fce0d6" translate="yes" xml:space="preserve">
          <source>. This is done at run-time, so is called dynamic scoping. local() always affects global variables, also called package variables or dynamic variables.</source>
          <target state="translated">. This is done at run-time, so is called dynamic scoping. local() always affects global variables, also called package variables or dynamic variables.</target>
        </trans-unit>
        <trans-unit id="4c25e02bad7d2cac773965d696d2c2a687ad78e4" translate="yes" xml:space="preserve">
          <source>. This is done from</source>
          <target state="translated">. This is done from</target>
        </trans-unit>
        <trans-unit id="b27ee6639c423265aa7d8874b0268983c66fc9bf" translate="yes" xml:space="preserve">
          <source>. This is installed again by running &lt;code&gt;cpan Bundle::Snapshot_2012_05_21_00&lt;/code&gt; , or installing &lt;code&gt;Bundle::Snapshot_2012_05_21_00&lt;/code&gt; from the CPAN shell.</source>
          <target state="translated">. This is installed again by running &lt;code&gt;cpan Bundle::Snapshot_2012_05_21_00&lt;/code&gt; , or installing &lt;code&gt;Bundle::Snapshot_2012_05_21_00&lt;/code&gt; from the CPAN shell.</target>
        </trans-unit>
        <trans-unit id="3823ddaf1238d01760d00a61d4a308fff63739d8" translate="yes" xml:space="preserve">
          <source>. This is normal and expected. (There is a conflict with a similarly-named file</source>
          <target state="translated">. This is normal and expected. (There is a conflict with a similarly-named file</target>
        </trans-unit>
        <trans-unit id="58c655d0e38e80b9ecc3fca4e245f5ce10c2d9a2" translate="yes" xml:space="preserve">
          <source>. This is probably OK, as most perl scripts shipped with Solaris use an explicit path. (There are a few exceptions, such as</source>
          <target state="translated">. This is probably OK, as most perl scripts shipped with Solaris use an explicit path. (There are a few exceptions, such as</target>
        </trans-unit>
        <trans-unit id="0e883175469b1c783e8a78114606c2d561139be6" translate="yes" xml:space="preserve">
          <source>. This is rarely needed, as Perl manages its memory quite well. But the option exists, should a class wish to perform specific actions upon the destruction of an instance.</source>
          <target state="translated">. This is rarely needed, as Perl manages its memory quite well. But the option exists, should a class wish to perform specific actions upon the destruction of an instance.</target>
        </trans-unit>
        <trans-unit id="333093d5d5321fc34ce46ed78526668442668aef" translate="yes" xml:space="preserve">
          <source>. This is similar to &lt;code&gt;sv_2mortal&lt;/code&gt; in that it is also a mechanism for doing a delayed &lt;code&gt;SvREFCNT_dec&lt;/code&gt; . However, while &lt;code&gt;sv_2mortal&lt;/code&gt; extends the lifetime of &lt;code&gt;sv&lt;/code&gt; until the beginning of the next statement, &lt;code&gt;SAVEFREESV&lt;/code&gt; extends it until the end of the enclosing scope. These lifetimes can be wildly different.</source>
          <target state="translated">. This is similar to &lt;code&gt;sv_2mortal&lt;/code&gt; in that it is also a mechanism for doing a delayed &lt;code&gt;SvREFCNT_dec&lt;/code&gt; . However, while &lt;code&gt;sv_2mortal&lt;/code&gt; extends the lifetime of &lt;code&gt;sv&lt;/code&gt; until the beginning of the next statement, &lt;code&gt;SAVEFREESV&lt;/code&gt; extends it until the end of the enclosing scope. These lifetimes can be wildly different.</target>
        </trans-unit>
        <trans-unit id="6926c3ac4d7edc58bc3ea380b4d2d54d9f28838f" translate="yes" xml:space="preserve">
          <source>. This macro evaluates its arguments more than once. If you are using &lt;code&gt;Perl_custom_op_xop&lt;/code&gt; to retreive a &lt;code&gt;XOP *&lt;/code&gt; from a &lt;code&gt;OP *&lt;/code&gt; , use the more efficient &lt;a href=&quot;#XopENTRYCUSTOM&quot;&gt;XopENTRYCUSTOM&lt;/a&gt; instead.</source>
          <target state="translated">. This macro evaluates its arguments more than once. If you are using &lt;code&gt;Perl_custom_op_xop&lt;/code&gt; to retreive a &lt;code&gt;XOP *&lt;/code&gt; from a &lt;code&gt;OP *&lt;/code&gt; , use the more efficient &lt;a href=&quot;#XopENTRYCUSTOM&quot;&gt;XopENTRYCUSTOM&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ca414c709e1a90a43e4a8b465a788e53c69235fb" translate="yes" xml:space="preserve">
          <source>. This may be useful e.g., if you need to run the installer many times and do not want to make many interactive changes in the GUI.</source>
          <target state="translated">. This may be useful e.g., if you need to run the installer many times and do not want to make many interactive changes in the GUI.</target>
        </trans-unit>
        <trans-unit id="e3776f3fabf7ab606cceb1e6f3f63ecb05da2010" translate="yes" xml:space="preserve">
          <source>. This means that if you have already detected the error by checking &lt;code&gt;$@&lt;/code&gt; and you want the program to continue, you must remember to pop the</source>
          <target state="translated">. This means that if you have already detected the error by checking &lt;code&gt;$@&lt;/code&gt; and you want the program to continue, you must remember to pop the</target>
        </trans-unit>
        <trans-unit id="b2c905e3737670dc0a16e9b65486ea71a8080a95" translate="yes" xml:space="preserve">
          <source>. This means that in &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x = 1 + $x&lt;/code&gt; the second $x refers to one declared previously.</source>
          <target state="translated">. This means that in &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x = 1 + $x&lt;/code&gt; the second $x refers to one declared previously.</target>
        </trans-unit>
        <trans-unit id="509c15e768544bbfe8e2f5cd7ea999c647b19bd3" translate="yes" xml:space="preserve">
          <source>. This means that the my() variable is remade afresh each time through the loop. So even though it</source>
          <target state="translated">. This means that the my() variable is remade afresh each time through the loop. So even though it</target>
        </trans-unit>
        <trans-unit id="fe09c13d6e77d9b5618869e0a4e90a8dc9147143" translate="yes" xml:space="preserve">
          <source>. This means that when the scope of the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; ends, the saved value will be restored to the hash element whose key was named in the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt;, or the array element whose index was named in the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt;. If that element was deleted while the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; was in effect (e.g. by a &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete()&lt;/a&gt;&lt;/code&gt; from a hash or a &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift()&lt;/a&gt;&lt;/code&gt; of an array), it will spring back into existence, possibly extending an array and filling in the skipped elements with &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. For instance, if you say</source>
          <target state="translated">. This means that when the scope of the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; ends, the saved value will be restored to the hash element whose key was named in the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt;, or the array element whose index was named in the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt;. If that element was deleted while the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; was in effect (e.g. by a &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete()&lt;/a&gt;&lt;/code&gt; from a hash or a &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift()&lt;/a&gt;&lt;/code&gt; of an array), it will spring back into existence, possibly extending an array and filling in the skipped elements with &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. For instance, if you say</target>
        </trans-unit>
        <trans-unit id="2a5686773a218be3c431ba0259971d1df05369e0" translate="yes" xml:space="preserve">
          <source>. This means that you do not have</source>
          <target state="translated">. This means that you do not have</target>
        </trans-unit>
        <trans-unit id="3bc3229b9fe446d29363a15b982307c27bf373f3" translate="yes" xml:space="preserve">
          <source>. This means you can say</source>
          <target state="translated">. This means you can say</target>
        </trans-unit>
        <trans-unit id="8a96e246a31c1137abbe0058f53817db4b0cfdb5" translate="yes" xml:space="preserve">
          <source>. This option may be given multiple times on the command line.</source>
          <target state="translated">. This option may be given multiple times on the command line.</target>
        </trans-unit>
        <trans-unit id="7f21c464f22992c54b3a847db0212c469aa75655" translate="yes" xml:space="preserve">
          <source>. This parameter operates just like the replacement part of a substitute command. The difference is that the &lt;code&gt;#1&lt;/code&gt; syntax is used to reference sub-patterns matched in the input fileglob, rather than the &lt;code&gt;$1&lt;/code&gt; syntax that is used with perl regular expressions. In this case &lt;code&gt;#1&lt;/code&gt; is used to refer to the text matched by the &lt;code&gt;*&lt;/code&gt; in the Input File Glob. This makes it easier to use this module where the parameters to &lt;code&gt;globmap&lt;/code&gt; are typed at the command line.</source>
          <target state="translated">. This parameter operates just like the replacement part of a substitute command. The difference is that the &lt;code&gt;#1&lt;/code&gt; syntax is used to reference sub-patterns matched in the input fileglob, rather than the &lt;code&gt;$1&lt;/code&gt; syntax that is used with perl regular expressions. In this case &lt;code&gt;#1&lt;/code&gt; is used to refer to the text matched by the &lt;code&gt;*&lt;/code&gt; in the Input File Glob. This makes it easier to use this module where the parameters to &lt;code&gt;globmap&lt;/code&gt; are typed at the command line.</target>
        </trans-unit>
        <trans-unit id="5b35f1876404589d6fbdcdf4d784638b587a2f0e" translate="yes" xml:space="preserve">
          <source>. This port was based on contents of</source>
          <target state="translated">. This port was based on contents of</target>
        </trans-unit>
        <trans-unit id="3121446ddb40369e1367ab1574d37848cdafd685" translate="yes" xml:space="preserve">
          <source>. This represents a &quot;logical character&quot;: what appears to be a single character, but may be represented internally by more than one. As an example, using the Unicode full names, e.g., &lt;code&gt;A + COMBINING
RING&lt;/code&gt; is a grapheme cluster with base character &lt;code&gt;A&lt;/code&gt; and combining character &lt;code&gt;COMBINING RING&lt;/code&gt; , which translates in Danish to A with the circle atop it, as in the word &amp;Aring;ngstrom.</source>
          <target state="translated">. This represents a &quot;logical character&quot;: what appears to be a single character, but may be represented internally by more than one. As an example, using the Unicode full names, e.g., &lt;code&gt;A + COMBINING
RING&lt;/code&gt; is a grapheme cluster with base character &lt;code&gt;A&lt;/code&gt; and combining character &lt;code&gt;COMBINING RING&lt;/code&gt; , which translates in Danish to A with the circle atop it, as in the word &amp;Aring;ngstrom.</target>
        </trans-unit>
        <trans-unit id="f186a667f9cbb4f0ff8bf9acb24964ca740a0ce7" translate="yes" xml:space="preserve">
          <source>. This should be set to the number of gigabytes of memory available for testing, eg. &lt;code&gt;PERL_TEST_MEMORY=4&lt;/code&gt; indicates that tests that require 4GiB of available memory can be run safely.</source>
          <target state="translated">. This should be set to the number of gigabytes of memory available for testing, eg. &lt;code&gt;PERL_TEST_MEMORY=4&lt;/code&gt; indicates that tests that require 4GiB of available memory can be run safely.</target>
        </trans-unit>
        <trans-unit id="fe1d3c4eb3ad243fd160d1a59490970dd0104a15" translate="yes" xml:space="preserve">
          <source>. This unit comes before</source>
          <target state="translated">. This unit comes before</target>
        </trans-unit>
        <trans-unit id="86ececb0158a7a68e96b05ebdb48374eef85420b" translate="yes" xml:space="preserve">
          <source>. This will be misleading if &lt;code&gt;FLAGS &amp;amp; SVf_IVisUV&lt;/code&gt; . Perhaps you want the &lt;code&gt;int_value&lt;/code&gt; method instead?</source>
          <target state="translated">. This will be misleading if &lt;code&gt;FLAGS &amp;amp; SVf_IVisUV&lt;/code&gt; . Perhaps you want the &lt;code&gt;int_value&lt;/code&gt; method instead?</target>
        </trans-unit>
        <trans-unit id="994a1e67d1470d3f00c9b8744c3f70f33aeecd2f" translate="yes" xml:space="preserve">
          <source>. This will match one of the keys in the hash returned by &lt;a href=&quot;#bidi_types()&quot;&gt;bidi_types()&lt;/a&gt;.</source>
          <target state="translated">. This will match one of the keys in the hash returned by &lt;a href=&quot;#bidi_types()&quot;&gt;bidi_types()&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f5b2cd03cbc625e84164ab17288c6ed1f4a26da" translate="yes" xml:space="preserve">
          <source>. This will match one of the keys in the hash returned by &lt;a href=&quot;#general_categories()&quot;&gt;general_categories()&lt;/a&gt;.</source>
          <target state="translated">. This will match one of the keys in the hash returned by &lt;a href=&quot;#general_categories()&quot;&gt;general_categories()&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="de138c9795e8525fb580319005864dcc2d56600a" translate="yes" xml:space="preserve">
          <source>. This works well when you have multiple modules to work with. It also ensures that the module goes through its full installation process which may modify it.</source>
          <target state="translated">. This works well when you have multiple modules to work with. It also ensures that the module goes through its full installation process which may modify it.</target>
        </trans-unit>
        <trans-unit id="c1c277971953cbe2cdf771f2279dd9ed07df47ea" translate="yes" xml:space="preserve">
          <source>. Thus the accessor expression &lt;code&gt;$$foo-&amp;gt;[$ind]&lt;/code&gt; involves no overloaded operations.</source>
          <target state="translated">. Thus the accessor expression &lt;code&gt;$$foo-&amp;gt;[$ind]&lt;/code&gt; involves no overloaded operations.</target>
        </trans-unit>
        <trans-unit id="376ae4142275d20cee208841b1851cc5450412ed" translate="yes" xml:space="preserve">
          <source>. To check derivation at the Perl level, call &lt;code&gt;isa()&lt;/code&gt; as a normal Perl method.</source>
          <target state="translated">. To check derivation at the Perl level, call &lt;code&gt;isa()&lt;/code&gt; as a normal Perl method.</target>
        </trans-unit>
        <trans-unit id="2afe698aa7faacc5ec799e7275adcb5987ccef15" translate="yes" xml:space="preserve">
          <source>. To decode, you have to know what encoding was used during the encoding phase. And most of all, it must be something decodable. It doesn't make much sense to decode a PNG image into a text string.</source>
          <target state="translated">. To decode, you have to know what encoding was used during the encoding phase. And most of all, it must be something decodable. It doesn't make much sense to decode a PNG image into a text string.</target>
        </trans-unit>
        <trans-unit id="98e9ceac44f5e5ada5b2cc667998516912128c21" translate="yes" xml:space="preserve">
          <source>. To encode, you have to supply the target encoding, for example &lt;code&gt;iso-8859-1&lt;/code&gt; or &lt;code&gt;UTF-8&lt;/code&gt; . Some encodings, like the &lt;code&gt;iso-8859&lt;/code&gt; (&quot;latin&quot;) range, do not support the full Unicode standard; characters that can't be represented are lost in the conversion.</source>
          <target state="translated">. To encode, you have to supply the target encoding, for example &lt;code&gt;iso-8859-1&lt;/code&gt; or &lt;code&gt;UTF-8&lt;/code&gt; . Some encodings, like the &lt;code&gt;iso-8859&lt;/code&gt; (&quot;latin&quot;) range, do not support the full Unicode standard; characters that can't be represented are lost in the conversion.</target>
        </trans-unit>
        <trans-unit id="c9c13046b9d8e816b17632bdae397e4cabc4ff99" translate="yes" xml:space="preserve">
          <source>. To explain why we made it so, I quote from page 402 of</source>
          <target state="translated">. To explain why we made it so, I quote from page 402 of</target>
        </trans-unit>
        <trans-unit id="a642717c0a7bd1553f08f955b5e1a98b9614944d" translate="yes" xml:space="preserve">
          <source>. To reflect its enhanced role, the filter is called &lt;code&gt;Subst&lt;/code&gt; .</source>
          <target state="translated">. To reflect its enhanced role, the filter is called &lt;code&gt;Subst&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3f01500276b8b64e9b93faad15a87228988964c" translate="yes" xml:space="preserve">
          <source>. Type</source>
          <target state="translated">. Type</target>
        </trans-unit>
        <trans-unit id="293d96ef1af5df6e9a25f434c724eaa7d617b1a7" translate="yes" xml:space="preserve">
          <source>. Using &lt;code&gt;PREREQ_FATAL&lt;/code&gt; breaks this. That's bad.</source>
          <target state="translated">. Using &lt;code&gt;PREREQ_FATAL&lt;/code&gt; breaks this. That's bad.</target>
        </trans-unit>
        <trans-unit id="23f91c0ba1e361cffc5fab5e3a44cd400b9fc5ad" translate="yes" xml:space="preserve">
          <source>. Value can be &quot;&quot; or</source>
          <target state="translated">. Value can be &quot;&quot; or</target>
        </trans-unit>
        <trans-unit id="231d3dbe354e5fa106e42fb41037db896ce22d5c" translate="yes" xml:space="preserve">
          <source>. We originally forgot the extra</source>
          <target state="translated">. We originally forgot the extra</target>
        </trans-unit>
        <trans-unit id="96ed60476229df2a07cbee9344c86b1bf229527f" translate="yes" xml:space="preserve">
          <source>. What then happens in these failure conditions, depends on the $lh object's &quot;fail&quot; attribute.</source>
          <target state="translated">. What then happens in these failure conditions, depends on the $lh object's &quot;fail&quot; attribute.</target>
        </trans-unit>
        <trans-unit id="bd400ca1ce95a5dc0f047f0b1aec57f47b38a4c2" translate="yes" xml:space="preserve">
          <source>. What's that, you ask? Perl is itself written in C; the perl library is the collection of compiled C programs that were used to create your perl executable (</source>
          <target state="translated">. What's that, you ask? Perl is itself written in C; the perl library is the collection of compiled C programs that were used to create your perl executable (</target>
        </trans-unit>
        <trans-unit id="4dd3f5efe1f95b600d00881eb6c9596353497a30" translate="yes" xml:space="preserve">
          <source>. When a surrogate pair is encountered during decode(), its place is filled with \x{FFFD} if</source>
          <target state="translated">. When a surrogate pair is encountered during decode(), its place is filled with \x{FFFD} if</target>
        </trans-unit>
        <trans-unit id="0274262026ff4daab22f506deff822c9bff4d353" translate="yes" xml:space="preserve">
          <source>. When it encounters a high surrogate (0xD800-0xDBFF), it fetches the following low surrogate (0xDC00-0xDFFF) and &lt;code&gt;desurrogate&lt;/code&gt; s them to form a character. Bogus surrogates result in death. When \x{10000} or above is encountered during encode(), it &lt;code&gt;ensurrogate&lt;/code&gt; s them and pushes the surrogate pair to the output stream.</source>
          <target state="translated">. When it encounters a high surrogate (0xD800-0xDBFF), it fetches the following low surrogate (0xDC00-0xDFFF) and &lt;code&gt;desurrogate&lt;/code&gt; s them to form a character. Bogus surrogates result in death. When \x{10000} or above is encountered during encode(), it &lt;code&gt;ensurrogate&lt;/code&gt; s them and pushes the surrogate pair to the output stream.</target>
        </trans-unit>
        <trans-unit id="ea023ffcde1e861a026a8f936e5d329dad6f499c" translate="yes" xml:space="preserve">
          <source>. When perl exits, cleanly or not, the original</source>
          <target state="translated">. When perl exits, cleanly or not, the original</target>
        </trans-unit>
        <trans-unit id="62e9134eebcb776632e22e8c2f0f31421f73f61a" translate="yes" xml:space="preserve">
          <source>. When using a delimiter character valid in an identifier, whitespace is required after the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">. When using a delimiter character valid in an identifier, whitespace is required after the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="2991c5c2aabb888a3252817b3e6b994e23bac220" translate="yes" xml:space="preserve">
          <source>. When using a hash to store options, the key will always be the primary name.</source>
          <target state="translated">. When using a hash to store options, the key will always be the primary name.</target>
        </trans-unit>
        <trans-unit id="7929cfa2bae05685d9a96bfd0b2ce0636b21e809" translate="yes" xml:space="preserve">
          <source>. When you encode,</source>
          <target state="translated">. When you encode,</target>
        </trans-unit>
        <trans-unit id="2c33b2cf8be422451d2c79b44382899c032db18c" translate="yes" xml:space="preserve">
          <source>. While it's possible to put the image in</source>
          <target state="translated">. While it's possible to put the image in</target>
        </trans-unit>
        <trans-unit id="b6eff3deb0f158948019f15b9ed96ddaede3980f" translate="yes" xml:space="preserve">
          <source>. While the command is running, a $SIG{INT} exits the loop after displaying the current item.</source>
          <target state="translated">. While the command is running, a $SIG{INT} exits the loop after displaying the current item.</target>
        </trans-unit>
        <trans-unit id="fac11c14e9cfa1dd621203398341128a51774857" translate="yes" xml:space="preserve">
          <source>. Without a BLOCK it's just a forward declaration. Without a NAME, it's an anonymous function declaration, so does return a value: the CODE ref of the closure just created.</source>
          <target state="translated">. Without a BLOCK it's just a forward declaration. Without a NAME, it's an anonymous function declaration, so does return a value: the CODE ref of the closure just created.</target>
        </trans-unit>
        <trans-unit id="84c0c40278d089a43554ff57b285f3f877a690b4" translate="yes" xml:space="preserve">
          <source>. Without this option, the manual name is set to the uppercased base name of the file being converted unless the manual section is 3, in which case the path is parsed to see if it is a Perl module path. If it is, a path like &lt;code&gt;.../lib/Pod/Man.pm&lt;/code&gt; is converted into a name like &lt;code&gt;Pod::Man&lt;/code&gt; . This option, if given, overrides any automatic determination of the name.</source>
          <target state="translated">. Without this option, the manual name is set to the uppercased base name of the file being converted unless the manual section is 3, in which case the path is parsed to see if it is a Perl module path. If it is, a path like &lt;code&gt;.../lib/Pod/Man.pm&lt;/code&gt; is converted into a name like &lt;code&gt;Pod::Man&lt;/code&gt; . This option, if given, overrides any automatic determination of the name.</target>
        </trans-unit>
        <trans-unit id="ef3fb2dc3b8ce0d3b61795b7d246a387effb6099" translate="yes" xml:space="preserve">
          <source>. You can build a profiled version of</source>
          <target state="translated">. You can build a profiled version of</target>
        </trans-unit>
        <trans-unit id="4af4aa3082581b91fbccc276303d5e0e695fe0af" translate="yes" xml:space="preserve">
          <source>. You can configure them and load custom handlers using the &lt;code&gt;sources&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">. You can configure them and load custom handlers using the &lt;code&gt;sources&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dc3ecab6f4d3bd8009f72e7ec3770026656b25a2" translate="yes" xml:space="preserve">
          <source>. You can load custom formatters by using the &lt;code&gt;formatter_class&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;. To configure a formatter, you currently need to instantiate it outside of &lt;a href=&quot;harness&quot;&gt;TAP::Harness&lt;/a&gt; and pass it in with the &lt;code&gt;formatter&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;. This</source>
          <target state="translated">. You can load custom formatters by using the &lt;code&gt;formatter_class&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;. To configure a formatter, you currently need to instantiate it outside of &lt;a href=&quot;harness&quot;&gt;TAP::Harness&lt;/a&gt; and pass it in with the &lt;code&gt;formatter&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;. This</target>
        </trans-unit>
        <trans-unit id="7142228fad3a350d4ddbe84b65098ef6c9f3c82d" translate="yes" xml:space="preserve">
          <source>. You can't actually use the &lt;code&gt;&quot;Y&quot;&lt;/code&gt; and &lt;code&gt;&quot;N&lt;/code&gt; &quot; in them.</source>
          <target state="translated">. You can't actually use the &lt;code&gt;&quot;Y&quot;&lt;/code&gt; and &lt;code&gt;&quot;N&lt;/code&gt; &quot; in them.</target>
        </trans-unit>
        <trans-unit id="8649ddb5400406511f244299543a6403cfccc8a3" translate="yes" xml:space="preserve">
          <source>. You may discover compiled library files (usually ending in</source>
          <target state="translated">. You may discover compiled library files (usually ending in</target>
        </trans-unit>
        <trans-unit id="ffbebd700d3eb9227807825c379b6d6206d37f0f" translate="yes" xml:space="preserve">
          <source>. You may not like the colors I've chosen and I haven't yet provided an easy way to override them.</source>
          <target state="translated">. You may not like the colors I've chosen and I haven't yet provided an easy way to override them.</target>
        </trans-unit>
        <trans-unit id="2c9db0590acbab3da6c3b486f032903e6c187508" translate="yes" xml:space="preserve">
          <source>. You probably won't need to do this.</source>
          <target state="translated">. You probably won't need to do this.</target>
        </trans-unit>
        <trans-unit id="0c3214c77b19e989a43565fb9196ac768952f000" translate="yes" xml:space="preserve">
          <source>. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">. You will be notified automatically of any progress on your issue.</target>
        </trans-unit>
        <trans-unit id="b9e7d26642ff7b2d3481e00117ed3a228cbd5970" translate="yes" xml:space="preserve">
          <source>. Your system administrator needs to do the updating of the</source>
          <target state="translated">. Your system administrator needs to do the updating of the</target>
        </trans-unit>
        <trans-unit id="b94d932529ef0982db39280d52d9d6b0ed70565c" translate="yes" xml:space="preserve">
          <source>. [This may change in the future.]</source>
          <target state="translated">. [This may change in the future.]</target>
        </trans-unit>
        <trans-unit id="773261a82823f6262ce3d345b08189a976ee3539" translate="yes" xml:space="preserve">
          <source>. for older directories back to the limit specified by these api_ variables. This is only useful if you have a perl library directory tree structured like the default one. See &lt;code&gt;INSTALL&lt;/code&gt; for how this works. The versioned site_perl directory was introduced in 5.005, so that is the lowest possible value. The version list appropriate for the current system is determined in</source>
          <target state="translated">. for older directories back to the limit specified by these api_ variables. This is only useful if you have a perl library directory tree structured like the default one. See &lt;code&gt;INSTALL&lt;/code&gt; for how this works. The versioned site_perl directory was introduced in 5.005, so that is the lowest possible value. The version list appropriate for the current system is determined in</target>
        </trans-unit>
        <trans-unit id="94d64aa5e8ac2979b7183532e7251cb47f0120e5" translate="yes" xml:space="preserve">
          <source>. machine dependent floating point values.</source>
          <target state="translated">. machine dependent floating point values.</target>
        </trans-unit>
        <trans-unit id="2832b9a686e025a915af1c2fdddf8eeaf1e95af9" translate="yes" xml:space="preserve">
          <source>. suitable for starting sentences.</source>
          <target state="translated">. suitable for starting sentences.</target>
        </trans-unit>
        <trans-unit id="7dc33a4eee36533c54545a241123074cb3566ee0" translate="yes" xml:space="preserve">
          <source>.) (The sum of user time and system time is known as the</source>
          <target state="translated">.) (The sum of user time and system time is known as the</target>
        </trans-unit>
        <trans-unit id="00de140a7abe853d3f1dc175478e343bd14b372b" translate="yes" xml:space="preserve">
          <source>.) &lt;code&gt;SIGPROF&lt;/code&gt; is delivered when the timer expires. &lt;code&gt;SIGPROF&lt;/code&gt; can interrupt system calls.</source>
          <target state="translated">.) &lt;code&gt;SIGPROF&lt;/code&gt; is delivered when the timer expires. &lt;code&gt;SIGPROF&lt;/code&gt; can interrupt system calls.</target>
        </trans-unit>
        <trans-unit id="2b31054f5704230a5bec08949d15eb068845e4a0" translate="yes" xml:space="preserve">
          <source>.) &lt;code&gt;SIGVTALRM&lt;/code&gt; is delivered when the timer expires.</source>
          <target state="translated">.) &lt;code&gt;SIGVTALRM&lt;/code&gt; is delivered when the timer expires.</target>
        </trans-unit>
        <trans-unit id="7d4cb879abd948fd8f6f6ec2ac52e70b75438395" translate="yes" xml:space="preserve">
          <source>.) Consider this example of a processor for responses to French &quot;oui/non&quot; questions:</source>
          <target state="translated">.) Consider this example of a processor for responses to French &quot;oui/non&quot; questions:</target>
        </trans-unit>
        <trans-unit id="55c96f5da895d355dfe91bda682a5d356859a660" translate="yes" xml:space="preserve">
          <source>.) Perl lingo for implicit conversion into a number; the related verb is</source>
          <target state="translated">.) Perl lingo for implicit conversion into a number; the related verb is</target>
        </trans-unit>
        <trans-unit id="b93475399b9cb0b16773d996788214eaf0b681e3" translate="yes" xml:space="preserve">
          <source>.) Will raise a fatal exception if used on a machine that doesn't implement getpriority(2).</source>
          <target state="translated">.) Will raise a fatal exception if used on a machine that doesn't implement getpriority(2).</target>
        </trans-unit>
        <trans-unit id="7dd6e7fd8f9b5f85e01ec4e5265654e1001e224b" translate="yes" xml:space="preserve">
          <source>., are tainted if a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect, and the subpattern regular expression contains a locale-dependent construct. These constructs include &lt;code&gt;\w&lt;/code&gt; (to match an alphanumeric character), &lt;code&gt;\W&lt;/code&gt; (non-alphanumeric character), &lt;code&gt;\b&lt;/code&gt; and &lt;code&gt;\B&lt;/code&gt; (word-boundary and non-boundardy, which depend on what &lt;code&gt;\w&lt;/code&gt; and &lt;code&gt;\W&lt;/code&gt; match), &lt;code&gt;\s&lt;/code&gt; (whitespace character), &lt;code&gt;\S&lt;/code&gt; (non whitespace character), &lt;code&gt;\d&lt;/code&gt; and &lt;code&gt;\D&lt;/code&gt; (digits and non-digits), and the POSIX character classes, such as &lt;code&gt;[:alpha:]&lt;/code&gt; (see &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;).</source>
          <target state="translated">., are tainted if a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect, and the subpattern regular expression contains a locale-dependent construct. These constructs include &lt;code&gt;\w&lt;/code&gt; (to match an alphanumeric character), &lt;code&gt;\W&lt;/code&gt; (non-alphanumeric character), &lt;code&gt;\b&lt;/code&gt; and &lt;code&gt;\B&lt;/code&gt; (word-boundary and non-boundardy, which depend on what &lt;code&gt;\w&lt;/code&gt; and &lt;code&gt;\W&lt;/code&gt; match), &lt;code&gt;\s&lt;/code&gt; (whitespace character), &lt;code&gt;\S&lt;/code&gt; (non whitespace character), &lt;code&gt;\d&lt;/code&gt; and &lt;code&gt;\D&lt;/code&gt; (digits and non-digits), and the POSIX character classes, such as &lt;code&gt;[:alpha:]&lt;/code&gt; (see &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="6e59a1ab03cde47262e6c27971e4743e9af22f1e" translate="yes" xml:space="preserve">
          <source>... 1 10e004812:0082 Perl_croak util.c:1716 /usr/bin/perl 2 10df8d6d2:1d72 perl_parse perl.c:3975 /usr/bin/perl ...</source>
          <target state="translated">... 1 10e004812:0082 Perl_croak util.c:1716 /usr/bin/perl 2 10df8d6d2:1d72 perl_parse perl.c:3975 /usr/bin/perl ...</target>
        </trans-unit>
        <trans-unit id="364594d0431ef65e113f6cebf4b5cbc7c01e5c5b" translate="yes" xml:space="preserve">
          <source>... and run the script as</source>
          <target state="translated">... and run the script as</target>
        </trans-unit>
        <trans-unit id="d26f70a15839ea2f8c72c06151ad7587807c32dd" translate="yes" xml:space="preserve">
          <source>... except inside quoted strings:</source>
          <target state="translated">... except inside quoted strings:</target>
        </trans-unit>
        <trans-unit id="df0638782775a5ef38d469ff31aa8ebb7627c212" translate="yes" xml:space="preserve">
          <source>... than to have a long list of unnamed parameters like this:</source>
          <target state="translated">... than to have a long list of unnamed parameters like this:</target>
        </trans-unit>
        <trans-unit id="9e84afc2259e2c0a8b14385093616bc8417a02b4" translate="yes" xml:space="preserve">
          <source>...]</source>
          <target state="translated">...]</target>
        </trans-unit>
        <trans-unit id="4ab0a9790c00e729a4b45f232d5bba12449d6c2c" translate="yes" xml:space="preserve">
          <source>...]]</source>
          <target state="translated">...]]</target>
        </trans-unit>
        <trans-unit id="109254dd4bd8f76ba5dbc86501465c6e439045dd" translate="yes" xml:space="preserve">
          <source>...and start_/end_ methods for whatever other events you want to catch.</source>
          <target state="translated">...and start_/end_ methods for whatever other events you want to catch.</target>
        </trans-unit>
        <trans-unit id="504c7fa4112a565c2cf84d1f2a407fe70455f0df" translate="yes" xml:space="preserve">
          <source>...and then set the PERL5LIB environment variable to point at the blib/lib and blib/arch directories.</source>
          <target state="translated">...and then set the PERL5LIB environment variable to point at the blib/lib and blib/arch directories.</target>
        </trans-unit>
        <trans-unit id="84f613d3f84815f94455470937ac7ad2bf4d0a09" translate="yes" xml:space="preserve">
          <source>...before you call one of the &lt;code&gt;$parser-&amp;gt;parse_&lt;i&gt;whatever&lt;/i&gt;&lt;/code&gt; methods.</source>
          <target state="translated">...before you call one of the &lt;code&gt;$parser-&amp;gt;parse_&lt;i&gt;whatever&lt;/i&gt;&lt;/code&gt; methods.</target>
        </trans-unit>
        <trans-unit id="cedc2cb71ea42e91547d5115a44db3cb21d773d0" translate="yes" xml:space="preserve">
          <source>...classes...</source>
          <target state="translated">...classes...</target>
        </trans-unit>
        <trans-unit id="9c06d968e1ccdd60b03d3bb98823d723427575b7" translate="yes" xml:space="preserve">
          <source>...emits the right text for this language. If the object in &lt;code&gt;$lh&lt;/code&gt; belongs to class &quot;TkBocciBall::Localize::fr&quot; and %TkBocciBall::Localize::fr::Lexicon contains &lt;code&gt;(&quot;You won!&quot;
=&amp;gt; &quot;Tu as gagn&amp;eacute;!&quot;)&lt;/code&gt; , then the above code happily tells the user &quot;Tu as gagn&amp;eacute;!&quot;.</source>
          <target state="translated">...emits the right text for this language. If the object in &lt;code&gt;$lh&lt;/code&gt; belongs to class &quot;TkBocciBall::Localize::fr&quot; and %TkBocciBall::Localize::fr::Lexicon contains &lt;code&gt;(&quot;You won!&quot;
=&amp;gt; &quot;Tu as gagn&amp;eacute;!&quot;)&lt;/code&gt; , then the above code happily tells the user &quot;Tu as gagn&amp;eacute;!&quot;.</target>
        </trans-unit>
        <trans-unit id="712b26d21316d47220b94f84a7da8b2fb7a09b62" translate="yes" xml:space="preserve">
          <source>...except that the &lt;code&gt;ok(1)&lt;/code&gt; emits not just &quot;&lt;code&gt;ok &lt;i&gt;testnum&lt;/i&gt;&lt;/code&gt;&quot; but actually &quot;&lt;code&gt;ok &lt;i&gt;testnum&lt;/i&gt; # &lt;i&gt;skip_if_true_value&lt;/i&gt;&lt;/code&gt;&quot;.</source>
          <target state="translated">...except that the &lt;code&gt;ok(1)&lt;/code&gt; emits not just &quot;&lt;code&gt;ok &lt;i&gt;testnum&lt;/i&gt;&lt;/code&gt;&quot; but actually &quot;&lt;code&gt;ok &lt;i&gt;testnum&lt;/i&gt; # &lt;i&gt;skip_if_true_value&lt;/i&gt;&lt;/code&gt;&quot;.</target>
        </trans-unit>
        <trans-unit id="dea7efd8b01b4bf297abf9354d989e9166dfea78" translate="yes" xml:space="preserve">
          <source>...must</source>
          <target state="translated">...must</target>
        </trans-unit>
        <trans-unit id="2a2a1f8d28f7cd2a5a4c4c11b72844a03f1f37b7" translate="yes" xml:space="preserve">
          <source>...or specify whichever of those functions you want to import, like so:</source>
          <target state="translated">...or specify whichever of those functions you want to import, like so:</target>
        </trans-unit>
        <trans-unit id="43b677d161683ebdb1b28c026a49a7bd08793e8a" translate="yes" xml:space="preserve">
          <source>...then all are exported. (This saves you from having to use something less obvious like &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; I18N::LangTags qw(/./)&lt;/code&gt; .)</source>
          <target state="translated">...then all are exported. (This saves you from having to use something less obvious like &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; I18N::LangTags qw(/./)&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="e33c1ec514bde82733b90f7f247929125d6b8078" translate="yes" xml:space="preserve">
          <source>...to this code that uses a key-as-value:</source>
          <target state="translated">...to this code that uses a key-as-value:</target>
        </trans-unit>
        <trans-unit id="db7e5c4fcf2d46cb0f6d02fa12cbdd838b0329a2" translate="yes" xml:space="preserve">
          <source>...which is almost definitely not going to work as a hyperlink (assuming this formatter outputs a format supporting hypertext).</source>
          <target state="translated">...which is almost definitely not going to work as a hyperlink (assuming this formatter outputs a format supporting hypertext).</target>
        </trans-unit>
        <trans-unit id="99973db96ec1c293f28ff50ded17820d42b78f45" translate="yes" xml:space="preserve">
          <source>...which works exactly as if you'd done this:</source>
          <target state="translated">...which works exactly as if you'd done this:</target>
        </trans-unit>
        <trans-unit id="4bf5c672e8aea68d29c24806b8df46739e047857" translate="yes" xml:space="preserve">
          <source>...which you'd then call in a construct like this:</source>
          <target state="translated">...which you'd then call in a construct like this:</target>
        </trans-unit>
        <trans-unit id="30c1b8cea3328ab077a48a704fe806c461511bdd" translate="yes" xml:space="preserve">
          <source>...will make such Pod translators completely fail to see the Pod block at all.</source>
          <target state="translated">...will make such Pod translators completely fail to see the Pod block at all.</target>
        </trans-unit>
        <trans-unit id="4da46934b906c13860d2b11dba8d32b5047444a3" translate="yes" xml:space="preserve">
          <source>../xlib/$(CROSS_NAME)</source>
          <target state="translated">../xlib/$(CROSS_NAME)</target>
        </trans-unit>
        <trans-unit id="9cfaf6885341224ca2a61f3f0d06b8ec7ae71810" translate="yes" xml:space="preserve">
          <source>./.perldb</source>
          <target state="translated">./.perldb</target>
        </trans-unit>
        <trans-unit id="31005ee63fa684fe5166e538dfacdd891d18ff38" translate="yes" xml:space="preserve">
          <source>./.proverc</source>
          <target state="translated">./.proverc</target>
        </trans-unit>
        <trans-unit id="e282f6a3db8ec1dda906cf6c0b42a08f8a612af0" translate="yes" xml:space="preserve">
          <source>./Configure</source>
          <target state="translated">./Configure</target>
        </trans-unit>
        <trans-unit id="c3139af2547eef32e8e266aa15c05437ce219e33" translate="yes" xml:space="preserve">
          <source>./baz/</source>
          <target state="translated">./baz/</target>
        </trans-unit>
        <trans-unit id="710dfdeac8c932afa29f9e91db1a84b32d9176f6" translate="yes" xml:space="preserve">
          <source>./baz/epsilon</source>
          <target state="translated">./baz/epsilon</target>
        </trans-unit>
        <trans-unit id="15e6eb3e9ae05be7477fa620759790da42381570" translate="yes" xml:space="preserve">
          <source>./config.sh</source>
          <target state="translated">./config.sh</target>
        </trans-unit>
        <trans-unit id="299c5c55222e99d7c9fd57befa2b18ee584041a5" translate="yes" xml:space="preserve">
          <source>./ext</source>
          <target state="translated">./ext</target>
        </trans-unit>
        <trans-unit id="c22382ed6431bc8ca6ce395e95a56c68ad135b34" translate="yes" xml:space="preserve">
          <source>./hints/os2.sh</source>
          <target state="translated">./hints/os2.sh</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
