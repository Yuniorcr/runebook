<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="5d40086458e1b194df3ff27c332046fe8de9903b" translate="yes" xml:space="preserve">
          <source>The user name that owns the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab82377d9d8e711c9e229f8137ce74619a6f296" translate="yes" xml:space="preserve">
          <source>The user time is the amount of time the entire process spent on behalf of the user on this system executing this program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244da933c00a6b886bfc62a46ed8d2ddfb906e87" translate="yes" xml:space="preserve">
          <source>The user who wants the memoization cache to be expired according to your policy will say so by writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2fd16359343bc75d33118c9751a1ecbc3d3037" translate="yes" xml:space="preserve">
          <source>The usual arithmetic (+,-,+=,-=) is also available on the objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7334043434491bfd6d25a23b05fb6d156604749" translate="yes" xml:space="preserve">
          <source>The usual calling signature is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72046882a8fdaf30c0521d766b5cf67d3d264433" translate="yes" xml:space="preserve">
          <source>The usual idiom is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac11eaf69a957a9aa5638ad8debab406436e005" translate="yes" xml:space="preserve">
          <source>The usual method for terminating a thread is to &lt;a href=&quot;functions/return&quot;&gt;return EXPR&lt;/a&gt; from the entry point function with the appropriate return value(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189fd1d4b573f9b0c1b1794439c343e0650165ef" translate="yes" xml:space="preserve">
          <source>The usual shell redirection symbols &lt;code&gt; | &lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; are recognized by the cpan shell &lt;b&gt;only when surrounded by whitespace&lt;/b&gt;. So piping to pager or redirecting output into a file works somewhat as in a normal shell, with the stipulation that you must type extra spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5284fa656dfbed57ca832128b9046307b6a8989" translate="yes" xml:space="preserve">
          <source>The usual warnings if it can't read or write the files involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1efd4c7ee39f810e92b8d45a9ddf28889531e0" translate="yes" xml:space="preserve">
          <source>The usual warnings if it cannot read or write the files involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c79ee036d08be39b9326c3b9dab69e6aa2a162" translate="yes" xml:space="preserve">
          <source>The usually available constants are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efc4102646dfcf9e84b807940c146f94356608b" translate="yes" xml:space="preserve">
          <source>The util.c:1716 is the source code file and line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d163a1d052b62f7d060607d4bf6b7f91f9aa60" translate="yes" xml:space="preserve">
          <source>The v-strings are portable only up to v2147483647 (0x7FFF_FFFF), that's how far EBCDIC, or more precisely UTF-EBCDIC will go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e2770182dc038d9b47afe7e9b08eec9556b081" translate="yes" xml:space="preserve">
          <source>The v5.16 release also supports a &lt;code&gt;:loose&lt;/code&gt; import for loose matching of character names, which works just like loose matching of property names: that is, it disregards case, whitespace, and underscores:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b193f0ebc1769a16dcfcc639a8401c8c00cf9c0e" translate="yes" xml:space="preserve">
          <source>The valgrind tool can be used to find out both memory leaks and illegal heap memory accesses. As of version 3.3.0, Valgrind only supports Linux on x86, x86-64 and PowerPC and Darwin (OS X) on x86 and x86-64). The special &quot;test.valgrind&quot; target can be used to run the tests under valgrind. Found errors and memory leaks are logged in files named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3e07c88c6113557baab8df17b4983a954a8994" translate="yes" xml:space="preserve">
          <source>The value assigned to the key &lt;code&gt;'fallback'&lt;/code&gt; tells Perl how hard it should try to find an alternative way to implement a missing operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f766eba2f1a65e15d6582321bc30fe9d0e0e26a" translate="yes" xml:space="preserve">
          <source>The value associated with &lt;code&gt;env&lt;/code&gt; is itself a hashref that is matched against corresponding values in the &lt;code&gt;%ENV&lt;/code&gt; hash. Keys prefixed with &lt;code&gt;not_&lt;/code&gt; negates the corresponding match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa731dffe1d7c5a02c15e427c4d55ad58928d794" translate="yes" xml:space="preserve">
          <source>The value associated with &lt;code&gt;perlconfig&lt;/code&gt; is itself a hashref that is matched against corresponding values in the &lt;code&gt;%Config::Config&lt;/code&gt; hash living in the &lt;code&gt;Config.pm&lt;/code&gt; module. Keys prefixed with &lt;code&gt;not_&lt;/code&gt; negates the corresponding match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d758b44cf7d343d2636c283000a90f2b95ec68" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;$offset&lt;/code&gt; in Unix will be &lt;code&gt;0&lt;/code&gt; , but in Mac OS Classic will be some large number. &lt;code&gt;$offset&lt;/code&gt; can then be added to a Unix time value to get what should be the proper value on any system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a050ff582b3cdf570af43e605e700a8d71acf02" translate="yes" xml:space="preserve">
          <source>The value in each entry of the hash is what you are referring to when you use the &lt;code&gt;*name&lt;/code&gt; typeglob notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f707479820ff9d25dbdd6e993639c9a31b93e20" translate="yes" xml:space="preserve">
          <source>The value is identical to &lt;code&gt;$Config{'osname'}&lt;/code&gt; . See also &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; and the &lt;b&gt;-V&lt;/b&gt; command-line switch documented in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b8122c0413fdd3eed692b348862e9493d569f3" translate="yes" xml:space="preserve">
          <source>The value of $side is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3e350bc3160e2ef2f10c200798865cfdef3abe" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$Config{sitelib}&lt;/code&gt; is also determined in C code and not read from &lt;code&gt;Config.pm&lt;/code&gt; , which is not loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec5b14ed87db6c409cf2d38c4b2eab23f206eae" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$^O&lt;/code&gt; on OpenVMS is &quot;VMS&quot;. To determine the architecture that you are running on refer to &lt;code&gt;$Config{'archname'}&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a38163b3b1097c345c4ed53de76d7f29841da7e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$^O&lt;/code&gt; on VOS is &quot;vos&quot;. To determine the architecture that you are running on without resorting to loading all of &lt;code&gt;%Config&lt;/code&gt; you can examine the content of the &lt;code&gt;@INC&lt;/code&gt; array like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b11ba94deca518a1e2cfb4f0d2fd72a2e75493b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$_&lt;/code&gt; when the sub returns will be stored in the filename header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e887b08023c56383b67ea2dd8816e1569e2d83d2" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;flags&lt;/code&gt; determines the behavior when &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; does not point to a well-formed UTF-8 character. If &lt;code&gt;flags&lt;/code&gt; is 0, when a malformation is found, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. Also, if UTF-8 warnings haven't been lexically disabled, a warning is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4b4f2983d220858913f6137ac2e8d4d0fdf8f5" translate="yes" xml:space="preserve">
          <source>The value of a character (&lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt;) is the corresponding Unicode code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e567ba2156b576b88f1e773ff7f64942df23743" translate="yes" xml:space="preserve">
          <source>The value of an attribute may itself be another object. For example, instead of returning its last mod time as a number, the &lt;code&gt;File&lt;/code&gt; class could return a &lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt; object representing that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be98eb05f5630113ca4199a823f81cc002596a7" translate="yes" xml:space="preserve">
          <source>The value of any Unicode (not including Perl extensions) character property mentioned above for any single code point is available through &lt;a href=&quot;unicode/ucd#charprop()&quot;&gt;charprop() in Unicode::UCD&lt;/a&gt;. &lt;a href=&quot;unicode/ucd#charprops_all()&quot;&gt;charprops_all() in Unicode::UCD&lt;/a&gt; returns the values of all the Unicode properties for a given code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fc623a108af3428235cbe74b6771e41c797430" translate="yes" xml:space="preserve">
          <source>The value of revision comes from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cb89717e8339762098eca6a52dfe1d75c52296" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;flags&lt;/code&gt; hint to getaddrinfo(), or the $flags parameter to getnameinfo() contains unrecognised flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2c00bdfe45ec53f217b88f118a8da5474d909d" translate="yes" xml:space="preserve">
          <source>The value of the ADLER32 field read must match the adler32 value of the uncompressed data actually contained in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932cb4d9b33ea8ac456d8558a4c42d4644723cbc" translate="yes" xml:space="preserve">
          <source>The value of the CRC32 field read must match the crc32 value of the uncompressed data actually contained in the gzip file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9f5de9a38d28729524674757f04e1cb2068248" translate="yes" xml:space="preserve">
          <source>The value of the ISIZE fields read must match the length of the uncompressed data actually read from the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6975eb5b4fde16e6c94a6652320983d4f157fb4c" translate="yes" xml:space="preserve">
          <source>The value of the OP's SV, if it has one, in a short human-readable format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335bddece83d92e99066c5c702486489e5db8aca" translate="yes" xml:space="preserve">
          <source>The value of the function is not being passed back as the function's return value, but by changing the value of the variable that was passed into the function. You might have guessed that when you saw that the return value of round is of type &quot;void&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332bfecdbc3324ed6709a244ef3af16edb8104ba" translate="yes" xml:space="preserve">
          <source>The value of the last evaluated expression of the &lt;code&gt;given&lt;/code&gt; block if no condition is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cf8495b50e92c33dbdf25b33ef15173c2d3541" translate="yes" xml:space="preserve">
          <source>The value of the last evaluated expression of the successful &lt;code&gt;when&lt;/code&gt; /&lt;code&gt;default&lt;/code&gt; clause, if there happens to be one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dbf107286e577746464279a9f4d776045ba7e1" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; may be compared against the encrypted password from the UAF returned by the &lt;code&gt;getpw*&lt;/code&gt; functions, in order to authenticate users. If you're going to do this, remember that the encrypted password in the UAF was generated using uppercase username and password strings; you'll have to upcase the arguments to &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; to insure that you'll get the proper value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750d57c2b28689ee366bb45cb08dd596ede16734" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; may be affected after the call, and the filehandle may be flushed. (Win32)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9eb02fecf7e78b1a88f2675d747749b95555376" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; is the offset in seconds from 01-JAN-1970 00:00:00 (just like the CRTL's times() routine), in order to make life easier for code coming in from the POSIX/Unix world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce33a69a270de7fcb08010c8a7a1e528d7b525f" translate="yes" xml:space="preserve">
          <source>The value returned by DELETE becomes the return value of the call to delete(). If you want to emulate the normal behavior of delete(), you should return whatever FETCH would have returned for this key. In this example, we have chosen instead to return a value which tells the caller whether the file was successfully deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc17f7cca700d462e95542bbd03b318a3e0be44" translate="yes" xml:space="preserve">
          <source>The value returned by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bca5853c9e5fa5adb4f19b1edc9ad3fc182540" translate="yes" xml:space="preserve">
          <source>The value returned from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d9e575a1b77ab1385aca4b943feac671ed7f01" translate="yes" xml:space="preserve">
          <source>The value returned is the new-style (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04520f682b85fb43c817253d00adbc0066c3e0a" translate="yes" xml:space="preserve">
          <source>The value returned is the scalar itself, if the argument is a scalar, or a reference, if the argument is a hash, array or subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942e5b04dedd3b9d9ca5012565213fea51195584" translate="yes" xml:space="preserve">
          <source>The value returned should correspond to the new text to use in its place If the empty string is returned or an undefined value is returned, then the given &lt;code&gt;$text&lt;/code&gt; is ignored (not processed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dccf8bfa93428dffce75a953ae318dc76ebcb1f" translate="yes" xml:space="preserve">
          <source>The value returned should correspond to the new text to use in its place. If the empty string or an undefined value is returned then no further processing will be performed for this line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55279d7373f25daebc72a715903f6a4795228bf8" translate="yes" xml:space="preserve">
          <source>The value returned will be true if the &lt;code&gt;$paragraph&lt;/code&gt; and the rest of the text in the same section as &lt;code&gt;$paragraph&lt;/code&gt; should be selected (included) for processing; otherwise a false value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aaf64078984131d35f43803e32214eb7af6f36" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. It is invoked just before leaving the currently processed directory. It is called in void context with no arguments. The name of the current directory is in &lt;code&gt;$File::Find::dir&lt;/code&gt; . This hook is handy for summarizing a directory, such as calculating its disk usage. When</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbdffc9717f2bba2ebf5303cd71401d0bf2a249" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. This code reference is described in &lt;a href=&quot;#The-wanted-function&quot;&gt;The wanted function&lt;/a&gt; below. The &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine is mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444cd91bd48610204aa4348a8cd314eec59c4347" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. This code reference is used to preprocess the current directory. The name of the currently processed directory is in &lt;code&gt;$File::Find::dir&lt;/code&gt; . Your preprocessing function is called after &lt;code&gt;&lt;a href=&quot;../functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt;, but before the loop that calls the &lt;code&gt;wanted()&lt;/code&gt; function. It is called with a list of strings (actually file/directory names) and is expected to return a list of strings. The code can be used to sort the file/directory names alphabetically, numerically, or to filter out directory entries based on their name alone. When</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8d0d31a50d605febd9456f0c05a144d0e549cc" translate="yes" xml:space="preserve">
          <source>The value should be the complete TAP output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977d1c1fec14dab01803e1202ad5b70915c99932" translate="yes" xml:space="preserve">
          <source>The value supplied with &lt;code&gt;-Comment&lt;/code&gt; option can contain any character except NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a33beea90e0c4b3cd6d3aa1b159094d2037e800" translate="yes" xml:space="preserve">
          <source>The value supplied with &lt;code&gt;-Name&lt;/code&gt; option can contain any character except NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1aeb63cc4cb0e101586c3105fecbdbf9caca8c2" translate="yes" xml:space="preserve">
          <source>The value supplied with the &lt;code&gt;Comment&lt;/code&gt; option can only contain ISO 8859-1 characters plus line-feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d224f65d33c0660d7f4661847cc1e8f860019d" translate="yes" xml:space="preserve">
          <source>The value supplied with the &lt;code&gt;Name&lt;/code&gt; option can only contain ISO 8859-1 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5341e40485577e6df05a609244175f85c79fb195" translate="yes" xml:space="preserve">
          <source>The values are specified on the following format line in the same order as the picture fields. The expressions providing the values must be separated by commas. They are all evaluated in a list context before the line is processed, so a single list expression could produce multiple list elements. The expressions may be spread out to more than one line if enclosed in braces. If so, the opening brace must be the first token on the first line. If an expression evaluates to a number with a decimal part, and if the corresponding picture specifies that the decimal part should appear in the output (that is, any picture except multiple &quot;#&quot; characters &lt;b&gt;without&lt;/b&gt; an embedded &quot;.&quot;), the character used for the decimal point is determined by the current LC_NUMERIC locale if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect. This means that, if, for example, the run-time environment happens to specify a German locale, &quot;,&quot; will be used instead of the default &quot;.&quot;. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;#WARNINGS&quot;&gt;WARNINGS&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd5bfa6286ea39c4bd9487ae2b5176bb3be48be" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;$^O&lt;/code&gt; on some of these platforms includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540bf16e20569214e1b31e52cdcbc4ee480d311c" translate="yes" xml:space="preserve">
          <source>The values pushed onto the return stack of the XSUB are actually mortal SV's. They are made mortal so that once the values are copied by the calling program, the SV's that held the returned values can be deallocated. If they were not mortal, then they would continue to exist after the XSUB routine returned, but would not be accessible. This is a memory leak.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e474878aa7db7e96c4629326d93b845326ef064e" translate="yes" xml:space="preserve">
          <source>The values stored in config.sh may be either single-quoted or double-quoted. Double-quoted strings are handy for those cases where you need to include escape sequences in the strings. To avoid runtime variable interpolation, any &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; characters are replaced by &lt;code&gt;\$&lt;/code&gt; and &lt;code&gt;\@&lt;/code&gt; , respectively. This isn't foolproof, of course, so don't embed &lt;code&gt;\$&lt;/code&gt; or &lt;code&gt;\@&lt;/code&gt; in double-quoted strings unless you're willing to deal with the consequences. (The slashes will end up escaped and the &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; will trigger variable interpolation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23b5412a89e9982acfd046a606aac6df7b125a8" translate="yes" xml:space="preserve">
          <source>The values stored in the hashes above are mostly the direct equivalent of their C counterpart. Like their C counterparts, all are set to a default values - that means you don't have to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6700989ab1dbf25d28d4fd1b763593cc3c720f" translate="yes" xml:space="preserve">
          <source>The values supplied with the &lt;code&gt;-Name&lt;/code&gt; and &lt;code&gt;-Comment&lt;/code&gt; options can contain multiple embedded nulls. The string written to the gzip header will consist of the characters up to, but not including, the first embedded NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d39e5aa9ce36eff93868e0e7af4d9b6a02d8ec" translate="yes" xml:space="preserve">
          <source>The values supplied with the &lt;code&gt;-Name&lt;/code&gt; and &lt;code&gt;-Comment&lt;/code&gt; options cannot contain multiple embedded nulls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6344a1b12727e711425a7cd0809233875bc47e54" translate="yes" xml:space="preserve">
          <source>The values to be compared are always passed by reference and should not be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3bdf6ba268c4d17126cd579eaa00987525d1a3" translate="yes" xml:space="preserve">
          <source>The variable $ref may have referred to the subroutine &lt;code&gt;fred&lt;/code&gt; whenever the call to &lt;code&gt;SaveSub1&lt;/code&gt; was made but by the time &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called it now holds the number &lt;code&gt;47&lt;/code&gt; . Because we saved only a pointer to the original SV in &lt;code&gt;SaveSub1&lt;/code&gt; , any changes to $ref will be tracked by the pointer &lt;code&gt;rememberSub&lt;/code&gt; . This means that whenever &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called, it will attempt to execute the code which is referenced by the SV* &lt;code&gt;rememberSub&lt;/code&gt; . In this case though, it now refers to the integer &lt;code&gt;47&lt;/code&gt; , so expect Perl to complain loudly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1d8279ad869db1c2929300f40e329172cf94dc" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C compiler alone. The symbols defined by cpp or by cc when it calls cpp are not in this list, see cppsymbols and cppccsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501db733d2ef38c039a965292ca77f71bc56d687" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C compiler when it calls cpp. The symbols defined by the cc alone or cpp alone are not in this list, see ccsymbols and cppsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b4b60fa439030036a66d7ff80e60844c78536a" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C preprocessor alone. The symbols defined by cc or by cc when it calls cpp are not in this list, see ccsymbols and cppccsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d3f8e3698f4e666192e80e4c4c129382375649" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; , &lt;code&gt;$^E&lt;/code&gt; , and &lt;code&gt;$?&lt;/code&gt; contain information about different types of error conditions that may appear during execution of a Perl program. The variables are shown ordered by the &quot;distance&quot; between the subsystem which reported the error and the Perl process. They correspond to errors detected by the Perl interpreter, C library, operating system, or an external program, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61a4e2ec2fd6a9d823c4ff48f24791a3afc0a43" translate="yes" xml:space="preserve">
          <source>The variables are thousands of characters long and you know that they don't change, and you need to wring out the last little bit of speed by having Perl skip testing for that. (There is a maintenance penalty for doing this, as mentioning &lt;code&gt;/o&lt;/code&gt; constitutes a promise that you won't change the variables in the pattern. If you do change them, Perl won't even notice.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11544c219d80b67a63dc9e0a8e442712e549045b" translate="yes" xml:space="preserve">
          <source>The variables&amp;mdash;such as &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; , and &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%&amp;ndash; &lt;/code&gt; &amp;mdash;that hold the text remembered in a pattern match. See Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b54417d53e0d1cfe584f4211726c367ffae98a" translate="yes" xml:space="preserve">
          <source>The variant of OS2::_control87() with default values good for handling exception mask: if no &lt;code&gt;mask&lt;/code&gt; , uses exception mask part of &lt;code&gt;new&lt;/code&gt; only. If no &lt;code&gt;new&lt;/code&gt; , disables all the floating point exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307e90e437dd1da42b4c1389ea6c9b26886479f7" translate="yes" xml:space="preserve">
          <source>The various &lt;code&gt;extract_...&lt;/code&gt; subroutines may be used to extract a delimited substring, possibly after skipping a specified prefix string. By default, that prefix is optional whitespace (&lt;code&gt;/\s*/&lt;/code&gt; ), but you can change it to whatever you wish (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc16009f09e3803367ecc5c2f24dcc5baf8339c5" translate="yes" xml:space="preserve">
          <source>The various MSWin32 Perl's can distinguish the OS they are running on via the value of the fifth element of the list returned from &lt;code&gt;Win32::GetOSVersion()&lt;/code&gt; . For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f8a6767121d40d53463b6246a6dc21454cdfba" translate="yes" xml:space="preserve">
          <source>The various named unary operators are treated as functions with one argument, with optional parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7dece5f96deb4f2078174f4b6a63435a6090e8" translate="yes" xml:space="preserve">
          <source>The various options that can be specified are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2d3209693f371a4dffdf7b8f3fc9b9432bc2c1" translate="yes" xml:space="preserve">
          <source>The various types of data aggregate form a natural hierarchy that facilitates the use of inheritance and polymorphism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcabdd4901aed0767d31bd0d04d8aa2ce24975f" translate="yes" xml:space="preserve">
          <source>The vast majority of problems that are reported in this area boil down to the fact that C strings are NULL terminated, whilst Perl strings are not. See &lt;a href=&quot;#DBM-FILTERS&quot;&gt;DBM FILTERS&lt;/a&gt; for a generic way to work around this problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c55d44dd5a799dd5be32ea5b3f1cae585e95693" translate="yes" xml:space="preserve">
          <source>The vast majority of the code was written by Kenneth Albanowski &lt;code&gt;&amp;lt;kjahds@kjahds.com&amp;gt;&lt;/code&gt; , Andy Dougherty &lt;code&gt;&amp;lt;doughera@lafayette.edu&amp;gt;&lt;/code&gt; , Andreas K&amp;ouml;nig &lt;code&gt;&amp;lt;A.Koenig@franz.ww.TU-Berlin.DE&amp;gt;&lt;/code&gt; , Tim Bunce &lt;code&gt;&amp;lt;Tim.Bunce@ig.co.uk&amp;gt;&lt;/code&gt; . VMS support by Charles Bailey &lt;code&gt;&amp;lt;bailey@newman.upenn.edu&amp;gt;&lt;/code&gt; . OS/2 support by Ilya Zakharevich &lt;code&gt;&amp;lt;ilya@math.ohio-state.edu&amp;gt;&lt;/code&gt; . Mac support by Paul Schinder &lt;code&gt;&amp;lt;schinder@pobox.com&amp;gt;&lt;/code&gt; , and Thomas Wegner &lt;code&gt;&amp;lt;wegner_thomas@yahoo.com&amp;gt;&lt;/code&gt; . abs2rel() and rel2abs() written by Shigio Yamaguchi &lt;code&gt;&amp;lt;shigio@tamacom.com&amp;gt;&lt;/code&gt; , modified by Barrie Slaymaker &lt;code&gt;&amp;lt;barries@slaysys.com&amp;gt;&lt;/code&gt; . splitpath(), splitdir(), catpath() and catdir() by Barrie Slaymaker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a3f9b4fdc58bce9dc91ad1590ca608ffcca3cf" translate="yes" xml:space="preserve">
          <source>The veil of abstraction separating the &lt;b&gt;interface&lt;/b&gt; from the &lt;b&gt;implementation&lt;/b&gt; (whether enforced or not), which mandates that all access to an &lt;b&gt;object&lt;/b&gt;&amp;rsquo;s state be through &lt;b&gt;methods&lt;/b&gt; alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20efbe7543ae8d526c7c1a14310569f9dadb6162" translate="yes" xml:space="preserve">
          <source>The version identifier for an XS module. This is usually handled automatically by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; . See &lt;code&gt;XS_VERSION_BOOTCHECK&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddac7f13e9a2dc240c79129edea2cf74e24b8cc" translate="yes" xml:space="preserve">
          <source>The version number of the installed module - this will be &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the module had no (or unparsable) version number, or if the variable &lt;code&gt;$Module::Load::Conditional::FIND_VERSION&lt;/code&gt; was set to true. (See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section below for details)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a46a8ab62276eba4b76cf2918d64eaf428fd45" translate="yes" xml:space="preserve">
          <source>The version of PA-RISC at the time of this document's last update is 2.0, which is also the last there will be. HP PA-RISC systems are usually referred to with model description &quot;HP 9000&quot;. The last CPU in this series is the PA-8900. Support for PA-RISC architectured machines officially ends as shown in the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cdcafc4749e48949c53b1e0f4aeffeae610286" translate="yes" xml:space="preserve">
          <source>The version of ext() which is executed under VMS differs from the Unix-OS/2 version in several respects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa000c815a6c1f4aa9d1d3cce6270062ea44f5d2" translate="yes" xml:space="preserve">
          <source>The version of ext() which is executed under Win32 differs from the Unix-OS/2 version in several respects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c1fecbb3d585e94f9621773c665e2e2cd3f97d" translate="yes" xml:space="preserve">
          <source>The version of perl that you are using does not implement Vstrings, to use &lt;a href=&quot;#isvstring&quot;&gt;isvstring&lt;/a&gt; you will need to use a newer release of perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f3dd17d141437206c98482882771da9fd578da" translate="yes" xml:space="preserve">
          <source>The version of perl that you are using does not implement weak references, to use &lt;a href=&quot;#isweak&quot;&gt;isweak&lt;/a&gt; or &lt;a href=&quot;#weaken&quot;&gt;weaken&lt;/a&gt; you will need to use a newer release of perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bb3d6c21bf2a657e7026f0eee7644697eafb33" translate="yes" xml:space="preserve">
          <source>The version of the module distributed with Perl should, whenever possible, be the latest version of the module as distributed by the author (the latest non-beta version in the case of public Perl releases), although the pumpkin holder may hold off on upgrading the version of the module distributed with Perl to the latest version until the latest version has had sufficient testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21f22d5179989f705ed9d6a2a79b769acbc417d" translate="yes" xml:space="preserve">
          <source>The version of the module in the Perl core should still be considered the work of the original author. All patches, bug reports, and so forth should be fed back to them. Their development directions should be respected whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d384762292f03ed396ad91a060564bf7d9627e" translate="yes" xml:space="preserve">
          <source>The version this module needs to be -- this is optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c293dc4ef8b29552aa12216990ef31577ac2eeb" translate="yes" xml:space="preserve">
          <source>The versions of as and ld supplied with Solaris work fine for building perl. There is normally no need to install the GNU versions to compile perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991e6e65f67b3a36b7e485bd86d8f440ac42e72f" translate="yes" xml:space="preserve">
          <source>The very end of the document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59ec45ae7f53d6bfeaac3f5d1524ea40228db75" translate="yes" xml:space="preserve">
          <source>The very first thing you should do is look into getting the Term::ReadKey extension from CPAN. As we mentioned earlier, it now even has limited support for non-portable (read: not open systems, closed, proprietary, not POSIX, not Unix, etc.) systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54a90d3a077b2809332364bbb3b822680082301" translate="yes" xml:space="preserve">
          <source>The volume portion is always returned with a trailing &quot;:&quot;. The directory portion is always returned with a leading (to denote a relative path) and a trailing &quot;:&quot; (to denote a directory). The file portion is always returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec332efc336ec299c7acc49f0d1e2fc497986e3" translate="yes" xml:space="preserve">
          <source>The wanted function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6125dd5f3b647dbf86db0b504a3821e5fb95de7e" translate="yes" xml:space="preserve">
          <source>The wanted function takes no arguments but rather does its work through a collection of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badd12b3cb878c5659d7f27917ce9ac00752a63d" translate="yes" xml:space="preserve">
          <source>The warning is considered severe enough not to be affected by the &lt;b&gt;-w&lt;/b&gt; switch (or its absence) because previously compiled invocations of the function will still be using the old value of the function. If you need to be able to redefine the subroutine, you need to ensure that it isn't inlined, either by dropping the &lt;code&gt;()&lt;/code&gt; prototype (which changes calling semantics, so beware) or by thwarting the inlining mechanism in some other way, e.g. by adding an explicit &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, as mentioned above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228748e063ab0367333a5d358a372ffaa2776b68" translate="yes" xml:space="preserve">
          <source>The way I see this being used is like basically this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8410bbe832531f3fd9213bd8f3ba1287e55dc6" translate="yes" xml:space="preserve">
          <source>The way Perl builds up these op trees in the parsing process can be unravelled by examining</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a4e5fa4cbdb6cec50f6eac70c4ad531843cef7" translate="yes" xml:space="preserve">
          <source>The way Test::More handles this is with a named block. Basically, a block of tests which can be skipped over or made todo. It's best if I just show you...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a44ce079c4bba6650cbd971c39500928ccb7c22" translate="yes" xml:space="preserve">
          <source>The way a program responds to an error. The exception-handling mechanism in Perl is the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39341ae7c243431172aa717f037dcb000913133f" translate="yes" xml:space="preserve">
          <source>The way it resolves which actual method to call is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecf3674cf5632aa049fa7e267f9fbd82a5b7877" translate="yes" xml:space="preserve">
          <source>The way it works is that when the &lt;code&gt;@{...}&lt;/code&gt; is seen in the double-quoted string, it's evaluated as a block. The block creates a reference to an anonymous array containing the results of the call to &lt;code&gt;mysub(1,2,3)&lt;/code&gt; . So the whole block returns a reference to an array, which is then dereferenced by &lt;code&gt;@{...}&lt;/code&gt; and stuck into the double-quoted string. This chicanery is also useful for arbitrary expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464aa10ca9c1c0eb18ad0b5fbb41c9f2af8f5587" translate="yes" xml:space="preserve">
          <source>The way this trick works is that the character with the code point &lt;code&gt;U+FFFE&lt;/code&gt; is not supposed to be in input streams, so the sequence of bytes &lt;code&gt;0xFF 0xFE&lt;/code&gt; is unambiguously &quot;&lt;code&gt;BOM&lt;/code&gt; , represented in little-endian format&quot; and cannot be &lt;code&gt;U+FFFE&lt;/code&gt; , represented in big-endian format&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5898f48e7b39c1a379ea1247c549323ccbb46061" translate="yes" xml:space="preserve">
          <source>The way to get around this problem is to use the Berkeley DB API method called &lt;code&gt;seq&lt;/code&gt; . This method allows sequential access to key/value pairs. See &lt;a href=&quot;#THE-API-INTERFACE&quot;&gt;THE API INTERFACE&lt;/a&gt; for details of both the &lt;code&gt;seq&lt;/code&gt; method and the API in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd500d8c20565e5f312bdd0b6574f8c8052649e9" translate="yes" xml:space="preserve">
          <source>The way to use this class is to make a new object of this class, set any options, and then call one of the search options (probably &lt;code&gt;survey&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; ). The sections below discuss the syntaxes for doing all that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5268c05807fff3d270f4531a0cd21a77634cf686" translate="yes" xml:space="preserve">
          <source>The web server handling the HTTP service is assumed to be at its standard port, number 80. If the server you're trying to connect to is at a different port, like 1080 or 8080, you should specify it as the named-parameter pair, &lt;code&gt;PeerPort =&amp;gt; 8080&lt;/code&gt; . The &lt;code&gt;autoflush&lt;/code&gt; method is used on the socket because otherwise the system would buffer up the output we sent it. (If you're on a prehistoric Mac, you'll also need to change every &lt;code&gt;&quot;\n&quot;&lt;/code&gt; in your code that sends data over the network to be a &lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22573d6d6dbb31578b3c4fa9e8a17816a358dfc" translate="yes" xml:space="preserve">
          <source>The well known Unicode Byte Order Marks are as follows: if the file begins with the two literal byte values 0xFE 0xFF, this is the BOM for big-endian UTF-16. If the file begins with the two literal byte value 0xFF 0xFE, this is the BOM for little-endian UTF-16. On an ASCII platform, if the file begins with the three literal byte values 0xEF 0xBB 0xBF, this is the BOM for UTF-8. A mechanism portable to EBCDIC platforms is to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25fe7dd72c3069b0e017baa01097278ab17f62e" translate="yes" xml:space="preserve">
          <source>The while loop from line 14 to line 26 grabs a scalar off the input queue and checks against the prime this thread is responsible for. Line 15 checks to see if there's a remainder when we divide the number to be checked by our prime. If there is one, the number must not be evenly divisible by our prime, so we need to either pass it on to the next thread if we've created one (line 17) or create a new thread if we haven't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a997f7e1957d2b943d666798431c61228059e247" translate="yes" xml:space="preserve">
          <source>The whole Unicode standard &lt;a href=&quot;http://www.unicode.org/unicode/uni2book/u2.html&quot;&gt;http://www.unicode.org/unicode/uni2book/u2.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ed5e8abe2195d94e62a75cf32bf369a78b18af" translate="yes" xml:space="preserve">
          <source>The whole idea of the &quot;standard C API to start applications&quot; is that the forms &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;&quot;foo&quot;&lt;/code&gt; of program arguments are completely interchangeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe54c442e0898f0c65d2e7e96e6d557275adef9" translate="yes" xml:space="preserve">
          <source>The whole scheme for interpreting two-digit years can be considered a bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d301a149055986dea057eaf7f10ce99a292fd767" translate="yes" xml:space="preserve">
          <source>The width of the left margin in spaces. Defaults to 0. This is the margin for all text, including headings, not the amount by which regular text is indented; for the latter, see &lt;b&gt;-i&lt;/b&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b688a33a04cf250468fb3feaca19bab2ec26fc" translate="yes" xml:space="preserve">
          <source>The width of the left margin in spaces. Defaults to 0. This is the margin for all text, including headings, not the amount by which regular text is indented; for the latter, see the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8ba2c52e40b69413c01ffc592fe399547fc20f" translate="yes" xml:space="preserve">
          <source>The word returned by the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; function when you apply it to a reference to a subroutine. See also &lt;b&gt;CV&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be5b370df296bc57d076e1c2849a0ebee70013" translate="yes" xml:space="preserve">
          <source>The work isn't over until the paperwork is done, and you're going to need to put in some time writing some documentation for your module. &lt;code&gt;module-starter&lt;/code&gt; or &lt;code&gt;h2xs&lt;/code&gt; will provide a stub for you to fill in; if you're not sure about the format, look at &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; for an introduction. Provide a good synopsis of how your module is used in code, a description, and then notes on the syntax and function of the individual subroutines or methods. Use Perl comments for developer notes and POD for end-user notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1436e107c02b49fba4e33d8aaae3115ec601983a" translate="yes" xml:space="preserve">
          <source>The work of the interpreter has two main stages: compiling the code into the internal representation, or bytecode, and then executing it. &lt;a href=&quot;perlguts#Compiled-code&quot;&gt;Compiled code in perlguts&lt;/a&gt; explains exactly how the compilation stage happens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1397bff51f75db954e0f3e3e1b665db01ca7e8" translate="yes" xml:space="preserve">
          <source>The world's languages are written in many different scripts. This sentence (unless you're reading it in translation) is written in Latin, while Russian is written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in Hiragana or Katakana. There are many more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85da59eaf7698f05d48c68376bdd4ba3b6dce3bd" translate="yes" xml:space="preserve">
          <source>The worst patches make use of system-specific features. It's highly unlikely that non-portable additions to the Perl language will be accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2affe5ea5db32cf7d355e39106992f04132aac2d" translate="yes" xml:space="preserve">
          <source>The write filehandle will have autoflush turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34726284c86402203e3588790fd3c449c8531b5" translate="yes" xml:space="preserve">
          <source>The yacc coming with BS2000 POSIX didn't work for us. So we had to use bison. We had to make a few changes to perl in order to use the pure (reentrant) parser of bison. We used version 1.25, but we had to add a few changes due to EBCDIC. See below for more details concerning yacc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aff817087165151aec8e0b6db814baaf554f377" translate="yes" xml:space="preserve">
          <source>The z/OS Unix Tools and Toys list may prove helpful and contains links to ports of much of the software helpful for building Perl. &lt;a href=&quot;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&quot;&gt;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f215722614928e4a382d634f12d1b784a861305a" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;$reg&lt;/code&gt; can be used as a regexp:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5ca28d4aa169910f5c4821c56dad5137cddc68" translate="yes" xml:space="preserve">
          <source>Then again, you could always use parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f720f0ca68279a1e213df21b730afd59a9417d5" translate="yes" xml:space="preserve">
          <source>Then along comes Unicode which has room for over a million characters (and Perl allows for even more). This means that a character may require more than a single byte to represent it, and so the two terms are no longer equivalent. What matter are the characters as whole entities, and not usually the bytes that comprise them. That's what the term &quot;Character Semantics&quot; in the title of this section refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ff6c17f5c4132eb7b4e146224751484821d774" translate="yes" xml:space="preserve">
          <source>Then compile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894eab3b8839b7526298878f8b7e43bb55872aae" translate="yes" xml:space="preserve">
          <source>Then copy setargv.obj to %PlatformSDKDir%\lib</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939d22a5767f7f1b738027999de54521a98a4c28" translate="yes" xml:space="preserve">
          <source>Then delete every .bundle file found anywhere in the folders:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072381135845bbd0f86b6799cfa84f6d7fbff38f" translate="yes" xml:space="preserve">
          <source>Then go on to declare and use your variables in functions without any qualifications. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; and the &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for details on mechanics and style issues in module creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bcffa804562972342cabda61bf0a405b76b432e" translate="yes" xml:space="preserve">
          <source>Then move the files (probably just the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16764d0cdf61fb44dac45d466795c94ebcc324fb" translate="yes" xml:space="preserve">
          <source>Then override the &lt;code&gt;start_for&lt;/code&gt; method in the subclass to check for when &quot;$flags-&amp;gt;{'target'}&quot; is equal to 'foo' and set a flag that marks that you're in a foo block (maybe &quot;$self-&amp;gt;{'in_foo'} = 1&quot;). Then override the &lt;code&gt;handle_text&lt;/code&gt; method to check for the flag, and pass $text to your custom subroutine to construct the HTML output for 'foo' elements, something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5906927423d13fecbc7d429a1e04d7524ab55ae4" translate="yes" xml:space="preserve">
          <source>Then run the following script (or something like it):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc813daf18229cd1ceaa147ef073875823c78936" translate="yes" xml:space="preserve">
          <source>Then that text and all remaining text up through and including a line beginning with &lt;code&gt;=cut&lt;/code&gt; will be ignored. The format of the intervening text is described in &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8606c2212e120ef5c1865576f0176c5b8ada5faa" translate="yes" xml:space="preserve">
          <source>Then the assignment with the indirection on the left-hand-side would use the existing reference that was already there:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207f190aea8ef5aad0fa43cccb20c94bdffd926" translate="yes" xml:space="preserve">
          <source>Then the handler makes absolutely no attempt to interpret the data it receives and simply passes it as a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724e763cfec8edb999475aec0cbf98b0b938163f" translate="yes" xml:space="preserve">
          <source>Then the match is executed and the remaining lines describe the process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581e9b63d178af7824ad52db20f4431ce7a1a3ec" translate="yes" xml:space="preserve">
          <source>Then use any of those as you would a normal filehandle. Anywhere that Perl is expecting a filehandle, an indirect filehandle may be used instead. An indirect filehandle is just a scalar variable that contains a filehandle. Functions like &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt;, or the &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; diamond operator will accept either a named filehandle or a scalar variable containing one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be01a69ef7dc497f6d53fec0422df0742cb41c46" translate="yes" xml:space="preserve">
          <source>Then use it like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3068081feb5a0d3d89b7875b7ddf972f866ffeca" translate="yes" xml:space="preserve">
          <source>Then when you call $lh-&amp;gt;maketext(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4174f8d83f029a8fa078cc1b0e4b602d5427b4d7" translate="yes" xml:space="preserve">
          <source>Then you can progress through any remaining notable Unicode characters in the range 0x2000-0x204D (consult the character tables at www.unicode.org), and whatever else strikes your fancy. For example, in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a1243ca0e6b4d4a37040b980b310d461ab4076" translate="yes" xml:space="preserve">
          <source>Then you can use &lt;code&gt;FH&lt;/code&gt; as the filehandle, in &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; and &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; and so on. Note that it's a global variable, so this form is not recommended in new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81a39d78bb4e09ef8b273b017dac3466493479a" translate="yes" xml:space="preserve">
          <source>Then you can use &lt;code&gt;FH&lt;/code&gt; as the filehandle, in &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; and &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; and so on. Note that it's a global variable, so this form is not recommended in new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceabb34e67cf540951bd4247eacd0dbbabee283" translate="yes" xml:space="preserve">
          <source>Then you'll need to know how to manipulate the Perl stack. That's described in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e623e714cffb21ba3a72f8e67c6ce57fe9270e" translate="yes" xml:space="preserve">
          <source>Then you'll need to pass the &lt;code&gt;nocase&lt;/code&gt; option in order to recognize &quot;Name&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eea4f63f47d5b222c66289e4dec5701bc66810a" translate="yes" xml:space="preserve">
          <source>Then you've just supplied an automatic &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; in front of their argument, which can be more than a bit surprising. The old &lt;code&gt;@foo&lt;/code&gt; which used to hold one thing doesn't get passed in. Instead, &lt;code&gt;func()&lt;/code&gt; now gets passed in a &lt;code&gt;1&lt;/code&gt; ; that is, the number of elements in &lt;code&gt;@foo&lt;/code&gt; . And the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; gets called in scalar context so it starts scribbling on your &lt;code&gt;@_&lt;/code&gt; parameter list. Ouch!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee85b5d75e24b7f6cf7782bfc085bcfc0c87d6f5" translate="yes" xml:space="preserve">
          <source>Then, it determines the class and method name of the context it was invoked from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d80e1f2d5ca1daef620a79f94100cd3a43dcad2" translate="yes" xml:space="preserve">
          <source>There appears to be a bug in the floating point implementation on BS2000 POSIX systems such that calling int() on the product of a number and a small magnitude number is not the same as calling int() on the quotient of that number and a large magnitude number. For example, in the following Perl code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6e61aa6502fa98f73e845b088e443cab1a90e3" translate="yes" xml:space="preserve">
          <source>There appears to be a bug in the floating point implementation on S/390 systems such that calling int() on the product of a number and a small magnitude number is not the same as calling int() on the quotient of that number and a large magnitude number. For example, in the following Perl code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1cfe28fcf075678633050ad3a49243fab1a122" translate="yes" xml:space="preserve">
          <source>There are 3 kinds of items that may be populated; special patterns, #vars, and literal text, which is copied verbatim. (Yes, it's a set of s///g steps.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9231df83ad3f347c0bf53efa7fd0781ae7adef" translate="yes" xml:space="preserve">
          <source>There are &lt;code&gt;lint&lt;/code&gt; and &amp;lt;splint&amp;gt; targets in Makefile, but you may have to diddle with the flags (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9ce8188c03cc1c80382377cc03bbf3d1eefe6b" translate="yes" xml:space="preserve">
          <source>There are DECC feature logical names AND ODS-5 volume attributes that also control what values are returned for the date fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153a01ed3dca851e07404e7b116e0f624fedd9d4" translate="yes" xml:space="preserve">
          <source>There are a couple of exceptions to the above rule. &lt;code&gt;\N{U+&lt;i&gt;hex number&lt;/i&gt;}&lt;/code&gt; is always interpreted as a Unicode code point, so that &lt;code&gt;\N{U+0050}&lt;/code&gt; is &lt;code&gt;&quot;P&quot;&lt;/code&gt; even on EBCDIC platforms. And if &lt;code&gt;&lt;a href=&quot;encoding&quot;&gt;use encoding&lt;/a&gt;&lt;/code&gt; is in effect, the number is considered to be in that encoding, and is translated from that into the platform's native encoding if there is a corresponding native character; otherwise to Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e415da7b1ad793f82f6c66993b6dabfb03be0ae" translate="yes" xml:space="preserve">
          <source>There are a couple of macros to do very basic exception handling in XS modules. You have to define &lt;code&gt;NO_XSLOCKS&lt;/code&gt; before including</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b559285d4827f1039158fa6a1c7be09bcea8695c" translate="yes" xml:space="preserve">
          <source>There are a couple of other symbols that you're likely to encounter that aren't really type specifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd28f27e3e26acb88f426d59ef73cb49b8748e10" translate="yes" xml:space="preserve">
          <source>There are a couple of special arrays too, such as &lt;code&gt;@ARGV&lt;/code&gt; (the command line arguments to your script) and &lt;code&gt;@_&lt;/code&gt; (the arguments passed to a subroutine). These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71c568688cddeb0974cf4c64aacf00c4a7ae0fc" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note about this analysis. First, the third alternative in the second group 'de' also allows a match, but we stopped before we got to it - at a given character position, leftmost wins. Second, we were able to get a match at the first character position of the string 'a'. If there were no matches at the first position, Perl would move to the second character position 'b' and attempt the match all over again. Only when all possible paths at all possible character positions have been exhausted does Perl give up and declare &lt;code&gt;$string =~ /(abd|abc)(df|d|de)/;&lt;/code&gt; to be false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39aecaa3926975713f4a2a65afbfb40347095ccc" translate="yes" xml:space="preserve">
          <source>There are a couple of ways that you can process an entire hash. You can get a list of keys, then go through each key, or grab a one key-value pair at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af13ea056584d18f28105e6dfb4305dd6e1f93f8" translate="yes" xml:space="preserve">
          <source>There are a few basic principles which define object oriented Perl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad0df8b5bb1240ec34f94939aa27ca4c87aa9d3" translate="yes" xml:space="preserve">
          <source>There are a few exceptions though: &lt;code&gt;x&lt;/code&gt; can be either string repetition or list repetition, depending on the type of the left operand, and &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; can be either string or numeric bit operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7bb479453f1e1c0fcfea035067e079420f6246" translate="yes" xml:space="preserve">
          <source>There are a few more things you might want to know about matching operators. The global modifier &lt;code&gt;//g&lt;/code&gt; allows the matching operator to match within a string as many times as possible. In scalar context, successive matches against a string will have &lt;code&gt;//g&lt;/code&gt; jump from match to match, keeping track of position in the string as it goes along. You can get or set the position with the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; function. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4300a240e517c8a51298a8d027c6fc76723dcec0" translate="yes" xml:space="preserve">
          <source>There are a few point to bear in mind if you want to change the ordering in a BTREE database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1086e8333561d2682eac30f860ad2422dfc42d" translate="yes" xml:space="preserve">
          <source>There are a few things to bear in mind when creating your own &lt;code&gt;ResultFactory&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378f2e66966b2788636abfdbe2bc87b5abb48ea4" translate="yes" xml:space="preserve">
          <source>There are a few things you need to know, however:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbfb29c30b87800b111898e71e11f4933f270fc" translate="yes" xml:space="preserve">
          <source>There are a lot of modules on CPAN, and it's easy to miss one that's similar to what you're planning on contributing. Have a good plough through the &lt;a href=&quot;http://search.cpan.org&quot;&gt;http://search.cpan.org&lt;/a&gt; and make sure you're not the one reinventing the wheel!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8202fc94e9abdf77b0bbe8e0da596aca565bfbf9" translate="yes" xml:space="preserve">
          <source>There are a number of &quot;magic&quot; scalars with names that look like punctuation or line noise. These special variables are used for all kinds of purposes, and are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;. The only one you need to know about for now is &lt;code&gt;$_&lt;/code&gt; which is the &quot;default variable&quot;. It's used as the default argument to a number of functions in Perl, and it's set implicitly by certain looping constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc3a0395d03ea21a961b5ccde55199ca19344c6" translate="yes" xml:space="preserve">
          <source>There are a number of Unicode characters that match multiple characters under &lt;code&gt;/i&lt;/code&gt;. For example, &lt;code&gt;LATIN SMALL LIGATURE FI&lt;/code&gt; should match the sequence &lt;code&gt;fi&lt;/code&gt; . Perl is not currently able to do this when the multiple characters are in the pattern and are split between groupings, or when one or more are quantified. Thus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd2d0257d19015791fc17037d18a20e756ba477" translate="yes" xml:space="preserve">
          <source>There are a number of escape sequences and character classes that we haven't covered yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e8ff088e1d138c7e62589f4caba0154e035619" translate="yes" xml:space="preserve">
          <source>There are a number of flags that can be found at the end of regular expression constructs that are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9135b7f56d303db71c9d18be0e91860f32c7ff91" translate="yes" xml:space="preserve">
          <source>There are a number of issues with regard to case-insensitive matching in Unicode rules. See &lt;code&gt;i&lt;/code&gt; under &lt;a href=&quot;#Modifiers&quot;&gt;Modifiers&lt;/a&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022096dd663fb452b1d41c016ae62776dae4f673" translate="yes" xml:space="preserve">
          <source>There are a number of limits on the size of the data that you can store in the NDBM file. The most important is that the length of a key, plus the length of its associated value, may not exceed 1008 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d53d5198c98896d8e7795e9a89c4a433023428" translate="yes" xml:space="preserve">
          <source>There are a number of limits on the size of the data that you can store in the SDBM file. The most important is that the length of a key, plus the length of its associated value, may not exceed 1008 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52efe033e2beba5914060b25e959b1d5bcc3adec" translate="yes" xml:space="preserve">
          <source>There are a number of modules which let you write GUIs in Perl. Most GUI toolkits have a perl interface: an incomplete list follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6653dd731ed3a59a2ee9aba20887a251e28fb4" translate="yes" xml:space="preserve">
          <source>There are a number of new concepts introduced here, described below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5042e54e451264a1c914a632ba72877f3d1fb724" translate="yes" xml:space="preserve">
          <source>There are a number of other limitations with the &lt;code&gt;Merge&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b02972f75c4a57c97baf269f0fc3720b5f2bc53" translate="yes" xml:space="preserve">
          <source>There are a number of reasons that you might prefer &lt;code&gt;Tie::File&lt;/code&gt; . A list is available at &lt;code&gt;&lt;a href=&quot;http://perl.plover.com/TieFile/why-not-DB_File&quot;&gt;http://perl.plover.com/TieFile/why-not-DB_File&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc49fd5fe581b9df69b9289066f92c4c1dfec1b9" translate="yes" xml:space="preserve">
          <source>There are a number of security issues with the full Unicode list of word characters. See &lt;a href=&quot;http://unicode.org/reports/tr36&quot;&gt;http://unicode.org/reports/tr36&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fde0bc8e68f7eb8a6a5b8c75bef1c718f91f74" translate="yes" xml:space="preserve">
          <source>There are a number of ways to handle this sort of problem. The best way is to always have all threads acquire locks in the exact same order. If, for example, you lock variables &lt;code&gt;$x&lt;/code&gt; , &lt;code&gt;$y&lt;/code&gt; , and &lt;code&gt;$z&lt;/code&gt; , always lock &lt;code&gt;$x&lt;/code&gt; before &lt;code&gt;$y&lt;/code&gt; , and &lt;code&gt;$y&lt;/code&gt; before &lt;code&gt;$z&lt;/code&gt; . It's also best to hold on to locks for as short a period of time to minimize the risks of deadlock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32c15283e2f4c6b7705b70493695500588d21f8" translate="yes" xml:space="preserve">
          <source>There are a number of ways to hide the source to your Perl programs, with varying levels of &quot;security&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ea19cfdb1d50b8922388e83c50c4e47a818ebc" translate="yes" xml:space="preserve">
          <source>There are a number of ways, with varying efficiency. If you want a count of a certain single character (X) within a string, you can use the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; function like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bba5f24a6f4653ec9fc5a0573f80d18dac8d06b" translate="yes" xml:space="preserve">
          <source>There are a set of utilities which help you in developing Perl programs, and in particular, extending Perl with C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1252989edb8e8176f3bcfc5773893823daccc4" translate="yes" xml:space="preserve">
          <source>There are a significant number of test failures in the CPAN modules shipped with Perl v5.22. These are only in modules not primarily maintained by Perl 5 porters. Some of these are failures in the tests only: they don't realize that it is proper to get different results on EBCDIC platforms. And some of the failures are real bugs. If you compile and do a &lt;code&gt;make test&lt;/code&gt; on Perl, all tests on the &lt;code&gt;/cpan&lt;/code&gt; directory are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a68ba03d821b0f9ca941d8a7348ffd6b9675672" translate="yes" xml:space="preserve">
          <source>There are a variety of ways of transforming data with an intra character set mapping that serve a variety of purposes. Sorting was discussed in the previous section and a few of the other more popular mapping techniques are discussed next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c243ce02550d420fdebc8e85f18f50ac8e89a64" translate="yes" xml:space="preserve">
          <source>There are actually two varieties of null strings (sometimes referred to as &quot;empty&quot; strings), a defined one and an undefined one. The defined version is just a string of length zero, such as &lt;code&gt;&quot;&quot;&lt;/code&gt; . The undefined version is the value that indicates that there is no real value for something, such as when there was an error, or at end of file, or when you refer to an uninitialized variable or element of an array or hash. Although in early versions of Perl, an undefined scalar could become defined when first used in a place expecting a defined value, this no longer happens except for rare cases of autovivification as explained in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. You can use the defined() operator to determine whether a scalar value is defined (this has no meaning on arrays or hashes), and the undef() operator to produce an undefined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547f74aebc059a529676c6646c9bed2946a0409e" translate="yes" xml:space="preserve">
          <source>There are additional macros whose values may be bitwise OR'ed with the &lt;code&gt;GV_ADD&lt;/code&gt; argument to enable certain extra features. Those bits are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51046d0ad7a7252d1ce87aabe4027ffe3663a57e" translate="yes" xml:space="preserve">
          <source>There are also &lt;code&gt;Win32::IsWinNT()&lt;/code&gt; and &lt;code&gt;Win32::IsWin95()&lt;/code&gt; ; try &lt;code&gt;perldoc Win32&lt;/code&gt; , and as of libwin32 0.19 (not part of the core Perl distribution) &lt;code&gt;Win32::GetOSName()&lt;/code&gt; . The very portable &lt;code&gt;POSIX::uname()&lt;/code&gt; will work too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cc104cb95d94223dc9fddad7fb75cbcb044f6c" translate="yes" xml:space="preserve">
          <source>There are also endless possibilities to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323189fd57b85b2e190ea90f3e9bb682b3b9f2e0" translate="yes" xml:space="preserve">
          <source>There are also plenty of Perl related newsgroups located under &lt;code&gt;comp.lang.perl.*&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527d1ab1f5f5398fbabcd044390ef4e42b5f0b60" translate="yes" xml:space="preserve">
          <source>There are also some commercial products that may work for you, although you have to buy a license for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ce59232e232d36fa4b243d9439f11e909759d7" translate="yes" xml:space="preserve">
          <source>There are also some commonly used modules for the task. &lt;a href=&quot;scalar/util&quot;&gt;Scalar::Util&lt;/a&gt; (distributed with 5.8) provides access to perl's internal function &lt;code&gt;looks_like_number&lt;/code&gt; for determining whether a variable looks like a number. &lt;a href=&quot;http://search.cpan.org/perldoc/Data::Types&quot;&gt;Data::Types&lt;/a&gt; exports functions that validate data types using both the above and other regular expressions. Thirdly, there is &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; which has regular expressions to match various types of numbers. Those three modules are available from the CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ee19a63035c233ed5685ff1e3a13cd9e4a26d4" translate="yes" xml:space="preserve">
          <source>There are also some other op types: a &lt;code&gt;PMOP&lt;/code&gt; holds a regular expression, and has no children, and a &lt;code&gt;LOOP&lt;/code&gt; may or may not have children. If the &lt;code&gt;op_children&lt;/code&gt; field is non-zero, it behaves like a &lt;code&gt;LISTOP&lt;/code&gt; . To complicate matters, if a &lt;code&gt;UNOP&lt;/code&gt; is actually a &lt;code&gt;null&lt;/code&gt; op after optimization (see &lt;a href=&quot;#Compile-pass-2%3a-context-propagation&quot;&gt;Compile pass 2: context propagation&lt;/a&gt;) it will still have children in accordance with its former type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74afa3e57d8bf587dddccd05e8aa225e3034ba7" translate="yes" xml:space="preserve">
          <source>There are also some tricks that you can play with &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; and the accumulator variable &lt;code&gt;$^A&lt;/code&gt; , but you lose a lot of the value of formats since &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; won't handle paging and so on. You end up reimplementing formats when you use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a607b0a4fc3c7e1671b30a3b355e931c22fa4ed" translate="yes" xml:space="preserve">
          <source>There are also the two values &lt;code&gt;PL_sv_yes&lt;/code&gt; and &lt;code&gt;PL_sv_no&lt;/code&gt; , which contain boolean TRUE and FALSE values, respectively. Like &lt;code&gt;PL_sv_undef&lt;/code&gt; , their addresses can be used whenever an &lt;code&gt;SV*&lt;/code&gt; is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9975f54ba4b1444b192c3d8bfd7d71c13ebdbb" translate="yes" xml:space="preserve">
          <source>There are also versions of the functions with &quot;_hex&quot; or &quot;_base64&quot; appended to the name, which returns the digest in the indicated form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a4f4a9450ec80ee122e2031504c8884d21e28d" translate="yes" xml:space="preserve">
          <source>There are at least two instance variables stored in a hash reference, {data} and {encoding}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68682d3f996c5d0d4c5e2cf0ab83889b2edb3594" translate="yes" xml:space="preserve">
          <source>There are cases when you will not know beforehand how many tests your script is going to run. In this case, you can declare your tests at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a4d162b9b64ac9d632dbabef83e1cc311a2290" translate="yes" xml:space="preserve">
          <source>There are certain application spaces which are already very, very well served by CPAN. One example is templating systems, another is date and time modules, and there are many more. While it is a rite of passage to write your own version of these things, please consider carefully whether the Perl world really needs you to publish it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f399d82ea760be3c44c0c12193de98d98ca6c0b6" translate="yes" xml:space="preserve">
          <source>There are corresponding one-letter commands &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; for each of the four categories and another, &lt;code&gt;i&lt;/code&gt; for any of the mentioned four. Each of the four entities is implemented as a class with slightly differing methods for displaying an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61165542c376ce1515ee946fb54e0b62bf506b50" translate="yes" xml:space="preserve">
          <source>There are currently three implementations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7082baef78129948a9aee04418c7c10c1b4d4a87" translate="yes" xml:space="preserve">
          <source>There are different classes in the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email::Folder&lt;/a&gt; namespace for supporting various mailbox types. Note that these modules are generally rather limited and only support &lt;b&gt;reading&lt;/b&gt; rather than writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed85d6fa9e5690e5659a7fcf3cc7c90a6a9abc89" translate="yes" xml:space="preserve">
          <source>There are exceptions to the above rules for dereference operations (which, if Step 1 fails, always fall back to the normal, built-in implementations - see Dereferencing), and for &lt;code&gt;~~&lt;/code&gt; (which has its own set of rules - see &lt;code&gt;Matching&lt;/code&gt; under &lt;a href=&quot;#Overloadable-Operations&quot;&gt;Overloadable Operations&lt;/a&gt; above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129afe5f5ce43c82f8dd2611661b6c6fae2152e8" translate="yes" xml:space="preserve">
          <source>There are exceptions to the simple scalar maps. Some properties have some elements in their map list that are themselves lists of scalars; and some special strings are returned that are not to be interpreted as-is. Element [2] (placed into &lt;code&gt;$format&lt;/code&gt; in the example above) of the returned four element list tells you if the map has any of these special elements or not, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03da32e2f08e4c55ca723ef0de464a8b0fc8a37a" translate="yes" xml:space="preserve">
          <source>There are five pattern matching operations other than a strict one-to-one match between the pattern and the source to be checked for a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaaee4619b1124c4cd083d4f94b5aeee43dd52b" translate="yes" xml:space="preserve">
          <source>There are four arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30d8b75df6d6d560de84db459ba9ddeaac5bfd4" translate="yes" xml:space="preserve">
          <source>There are four methods associated with DBM Filters. All work identically, and each is used to install (or uninstall) a single DBM Filter. Each expects a single parameter, namely a reference to a sub. The only difference between them is the place that the filter is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4786fe13177802911e40046450c4aa8a6b7442" translate="yes" xml:space="preserve">
          <source>There are four routines that can be used to call a Perl subroutine from within a C program. These four are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4c3b4907f361ea335c94a68bf5900b38774c4c" translate="yes" xml:space="preserve">
          <source>There are just two ways to make a reference, and just two ways to use it once you have it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451300c3402db478bc017d97504bbf1dc7589d4f" translate="yes" xml:space="preserve">
          <source>There are literally dozens of other OO-related modules on CPAN besides those covered here, and you're likely to run across one or more of them if you work with other people's code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c77d5c24285fecf2b82ebf41d5dec81876d45b0" translate="yes" xml:space="preserve">
          <source>There are lots more commands and options, but the above will do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837d89ccfb96f196a244bf30256b711d40a975e1" translate="yes" xml:space="preserve">
          <source>There are many Perl &lt;a href=&quot;http://search.cpan.org/perldoc/lists.perl.org&quot;&gt;mailing lists&lt;/a&gt; for various topics, specifically the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2flists.perl.org%2flist%2fbeginners.html&quot;&gt;beginners list&lt;/a&gt; may be of use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bec5519f33a4e7bdc4a53a2313d4e1bcfcd1067" translate="yes" xml:space="preserve">
          <source>There are many books on Perl and Perl-related. A few of these are good, some are OK, but many aren't worth your money. There is a list of these books, some with extensive reviews, at &lt;a href=&quot;http://books.perl.org/&quot;&gt;http://books.perl.org/&lt;/a&gt; . We list some of the books here, and while listing a book implies our endorsement, don't think that not including a book means anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e51ecd675e07ca3b7be0664408ec108e37de71" translate="yes" xml:space="preserve">
          <source>There are many different ftp firewall products available. But unfortunately there is no standard for how to traverse a firewall. The list below shows the sequence of commands that Net::FTP will use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccca22cadfc5874b657dd6b896d963adc193de41" translate="yes" xml:space="preserve">
          <source>There are many good &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fbooks%2flibrary.html&quot;&gt;books on Perl&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c010c4c2e46af9e1a3df8426bb24c3742b96b7" translate="yes" xml:space="preserve">
          <source>There are many more properties than the very basic ones described here. A complete list is in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8e433d3ac89e153ddbae16288b146a2a506dab" translate="yes" xml:space="preserve">
          <source>There are many other functions available since FileHandle is descended from IO::File, IO::Seekable, and IO::Handle. Please see those respective pages for documentation on more functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b014b8d66d3b187e540a67f34591fd12721782" translate="yes" xml:space="preserve">
          <source>There are many reasons, but the major one is cross-platform compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f22a618b10f083a38eaf97d7560bbf775ba04c7" translate="yes" xml:space="preserve">
          <source>There are many ways to ensure that values are what you expect or want to accept. Besides the specific examples that we cover in the perlfaq, you can also look at the modules with &quot;Assert&quot; and &quot;Validate&quot; in their names, along with other modules such as &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c508352f954b14145337f34025470ea842ef7b40" translate="yes" xml:space="preserve">
          <source>There are many ways to get multiline data into a string. If you want it to happen automatically while reading input, you'll want to set $/ (probably to '' for paragraphs or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for the whole file) to allow you to read more than one line at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc3f3b5eae147e801f5f43fb6a8fbac0ae189bf" translate="yes" xml:space="preserve">
          <source>There are many, many Unicode character properties. For the full list see &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;. Most of them have synonyms with shorter names, also listed there. Some synonyms are a single character. For these, you can drop the braces. For instance, &lt;code&gt;\pM&lt;/code&gt; is the same thing as &lt;code&gt;\p{Mark}&lt;/code&gt; , meaning things like accent marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a61fc5e0ce0e0ef09d3d9c85a06d1ddbe46e285" translate="yes" xml:space="preserve">
          <source>There are many, many code points, but computers work with bytes, and a byte has room for only 256 values. Unicode has many more characters than that, so you need a method to make these accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88acdd96ec6d6927c08fab60ea3227280069d628" translate="yes" xml:space="preserve">
          <source>There are many, many sources for Solaris information. A few of the important ones for perl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f4eee710987379a0f55c604a3354e69d7b2875" translate="yes" xml:space="preserve">
          <source>There are modules to help you through the process of writing a module: &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::ModuleMaker&quot;&gt;ExtUtils::ModuleMaker&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Install&quot;&gt;Module::Install&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d4491371efc2ca44fd016e5d9139fc5fa773fa" translate="yes" xml:space="preserve">
          <source>There are no loops of references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476c776008d55428fe7585fbd0c3dce927c522c4" translate="yes" xml:space="preserve">
          <source>There are no unique methods for unknown results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b571d2027807fc8b9e77b0de9129097419041bc0" translate="yes" xml:space="preserve">
          <source>There are non-obvious Unicode rules under &lt;code&gt;/i&lt;/code&gt; that can match variably, but which you might not think could. For example, the substring &lt;code&gt;&quot;ss&quot;&lt;/code&gt; can match the single character LATIN SMALL LETTER SHARP S. There are other sequences of ASCII characters that can match single ligature characters, such as LATIN SMALL LIGATURE FFI matching &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/ffi/i&lt;/a&gt;&lt;/code&gt;. Starting in Perl v5.16, if you only care about ASCII matches, adding the &lt;code&gt;/aa&lt;/code&gt; modifier to the regex will exclude all these non-obvious matches, thus getting rid of this message. You can also say &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re qw(/aa)&lt;/code&gt; to apply &lt;code&gt;/aa&lt;/code&gt; to all regular expressions compiled within its scope. See &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ad264a4513834556a80639fe98434e6bc7fc63" translate="yes" xml:space="preserve">
          <source>There are now two nested loops in the code: the outer loop for reading the compressed data from STDIN, as before; and the inner loop to carry out the uncompression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69e0c87595733580f5c73f14c1fdeb5543877d6" translate="yes" xml:space="preserve">
          <source>There are only a few attributes currently handled by Perl itself (or directly by this module, depending on how you look at it.) However, package-specific attributes are allowed by an extension mechanism. (See &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;Package-specific Attribute Handling&lt;/a&gt; below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108ccf06b73794e0f286d42a6259562039de6c36" translate="yes" xml:space="preserve">
          <source>There are other documents which might contain the information that you're looking for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffadbd86efea8ed0c7e9318ac1bd6a93e63feaa1" translate="yes" xml:space="preserve">
          <source>There are other minor differences, particularly regarding &lt;code&gt;&lt;a href=&quot;../functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, but in general, the correspondence is extremely close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bb3958077e624c5300c166b4aa5d1f00cfb6ff" translate="yes" xml:space="preserve">
          <source>There are other runtime options as well. You can use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae6e762f25c5a7d9726dbb80f1e49251722d367" translate="yes" xml:space="preserve">
          <source>There are platforms where longs are 64 bits, and platforms where ints are 64 bits, and while we are out to shock you, even platforms where shorts are 64 bits. This is all legal according to the C standard. (In other words, &quot;long long&quot; is not a portable way to specify 64 bits, and &quot;long long&quot; is not even guaranteed to be any wider than &quot;long&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d48b6e5e54bf5c7c0f9c8f92bbb4b843c99efe" translate="yes" xml:space="preserve">
          <source>There are probably many more bugs on non-ASCII platforms (EBCDIC).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6034cbb411ab9fcf9d496b60426633cf7c795bb5" translate="yes" xml:space="preserve">
          <source>There are quite a few systems out there that do worse!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2d754395a1d1b23e17d21c745bf8aafd6b351f" translate="yes" xml:space="preserve">
          <source>There are rare cases where this package-based resolution can be a problem. If you copy a subroutine from one package to another, &lt;code&gt;SUPER&lt;/code&gt; resolution will be done based on the original package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af62a9f4883bfebec9e4b48e9587f48259af1d0b" translate="yes" xml:space="preserve">
          <source>There are really two tracks of perl development: a maintenance version and an experimental version. The maintenance versions are stable, and have an even number as the minor release (i.e. perl5.18.x, where 18 is the minor release). The experimental versions may include features that don't make it into the stable versions, and have an odd number as the minor release (i.e. perl5.19.x, where 19 is the minor release).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bf8726c4584d2c3d7eed2a3217ca6397579941" translate="yes" xml:space="preserve">
          <source>There are several I/O operators you should know about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fda79a606c9c0725617e5e789142491b7fdc787" translate="yes" xml:space="preserve">
          <source>There are several ambiguous cases where a conversion routine cannot determine whether an input filename is in Unix format or in VMS format, since now both VMS and Unix file specifications may have characters in them that could be mistaken for syntax delimiters of the other type. So some pathnames simply cannot be used in a mode that allows either type of pathname to be present. Perl will tend to assume that an ambiguous filename is in Unix format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2d6ce8616f44441a994dbb2d806ba6e4997805" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying countries. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b369e9ecdad508287761106812f2205698bcfc" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying currencies. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5df10a209c7b9d0bd6df6a76c15e47c845b73fd" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying languages. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357e0be22039446c2158a4027e1ee33566fa847b" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying scripts. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c871d77268a0e9a3faf86ba66c7adbf672f7193a" translate="yes" xml:space="preserve">
          <source>There are several escape sequences that convert characters or strings between upper and lower case, and they are also available within patterns. &lt;code&gt;\l&lt;/code&gt; and &lt;code&gt;\u&lt;/code&gt; convert the next character to lower or upper case, respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd1b15a1dbfd18df05cd02be13096a5a0b828cf" translate="yes" xml:space="preserve">
          <source>There are several functions available to specify characters and code points portably in tests. The always-preloaded functions &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and its inverse &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt; take code points and translate appropriately. The file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324d2fa183413ecef672812d1ff51b1b76337a11" translate="yes" xml:space="preserve">
          <source>There are several great resources for locating workshops: the &lt;a href=&quot;#Websites&quot;&gt;websites&lt;/a&gt; mentioned above, the &lt;a href=&quot;#Calendar-of-Perl-Events&quot;&gt;calendar&lt;/a&gt; mentioned below, and the YAPC Europe website, &lt;a href=&quot;http://www.yapceurope.org/&quot;&gt;http://www.yapceurope.org/&lt;/a&gt;, which is probably the best resource for European Perl events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70817f22a3f6a9efb5f508894682105db2aa6387" translate="yes" xml:space="preserve">
          <source>There are several of these, which are equivalents, using the &lt;code&gt;\p{}&lt;/code&gt; notation, for Posix classes and are described in &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f83d1183ceda85cce3fcdc239963f72e745557e" translate="yes" xml:space="preserve">
          <source>There are several of these, which are the standard Posix classes extended to the full Unicode range. They are described in &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3db56f779a367ad8451b62021cf957e6240bc01" translate="yes" xml:space="preserve">
          <source>There are several types of character class tests that Perl implements. The only ones described here are those that directly correspond to C library functions that operate on 8-bit characters, but there are equivalents that operate on wide characters, and UTF-8 encoded strings. All are more fully described in &lt;a href=&quot;perlapi#Character-classification&quot;&gt;Character classification in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#Character-case-changing&quot;&gt;Character case changing in perlapi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e0a93aaf35e3ad5cd5182c4904a3f139cb368f" translate="yes" xml:space="preserve">
          <source>There are several ways to call the debugger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8db18a3a166163bfb23804a9a1202e4ece1bc54" translate="yes" xml:space="preserve">
          <source>There are several ways to wrap your Perl scripts in DCL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4463c6ded942fe4cd0ec81ef54653fbdb5493c" translate="yes" xml:space="preserve">
          <source>There are some bugs in the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&quot;U0&quot;&lt;/code&gt; template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5363960c51ded4425aac0c5e8d1bf8c47e9bafcf" translate="yes" xml:space="preserve">
          <source>There are some cases where Perl can't immediately tell the difference between an expression and a statement. For instance, the syntax for a block and an anonymous hash reference constructor look the same unless there's something in the braces to give Perl a hint. The ellipsis is a syntax error if Perl doesn't guess that the &lt;code&gt;{ ... }&lt;/code&gt; is a block. In that case, it doesn't think the &lt;code&gt;...&lt;/code&gt; is an ellipsis because it's expecting an expression instead of a statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d390e2b6c3127ccfec700a0a95db3ede4e9652" translate="yes" xml:space="preserve">
          <source>There are some caveats with the use of runtime statements like &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; Exporter&lt;/code&gt; and the assignment to package variables, which can be very subtle for the unaware programmer. This may happen for instance with mutually recursive modules, which are affected by the time the relevant constructions are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d05d692911a48f923ff823586f7db33a368c559" translate="yes" xml:space="preserve">
          <source>There are some convenience functions available that can help with the destruction of xVs. These functions introduce the concept of &quot;mortality&quot;. An xV that is mortal has had its reference count marked to be decremented, but not actually decremented, until &quot;a short time later&quot;. Generally the term &quot;short time later&quot; means a single Perl statement, such as a call to an XSUB function. The actual determinant for when mortal xVs have their reference count decremented depends on two macros, SAVETMPS and FREETMPS. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; and &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details on these macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b9699f0d3b28a88deb2c4c365035a0647ae160" translate="yes" xml:space="preserve">
          <source>There are some difficulties in using the tied hash interface if you want to manipulate a BTREE database with duplicate keys. Consider this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c652dbfd06883d908b23bc1bfea111a0463399a9" translate="yes" xml:space="preserve">
          <source>There are some drawbacks to this approach. One is that any extension which calls any file-manipulating C function will need to be recompiled (just follow the usual &quot;perl Makefile.PL; make; make test; make install&quot; procedure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b359481d6fbdc6a6a4b31621c42bd37e3d7940e" translate="yes" xml:space="preserve">
          <source>There are some obvious disadvantages with this technique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca89f8811d4cbda81105708f26c4da2bc407dd8" translate="yes" xml:space="preserve">
          <source>There are some optional options you can pass to &lt;code&gt;memoize&lt;/code&gt; to change the way it behaves a little. To supply options, invoke &lt;code&gt;memoize&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362784bb7e407303367ae06c7f4d21b101719adc" translate="yes" xml:space="preserve">
          <source>There are some shortcuts for oneliners; see &lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C&lt;/a&gt; in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6709b6148bb02040a39a95e98f282835dfc33f" translate="yes" xml:space="preserve">
          <source>There are some warnings with respect to malformed hyperlinks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8df6ad608907441859c0c720df59bd6834bb9d" translate="yes" xml:space="preserve">
          <source>There are still many places where Unicode (in some encoding or another) could be given as arguments or received as results, or both in Perl, but it is not, in spite of Perl having extensive ways to input and output in Unicode, and a few other &quot;entry points&quot; like the &lt;code&gt;@ARGV&lt;/code&gt; array (which can sometimes be interpreted as UTF-8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59db2905dffb1315acaf3a1dc211ceadeec4d5cb" translate="yes" xml:space="preserve">
          <source>There are three Command Line flags that can be used to control when warnings are (or aren't) produced:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10489a4543147a152f672e9c6f67f2c24de29afb" translate="yes" xml:space="preserve">
          <source>There are three basic ways of running external commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1484d5257f2915d554120f4ce6bfb497ce1d27" translate="yes" xml:space="preserve">
          <source>There are three basic ways that you can structure a threaded program. Which model you choose depends on what you need your program to do. For many non-trivial threaded programs, you'll need to choose different models for different pieces of your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc3fd61896b5d12698d6fdcfdceea06c9dc86a3" translate="yes" xml:space="preserve">
          <source>There are three distinct concepts of &quot;next&quot; in the regex engine, and it is important to keep them clear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aff53d816fd931550c2a4895fd2449f30b17c2" translate="yes" xml:space="preserve">
          <source>There are three popular ways to avoid this overhead. One solution involves running the Apache HTTP server (available from &lt;a href=&quot;http://www.apache.org/&quot;&gt;http://www.apache.org/&lt;/a&gt; ) with either of the mod_perl or mod_fastcgi plugin modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99df9d7a05fef99c9f9af3d138353a09ea2aa37e" translate="yes" xml:space="preserve">
          <source>There are three types of character classes in Perl regular expressions: the dot, backslash sequences, and the form enclosed in square brackets. Keep in mind, though, that often the term &quot;character class&quot; is used to mean just the bracketed form. Certainly, most Perl documentation does that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78a1c3edbdc828e2c5469275355a4d4c1a4e525" translate="yes" xml:space="preserve">
          <source>There are three ways to do this. First, the easy but inefficient way, which is also the default, in order to maintain source compatibility with extensions: whenever</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d88ffa178365fa0703151483456030669a9d8af" translate="yes" xml:space="preserve">
          <source>There are three ways to write a test in the core: &lt;a href=&quot;test/more&quot;&gt;Test::More&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1233ca5594cc5aa5bc69145748e72c13824fb763" translate="yes" xml:space="preserve">
          <source>There are three ways to write your own source filter. You can write it in C, use an external program as a filter, or write the filter in Perl. I won't cover the first two in any great detail, so I'll get them out of the way first. Writing the filter in Perl is most convenient, so I'll devote the most space to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1ca307ab6382d572650b48515269fd5ebc805c" translate="yes" xml:space="preserve">
          <source>There are times when you may find it useful to have a thread explicitly give up the CPU to another thread. You may be doing something processor-intensive and want to make sure that the user-interface thread gets called frequently. Regardless, there are times that you might want a thread to give up the processor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabf4548dd9ce503cb7793127ff7d0d6ca4a9258" translate="yes" xml:space="preserve">
          <source>There are two basic modes of operation (plus turning if off):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b9f0a36cbfc725453b6b4804987d2d7a53bc2c" translate="yes" xml:space="preserve">
          <source>There are two callbacks, &lt;code&gt;named_buff&lt;/code&gt; is called in all the cases the FETCH, STORE, DELETE, CLEAR, EXISTS and SCALAR &lt;a href=&quot;tie/hash&quot;&gt;Tie::Hash&lt;/a&gt; callbacks would be on changes to &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt; and &lt;code&gt;named_buff_iter&lt;/code&gt; in the same cases as FIRSTKEY and NEXTKEY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a26ce9bc0772a2a092df698289266d1f10ecae" translate="yes" xml:space="preserve">
          <source>There are two cases, multi-byte and single-byte locales. First multi-byte:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6e50ca71fb9ef8a58634080d592b643d6be431" translate="yes" xml:space="preserve">
          <source>There are two cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07255028b3b5bd9a90385fc5c125ed8062cb54e" translate="yes" xml:space="preserve">
          <source>There are two commonly used techniques of profiling executables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4918f14b7918995ede690de784e45ce5b334a99c" translate="yes" xml:space="preserve">
          <source>There are two distinctive features of the dyna-linking model of OS/2: first, all the references to external functions are resolved at the compile time; second, there is no runtime fixup of the DLLs after they are loaded into memory. The first feature is an enormous advantage over other models: it avoids conflicts when several DLLs used by an application export entries with the same name. In such cases &quot;other&quot; models of dyna-linking just choose between these two entry points using some random criterion - with predictable disasters as results. But it is the second feature which requires the build of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b851bdf3c81b8784e2dddc6e20b8e6c18978a571" translate="yes" xml:space="preserve">
          <source>There are two exit points from the inner uncompression loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108b59b47c97316f062b5266aff655788506a06e" translate="yes" xml:space="preserve">
          <source>There are two forms of octal escapes. Each is used to specify a character by its code point specified in octal notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172fa4a9b4de533e56c4707adea17699b11d4a1b" translate="yes" xml:space="preserve">
          <source>There are two important points to remember:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6d3355d6294c0400eecec7ab06563e8c2ddc8b" translate="yes" xml:space="preserve">
          <source>There are two keys with a special meaning in the hash: &quot;read&quot; and &quot;write&quot;. These contain packlist files. After the copying is done, install() will write the list of target files to $from_to{write}. If $from_to{read} is given the contents of this file will be merged into the written file. The read and the written file may be identical, but on AFS it is quite likely that people are installing to a different directory than the one where the files later appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06480546f8f7593dd6ae9d9e44d7bf0995b966a" translate="yes" xml:space="preserve">
          <source>There are two new display parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c86f1c0ffd1daa198d3368c1af9e850c8735019" translate="yes" xml:space="preserve">
          <source>There are two operands, but no operator giving how you want to combine them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dc61084886e44e27660b4a97166077845b5c95" translate="yes" xml:space="preserve">
          <source>There are two package separators in Perl: A double colon (&lt;code&gt;::&lt;/code&gt; ) and a single quote (&lt;code&gt;'&lt;/code&gt;). Normal identifiers can start or end with a double colon, and can contain several parts delimited by double colons. Single quotes have similar rules, but with the exception that they are not legal at the end of an identifier: That is, &lt;code&gt;$'foo&lt;/code&gt; and &lt;code&gt;$foo'bar&lt;/code&gt; are legal, but &lt;code&gt;$foo'bar'&lt;/code&gt; is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75895a5372bf6c78e51cf652a3ae78bb3d9b2367" translate="yes" xml:space="preserve">
          <source>There are two principal conventions (it is useful to call them &lt;code&gt;Dos*&lt;/code&gt; and &lt;code&gt;Win*&lt;/code&gt; - though this part of the function signature is not always determined by the name of the API) of reporting the error conditions of OS/2 API. Most of &lt;code&gt;Dos*&lt;/code&gt; APIs report the error code as the result of the call (so 0 means success, and there are many types of errors). Most of &lt;code&gt;Win*&lt;/code&gt; API report success/fail via the result being &lt;code&gt;TRUE&lt;/code&gt; /&lt;code&gt;FALSE&lt;/code&gt; ; to find the reason for the failure one should call WinGetLastError() API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b7ddfa19fa0f3f3b716199a0f4db35df4687cb" translate="yes" xml:space="preserve">
          <source>There are two steps to running the test suite:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5595b4165f441d44d1cb7724594811d46925edfc" translate="yes" xml:space="preserve">
          <source>There are two structures used to store a compiled regular expression. One, the &lt;code&gt;regexp&lt;/code&gt; structure described in &lt;a href=&quot;perlreapi&quot;&gt;perlreapi&lt;/a&gt; is populated by the engine currently being. used and some of its fields read by perl to implement things such as the stringification of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2fe23c780ba1b117d60c962e46037021ac3aa2" translate="yes" xml:space="preserve">
          <source>There are two syntaxes for formatting codes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7371ec3e37b63adab8d04f7c4222af55c486c054" translate="yes" xml:space="preserve">
          <source>There are two that I can think off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d886c39930696ad6e408c59f68366994aaac004" translate="yes" xml:space="preserve">
          <source>There are two ways to build persistent private variables in Perl 5.10. First, you can simply use the &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; feature. Or, you can use closures, if you want to stay compatible with releases older than 5.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7079fb330c8f6fcf4a67d7d60f1f7e8ba9c961" translate="yes" xml:space="preserve">
          <source>There are two ways to create and load an AV. The first method creates an empty AV:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bc33b0558cf40893cd4b6a9aee4a0aeea211f9" translate="yes" xml:space="preserve">
          <source>There are two ways to enable debugging output for regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6ac5b22382be34f18ee4c2a153755024871b3a" translate="yes" xml:space="preserve">
          <source>There are two ways to load the &lt;code&gt;feature&lt;/code&gt; pragma implicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f214eee3e697782835e9e4f8a448217e9a53a985" translate="yes" xml:space="preserve">
          <source>There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge module, included with Mac OS X, can be used by standalone scripts to access Foundation (i.e. non-GUI) classes and objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409a8226f327930f82376970d0a5dd5d41e49fa0" translate="yes" xml:space="preserve">
          <source>There are undoubtedly serious bugs lurking somewhere in code this funky :-) Bug reports and other feedback are most welcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85be9b959b2e4ac88632b966dc97bb4a96c09ffb" translate="yes" xml:space="preserve">
          <source>There are undoubtedly serious bugs lurking somewhere in this code, if only because parts of it give the impression of understanding a great deal more about Perl than they really do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b3f04345fdb786670dce0b2cea7b0b8304663e" translate="yes" xml:space="preserve">
          <source>There are useful variations on this theme. The sense of the match can be reversed by using the &lt;code&gt;!~&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9efcf4d71ac56a124108c21d7833f5bea0582a" translate="yes" xml:space="preserve">
          <source>There are usually several synonyms for each possible value. Use &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; to access those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defaf951c93d8c59c8e8c2838dbcdfdd9abafeeb" translate="yes" xml:space="preserve">
          <source>There are usually three or four interval timers (signals) available: the &lt;code&gt;$which&lt;/code&gt; can be &lt;code&gt;ITIMER_REAL&lt;/code&gt; , &lt;code&gt;ITIMER_VIRTUAL&lt;/code&gt; , &lt;code&gt;ITIMER_PROF&lt;/code&gt; , or &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; . Note that which ones are available depends: true UNIX platforms usually have the first three, but only Solaris seems to have &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; (which is used to profile multithreaded programs). Win32 unfortunately does not have interval timers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d22a105cc916ea14dd34be71dc22f4c1bb3fd7e" translate="yes" xml:space="preserve">
          <source>There are various aspects of the pattern that can be used to facilitate optimisations along these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cedfe60646d2e7422ff8b2a7a07f8c037537db" translate="yes" xml:space="preserve">
          <source>There are various other failures, that as of SunOS 4.1.4 and gcc 3.2.2 look a lot like gcc bugs. Many of the failures happen in the Encode tests, where for example when the test expects &quot;0&quot; you get &quot;&amp;amp;#48;&quot; which should after a little squinting look very odd indeed. Another example is earlier in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93c51ec114e78593d3350d4739a1d10d41d678a" translate="yes" xml:space="preserve">
          <source>There are various other synonyms that can be used besides the names listed in the table. For example, &lt;code&gt;\p{PosixAlpha}&lt;/code&gt; can be written as &lt;code&gt;\p{Alpha}&lt;/code&gt; . All are listed in &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fb423bc3be57a7bce8d37147a935d047431e3f" translate="yes" xml:space="preserve">
          <source>There are various special make targets that can be used to test Perl slightly differently than the standard &quot;test&quot; target. Not all them are expected to give a 100% success rate. Many of them have several aliases, and many of them are not available on certain operating systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a37b656849e5abe23739ebb1083bad00e7235fc" translate="yes" xml:space="preserve">
          <source>There are various syntaxes, listed below. In the syntaxes given, &lt;code&gt;text&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , and &lt;code&gt;section&lt;/code&gt; cannot contain the characters '/' and '|'; and any '&amp;lt;' or '&amp;gt;' should be matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37ed54ad4b4e800cd45604ce3c3818f96427db4" translate="yes" xml:space="preserve">
          <source>There are various things to note:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76fc3582c89676c08603c7aa65b9cc5c9b6bcec" translate="yes" xml:space="preserve">
          <source>There are various ways in which the private and public flags may differ. For example, in perl 5.16 and earlier a tied SV may have a valid underlying value in the IV slot (so SvIOKp is true), but the data should be accessed via the FETCH routine rather than directly, so SvIOK is false. (In perl 5.18 onwards, tied scalars use the flags the same way as untied scalars.) Another is when numeric conversion has occurred and precision has been lost: only the private flag is set on 'lossy' values. So when an NV is converted to an IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9b799d87e5a86957d5b5b84b03a08b714f7c53" translate="yes" xml:space="preserve">
          <source>There are web archives of the mailing list at:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35625b0405457bfbc71b97ae568ca975b4ffb8db" translate="yes" xml:space="preserve">
          <source>There aren't currently any real UTF-8 locales, even though some locale names contain the string &quot;UTF-8&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc581d54ed5726e14da03dd8d1af5cdf478d3d5" translate="yes" xml:space="preserve">
          <source>There can be whitespace between the operator and the quoting characters, except when &lt;code&gt;#&lt;/code&gt; is being used as the quoting character. &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q#foo#&lt;/a&gt;&lt;/code&gt; is parsed as the string &lt;code&gt;foo&lt;/code&gt; , while &lt;code&gt;q #foo#&lt;/code&gt; is the operator &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; followed by a comment. Its argument will be taken from the next line. This allows you to write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8e18aa50aec43fc98b47477339b319d9bf73e8" translate="yes" xml:space="preserve">
          <source>There does not need to be whitespace at the start of the &quot;&lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; input&lt;/code&gt; &quot; line, but it is useful for improving readability. Placing a semi-colon at the end of that line is also optional. Any amount and kind of whitespace may be placed between the &quot;&lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;&quot; and &quot;&lt;code&gt;input&lt;/code&gt; &quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674ce7b791aca3a84e36e5ed443e53056266d194" translate="yes" xml:space="preserve">
          <source>There exists a port of Perl to the ILE environment. This port, however, is based quite an old release of Perl, Perl 5.00502 (August 1998). (As of July 2002 the latest release of Perl is 5.8.0, and even 5.6.1 has been out since April 2001.) If you need to run Perl on ILE, though, you may need this older port: &lt;a href=&quot;http://www.cpan.org/ports/#os400&quot;&gt;http://www.cpan.org/ports/#os400&lt;/a&gt; Note that any Perl release later than 5.00502 has not been ported to ILE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10164fd98639a8c3044721a3ed9b1556ef825187" translate="yes" xml:space="preserve">
          <source>There is a &quot;hints&quot; file for BS2000 called hints.posix-bc (because posix-bc is the OS name given by `uname`) that specifies the correct values for most things. The major problem is (of course) the EBCDIC character set. We have german EBCDIC version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5374f2f6990509e72c419ef45603ab27e3bc80da" translate="yes" xml:space="preserve">
          <source>There is a $diagnostics::DEBUG variable you may set if you're desperately curious what sorts of things are being intercepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a13bc3171b7f184b15ada467454c70823010717" translate="yes" xml:space="preserve">
          <source>There is a CPAN module, &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Casing&quot;&gt;Unicode::Casing&lt;/a&gt;&lt;/code&gt;, which allows you to define your own mappings to be used in &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; (or their double-quoted string inlined versions such as &lt;code&gt;\U&lt;/code&gt; ). (Prior to Perl 5.16, this functionality was partially provided in the Perl core, but suffered from a number of insurmountable drawbacks, so the CPAN module was written instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d3a875427fdf261fbe25e4b0c804d418f70748" translate="yes" xml:space="preserve">
          <source>There is a Clone module available on CPAN which implements deep cloning natively, i.e. without freezing to memory and thawing the result. It is aimed to replace Storable's dclone() some day. However, it does not currently support Storable hooks to redefine the way deep cloning is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1abe7c402c9589925c2fd5cdd3fc7738d6e503b" translate="yes" xml:space="preserve">
          <source>There is a Perl interface to TrollTech's Qt toolkit, but it does not appear to be maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2368d7b8dd55271d773f21a14ae9eb87cfb16560" translate="yes" xml:space="preserve">
          <source>There is a bug in perl5.6.0 with UV's that are &amp;gt;= 1&amp;lt;&amp;lt;31. This will show up as tests 8 and 9 of dualvar.t failing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ad132a2446bd3d40e9bf990b8f1b1aa2a313b3" translate="yes" xml:space="preserve">
          <source>There is a central directory for the Perl community: &lt;a href=&quot;http://perl.org&quot;&gt;http://perl.org&lt;/a&gt; maintained by the Perl Foundation (&lt;a href=&quot;http://www.perlfoundation.org/&quot;&gt;http://www.perlfoundation.org/&lt;/a&gt;), which tracks and provides services for a variety of other community sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14e35e5c9ac344a8ff5825a4050f6c40c0d0c03" translate="yes" xml:space="preserve">
          <source>There is a class method in &lt;code&gt;PerlIO::Layer&lt;/code&gt;&lt;code&gt;find&lt;/code&gt; which is implemented as XS code. It is called by &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; to validate the layers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130b2ceadd9a5f49d4085944a7e2f2612f7d6b00" translate="yes" xml:space="preserve">
          <source>There is a facility called &quot;file extension associations&quot;. This can be manipulated via the two commands &quot;assoc&quot; and &quot;ftype&quot; that come standard with Windows. Type &quot;ftype /?&quot; for a complete example of how to set this up for perl scripts (Say what? You thought Windows wasn't perl-ready? :).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c8b0f7b0876f90abc844b5aa213cd2600b5f4e" translate="yes" xml:space="preserve">
          <source>There is a fairly obvious gotcha included with the line directive: Debuggers and profilers will only show the last source line to appear at a particular line number in a given file. Care should be taken not to cause line number collisions in code you'd like to debug later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9de8709414ce3be99387c65eb446322517dbc7" translate="yes" xml:space="preserve">
          <source>There is a full version history in the Changes file, and the Test::More versions included as core can be found using &lt;a href=&quot;../module/corelist&quot;&gt;Module::CoreList&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8d363093d476f461ae875eb02ff5a19f7dc579" translate="yes" xml:space="preserve">
          <source>There is a functional programming API available for programmers to query information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afd310e60a2687221eb36caee1877ab18ed5e49" translate="yes" xml:space="preserve">
          <source>There is a further complication with non-closure anonymous subs (i.e. those that do not refer to any lexicals outside that sub). In this case, the anonymous prototype is shared rather than being cloned. This has the consequence that the parent may be freed while there are still active children, eg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36a7b0d4fbbd5ecb9f7c10c28ff43dbc8a0e2c1" translate="yes" xml:space="preserve">
          <source>There is a large collection of locale definitions at:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164a3c40b19ffea76d12a9ba083e8f9f3b80b6e7" translate="yes" xml:space="preserve">
          <source>There is a large memory overhead for each record offset and for each cache entry: about 310 bytes per cached data record, and about 21 bytes per offset table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d613e26c7817a472a293f57a0848d067f1f9f1e" translate="yes" xml:space="preserve">
          <source>There is a lint variant called &lt;code&gt;splint&lt;/code&gt; (Secure Programming Lint) available from &lt;a href=&quot;http://www.splint.org/&quot;&gt;http://www.splint.org/&lt;/a&gt; that should compile on any Unix-like platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d5366c81be8e75e037c5167a3d288dd1f93227" translate="yes" xml:space="preserve">
          <source>There is a list &lt;code&gt;=item&lt;/code&gt; right above the flagged line that has no text contents. You probably want to delete empty items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52de09f7d095fa1c4329ee2a9ca8823bc2d60ff" translate="yes" xml:space="preserve">
          <source>There is a partial workaround (which can be made complete with newer OS/2 kernels): create a forwarder DLL with the same name as the DLL of the older version of Perl, which forwards the entry points to the newer Perl's DLL. Make this DLL accessible on (say) the &lt;code&gt;BEGINLIBPATH&lt;/code&gt; of the new Perl executable. When the new executable accesses old Perl's extension DLLs, they would request the old Perl's DLL by name, get the forwarder instead, so effectively will link with the currently running (new) Perl DLL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ca9ff3bac6a75872d6256fe67ed0855ac24ebb" translate="yes" xml:space="preserve">
          <source>There is a potential syntactic ambiguity between signatures and prototypes (see &lt;a href=&quot;#Prototypes&quot;&gt;Prototypes&lt;/a&gt;), because both start with an opening parenthesis and both can appear in some of the same places, such as just after the name in a subroutine declaration. For historical reasons, when signatures are not enabled, any opening parenthesis in such a context will trigger very forgiving prototype parsing. Most signatures will be interpreted as prototypes in those circumstances, but won't be valid prototypes. (A valid prototype cannot contain any alphabetic character.) This will lead to somewhat confusing error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27354b37f9e6840bfd23c6a2efc0450a836df2f" translate="yes" xml:space="preserve">
          <source>There is a relationship between roles and classes, as each class implies the existence of a role of the same name. There is also a relationship between inheritance and roles, in that a subclass that inherits from an ancestor class implicitly performs any roles its parent performs. Thus you can use &lt;code&gt;DOES&lt;/code&gt; in place of &lt;code&gt;isa&lt;/code&gt; safely, as it will return true in all places where &lt;code&gt;isa&lt;/code&gt; will return true (provided that any overridden &lt;code&gt;DOES&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92cff32e2893123d7b11efd15dfbc88dd3973f8" translate="yes" xml:space="preserve">
          <source>There is a rich ecosystem of &lt;code&gt;Moose&lt;/code&gt; extensions on CPAN under the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org%2fsearch%3fquery%3dMooseX%26mode%3ddist&quot;&gt;MooseX&lt;/a&gt; namespace. In addition, many modules on CPAN already use &lt;code&gt;Moose&lt;/code&gt; , providing you with lots of examples to learn from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db652ab14c5e9efe4a7bcfa81f503ee955d3fa8" translate="yes" xml:space="preserve">
          <source>There is a section detected in the page name of L&amp;lt;...&amp;gt;, e.g. &lt;code&gt;L&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; . POD hyperlinks may point to POD documents only. Please write &lt;code&gt;C&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; instead. Some formatters are able to expand this to appropriate code. For links to (builtin) functions, please say &lt;code&gt;L&amp;lt;perlfunc/mkdir&amp;gt;&lt;/code&gt; , without ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c1ae760ee79d8ac4a3185792db70643cfa006e" translate="yes" xml:space="preserve">
          <source>There is a single stash called &lt;code&gt;PL_defstash&lt;/code&gt; that holds the items that exist in the &lt;code&gt;main&lt;/code&gt; package. To get at the items in other packages, append the string &quot;::&quot; to the package name. The items in the &lt;code&gt;Foo&lt;/code&gt; package are in the stash &lt;code&gt;Foo::&lt;/code&gt; in PL_defstash. The items in the &lt;code&gt;Bar::Baz&lt;/code&gt; package are in the stash &lt;code&gt;Baz::&lt;/code&gt; in &lt;code&gt;Bar::&lt;/code&gt; 's stash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410d21275559c0b069f15cf1ae78b078a451978c" translate="yes" xml:space="preserve">
          <source>There is a special form of this construct, called &lt;code&gt;\K&lt;/code&gt; (available since Perl 5.10.0), which causes the regex engine to &quot;keep&quot; everything it had matched prior to the &lt;code&gt;\K&lt;/code&gt; and not include it in &lt;code&gt;$&amp;amp;&lt;/code&gt; . This effectively provides variable-length look-behind. The use of &lt;code&gt;\K&lt;/code&gt; inside of another look-around assertion is allowed, but the behaviour is currently not well defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0599747d66099e132ad6b9e84b12be8636f0ae4e" translate="yes" xml:space="preserve">
          <source>There is a syntax error in the /usr/include/sys/socket.h header file that IBM supplies with USS V2R7, V2R8, and possibly V2R9. The problem with the header file is that near the definition of the SO_REUSEPORT constant there is a spurious extra '/' character outside of a comment like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b527eadae01dab13ed85ec63c9837bc3c0c67bda" translate="yes" xml:space="preserve">
          <source>There is a tradeoff between taking full advantage of one particular type of computer and taking advantage of a full range of them. Naturally, as you broaden your range and become more diverse, the common factors drop, and you are left with an increasingly smaller area of common ground in which you can operate to accomplish a particular task. Thus, when you begin attacking a problem, it is important to consider under which part of the tradeoff curve you want to operate. Specifically, you must decide whether it is important that the task that you are coding has the full generality of being portable, or whether to just get the job done right now. This is the hardest choice to be made. The rest is easy, because Perl provides many choices, whichever way you want to approach your problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea25b9abfe4373f567bc9679e7275e7fb164486" translate="yes" xml:space="preserve">
          <source>There is a utility called &lt;a href=&quot;../corelist&quot;&gt;corelist&lt;/a&gt; provided with this module which is a convenient way of querying from the command-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82aef8cfd5e32e2a307fc10353cb3d2e49f98a7d" translate="yes" xml:space="preserve">
          <source>There is a variable &lt;code&gt;$File::Find::fullname&lt;/code&gt; which holds the absolute pathname of the file with all symbolic links resolved. If the link is a dangling symbolic link, then fullname will be set to &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9ea31c4237da29f14d09c3e17b0abf6058f6c2" translate="yes" xml:space="preserve">
          <source>There is a way to achieve a similar task from C via Perl API: create a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186d9ac4ec1df84f73c4528af239edb0b67d87e7" translate="yes" xml:space="preserve">
          <source>There is a way to completely hide any modifiable globals (they are all moved to heap), the compilation setting &lt;code&gt;-DPERL_GLOBAL_STRUCT_PRIVATE&lt;/code&gt; . It is not normally used, but can be used for testing, read more about it in &lt;a href=&quot;perlguts#Background-and-PERL_IMPLICIT_CONTEXT&quot;&gt;Background and PERL_IMPLICIT_CONTEXT in perlguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887ba5df14249dda0cf87b4c4aa3777b9fca5f36" translate="yes" xml:space="preserve">
          <source>There is a way to tell perl to do complete cleanup: set the environment variable PERL_DESTRUCT_LEVEL to a non-zero value. The t/TEST wrapper does set this to 2, and this is what you need to do too, if you don't want to see the &quot;global leaks&quot;: For example, for running under valgrind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691cdea86f4db4ba9a2ac59e7fc6b55f031421ad" translate="yes" xml:space="preserve">
          <source>There is absolutely no excuse for not documenting your extension. Documentation belongs in the .pm file. This file will be fed to pod2man, and the embedded documentation will be converted to the manpage format, then placed in the blib directory. It will be copied to Perl's manpage directory when the extension is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cca778f6ffeefe438e516146882fedcff922a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigrat;&lt;/code&gt; which gives you big rationals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bcf99a2a57a573a071e20e50556250aa32095b" translate="yes" xml:space="preserve">
          <source>There is also a function to add magic to an &lt;code&gt;HV&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f310316f81fc52692e5ac947e6e74f350603233" translate="yes" xml:space="preserve">
          <source>There is also a larger form of a char class structure used to represent POSIX char classes under &lt;code&gt;/l&lt;/code&gt; matching, called &lt;code&gt;regnode_charclass_posixl&lt;/code&gt; which has an additional 32-bit bitmap indicating which POSIX char classes have been included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1a33cdb5c1f767d6b5b045c29afd70795ca96e" translate="yes" xml:space="preserve">
          <source>There is also a toyedit Text widget based editor written in Perl that is distributed with the Tk module on CPAN. The ptkdb ( &lt;a href=&quot;http://ptkdb.sourceforge.net/&quot;&gt;http://ptkdb.sourceforge.net/&lt;/a&gt; ) is a Perl/Tk-based debugger that acts as a development environment of sorts. Perl Composer ( &lt;a href=&quot;http://perlcomposer.sourceforge.net/&quot;&gt;http://perlcomposer.sourceforge.net/&lt;/a&gt; ) is an IDE for Perl/Tk GUI creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace8b22bc48d6e6e8b62fe08966c97467280b304" translate="yes" xml:space="preserve">
          <source>There is an edge case when using &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::method&lt;/a&gt;&lt;/code&gt; from within a subroutine which was created in a different module than the one it is called from. It sounds complicated, but it really isn't. Here is an example which will not work correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407ad0e2a6f54d3dcabda775887575e4b7a50908" translate="yes" xml:space="preserve">
          <source>There is another directory ($CPAN::Config-&amp;gt;{keep_source_where}) where the original distribution files are kept. This directory is not covered by the cache manager and must be controlled by the user. If you choose to have the same directory as build_dir and as keep_source_where directory, then your sources will be deleted with the same fifo mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cdb83a1e784fb0e74fd64a5af55da9c7c710fa" translate="yes" xml:space="preserve">
          <source>There is another method which can be used, namely letting Perl do it for you automatically whenever it regains control after the callback has terminated. This is done by simply not using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259d1525b7b40afbda3635dfb60885ec2065cd0c" translate="yes" xml:space="preserve">
          <source>There is another way to trade clarity for compactness: INPUT sections allow declaration of C variables which do not appear in the parameter list of a subroutine. Thus the above code for mutate() can be rewritten as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6993af1c1a90a2fde20c8f99658cf4ef71df4e8c" translate="yes" xml:space="preserve">
          <source>There is currently no way to turn off the guesswork that tries to format unmarked text appropriately, and sometimes it isn't wanted (particularly when using POD to document something other than Perl). Most of the work toward fixing this has now been done, however, and all that's still needed is a user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923e1f4510dc236d985b28a823797fd535b1836b" translate="yes" xml:space="preserve">
          <source>There is no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac6b5cad845dedcdb84c876c16dd65a46ac7fff" translate="yes" xml:space="preserve">
          <source>There is no 2GB limit on process size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4389ed97cd408884e879872fd75e0815bd058c0d" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;*.bs&lt;/code&gt; file supplied with the extension. Instead, there may be a &lt;code&gt;*_BS&lt;/code&gt; file which has code for the special cases, like posix for berkeley db on the NeXT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b489252bb15e6f1ecbef798ed7f66f86847082" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;systell&lt;/code&gt; function. Use &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; for that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea7c815b6a5bfae1bac221a98896771b7bb3184" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;systell&lt;/code&gt; function. Use &lt;code&gt;&lt;a href=&quot;sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; for that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a2f2ea0128a2c9f814d14705cbf22fee6bb330" translate="yes" xml:space="preserve">
          <source>There is no BNF, but you can paw your way through the yacc grammar in perly.y in the source distribution if you're particularly brave. The grammar relies on very smart tokenizing code, so be prepared to venture into toke.c as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ad1aee364e105dad5b41374df7e156cb6a43e2" translate="yes" xml:space="preserve">
          <source>There is no advantage to putting subroutines which will _always_ be called after the &lt;code&gt;__DATA__&lt;/code&gt; token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91dc6d303227194ff188b9dc751fb889211ca0d" translate="yes" xml:space="preserve">
          <source>There is no builtin &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; function. It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the package used. See also &lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;, &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe76bcf1a7a27510fd944eef657a41eda4d72a44" translate="yes" xml:space="preserve">
          <source>There is no builtin &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; function. It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module. The &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function calls the &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the package used. See also &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;, &lt;a href=&quot;../perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;../exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fb5ccde6fe684391b3c4f8ff40b801e9c52e40" translate="yes" xml:space="preserve">
          <source>There is no builtin way to say &quot;float this to the right hand side of the page, however wide it is.&quot; You have to specify where it goes. The truly desperate can generate their own format on the fly, based on the current number of columns, and then eval() it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec86a2b5c6a22a41774d9be82dd0c618a3c5c45" translate="yes" xml:space="preserve">
          <source>There is no check to assert that the filehandle passed from Perl to C was created with the right &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4297cc5a425f7dacf2e1ca88cce095827acd4bc7" translate="yes" xml:space="preserve">
          <source>There is no data immediately after the compressed data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784e961111d5a1435645faa2fd65cc0510bda63f" translate="yes" xml:space="preserve">
          <source>There is no decrypt function. This function isn't all that useful for cryptography (for that, look for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d50acdbf96ea291176f3a2d7e886b2944e1f2b9" translate="yes" xml:space="preserve">
          <source>There is no description given for most non-Perl defined properties (See &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt; for that).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbf1382c6e11055de15bc7597f5ea124690d870" translate="yes" xml:space="preserve">
          <source>There is no double interpolation in Perl, so the &lt;code&gt;$100&lt;/code&gt; is left as is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455b851bfe4dcf94993aa6ab9485d19207a20655" translate="yes" xml:space="preserve">
          <source>There is no easy way to provide this functionality in &lt;code&gt;Archive::Tar&lt;/code&gt; , because a tarball can contain many files, and each of which could be encoded in a different way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f49800696d7a52910d2aa32267a02c4e742caa" translate="yes" xml:space="preserve">
          <source>There is no equivalent operator to force an expression to be interpolated in list context because in practice, this is never needed. If you really wanted to do so, however, you could use the construction &lt;code&gt;@{[ (some expression) ]}&lt;/code&gt; , but usually a simple &lt;code&gt;(some expression)&lt;/code&gt; suffices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da385daea49ac6d957f9692c325e916978ed205" translate="yes" xml:space="preserve">
          <source>There is no equivalent to &lt;code&gt;fgets&lt;/code&gt; ; one should use &lt;code&gt;sv_gets&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b2b22bb272d9529f5a7b2eeb648640b188c1f1" translate="yes" xml:space="preserve">
          <source>There is no firewall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121835ac892ea37b942952f42c3ffe4014099c6d" translate="yes" xml:space="preserve">
          <source>There is no general solution to all of this. It is a mess.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f0999d25c4eb3604c738b2e0116726668320dd" translate="yes" xml:space="preserve">
          <source>There is no general solution to all of this. It's just a mess.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b8fcbb171cbccbd111cd2bd311ab6e6fcd1a58" translate="yes" xml:space="preserve">
          <source>There is no low precedence operator for defined-OR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8da251185c2a49373fb6cf76b3c29c18692d780" translate="yes" xml:space="preserve">
          <source>There is no need to inherit from the &lt;b&gt;SelfLoader&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3cd63858e09b2c6b6ec38df40d5828e10651d9" translate="yes" xml:space="preserve">
          <source>There is no one DBM module available on all platforms. &lt;code&gt;SDBM_File&lt;/code&gt; and the others are generally available on all Unix and DOSish ports, but not in MacPerl, where only &lt;code&gt;NDBM_File&lt;/code&gt; and &lt;code&gt;DB_File&lt;/code&gt; are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb47afbc2311aee90586d3371f78c62b2ed90edb" translate="yes" xml:space="preserve">
          <source>There is no quantifier &lt;code&gt;{,n}&lt;/code&gt; . That's interpreted as a literal string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378d1a5bc456220dab02d99326a34c6e9f3d48c2" translate="yes" xml:space="preserve">
          <source>There is no reason you should not use Perl as a language to glue Unix tools together, or to prototype a Macintosh application, or to manage the Windows registry. If it makes no sense to aim for portability for one reason or another in a given program, then don't bother.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860dd139f43df25bd42c1af5b8706f2806229649" translate="yes" xml:space="preserve">
          <source>There is no requirement to convert anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d190eab008c4161478c644351172b878f4f965a" translate="yes" xml:space="preserve">
          <source>There is no set_layers(), nor does get_layers() return a tied array mirroring the stack, or anything fancy like that. This is not accidental or unintentional. The PerlIO layer stack is a bit more complicated than just a stack (see for example the behaviour of &lt;code&gt;:raw&lt;/code&gt; ). You are supposed to use open() and binmode() to manipulate the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb140242be9c5687c6a498b3df2879f2625b5b6" translate="yes" xml:space="preserve">
          <source>There is no shell to process metacharacters, and the native standard is to pass a command line terminated by &quot;\n&quot; &quot;\r&quot; or &quot;\0&quot; to the spawned program. Redirection such as &lt;code&gt;&amp;gt; foo&lt;/code&gt; is performed (if at all) by the run time library of the spawned program. &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deba5b88e82775e19650d3712106c375f59f7e30" translate="yes" xml:space="preserve">
          <source>There is no significant speed gain between compile time and run time class creation, there is just a new, more standard order of events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7801d1cfdd5c48abee3f679e368ab10b3ad8dc" translate="yes" xml:space="preserve">
          <source>There is no simple answer to this question. Perl frameworks can run everything from basic file servers and small scale intranets to massive multinational multilingual websites that are the core to international businesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557d02393de130217c50453e6a017ae2fadcbc8e" translate="yes" xml:space="preserve">
          <source>There is no simple solution to this because of printf()'s limited intelligence, but for many types the right format is available as with either 'f' or '_f' suffix, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceb0317aba48e3a3b6cabda91010f77ae7a54b9" translate="yes" xml:space="preserve">
          <source>There is no simple way to access WPS objects. The only way I know is via &lt;code&gt;OS2::REXX&lt;/code&gt; and &lt;code&gt;SOM&lt;/code&gt; extensions (see &lt;a href=&quot;http://search.cpan.org/perldoc/OS2::REXX&quot;&gt;OS2::REXX&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/SOM&quot;&gt;SOM&lt;/a&gt;). However, we do not have access to convenience methods of Object-REXX. (Is it possible at all? I know of no Object-REXX API.) The &lt;code&gt;SOM&lt;/code&gt; extension (currently in alpha-text) may eventually remove this shortcoming; however, due to the fact that DII is not supported by the &lt;code&gt;SOM&lt;/code&gt; module, using &lt;code&gt;SOM&lt;/code&gt; is not as convenient as one would like it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06843bf4e2da3a9df3bd916b78c90fe1d32c0462" translate="yes" xml:space="preserve">
          <source>There is no special class syntax in Perl, but a package may act as a class if it provides subroutines to act as methods. Such a package may also derive some of its methods from another class (package) by listing the other package name(s) in its global @ISA array (which must be a package global, not a lexical).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83d3f75f9b7673dc85f27f3287a09a764999d4c" translate="yes" xml:space="preserve">
          <source>There is no specific mailing list for Perl on VOS. You can contact the Stratus Technologies Customer Assistance Center (CAC) for your region, or you can use the contact information located in the distribution files on the Stratus Anonymous FTP site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100c2da519836111bd839e12cb2fd3dec223d870" translate="yes" xml:space="preserve">
          <source>There is no specification of the formatter after the &lt;code&gt;=for&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670b965fe2aed5c0a5a49c42acbad90f9fc925e9" translate="yes" xml:space="preserve">
          <source>There is no such thing as a network representation for reals, so if you want to send your real numbers across computer boundaries, you'd better stick to text representation, possibly using the hexadecimal float format (avoiding the decimal conversion loss), unless you're absolutely sure what's on the other end of the line. For the even more adventuresome, you can use the byte-order modifiers from the previous section also on floating point codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485f9819a36f9757672adb9a54833a7d985d4ad2" translate="yes" xml:space="preserve">
          <source>There is no support at present for tied @ISA. There is a potential conflict between magic entries needed to notice setting of @ISA, and those needed to implement 'tie'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d4e44dc9af068a1f923f5eebfb3439b41ed99d" translate="yes" xml:space="preserve">
          <source>There is no support for dynamically linked libraries in QNX4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a30aae9994d5aba957137545368eea0ce0f5eb" translate="yes" xml:space="preserve">
          <source>There is no syseof() function, which is ok, since eof() doesn't work well on device files (like ttys) anyway. Use sysread() and check for a return value for 0 to decide whether you're done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc13de7d6614c5dd033dd321c9bbd82b325da63" translate="yes" xml:space="preserve">
          <source>There is no technical reason why a Berkeley DB database cannot be shared by both a Perl and a C application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f7328788708da5a0cdbfe8c102e73defe278fc" translate="yes" xml:space="preserve">
          <source>There is no way to reliably detect the encoding automatically, so if people keep sending you data without charset indication, you may have to educate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4ba678fc087cfe3ed3657d1daba5422cdd5616" translate="yes" xml:space="preserve">
          <source>There is nothing special about Memoize::Expire. It is just an example. If you don't like the policy that it implements, you are free to write your own expiration policy module that implements whatever policy you desire. Here is how to do that. Let us suppose that your module will be named MyExpirePolicy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcd6f426861d4a9d172b0ea1e309235434fe63e" translate="yes" xml:space="preserve">
          <source>There is now a &lt;code&gt;bsstr()&lt;/code&gt; method to get the string in scientific notation aka &lt;code&gt;1e+2&lt;/code&gt; instead of &lt;code&gt;100&lt;/code&gt; . Be advised that overloaded 'eq' always uses bstr() for comparison, but Perl will represent some numbers as 100 and others as 1e+308. If in doubt, convert both arguments to Math::BigInt before comparing them as strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f759aa48f981bff2eecdd8034d0137dd1c154a" translate="yes" xml:space="preserve">
          <source>There is of course lots more to find out about, this has just scratched the surface. The best way to learn more is to use perldoc to find out more about the language, to read the on-line help (&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt; is probably the next place to go), and of course, experiment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1fdaa6644f76210c716aac51df03a67575812a" translate="yes" xml:space="preserve">
          <source>There is often a matter of opinion and taste, and there isn't any one answer that fits everyone. In general, you want to use either the current stable release, or the stable release immediately prior to that one. Currently, those are perl5.18.x and perl5.16.x, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0ec9ff71273582227d757a4501aa81fcc373f2" translate="yes" xml:space="preserve">
          <source>There is one caveat with INSTALL_BASE, though, since it acts differently from the PREFIX and LIB settings that older versions of &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; advocated. INSTALL_BASE does not support installing modules for multiple versions of Perl or different architectures under the same directory. You should consider whether you really want that and, if you do, use the older PREFIX and LIB settings. See the &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Makemaker&quot;&gt;ExtUtils::Makemaker&lt;/a&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b4745ddf35dec712ea27023babefb7e0f47466" translate="yes" xml:space="preserve">
          <source>There is one exception to all this. &lt;code&gt;\p{All}&lt;/code&gt; looks like a Unicode property, but it is a Perl extension that is defined to be true for all possible code points, Unicode or not, so no warning is ever generated when matching this against a non-Unicode code point. (Prior to v5.20, it was an exact synonym for &lt;code&gt;\p{Any}&lt;/code&gt; , matching code points &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;0x10FFFF&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74416e05e81083925dbb5ceee8b9f9eabc0d1420" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa93104b268b1c94a90858506e09be1c5b4335fe" translate="yes" xml:space="preserve">
          <source>There is one exception, and that is base 2 with negative $x:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa0a4472a2d7ed2b714a912f015cd1d6e2a650e" translate="yes" xml:space="preserve">
          <source>There is one exception. If you use an alphanumeric character as the delimiter of your pattern (which you probably shouldn't do for readability reasons), you have to escape the delimiter if you want to match it. Perl won't warn then. See also &lt;a href=&quot;perlop#Gory-details-of-parsing-quoted-constructs&quot;&gt;Gory details of parsing quoted constructs in perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6afd3e4f300e1185505b80a57213e90e8f05b7f4" translate="yes" xml:space="preserve">
          <source>There is one minor difference: if variables are declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; in the initialization section of the &lt;code&gt;for&lt;/code&gt; , the lexical scope of those variables is exactly the &lt;code&gt;for&lt;/code&gt; loop (the body of the loop and the control sections).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ea2627da96768f4457b4c193dca3613fbaa7aa" translate="yes" xml:space="preserve">
          <source>There is one small difference between &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigint&lt;/code&gt; : the former will not affect assignments to variables and the return value of some functions. &lt;code&gt;bigint&lt;/code&gt; truncates these results to integer too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84dd6a42f4605e651baa6c6eefa2a08f75e64c2" translate="yes" xml:space="preserve">
          <source>There is one subtle difference between the following statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577b4723acc7dc122f5a6c392fd693ead8ac6f77" translate="yes" xml:space="preserve">
          <source>There is one unary operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67d211508568f3ee020a0acfadaaf645e5efa24" translate="yes" xml:space="preserve">
          <source>There is only a single &lt;code&gt;%^H&lt;/code&gt; , but arbitrarily many modules that want to use its scoping semantics. To avoid stepping on each other's toes, they need to be sure to use different keys in the hash. It is therefore conventional for a module to use only keys that begin with the module's name (the name of its main package) and a &quot;/&quot; character. After this module-identifying prefix, the rest of the key is entirely up to the module: it may include any characters whatsoever. For example, a module &lt;code&gt;Foo::Bar&lt;/code&gt; should use keys such as &lt;code&gt;Foo::Bar/baz&lt;/code&gt; and &lt;code&gt;Foo::Bar/$%/_!&lt;/code&gt; . Modules following this convention all play nicely with each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c0c34478d863fe370e8b15b9734da447a63b38" translate="yes" xml:space="preserve">
          <source>There is outline support for co-existence of PerlIO with stdio. Obviously if PerlIO is implemented in terms of stdio there is no problem. However in other cases then mechanisms must exist to create a FILE * which can be passed to library code which is going to use stdio calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0392addc7a656cb8a34b007fdd104d3df93294e" translate="yes" xml:space="preserve">
          <source>There is some debate as to whether to say &quot;regexp&quot; or &quot;regex&quot;. In this document we will use the term &quot;regex&quot; unless there is a special reason not to, in which case we will explain why.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f838e3edb2d3e6da973960ec694558ee6ce5470" translate="yes" xml:space="preserve">
          <source>There is some problem with the way &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;f&lt;/code&gt; works under threaded Perl, perhaps because of the lexical scoping of &lt;code&gt;@_&lt;/code&gt; . This is a bug in Perl, and until it is resolved, memoized functions will see a slightly different &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; and will perform a little more slowly on threaded perls than unthreaded perls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c4c8715915dd906a17ab857892228134a49607" translate="yes" xml:space="preserve">
          <source>There is some whitespace on a seemingly empty line. POD is very sensitive to such things, so this is flagged. &lt;b&gt;vi&lt;/b&gt; users switch on the &lt;b&gt;list&lt;/b&gt; option to avoid this problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71483f882bf4da31c0c8d8f1949a4bc637c87a4" translate="yes" xml:space="preserve">
          <source>There is still a big part of the API not supported by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808a7cbe8640b29d30d1f97308938be9ff6d1171" translate="yes" xml:space="preserve">
          <source>There is still a small theoretical chance that a signal will interrupt the system-level &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; operation before completion. There is also a possibility that some STDIO implementations may call multiple system level &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt;s even if the buffer was empty to start. There may be some systems where this probability is reduced to zero, and this is not a concern when using &lt;code&gt;:perlio&lt;/code&gt; instead of your system's STDIO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96312d6625c318df54bef83c86f5b35fb95ca06e" translate="yes" xml:space="preserve">
          <source>There is the &quot;next regnode&quot; from a given regnode, a value which is rarely useful except that sometimes it matches up in terms of value with one of the others, and that sometimes the code assumes this to always be so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b46535959966668b5c0eb95890256b8fd5dc3c4" translate="yes" xml:space="preserve">
          <source>There is the &quot;next regop&quot; from a given regop/regnode. This is the regop physically located after the current one, as determined by the size of the current regop. This is often useful, such as when dumping the structure we use this order to traverse. Sometimes the code assumes that the &quot;next regnode&quot; is the same as the &quot;next regop&quot;, or in other words assumes that the sizeof a given regop type is always going to be one regnode large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e671500d0c7786e7f8681f40410ba60c12dae4fc" translate="yes" xml:space="preserve">
          <source>There is the &quot;regnext&quot; from a given regop. This is the regop which is reached by jumping forward by the value of &lt;code&gt;NEXT_OFF()&lt;/code&gt; , or in a few cases for longer jumps by the &lt;code&gt;arg1&lt;/code&gt; field of the &lt;code&gt;regnode_1&lt;/code&gt; structure. The subroutine &lt;code&gt;regnext()&lt;/code&gt; handles this transparently. This is the logical successor of the node, which in some cases, like that of the &lt;code&gt;BRANCH&lt;/code&gt; regop, has special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e93b59e1cec82fb52bcc021241febda0271114" translate="yes" xml:space="preserve">
          <source>There is unfortunately no way to know whether the current emulator supports more than eight colors, which makes the choice of colors difficult. The most conservative choice is to use only the regular colors, which are at least displayed on all emulators. However, they will appear dark in sixteen-color terminal emulators, including most common emulators in UNIX X environments. If you know the display is one of those emulators, you may wish to use the bright variants instead. Even better, offer the user a way to configure the colors for a given application to fit their terminal emulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695fd95569c58aad4ef775aef68eb765f2b01d11" translate="yes" xml:space="preserve">
          <source>There is whitespace at the beginning or the end of the contents of L&amp;lt;...&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a3b67169b42d8576a9c6b1e3142c83d233d818" translate="yes" xml:space="preserve">
          <source>There is/was a minor twist which makes this scheme fragile: what to do with DLLs loaded from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3224e59e3b76dce8e510a893a97e615a7718acdb" translate="yes" xml:space="preserve">
          <source>There may be a few system-dependent issues of concern to EBCDIC Perl programmers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74512965a00a9ef27998a0f76a590e7ca4e44a5a" translate="yes" xml:space="preserve">
          <source>There may be a slight performance decrease in the filetest operations when the filetest pragma is in effect, because checking bits is very cheap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5aefd712f7c17e18d56a8092421c803470327d8" translate="yes" xml:space="preserve">
          <source>There may be several other functions that have undefined behavior so this list shouldn't be considered complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2ee1e9e100e424daf008c17d87249cb596b7da" translate="yes" xml:space="preserve">
          <source>There might be padding bytes between the fields to align the fields - the bytes can be anything</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da2d0d0ae5db5c30555083a00bfa8e94e394bba" translate="yes" xml:space="preserve">
          <source>There seem to be various problems in this long double implementation. If Configure detects this brokenness, it will disable the long double support. This can be overriden with explicit &lt;code&gt;-Duselongdouble&lt;/code&gt; (or &lt;code&gt;-Dusemorebits&lt;/code&gt; , which enables both long doubles and 64 bit integers). If you decide to enable long doubles, for most of the broken things Perl has implemented workarounds, but the handling of the special values infinity and NaN remains badly broken: for example infinity plus zero results in NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0335b463034771ce67a8d72b65b51f2c22f06a51" translate="yes" xml:space="preserve">
          <source>There seems to be a broken system header file in HP-UX 11.00 that breaks perl building in 32bit mode with GNU gcc-4.x causing this error. The same file for HP-UX 11.11 (even though the file is older) does not show this failure, and has the correct definition, so the best fix is to patch the header to match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ff19d7cd54ce39cc7fc4ec7d77ca64eb5bbd76" translate="yes" xml:space="preserve">
          <source>There should be a second &lt;code&gt;&quot;:&quot;&lt;/code&gt; , like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f721ea1c84751a36c3521319fb047aa7a307e4e5" translate="yes" xml:space="preserve">
          <source>There should be an operator before the &lt;code&gt;&quot;(&quot;&lt;/code&gt; , as there's no indication as to how the digits are to be combined with the characters in the Lao and Thai scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b586b7cb9ac2ab75263a6f83deec69bb4720e3" translate="yes" xml:space="preserve">
          <source>There should be no test failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7e045068e59967e564a49c6f93bb7b24be5931" translate="yes" xml:space="preserve">
          <source>There we're using the %USER_VARS hash instead of symbolic references. Sometimes this comes up in reading strings from the user with variable references and wanting to expand them to the values of your perl program's variables. This is also a bad idea because it conflates the program-addressable namespace and the user-addressable one. Instead of reading a string and expanding it to the actual contents of your program's own variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ff6f078c663dbcc013a189f161b1005798db67" translate="yes" xml:space="preserve">
          <source>There were at least two consecutive &lt;code&gt;=begin&lt;/code&gt; commands without the corresponding &lt;code&gt;=end&lt;/code&gt; . Only one &lt;code&gt;=begin&lt;/code&gt; may be active at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f453a9d5941f2f68e4cfdb1b1ca5576cad8a3040" translate="yes" xml:space="preserve">
          <source>There were race conditions 1.x implementations of File::Path's &lt;code&gt;rmtree&lt;/code&gt; function (although sometimes patched depending on the OS distribution or platform). The 2.0 version contains code to avoid the problem mentioned in CVE-2002-0435.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c41744f80fbb19ebe5f5b692cb01709180e04c" translate="yes" xml:space="preserve">
          <source>There were two things you could do, knowing this: be paranoid or be pragmatic. The paranoid approach was to do as little as possible in your signal handler. Set an existing integer variable that already has a value, and return. This doesn't help you if you're in a slow system call, which will just restart. That means you have to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; to longjmp(3) out of the handler. Even this is a little cavalier for the true paranoiac, who avoids &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in a handler because the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d8966c11e67db894b509268c4964e23520f68e" translate="yes" xml:space="preserve">
          <source>There will be less network overhead (and some efficiency in your program) if you specify either the udp or the icmp protocol. The tcp protocol will generate 2.5 times or more traffic for each ping than either udp or icmp. If many hosts are pinged frequently, you may wish to implement a small wait (e.g. 25ms or more) between each ping to avoid flooding your network with packets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b418e4f885e0ed1944b1a75c443618ba49e064f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s More Than One Way To Do It, the Perl Motto. The notion that there can be more than one valid path to solving a programming problem in context. (This doesn&amp;rsquo;t mean that more ways are always better or that all possible paths are equally desirable&amp;mdash;just that there need not be One True Way.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28bb8331230709c36ed738881be6c54310d8343" translate="yes" xml:space="preserve">
          <source>There's More Than One Way to Do It</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d73bf3d5d8029a31c5c535e944915e019e3d9d2" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899206f410877415c07b1eae00900c686b6ba014" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5182f679e917b06933e3121044c80451fb98d666" translate="yes" xml:space="preserve">
          <source>There's a couple of useful ones to know about straight away. You wouldn't think we're using any libraries at all at the moment, but '&lt;b&gt;M&lt;/b&gt;' will show which modules are currently loaded, and their version number, while '&lt;b&gt;m&lt;/b&gt;' will show the methods, and '&lt;b&gt;S&lt;/b&gt;' shows all subroutines (by pattern) as shown below. '&lt;b&gt;V&lt;/b&gt;' and '&lt;b&gt;X&lt;/b&gt;' show variables in the program by package scope and can be constrained by pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ae2cf96b3321649a9e67b52ce3c6b5c29a8066" translate="yes" xml:space="preserve">
          <source>There's a lot more to networking than this, but this should get you started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfd5539590f938c8db0768ae08c09cb62cf9574" translate="yes" xml:space="preserve">
          <source>There's a lot to know about character sets, and text encodings. It's probably best to spend a full day learning all this, but the basics can be learned in minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ae85d03f4b582c99ff96216db7d59e44f17f54" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cd02292a787335ff912b7d35685e3ae9e8fbc4" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41e3a2378d95f98d33fb21414c6067f31a384cf" translate="yes" xml:space="preserve">
          <source>There's a slight complication under the hood of &lt;code&gt;Memoize&lt;/code&gt; : There are actually</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de903209b03670bb7672de0c3e9635cd117f5ca" translate="yes" xml:space="preserve">
          <source>There's a subtle trap lurking in the offing: Adding another field after the Short Message (in variable &lt;code&gt;$sm&lt;/code&gt; ) is all right when packing, but this cannot be unpacked naively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5136f0522d5206778ac4f88d48f4c827076f1a46" translate="yes" xml:space="preserve">
          <source>There's a wiki dedicated to the Test Anything Protocol:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b112374a474f8a64038b7df632984baece37394" translate="yes" xml:space="preserve">
          <source>There's also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a726895b66eba4d8724a2292f078a4d2648322" translate="yes" xml:space="preserve">
          <source>There's also a &lt;a href=&quot;http://search.cpan.org/perldoc/File::Tail&quot;&gt;File::Tail&lt;/a&gt; module from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035e86078ae3280a54d8fc426b353c9ce230b2ad" translate="yes" xml:space="preserve">
          <source>There's also a negated version of it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194f92c1842e4ee102fc7a284b9e315ab368c04c" translate="yes" xml:space="preserve">
          <source>There's also a negated version, for the same reason we have &lt;code&gt;unless&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce23f5592e874ac51b717997ee3d4abcaf17d1eb" translate="yes" xml:space="preserve">
          <source>There's an &lt;code&gt;unmemoize&lt;/code&gt; function that you can import if you want to. Why would you want to? Here's an example: Suppose you have your cache tied to a DBM file, and you want to make sure that the cache is written out to disk if someone interrupts the program. If the program exits normally, this will happen anyway, but if someone types control-C or something then the program will terminate immediately without synchronizing the database. So what you can do instead is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ec3c4ec2591dd761c5a485e08fcf45d215a5be" translate="yes" xml:space="preserve">
          <source>There's an effort going on to document the internal functions and automatically produce reference manuals from them -- &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; is one such manual which details all the functions which are available to XS writers. &lt;a href=&quot;perlintern&quot;&gt;perlintern&lt;/a&gt; is the autogenerated manual for the functions which are not part of the API and are supposedly for internal use only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b109c22c8125d5fbc051e5882994774c0628f7aa" translate="yes" xml:space="preserve">
          <source>There's an example of this in &lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;). First, you put the terminal into &quot;no echo&quot; mode, then just read the password normally. You may do this with an old-style &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl()&lt;/a&gt;&lt;/code&gt; function, POSIX terminal control (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; or its documentation the Camel Book), or a call to the &lt;b&gt;stty&lt;/b&gt; program, with varying degrees of portability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee734c8b4d4a5b72b07450e993a31efdfcc81d2" translate="yes" xml:space="preserve">
          <source>There's an extraordinary number of people out there who don't appear to know anything about using the perl debugger, though they use the language every day. This is for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e675dcb566e351efbc0e3f85ec7104c90a083d" translate="yes" xml:space="preserve">
          <source>There's currently only one class that has a stable interface - CPAN::Shell. All commands that are available in the CPAN shell are methods of the class CPAN::Shell. The arguments on the commandline are passed as arguments to the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60d62cdc295d6cbdfb5f2a35e55c4e958719c10" translate="yes" xml:space="preserve">
          <source>There's even less need to distinguish between EBCDIC code pages, but to do so try looking at one or more of the characters that differ between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241fd51f25450a5ab0b7ec2c19699d2410027de0" translate="yes" xml:space="preserve">
          <source>There's no builtin way to do this, but &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; has a couple of techniques to make it possible for the intrepid hacker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ace2a9bc7f6a90948438c072e0ce5f8cdc2b9bc" translate="yes" xml:space="preserve">
          <source>There's no feedback from this, but you can see what breakpoints are set by using the list 'L' command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f521ff0638ee964aa0ea31d64e9248f45119c41c" translate="yes" xml:space="preserve">
          <source>There's no solution for this problem other than making the custom engine understand a construct like &lt;code&gt;(?:)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42438ddafc8a1bac998273822622081c6567570" translate="yes" xml:space="preserve">
          <source>There's no strong security layer in CPAN.pm. CPAN.pm helps you to install foreign, unmasked, unsigned code on your machine. We compare to a checksum that comes from the net just as the distribution file itself. But we try to make it easy to add security on demand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794fc83a38998696363c5b95bfbda5c120c0de13" translate="yes" xml:space="preserve">
          <source>There's no way to tell if a &lt;code&gt;char *&lt;/code&gt; or &lt;code&gt;U8 *&lt;/code&gt; string is UTF-8 or not. But you can tell if an SV is to be treated as UTF-8 by calling &lt;code&gt;DO_UTF8&lt;/code&gt; on it, after stringifying it with &lt;code&gt;SvPV&lt;/code&gt; or a similar macro. And, you can tell if SV is actually UTF-8 (even if it is not to be treated as such) by looking at its &lt;code&gt;SvUTF8&lt;/code&gt; flag (again after stringifying it). Don't forget to set the flag if something should be UTF-8. Treat the flag as part of the PV, even though it's not -- if you pass on the PV to somewhere, pass on the flag too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc25cfc8a3ec732d1d2283e554b506992b75eb5" translate="yes" xml:space="preserve">
          <source>There's not a single way to run code in the background so you don't have to wait for it to finish before your program moves on to other tasks. Process management depends on your particular operating system, and many of the techniques are covered in &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aa5e3dbb927bd52349be7be623e623e64f5bf0" translate="yes" xml:space="preserve">
          <source>There's now some new C code that's been added to the .xs file. The purpose of the &lt;code&gt;constant&lt;/code&gt; routine is to make the values that are #define'd in the header file accessible by the Perl script (by calling either &lt;code&gt;TESTVAL&lt;/code&gt; or &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; ). There's also some XS code to allow calls to the &lt;code&gt;constant&lt;/code&gt; routine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ac8386164e4284b824a87f18c211196212c066" translate="yes" xml:space="preserve">
          <source>There's one fine point I skipped. Line 5 is unnecessary, and we can get rid of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f039a4fa9d9f10c8752271acf6c5252496665e47" translate="yes" xml:space="preserve">
          <source>There's one more item to add to this list. Do &lt;b&gt;not&lt;/b&gt; export variable names. Just because &lt;code&gt;Exporter&lt;/code&gt; lets you do that, it does not mean you should.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23be60d3d8e40781087cd39d472decaae39f70d3" translate="yes" xml:space="preserve">
          <source>There, &quot;=shazbot&quot; will be parsed as a Pod command &quot;shazbot&quot;, not as a data paragraph &quot;=shazbot\n&quot;. However, you can express a data paragraph consisting of &quot;=shazbot\n&quot; using this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d934ecae0b30d1837eb15a99e36faf1a189e093b" translate="yes" xml:space="preserve">
          <source>There, the &quot;=begin html&quot;...&quot;=end html&quot; region is nested inside the larger &quot;=begin :biblio&quot;...&quot;=end :biblio&quot; region. Note that the content of the &quot;=begin html&quot;...&quot;=end html&quot; region is data paragraph(s), because the immediately containing region's identifier (&quot;html&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c11e16e3b4c4d1c6c6291b739425f3d103ebc32" translate="yes" xml:space="preserve">
          <source>Therefor, we recommend to only use &lt;code&gt;lynx&lt;/code&gt; as a last resort. This is why it is at the back of our list of methods to try as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f5648477726ba3de08027c1e14282ca2d62678" translate="yes" xml:space="preserve">
          <source>Therefore it is best to avoid &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; . Instead use &lt;code&gt;@CARP_NOT&lt;/code&gt; , &lt;code&gt;%Carp::Internal&lt;/code&gt; and &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0e80030071251142bc856e7654aae9ae473e69" translate="yes" xml:space="preserve">
          <source>Therefore we can use the &lt;code&gt;O_FILES&lt;/code&gt; variable to tell MakeMaker to use these objects into the shared library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc549460f9ec0f5ba049505f7c5226ae9e2f8140" translate="yes" xml:space="preserve">
          <source>Therefore, if you make changes to $ENV{TZ} from inside a thread other than the main thread then those changes will not be seen by strftime if you subsequently call that with the %Z formatting code. You must change $ENV{TZ} in the main thread to have the desired effect in this case (and you must also call _tzset() in the main thread to register the environment change).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f8fba915c890e8c346b81a259121ea682217ff" translate="yes" xml:space="preserve">
          <source>Therefore, if you want your scripts to be able to run on all versions of Perl, you should call &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; explicitly and not rely on automatic closing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60bd02288d8270eaef5b4fd58dd4835333cea91" translate="yes" xml:space="preserve">
          <source>Therefore, populate such variables &lt;b&gt;after&lt;/b&gt; declaring them as shared. (Scalar and scalar refs are not affected by this problem.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4c5f1975f02e1f013464b5926b49a349d976cd" translate="yes" xml:space="preserve">
          <source>Therefore, recursion should normally be avoided, but is nonetheless supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db068f38c67a6942c06b6242bd31cfce066e66c2" translate="yes" xml:space="preserve">
          <source>Therefore, when both -f and -t are omitted, &lt;b&gt;piconv&lt;/b&gt; just acts like &lt;b&gt;cat&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f61899aa2182fe38363f4a728d368f7dbd80080" translate="yes" xml:space="preserve">
          <source>Therefore, when serializing hooks are involved,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c563bb79b9bbcc9436e0f964c49bd1fc0638d285" translate="yes" xml:space="preserve">
          <source>These #vars represent opcode properties that you may want as part of your rendering. The '#' is intended as a private sigil; a #var's value is interpolated into the style-line, much like &quot;read $this&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f188e4230a9960392a0f6434bcd9cdb687b2105" translate="yes" xml:space="preserve">
          <source>These actually run the tests, analogous to the functions in Test::More.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b609b8bdbe47393836decca9fbf56107eb37fe" translate="yes" xml:space="preserve">
          <source>These all match a single codepoint with the given property. Use &lt;code&gt;\P&lt;/code&gt; in place of &lt;code&gt;\p&lt;/code&gt; to match one codepoint lacking that property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b0e821748bdb374700b2c0b377f04dafebe4c2" translate="yes" xml:space="preserve">
          <source>These all might have problems handling infinity right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f193401280223b6d90ef40113a3483800172634b" translate="yes" xml:space="preserve">
          <source>These are Locale::Maketext's assumptions about the class hierarchy formed by all your language classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d93f149b189abdf70833601535a585584795222" translate="yes" xml:space="preserve">
          <source>These are Perl bindings for the Gtk toolkit ( &lt;a href=&quot;http://www.gtk.org&quot;&gt;http://www.gtk.org&lt;/a&gt; ). The interface changed significantly between versions 1 and 2 so they have separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently it requires an X server on Mac OS, but a 'native' port is underway), and the widgets look the same on every platform: i.e., they don't match the native widgets. As with Wx, the Perl bindings follow the C API closely, and the documentation requires you to read the C documentation to understand it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cca08d46609adb849cad691c3d195ff57274e9" translate="yes" xml:space="preserve">
          <source>These are a few notes describing features peculiar to Plan 9 Perl. As such, it is not intended to be a replacement for the rest of the Perl 5 documentation (which is both copious and excellent). If you have any questions to which you can't find answers in these man pages, contact Luther Huffman at lutherh@stratcom.com and we'll try to answer them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035e487505e2bd7d2a574e14eebe3b30a69fa1a9" translate="yes" xml:space="preserve">
          <source>These are a hotchpotch of opcodes still waiting to be considered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab597ea19704a4092bef6ea8610d0145fc3acd27" translate="yes" xml:space="preserve">
          <source>These are all &quot;getters&quot; which return the data set for these attributes during object construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ad141ea95625d5f83dc60a511981417685e463" translate="yes" xml:space="preserve">
          <source>These are also the typical steps involved in writing a computer program. This makes perfect sense, because regular expressions are essentially programs written in a little computer language that specifies patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c614a56da53c8268e03927a0382855aa589c9ffe" translate="yes" xml:space="preserve">
          <source>These are alternate syntaxes for &lt;code&gt;decode('utf8', ...)&lt;/code&gt; and &lt;code&gt;encode('utf8',
...)&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a504c2130962ba4555e63c517df7cfb6c3415a56" translate="yes" xml:space="preserve">
          <source>These are based on what command.com does on Win98. They may be wrong for other Windows shells, I don't know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c07d55f7a2a925e22fec82104bd39d3cabc4301" translate="yes" xml:space="preserve">
          <source>These are called mid-endian, middle-endian, mixed-endian, or just weird.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9105b34a20a7fdd4e6d997e3a1e1ad31f3f321" translate="yes" xml:space="preserve">
          <source>These are covered in the following section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543fcf9df34b75f159b226a9706c32a67f612f3d" translate="yes" xml:space="preserve">
          <source>These are effectively no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6dbfbbee534ca87c61eabe600b034f42390dde5" translate="yes" xml:space="preserve">
          <source>These are equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c34193d065093cc77699a0d9ca713a7565b5a4e" translate="yes" xml:space="preserve">
          <source>These are fetched from one or more mirrored CPAN (Comprehensive Perl Archive Network) sites and unpacked in a dedicated directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1218c4eafb2ac24b7f5a6bfc47e38d53cda6dbb8" translate="yes" xml:space="preserve">
          <source>These are fprintf()/vfprintf() equivalents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9080846b04ed2aaef61ea34f53f7101d2c5f347" translate="yes" xml:space="preserve">
          <source>These are functions for searching through directory trees doing work on each file found similar to the Unix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d3c39fd0ecabf1c8dc2de9284d7be1c98f1d46" translate="yes" xml:space="preserve">
          <source>These are general guidelines for how to write POD documentation for Perl scripts and modules, based on general guidelines for writing good UNIX man pages. All of these guidelines are, of course, optional, but following them will make your documentation more consistent with other documentation on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad0e81d2d1dfbeb7b354f138de6b73ae95d9158" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl from source. This version of Perl requires the dynamic linking support that is found in OpenVOS Release 17.1 and thus is not supported on OpenVOS Release 17.0 or earlier releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8591b5e35cdacaa99ac7aebf4d9655f41e44d08" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under DOS (or w??), using DJGPP v2.03 or later. Under w95 long filenames are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebba6a1db0c9a0e274e92574c949eaf7a4b8fb7" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under Windows 2000 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56039c5fbea93b2739212ecaf27c30cc3edfb9c5" translate="yes" xml:space="preserve">
          <source>These are intended to be services performed by the clients of this API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5e58ad94dd8e12f40343c4fe00cb855a20e455" translate="yes" xml:space="preserve">
          <source>These are just the most common definitions of &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; in Perl. There may well be others. For example, on an EBCDIC implementation such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based) the above material is similar to &quot;Unix&quot; but the code numbers change:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a1ebead9f267c39fe9da94bb4791dac090d0bc" translate="yes" xml:space="preserve">
          <source>These are low-level functions to extract and use capabilities from a terminal capability (termcap) database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1b104453fcd9be9aa03bca5a6390babe809d8b" translate="yes" xml:space="preserve">
          <source>These are methods that you may find it handy to use, generally from %Lexicon routines of yours (whether expressed as Bracket Notation or not).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a95859137ef50d66689fe259453639b6dce722a" translate="yes" xml:space="preserve">
          <source>These are methods which are used in the course of writing a test but are not themselves tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14859e3783966bf81d1767be73584f0ff1e6b683" translate="yes" xml:space="preserve">
          <source>These are methods which help writing cross-platform code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fcdff63f0636b8e542860baaf4e1184f58638e" translate="yes" xml:space="preserve">
          <source>These are methods which produce make targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5242bfa15c97f14acba2cd2d00dbeca39084930f" translate="yes" xml:space="preserve">
          <source>These are most easily explained from the bottom up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff3d42df745b107b6d797477e3d4e7f8d24cab3" translate="yes" xml:space="preserve">
          <source>These are not the very basics, though. It is assumed that you already know the difference between bytes and characters, and realise (and accept!) that there are many different character sets and encodings, and that your program has to be explicit about them. Recommended reading is &quot;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&quot; by Joel Spolsky, at &lt;a href=&quot;http://joelonsoftware.com/articles/Unicode.html&quot;&gt;http://joelonsoftware.com/articles/Unicode.html&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbc1741b6d34271e2ec1a26ca7d6418baa0ebb4" translate="yes" xml:space="preserve">
          <source>These are only present when &lt;code&gt;netorder&lt;/code&gt; is FALSE. These are the sizes of various C datatypes of the perl that created this image. These must match the current perl for the image to be readable by Storable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920887e803f6cf14e09050db36f20df3c6ead9d1" translate="yes" xml:space="preserve">
          <source>These are only supported if your system has &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140e31bd5bffd898fd2913825a2d2d23dcf95138" translate="yes" xml:space="preserve">
          <source>These are pairwise exclusive, i.e. compact or loose, vt or ascii.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee44bfea63f0502e44e3769d9962bf8126742be7" translate="yes" xml:space="preserve">
          <source>These are passed in to your plugin's &lt;code&gt;load()&lt;/code&gt; class method (if it has one), along with a reference to the &lt;code&gt;App::Prove&lt;/code&gt; object that is invoking your plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87db38161fab9301a6c38e350a75487ce9dba0c7" translate="yes" xml:space="preserve">
          <source>These are readline issues and can only be fixed by studying readline configuration on your architecture and adjusting the referenced file accordingly. Please make a backup of the &lt;code&gt;/etc/inputrc&lt;/code&gt; or &lt;code&gt;~/.inputrc&lt;/code&gt; and edit them. Quite often harmless changes like uppercasing or lowercasing some arguments solves the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38ff2c237d2189cfc8068063c988ad558800625" translate="yes" xml:space="preserve">
          <source>These are scripts which will check the source things like ANSI C violations, POD encoding issues, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a1e3d5222d26c7ad00377b2f49dd3e19a69282" translate="yes" xml:space="preserve">
          <source>These are shortcuts for &lt;code&gt;$token-&amp;gt;tag() eq &lt;i&gt;somestring&lt;/i&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34937e959a1c366f5128e5b9fde3a8ddb4bd5e6f" translate="yes" xml:space="preserve">
          <source>These are similar to article(), body() and head(), but rather than returning the requested data directly, they return a tied filehandle from which to read the article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992979db9b32df20ed312f9df292c8122981c5bf" translate="yes" xml:space="preserve">
          <source>These are the files in the Perl release that contain references to Cygwin. These very brief notes attempt to explain the reason for all conditional code. Hopefully, keeping this up to date will allow the Cygwin port to be kept as clean as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ac46c3e2da8e520c552d106b13b25422f4ae84" translate="yes" xml:space="preserve">
          <source>These are the functions that are available, they may either be called as functions or class methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1f03a776fe8bedafea0b23935ca2ad13f5c2fe" translate="yes" xml:space="preserve">
          <source>These are the hash data structures that are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321abf696e1ac3f1c7e8ae4631a3e0352eed8069" translate="yes" xml:space="preserve">
          <source>These are the same as color('attribute') and can be used if you prefer typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4187810dcd65ec8ff13d408cac42774a760ce9e6" translate="yes" xml:space="preserve">
          <source>These are the signals which a program might normally expect to encounter and which by default cause it to terminate. They are HUP, INT, PIPE and TERM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c4067312fedca516066cb81563c6787bf50478" translate="yes" xml:space="preserve">
          <source>These are the signals which were trapped by default by the old &lt;b&gt;sigtrap&lt;/b&gt; interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT, SEGV, SYS, TERM, and TRAP. If no signals or signals lists are passed to &lt;b&gt;sigtrap&lt;/b&gt;, this list is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea91aaa564fccd3f4852969e3ebc12f20249663" translate="yes" xml:space="preserve">
          <source>These are the six methods that are exported as default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107044185540681260f831f30270844d122d9842" translate="yes" xml:space="preserve">
          <source>These are the things that you can put in the parameters to plan:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae5aa495786f78d7786c67162eeac298ded8720" translate="yes" xml:space="preserve">
          <source>These are to do with constructing a language handle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e9dcb05d530b0eaaf353a6122269805fd5136a" translate="yes" xml:space="preserve">
          <source>These are useful shortcuts to save on the typing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20957167192887677e71195c4861c8a5596fbdd0" translate="yes" xml:space="preserve">
          <source>These are valid only on ASCII platforms. Starting in Perl v5.22, simply changing the octal constants to equivalent &lt;code&gt;\N{U+...}&lt;/code&gt; values makes them portable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c3820acf49b8050b73972a9c61ce1cf6f1d9df" translate="yes" xml:space="preserve">
          <source>These are versions of the macros which take an explicit interpreter as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b056cc5f487123530dc637016a4d1c22c28e035c" translate="yes" xml:space="preserve">
          <source>These are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d16f3cffc4ac9689654ee5a738c8ecadd74b82" translate="yes" xml:space="preserve">
          <source>These can all be disabled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41fb2d0ecca05f4e2a4a44f51aab35f28ed5c33" translate="yes" xml:space="preserve">
          <source>These can be combined into a single regexp with a three-way alternation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b66993a553be0939fc1c087fcb0c54c5cdbbb0" translate="yes" xml:space="preserve">
          <source>These cases below violate the &quot;remainder has the sign of the second of the two arguments&quot;, since they wouldn't match up otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd6f63888a958514d8ebfc5074b3f479f8a49f9" translate="yes" xml:space="preserve">
          <source>These classes correspond in the obvious way to the underlying C structures of similar names. The inheritance hierarchy mimics the underlying C &quot;inheritance&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f11a03556aad53a0a7bc63133f793375ad1dc66" translate="yes" xml:space="preserve">
          <source>These code blocks can be prefixed with &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; to give the appearance of a subroutine (although this is not considered good style). One should note that these code blocks don't really exist as named subroutines (despite their appearance). The thing that gives this away is the fact that you can have &lt;b&gt;more than one&lt;/b&gt; of these code blocks in a program, and they will get &lt;b&gt;all&lt;/b&gt; executed at the appropriate moment. So you can't execute any of these code blocks by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b3b7dd37ba8a222332eb2984faedc72082d594" translate="yes" xml:space="preserve">
          <source>These commands take any number of arguments and investigate what is necessary to perform the action. Argument processing is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1935b5d017d485fb4c9165c42281556d84b0d309" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;../perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f96e99d050cd5ba24ce3555c69d5626ea1ddfe" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97251eb9b01071889514a18b4c3f732daa85a7b2" translate="yes" xml:space="preserve">
          <source>These constants are not imported by &lt;code&gt;IO::Compress::Zip&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9cdeb250fa9e2cb61227f4240cb75a90c2a763" translate="yes" xml:space="preserve">
          <source>These constants can also be used with fully qualified names, eg. &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24ced089c50142be624d4fe7279d5e7e8267bf6" translate="yes" xml:space="preserve">
          <source>These conversions are governed by the following general rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebb9f4990eefbf7af18e7f37f2d673045cd0b59" translate="yes" xml:space="preserve">
          <source>These conversions are invoked according to context as necessary. For example, the subroutine for &lt;code&gt;'&quot;&quot;'&lt;/code&gt; (stringify) may be used where the overloaded object is passed as an argument to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, and that for &lt;code&gt;'bool'&lt;/code&gt; where it is tested in the condition of a flow control statement (like &lt;code&gt;while&lt;/code&gt; ) or the ternary &lt;code&gt;?:&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40ed2255002784d89744404c25a8dfb75189849" translate="yes" xml:space="preserve">
          <source>These correspond (loosely) to fgetpos() and fsetpos(). Rather than stdio's Fpos_t they expect a &quot;Perl Scalar Value&quot; to be passed. What is stored there should be considered opaque. The layout of the data may vary from handle to handle. When not using stdio or if platform does not have the stdio calls then they are implemented in terms of PerlIO_tell() and PerlIO_seek().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab9bc2795a0ea30e5174b44302c5f3390695af2" translate="yes" xml:space="preserve">
          <source>These correspond functionally to fread() and fwrite() but the arguments and return values are different. The PerlIO_read() and PerlIO_write() signatures have been modeled on the more sane low level read() and write() functions instead: The &quot;file&quot; argument is passed first, there is only one &quot;count&quot;, and the return value can distinguish between error and &lt;code&gt;EOF&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faed5a4522cd8b94dc864e27b779abb63c4ce78" translate="yes" xml:space="preserve">
          <source>These correspond to fopen()/fdopen() and the arguments are the same. Return &lt;code&gt;NULL&lt;/code&gt; and set &lt;code&gt;errno&lt;/code&gt; if there is an error. There may be an implementation limit on the number of open handles, which may be lower than the limit on the number of open files - &lt;code&gt;errno&lt;/code&gt; may not be set when &lt;code&gt;NULL&lt;/code&gt; is returned if this limit is exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c39d61ce18e7b09b1791e93aa8066eeef62084" translate="yes" xml:space="preserve">
          <source>These correspond to fputs() and fputc(). Note that arguments have been revised to have &quot;file&quot; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e90caae28ef06f86a5a7c45f8c354bdfbb310ff" translate="yes" xml:space="preserve">
          <source>These defaults may change once perlio has been better tested and tuned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b42ed96c36dd8480d16597a1b739ba48b433615" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=perl. Defaults to $Config{installman*dir}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d2a82fca268aa8c538c7ef08b93ac2b88facef" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=site (default). Defaults to $(SITEPREFIX)/man/man$(MAN*EXT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e3f1b03dd4e2ce3d50494f40f9bb4bc33a9ff9" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=vendor. Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c3a72856e79ae11ef7788be093b884c47b09d5" translate="yes" xml:space="preserve">
          <source>These examples are realized in the code below, which could be copied to a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1d8aa8b62f74ea36ff39b0b63b9774953aaca0" translate="yes" xml:space="preserve">
          <source>These examples of attempts to use an ellipsis are syntax errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad269ea05e73affc724a0326dc3ecea88836b454" translate="yes" xml:space="preserve">
          <source>These examples often reflect the style and preference of the author of that piece of the documentation, and may be briefer than a corresponding line of code in a real program. Except where otherwise noted, you should assume that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; statements appear earlier in the &quot;program&quot;, and that any variables used have already been declared, even if those declarations have been omitted to make the example easier to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4181b23484c1b0366a0256854a440c5eed9952" translate="yes" xml:space="preserve">
          <source>These examples show how to make references to variables with names. Sometimes you want to make an array or a hash that doesn't have a name. This is analogous to the way you like to be able to use the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or the number 80 without having to store it in a named variable first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7900d790c497c44a25852d75caed60efb96bb183" translate="yes" xml:space="preserve">
          <source>These features are no longer considered experimental and their functionality has disappeared. It's your own fault if you wrote production programs using these features after we explicitly told you not to (see &lt;a href=&quot;perlpolicy&quot;&gt;perlpolicy&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdbc29b6059151fd36541ed2cea90e388fc6071" translate="yes" xml:space="preserve">
          <source>These features were so wildly successful and played so well with others that we decided to remove their experimental status and admit them as full, stable features in the world of Perl, lavishing all the benefits and luxuries thereof. They are also awarded +5 Stability and +3 Charisma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436079f5f30dfc97a1a6d7f8ea9906fefeca2983" translate="yes" xml:space="preserve">
          <source>These fields are used to keep track of how many paren groups could be matched in the pattern, which was the last open paren to be entered, and which was the last close paren to be entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8e2d7aa479f62270f36bb981c83130e3ea21ce" translate="yes" xml:space="preserve">
          <source>These files contain information on who maintains which modules. Run &lt;code&gt;perl Porting/Maintainers -M Module::Name&lt;/code&gt; to find out more information about a dual-life module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3add026b4eccbc256b7dbac98ef5e6ce0ff8a8" translate="yes" xml:space="preserve">
          <source>These flags can be set during compilation to enable optimizations in the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad448cfc75702b92a6132746a47d8bee944a550" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f149ae07a8478e188c52361aad3ec711ed1026a" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309e08bc8a3175c38d05ead911b510e18b559b99" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;../perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a272370ad05edf250f2041efdee62784d465ad39" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4036739b5240858c0bf581399bd57e7b5e9c9e" translate="yes" xml:space="preserve">
          <source>These forms may be assigned to, and cause the right-hand side to be evaluated in scalar context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a87abeab3fa4b07145fb59b22ed97519f70773" translate="yes" xml:space="preserve">
          <source>These free versions of Visual C++ 2008-2013 Professional contain the same compilers and linkers that ship with the full versions, and also contain everything necessary to build Perl, rather than requiring a separate download of the Windows SDK like previous versions did.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdfa79cbeb17377a5124b29f2fd31a6e8d98c48" translate="yes" xml:space="preserve">
          <source>These functions allow checksums to be merged. Refer to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba57dd2ab74f37811d43a497242362420e4296f0" translate="yes" xml:space="preserve">
          <source>These functions are exported only on request. They each take a single argument and return the absolute pathname for it. If no argument is given they'll use the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a75a016614f3f6a49b489f2532217d2dc9b130" translate="yes" xml:space="preserve">
          <source>These functions are interface of character data used internally. If you want only to get Unicode normalization forms, you don't need call them yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5805d5b7ed6958150825f5cb6f923e00d36788d" translate="yes" xml:space="preserve">
          <source>These functions are provided for backwards compatibility with common tempfile generation C library functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c85d18231511b3dd1840594c64b0cd5dd02c4fd" translate="yes" xml:space="preserve">
          <source>These functions are related to the method resolution order of perl classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565eacfa6d391bb1e8f9b310d413202832f4d770" translate="yes" xml:space="preserve">
          <source>These functions are used by the filter to obtain either a line or block from the next filter in the chain or the actual source file if there aren't any other filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40856071384296779ffb96483ca0013c6d7f3df" translate="yes" xml:space="preserve">
          <source>These functions are usually used inside an &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9ddd863a33c4087b2128f800b2bb735b670e0b" translate="yes" xml:space="preserve">
          <source>These functions control the global state of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524d44a200305a1bdc5134c684c7bc58ebf331b8" translate="yes" xml:space="preserve">
          <source>These functions grant &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; token as a prefix of the method name. Note that if you want to keep the returned glob for a long time, you need to check for it being &quot;AUTOLOAD&quot;, since at the later time the call may load a different subroutine due to $AUTOLOAD changing its value. Use the glob created as a side effect to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b1137b52cacd1fbff911e830d8d14363d490cb" translate="yes" xml:space="preserve">
          <source>These functions have the same side-effects as &lt;code&gt;gv_fetchmeth&lt;/code&gt; with &lt;code&gt;level==0&lt;/code&gt; . The warning against passing the GV returned by &lt;code&gt;gv_fetchmeth&lt;/code&gt; to &lt;code&gt;call_sv&lt;/code&gt; applies equally to these functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d4aef8dd151e8462fbb3063b8efcb68e0d87b2" translate="yes" xml:space="preserve">
          <source>These functions provide convenient and thread-safe means of manipulating hook variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f738338a9dbfbee4b5a909220a80f41318a9f381" translate="yes" xml:space="preserve">
          <source>These functions simply print $Config{ccflags} and $Config{ccdlflags}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd020ca0f66b00dde6a2341717a3dae0fc7c828" translate="yes" xml:space="preserve">
          <source>These functions take a hash as an argument. The recognized keys of this hash are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6359c7691ac9172680cb301b6768d6c5620c165" translate="yes" xml:space="preserve">
          <source>These functions take an input numeric code point in one encoding and return what its equivalent value is in the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebb5ef7a942f7d31cebfd11f8de6228de926c64" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;../perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbca2e2db6c0375d3253e7898e5f5abc5deaab1" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab8134e6c8ea614a58bbf4cba85fe875f47ac40" translate="yes" xml:space="preserve">
          <source>These interfaces are only available in Perl 5.9.5 and higher. See &lt;a href=&quot;http://search.cpan.org/perldoc/MRO::Compat&quot;&gt;MRO::Compat&lt;/a&gt; on CPAN for a mostly forwards compatible implementation for older Perls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800024eb93ec8e2e1c9e19ed6e58201379d4f5ea" translate="yes" xml:space="preserve">
          <source>These items are the primitives used to perform indenting, and to select text from amongst alternatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfe7afbcdb97590e1c6c0085eefd647c7035d88" translate="yes" xml:space="preserve">
          <source>These keys will be populated before any exceptions are thrown should there be an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a901d1a803d1f1e84cb86c073bdbaefe49dcbe0f" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;../perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1500951fb5f2dd9eeebd6c439509f1ad3f36d4ce" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017f89666b16c462ff4b71931d55ca635d0ecaed" translate="yes" xml:space="preserve">
          <source>These last two are only valid for pad name SVs. They only existed in the B::NV class before Perl 5.22. In 5.22 they were moved to the B::PADNAME class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3476aee9a9c9d8b18c6d57ac8c385c0348f0d4" translate="yes" xml:space="preserve">
          <source>These look just like character names but return multiple codepoints. Notice the &lt;code&gt;%vx&lt;/code&gt; vector-print functionality in &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76a83f91dda3c78158f07c2bcf605e73e782739" translate="yes" xml:space="preserve">
          <source>These loop ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available CPU time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a843eb74986a4e9f839472d2d8d150ea39980b05" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of integer variable &lt;code&gt;i&lt;/code&gt; at the end of enclosing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a2a9aebcff3586f69f55801776cb23fd4e90a9" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of pointers &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; must be a pointer of a type which survives conversion to &lt;code&gt;SV*&lt;/code&gt; and back, &lt;code&gt;p&lt;/code&gt; should be able to survive conversion to &lt;code&gt;char*&lt;/code&gt; and back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593dfba1d3d328349b77f1588cf82c2aaffa0443" translate="yes" xml:space="preserve">
          <source>These may not necessarily cause trouble, but indicate mediocre style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22b64582fc85ac43b9e96c24337a10a450121a5" translate="yes" xml:space="preserve">
          <source>These memory related ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available memory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c1bb576863e90102788a1b3ffe564db0c5c144" translate="yes" xml:space="preserve">
          <source>These messages are classified as follows (listed in increasing order of desperation):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bb74426f2aa2733dbc5c5a86f08523cab5f25f" translate="yes" xml:space="preserve">
          <source>These messages may safely be ignored. (Note that for a SunOS4 system, you must use -B/bin/ instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9f0b892cf28755d89fe7944f868ad5bf940e68" translate="yes" xml:space="preserve">
          <source>These methods all apply to the Ptr type for the structure; additionally two methods are constructed for the structure type itself, &lt;code&gt;_to_ptr&lt;/code&gt; which returns a Ptr type pointing to the same structure, and a &lt;code&gt;new&lt;/code&gt; method to construct and return a new structure, initialised to zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833ac724c3c333f81488114a18e12c4a9e975d1a" translate="yes" xml:space="preserve">
          <source>These methods all test the BigInt for being one specific value and return true or false depending on the input. These are faster than doing something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92da9e899f4e8b0a6a719a6370a299d62ec6b1c8" translate="yes" xml:space="preserve">
          <source>These methods are for setting up tests and declaring how many there are. You usually only want to call one of these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9725043aadb2020c60801a841d8cbbe42a310c40" translate="yes" xml:space="preserve">
          <source>These methods are not intended to be called by the user, but used or over-ridden by a sub-class of &lt;code&gt;Net::Cmd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96be7d81aefe7494626f31fbf2d601d47ed4e3e" translate="yes" xml:space="preserve">
          <source>These methods are only testing the sign, and not the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55156f755c79786d47317ca2de0a12228b5b4b7" translate="yes" xml:space="preserve">
          <source>These methods are useful when writing your own test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1371312bc20ca6b06acc065c53943c266c38f79b" translate="yes" xml:space="preserve">
          <source>These methods control where Test::Builder will print its output. They take either an open &lt;code&gt;$filehandle&lt;/code&gt; , a &lt;code&gt;$filename&lt;/code&gt; to open and write to or a &lt;code&gt;$scalar&lt;/code&gt; reference to append to. It will always return a &lt;code&gt;$filehandle&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dabfc6c3e23d636029050966dc499c5c862fee9" translate="yes" xml:space="preserve">
          <source>These methods get the values of similarly named fields within the OP data structure. See top of &lt;code&gt;op.h&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac0ba268e5d0e742f5c1a8121218a2683f22449" translate="yes" xml:space="preserve">
          <source>These methods guarantee fast individual tests but require a re-organization of the original list or array. They only pay off if you have to test multiple values against the same array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb3b559e380c719f80028fb428c3eb720e12704" translate="yes" xml:space="preserve">
          <source>These methods install a transparent filter on the I/O stream that converts data from the specified encoding when it is read in from the stream. The result is always Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0828193002db36233bc401e0a0e9c0dbb462a1" translate="yes" xml:space="preserve">
          <source>These methods provide a user interface to the &lt;code&gt;Net::Cmd&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff435d938391d9561763fbcab2d9f747b7f84a93" translate="yes" xml:space="preserve">
          <source>These methods set the size (in half-points, like 52 for 26-point) that these heading levels will appear as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcc7bd5fdde6b4a0c109a19d7071ed04915f8b9" translate="yes" xml:space="preserve">
          <source>These methods use commands that are not part of the RFC977 documentation. Some servers may not support all of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ccd9bd046a9504a4b8ad4115c9067507a8e143" translate="yes" xml:space="preserve">
          <source>These modes are all actually set via a bitmask. Here is how the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants are laid out. You can import the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallbacks)&lt;/code&gt; , and you can import the generic bitmask constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallback_all)&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d789a994adbfeec56de6cff1edba3230c60ae5bf" translate="yes" xml:space="preserve">
          <source>These modifiers are restored at the end of the enclosing group. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b50f0d55e6d3bcc6eb1ad193029b6cf71ad0ceb" translate="yes" xml:space="preserve">
          <source>These modifiers do not carry over into named subpatterns called in the enclosing group. In other words, a pattern such as &lt;code&gt;((?i)(?&amp;amp;NAME))&lt;/code&gt; does not change the case-sensitivity of the &quot;NAME&quot; pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fbd761faf543e63a6416a5e28a730d54795855" translate="yes" xml:space="preserve">
          <source>These modifiers, all new in 5.14, affect which character-set rules (Unicode, etc.) are used, as described below in &lt;a href=&quot;#Character-set-modifiers&quot;&gt;Character set modifiers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9708d2ade8d02334095230804c31cb6c6f062f" translate="yes" xml:space="preserve">
          <source>These names are case-insensitive. By default (if specification is omitted), 'shifted' is adopted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a7bae57c0b7e47324c6368dda30c35ad91dca7" translate="yes" xml:space="preserve">
          <source>These notices must be retained in any copies of any part of this documentation and/or software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbc4f1ae4d272c0d4681905f6fb23798e4783eb" translate="yes" xml:space="preserve">
          <source>These numbers was achieved Apr 2004 with ActivePerl-5.8.3 running under Linux on a P4 2.8 GHz CPU. The last 5 entries differ by being pure perl implementations of the algorithms, which explains why they are so slow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16394db34a86c1309e6f32038763254bbfec1e7" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;../perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902ffcf3ea51513d56fbec3ce0266f1b87291429" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23835ab35bd3941ef690822a20797ba91ee28d2e" translate="yes" xml:space="preserve">
          <source>These operators are exempt from the &quot;looks like a function rule&quot; described above. That is, an opening parenthesis after the operator does not affect how much of the following code constitutes the argument. Put the opening parentheses before the operator to separate it from code that follows (this applies only to operators with higher precedence than unary operators, of course):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b54b9bb627d1cf1404f3b5dab668ec8269f4aa6" translate="yes" xml:space="preserve">
          <source>These operators obtain the information described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, if you have the privileges necessary to retrieve the named user's UAF information via &lt;code&gt;sys$getuai&lt;/code&gt; . If not, then only the &lt;code&gt;$name&lt;/code&gt; , &lt;code&gt;$uid&lt;/code&gt; , and &lt;code&gt;$gid&lt;/code&gt; items are returned. The &lt;code&gt;$dir&lt;/code&gt; item contains the login directory in VMS syntax, while the &lt;code&gt;$comment&lt;/code&gt; item contains the login directory in Unix syntax. The &lt;code&gt;$gcos&lt;/code&gt; item contains the owner field from the UAF record. The &lt;code&gt;$quota&lt;/code&gt; item is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e657656c9789c3619d255f79ac9b3a6c835215" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because of the risk of them being used to generate floating point exceptions (which would have to be caught using a $SIG{FPE} handler).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ea0da5f8ce978d8d492f686d44331bb4fc3946" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because they have an effect beyond the scope of the compartment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4dfb8577c0955249e95ba26e17b894dbf4b7a2" translate="yes" xml:space="preserve">
          <source>These ops are related to multi-threading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2901e27ec7bca28af121ed51d6417c782431820f" translate="yes" xml:space="preserve">
          <source>These ops enable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55c6aacfd2933ba2a5d8d99593dbebe1787988f" translate="yes" xml:space="preserve">
          <source>These options affect which handler will be used for subsequently installed signals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c586cad3979b967f1d8c83a031669d4e85f7d5" translate="yes" xml:space="preserve">
          <source>These options control the 'vertical display' of opcodes. The display 'order' is also called 'mode' elsewhere in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5693ca212dce09ab36fc48e6272f7336e49446b" translate="yes" xml:space="preserve">
          <source>These options select the line-style (or just style) used to render each opcode, and dictates what info is actually printed into each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822ae20d8832a94dbc806795384f0c1cb46d5024" translate="yes" xml:space="preserve">
          <source>These packages can all be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00985d023d49949f9c18d4b6917b5fcc1fe8b04" translate="yes" xml:space="preserve">
          <source>These packages can be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6b901a4b16ea8fd5c1a17b0f5f523262d0ae63" translate="yes" xml:space="preserve">
          <source>These packages can both be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b087e3db9d0ec8ccf2941b80cf3aaf473d4556" translate="yes" xml:space="preserve">
          <source>These perl routines currently (as of Perl v.5.8.6) cannot handle passed inf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee158f8c062eca4d28a3ec2d9f8d880c70ecea2" translate="yes" xml:space="preserve">
          <source>These possessive quantifiers represent a special case of a more general concept, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6c7d2c77daf624f0f4dda10d349c1b00557da" translate="yes" xml:space="preserve">
          <source>These properties are &lt;code&gt;\b&lt;/code&gt; (without braces), &lt;code&gt;\B&lt;/code&gt; (without braces), &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt; , &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;\W&lt;/code&gt; , and all the Posix character classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d4c7299af6c451da747abf6a31ed43bc6d224c" translate="yes" xml:space="preserve">
          <source>These quantifiers will try to match as much of the string as possible, while still allowing the regex to match. So we have</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26153a279914ed6ae972bab9be5035c10687695d" translate="yes" xml:space="preserve">
          <source>These results are &quot;meta&quot; information about the total results of an individual test program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bea10980ed9e4e8701806a5267309dec8b36b3d" translate="yes" xml:space="preserve">
          <source>These results refer to individual tests which are run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99e408a46643ae41ce4a2a5b658c331ee2d8a0f" translate="yes" xml:space="preserve">
          <source>These routines all create system-specific portability problems. As noted elsewhere, Perl is at the mercy of your C libraries for much of its system behavior. It's probably safest to assume broken SysV semantics for signals and to stick with simple TCP and UDP socket operations; e.g., don't try to pass open file descriptors over a local UDP datagram socket if you want your code to stand a chance of being portable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7accb91a83a147e188cfdb7ea0bdeddeb0f7f3a7" translate="yes" xml:space="preserve">
          <source>These routines allow you to parse file paths into their directory, filename and suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c49f2650fd89670405ec1fbc536b94e9ae8bdf" translate="yes" xml:space="preserve">
          <source>These routines are all documented in the Locale::Codes::API man page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd965d62212a6eeb3c7fb76c8f854332dc29f76" translate="yes" xml:space="preserve">
          <source>These routines are quite efficient and yet are always guaranteed to agree with &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;. We manage this by caching the start times of any months we've seen before. If we know the start time of the month, we can always calculate any time within the month. The start times are calculated using a mathematical formula. Unlike other algorithms that do multiple calls to &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e296b7f9a5e96b639ca1839fa4442d3f45e92709" translate="yes" xml:space="preserve">
          <source>These routines are the same as their counterparts in the system C library. In list context, the return values from the various get routines are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1ea3e493711677c93d92be2ec1c6ec9a5ee909" translate="yes" xml:space="preserve">
          <source>These routines used to be called &lt;code&gt;perl_call_sv&lt;/code&gt; , etc., before Perl v5.6.0, but those names are now deprecated; macros of the same name are provided for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb1fb969b6c77a6565b33ce0e7b7cbfccc95cfb" translate="yes" xml:space="preserve">
          <source>These rules are complicated, but the goal is for them to do what you want (even if you don't quite understand why they are doing it). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c39d28608973eadb707da3830a9f4611c69ff29" translate="yes" xml:space="preserve">
          <source>These select Unicode rules. That means that in double-quotish strings, the string is always converted to UTF-8 to force a Unicode interpretation (you can &lt;code&gt;utf8::downgrade()&lt;/code&gt; afterwards to convert back to non-UTF8, if possible). In regular expression patterns, the conversion isn't done, but if the character set modifier would otherwise be &lt;code&gt;/d&lt;/code&gt;, it is changed to &lt;code&gt;/u&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33be304d6b7f8ebe4e43f5c0dfa6aefb4009eb4" translate="yes" xml:space="preserve">
          <source>These sets of one-liners are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c95446c9ca7d3ffaa7ed7da6e1f21bf02cdc2e" translate="yes" xml:space="preserve">
          <source>These settings can be overridden globally too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc91f3641f463359dfc31290abbc3a64d30454a" translate="yes" xml:space="preserve">
          <source>These should be familiar operations, with the exception of &lt;code&gt;av_unshift&lt;/code&gt; . This routine adds &lt;code&gt;num&lt;/code&gt; elements at the front of the array with the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value. You must then use &lt;code&gt;av_store&lt;/code&gt; (described below) to assign values to these new elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f249c892c517536f796cbacefae284ca0ae8032" translate="yes" xml:space="preserve">
          <source>These should give you an overall feel for how modules are laid out and written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a888f57551ca71c1272e83f90d05d460b30fbf3" translate="yes" xml:space="preserve">
          <source>These signal to a formatter that if it is to hyphenate &quot;sigaction&quot; or &quot;manuscript&quot;, then it should be done as &quot;sig-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76776d9b84dd64fcd8c2f12ffb416173943a78e" translate="yes" xml:space="preserve">
          <source>These signals usually indicate a serious problem with the Perl interpreter or with your script. They are ABRT, BUS, EMT, FPE, ILL, QUIT, SEGV, SYS and TRAP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee071669b1efa68f9a3156de49d5e707921d24a" translate="yes" xml:space="preserve">
          <source>These solutions can have far-reaching effects on your system and on the way you write your CGI programs, so investigate them with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1c9d3db11663506b814ed4474ccb898e81f0dd" translate="yes" xml:space="preserve">
          <source>These special patterns are generally of the form &lt;code&gt;(*VERB:ARG)&lt;/code&gt;. Unless otherwise stated the ARG argument is optional; in some cases, it is forbidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6fd84e089df12e602215034c3af5ac8fb7e11a" translate="yes" xml:space="preserve">
          <source>These special variables, like the &lt;code&gt;%+&lt;/code&gt; hash and the numbered match variables (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; , etc.) are dynamically scoped until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4f20c17b5b03a6a3deb3a04503955765039642" translate="yes" xml:space="preserve">
          <source>These strengths make it especially popular with web developers and system administrators. Mathematicians, geneticists, journalists, managers and many other people also use Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a952f4bd002dc5bdafb796a94c6eaa4765c9b45b" translate="yes" xml:space="preserve">
          <source>These strings do not match /\Bam\B/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2125a4453223ddc6316d0fee4d859469467def9f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\b'\b/.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa64b62307f4ac9360d6b96b7d4a2888dc9ba0f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\bPerl\b/.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ece96fea144561ec8d240482b56438a3b8cd021" translate="yes" xml:space="preserve">
          <source>These subroutines are only visible within the block in which they are declared, and only after that declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5002f9badee48e82e2e716cfadae24bcbea4d597" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Level&lt;/code&gt; option in the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de652943440f246885efed6bc50624dc94d59ab4" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Method&lt;/code&gt; option in the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec9419fff6178cfe016f55595d7a90364f97f63" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Strategy&lt;/code&gt; option in the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09599ebf73a41d7f3fd327344d88fceb70681aab" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;flush&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430e03746fb928435d7aa08e0e3eea945da77d4a" translate="yes" xml:space="preserve">
          <source>These symbols appear before the op-name, and indicate the B:: namespace that represents the ops in your Perl code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbd7a997bbaaa84741a5e1fbd14e323c239d540" translate="yes" xml:space="preserve">
          <source>These terms are your choice of any of (1) the Perl Artistic Licence, or (2) version 2 of the GNU General Public License as published by the Free Software Foundation, or (3) any later version of the GNU General Public License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c298e17caacd4174da139fecae9a62cf22ed5cc" translate="yes" xml:space="preserve">
          <source>These tests are expected to succeed. Usually, most or all of your tests are in this category. If a normal test doesn't succeed, then that means that something is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07325952f04a521e228140b025365f61c44af25f" translate="yes" xml:space="preserve">
          <source>These three macros are used to change a memory buffer size or to free a piece of memory no longer needed. The arguments to &lt;code&gt;Renew&lt;/code&gt; and &lt;code&gt;Renewc&lt;/code&gt; match those of &lt;code&gt;New&lt;/code&gt; and &lt;code&gt;Newc&lt;/code&gt; with the exception of not needing the &quot;magic cookie&quot; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6ba4dd1926405bd4af1077435f09d7c0a86a11" translate="yes" xml:space="preserve">
          <source>These three macros are used to move, copy, or zero out previously allocated memory. The &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments point to the source and destination starting points. Perl will move, copy, or zero out &lt;code&gt;number&lt;/code&gt; instances of the size of the &lt;code&gt;type&lt;/code&gt; data structure (using the &lt;code&gt;sizeof&lt;/code&gt; function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335c760b89ccd866bd4e5cd7ec4e5ef4c599cbd4" translate="yes" xml:space="preserve">
          <source>These two export tags globally modify the default flags that bsd_glob() and, except on VMS, Perl's built-in &lt;code&gt;&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; operator use. &lt;code&gt;GLOB_NOCASE&lt;/code&gt; is turned on or off, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9660fc7e9efd93a7abe465c81de57e11a5045a23" translate="yes" xml:space="preserve">
          <source>These two features are available starting with Perl 5.16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5480402538907c3c246c95ce18885b4ae5225b" translate="yes" xml:space="preserve">
          <source>These two handles are held in the array part of the GLOB until either &lt;code&gt;reader&lt;/code&gt; or &lt;code&gt;writer&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f87921e5dc8828d5a6d9ea360bbab6bf450027" translate="yes" xml:space="preserve">
          <source>These two lower level macros are defined, but must only be used when dealing with keys that are not &lt;code&gt;SV*&lt;/code&gt; s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca39330e5c20e1239e2de6584e211ecc882f376" translate="yes" xml:space="preserve">
          <source>These two methods are discussed in the section &quot;Controlling Lookup Failure&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5a74bc9d562e1d07daa7fdb3ddf9da715c3433" translate="yes" xml:space="preserve">
          <source>These two methods return the pad names, using B::SPECIAL objects for null pointers and B::PADNAME objects otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ded97cfff6de6cbb1491c5e4159e3babfbcd36" translate="yes" xml:space="preserve">
          <source>These two parameters are used to specify the ambient pragmas in the format used by the special variables $^H and ${^WARNING_BITS}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668c2e486db55d10e5d748ec32a4297d24e80364" translate="yes" xml:space="preserve">
          <source>These two values for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fded399d428f7e457d56603aa714f9152134fea1" translate="yes" xml:space="preserve">
          <source>These utilities help manage extra Perl modules that don't come with the perl distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a3a72bd29e8059a94921c647bd6ce419cc4377" translate="yes" xml:space="preserve">
          <source>These values will not change for the duration of the tied hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b1d023c49a0c39aa9dd2f2164ec0cee979dc1b" translate="yes" xml:space="preserve">
          <source>These variables are global to an entire process. They are shared between all interpreters and all threads in a process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f5ad69f1f855f312a7f31903221b231e10b532" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped, unless we note otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1de91c215bb3911b0f9767ad8cb63c7c66902f" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b31baa2b679d0f632af8871cff4bfcc11fe664" translate="yes" xml:space="preserve">
          <source>These variables are used not only to represent Perl-space variables, but also any constants in the code, as well as some structures completely internal to Perl. The symbol table, for instance, is an ordinary Perl hash. Your code is represented by an SV as it's read into the parser; any program files you call are opened via ordinary Perl filehandles, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a728707d8b23d45f027d3109e809864b998b05" translate="yes" xml:space="preserve">
          <source>These variables determine the default state of the object created by calling the &lt;code&gt;new&lt;/code&gt; method, but cannot be used to alter the state of the object thereafter. The equivalent method names should be used instead to query or set the internal state of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d06b0dd7e2966bcc2949ad21cc8cf11e259059" translate="yes" xml:space="preserve">
          <source>These variables provide information about the current interpreter state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee1fe032de721a344cba89480c67e716abbee89" translate="yes" xml:space="preserve">
          <source>These various prefixes correspond to the fopen(3) modes of &lt;code&gt;r&lt;/code&gt; , &lt;code&gt;r+&lt;/code&gt; , &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;w+&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , and &lt;code&gt;a+&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab874a84fee8b167d507adabcea364962ee19104" translate="yes" xml:space="preserve">
          <source>These vars take 3 forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b607e9f6b449fd1b8f047ca8c774e440f540bc1c" translate="yes" xml:space="preserve">
          <source>These were was released in Test::More 0.82, and first shipped with Perl in 5.10.1 as part of Test::More 0.92.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbff7e2745b850ca42a72fcb2a24d874bb4460d2" translate="yes" xml:space="preserve">
          <source>These will take care of 64-bit integers and long doubles. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac19dfbee94adc36e2c9732558c6cd8eefc750a8" translate="yes" xml:space="preserve">
          <source>These will tell you if you truly have an integer, double, or string pointer stored in your SV. The &quot;p&quot; stands for private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c10ede2ffed1b0b1b81928ac4993a2913e0a5d" translate="yes" xml:space="preserve">
          <source>These work as in normal strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38675552ee022f79a520bb1f28a37d1e98aa3227" translate="yes" xml:space="preserve">
          <source>They all return true if the test passed, false if the test failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3cf570334019dd16b6da35836503ad0b730443" translate="yes" xml:space="preserve">
          <source>They also return and accept whole hash entries (&lt;code&gt;HE*&lt;/code&gt; ), making their use more efficient (since the hash number for a particular string doesn't have to be recomputed every time). See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for detailed descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25c349a57769dbafa1bf807ae04ad1d22921bb7" translate="yes" xml:space="preserve">
          <source>They are not exported and must be addressed using the full package name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e0433b7d59191ca9d6b5b4f7f2c32e84b80d15" translate="yes" xml:space="preserve">
          <source>They are suspected to be compiler errors (at least the shuffle.t failure is known from some IRIX 6 setups) and math library errors (the Trig.t failure), but since IRIX 5 is long since end-of-lifed, further fixes for the IRIX are unlikely. If you can get gcc for 5.3, you could try that, too, since gcc in IRIX 6 is a known workaround for at least the shuffle.t and sort.t failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69688ab534f08d7044475644301b479b2c0aa07a" translate="yes" xml:space="preserve">
          <source>They are type specifiers, as detailed in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0af70f00dfa3e42a5613047a29fed35339f3d84" translate="yes" xml:space="preserve">
          <source>They come in handy when you want to print or find the size of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af45a4b37483f2a06205c7d3d09277fb7f496321" translate="yes" xml:space="preserve">
          <source>They differ in how they behave if they have the same key as the default metadata. META_ADD will override the default value with its own. META_MERGE will merge its value with the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d5f7d4e163392c98f5f93a608be715596d63d6" translate="yes" xml:space="preserve">
          <source>They exist principally so that you can write code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7317b86bbf49f550672235cb05f34f1bf614569a" translate="yes" xml:space="preserve">
          <source>They may be deprecated in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9f866ec06430c109794c0b11daa6f4be4c1816" translate="yes" xml:space="preserve">
          <source>They may be expecting something completely different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330c7e5216d53f5b33c24e5c7f8fd3d4ead54c44" translate="yes" xml:space="preserve">
          <source>They seem to be caused by broken system header files, and also other open source projects are seeing them. The following HP-UX patches should make the warnings go away:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b797d5622b1d1393375da6062407cd69c0ce1eae" translate="yes" xml:space="preserve">
          <source>They work somewhat like compiler directives (pragmata) in that they tend to affect the compilation of your program, and thus will usually work well only when used within a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Most of these are lexically scoped, so an inner BLOCK may countermand them by saying:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abf5248bc6675a47a3988cb21c2af942a4be9d1" translate="yes" xml:space="preserve">
          <source>They works like the same name operators as theirs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7133f0a4178555cc80821515a5b2265342ef9d" translate="yes" xml:space="preserve">
          <source>They're opcode specific, and occur less often than the public ones, so they're represented by short mnemonics instead of single-chars; see B::Op_private and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1537a4a381e27d6bdd2214d8f21c4c16bc119e0" translate="yes" xml:space="preserve">
          <source>Things that are broken or just don't work quite right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731699b64ef1b2479598864f867653535a2b0bbe" translate="yes" xml:space="preserve">
          <source>Things that make Perl easier to learn: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people's code. If there's something you need to do, then it's probably already been done, and a working example is usually available for free. Don't forget Perl modules, either. They're discussed in Part 3 of this FAQ, along with &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;CPAN&lt;/a&gt;, which is discussed in Part 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9717c58dca00ca4e0fdd51bb342bee53c9f4f98" translate="yes" xml:space="preserve">
          <source>Things that need to be done to improve this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbe6bf4aeb5dea432e939ae88abe2437f8000be" translate="yes" xml:space="preserve">
          <source>Things to take special care with, sometimes called WARNINGS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f330d2b9426f91894c132eec7839a297e7c3f2bb" translate="yes" xml:space="preserve">
          <source>Think about reusability. Why waste brainpower on a one-shot when you might want to do something like it again? Consider generalizing your code. Consider writing a module or object class. Consider making your code run cleanly with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; (or &lt;b&gt;-w&lt;/b&gt;) in effect. Consider giving away your code. Consider changing your whole world view. Consider... oh, never mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369cf00ca2016a53c53652dbdfad94b27946d096" translate="yes" xml:space="preserve">
          <source>Think carefully about whether OO is appropriate for your module. Gratuitous object orientation results in complex APIs which are difficult for the average module user to understand or use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05ca6e0d80ee8bcc4977d0ae97da44f7a9ad4e9" translate="yes" xml:space="preserve">
          <source>Think of these macros as working a bit like &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; in Perl to limit the scope of local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b798a2f7f99599171fc59b43924703f9a2be020d" translate="yes" xml:space="preserve">
          <source>Thinking of mixing &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and threads? Please lie down and wait until the feeling passes. Be aware that the semantics of &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; vary between platforms. For example, some Unix systems copy all the current threads into the child process, while others only copy the thread that called &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;. You have been warned!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7971e6a051104074fdae0f02322417b6eb5695a2" translate="yes" xml:space="preserve">
          <source>This</source>
          <target state="translated">This</target>
        </trans-unit>
        <trans-unit id="3b8ab74e7f407ff0613b1e22c57e79a02a3a70ca" translate="yes" xml:space="preserve">
          <source>This 'cheat sheet' is a handy reference, meant for beginning Perl programmers. Not everything is mentioned, but 195 features may already be overwhelming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449deebd32ed5eaf74d8aec8711aa290af1210b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is somewhat like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; found in C, in that it is the opposite of read. The wrapper for the perl &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function is called &lt;code&gt;format_write&lt;/code&gt; . However, whilst the C &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function returns the number of bytes written, this &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function simply returns true if successful (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;). A more C-like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809a4dea69e66cbb56a6927382a1c7747ff2b245" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;POSIX::SigAction&lt;/code&gt; object is intended for use with the &lt;code&gt;POSIX::sigaction()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5e4636d7ee396c2538c58facc6d68cb4eb415b" translate="yes" xml:space="preserve">
          <source>This CPAN module lets you create application-level DTrace probes written in Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511e2864753cd52a1ebcc75d7881ce1d9fb8ec6b" translate="yes" xml:space="preserve">
          <source>This DBM filter allows you to choose the character encoding will be store in the DBM file. The usage is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6cf7bbaf015be1842a3503d362b5db206d9719" translate="yes" xml:space="preserve">
          <source>This DBM filter is used when interoperating with a C/C++ application that uses a C int as either the key and/or value in the DBM file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9afd96c4f0113b4f4a0ca24ef6b7ce1c1eceace" translate="yes" xml:space="preserve">
          <source>This DBM filter will compress all data before it is written to the database and uncompressed it on reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c940c7a493363dfcc2ec46854ae2f8bf461ebc" translate="yes" xml:space="preserve">
          <source>This Filter will ensure that all data written to the DBM will be encoded in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3e8623db78291ea4659afa55c27a0af1b2fdc1" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getaddrinfo() or inet_pton() instead for IPv6 support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b8940a7dbf27c2770dc1f730a7a76eb668b365" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getnameinfo() or inet_ntop() instead for IPv6 support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722a81c183f099f4bcdf928fea77c08691faed91" translate="yes" xml:space="preserve">
          <source>This MGVTBL structure is set at compile-time in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d239471597c0b244a6c849bc4b21df8bfaf5b7db" translate="yes" xml:space="preserve">
          <source>This PerlIO layer opens a filehandle with a transparent encoding filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75ec57aa7be5f3e457676aa78fd87835feef6b5" translate="yes" xml:space="preserve">
          <source>This README was written by Sherm Pendley &amp;lt;sherm@dot-app.org&amp;gt;, and subsequently updated by Dominic Dunlop &amp;lt;domo@computer.org&amp;gt; and Breno G. de Oliveira &amp;lt;garu@cpan.org&amp;gt;. The &quot;Starting From Scratch&quot; recipe was contributed by John Montbriand &amp;lt;montbriand@apple.com&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd95c4f5ef4e4618995d165e48685abb75f4895" translate="yes" xml:space="preserve">
          <source>This TODO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65401762a1d1713b0f2418936baae5413a27fffb" translate="yes" xml:space="preserve">
          <source>This UTF8 flag is not visible in Perl scripts, exactly for the same reason you cannot (or rather, you</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4052f785cdabbfe61b3039b9711ade7bde52e516" translate="yes" xml:space="preserve">
          <source>This a copy of the $md5 object. It is useful when you do not want to destroy the digests state, but need an intermediate value of the digest, e.g. when calculating digests iteratively on a continuous data stream. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e3860a781a3958ead624c7605f67461e6feac0" translate="yes" xml:space="preserve">
          <source>This action at a distance can be confusing, so you should be careful with your use of weaken. You should weaken the reference in the variable that will go out of scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31854231243bab283e1b65fbafa450794c35d551" translate="yes" xml:space="preserve">
          <source>This affects the &quot;udp&quot;, &quot;tcp&quot;, and &quot;syn&quot; protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873bbf87a172d66b10ad3b61904a0d639ca9b860" translate="yes" xml:space="preserve">
          <source>This allows Math::BigInt to correctly retrieve package globals from the subclass, like &lt;code&gt;$SubClass::precision&lt;/code&gt; . See t/Math/BigInt/Subclass.pm or t/Math/BigFloat/SubClass.pm completely functional subclass examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5501a126d7bcccb962537b6328418e9a9cd85d" translate="yes" xml:space="preserve">
          <source>This allows a user to setup a directory tree for some software with directories &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; and &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; , and then the above example will allow the use of modules in the lib directory without knowing where the software tree is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d1ac05408a326c089b0ec60746ba54464b2076" translate="yes" xml:space="preserve">
          <source>This allows for a more traditional use of sockatmark() as a procedural socket function. If your system does not support sockatmark(), the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; declaration will fail at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4bf55b527390af875f220a6a455b96b2cc2be5" translate="yes" xml:space="preserve">
          <source>This allows one to specify the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0d07d0d3a6167b29dae996bfd8a33bb4d04031" translate="yes" xml:space="preserve">
          <source>This allows the ability to provide an extra pointer (called the &quot;host&quot; environment) for all the system calls. This makes it possible for all the system stuff to maintain their own state, broken down into seven C structures. These are thin wrappers around the usual system calls (see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d9de12c87f7e2eb33ce435c5af882982d468fe" translate="yes" xml:space="preserve">
          <source>This allows the engine to dupe its private data but also if necessary modify the final structure if it really must.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb3f86b59b2eab9a83b014b190ee8244b9d77c6" translate="yes" xml:space="preserve">
          <source>This allows the programmer to look at the execution stack and variables to find out the cause of the exception. As the debugger is being invoked as the Perl interpreter is about to do a fatal exit, continuing the execution in debug mode is usually not practical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baefaa51fc7ed599ce445dad500d37cb72bf43c" translate="yes" xml:space="preserve">
          <source>This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e47154414d862007ad5f643f15fef0b3978ca2c" translate="yes" xml:space="preserve">
          <source>This allows you to intermix your source code and your documentation text freely, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e637a731a56d0d223f91be743e436a188835e3" translate="yes" xml:space="preserve">
          <source>This allows you to pass a reference to a scalar, in which the data will be stored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae11cd12869687833116af8fabb9e16d79564d09" translate="yes" xml:space="preserve">
          <source>This allows you to specify &lt;code&gt;constants&lt;/code&gt; in your template. ie, they keys that are not allowed to be altered by the user. It pretty much allows you to keep all your &lt;code&gt;configurable&lt;/code&gt; data in one place; the &lt;code&gt;Params::Check&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9cd2ea84115168b54e6b0797c0f572af954da0" translate="yes" xml:space="preserve">
          <source>This almost definitely doesn't do what you expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba2015dbd8b7d90bb6da319e60421ccbe89f224" translate="yes" xml:space="preserve">
          <source>This also applies to integers that look like floating point constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636185aa1476a4214e4b7454bccd1f721aa5d7e5" translate="yes" xml:space="preserve">
          <source>This also behaves similarly, but assigns to a lexical variable instead of to &lt;code&gt;$_&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77df2183cb5ed8fa6c016243494c2444f23d3c09" translate="yes" xml:space="preserve">
          <source>This also has a special use with XS AUTOLOAD subs. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;Autoloading with XSUBs in perlguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d548e6c0ea6757b5bd736b5e0dc177ac6e6019" translate="yes" xml:space="preserve">
          <source>This also has implications for the use of the SUPER:: qualifier (see &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8da07f35c437fa97e844be13f7f26224b7e80d0" translate="yes" xml:space="preserve">
          <source>This also means it is a bad idea to check for some specific package, since the actual contents of $x might be something unexpected. Due to the transparent way of bignum &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; should not be necessary, anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f046ba2ed5c45f32bb7d779ddd434216adcb9e9" translate="yes" xml:space="preserve">
          <source>This also means that a first argument hash reference now becomes the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e0f20ff4a10e2905e391319be8b9814ea5ca78" translate="yes" xml:space="preserve">
          <source>This also returns the file format version. If the version is &quot;2.7&quot; then major would be 2 and minor would be 7. The minor element is missing for when major is less than 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c52be3ac150c6eed66b2a1ead6f0d851e682d3" translate="yes" xml:space="preserve">
          <source>This also works for other subclasses, like Math::String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8468a87cfa0204ff52a567b1eaf4b66d1ee547eb" translate="yes" xml:space="preserve">
          <source>This always means your main memory, not your disk. Clouding the issue is the fact that your machine may implement &lt;b&gt;virtual&lt;/b&gt; memory; that is, it will pretend that it has more memory than it really does, and it&amp;rsquo;ll use disk space to hold inactive bits. This can make it seem like you have a little more memory than you really do, but it&amp;rsquo;s not a substitute for real memory. The best thing that can be said about virtual memory is that it lets your performance degrade gradually rather than suddenly when you run out of real memory. But your program can die when you run out of virtual memory, too&amp;mdash;if you haven&amp;rsquo;t thrashed your disk to death first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165f78228b9bb880f61927fda978ad6714cce456" translate="yes" xml:space="preserve">
          <source>This anomaly stems from Perl's attempt to not disturb older programs that didn't use Unicode, along with Perl's desire to add Unicode support seamlessly. But the result turned out to not be seamless. (By the way, you can choose to be warned when things like this happen. See &lt;code&gt;&lt;a href=&quot;encoding/warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c246570729105a65f6bd289985b0b62d1e1f94f" translate="yes" xml:space="preserve">
          <source>This appeared in perl 5.10.0. Anything matched left of &lt;code&gt;\K&lt;/code&gt; is not included in &lt;code&gt;$&amp;amp;&lt;/code&gt; , and will not be replaced if the pattern is used in a substitution. This lets you write &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; instead of &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; or &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e79001ab117c0cf333336e9232ddbb9a00de3d" translate="yes" xml:space="preserve">
          <source>This applies equally to method names, parameter names, and anything else which is visible to the user (and most things that aren't!)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dd8476567c22ea231857d01ff4db7f81b73be8" translate="yes" xml:space="preserve">
          <source>This applies only to lexical variables, by the way. Dynamic variables continue to work as they have always worked. Closure is not something that most Perl programmers need trouble themselves about to begin with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e13602141364999d0474f62de688119ccaf7274" translate="yes" xml:space="preserve">
          <source>This applies to the perlio system only. For versions before 5.7, &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; is equivalent to &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ab6b9c73082204ae0542a65f9bf2f5c23ef207" translate="yes" xml:space="preserve">
          <source>This approach also works for comparing hashes. Here we'll demonstrate two different answers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684f52e2ad132a8d50a850505a18c8cf67adca2e" translate="yes" xml:space="preserve">
          <source>This approach makes it comparatively easy to write code preprocessors without worrying about the form or contents of strings, regexes, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21941c4a2190129983b70fab8729b6e9162dfa7f" translate="yes" xml:space="preserve">
          <source>This approach of treating &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; like object methods calls doesn't work for the diamond operator. That's because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; to read a record just as &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; does. Given the initialization shown above for @fd, this would work, but only because readline() requires a typeglob. It doesn't work with objects or strings, which might be a bug we haven't fixed yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95f50481ff3516b07bb9d7865830ab6c1ff5648" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the beginnings of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$-[0]&lt;/code&gt; is the offset into the string of the beginning of the entire match. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96381bdcc284e80585b7b54b1e289040c1f9efb" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the ends of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$+[0]&lt;/code&gt; is the offset into the string of the end of the entire match. This is the same value as what the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; function returns when called on the variable that was matched against. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9df0444460b118bc16cc7a6647d43831c503da" translate="yes" xml:space="preserve">
          <source>This array of function pointers is a convenient place to hook into the compilation process. An XS module can put its own custom check function in place of any of the standard ones, to influence the compilation of a particular type of op. However, a custom check function must never fully replace a standard check function (or even a custom check function from another module). A module modifying checking must instead &lt;b&gt;wrap&lt;/b&gt; the preexisting check function. A custom check function must be selective about when to apply its custom behaviour. In the usual case where it decides not to do anything special with an op, it must chain the preexisting op function. Check functions are thus linked in a chain, with the core's base checker at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dc273368b99545f08bf93846a0eeb46f2d8f07" translate="yes" xml:space="preserve">
          <source>This article is about a little-known feature of Perl called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e9f3bedf523d7ebb982ebf37f1569db684a386" translate="yes" xml:space="preserve">
          <source>This article originally appeared in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290ae5b40be8703f5e688eadedc6451a7fcb95b4" translate="yes" xml:space="preserve">
          <source>This article originally appeared in The Perl Journal #11, and is copyright 1998 The Perl Journal. It appears courtesy of Jon Orwant and The Perl Journal. This document may be distributed under the same terms as Perl itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ced083e00b961f0ed9ea00cb4d87f96f2e0533" translate="yes" xml:space="preserve">
          <source>This assertion may be used as the condition in a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0000b51c42222ffe097e200394d62769ca419cbc" translate="yes" xml:space="preserve">
          <source>This assumes that we saw the locale &quot;en_US.ISO8859-1&quot; using the commands discussed above. We decided to try that instead of the above faulty locale &quot;En_US&quot;--and in Cshish shells (&lt;b&gt;csh&lt;/b&gt;, &lt;b&gt;tcsh&lt;/b&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dee2f933f09058dd9bf3765b7f846ec57f52d7" translate="yes" xml:space="preserve">
          <source>This attribute is not a search parameter, but is used to report the result of &lt;code&gt;survey&lt;/code&gt; method, as discussed in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c687ced37405f8cf67c894463cfe3d86f5b0e65" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. It is currently only used by OS/2 and Win32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e8362900ead72447d5c4ebf2182285972d3847" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. Takes a hash ref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767e4d21fb47d7f73037ece0977c12a97d29d46d" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL EXCLUDE_EXT='Socket Safe'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f89eca0caacc11c08af6c151f34570659a105e" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f063de8522828eff3b84027f3f1f4329111a6d6f" translate="yes" xml:space="preserve">
          <source>This attribute means that every time this search sees a matching Pod file, it should call this callback routine. The routine is called with two parameters: the current file's filespec, and its pod name. (For example: &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; would be in &lt;code&gt;@_&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d55a165f99ccc6289583795c82aceb24ceabae" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false, meaning that no callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcee703f93ae24f2cb5be27baf6a28edef44800c" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false; and normally you won't need to turn it on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b03f0333e5f7d53de3d13aaa7c296581e96eb6" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a nonzero positive value, will make searches output (via &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;) notes about what they're doing as they do it. This option may be useful for debugging a pod-related module. This attribute's default value is zero, meaning that no &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; messages are produced. (Setting verbose to 1 turns on some messages, and setting it to 2 turns on even more messages, i.e., makes the following search(es) even more verbose than 1 would make them.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5ab376fb5b92c88b226665b3b3189f69774bb5" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a true value, means that searches should implicitly add perl's</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39a84ee1b444ad72be8b273ce2aa43be2362f55" translate="yes" xml:space="preserve">
          <source>This behavior can be overridden by supplying your own set of files to search. PL_FILES accepts a hash ref, the key being the file to run and the value is passed in as the first argument when the PL file is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31de598976c4af9df58fa731498e0e725fcefe91" translate="yes" xml:space="preserve">
          <source>This behavior is convenient, because we usually want to ignore newlines when we count and match characters in a line. Sometimes, however, we want to keep track of newlines. We might even want &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to anchor at the beginning and end of lines within the string, rather than just the beginning and end of the string. Perl allows us to choose between ignoring and paying attention to newlines by using the &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; modifiers. &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; stand for single line and multi-line and they determine whether a string is to be treated as one continuous string, or as a set of lines. The two modifiers affect two aspects of how the regexp is interpreted: 1) how the &lt;code&gt;'.'&lt;/code&gt; character class is defined, and 2) where the anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; are able to match. Here are the four possible combinations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6ebadd3063ef053971debc9b4e78f1e936126e" translate="yes" xml:space="preserve">
          <source>This behavior is more &quot;Do what I mean&quot; than in earlier Perls for most applications. But it catches fewer issues for code that needs to be strictly Unicode compliant. Therefore there is an additional mode of operation available to accommodate such code. This mode is enabled if a regular expression pattern is compiled within the lexical scope where the &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; warning class has been made fatal, say by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092eaaecfde2fe8092e286b99e012b8ea81cec11" translate="yes" xml:space="preserve">
          <source>This behavior of &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; is to be compatible with POSIX behavior and not traditional VMS behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353b3ac3017572fed965aadb9e085377b2c9e20d" translate="yes" xml:space="preserve">
          <source>This behavior provides the semantic of lexical scoping, and is used in, for instance, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902d9db5da6a9d0d90bec88dd7435e3d3036822b" translate="yes" xml:space="preserve">
          <source>This behaviour is identical to that of the actual compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9ffc9da0934423cf7a8b2a8167c734225e00ac" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2616a24dba48e4df35dec143fa3cabdfd81fd386" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6324526e82c2b2028f79347525bf2bc78810ebd" translate="yes" xml:space="preserve">
          <source>This block modifies all the &lt;code&gt;.c&lt;/code&gt; files in the current directory, leaving a backup of the original data from each file in a new &lt;code&gt;.c.orig&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba453fd403a510bef4a413f0d9ec2dc3165244e0" translate="yes" xml:space="preserve">
          <source>This boilerplate uses the low-overhead &lt;code&gt;XSLoader&lt;/code&gt; if present; if used with an antique Perl which has no &lt;code&gt;XSLoader&lt;/code&gt; , it falls back to using &lt;code&gt;DynaLoader&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090e5f02457ce14eed85483c0b931f07be2bd405" translate="yes" xml:space="preserve">
          <source>This bug only affects closures that are generated by the block but used afterwards. Lexical variables that are only used during the lifetime of the block's execution will take their individual values for each invocation, as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb23a96de018295d436dfc71b478c2f496e60be" translate="yes" xml:space="preserve">
          <source>This bug was fixed in Perl 5.18, but may still trip you up if you are using older versions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca44502c3ed83912a6b5db8a967d8fd6b852bc6b" translate="yes" xml:space="preserve">
          <source>This bug will be rectified in future by using method lookup only for methods' &lt;code&gt;AUTOLOAD&lt;/code&gt; s. However, there is a significant base of existing code that may be using the old behavior. So, as an interim step, Perl currently issues an optional warning when non-methods use inherited &lt;code&gt;AUTOLOAD&lt;/code&gt; s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3151c00be9f916508bc5bf705b67d1e4b35d8229" translate="yes" xml:space="preserve">
          <source>This call extracts the next single substring that is a valid Perl quotelike operator (and removes it from $text):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced21c2bd0a49aeaa42731431a2edf3632b44a97" translate="yes" xml:space="preserve">
          <source>This call will allow &lt;code&gt;--l&lt;/code&gt; and &lt;code&gt;--L&lt;/code&gt; for the length option, but requires a least &lt;code&gt;--hea&lt;/code&gt; and &lt;code&gt;--hei&lt;/code&gt; for the head and height options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc74026b11403dd05d9d70bf8ec94212f671778f" translate="yes" xml:space="preserve">
          <source>This callback is where Perl untaints its own capture variables under taint mode (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). See the &lt;code&gt;Perl_reg_numbered_buff_fetch&lt;/code&gt; function in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34608b82ee2af981743bfaea1702ca89b064619d" translate="yes" xml:space="preserve">
          <source>This callback will always be invoked and this will happen for each result after one of the above callbacks is invoked. For example, if &lt;a href=&quot;../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is loaded, you could use the following to color your test output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84240a7c3c6fb058597f6d953d7900c399c1c57" translate="yes" xml:space="preserve">
          <source>This calls &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; with the SV_GMAGIC flag. See &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86657828dc4b39c2a031e8feb96e30aa836f7063" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6030aab04889f87b188edddb787660db9b1b144a" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc12c1e6a592155ae29365e5d2b2a31283e6dd9" translate="yes" xml:space="preserve">
          <source>This can also be a problem with intermediate subprocesses in more complicated code, which will call waitpid() on all open filehandles during global destruction--in no predictable order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62869b1f9b57cb9d79e8730408b0c95ddf4b16ac" translate="yes" xml:space="preserve">
          <source>This can also be called with a null first argument to indicate that &lt;code&gt;oldstash&lt;/code&gt; has been deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43bae30188acac82d7e357353fabe7bc6c40a81" translate="yes" xml:space="preserve">
          <source>This can be accomplished by adding a repeat specifier to the option specification. Repeat specifiers are very similar to the &lt;code&gt;{...}&lt;/code&gt; repeat specifiers that can be used with regular expression patterns. For example, the above command line would be handled as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372e8345a480f344b8fa12b55e0c07a688e7200f" translate="yes" xml:space="preserve">
          <source>This can be accomplished with a destination routine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e3779b19d94c38ed3503cfda1db4bf067d5a3d" translate="yes" xml:space="preserve">
          <source>This can be conveniently combined with precalculation of keys as given above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee9c9bfb944617270087476daa04080c698fb3a" translate="yes" xml:space="preserve">
          <source>This can be used to change the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06a37a2d3a4148b6ee21e32af3a875ef2d651aa" translate="yes" xml:space="preserve">
          <source>This can be used to determine which branch of a pattern was matched without using a separate capture group for each branch, which in turn can result in a performance improvement, as perl cannot optimize &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; as efficiently as something like &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b6a0827f222037bfd74f5afc449218b3d32dc4" translate="yes" xml:space="preserve">
          <source>This can be used to provide overridable configuration defaults:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7302fe67fb868f202093521caa858978f0b6a28c" translate="yes" xml:space="preserve">
          <source>This can be used to see the effect of/bugs in the various layers e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e14da8dfc2bfdf2f71fc590d8fe2a63e1000ea" translate="yes" xml:space="preserve">
          <source>This can be used to store bytes in the string component of the SV. Here the representation of the data is irrelevant to perl and the bytes themselves are just stored in the SV. It is assumed that the C variable is a pointer (the bytes are copied from that memory location). If the pointer is pointing to something that is represented by 8 bytes then those 8 bytes are stored in the SV (and length() will report a value of 8). This entry is similar to T_OPAQUE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0410f2327d86bdf0fdae05f37687269ec62b9fe1" translate="yes" xml:space="preserve">
          <source>This can be used to store data from non-pointer types in the string part of an SV. It is similar to T_OPAQUEPTR except that the typemap retrieves the pointer directly rather than assuming it is being supplied. For example, if an integer is imported into Perl using T_OPAQUE rather than T_IV the underlying bytes representing the integer will be stored in the SV but the actual integer value will not be available. i.e. The data is opaque to perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc9efe11bbc18be53fe6f2369d301f92011919" translate="yes" xml:space="preserve">
          <source>This can be useful when carrying out batch operations on multiple files that have both an input filename and output filename and the output file can be derived from the input filename. Examples of operations where this can be useful include, file renaming, file copying and file compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee5530e46592bdd5b18c5d4e4adf9c1e149be67" translate="yes" xml:space="preserve">
          <source>This can easily be demonstrated by using a module, such as the Socket module, which uses eval &quot;...&quot; as part of an AUTOLOAD function. You can 'use' the module outside the compartment and share an (autoloaded) function with the compartment. If an autoload is triggered by code in the compartment, or by any code anywhere that is called by any means from the compartment, then the eval in the Socket module's AUTOLOAD function happens in the namespace of the compartment. Any variables created or used by the eval'd code are now under the control of the code in the compartment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33eb1b5384e732b374fa6a2eb81b539c4ef372da" translate="yes" xml:space="preserve">
          <source>This can give a serious performance boost to your threaded program, since more than one thread will be executing at the same time. As a tradeoff, though, any of those nagging synchronization issues that might not have shown with basic kernel threads will appear with a vengeance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f625d37a903c20859d631591a0773b6d672cf7" translate="yes" xml:space="preserve">
          <source>This can lead to some ambiguities. When &lt;code&gt;\N&lt;/code&gt; is not followed immediately by a left brace, Perl assumes the &lt;code&gt;[^\n]&lt;/code&gt; meaning. Also, if the braces form a valid quantifier such as &lt;code&gt;\N{3}&lt;/code&gt; or &lt;code&gt;\N{5,}&lt;/code&gt; , Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively). In all other case, where there is a &lt;code&gt;\N{&lt;/code&gt; and a matching &lt;code&gt;}&lt;/code&gt;, Perl assumes that a character name is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959b6fc0ff47607dd43aa724268206e3f29dd78b" translate="yes" xml:space="preserve">
          <source>This can lead to unexpected results. For example, a string's semantics can suddenly change if a code point above 255 is appended to it, which changes the rules from ASCII to Unicode. As an example, consider the following program and its output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85608589698ca117deecc9b9804cdf91bb5ea3e0" translate="yes" xml:space="preserve">
          <source>This can result from a bug in emx sprintf which was fixed in 0.9d fix 03.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0068e1ff0325fa89c18995ccdfd4bec0d4d0e1c" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using a (non-gcc) vendor cc, this variable may contain a version for the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b497dc3b646a186b11a326e1c1c02e389336f453" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using gcc, this is gcc, and if not, usually equal to cc, unimpressive, no? Some platforms, however, make good use of this by storing the flavor of the C compiler being used here. For example if using the Sun WorkShop suite, ccname will be &lt;code&gt;workshop&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268887449daa89d9e6e6591c09f61433e4f65428" translate="yes" xml:space="preserve">
          <source>This causes Attribute::Handlers to define the &lt;code&gt;Roo&lt;/code&gt; attribute in the package that imports the Tie::Me::Kangaroo:Down::Sport module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102ace81a524208492f6e027d89b5645163151f6" translate="yes" xml:space="preserve">
          <source>This causes perl to load your module but does not import any symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30feda4a3a3684c859a87888367dce95a5f76b5" translate="yes" xml:space="preserve">
          <source>This causes the redispatcher to only visit each distinct &lt;code&gt;method&lt;/code&gt; method once. That is, to skip any classes in the hierarchy that it has already visited during redispatch. So, for example, if the previous example were rewritten:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582cc40cbf8b3547920ee86c914be4717f134b16" translate="yes" xml:space="preserve">
          <source>This change was made because it was found that various commercial tools like editors, or for things like source code control, had been written so that they would not handle program files that used these code points, effectively precluding their use almost entirely! And that was never the intent. They've always been meant to be usable within an application, or cooperating set of applications, at will.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c679de889cc139bb514d15d08372653b38479f14" translate="yes" xml:space="preserve">
          <source>This changes the sentence to &quot;this is a SUcCess case.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806d9541617fb633252bc021124ba56dfb002ae1" translate="yes" xml:space="preserve">
          <source>This changes the string that this token holds. You probably won't need to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4ce31991e674e8d238b692a9312c922759283b" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this end-token object. You probably won't need to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c1f4e6ea1fd867b5212d7916e4ce924dd15d97" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this start-token object. You probably won't need to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642eb07575d1344323a97b06a777777ad1321fc4" translate="yes" xml:space="preserve">
          <source>This chart is sorted from slowest to fastest, and shows the percent speed difference between each pair of tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da28c0924cf2fc297ae57e942274584c8adbeb4" translate="yes" xml:space="preserve">
          <source>This checks that every file listed in the .packlist actually exists. If an argument which evaluates to true is given, any missing files will be removed from the internal hash. The return value is a list of the missing files, which will be empty if they all exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55eba663917d253b044988b2b6ee903ef6a93dc" translate="yes" xml:space="preserve">
          <source>This class (which is very small -- read the source) overrides Pod::Simple's _handle_element_start, _handle_text, and _handle_element_end methods so that parser events are turned into method calls. (Otherwise, this is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; and inherits all its methods.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494e46870d49e2dc3a5f9a64f75952ec99423e9a" translate="yes" xml:space="preserve">
          <source>This class defines several methods for setting (and, occasionally, reading) the contents of an object. With two exceptions (discussed at the end of this section), these attributes are just for controlling the way searches are carried out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d32aad8f8251ef1db7bcc4b8f3feb324d9d1213" translate="yes" xml:space="preserve">
          <source>This class is NOT a subclass of Pod::Simple::HTML (nor of bad old Pod::Html) -- although it uses Pod::Simple::HTML for doing the conversion of each document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b711767b4a974da1a1509d38f153220b0d62949c" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as RTF, good for viewing/printing in MSWord, WordPad/write.exe, TextEdit, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138981ec5228a60a4f53dbf829b51f5efd9f8a75" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as XHTML validating HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4c24315ad07b2a992c0858db0b7be768d0cc0b" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as wrapped plaintext.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62abaee97c33098880e266351ef2fc532bf53875" translate="yes" xml:space="preserve">
          <source>This class is an internal interface only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e43c4bd22a6b18d8bc78626e236eaa142e2b822" translate="yes" xml:space="preserve">
          <source>This class is for checking the syntactic validity of Pod. It works by basically acting like a simple-minded version of &lt;a href=&quot;text&quot;&gt;Pod::Simple::Text&lt;/a&gt; that formats only the &quot;Pod Errors&quot; section (if Pod::Simple even generates one for the given document).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b791e36572b7d483165e52086de0aff10cad7ba" translate="yes" xml:space="preserve">
          <source>This class is for dumping, as text, the events gotten from parsing a Pod document. This class is of interest to people writing Pod formatters based on Pod::Simple. It is useful for seeing exactly what events you get out of some Pod that you feed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18cdad26fb8d235532c57fb43aa60327d80a50a" translate="yes" xml:space="preserve">
          <source>This class is for making an HTML rendering of a Pod document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd75675624091c3742f49bbeb8bbfb0c06a37c0a" translate="yes" xml:space="preserve">
          <source>This class is for using Pod::Simple to build a Pod processor -- but one that uses an interface based on a stream of token objects, instead of based on events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44761047bfaa4c6cc438e77b4bb92131ad714c01" translate="yes" xml:space="preserve">
          <source>This class is inspired by XML::Parser's &quot;Tree&quot; parsing-style, although it doesn't use exactly the same LoL format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9698adab813e0c4fae21452c7598015f3935b3d" translate="yes" xml:space="preserve">
          <source>This class is not of interest to general users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2f6048d2f61aa8645bcc5ebd42e19fc8c8aea4" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f889f338653b4ee33eb44dc0ee1133ee852ae" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing a Pod processor/formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dca4f8907e7dbb28751ea149d9af37422c91f32" translate="yes" xml:space="preserve">
          <source>This class is that parses Pod and dumps just the text content. It is mainly meant for use by the Pod::Simple test suite, but you may find some other use for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a51d38f10e103a9903a5853a79eae683ff646eb" translate="yes" xml:space="preserve">
          <source>This class is the workhorse of the &lt;a href=&quot;../../parser&quot;&gt;TAP::Parser&lt;/a&gt; system. Most TAP lines will be test lines and if &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; , then you have a bunch of methods at your disposal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f581c5cd9d5c7598c0dcb3ca6436c9bd821c2c4" translate="yes" xml:space="preserve">
          <source>This class might turn out to be a temporary solution, but MM won't go away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24195eb4cea8857a411b60273a35c873f422dbe0" translate="yes" xml:space="preserve">
          <source>This class provides the one constructor, called &lt;code&gt;new&lt;/code&gt; . It takes no parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30e23715125a3d5360cef7bf3e4022849622110" translate="yes" xml:space="preserve">
          <source>This class takes Pod and parses it, returning a parse tree made just of arrayrefs, and hashrefs, and strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbee182dfa76d92a94c69cd0858c1622ac2f770" translate="yes" xml:space="preserve">
          <source>This client is more complicated than the two we've done so far, but if you're on a system that supports the powerful &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; call, the solution isn't that rough. Once you've made the connection to whatever service you'd like to chat with, call &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; to clone your process. Each of these two identical process has a very simple job to do: the parent copies everything from the socket to standard output, while the child simultaneously copies everything from standard input to the socket. To accomplish the same thing using just one process would be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceec53b2ebb7603eb9ee71d9bde01119b83707cb" translate="yes" xml:space="preserve">
          <source>This clones the repository and makes a local copy in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5330da17cfc7cfcf64aab224d5b574c934e7ac2c" translate="yes" xml:space="preserve">
          <source>This code heavily adapted from an early version of perl5db.pl attributable to Larry Wall and the Perl Porters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c4fc183eca8652881b1cb5b12c6ea249b79ebe" translate="yes" xml:space="preserve">
          <source>This code is intended for development only, and may not be portable even to all Unix variants. Also, it is an 80% solution, in that it isn't able to make all ops read only. Specifically it does not apply to op slabs belonging to &lt;code&gt;BEGIN&lt;/code&gt; blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443071b2d9d382ee44392d30a6c9cc6944390654" translate="yes" xml:space="preserve">
          <source>This code is unusual in that most formatters completely discard this code and its content. Other formatters will render it with invisible codes that can be used in building an index of the current document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed77ac1105bfebc895982f70abdb5f07d0f61471" translate="yes" xml:space="preserve">
          <source>This code is unusual is that it should have no content. That is, a processor may complain if it sees &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; . Whether or not it complains, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f748555f0c218e80f371f8622c90719bdf4c3e1" translate="yes" xml:space="preserve">
          <source>This code resides primarily in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ca79218fad07abe234bb2cecfbf2b9daaa8186" translate="yes" xml:space="preserve">
          <source>This code tries to return a new SV (which contains the value 42) if it should return a real value, or undef otherwise. Instead it has returned a NULL pointer which, somewhere down the line, will cause a segmentation violation, bus error, or just weird results. Change the zero to &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; in the first line and all will be well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0496da28a3ec6a32260558d3028edcf275c0a4" translate="yes" xml:space="preserve">
          <source>This combination of options may also be specified thus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738a4e0887c40771b0a61f4f0df6d45e56b8d5cf" translate="yes" xml:space="preserve">
          <source>This combination performs the work of the legacy functions gethostbyname() and inet_ntoa().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d728ee6330c55e20ceb083fe7c0710810e2932ca" translate="yes" xml:space="preserve">
          <source>This command indicates that an item in a list begins here. Formatting codes are processed. The semantics of the (optional) text in the remainder of this paragraph are explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a355ff290cc8d5e2710e8069a06d654602bb061" translate="yes" xml:space="preserve">
          <source>This command indicates that the text in the remainder of the paragraph is a heading. That text may contain formatting codes. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6da60e4854fba0e9da1ba094a38fc435654e60e" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the end of the region begun by the most recent &quot;=over&quot; command. It permits no text after the &quot;=back&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19be29c945bbd16c098b73b780bb343e863492ff" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the start of a list/indent region. If there is any text following the &quot;=over&quot;, it must consist of only a nonzero positive numeral. The semantics of this numeral is explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Formatting codes are not expanded. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff4d3408bd7bdb5ab335d1f0aa8564e21d93c8d" translate="yes" xml:space="preserve">
          <source>This command indicates that this line is the end of this previously started Pod block. If there is any text after &quot;=cut&quot; on the line, it must be ignored. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f41d49fdd2a10822f19964c9959582847611ffe" translate="yes" xml:space="preserve">
          <source>This command indicates that this paragraph begins a Pod block. (If we are already in the middle of a Pod block, this command has no effect at all.) If there is any text in this command paragraph after &quot;=pod&quot;, it must be ignored. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a99ea1513aed41e6edc9e12797ae7dfeaac42f6" translate="yes" xml:space="preserve">
          <source>This command is used for declaring the encoding of a document. Most users won't need this; but if your encoding isn't US-ASCII, then put a &lt;code&gt;=encoding &lt;i&gt;encodingname&lt;/i&gt;&lt;/code&gt; command very early in the document so that pod formatters will know how to decode the document. For</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc900c104077e4a6a7ca5f06e5d70661d00910f9" translate="yes" xml:space="preserve">
          <source>This command, which should occur early in the document (at least before any non-US-ASCII data!), declares that this document is encoded in the encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a044d113549cfc62bab49938c5d884a6268cf948" translate="yes" xml:space="preserve">
          <source>This commands provides a statistical overview over recent download activities. The data for this is collected in the YAML file &lt;code&gt;FTPstats.yml&lt;/code&gt; in your &lt;code&gt;cpan_home&lt;/code&gt; directory. If no YAML module is configured or YAML not installed, no stats are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea20acdc8121360e07a3ca6ca2abb72ed9a4374" translate="yes" xml:space="preserve">
          <source>This compiler backend prints the internal OPs of a Perl program's syntax tree in one of several space-efficient text formats suitable for debugging the inner workings of perl or other compiler backends. It can print OPs in the order they appear in the OP tree, in the order they will execute, or in a text approximation to their tree structure, and the format of the information displayed is customizable. Its function is similar to that of perl's &lt;b&gt;-Dx&lt;/b&gt; debugging flag or the &lt;b&gt;B::Terse&lt;/b&gt; module, but it is more sophisticated and flexible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49048e5c36c04df148e3cdcc3f896c82e8922e40" translate="yes" xml:space="preserve">
          <source>This compiler is typically run by the makefiles created by &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or by &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Build&quot;&gt;Module::Build&lt;/a&gt; or other Perl module build tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811fc2387a18f3ccb2c99535bb74afa37f5a7e14" translate="yes" xml:space="preserve">
          <source>This condition is called a deadlock, and it occurs whenever two or more threads are trying to get locks on resources that the others own. Each thread will block, waiting for the other to release a lock on a resource. That never happens, though, since the thread with the resource is itself waiting for a lock to be released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa53aa7f128fff59cd7dcb34623ce5e613b1979" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; , which indicates that the compiler supports __builtin_choose_expr(x,y,z). This built-in function is analogous to the &lt;code&gt;x?y:z&lt;/code&gt; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that was not chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8177d32c94f6808dc1bba5e1e003e2e654d1454a" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; , which indicates that the compiler supports __builtin_expect(exp,c). You may use __builtin_expect to provide the compiler with branch prediction information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e85ff206a230f535cdc1e1b660d9e31b004675c" translate="yes" xml:space="preserve">
          <source>This construct cannot be used within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (or the &lt;code&gt;/l&lt;/code&gt; regex modifier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fed69726a17c92a263e748b2d7fa3336a3e37f" translate="yes" xml:space="preserve">
          <source>This construct is useful when you want to capture one of a number of alternative matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cfaa9b31ac24d949cb1a2ef0db748a527694e4" translate="yes" xml:space="preserve">
          <source>This construction is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c7683a763192abf9645014c7b058753006e735" translate="yes" xml:space="preserve">
          <source>This constructor lets its parent class do the actual object construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf27879428ff426e547cd9ab897b5c2de43f4ae" translate="yes" xml:space="preserve">
          <source>This constructs a language handle. You usually &lt;b&gt;don't&lt;/b&gt; call this directly, but instead let &lt;code&gt;get_handle&lt;/code&gt; find a language class to &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; and to then call -&amp;gt;new on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edc7f7dd753392a74ab3c329050e0ec08dcdba9" translate="yes" xml:space="preserve">
          <source>This controls how verbose to be during batch conversion, as far as notes to STDOUT (or whatever is &lt;code&gt;&lt;a href=&quot;../../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;'d) about how the conversion is going. If 0, no progress information is printed. If 1 (the default value), some progress information is printed. Higher values print more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7a4f63a01fbc1cdd9d161f843ad25c0052f17f" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks if a dual-life core module has been deprecated. If this is set to true &lt;code&gt;check_install&lt;/code&gt; will return false to &lt;code&gt;uptodate&lt;/code&gt; , if a dual-life module is found to be loaded from &lt;code&gt;$Config{privlibexp}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4114328d4769af34ebf3741b18df472503df04" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks your &lt;code&gt;%INC&lt;/code&gt; hash to see if a module is available. By default, only &lt;code&gt;@INC&lt;/code&gt; is scanned to see if a module is physically on your filesystem, or available via an &lt;code&gt;@INC-hook&lt;/code&gt; . Setting this variable to &lt;code&gt;true&lt;/code&gt; will trust any entries in &lt;code&gt;%INC&lt;/code&gt; and return them for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4381fad7d89f422c37ccba3ee1b2f92eba8443" translate="yes" xml:space="preserve">
          <source>This controls whether IPC::Cmd will print any output from the commands to the screen or not. The default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c156076360b54f8a8977c57dc77de47486be1ac3" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Module::Load::Conditional will not output any warnings. The default is 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49fb12849ceb3c435af21ba21b9e8d24214fd70" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will try to parse (and eval) the version from the module you're trying to load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9aae25fb78fe9990ffb44145098a21f55aa720e" translate="yes" xml:space="preserve">
          <source>This controls whether Params::Check will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Params::Check will not output any warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa3d4d74657a46a0b2bcece8a25683b9b4d5103" translate="yes" xml:space="preserve">
          <source>This controls whether all output of a command should also be printed to STDOUT/STDERR or should only be trapped in buffers (NOTE: buffers require &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; to be installed, or your system able to work with &lt;a href=&quot;open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732d2e4b2658c0a2ec91db3c054e26236d0390f1" translate="yes" xml:space="preserve">
          <source>This controls whether imports the functions of a loaded modules to the caller package. The default is no importing any functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb78f49655da0a3543996010fb5198aba12c2274" translate="yes" xml:space="preserve">
          <source>This controls whether or not each HTML page is liable to have a little table of contents at the top (which we call an &quot;index&quot; for historical reasons). This is true by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18f8fcaf7759aa328d11a1f1e92e835b3d9557f" translate="yes" xml:space="preserve">
          <source>This controls whether warnings should be printed if a module failed to load. The default is to use the value of $Module::Load::Conditional::VERBOSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff7f0c70685518180af334112b2fe58a44a4fdd" translate="yes" xml:space="preserve">
          <source>This copyright does not prohibit distribution of any version of Perl containing this extension under the terms of the GNU or Artistic licenses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07ca9a36ef5f49f5e95795b2568b38574fd37e2" translate="yes" xml:space="preserve">
          <source>This corresponds to clearerr(), i.e., clears 'error' and (usually) 'eof' flags for the &quot;stream&quot;. Does not return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a832f3c37512b00bc489449027088839617ff5af" translate="yes" xml:space="preserve">
          <source>This corresponds to feof(). Returns a true/false indication of whether the handle is at end of file. For terminal devices this may or may not be &quot;sticky&quot; depending on the implementation. The flag is cleared by PerlIO_seek(), or PerlIO_rewind().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baeb66e5af4f3d77be2f1ed10348f03a4ed016a5" translate="yes" xml:space="preserve">
          <source>This corresponds to ferror(). Returns a true/false indication of whether there has been an IO error on the handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb12a0ca3665432e7ae210e2f30b098e3c60f423" translate="yes" xml:space="preserve">
          <source>This corresponds to fflush(). Sends any buffered write data to the underlying file. If called with &lt;code&gt;NULL&lt;/code&gt; this may flush all open streams (or core dump with some USE_STDIO implementations). Calling on a handle open for read only, or on which last operation was a read of some kind may lead to undefined behaviour on some USE_STDIO implementations. The USE_PERLIO (layers) implementation tries to behave better: it flushes all open streams when passed &lt;code&gt;NULL&lt;/code&gt; , and attempts to retain data on read streams either in the buffer or by seeking the handle to the current logical position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e414890b7f22b1b4083f4007de6555d9d071db1" translate="yes" xml:space="preserve">
          <source>This corresponds to fileno(), note that on some platforms, the meaning of &quot;fileno&quot; may not match Unix. Returns -1 if the handle has no open descriptor associated with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4554adde4cea2591eaa99c7438bd7a745a0b3f" translate="yes" xml:space="preserve">
          <source>This corresponds to fseek(). Sends buffered write data to the underlying file, or discards any buffered read data, then positions the file descriptor as specified by &lt;b&gt;offset&lt;/b&gt; and &lt;b&gt;whence&lt;/b&gt; (sic). This is the correct thing to do when switching between read and write on the same handle (see issues with PerlIO_flush() above). Offset is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9bee6b04c387fd0085a9f7aa8ff48a5f034283" translate="yes" xml:space="preserve">
          <source>This corresponds to ftell(). Returns the current file position, or (Off_t) -1 on error. May just return value system &quot;knows&quot; without making a system call or checking the underlying file descriptor (so use on shared file descriptors is not safe without a PerlIO_seek()). Return value is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3583e8644f865d149cd4eb31d670f437a6e26eb" translate="yes" xml:space="preserve">
          <source>This corresponds to getc(). Despite the c in the name only byte range 0..0xFF is supported. Returns the character read or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cbd65b62177115f422eaf8fe4754328fbc6b9b" translate="yes" xml:space="preserve">
          <source>This corresponds to rewind(). It is usually defined as being</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c7ee35566034261e1234fcee65abc1e334abb8" translate="yes" xml:space="preserve">
          <source>This corresponds to setlinebuf(). Does not return a value. What constitutes a &quot;line&quot; is implementation dependent but usually means that writing &quot;\n&quot; flushes the buffer. What happens with things like &quot;this\nthat&quot; is uncertain. (Perl core uses it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c130282a86007cfef5f589b0d598e97fc7e10899" translate="yes" xml:space="preserve">
          <source>This corresponds to tmpfile(), i.e., returns an anonymous PerlIO or NULL on error. The system will attempt to automatically delete the file when closed. On Unix the file is usually &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;-ed just after it is created so it does not matter how it gets closed. On other systems the file may only be deleted if closed via PerlIO_close() and/or the program exits via &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;. Depending on the implementation there may be &quot;race conditions&quot; which allow other processes access to the file, though in general it will be safer in this regard than ad. hoc. schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327b626f972edcc8578bc2302697191125c0290f" translate="yes" xml:space="preserve">
          <source>This corresponds to ungetc(). Note that arguments have been revised to have &quot;file&quot; first. Arranges that next read operation will return the byte &lt;b&gt;c&lt;/b&gt;. Despite the implied &quot;character&quot; in the name only values in the range 0..0xFF are defined. Returns the byte &lt;b&gt;c&lt;/b&gt; on success or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error. The number of bytes that can be &quot;pushed back&quot; may vary, only 1 character is certain, and then only if it is the last character that was read from the handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f57342ffddc378f45e967d08a4b40a9028441d" translate="yes" xml:space="preserve">
          <source>This could, of course, be more legibly written with the &lt;code&gt;/x&lt;/code&gt; modifier, adding whitespace and comments. Here it is expanded, courtesy of Fred Curtis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac65bf824b65194ff0a99fd92e3e036111f8e8a9" translate="yes" xml:space="preserve">
          <source>This counterintuitive behavior has been fixed in perl v5.8.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d26884badcfad89a2f88ee752f4bee54862ec7a" translate="yes" xml:space="preserve">
          <source>This creates a handler for the attribute &lt;code&gt;:Loud&lt;/code&gt; in the class LoudDecl. Thereafter, any subroutine declared with a &lt;code&gt;:Loud&lt;/code&gt; attribute in the class LoudDecl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fa03371108789e3d1ff265f81c30f8fb7e2b16" translate="yes" xml:space="preserve">
          <source>This creates a new thread (&lt;code&gt;$thr2&lt;/code&gt; ) that inherits the stack size from an existing thread (&lt;code&gt;$thr1&lt;/code&gt; ). This is shorthand for the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee76e6a741e92139c43f1e221ed11b509991786" translate="yes" xml:space="preserve">
          <source>This database type allows arbitrary key/value pairs to be stored in data files. This is equivalent to the functionality provided by other hashing packages like DBM, NDBM, ODBM, GDBM, and SDBM. Remember though, the files created using DB_HASH are not compatible with any of the other packages mentioned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3807b81d9c773a6c5335f9e71e920114a654bcff" translate="yes" xml:space="preserve">
          <source>This debugger prints a number which increments for each statement encountered and waits for you to hit a newline before continuing to the next statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c09da3f20ea7878643178c10aa0a6e33cc924b" translate="yes" xml:space="preserve">
          <source>This declares a block of tests that might be skipped, $how_many tests there are, $why and under what $condition to skip them. An example is the easiest way to illustrate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44521e30f7e690cd5dc65c30814c4cee699cd60e" translate="yes" xml:space="preserve">
          <source>This decomposition may be an intermediate one whose components are also decomposable. Use &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bd528541645ff3d464e572f5a4805e2ee9bc4c" translate="yes" xml:space="preserve">
          <source>This default can be overridden on a per-number basis by calling the &lt;code&gt;display_format&lt;/code&gt; method instead. As before, not supplying any argument returns the current display style for this number. Otherwise whatever you specify will be the new display style for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13fed4037708b058149d6d54239c3578805f852" translate="yes" xml:space="preserve">
          <source>This demonstrates how &lt;code&gt;SUPER&lt;/code&gt; is resolved. Even though the object is blessed into the &lt;code&gt;C&lt;/code&gt; class, the &lt;code&gt;speak()&lt;/code&gt; method in the &lt;code&gt;B&lt;/code&gt; class can still call &lt;code&gt;SUPER::speak()&lt;/code&gt; and expect it to correctly look in the parent class of &lt;code&gt;B&lt;/code&gt; (i.e the class the method call is in), not in the parent class of &lt;code&gt;C&lt;/code&gt; (i.e. the class the object belongs to).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a18b47e8bc86d748a4aab67a43edef686b92a3f" translate="yes" xml:space="preserve">
          <source>This depends on the tied hash's implementation of EXISTS(). For example, there isn't the concept of undef with hashes that are tied to DBM* files. It also means that exists() and defined() do the same thing with a DBM* file, and what they end up doing is not what they do with ordinary hashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4bc0de5af18f612ccd2a5cae826c99487fcbf8" translate="yes" xml:space="preserve">
          <source>This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in &lt;code&gt;/dev&lt;/code&gt; ; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5829cc9fcaba21dee6f9d7f5a98f9ac945f1487" translate="yes" xml:space="preserve">
          <source>This description is not updated often (since 5.6.1?), see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20322d80a32c4020d9ededc57d341d0284daf471" translate="yes" xml:space="preserve">
          <source>This directive is supported with ANSI-type function declarations only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18a04a1fb981c46cc90618271edcb18e99ed305" translate="yes" xml:space="preserve">
          <source>This directory contains dual-life modules where the CPAN module is canonical. Do not patch these modules directly! Changes to these modules should be submitted to the maintainer of the CPAN module. Once those changes are applied and released, the new version of the module will be incorporated into the core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5f151207fd145f47cd0f164782d7d714aa8988" translate="yes" xml:space="preserve">
          <source>This directory contains pure-Perl modules which are only released as part of the core. This directory contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff88cb5fa00bc50f7151a1d4596e477618c8bcec" translate="yes" xml:space="preserve">
          <source>This directory is for dual-life modules where the blead source is canonical. Note that some modules in this directory may not yet have been released separately on CPAN. Modules under</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62002fdbbc82dfdecab897397921252b1a422691" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;BOOKSHELF&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333fd828a086a8d956340a5925aba972db5faa95" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7d8abb15dd5ddcab335f051e15e631ee76c9a7" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working man to access these files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170ad9fea04adcf28e5b84faabd5cf2954a187d9" translate="yes" xml:space="preserve">
          <source>This disables &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3a0993d47177782fe70afdd82bfb741c3d7395" translate="yes" xml:space="preserve">
          <source>This disables the poetry optimization, generating a compile-time error if you try to use a bareword identifier that's not a subroutine, unless it is a simple identifier (no colons) and that it appears in curly braces or on the left hand side of the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ff219b627159fe6cfa93920427dc7e601e7134" translate="yes" xml:space="preserve">
          <source>This document aims to provide an overview of the vast perl community, which is far too large and diverse to provide a detailed listing. If any specific niche has been forgotten, it is not meant as an insult but an omission for the sake of brevity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba7340d966579fbb753302864000cf7b2972014" translate="yes" xml:space="preserve">
          <source>This document assumes that the executable named &quot;perl&quot; is Perl version 5. Some systems may have installed Perl version 5 as &quot;perl5&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2742d9b73b97368bfc5521e9515184f408ef85" translate="yes" xml:space="preserve">
          <source>This document assumes that you already understand the basics of Perl syntax, variable types, operators, and subroutine calls. If you don't understand these concepts yet, please read &lt;a href=&quot;perlintro&quot;&gt;perlintro&lt;/a&gt; first. You should also read the &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;, &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;, and &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f596bd16fedee538f262d0de64e96d996439fb3" translate="yes" xml:space="preserve">
          <source>This document attempts to describe how to use the Perl API, as well as to provide some info on the basic workings of the Perl core. It is far from complete and probably contains many errors. Please refer any questions or comments to the author below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e01fbc0bc773f9d24734cb30bab33bda7d5f6af" translate="yes" xml:space="preserve">
          <source>This document attempts to describe the Perl Community's &quot;best practice&quot; for writing Perl modules. It extends the recommendations found in &lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt; , which should be considered required reading before reading this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab11f45369409b96d7bf2180484dc0f685d2683" translate="yes" xml:space="preserve">
          <source>This document briefly describes Perl under Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083d82552ef9adb2b16dbbdc73ee6cb2d3adb7be" translate="yes" xml:space="preserve">
          <source>This document codifies the support and maintenance commitments that the Perl community should expect from Perl's developers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4356257bf892096131087eff39fae084e3b0fb" translate="yes" xml:space="preserve">
          <source>This document covers features supported by &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; (also known as &lt;code&gt;xsubpp&lt;/code&gt; ) 3.13_01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d19d436c676e82c5de62fa2d93b31ad146ee5c7" translate="yes" xml:space="preserve">
          <source>This document defines a standard generic interface to the dynamic linking mechanisms available on many platforms. Its primary purpose is to implement automatic dynamic loading of Perl modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a30c0ae237ad22360e4681ed6256da44062757" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Queue version 3.05</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32625e21916315b56d3d555dca5fa14529f5283" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Semaphore version 2.12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a25c4c9828d0f58970f77b7ac6aa566b68c27f1" translate="yes" xml:space="preserve">
          <source>This document describes all backslash and escape sequences. After explaining the role of the backslash, it lists all the sequences that have a special meaning in Perl regular expressions (in alphabetical order), then describes each of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ff3a8588f27b8cdd8cc7d51db810e080d05732" translate="yes" xml:space="preserve">
          <source>This document describes all of Perl's object-oriented (OO) features from the ground up. If you're just looking to write some object-oriented code of your own, you are probably better served by using one of the object systems from CPAN described in &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f134817136be6999dd57e5d22bbefe3d37d2f5" translate="yes" xml:space="preserve">
          <source>This document describes how Perl internally handles numeric values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8453dae2d904ec94b51a4ae275d589cad1fe0302" translate="yes" xml:space="preserve">
          <source>This document describes the behavior and implementation of the PerlIO abstraction described in &lt;a href=&quot;perlapio&quot;&gt;perlapio&lt;/a&gt; when &lt;code&gt;USE_PERLIO&lt;/code&gt; is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a866d5af85544e7e4f21ddcd952a6d5892f7ea0f" translate="yes" xml:space="preserve">
          <source>This document describes the layout of the Perl source tree. If you're hacking on the Perl core, this will help you find what you're looking for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327aacce5b60fcb7f0492805932fe1dec841e5bb" translate="yes" xml:space="preserve">
          <source>This document describes threads version 2.01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469ac48c0f559cb018049645e8c6431b0895b43b" translate="yes" xml:space="preserve">
          <source>This document describes threads::shared version 1.48</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645bafb8d9dd20a3e1fad46cb6f3fa997de6c937" translate="yes" xml:space="preserve">
          <source>This document describes various features of FreeBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321b1b1331ddd1b908bf07373d4048f86b3fa9c7" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's (formerly Compaq's, formerly Digital's) Unix operating system (Tru64) that will affect how Perl version 5 (hereafter just Perl) is configured, compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d268ac5a2d19120ce76c77eb58b90ecc6824f4a2" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's Unix operating system (HP-UX) that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eba298a6bc6800370faf3fd81957d6c988953ae" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's OS/400 operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1043854dc3d305d1c7397cad00b2c0693b02060a" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's UNIX operating system AIX that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e732732feb0181fd46f9c9188d35cc9910b00cf" translate="yes" xml:space="preserve">
          <source>This document describes various features of Irix that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180f34cce99d47d99da56406605f0fb9ba8ddd90" translate="yes" xml:space="preserve">
          <source>This document describes various features of Linux that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd165af2963c8b766b7c027487cbd05b923f2018" translate="yes" xml:space="preserve">
          <source>This document describes various features of OpenBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5bdb1f6483dddcfcf934a3487da7243a97f3cc" translate="yes" xml:space="preserve">
          <source>This document describes various features of Sun's Solaris operating system that will affect how Perl version 5 (hereafter just perl) is compiled and/or runs. Some issues relating to the older SunOS 4.x are also discussed, though they may be out of date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757712086ab3b4685f19333593ba82a0d48290a1" translate="yes" xml:space="preserve">
          <source>This document describes various features of the Symbian operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d121d0bfe8a3c1aa6015bd2c8760d53592dff9" translate="yes" xml:space="preserve">
          <source>This document describes version 0.18 of Locale::Maketext::Simple, released Septermber 8, 2006.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0659e04f3d9f2056b337b0739a67684597732b" translate="yes" xml:space="preserve">
          <source>This document describes version 0.97 of Attribute::Handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00291624b11a3514d125571e1eabaca275507a74" translate="yes" xml:space="preserve">
          <source>This document describes version 2.09 of File::Path, released 2013-01-17.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e958fa3bffae7851375960acacad749b89480be8" translate="yes" xml:space="preserve">
          <source>This document differs from &lt;a href=&quot;perlnewmod&quot;&gt;perlnewmod&lt;/a&gt; in that it is a style guide rather than a tutorial on creating CPAN modules. It provides a checklist against which modules can be compared to determine whether they conform to best practice, without necessarily describing in detail how to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c365d03a0d07def2d5f697a7dff266e86bfcaee" translate="yes" xml:space="preserve">
          <source>This document explains how Perl development works. It includes details about the Perl 5 Porters email list, the Perl repository, the Perlbug bug tracker, patch guidelines, and commentary on Perl development philosophy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448289ec7a46caaf1d68d5b7cd3ab508bea55402" translate="yes" xml:space="preserve">
          <source>This document gives a condensed list of the features available in the POSIX module. Consult your operating system's manpages for general information on most features. Consult &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for functions which are noted as being identical to Perl's builtin functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fce74951001e7bfa538197dd8bb5ec9f0e07bc5" translate="yes" xml:space="preserve">
          <source>This document gives a general idea of Unicode and how to use Unicode in Perl. See &lt;a href=&quot;#Further-Resources&quot;&gt;Further Resources&lt;/a&gt; for references to more in-depth treatments of Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a55afa937d8de565fbacea117f04c55c4f3d03c" translate="yes" xml:space="preserve">
          <source>This document gives instructions for building Perl for RISC OS. It is complicated by the need to cross compile. There is a binary version of perl available from &lt;a href=&quot;http://www.cp15.org/perl/&quot;&gt;http://www.cp15.org/perl/&lt;/a&gt; which you may wish to use instead of trying to compile it yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f232a362787f4ceadbadf19dad93be195a4a8a" translate="yes" xml:space="preserve">
          <source>This document gives you some suggestions about how to go about writing Perl modules, preparing them for distribution, and making them available via CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132f8081c1f83d30c54e1dd1f8a6c29026e0459f" translate="yes" xml:space="preserve">
          <source>This document has provided several way to go about identifying hot-spots, and checking whether any modifications have improved the runtime of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9e9ade072c3d9b2906bfd078f37006fde1b348" translate="yes" xml:space="preserve">
          <source>This document is an attempt to shine some light on the guts of the regex engine and how it works. The regex engine represents a significant chunk of the perl codebase, but is relatively poorly understood. This document is a meagre attempt at addressing this situation. It is derived from the author's experience, comments in the source code, other papers on the regex engine, feedback on the perl5-porters mail list, and no doubt other places as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f799b102440b11497f30f8301310792802f29f" translate="yes" xml:space="preserve">
          <source>This document is authored and maintained by Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb0c7f47e4494d30a1aab35b9ec321b01a2ec44" translate="yes" xml:space="preserve">
          <source>This document is available under the same terms as Perl itself. Code examples in all the perlfaq documents are in the public domain. Use them as you see fit (and at your own risk with no warranty from anyone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931cd9f92a3e4b725c73c5f241d6c52b01e63f35" translate="yes" xml:space="preserve">
          <source>This document is detailed notes on the Pod markup language. Most people will only have to read &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; to know how to write in Pod, but this document may answer some incidental questions to do with parsing and rendering Pod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5499e713f269332b5a031b1d5ec104878d26d5" translate="yes" xml:space="preserve">
          <source>This document is intended to give you a quick overview of the Perl programming language, along with pointers to further documentation. It is intended as a &quot;bootstrap&quot; guide for those who are new to the language, and provides just enough information for you to be able to read other peoples' Perl and understand roughly what it's doing, or write your own simple scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d450fbf5761325924f000d871533277846798f" translate="yes" xml:space="preserve">
          <source>This document is maintained by Jan Dubois.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad1ca1a9c1e0e6df1be4b460cdb832dc533d65a" translate="yes" xml:space="preserve">
          <source>This document is meant to be a detailed but understandable treatment of the many different sorts of data structures you might want to develop. It should also serve as a cookbook of examples. That way, when you need to create one of these complex data structures, you can just pinch, pilfer, or purloin a drop-in example from here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf997dd7f7e98ee160d1fffa9d041813ac9f4bb" translate="yes" xml:space="preserve">
          <source>This document is meant to help you to find out what constitutes portable Perl code. That way once you make a decision to write portably, you know where the lines are drawn, and you can stay within them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9f3d95216c84aa89657f351bb6eefc71ea99a0" translate="yes" xml:space="preserve">
          <source>This document is provided in the hope that it will be useful, but without any warranty; without even the implied warranty of accuracy, authoritativeness, completeness, merchantability, or fitness for a particular purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a1d5c913f755b58160ddd4ac8b4f8158d38b0a" translate="yes" xml:space="preserve">
          <source>This document is the master document which records all written policies about how the Perl 5 Porters collectively develop and maintain the Perl core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6445b4e91fdc1237d3a1bc4a31d98919bdef331e" translate="yes" xml:space="preserve">
          <source>This document lists the current and past experimental features in the perl core. Although all of these are documented with their appropriate topics, this succinct listing gives you an overview and basic facts about their status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04379014fdbc8385dc766fdec2dc2ab609657d0" translate="yes" xml:space="preserve">
          <source>This document may be distributed under the same terms as Perl itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68809e455146d4d0b2eb575625c0befbf01b3e91" translate="yes" xml:space="preserve">
          <source>This document may be incomplete in some respects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40e2bd179554762718d2c8f40e4558baafd8315" translate="yes" xml:space="preserve">
          <source>This document merely lists all available properties and does not attempt to explain what each property really means. There is a brief description of each Perl extension; see &lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;Other Properties in perlunicode&lt;/a&gt; for more information on these. There is some detail about Blocks, Scripts, General_Category, and Bidi_Class in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, but to find out about the intricacies of the official Unicode properties, refer to the Unicode standard. A good starting place is &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e6772a5d46653631303f536faddc78ecd15c3a" translate="yes" xml:space="preserve">
          <source>This document mostly explains the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ddd5955e611e8402df676dc922c52fe96687d9" translate="yes" xml:space="preserve">
          <source>This document needs a rewrite that separates the tutorial content from the reference content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5434f0b9e2b7cf484cc38556a1c3be222c03edd" translate="yes" xml:space="preserve">
          <source>This document provides a general overview of the capabilities and limitations of the fork() emulation. Note that the issues discussed here are not applicable to platforms where a real fork() is available and Perl has been configured to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c5711ad21bddf8f27384e848494d1a512f01be" translate="yes" xml:space="preserve">
          <source>This document provides a reference for Perl's object orientation features. If you're looking for an introduction to object-oriented programming in Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a94276417126d2ba57635546eac62791e072d3" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to object-oriented programming in Perl. It begins with a brief overview of the concepts behind object oriented design. Then it introduces several different OO systems from &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org&quot;&gt;CPAN&lt;/a&gt; which build on top of what Perl provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6876a82e12e5ab947f419b2c224d987985e1ad19" translate="yes" xml:space="preserve">
          <source>This document provides an overview of how the Perl interpreter works at the level of C code, along with pointers to the relevant C source code files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ef42b4ebd0391f6b1eb2c007891c9540cce7bb" translate="yes" xml:space="preserve">
          <source>This document provides information about the portion of the Unicode database that deals with character properties, that is the portion that is defined on single code points. (&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;Other information in the Unicode data base&lt;/a&gt; below briefly mentions other data that Unicode provides.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a79746685de57fddf566ba23eb18f1694b69ba" translate="yes" xml:space="preserve">
          <source>This document serves as both a specification for anyone wishing to implement the DynaLoader for a new platform and as a guide for anyone wishing to use the DynaLoader directly in an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2fd7fb88b1605d6c1c01cd882956329e66498d" translate="yes" xml:space="preserve">
          <source>This document takes you through a simple patch example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482b84044bf12cbb74ce5534dc67232a2bb4bcd3" translate="yes" xml:space="preserve">
          <source>This document varies from difficult to understand to completely and utterly opaque. The wandering prose riddled with jargon is hard to fathom in several places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e494f5a4ef902fd5cb4de9dfa1a90e73e0fc46e2" translate="yes" xml:space="preserve">
          <source>This document walks through the creation of a small patch to Perl's C code. If you're just getting started with Perl core hacking, this will help you understand how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e368b4b82da174b5c34f4ad74472953966358bf" translate="yes" xml:space="preserve">
          <source>This document was created in February, 2011, and the last major revision was in February, 2013.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89c4ac20e63934f15f4f06f3bdf35dc35e9054b" translate="yes" xml:space="preserve">
          <source>This document was originally written by David Fiander for the 5.005 release of Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44116b950aea8406dc1d009e3e7e8df16d0f1901" translate="yes" xml:space="preserve">
          <source>This document was originally written by Nathan Torkington, and is maintained by the perl5-porters mailing list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb57f1783ae5d9d11a07aa4ee9a4142c141dd869" translate="yes" xml:space="preserve">
          <source>This document was originally written by Thomas Dorner for the 5.005 release of Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8245e0ace1fc709b9c52b2d684fbab4d872b4b6b" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.005_03 release of Perl 11 March 1999.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c73c6cbc6ea7a7507692f73f286583700f23f4" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.6 release of perl 11 July 2000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d3763f0de441b0bf953c53b8f14562b8c6d91b" translate="yes" xml:space="preserve">
          <source>This document was revised 09-October-1996 for Perl 5.003_7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae9aedfb6e910ab590ab6a48004a6cd92829aac" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on BS2000 in the POSIX subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb2db0bdd80184dad93c70d1f7773c61d926757" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on OS/390 (aka z/OS) Unix System Services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14dd21b17eb4778756f16a28286f3080a5b52fc" translate="yes" xml:space="preserve">
          <source>This document will help you configure, make, test and install Perl on Cygwin. This document also describes features of Cygwin that will affect how Perl behaves at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b25a8a1d43deec5996faad1ce1066a1b7f65307" translate="yes" xml:space="preserve">
          <source>This document will help you learn the best way to go about hacking on the Perl core C code. It covers common problems, debugging, profiling, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1ceac6a2e862b1ba010e29c7ba5c554256d9b3" translate="yes" xml:space="preserve">
          <source>This documentation describes version 0.08.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb13bb5cc25da0a84b0ee6fe56550c8fa997e8a4" translate="yes" xml:space="preserve">
          <source>This documentation is for people who want to download CPAN modules and install them on their own computer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9807e2f281735ce8b4db75a087a60d39d5eaabb" translate="yes" xml:space="preserve">
          <source>This documentation is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1e03b9948de51dc9fc37899fb9224e953fca3a" translate="yes" xml:space="preserve">
          <source>This documentation is free; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cceba8951b48c0df6a7d7a78ae98404b2be1a5f6" translate="yes" xml:space="preserve">
          <source>This documentation is maintained as part of the podlators distribution. The current version is always available from its web site at &amp;lt;&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee59b544a64dcf3a8c36474bf7a745c77abd72ed" translate="yes" xml:space="preserve">
          <source>This documentation provided by Tels &amp;lt;nospam-abuse@bloodgate.com&amp;gt; 2007.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d579dc02247e710bddf4fd80263160b958f95883" translate="yes" xml:space="preserve">
          <source>This does a &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; check on the argument provided. The &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the argument must be the same as the &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the default value for this check to pass.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
