<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="php">
    <body>
      <group id="php">
        <trans-unit id="3a49220b250eb92ae3b3314b401111b2ac96b46a" translate="yes" xml:space="preserve">
          <source>After matching all 6 digits and then failing to match &quot;foo&quot;, the normal action of the matcher is to try again with only 5 digits matching the \d+ item, and then with 4, and so on, before ultimately failing. Once-only subpatterns provide the means for specifying that once a portion of the pattern has matched, it is not to be re-evaluated in this way, so the matcher would give up immediately on failing to match &quot;foo&quot; the first time. The notation is another kind of special parenthesis, starting with (?&amp;gt; as in this example: &lt;em&gt;(?&amp;gt;\d+)bar&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c8c3ae3b09dd193909da140e119946329b49ca" translate="yes" xml:space="preserve">
          <source>After processing a request, any semaphores acquired by the process but not explicitly released will be released automatically and a warning will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fddb352ed72b7ef053fa39f16184fd85e8db750" translate="yes" xml:space="preserve">
          <source>After releasing the semaphore, &lt;a href=&quot;function.sem-acquire&quot;&gt;sem_acquire()&lt;/a&gt; may be called to re-acquire it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318b1bfe0da1b1e793ba80e12173f20c037c998d" translate="yes" xml:space="preserve">
          <source>After removing the semaphore, it is no longer accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed86f79500d17595b3803e8fc927fe23a1e7f26a" translate="yes" xml:space="preserve">
          <source>After the first match is found, the subsequent searches are continued on from end of the last match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bdd1b4935f5febf22af239c306aeb49ea77de6" translate="yes" xml:space="preserve">
          <source>After the run method is executed the Thread will exit immediately, it will be joined with the creating Thread at the appropriate time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2c3dad9cda6edd0346be57f5cd4a3eee18d077" translate="yes" xml:space="preserve">
          <source>After the socket &lt;code&gt;socket&lt;/code&gt; has been created using &lt;a href=&quot;function.socket-create&quot;&gt;socket_create()&lt;/a&gt; and bound to a name with &lt;a href=&quot;function.socket-bind&quot;&gt;socket_bind()&lt;/a&gt;, it may be told to listen for incoming connections on &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ce01c481258567ac35e0e15779bd1e08189044" translate="yes" xml:space="preserve">
          <source>After the socket &lt;code&gt;socket&lt;/code&gt; has been created using &lt;a href=&quot;function.socket-create&quot;&gt;socket_create()&lt;/a&gt;, bound to a name with &lt;a href=&quot;function.socket-bind&quot;&gt;socket_bind()&lt;/a&gt;, and told to listen for connections with &lt;a href=&quot;function.socket-listen&quot;&gt;socket_listen()&lt;/a&gt;, this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, &lt;strong&gt;socket_accept()&lt;/strong&gt; will block until a connection becomes present. If &lt;code&gt;socket&lt;/code&gt; has been made non-blocking using &lt;a href=&quot;function.socket-set-blocking&quot;&gt;socket_set_blocking()&lt;/a&gt; or &lt;a href=&quot;function.socket-set-nonblock&quot;&gt;socket_set_nonblock()&lt;/a&gt;, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb32479679647a3edbd6cbc1d3371016adfebea4" translate="yes" xml:space="preserve">
          <source>After this assignment, you'd expect &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt;'s value to be 5 as well, so if you wrote &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; = &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt;, you'd expect it to behave just as if you wrote &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; = 5. In other words, &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; is an expression with the value of 5 as well. If everything works right, this is exactly what will happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230418cdd491c323c3919653b997c642020e8596" translate="yes" xml:space="preserve">
          <source>After this, &lt;var&gt;&lt;var&gt;$stack&lt;/var&gt;&lt;/var&gt; will have only 3 elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe21ddc8b43c4bf163e4c28fe3d4061ff2a57d85" translate="yes" xml:space="preserve">
          <source>After viewing &lt;var&gt;page1.php&lt;/var&gt;, the second page &lt;var&gt;page2.php&lt;/var&gt; will magically contain the session data. Read the &lt;a href=&quot;https://secure.php.net/manual/en/ref.session.php&quot;&gt;session reference&lt;/a&gt; for information on &lt;a href=&quot;https://secure.php.net/manual/en/session.idpassing.php&quot;&gt;propagating session ids&lt;/a&gt; as it, for example, explains what the constant &lt;strong&gt;&lt;code&gt;SID&lt;/code&gt;&lt;/strong&gt; is all about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c42644b26aeb4a8beb682caef49087a48f71eb" translate="yes" xml:space="preserve">
          <source>Again, for portability, it is also strongly recommended that you re-write code that uses or relies upon the &lt;em&gt;'t'&lt;/em&gt; mode so that it uses the correct line endings and &lt;em&gt;'b'&lt;/em&gt; mode instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab66ec8a1a2091df686a27a33cbdc8efe6de9257" translate="yes" xml:space="preserve">
          <source>Again, it might be useful to think about this as analogous to the Unix &lt;strong&gt;unlink&lt;/strong&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c21ca09a8fbaba4d1f393236b348ad21e5521be" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;class.intlcalendar#intlcalendar.constants.field-date&quot;&gt;&lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_DATE&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ff898908c7e0bb2b0e2bdab6c0a7957ac2d40b" translate="yes" xml:space="preserve">
          <source>Alias for PATTERN_DECIMAL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c72e32672a93bd2d0939707141050105eac93d0" translate="yes" xml:space="preserve">
          <source>Alias with which this Phar archive should be referred to in calls to stream functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="c0b53ada73b4badba739fa4206b3383564762a32" translate="yes" xml:space="preserve">
          <source>Aliases and deprecated Mysqli Functions &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4bc0de34d212d1a1929576f8b88163521c0bf0" translate="yes" xml:space="preserve">
          <source>Aliases for the above scalar types are not supported. Instead, they are treated as class or interface names. For example, using &lt;em&gt;boolean&lt;/em&gt; as a parameter or return type will require an argument or return value that is an &lt;a href=&quot;language.operators.type&quot;&gt;&lt;em&gt;instanceof&lt;/em&gt;&lt;/a&gt; the class or interface &lt;em&gt;boolean&lt;/em&gt;, rather than of type &lt;a href=&quot;language.types.boolean&quot;&gt;bool&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8321eb891fa924b9dc262d42e8371d91e746d33" translate="yes" xml:space="preserve">
          <source>Aliasing</source>
          <target state="translated">Aliasing</target>
        </trans-unit>
        <trans-unit id="74d838bc92c10050bb627c2125d71709d426260e" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;class.evcheck&quot;&gt;EvCheck&lt;/a&gt; watchers are queued just after &lt;a href=&quot;ev.run&quot;&gt;Ev::run()&lt;/a&gt; has gathered the new events, but before it queues any callbacks for any received events. Thus, &lt;a href=&quot;class.evcheck&quot;&gt;EvCheck&lt;/a&gt; watchers will be invoked before any other watchers of the same or lower priority within an event loop iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f43468239dd4a95a76da1303568f02a96fa9f4" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;class.evprepare&quot;&gt;EvPrepare&lt;/a&gt; watchers are invoked just before &lt;a href=&quot;ev.run&quot;&gt;Ev::run()&lt;/a&gt; starts. Thus, &lt;a href=&quot;class.evprepare&quot;&gt;EvPrepare&lt;/a&gt; watchers are the last watchers invoked before the event loop sleeps or polls for new events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0ce50dcd5609f8635db73ff8379f0820bae075" translate="yes" xml:space="preserve">
          <source>All comparisons are strict (type and value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e60bfe865529dddd329d752abc23bc33ed850b" translate="yes" xml:space="preserve">
          <source>All current values of the attribute named by &lt;em&gt;attrib&lt;/em&gt; are replaced with the values specified through &lt;em&gt;values&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb1dc2723444ccce1d0d7382d4e29ba992d2f6f" translate="yes" xml:space="preserve">
          <source>All extensions, including the dependencies, must be registered before any &lt;a href=&quot;class.v8js&quot;&gt;V8Js&lt;/a&gt; are created which use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea41dc06159d912e5c6277eab1920973a415e78" translate="yes" xml:space="preserve">
          <source>All functions and classes in PHP have the global scope - they can be called outside a function even if they were defined inside and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a19545884c580aad239284abea6c2cedb3601c" translate="yes" xml:space="preserve">
          <source>All internal classes can now be instantiated except for those declared &lt;a href=&quot;language.oop5.final&quot;&gt;final&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57d2ef032b1ef5fe756b8c55ba2a103df512db4" translate="yes" xml:space="preserve">
          <source>All methods declared in an interface must be public; this is the nature of an interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d6e0d26dac7b1fe22c4135d0b82cc78dee2185" translate="yes" xml:space="preserve">
          <source>All methods of &lt;strong&gt;Yaf_Registry&lt;/strong&gt; declared as static, making it unversally accessible. This provides the ability to get or set any custom data from anyway in your code as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7887ecefe70d2b95a847baebf981783b7f1bfed5" translate="yes" xml:space="preserve">
          <source>All names which start with &lt;em&gt;{&lt;/em&gt; are remote names, and are in the form &lt;em&gt;&quot;{&quot; remote_system_name [&quot;:&quot; port] [flags] &quot;}&quot; [mailbox_name]&lt;/em&gt; where:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57db9480219af3ab38eb9ae3af8a7aa9ab4fc8a5" translate="yes" xml:space="preserve">
          <source>All non-alphanumeric characters other than \, -, ^ (at the start) and the terminating ] are non-special in character classes, but it does no harm if they are escaped. The pattern terminator is always special and must be escaped when used within an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4224775001f7892ee57aa5077f1b3326a41cbd51" translate="yes" xml:space="preserve">
          <source>All objects created by the same anonymous class declaration are instances of that very class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80daa4a85c928baae809be4cf88cad9016eaf852" translate="yes" xml:space="preserve">
          <source>All objects that are equal must have the same hash value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1006fec5d7528bd70c4dc794e5829a187345bb0f" translate="yes" xml:space="preserve">
          <source>All overloading methods must be defined as &lt;em&gt;public&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ab7f5960210524542cce034c72c99d41301010" translate="yes" xml:space="preserve">
          <source>All parameters have the same maening as for &lt;a href=&quot;evperiodic.construct&quot;&gt;EvPeriodic::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0f754bc2505d7f872e13bd54337f4cd0c61379" translate="yes" xml:space="preserve">
          <source>All parameters have the same maening as for &lt;strong&gt;EvPrepare()&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1738cd3435030ed8b55c237d990f3b8ae2b443d4" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evcheck.construct&quot;&gt;EvCheck::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68751f3b220721d6b083310bdea95e87361ffb00" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evchild.construct&quot;&gt;EvChild::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f5bb31a6665f5a9e440b8fc0c42b38cb6cb31f" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evembed.construct&quot;&gt;EvEmbed::__construct()&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b18cf2f32859980c543b4fb89cc4b55f31201" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evfork.construct&quot;&gt;EvFork::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a44b556004bb49827cd7802fe85e23f3e8fb921" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evio.construct&quot;&gt;EvIo::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4aecc36bd7829d867c018a1c63165dda9d50be" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evsignal.construct&quot;&gt;EvSignal::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca83f5e57dd2cc368e551dac881b362b622f9d8" translate="yes" xml:space="preserve">
          <source>All parameters have the same meaning as for &lt;a href=&quot;evtimer.construct&quot;&gt;EvTimer::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f687630154b4e04446242de9902ca5d8de43de4e" translate="yes" xml:space="preserve">
          <source>All properties have a long name. Most have a short name, but some do not. Unicode allows for additional names; if present these will be returned by adding 1, 2, etc. to &lt;strong&gt;&lt;code&gt;IntlChar::LONG_PROPERTY_NAME&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9106bd229bb4ab646407089db3ae80e87e6cdc" translate="yes" xml:space="preserve">
          <source>All public, private and protected properties of objects will be returned in the output unless the object implements a &lt;a href=&quot;language.oop5.magic#language.oop5.magic.debuginfo&quot;&gt;__debugInfo()&lt;/a&gt; method (implemented in PHP 5.6.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496b4b67940e6e24b6d5b56ccecd2326a83bc9b1" translate="yes" xml:space="preserve">
          <source>All resources that were locked, or allocated, by the wrapper should be released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e82ed8270a3e6ff2e1ef7674ad46a94590030d" translate="yes" xml:space="preserve">
          <source>All string data must be UTF-8 encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bfd9674ea485fdcace36a3f6af8ba9fae19a0d" translate="yes" xml:space="preserve">
          <source>All tagged data of IFD0. In normal imagefiles this contains image size and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abdc8cc0f5dfb21ec24d9141411606fa34c2541" translate="yes" xml:space="preserve">
          <source>All the credits, equivalent to using: &lt;strong&gt;&lt;code&gt;CREDITS_DOCS&lt;/code&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;code&gt;CREDITS_GENERAL&lt;/code&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;code&gt;CREDITS_GROUP&lt;/code&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;code&gt;CREDITS_MODULES&lt;/code&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;code&gt;CREDITS_FULLPAGE&lt;/code&gt;&lt;/strong&gt;. It generates a complete stand-alone HTML page with the appropriate tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177a51e1052fabcca00cc57b76e9c86b285a0dc3" translate="yes" xml:space="preserve">
          <source>All the parameters have the same meaning as for &lt;a href=&quot;evidle.construct&quot;&gt;EvIdle::__construct()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879ec66ddcf74ad3baa99ee15799be76cf64e469" translate="yes" xml:space="preserve">
          <source>All the sequences that define a single byte value can be used both inside and outside character classes. In addition, inside a character class, the sequence &quot;&lt;em&gt;\b&lt;/em&gt;&quot; is interpreted as the backspace character (hex 08). Outside a character class it has a different meaning (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3ec30f4db0c19220f45bc577cf1c915d5a0068" translate="yes" xml:space="preserve">
          <source>All time zones including backwards compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d022e3f5b0d8e4c22955408532538a36d1bad498" translate="yes" xml:space="preserve">
          <source>All time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563ef83b56a7276c74c04ba986b4876fcb0cac16" translate="yes" xml:space="preserve">
          <source>All timer watchers will be delayed by the time spend between &lt;em&gt;suspend&lt;/em&gt; and &lt;em&gt;resume&lt;/em&gt; , and all &lt;em&gt;periodic&lt;/em&gt; watchers will be rescheduled(that is, they will lose any events that would have occurred while suspended).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87ad141f92f86b47acdab8ed768eebc7a9a9010" translate="yes" xml:space="preserve">
          <source>All values are removed from the attribute named by &lt;em&gt;attrib&lt;/em&gt;. A &lt;em&gt;values&lt;/em&gt; entry must not be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d033abb7b0d8dfe357e7ba75d41d30d54b44be44" translate="yes" xml:space="preserve">
          <source>All values have a long name. Most have a short name, but some do not. Unicode allows for additional names; if present these will be returned by adding 1, 2, etc. to &lt;strong&gt;&lt;code&gt;IntlChar::LONG_PROPERTY_NAME&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22848abec06382c33ce90cedbbfbebdc173a6345" translate="yes" xml:space="preserve">
          <source>All values of the deque joined together as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4daaa2fac9853acdcc0a1771a01be34036848e4" translate="yes" xml:space="preserve">
          <source>All values of the sequence joined together as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027b33fefcd575fa75662aefc927264d94b5018b" translate="yes" xml:space="preserve">
          <source>All values of the set joined together as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5d2eb263ad4591a3298a9240c3d9a4a810ec1f" translate="yes" xml:space="preserve">
          <source>All values of the vector joined together as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f5c196f93b1466091b3e13dc1e88f5a5063f55" translate="yes" xml:space="preserve">
          <source>All variables created (or values returned into array if second parameter is set) are already &lt;a href=&quot;function.urldecode&quot;&gt;urldecode()&lt;/a&gt;d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d16c7a2112a7d0ca85f8e0a3da20c3f68a85aff" translate="yes" xml:space="preserve">
          <source>All variables in the global scope of the sandbox environment are accessible as properties of the sandbox object. The first thing to note is that because of the way memory between these two threads is managed, object and resource variables can not currently be exchanged between interpreters. Additionally, all arrays are deep copied and any references will be lost. This also means that references between interpreters are not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141afb43fbc167233e1d4fd915d51ee05ae3a35c" translate="yes" xml:space="preserve">
          <source>All versions of PHP that support namespaces support three kinds of aliasing or importing: aliasing a class name, aliasing an interface name, and aliasing a namespace name. PHP 5.6+ also allows aliasing or importing function and constant names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a76376e80b5bc2a22d1bfe0f1e6a0083c988ec" translate="yes" xml:space="preserve">
          <source>Allocate locks for the listener, so that it&amp;rsquo;s safe to use it from multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3da3bba1f38c0a4bb3f2e547f174e8aeb5cf98" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a statement object suitable for &lt;a href=&quot;mysqli-stmt.prepare&quot;&gt;mysqli_stmt_prepare()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6267060bf4f41d97b43816f3f6139b6fd6e796e0" translate="yes" xml:space="preserve">
          <source>Allocates enough memory for a required capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f47dc50e864650905d06015a9f5b4cd945c2fd3" translate="yes" xml:space="preserve">
          <source>Allocates or initializes a MYSQL object suitable for &lt;a href=&quot;mysqli.options&quot;&gt;mysqli_options()&lt;/a&gt; and &lt;a href=&quot;mysqli.real-connect&quot;&gt;mysqli_real_connect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb5caece161df0cc45e01960769e9e984ba9f26" translate="yes" xml:space="preserve">
          <source>Allow &lt;em&gt;interactive_timeout&lt;/em&gt; seconds (instead of &lt;em&gt;wait_timeout&lt;/em&gt; seconds) of inactivity before closing the connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f7831b6488efab9e531f3ff3b5b72bafe527fe" translate="yes" xml:space="preserve">
          <source>Allow or prevent reconnect (see the mysqli.reconnect INI directive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cce8f9377fc6ecc3ee7c5102b6c7a14da76530c" translate="yes" xml:space="preserve">
          <source>Allow setting a default SOAP version (&lt;em&gt;soap_version&lt;/em&gt;), internal character encoding (&lt;em&gt;encoding&lt;/em&gt;), and actor URI (&lt;em&gt;actor&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25be8f6bdae7518e0550c04680f3e5f47ecbc32f" translate="yes" xml:space="preserve">
          <source>Allow sorting group documents, using group sort field (group.sort parameter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf560041643af73139c8de52f361b643d77ddf7b" translate="yes" xml:space="preserve">
          <source>Allow spaces after function names. Makes all function names reserved words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b02019057b6bd63247a6e73d6b0fda8739e982" translate="yes" xml:space="preserve">
          <source>Allows Easter dates to be calculated based on the Gregorian calendar during the years 1582 - 1752 when set to &lt;strong&gt;&lt;code&gt;CAL_EASTER_ROMAN&lt;/code&gt;&lt;/strong&gt;. See the &lt;a href=&quot;https://secure.php.net/manual/en/calendar.constants.php&quot;&gt;calendar constants&lt;/a&gt; for more valid constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa9820739256906112afb2204586a7e63771b0f" translate="yes" xml:space="preserve">
          <source>Allows an application to select what kind of IP addresses to use when resolving host names. This is only interesting when using host names that resolve addresses using more than one version of IP, possible values are &lt;strong&gt;&lt;code&gt;CURL_IPRESOLVE_WHATEVER&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CURL_IPRESOLVE_V4&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CURL_IPRESOLVE_V6&lt;/code&gt;&lt;/strong&gt;, by default &lt;strong&gt;&lt;code&gt;CURL_IPRESOLVE_WHATEVER&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c9f029f0a3d6340a9e22366a44ff58d14da043" translate="yes" xml:space="preserve">
          <source>Allows grouping of documents that match the given query. Adds query to the group.query parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0ff0dc9ed0f759792951b4ed5102ea4c761dac" translate="yes" xml:space="preserve">
          <source>Allows iterating over a &lt;a href=&quot;class.recursiveiterator&quot;&gt;RecursiveIterator&lt;/a&gt; to generate an ASCII graphic tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a491457d7c7c2bd81b7350b7d9511782e5cf69b" translate="yes" xml:space="preserve">
          <source>Allows reducing the PNG file size. It is a bitmask field which may be set to any combination of the &lt;em&gt;PNG_FILTER_XXX&lt;/em&gt; constants. &lt;strong&gt;&lt;code&gt;PNG_NO_FILTER&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PNG_ALL_FILTERS&lt;/code&gt;&lt;/strong&gt; may also be used to respectively disable or activate all filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e506b86389bf719cac3e3c7c230f01bd0e68db" translate="yes" xml:space="preserve">
          <source>Allows the creation of nested directories specified in the &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea63e3d5bb282682396a9668f9126f336e8916c8" translate="yes" xml:space="preserve">
          <source>Allows the pool to collect references determined to be garbage by the optionally given collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46761d946599e490a217edff8f60246e5637b7d3" translate="yes" xml:space="preserve">
          <source>Allows the processing of multiple cURL handles asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f20c0917c77ea15849785b05affe98c85064f6" translate="yes" xml:space="preserve">
          <source>Allows the worker to collect references determined to be garbage by the optionally given collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df212801e13bc85eea76b401b618cba63115eb6d" translate="yes" xml:space="preserve">
          <source>Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of &lt;em&gt;max_allowed_packet&lt;/em&gt;. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce3147a144a41039816f49eef66dd1d995e10d5" translate="yes" xml:space="preserve">
          <source>Allows to share data between cURL handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6340ee80df63f5e7bc2da98cf51af5b774773c7e" translate="yes" xml:space="preserve">
          <source>Allows you to change the default value of a space in a font. This amount is added to the normal value and can also be negative. Expressed in character space units, where 1 unit is 1/1000th of an em-square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4f4991ebaaccb5968ace9bcd9ff1e8f565887c" translate="yes" xml:space="preserve">
          <source>Allows you to control the number of colours used for antialiasing text. Allowed values are 4 and 16. The higher value is recommended for text sizes lower than 20, where the effect in text quality is quite visible. With bigger sizes, use 4. It's less computationally intensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184cf1cb6b1f2a65f55df768fc365ea34b83e2db" translate="yes" xml:space="preserve">
          <source>Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using &lt;a href=&quot;function.stream-wrapper-register&quot;&gt;stream_wrapper_register()&lt;/a&gt; or reenable it later on with &lt;a href=&quot;function.stream-wrapper-restore&quot;&gt;stream_wrapper_restore()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9add8b270406939882678961bd3a1053763e0eb5" translate="yes" xml:space="preserve">
          <source>Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt;, &lt;a href=&quot;function.fread&quot;&gt;fread()&lt;/a&gt; etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f4386301e4a4433b71f8629fe24c6b40b1a00d" translate="yes" xml:space="preserve">
          <source>Allows you to recursively check namespaces under a child node instead of from the root of the XML doc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76fbcaa265f6d50ec2cee6502770b7a6f7c2f8c" translate="yes" xml:space="preserve">
          <source>Allows you to specify additional options. Currently supported options include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fb537a4f72e7ec433871a20281787110b7b17b" translate="yes" xml:space="preserve">
          <source>Alpha channel is not supported by all browsers, if you have problem with your browser, try to load your script with an alpha channel compliant browser, e.g. latest Mozilla.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce60461dea8474a63e24cd2e8d2242653f50874" translate="yes" xml:space="preserve">
          <source>Alpha support for &lt;strong&gt;&lt;code&gt;IMG_FILTER_COLORIZE&lt;/code&gt;&lt;/strong&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fedb7736731ac1ab114870dc3fa15f91cdf10fa2" translate="yes" xml:space="preserve">
          <source>Also contains method for escaping query strings and parsing XML responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b4116b6676cd76a9947324ee1aed475eca55e8" translate="yes" xml:space="preserve">
          <source>Also note that if you are embedding PHP within XML or XHTML you will need to use the &amp;lt;?php ?&amp;gt; tags to remain compliant with standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff969439847cbdf27dcd87d3efb4766cfcc6def6" translate="yes" xml:space="preserve">
          <source>Also note that it is your responsibility to &lt;a href=&quot;function.die&quot;&gt;die()&lt;/a&gt; if necessary. If the error-handler function returns, script execution will continue with the next statement after the one that caused an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9b57f07088a7c97e4dbb1404de3c822dea2a19" translate="yes" xml:space="preserve">
          <source>Also, &lt;a href=&quot;class.evcheck&quot;&gt;EvCheck&lt;/a&gt; watchers should not activate/feed events. While &lt;em&gt;libev&lt;/em&gt; fully supports this, they might get executed before other &lt;a href=&quot;class.evcheck&quot;&gt;EvCheck&lt;/a&gt; watchers did their job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d294fd64c8ef5350d120381cdbb26f2a826e8d7" translate="yes" xml:space="preserve">
          <source>Also, &lt;strong&gt;EvCheck&lt;/strong&gt; watchers should not activate/feed events. While &lt;em&gt;libev&lt;/em&gt; fully supports this, they might get executed before other &lt;strong&gt;EvCheck&lt;/strong&gt; watchers did their job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c102f4b53fb969c13af7ebd531c8e90097d3a36" translate="yes" xml:space="preserve">
          <source>Also, because PHP supports indexing into &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s via offsets using the same syntax as &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; indexing, the following example holds true for all PHP versions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8c9286a520d98ea631325d9ce4b73b5d684792" translate="yes" xml:space="preserve">
          <source>Also, if the first character in a range has a higher ASCII value than the second character in the range, no range will be constructed. Only the start, end and period characters will be escaped. Use the &lt;a href=&quot;function.ord&quot;&gt;ord()&lt;/a&gt; function to find the ASCII value for a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5426724c044df82da4b1813947ebd4c0b28c738d" translate="yes" xml:space="preserve">
          <source>Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by &lt;a href=&quot;function.strtotime&quot;&gt;strtotime()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd533379e17bd356b86a46159512d47af9efd694" translate="yes" xml:space="preserve">
          <source>Alternate era.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b04c7a5831dedb851aed975f051c1cac400682e" translate="yes" xml:space="preserve">
          <source>Alternation</source>
          <target state="translated">Alternation</target>
        </trans-unit>
        <trans-unit id="c8b41f01c6b354fd40cae41aa8484ce35de8158e" translate="yes" xml:space="preserve">
          <source>Alternation &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38681d9e5f5a7349803babaecca16e7d63f186" translate="yes" xml:space="preserve">
          <source>Alternative syntax for control structures &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce261518063e29de742c6b2e92744bbe827ae790" translate="yes" xml:space="preserve">
          <source>Alternatively, to avoid using &lt;a href=&quot;function.substr&quot;&gt;substr()&lt;/a&gt;, use the &lt;em&gt;\G&lt;/em&gt; assertion rather than the &lt;em&gt;^&lt;/em&gt; anchor, or the &lt;em&gt;A&lt;/em&gt; modifier instead, both of which work with the &lt;code&gt;offset&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8e4bc92a6dec2cc64332312f8e4d112b1ffa14" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;a href=&quot;control-structures.foreach&quot;&gt;foreach&lt;/a&gt;, which is a much more convenient way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf2c61332fbc90895c25138b6201173a311a5fb" translate="yes" xml:space="preserve">
          <source>Alternatives to this function include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae862672b3ff1d1211910fcb7fcdad5a8effd5b" translate="yes" xml:space="preserve">
          <source>Alters the last chunk of memory in the buffer, or adds a new chunk, such that the buffer is now large enough to contain &lt;code&gt;len&lt;/code&gt; bytes without any further allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52ffe61af9d7866d55eb31e4c59aada8ee3bb4e" translate="yes" xml:space="preserve">
          <source>Although &lt;a href=&quot;function.implode&quot;&gt;implode()&lt;/a&gt; can, for historical reasons, accept its parameters in either order, &lt;strong&gt;explode()&lt;/strong&gt; cannot. You must ensure that the &lt;code&gt;delimiter&lt;/code&gt; argument comes before the &lt;code&gt;string&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8459b0d6efb7d834bb32a35bdc5a24809ad76bad" translate="yes" xml:space="preserve">
          <source>Although &lt;em&gt;=&lt;/em&gt; has a lower precedence than most other operators, PHP will still allow expressions similar to the following: &lt;em&gt;if (!$a = foo())&lt;/em&gt;, in which case the return value of &lt;em&gt;foo()&lt;/em&gt; is put into &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328daecc99096bbfe0d6ddad75ed47558e2b103e" translate="yes" xml:space="preserve">
          <source>Although &lt;em&gt;instanceof&lt;/em&gt; is usually used with a literal classname, it can also be used with another object or a string variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f28fe9af4df520f9b23dee48d796c4e430b976" translate="yes" xml:space="preserve">
          <source>Although any valid PHP code can be contained within a namespace, only the following types of code are affected by namespaces: classes (including abstracts and traits), interfaces, functions and constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4439c04a5a676af57d4d28664dfd0552091e3692" translate="yes" xml:space="preserve">
          <source>Although current session module does not accept empty session ID cookie, but immediate session deletion may result in empty session ID cookie due to client(browser) side race condition. This will result that the client creates many session ID needlessly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174642bfdba4b4bc52c218eba3893992d992d54d" translate="yes" xml:space="preserve">
          <source>Although it is always good practice to free the memory used by the result of a query using the &lt;a href=&quot;mysqli-result.free&quot;&gt;mysqli_free_result()&lt;/a&gt; function, when transferring large result sets using the &lt;strong&gt;mysqli_store_result()&lt;/strong&gt; this becomes particularly important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4cf1263e55d3044d082930f181f14deb31a45" translate="yes" xml:space="preserve">
          <source>Although lookbehind assertions must match fixed length strings, each alternative branch of a lookbehind assertion can match a different length of string. Perl 5.005 requires them all to have the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a14493d352a5f14463787d0d15c2bb56dbbb7e2" translate="yes" xml:space="preserve">
          <source>Although not exhaustive, the possible return values include &lt;em&gt;aolserver&lt;/em&gt;, &lt;em&gt;apache&lt;/em&gt;, &lt;em&gt;apache2filter&lt;/em&gt;, &lt;em&gt;apache2handler&lt;/em&gt;, &lt;em&gt;caudium&lt;/em&gt;, &lt;em&gt;cgi&lt;/em&gt; (until PHP 5.3), &lt;em&gt;cgi-fcgi&lt;/em&gt;, &lt;em&gt;cli&lt;/em&gt;, &lt;em&gt;cli-server&lt;/em&gt;, &lt;em&gt;continuity&lt;/em&gt;, &lt;em&gt;embed&lt;/em&gt;, &lt;em&gt;fpm-fcgi&lt;/em&gt;, &lt;em&gt;isapi&lt;/em&gt;, &lt;em&gt;litespeed&lt;/em&gt;, &lt;em&gt;milter&lt;/em&gt;, &lt;em&gt;nsapi&lt;/em&gt;, &lt;em&gt;phttpd&lt;/em&gt;, &lt;em&gt;pi3web&lt;/em&gt;, &lt;em&gt;roxen&lt;/em&gt;, &lt;em&gt;thttpd&lt;/em&gt;, &lt;em&gt;tux&lt;/em&gt;, and &lt;em&gt;webjames&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c59747b9060924e9b560ec8d3ca7d81eb4d0d85" translate="yes" xml:space="preserve">
          <source>Although technically unnecessary, the &lt;strong&gt;Phar::startBuffering()&lt;/strong&gt; method can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd458b2a11c2597834008a825f60b2e6b40c933" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;function.autoload&quot;&gt;__autoload()&lt;/a&gt; function can also be used for autoloading classes and interfaces, it's preferred to use the &lt;a href=&quot;function.spl-autoload-register&quot;&gt;spl_autoload_register()&lt;/a&gt; function. This is because it is a more flexible alternative (enabling for any number of autoloaders to be specified in the application, such as in third party libraries). For this reason, using &lt;a href=&quot;function.autoload&quot;&gt;__autoload()&lt;/a&gt; is discouraged and it may be deprecated in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97861c2dee87d28569238233b82d620ce338da60" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;mysqli.construct&quot;&gt;mysqli::__construct()&lt;/a&gt; documentation also includes procedural examples that use the &lt;strong&gt;mysqli_connect()&lt;/strong&gt; function, here is a short example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a274a8c66dbcb9871e8cc0e429334bbd922384" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;prefix&lt;/code&gt; parameter is optional, you will get an &lt;a href=&quot;function.import-request-variables&quot;&gt;&lt;strong&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; level error if you specify no prefix, or specify an empty string as a prefix. This is a possible security hazard. Notice level errors are not displayed using the default &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot;&gt;error reporting&lt;/a&gt; level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6799597189d07d62bfcd29633770503b9d8a504d" translate="yes" xml:space="preserve">
          <source>Although the error messages generated by the socket extension are in English, the system messages retrieved with this function will appear depending on the current locale (&lt;strong&gt;&lt;code&gt;LC_MESSAGES&lt;/code&gt;&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90ecff5a34668d4663563ed6631ae8bc5fea8fe" translate="yes" xml:space="preserve">
          <source>Although the user can send multiple queries at once, multiple queries cannot be sent over a busy connection. If a query is sent while the connection is busy, it waits until the last query is finished and discards all its results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1439291ad6cf398d13cc522d5233f956549324a" translate="yes" xml:space="preserve">
          <source>Although this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt;default_charset&lt;/a&gt; configuration option may be set incorrectly for the given input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d91243642d77d2340ab080b9aca980ab7b82430" translate="yes" xml:space="preserve">
          <source>Although this function can handle dates all the way back to 4713 B.C., such use may not be meaningful. The calendar was created in 46 B.C., but the details did not stabilize until at least 8 A.D., and perhaps as late at the 4th century. Also, the beginning of a year varied from one culture to another - not all accepted January as the first month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d41ba7990979982f4abd78f08ad365b77c55db" translate="yes" xml:space="preserve">
          <source>Although this function can handle dates all the way back to 4714 B.C., such use may not be meaningful. The Gregorian calendar was not instituted until October 15, 1582 (or October 5, 1582 in the Julian calendar). Some countries did not accept it until much later. For example, Britain converted in 1752, The USSR in 1918 and Greece in 1923. Most European countries used the Julian calendar prior to the Gregorian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d177485e3f81e3fada2c3b5b32828309b7c3475" translate="yes" xml:space="preserve">
          <source>Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938002936618e26cd8c9131a6a8eb10b50db7626" translate="yes" xml:space="preserve">
          <source>Always consider using non-blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e2f78934f26245d9b1728e948f1d06eb1a834f" translate="yes" xml:space="preserve">
          <source>Always return &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3eae6cdbae6c6ec9f98a824c663cfcc8ec576b0" translate="yes" xml:space="preserve">
          <source>Always returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; because the magic quotes feature was removed from PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6aba494fabb6bd09459eb9ccee16e483304c39" translate="yes" xml:space="preserve">
          <source>Always returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83741594ceed024b28b9861f8aa23624c01812e5" translate="yes" xml:space="preserve">
          <source>Always returns false for &lt;a href=&quot;class.yaf-request-simple&quot;&gt;Yaf_Request_Simple&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f202ba5286bdaf65c4d80bceb3209d0805f893e" translate="yes" xml:space="preserve">
          <source>Always returns the line number where the node was defined in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03eb017786b8c0931f5571b1e8da71adfc340c55" translate="yes" xml:space="preserve">
          <source>Always show decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e61ebdbc3538f4ac01a9f10ef1c476eb5a125c" translate="yes" xml:space="preserve">
          <source>Always use quotes around a string literal array index. For example, &lt;em&gt;$foo['bar']&lt;/em&gt; is correct, while &lt;em&gt;$foo[bar]&lt;/em&gt; is not. But why? It is common to encounter this kind of syntax in old scripts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b907738313d4deeb8d4f526822c853785a34bb" translate="yes" xml:space="preserve">
          <source>Ambiguity match on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d6d11df887dc2a76c8792ed282aa23cae757fd" translate="yes" xml:space="preserve">
          <source>America time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10643b6b2777b52c5de77c5f870da95df0b6cc4a" translate="yes" xml:space="preserve">
          <source>Amount of matches to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e44cea66868f7cdcc03a262d72f761fa9fa0ef" translate="yes" xml:space="preserve">
          <source>Amount of slop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99690d58d4abd10cd0938a7adcb56ded08ef66ad" translate="yes" xml:space="preserve">
          <source>An</source>
          <target state="translated">An</target>
        </trans-unit>
        <trans-unit id="617b60b282f94dbf78aa74e92f6b8840fca768f0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.apciterator&quot;&gt;APCIterator&lt;/a&gt;&lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; on success, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38a7ca9e835c2d34b20a2b2e0a4c4f9bb47464f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.apcuiterator&quot;&gt;APCUIterator&lt;/a&gt;&lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; on success, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1d03d57954505171ccbed1c9c1d816c2a811a3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.arrayiterator&quot;&gt;ArrayIterator&lt;/a&gt;&lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77330f61bca6e11222f3b0c81bd704a4b3f7944a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.imagickpixel&quot;&gt;ImagickPixel&lt;/a&gt; object or string representing the border color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec9057bb0fda21532aa3b5ca3c10431e0e72958" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object is allowed for &lt;code&gt;calendar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534af4087fd4d460fddee53a148636e5f945f974" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.intltimezone&quot;&gt;IntlTimeZone&lt;/a&gt; object corresponding to the one used internally in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a377a2e69f1bad3fb3412fd1b2f77b0769118b8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.intltimezone&quot;&gt;IntlTimeZone&lt;/a&gt;, which will be used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59a64cd7d9e449274922e9980008ed22638fd4e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.invalidargumentexception&quot;&gt;InvalidArgumentException&lt;/a&gt; will be thrown if the current entry does not contain a value that can be iterated over by the inner iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3fd118b1f5fd6f5b05ccc2ec18a7758d957440" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.invalidargumentexception&quot;&gt;InvalidArgumentException&lt;/a&gt; will be thrown if the current entry does not contain an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; or an &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4532483613e991fbb9f56d4944b275841628c6a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.oauthprovider&quot;&gt;OAuthProvider&lt;/a&gt;&lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5195339d159168f73ca4cf399fa7b56d9af15c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.splfileinfo&quot;&gt;SplFileInfo&lt;/a&gt; object created for the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3065941d78d30be1a98580595579a33132b6ecf5" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.splfileobject&quot;&gt;SplFileObject&lt;/a&gt; does not have children so this method always return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da0a88a7aaab7b8c67c11b415aac00f6d884834" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.splfileobject&quot;&gt;SplFileObject&lt;/a&gt; does not have children so this method returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020a1f55e08a94adacecd88ca8f8da60b7b92789" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;class.yaf-config-abstract&quot;&gt;Yaf_Config_Abstract&lt;/a&gt; instance, which should contains one or more valid route configs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad9d3179533e779b40d836cb4148a2190d5bec4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://www.asciitable.com&quot;&gt;&amp;raquo; ASCII-table&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6161c6c9906d910f4f3fb3f8903d30d35d235cc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; being sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76e952c98849eada9f2833ac3e42b7b9c1cefd8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; can be created using the &lt;a href=&quot;function.array&quot;&gt;array()&lt;/a&gt; language construct. It takes any number of comma-separated &lt;em&gt;key =&amp;gt; value&lt;/em&gt; pairs as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228eaad6b0f7650bafbab4fe8b8ff36ccdc9aa84" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing a list of language tags to compare to &lt;code&gt;locale&lt;/code&gt;. Maximum 100 items allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1e4af49435b3d72403c34ec02b132027da2ec1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5b2088385a801fe5d084cdbb2ff63bce4a44b3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915b967221476fa6331453940cdac6d484d853b0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4a2142de54590d10a66a01765e217e2067b111" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64164aef488891a60050ca13768643382ecb0944" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6850194877c60acbca679e12e9b662ceac7098af" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fa8fe0580036d7609492a72b897be37d894df1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bcf5dc63a3570ce6d171b78ce48c03a0cc9e7a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values in the same order as the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e049e6b9d2b0f28b10cf6c575c370f1098aefe" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing decoded and character encoded converted values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dc8c3511f7a3c63f3bef954893ff00d5a3f93e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing items extracted, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9583d89cda29da46ec889ce04bebacf14cc0e46e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the &lt;em&gt;NOTIFY&lt;/em&gt; message name and backend PID. As of PHP 5.4.0 and if supported by the server, the array also contains the server version and the payload. Otherwise if no &lt;em&gt;NOTIFY&lt;/em&gt; is waiting, then &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dde5b88ac643047c1006557fd9af884ad182e5" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the cache items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7757cfc0d51069bbb210499f9783960c78f92d0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the current values of each attached iterator, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if no iterators are attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e320f95c42b8bde47036b72189721722f167fa" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the elements of the &lt;code&gt;iterator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947af3d61d7ff3b3bddcf210a64265a893cd3a19" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the items extracted, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50611cdad90316e6fd6a90f222858e7f7feea162" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing two elements. The first element is the offset, in bytes, where the match begins relative to the start of the search string, and the second element is the length in bytes of the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a78ed3ddaebcec8160c1d6afd1200899e5364a1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; in PHP is actually an ordered map. A map is a type that associates &lt;em&gt;values&lt;/em&gt; to &lt;em&gt;keys&lt;/em&gt;. This type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more. As &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; values can be other &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;s, trees and multidimensional &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;s are also possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee704f161e54b377e0e3a9cb1578d1bafba515fa" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; including the sub-string of matched part by last &lt;a href=&quot;function.mb-ereg-search&quot;&gt;mb_ereg_search()&lt;/a&gt;, &lt;a href=&quot;function.mb-ereg-search-pos&quot;&gt;mb_ereg_search_pos()&lt;/a&gt;, &lt;a href=&quot;function.mb-ereg-search-regs&quot;&gt;mb_ereg_search_regs()&lt;/a&gt;. If there are some matches, the first element will have the matched sub-string, the second element will have the first part grouped with brackets, the third element will have the second part grouped with brackets, and so on. It returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ff9d29de4d163a3846051c7bf43571c902c300" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; indexed associatively (by field name). Each value in the &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is represented as a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;. Database &lt;em&gt;NULL&lt;/em&gt; values are returned as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974a453ebcc3a12464d10ddac36199c864ece208" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; indexed numerically (beginning with 0) or associatively (indexed by field name), or both. Each value in the &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is represented as a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;. Database &lt;em&gt;NULL&lt;/em&gt; values are returned as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1761873630237e3318037c8763397211b08795" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of &lt;a href=&quot;class.reflectionmethod&quot;&gt;ReflectionMethod&lt;/a&gt; objects reflecting each method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f1ebeed7da01e2da88d20983aa0f67d3f79a8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of &lt;a href=&quot;class.solrinputdocument&quot;&gt;SolrInputDocument&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81983d10b0a91e708cb1152ec0b47559aa3f54b4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s can be provided, in which case the replacements will occur on each string in turn. In this case, the &lt;code&gt;replacement&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters may be provided either as scalar values to be applied to each input string in turn, or as &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;s, in which case the corresponding array element will be used for each input string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c102cf75c2e8a4bbf4eb779b45f9d8a4573e5f59" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s, one for which locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad00403fedc7dacd5087e114d119af7aea9726b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of Certificate Authority information, specifically as &lt;em&gt;ca_path&lt;/em&gt; and &lt;em&gt;ca_info&lt;/em&gt; keys within the returned associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253f789069c0c92e24d06555c680d00f3b99ced2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of GMP numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfb52de6077c677863a71ba92fb941d6a08e7ee" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of all registered __autoload functions. If the autoload queue is not activated then the return value is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. If no function is registered the return value will be an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bb7520c99a4385c2bc3b192c7516ad6266202e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of all registered iterator instances, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if no sub iterator is attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10b038a5e5eaaaae269925a887eea17483c601e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of arguments; each element of &lt;code&gt;args&lt;/code&gt; is passed to the callback &lt;code&gt;function&lt;/code&gt; as separate argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96779a5a8b5feb59d3d6dc2131670f0604331d4e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of available cipher methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453361b8265a0b8e9baa14cbed76cd24df9a9576" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of available curve names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8bbdecfd1888b17953a628baa29e04fde8798d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of available digest methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf46eeacda8dfd757a6f6d52d24c77a722adf16" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of class names, as defined in the extension. If no classes are defined, an empty array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83c630d6a5c1164455113b63749053ead948bee" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of collected information on success, and &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure. The returned array contains the following elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731e099d4e3b33f09407f5ae3a09a9c14ffc0c09" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of constants, where the keys hold the name and the values the value of the constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3d690075f80699789631d71ae01d0e53021dc3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of converted values, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40d43f255fadb28b5e7837b3182c9d0fc46bfb0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of data to be copied into &lt;code&gt;table_name&lt;/code&gt;. Each value in &lt;code&gt;rows&lt;/code&gt; becomes a row in &lt;code&gt;table_name&lt;/code&gt;. Each value in &lt;code&gt;rows&lt;/code&gt; should be a delimited string of the values to insert into each field. Values should be linefeed terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd445ed5e19240795a6cb9cc051249c915f94cc1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of default properties, with the key being the name of the property and the value being the default value of the property or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the property doesn't have a default value. The function does not distinguish between static and non static properties and does not take visibility modifiers into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cdcb1f9eaa36f181d7927123ed24b75e085ee0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of loaded Apache modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38c1700b33b0e52c36dcc07c92a31aa0d066bb8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of registered transliterator IDs on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd860fc4822ffb56b70316b362c2bf2ddc4cc296" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of static variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4243efd5cf17c304bad0b6893ff494339a1c060" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of the table definition, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68005fb1678a416add3343ded4e3421a1e7f9ec4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of type information if &lt;code&gt;type&lt;/code&gt; is not specified, otherwise a specific &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc8e6e1888904a8a430d8140aa6f02fc5b60523" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; specifying which options to set and their values. The keys should be valid &lt;a href=&quot;function.curl-setopt&quot;&gt;curl_setopt()&lt;/a&gt; constants or their integer equivalents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e59980afc964322df122aa648a3332bc04ab5c4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; whose keys are field names in the table &lt;code&gt;table_name&lt;/code&gt;, and whose values are the conditions that a row must meet to be retrieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb078df6ea628f7181e1e9f70f8e48337b24f56" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; whose keys are field names in the table &lt;code&gt;table_name&lt;/code&gt;, and whose values are the conditions that a row must meet to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7783febadd368f4334285a29662120cdea438e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; whose keys are field names in the table &lt;code&gt;table_name&lt;/code&gt;, and whose values are the values of those fields that are to be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa2b1d6c915c14e0e9d77abe894199901917af4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; whose keys are field names in the table &lt;code&gt;table_name&lt;/code&gt;, and whose values are the values of those fields that are to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb8383a3ea08a58da675bb35656efb457e37bb2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; whose keys are field names in the table &lt;code&gt;table_name&lt;/code&gt;, and whose values are what matched rows are to be updated to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df312cf67b1115a548c309e2f9c5959fd8a301e5" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; will treat all numeric keys as integers, eg. &lt;code&gt;&quot;1&quot;&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; as keys in the map will only result in &lt;code&gt;1&lt;/code&gt; being included in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d7f6b1a679bc26536a5918fdd1b8d3350ef54d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; with all rows in the result. Each row is an array of field values indexed by field name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88d0eb9303f1682a03758953751062086226bdc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; with all values in the result column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ce0a66173e4066eb7eda33edb6c7cff252b431" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; with one element for each line of &lt;em&gt;COPY&lt;/em&gt; data. It returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea2b19758f1ca90e6be71e932b158e7ba171da9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;, indexed from 0 upwards, with each value represented as a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;. Database &lt;em&gt;NULL&lt;/em&gt; values are returned as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db84f88ec968677baca26fe824f48b2102a7485" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; containing the port number of the database server the &lt;code&gt;connection&lt;/code&gt; is to, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2354ae60324041910fe0c16ca01c0446cdb25dac" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing a field value in the fieldʼs unit or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f40efb688fdeb54e3c7cd9c8f322df6e6b4686" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing a field value, in the fieldʼs unit, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e83c4275944d553df1bc200d433d3530b8bacb" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing a number of days or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66f04ffb091051bf7037654d41acc495f8758a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing a value for the given field in the fieldʼs unit or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586e15614521ce9b1797a68bef0948f318703169" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing the maximum value in the units associated with the given &lt;code&gt;field&lt;/code&gt; or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde901932919fdd05045663568e06df766a4fb4b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt; representing the minimum value in the fieldʼs unit or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc4c0d4fe7aa2f8d5f434425233870123b19dc3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; indicating the total number of open links in any state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a62d3e181d251d73ec556890d27e1aed237d20" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; is a number of the set ℤ = {..., -2, -1, 0, 1, 2, ...}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e9825afa519f0e3ba2c82bd53f2f8f5ae3bbb1" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; less than, equal to, or greater than zero when &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; is respectively less than, equal to, or greater than &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt;. Available as of PHP 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a6f96c86115ccba1e2594f3e509e69e3b23529" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; or &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; is converted to a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; representing the number textually (including the exponent part for &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;s). Floating point numbers can be converted using exponential notation (&lt;em&gt;4.1E+6&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d9b8e2f3f0ac1b6e49fdbec5121d7f48ad98e3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; representing the number of active persistent connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171ebe3b734fdedbf4042a43ff0dfd816b07b6c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; representing the number of inactive persistent connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6041dc789f6a91a246ce5d037a5eea45180086" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; of related URI information. The properties of this &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb1e3d1d443c507fd1d97255ffb39b2ea72d616" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; with one attribute for each field name in the result. Database &lt;em&gt;NULL&lt;/em&gt; values are returned as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acde0eaa8bdba7e8dd27899cb4ed981d49a365a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8f610a9a9479ac50f74d57ba394f2ed9d31f4f" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;array&lt;/em&gt; of the defined functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118ded83898d54ce17121a4e586569a6ff05a8a2" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is generated if &lt;code&gt;filename&lt;/code&gt; cannot be found, &lt;code&gt;maxlength&lt;/code&gt; is less than zero, or if seeking to the specified &lt;code&gt;offset&lt;/code&gt; in the stream fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0bde60fedb804d6f0975c088c04db735bcf5a0" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is generated if the constant is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1e4bed69f37ca1239d1c957cc515b9f6dbe97f" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is issued if the &lt;code&gt;delimiter&lt;/code&gt; or &lt;code&gt;enclosure&lt;/code&gt; parameter is not a single character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e12779ff36385b55d3f8fad79b0e5701bbc38f" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is issued when &lt;code&gt;index&lt;/code&gt; is less than zero, and &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73edc31da740cc89dee4a20d458a2be084421d81" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; will be generated if the operating system is unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865508fb0db41a4de2c1289e25a20f378b210bdf" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; will be raised if &lt;code&gt;ikm&lt;/code&gt; is empty, &lt;code&gt;algo&lt;/code&gt; is unknown/non-cryptographic, &lt;code&gt;length&lt;/code&gt; is less than &lt;em&gt;0&lt;/em&gt; or too large (greater than 255 times the size of the hash function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38c04d231a1204a5d539114ccd7c363689bf407" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; will be raised if the algorithm is unknown, the &lt;code&gt;iterations&lt;/code&gt; parameter is less than or equal to &lt;em&gt;0&lt;/em&gt;, the &lt;code&gt;length&lt;/code&gt; is less than &lt;em&gt;0&lt;/em&gt; or the &lt;code&gt;salt&lt;/code&gt; is too long (greater than &lt;strong&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;/strong&gt;&lt;em&gt; - 4&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a4346933e44a8614041c0e4097dafa1e193b96" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;IllegalValueException&lt;/strong&gt; if the &lt;code&gt;iterator&lt;/code&gt; parameter is invalid, or if &lt;code&gt;infos&lt;/code&gt; is already associated information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29603fbe71b1860f687bbdcf449a4d168f7ba171" translate="yes" xml:space="preserve">
          <source>An Error Exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef74cd3b08a5712825f9c4f44e03437650790ae" translate="yes" xml:space="preserve">
          <source>An HTML node in an HTML file, as detected by tidy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf520b181dbf12c6388a833356ea9c16d88d48c" translate="yes" xml:space="preserve">
          <source>An ICU error code indicating either success, failure or a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6859309e4b0f22e6fe1d232f52515683447e57" translate="yes" xml:space="preserve">
          <source>An IMAP stream returned by &lt;a href=&quot;function.imap-open&quot;&gt;imap_open()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d552c58c2ea11b36d9030342a4e54a1eefae09" translate="yes" xml:space="preserve">
          <source>An ISO 8601 repeating interval specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dad3c1a7130cd9b6abca9c9d10486badfd55a5f" translate="yes" xml:space="preserve">
          <source>An ISO-8859-1 string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e661479eb692ef0dc42e74ade49e62db36743a65" translate="yes" xml:space="preserve">
          <source>An Imagick object containing the replacement colors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6a8de84c3e41fd058633e50abd501837898883" translate="yes" xml:space="preserve">
          <source>An ImagickPixel object or a string representing the fill color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafb61692896292f2d3fd8021012d60dd3abb4aa" translate="yes" xml:space="preserve">
          <source>An InterBase link identifier returned from &lt;a href=&quot;function.ibase-connect&quot;&gt;ibase_connect()&lt;/a&gt;. If omitted, the last opened link is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d428a42e8b311bb4bb7e1f004d13e091c48571b" translate="yes" xml:space="preserve">
          <source>An InterBase link identifier. If omitted, the last opened link is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d83847b9541e9a405debca89ea83ba426ef232" translate="yes" xml:space="preserve">
          <source>An InterBase prepared query handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75dbf87404054466c891c56bd4865b426a48e4c2" translate="yes" xml:space="preserve">
          <source>An InterBase query prepared by &lt;a href=&quot;function.ibase-prepare&quot;&gt;ibase_prepare()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69819f2b92b2bbde0d36dc7a6d40bcaa680517df" translate="yes" xml:space="preserve">
          <source>An InterBase query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c11282641aabf96894836802bee82dbc5f47857" translate="yes" xml:space="preserve">
          <source>An InterBase result identifier obtained either by &lt;a href=&quot;function.ibase-query&quot;&gt;ibase_query()&lt;/a&gt; or &lt;a href=&quot;function.ibase-execute&quot;&gt;ibase_execute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a577c5d71d87d1a08d5a83b0103163e8d668fff6" translate="yes" xml:space="preserve">
          <source>An InterBase result identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa1ad4121f58ebf97c546c91dc9249f354303d1" translate="yes" xml:space="preserve">
          <source>An InterBase result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277f271559a2dc9f9e990c486ac55cf473828476" translate="yes" xml:space="preserve">
          <source>An InterBase transaction handle the query should be associated with. If omitted, the default transaction of the connection is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83de1530deb3f42108efaf6ad5f2039d05d6642f" translate="yes" xml:space="preserve">
          <source>An Iterator that iterates over several iterators one after the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c476b35c5217cdf8401f5083f7d26b0f372ec178" translate="yes" xml:space="preserve">
          <source>An Iterator that sequentially iterates over all attached iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48e0e61ca629088fceff0241a0e19088610a8f9" translate="yes" xml:space="preserve">
          <source>An LDAP link identifier, returned by &lt;a href=&quot;function.ldap-connect&quot;&gt;ldap_connect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cdffe6a929a99bbcc981aaaab3eb37f3583062" translate="yes" xml:space="preserve">
          <source>An LDAP result resource, returned by &lt;a href=&quot;function.ldap-exop&quot;&gt;ldap_exop()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6818e0292e453a2e208725168918a9bc4ba02cc9" translate="yes" xml:space="preserve">
          <source>An LDAP result resource, returned by &lt;a href=&quot;function.ldap-list&quot;&gt;ldap_list()&lt;/a&gt; or &lt;a href=&quot;function.ldap-search&quot;&gt;ldap_search()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b677f62c93010fc259ba7c3f07c245cb658d54" translate="yes" xml:space="preserve">
          <source>An ODBC result identifier or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958860fd36e79d3bdd3a34e479730df6faa856b7" translate="yes" xml:space="preserve">
          <source>An Object, all public methods of its will be registered as RPC services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861080acd1043d80971561ef9881191fb288d154" translate="yes" xml:space="preserve">
          <source>An SSH connection link identifier, obtained from a call to &lt;a href=&quot;function.ssh2-connect&quot;&gt;ssh2_connect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc325fe04ce6c047c28090b3e944d959d8be3b2" translate="yes" xml:space="preserve">
          <source>An SSH2 SFTP resource opened by &lt;a href=&quot;function.ssh2-sftp&quot;&gt;ssh2_sftp()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd88ebe08caf1d7dc1cd6b569ae68409add57d68" translate="yes" xml:space="preserve">
          <source>An SSH2 channel stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc44df0d15fa27d5d534a6454f968741d308108" translate="yes" xml:space="preserve">
          <source>An XML representation of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96546281bb6fd8cac208a5f832715b7703fb6d3d" translate="yes" xml:space="preserve">
          <source>An XML string with the raw request to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a52eed1669c8da91ac6df26998a3a62787987a7" translate="yes" xml:space="preserve">
          <source>An XPath path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad603d7d3e5518cc807a88d956edd386619666" translate="yes" xml:space="preserve">
          <source>An abbreviated textual representation of the day</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad0b091ec7536dcc6fa3f9a66ee4aa24483e522" translate="yes" xml:space="preserve">
          <source>An absolute or relative path to the target service or service description (e.g. a URL to a json-rpc service description, a PHP component, a WSDL file, and so on.). A relative path, if specified, is resolved relative to the location of the script issuing the &lt;strong&gt;getService()&lt;/strong&gt; call, and not against the include_path or current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697f1ccb0440b9ef20aa92f19b7cdbf00642a9f7" translate="yes" xml:space="preserve">
          <source>An added benefit here is that you can repeat the placeholders without adding more arguments in the code. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aefd3a2ec59ca29555975a2eb1a07c1f0afe3af" translate="yes" xml:space="preserve">
          <source>An affine transformation matrix (an array with keys &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;5&lt;/em&gt; and float values) or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db276c7c7632814e2c1b8eb212f416f2d9460f5" translate="yes" xml:space="preserve">
          <source>An affine transformation matrix (an array with keys &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;5&lt;/em&gt; and float values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea1faafb3d6842c193d252bafbd01b93c4ca3e7" translate="yes" xml:space="preserve">
          <source>An alias of &lt;strong&gt;&lt;code&gt;CURLOPT_TRANSFERTEXT&lt;/code&gt;&lt;/strong&gt;. Use that instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9ed0b9f7570075cb9ba9d00a62eb781b126761" translate="yes" xml:space="preserve">
          <source>An alias of SolrParams::setParam</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b277bbcadda661bdc4acf6ded38ebd4c471eae73" translate="yes" xml:space="preserve">
          <source>An alphanumeric username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a954e9d1a777f3530d50c8cc1016f12452336b" translate="yes" xml:space="preserve">
          <source>An alternative description is that a subpattern of this type matches the string of characters that an identical standalone pattern would match, if anchored at the current point in the subject string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61bd7879f36c4ee2ec859c79213d13ccd9dd421" translate="yes" xml:space="preserve">
          <source>An alternative location to output errors to instead of &lt;em&gt;STDERR&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493f1534379e99988b0badd85d78b992e754d241" translate="yes" xml:space="preserve">
          <source>An alternative port number to connect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84df0028752b9426c639981f2119028b6ca224e" translate="yes" xml:space="preserve">
          <source>An alternative syntax expecting a &lt;code&gt;closure&lt;/code&gt; has been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7138dcae086ea80fbad485bd2dd3090319bc8928" translate="yes" xml:space="preserve">
          <source>An alternative to using raw &lt;strong&gt;pg_put_line()&lt;/strong&gt; commands is to use &lt;a href=&quot;function.pg-copy-from&quot;&gt;pg_copy_from()&lt;/a&gt;. This is a far simpler interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69df26038fbbfae6ee43db047c46060ef400a70a" translate="yes" xml:space="preserve">
          <source>An angle in radians</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25fd75cbcc15efffea386dda95af00efebf2fd4" translate="yes" xml:space="preserve">
          <source>An arbitrary &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; seed value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abff0a426756ae0a27538bcb74f0111f984eae3" translate="yes" xml:space="preserve">
          <source>An argument that will be passed to each of the callbacks (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920acec58806324e1ad1671a2a1bd4b12d618734" translate="yes" xml:space="preserve">
          <source>An array containing keys to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54acb0ccee164e0a1ff8a5aa8ce77f7c516f9e60" translate="yes" xml:space="preserve">
          <source>An array containing pointers to the location of the appropriate values in the $values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cbc164c2773663861ce5e76a6f24defbd838c0" translate="yes" xml:space="preserve">
          <source>An array containing status information for the job corresponding to the supplied job handle. The first array element is a boolean indicating whether the job is even known, the second is a boolean indicating whether the job is still running, and the third and fourth elements correspond to the numerator and denominator of the fractional completion percentage, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f24129e64b78e34e0e42f0f51730983d793016c" translate="yes" xml:space="preserve">
          <source>An array containing the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates of the polygons vertices consecutively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fa55d82902e9a7263b9fac925c92efcc7427e2" translate="yes" xml:space="preserve">
          <source>An array containing the Unicode version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b2ca9eb8329809b238b8dc16d4eff2edf82e15" translate="yes" xml:space="preserve">
          <source>An array containing the collection of SolrInputDocument instances. This array must be an actual variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1347fd8bd0a67c219796d78ed4b7c8759ad8fd" translate="yes" xml:space="preserve">
          <source>An array containing the coordinates. The array is in format &lt;em&gt;array(1,1, 2,45)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e59fa31779c6dc121bdabae2b264aa984c5a87" translate="yes" xml:space="preserve">
          <source>An array containing the file, one line per cell, empty lines included, and with newlines still attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66b9eb5b910dde5377b81462ce6503d2e5e722f" translate="yes" xml:space="preserve">
          <source>An array containing the key/values from the registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f11b3031f0f0ea2902d7e112ebea0b66b8c805d" translate="yes" xml:space="preserve">
          <source>An array containing the polygon's vertices, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc21050de19a6f319ce72adf476014b2db0a2055" translate="yes" xml:space="preserve">
          <source>An array containing the values of the XML data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8021f4028541c5dc37328d5e9574b0c0e274f5f" translate="yes" xml:space="preserve">
          <source>An array containing the values of the requested variables on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure. An array value will be &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the filter fails, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the variable is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba9a5a98ddba0e6aba5fa30b2ca2a1b0baf09d2" translate="yes" xml:space="preserve">
          <source>An array containing the values of the requested variables on success. If the input array designated by &lt;code&gt;type&lt;/code&gt; is not populated, the function returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the &lt;strong&gt;&lt;code&gt;FILTER_NULL_ON_FAILURE&lt;/code&gt;&lt;/strong&gt; flag is not given, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; otherwise. For other failures, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf18ee82320c92bab7e34beb71cf0663b1d419e0" translate="yes" xml:space="preserve">
          <source>An array containing the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed063a242599191d84e5997e54011762a46045c" translate="yes" xml:space="preserve">
          <source>An array defining the arguments. A valid key is a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; containing a variable name and a valid value is either a &lt;a href=&quot;https://secure.php.net/manual/en/filter.filters.php&quot;&gt;filter type&lt;/a&gt;, or an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; optionally specifying the filter, flags and options. If the value is an array, valid keys are &lt;em&gt;filter&lt;/em&gt; which specifies the &lt;a href=&quot;https://secure.php.net/manual/en/filter.filters.php&quot;&gt;filter type&lt;/a&gt;, &lt;em&gt;flags&lt;/em&gt; which specifies any flags that apply to the filter, and &lt;em&gt;options&lt;/em&gt; which specifies any options that apply to the filter. See the example below for a better understanding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a2d2e1751e23bc3600cda04265f371d5ba72c6" translate="yes" xml:space="preserve">
          <source>An array describing the pipe to pass to the process. The first element is the descriptor type and the second element is an option for the given type. Valid types are &lt;em&gt;pipe&lt;/em&gt; (the second element is either &lt;em&gt;r&lt;/em&gt; to pass the read end of the pipe to the process, or &lt;em&gt;w&lt;/em&gt; to pass the write end) and &lt;em&gt;file&lt;/em&gt; (the second element is a filename).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5633902d23168da418edb3d44a609f7335f71d" translate="yes" xml:space="preserve">
          <source>An array mapping additional file extensions to MIME type. If the default mapping is sufficient, pass an empty array. By default, these extensions are mapped to these MIME types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4393923cb37c9091b4662e14bf0d87d1871d6233" translate="yes" xml:space="preserve">
          <source>An array of &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; objects, one for each class within the extension. If no classes are defined, an empty array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce185aa235343b94b0b5e2737f46910622f6e4cb" translate="yes" xml:space="preserve">
          <source>An array of &lt;a href=&quot;class.reflectionclassconstant&quot;&gt;ReflectionClassConstant&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49a66242a58ece4b4fd2a1afcf3b7acc90fa0df" translate="yes" xml:space="preserve">
          <source>An array of &lt;a href=&quot;class.reflectionproperty&quot;&gt;ReflectionProperty&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1e656b30120fd69a8653e87a962b4891108083" translate="yes" xml:space="preserve">
          <source>An array of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267e5c63c1ce05934101bbfc9e7e3966e31f82f0" translate="yes" xml:space="preserve">
          <source>An array of &lt;em&gt;name =&amp;gt; value&lt;/em&gt; pairs. This syntax is available since PHP 5.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94687d76e0eafa73abc5524fedbaada032d5fa09" translate="yes" xml:space="preserve">
          <source>An array of &lt;em&gt;xpath&lt;/em&gt;s to filter the nodes by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3726778129e2807cb45eb2460e705a106f5927ed" translate="yes" xml:space="preserve">
          <source>An array of &lt;strong&gt;tidyNode&lt;/strong&gt;, representing the children of the current node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ebec6b3c9b2d4b9bba7644e4ef6dbe95f75214" translate="yes" xml:space="preserve">
          <source>An array of FTP commands to execute on the server after the FTP request has been performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01954b7f3544d5a6983c855bd49bb071658a6938" translate="yes" xml:space="preserve">
          <source>An array of FTP commands to execute on the server prior to the FTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86aed79264994c7fa57295518d1c6ee0c2ee7412" translate="yes" xml:space="preserve">
          <source>An array of HTTP 200 responses that will be treated as valid responses and not as errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fc2f485f7690f46400710d2176cc3f58084ce6" translate="yes" xml:space="preserve">
          <source>An array of HTTP header fields to set, in the format &lt;code&gt;
             array('Content-type: text/plain', 'Content-length: 100')
            &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26934ee7d159e93b378af91fa530631d0a5defed" translate="yes" xml:space="preserve">
          <source>An array of IDs representing the uniqueKey field declared in the schema for each document to be deleted. This must be an actual php variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebee4177c9fd8cbe7ba9c5ea48b6fec14b7af67" translate="yes" xml:space="preserve">
          <source>An array of all Apache response headers on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a3236a5cf7ce6c3d7f59eeb5bb36323fd1af62" translate="yes" xml:space="preserve">
          <source>An array of arguments to be passed to new workers' constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828193bda81dcf6bae8e9ffad5533618e39e1853" translate="yes" xml:space="preserve">
          <source>An array of channel values, each normalized if &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; is given as param. Throws ImagickPixelException on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25356da5f1bf3f6132d2b43352a9d99b95411eae" translate="yes" xml:space="preserve">
          <source>An array of custom HTTP headers to pass to proxies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69559f74513f9fd83e73fd243374409c1d223863" translate="yes" xml:space="preserve">
          <source>An array of doubles representing the sampling factor for each color component (in RGB order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfea0dda14afc8356fa6b49675176136675500d" translate="yes" xml:space="preserve">
          <source>An array of headers to be sent along with the SOAP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415ab208cb963c0fb844b8f753f5abc8524592a8" translate="yes" xml:space="preserve">
          <source>An array of inotify events or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if no events was pending and &lt;code&gt;inotify_instance&lt;/code&gt; is non-blocking. Each event is an array with the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1eda9f40d0ed4b455bf02af6ed638ddac61b173" translate="yes" xml:space="preserve">
          <source>An array of integers representing the size of each column (not including any terminating null characters). &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050fb5a348441c0e1ab946a38e354bef36e8482f" translate="yes" xml:space="preserve">
          <source>An array of items from the objects property table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf64afa8ab3afa634b577ac0dd7717cbf28353c9" translate="yes" xml:space="preserve">
          <source>An array of key/value pairs to be flipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c675ee06770b3b3aee531e1b987d8aad6f7621f" translate="yes" xml:space="preserve">
          <source>An array of key/value pairs to store on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d042631fc560ebec2376c02af16780609bb3c27c" translate="yes" xml:space="preserve">
          <source>An array of modifier names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862054fe8590a6ff0ce0ae37306950d5fb850eb1" translate="yes" xml:space="preserve">
          <source>An array of namespace prefixes to filter the nodes by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95dacbfae4b4756db28df8ea63257020bc0f74c" translate="yes" xml:space="preserve">
          <source>An array of objects identical in structure to the top-level object, each of which corresponds to a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1927473802a08cb1bcc4a3e4651c629b475af0c0" translate="yes" xml:space="preserve">
          <source>An array of objects where each object has an &lt;em&gt;&quot;attribute&quot;&lt;/em&gt; and a &lt;em&gt;&quot;value&quot;&lt;/em&gt; property corresponding to the parameters on the &lt;em&gt;Content-disposition&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e5b7d4a478bb2dfeeeedfd9f64f1f7a44aa695" translate="yes" xml:space="preserve">
          <source>An array of objects where each object has an &lt;em&gt;&quot;attribute&quot;&lt;/em&gt; and a &lt;em&gt;&quot;value&quot;&lt;/em&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c92abb28f13613ea1b13a111f3cfa2c45dc839" translate="yes" xml:space="preserve">
          <source>An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (&lt;em&gt;--&lt;/em&gt;).  For example, an longopts element &lt;em&gt;&quot;opt&quot;&lt;/em&gt; recognizes an option &lt;em&gt;--opt&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b532603cc48e071864df9cad79e41965050ebf8c" translate="yes" xml:space="preserve">
          <source>An array of options. If working in WSDL mode, this parameter is optional. If working in non-WSDL mode, the &lt;em&gt;location&lt;/em&gt; and &lt;em&gt;uri&lt;/em&gt; options must be set, where &lt;em&gt;location&lt;/em&gt; is the URL of the SOAP server to send the request to, and &lt;em&gt;uri&lt;/em&gt; is the target namespace of the SOAP service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf043a11ee9af69d83f850e0a89d44dffe62fb8" translate="yes" xml:space="preserve">
          <source>An array of parameter values to substitute for the $1, $2, etc. placeholders in the original prepared query string. The number of elements in the array must match the number of placeholders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458da5838afb625f156daad4dc616ac9996d463b" translate="yes" xml:space="preserve">
          <source>An array of parameters to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd5739cdc89edf0f7521fb5de531f8940c0a85d" translate="yes" xml:space="preserve">
          <source>An array of parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643c4312e378abd85b719f310bdd599909b75f7e" translate="yes" xml:space="preserve">
          <source>An array of pixel colors. You can use the &lt;strong&gt;&lt;code&gt;IMG_COLOR_TRANSPARENT&lt;/code&gt;&lt;/strong&gt; constant to add a transparent pixel. Note that &lt;code&gt;style&lt;/code&gt; must not be an empty &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6aa892eb298a181728971b4c665c8ae97bb96e0" translate="yes" xml:space="preserve">
          <source>An array of protocols names supported by cURL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5ee5250070f95bf1e312ccc2ba7ddcdb9e1adb" translate="yes" xml:space="preserve">
          <source>An array of string, representing the attributes names (as keys) of the current node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70582e70f2c1a1146c0e567a64a90327fbbdb2f" translate="yes" xml:space="preserve">
          <source>An array of the arguments to pass to the function. This can be either an ordered or an associative array. Note that most SOAP servers require parameter names to be provided, in which case this must be an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c99364dd3df69306561216d725fa435e63f81c1" translate="yes" xml:space="preserve">
          <source>An array of the required attributes, e.g. &lt;em&gt;array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;)&lt;/em&gt;. Note that the &quot;dn&quot; is always returned irrespective of which attributes types are requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8738274fd6a8e39f2b6453a7e0e02b821023678" translate="yes" xml:space="preserve">
          <source>An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;). Note that the &quot;dn&quot; is always returned irrespective of which attributes types are requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f994f7cdc12eb366fc49dfdb7159fbf36fb1d11" translate="yes" xml:space="preserve">
          <source>An array of token identifiers. Each individual token identifier is either a single character (i.e.: &lt;em&gt;;&lt;/em&gt;, &lt;em&gt;.&lt;/em&gt;, &lt;em&gt;&amp;gt;&lt;/em&gt;, &lt;em&gt;!&lt;/em&gt;, etc...), or a three element array containing the token index in element 0, the string content of the original token in element 1 and the line number in element 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc0aa26d311ada16605eab5c7e9fa8f73d304fc" translate="yes" xml:space="preserve">
          <source>An array of values for this field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82c38edbaea90b53b959c9fdff88593fa7c4d87" translate="yes" xml:space="preserve">
          <source>An array of values resulted from merging the arguments together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e76d4a58d22d6901a93dca767a05ed199f5690" translate="yes" xml:space="preserve">
          <source>An array of values with as many elements as there are bound parameters in the SQL statement being executed. All values are treated as &lt;strong&gt;&lt;code&gt;PDO::PARAM_STR&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04af0019103076b4d7469f967d548aa57575ece" translate="yes" xml:space="preserve">
          <source>An array of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cd9aa2c786c16dfd428412a13c35f91b5a7f60" translate="yes" xml:space="preserve">
          <source>An array on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a501dc6d6c038ded690fe05cfdf0b85364b7ae" translate="yes" xml:space="preserve">
          <source>An array or &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8f80a6463dc6621003e543962adeb2110bbf0a" translate="yes" xml:space="preserve">
          <source>An array representing the percentage completion given as a fraction, with the first element the numerator and the second element the denomintor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0d320f9b2714a9603737fd56a5eb868aa470d2" translate="yes" xml:space="preserve">
          <source>An array specifing query property options. The supported keys are described in the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d77d243e2c2acf47b0200faf9e0e87f69b3efb4" translate="yes" xml:space="preserve">
          <source>An array specifying parameter information when executing a parameterized query. Array elements can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da4688408ae2f3e6d5520cbf14b26453f309088" translate="yes" xml:space="preserve">
          <source>An array that specifies the information about the entry. The values in the entries are indexed by individual attributes. In case of multiple values for an attribute, they are indexed using integers starting with 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f14b64c7fb61f826af8bd5509f6ae2a6ecd12cf" translate="yes" xml:space="preserve">
          <source>An array that specifies the modifications to make. Each entry in this array is an associative array with two or three keys: &lt;em&gt;attrib&lt;/em&gt; maps to the name of the attribute to modify, &lt;em&gt;modtype&lt;/em&gt; maps to the type of modification to perform, and (depending on the type of modification) &lt;em&gt;values&lt;/em&gt; maps to an array of attribute values relevant to the modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb95a938aaa04f5ec703384f754d5a256255fdbe" translate="yes" xml:space="preserve">
          <source>An array to compare against</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2550f2339f3fa9a828c44e554f30621c32f262d5" translate="yes" xml:space="preserve">
          <source>An array to compare keys against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd00e0777b2336131c3c4d38ebf8f0eaf52e33e6" translate="yes" xml:space="preserve">
          <source>An array to compare values against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04f7c55373337f126bf30f5329a1ff1df7398d2" translate="yes" xml:space="preserve">
          <source>An array to run through the &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ba4576414cfa6cb28a6961a1cc049fc7dc4439" translate="yes" xml:space="preserve">
          <source>An array value will be &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the filter fails, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the variable is not set. Or if the flag &lt;strong&gt;&lt;code&gt;FILTER_NULL_ON_FAILURE&lt;/code&gt;&lt;/strong&gt; is used, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the variable is not set and &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the filter fails. If the &lt;code&gt;add_empty&lt;/code&gt; parameter is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, no array element will be added for unset variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd15f69d8f2330b4a794ba362567b309e5fd587d" translate="yes" xml:space="preserve">
          <source>An array whose first element is the length of data read and the second is the data buffer. Returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the read failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453df33e9299e6d6c6b47a945d80b3986d1137f6" translate="yes" xml:space="preserve">
          <source>An array with found document IDs as keys and their weight and attributes values as values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b374ab8d9a5f99315d6131a198896471b2422d17" translate="yes" xml:space="preserve">
          <source>An array with keys to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2be75d6f8d36718d4f4c4cbee01625cc2f4efda" translate="yes" xml:space="preserve">
          <source>An array with string keys containing the data to filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ab5d1328c3cc2aff26c9a24267493e8a886faa" translate="yes" xml:space="preserve">
          <source>An array with the environment variables for the command that will be run, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; to use the same environment as the current PHP process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad411ec2e7753b3668d24f448c239e8ae6df52b" translate="yes" xml:space="preserve">
          <source>An array with this structure: array($value [, $direction [, $phpType [, $sqlType]]])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf51c0f983db396e33a0926397a3949e9685d89" translate="yes" xml:space="preserve">
          <source>An array with words (case-folded and stemmed) as keys and per-word statistics as values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257a35d1cb99a9db8f54f4476ced0e1c04258b46" translate="yes" xml:space="preserve">
          <source>An array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80afcad78bcdfa9d4e3ca169d82b843f6943cf4" translate="yes" xml:space="preserve">
          <source>An artificial delay is introduced in the worker in this example to simulate a long running process. There is only one worker running for this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d215995b64c2ad2296522944faab6c54f4bd2c71" translate="yes" xml:space="preserve">
          <source>An assertion is a test on the characters following or preceding the current matching point that does not actually consume any characters. The simple assertions coded as \b, \B, \A, \Z, \z, ^ and $ are described in &lt;a href=&quot;regexp.reference.escape&quot;&gt;escape sequences&lt;/a&gt;. More complicated assertions are coded as subpatterns. There are two kinds: those that &lt;em&gt;look ahead&lt;/em&gt; of the current position in the subject string, and those that &lt;em&gt;look behind&lt;/em&gt; it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf651add07bd571b39054ee60147f6076f00ba37" translate="yes" xml:space="preserve">
          <source>An assertion subpattern is matched in the normal way, except that it does not cause the current matching position to be changed. &lt;em&gt;Lookahead&lt;/em&gt; assertions start with (?= for positive assertions and (?! for negative assertions. For example, &lt;em&gt;\w+(?=;)&lt;/em&gt; matches a word followed by a semicolon, but does not include the semicolon in the match, and &lt;em&gt;foo(?!bar)&lt;/em&gt; matches any occurrence of &quot;foo&quot; that is not followed by &quot;bar&quot;. Note that the apparently similar pattern &lt;em&gt;(?!foo)bar&lt;/em&gt; does not find an occurrence of &quot;bar&quot; that is preceded by something other than &quot;foo&quot;; it finds any occurrence of &quot;bar&quot; whatsoever, because the assertion (?!foo) is always &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; when the next three characters are &quot;bar&quot;. A lookbehind assertion is needed to achieve this effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd26020fbec5380c4bc081ecbec2e7f462856ec" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing references to all variables which are currently defined in the global scope of the script. The variable names are the keys of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a1d6e2830292a445b46dc87008a29304349a20" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of interfaces, with keys as interface names and the array values as &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d358880bc9abb842d2ebcdb0aedbdd3573c282b3" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of items uploaded to the current script via the HTTP POST method. The structure of this array is outlined in the &lt;a href=&quot;https://secure.php.net/manual/en/features.file-upload.post-method.php&quot;&gt;POST method uploads&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c0bc3a18c8993e29ee02781dbe003d9ed42729" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of variables passed to the current script via HTTP Cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0b50f5208ff79c654b7b700d171359ff3ac0b8" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of variables passed to the current script via the environment method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3729e16fe0a0513fea2ae734f035b0111a2450bf" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; that by default contains the contents of &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.get&quot;&gt;$_GET&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;, &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.post&quot;&gt;$_POST&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.cookies&quot;&gt;$_COOKIE&lt;/a&gt;&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b041cbd722daa84f37703640d4615ac9ac6f75" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; with dependencies as keys and either &lt;em&gt;Required&lt;/em&gt;, &lt;em&gt;Optional&lt;/em&gt; or &lt;em&gt;Conflicts&lt;/em&gt; as the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac541c2d9f3ba05c6ca0aee7537c62d89c4cc468" translate="yes" xml:space="preserve">
          <source>An associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; with the ini entries as keys, with their defined values as values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30753624148d0c39cb6599217d7d0bccd3c7b866" translate="yes" xml:space="preserve">
          <source>An associative array containing options. See the &lt;a href=&quot;https://secure.php.net/manual/en/password.constants.php&quot;&gt;password algorithm constants&lt;/a&gt; for documentation on the supported options for each algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553bfee87fbb80ef063aff0c21a3521965c469f1" translate="yes" xml:space="preserve">
          <source>An associative array containing session variables available to the current script. See the &lt;a href=&quot;https://secure.php.net/manual/en/ref.session.php&quot;&gt;Session functions&lt;/a&gt; documentation for more information on how this is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3f3998f750c4f75f9f37ee485f6826c4e864aa" translate="yes" xml:space="preserve">
          <source>An associative array listing the attirbute values to add. If an attribute was not existing yet it will be added. If an attribute is existing you can only add values to it if it supports multiple values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee52bb5bcebd99423b20d0db54d8f91b0d5a0f5b" translate="yes" xml:space="preserve">
          <source>An associative array listing the attributes to replace. Sending an empty array as value will remove the attribute, while sending an attribute not existing yet on this entry will add it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecfc072bb3e7198128796aa11b6c929d6b08e58" translate="yes" xml:space="preserve">
          <source>An associative array mapping patterns (keys) to callbacks (values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c6485447225fee80a9bceb794437f9d712f573" translate="yes" xml:space="preserve">
          <source>An associative array mapping string index names to integer weights. Default is empty array, i.e. weighting summing is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f29df8d2709faa93aab11eff680b74c04ee4e6" translate="yes" xml:space="preserve">
          <source>An associative array of &lt;a href=&quot;class.reflectionfunction&quot;&gt;ReflectionFunction&lt;/a&gt; objects, for each function defined in the extension with the keys being the function names. If no function are defined, an empty array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e603a1b05535cf9174f83c177cd0547b3a3462" translate="yes" xml:space="preserve">
          <source>An associative array of &lt;em&gt;constant_name =&amp;gt; value&lt;/em&gt; pairs. The &lt;em&gt;constant_name&lt;/em&gt; must follow the normal &lt;a href=&quot;language.constants&quot;&gt;constant&lt;/a&gt; naming rules. &lt;em&gt;value&lt;/em&gt; must evaluate to a scalar value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e170a0eecf17422164a50d8924c0009fec93ffe6" translate="yes" xml:space="preserve">
          <source>An associative array of all the HTTP headers in the current request, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ca9452aacbf7838d95eba94970725f3d1daf85" translate="yes" xml:space="preserve">
          <source>An associative array of headers fields. Valid keys are: &quot;remail&quot;, &quot;return_path&quot;, &quot;date&quot;, &quot;from&quot;, &quot;reply_to&quot;, &quot;in_reply_to&quot;, &quot;subject&quot;, &quot;to&quot;, &quot;cc&quot;, &quot;bcc&quot;, &quot;message_id&quot; and &quot;custom_headers&quot; (which contains associative array of other headers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401e33232934fa9b61c928b5568fb5bceb5976b7" translate="yes" xml:space="preserve">
          <source>An associative array of options accepted by &lt;a href=&quot;ziparchive.addglob&quot;&gt;ZipArchive::addGlob()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fd6a9e5717c7fffa3702b7d2151d24927c22fe" translate="yes" xml:space="preserve">
          <source>An associative array of options to pass to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c5347977f53913a1fd5bda336f3d7d404e9f40" translate="yes" xml:space="preserve">
          <source>An associative array of options where the key is the option to set and the value is the new value for the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f30768ad83bea9e7444b49601259283bee9455" translate="yes" xml:space="preserve">
          <source>An associative array of options. Available options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63556f72c8d6d60faae2e530b55ca9079a8d8504" translate="yes" xml:space="preserve">
          <source>An associative array of variables passed to the current script via the HTTP POST method when using &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; or &lt;em&gt;multipart/form-data&lt;/em&gt; as the HTTP Content-Type in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b972b8824a5396eaeb9e0195f156b8e0d4e183" translate="yes" xml:space="preserve">
          <source>An associative array of variables passed to the current script via the URL parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1976b7d33911ef0e2d94de76a2b9f71eb8e464" translate="yes" xml:space="preserve">
          <source>An associative array that specifies options for connecting to the server. If values for the UID and PWD keys are not specified, the connection will be attempted using Windows Authentication. For a complete list of supported keys, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff628167.aspx&quot;&gt;&amp;raquo; SQLSRV Connection Options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b772eac7ce8a0e3a33cd0ace4261a0de4b88a7b" translate="yes" xml:space="preserve">
          <source>An associative array which may contain the following elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2806103af32a9ea524cb85b3a6d7ae99eebaec4" translate="yes" xml:space="preserve">
          <source>An associative array with constant names as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f0cd2b308b8630bef78fbc5dc529ef70d92882" translate="yes" xml:space="preserve">
          <source>An associative array, in the form &lt;em&gt;resourceid =&amp;gt; filename&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c800066cadfdab2a7acbde6017c7b172dcf7f1" translate="yes" xml:space="preserve">
          <source>An associative array. This function treats keys as variable names and values as variable values. For each key/value pair it will create a variable in the current symbol table, subject to &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;prefix&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df40acdb69cab5fafe2c6f680abcb4017ed6996" translate="yes" xml:space="preserve">
          <source>An attempt to lock a Mutex owned (locked) by another Thread will result in blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a041753c0919d1ddbd13755c06ec3a62d38a881e" translate="yes" xml:space="preserve">
          <source>An attribute name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9111d0f7ca98a16f4c23f9b154ed013e02b5d824" translate="yes" xml:space="preserve">
          <source>An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity. This is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if it an entity from the internal subset or if it is not known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3574f4eb921f7244ae5f2c5fc4a82474c50dd385" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the XML declaration, the encoding of this document. This is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; when unspecified or when it is not known, such as when the Document was created in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6374ba11aaf03eb3f43f6fc68b7bb05c114cc8b" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the &quot;XML&quot; feature, the value is &quot;1.0&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cb4b05fac629c4e813f6fbecd78feb1652b0ea" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the XML declaration, whether this document is standalone. This is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; when unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c945f05cf6f61da57112323b7a40ee597ed9632" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity. This is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ef72183c4384a5689040872aa24c3c6e7402f6" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity. This is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013f3d0c6406c3f560d4066b6ddeef69a8538919" translate="yes" xml:space="preserve">
          <source>An attribute type. Only supports scalar attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c6dfa510c9f9a754dc24dedb8d577d7c12c1cc" translate="yes" xml:space="preserve">
          <source>An empty JSON key (&quot;&quot;) can be encoded to the empty object property instead of using a key with value &lt;em&gt;_empty_&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50e1bb308a38b60f8e603b4edaac7a8f2e495cd" translate="yes" xml:space="preserve">
          <source>An empty PHP string or value that after casting to string is an empty string (&lt;em&gt;NULL&lt;/em&gt;, &lt;em&gt;FALSE&lt;/em&gt;) results in JSON syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5753fb79f37662e75e54c68869ee473bc60638" translate="yes" xml:space="preserve">
          <source>An empty filter is not allowed. If you want to retrieve absolutely all information for this entry, use a filter of &lt;em&gt;objectClass=*&lt;/em&gt;. If you know which entry types are used on the directory server, you might use an appropriate filter such as &lt;em&gt;objectClass=inetOrgPerson&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87805e4d327f1d020495dd5649dffd53b67a599" translate="yes" xml:space="preserve">
          <source>An empty string activates detection from script encoding (Zend multibyte), &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt;default_charset&lt;/a&gt; and current locale (see &lt;a href=&quot;function.nl-langinfo&quot;&gt;nl_langinfo()&lt;/a&gt; and &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt;), in this order. Not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f9c7fe9e68553d50d0a1da790012ce6947e188" translate="yes" xml:space="preserve">
          <source>An encryption descriptor returned by &lt;a href=&quot;function.mcrypt-module-open&quot;&gt;mcrypt_module_open()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8579c810fa1331375def9454fb9b9f2d1137684" translate="yes" xml:space="preserve">
          <source>An enumeration indicating whether the column is nullable, not nullable, or if it is not known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f853874fbb8d62b779b19f13f50b1d428b405d" translate="yes" xml:space="preserve">
          <source>An error code from &lt;a href=&quot;function.xml-get-error-code&quot;&gt;xml_get_error_code()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d52394836afa548cbb28951859f74e9992751a" translate="yes" xml:space="preserve">
          <source>An error code value for the last call to &lt;a href=&quot;function.mysqli-connect&quot;&gt;mysqli_connect()&lt;/a&gt;, if it failed. zero means no error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304b2b93a07e2e5557998cab975483d0723675a1" translate="yes" xml:space="preserve">
          <source>An error code value for the last call, if it failed. zero means no error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e47dfc78301c2ccb5bf114dbb3950abee0bd503" translate="yes" xml:space="preserve">
          <source>An error code value. Zero means no error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db006ce51ab31915c794a4350e924403244f29a6" translate="yes" xml:space="preserve">
          <source>An error occurred during a bufferevent operation. For more information on what the error was, call &lt;a href=&quot;eventutil.getlastsocketerrno&quot;&gt;EventUtil::getLastSocketErrno()&lt;/a&gt; and/or &lt;a href=&quot;eventutil.getlastsocketerror&quot;&gt;EventUtil::getLastSocketError()&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094573d5f601639b70c4e8c269fa57ea29cf145b" translate="yes" xml:space="preserve">
          <source>An error string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970c6e9663bef39ced74be4aa2b546bbd590b923" translate="yes" xml:space="preserve">
          <source>An event name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ece3afdc848945f1527e63d3ae79ba9cea613d" translate="yes" xml:space="preserve">
          <source>An event object waits, without polling, for the object to be fired/set. One instance waits on the event object while another instance fires/sets the event. Event objects are useful wherever a long-running process would otherwise poll a resource (e.g. checking to see if uploaded data needs to be processed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032bd02e58cfbdc648855da1e75a14b3ec9644f7" translate="yes" xml:space="preserve">
          <source>An event occured during a read operation on the bufferevent. See the other flags for which event it was.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b854842da36673aff3c3582b98dc79e3c96de6b3" translate="yes" xml:space="preserve">
          <source>An event occured during a write operation on the bufferevent. See the other flags for which event it was.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d82ca01a518080d506ddc770eb7304aa3f51f48" translate="yes" xml:space="preserve">
          <source>An event resource, created by &lt;a href=&quot;function.ibase-set-event-handler&quot;&gt;ibase_set_event_handler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217b14818e48b6c7355230a2d3eab752c70d2007" translate="yes" xml:space="preserve">
          <source>An example of PHP's automatic type conversion is the multiplication operator '*'. If either operand is a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;, then both operands are evaluated as &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;s, and the result will be a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;. Otherwise, the operands will be interpreted as &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;s, and the result will also be an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;. Note that this does &lt;em&gt;not&lt;/em&gt; change the types of the operands themselves; the only change is in how the operands are evaluated and what the type of the expression itself is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf2ee0a2b9dd942a3e745beb094cf03f8cf813b" translate="yes" xml:space="preserve">
          <source>An example of extracting EXIF information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045a4fe8987919f80a40beb350f42a901b7f75b3" translate="yes" xml:space="preserve">
          <source>An example of the difference between this algorithm and the regular computer string sorting algorithms (used in &lt;a href=&quot;function.strcmp&quot;&gt;strcmp()&lt;/a&gt;) can be seen below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca34781c0ede6e12579201fe6d7d14fc1dcb03fb" translate="yes" xml:space="preserve">
          <source>An example of using Imagick::polaroidImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04fdd82ebd086b2f9bd42e91bff167e58c9085f" translate="yes" xml:space="preserve">
          <source>An example of using Imagick::setImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f915214f1c8506f626ce8b259abc63dbd2c5ffc" translate="yes" xml:space="preserve">
          <source>An example of using Imagick::setImageOpacity()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0773c395633aa6e29baadf2a925852050cbcac" translate="yes" xml:space="preserve">
          <source>An example use of &lt;strong&gt;stripslashes()&lt;/strong&gt; is when the PHP directive &lt;a href=&quot;https://secure.php.net/manual/en/info.configuration.php#ini.magic-quotes-gpc&quot;&gt;magic_quotes_gpc&lt;/a&gt; is &lt;em&gt;on&lt;/em&gt; (it was on by default before PHP 5.4), and you aren't inserting this data into a place (such as a database) that requires escaping. For example, if you're simply outputting data straight from an HTML form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0657bf064b8bc9f15939e01823c4891bd3147697" translate="yes" xml:space="preserve">
          <source>An example will clarify these rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08662979bbc1509a55f2120f0f0653b5a6bc85b0" translate="yes" xml:space="preserve">
          <source>An exception description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600aa4a88936d53f5e9bbd41c993cf6c3dbf68aa" translate="yes" xml:space="preserve">
          <source>An exception thrown when there is an error produced by the Solr Server itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6478990c8fc34d009ca32fa40a328223f27561c1" translate="yes" xml:space="preserve">
          <source>An exception thrown when there is an error while making a request to the server from the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccc010976e2dde93a02399489b6336b9f41c847" translate="yes" xml:space="preserve">
          <source>An exception to the usual assignment by value behaviour within PHP occurs with &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;s, which are assigned by reference. Objects may be explicitly copied via the &lt;a href=&quot;language.oop5.cloning&quot;&gt;clone&lt;/a&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77a206b49d7902003990cf9f3c5fccfd66e8eda" translate="yes" xml:space="preserve">
          <source>An existing &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; can be modified by explicitly setting values in it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fa706afd830203ed811ad5a9a735ee764ccb22" translate="yes" xml:space="preserve">
          <source>An image geometry string. This geometry defines the final size of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d960aacbfcf7e0c64a0159c2ec6b3a692f9ab1" translate="yes" xml:space="preserve">
          <source>An image resource will be returned on success. &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned if the image type is unsupported, the data is not in a recognised format, or the image is corrupt and cannot be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124d2ba2fac11beb91c0b8aa779d4bbf4de3392a" translate="yes" xml:space="preserve">
          <source>An image resource, returned by one of the image creation functions, such as &lt;a href=&quot;function.imagecreatetruecolor&quot;&gt;imagecreatetruecolor()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796fb4fc0cb703c4cafb21cfaafdc89a4c2d81c9" translate="yes" xml:space="preserve">
          <source>An image resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3666f1477ec71536122308742d4c2bd23767080" translate="yes" xml:space="preserve">
          <source>An image to compare to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5724c07a40d02f491e2ce6a7211ec151ba82a9ae" translate="yes" xml:space="preserve">
          <source>An index in the palette.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc8b6e71ead90a63ae89d44d8e0052a479881db" translate="yes" xml:space="preserve">
          <source>An index name (or names).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75e6baa966f8721abcfeff1bcb6d51bee5d0442" translate="yes" xml:space="preserve">
          <source>An index to get tokenizing settings and keyword occurrence statistics from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029b5dd6a1c3abe08fe71c3df7dc0471626580c4" translate="yes" xml:space="preserve">
          <source>An indexed array of bodies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea2aa61595464ab3dc4a82249fd9990a4968785" translate="yes" xml:space="preserve">
          <source>An indexed array where the key represents the descriptor number and the value represents how PHP will pass that descriptor to the child process. 0 is stdin, 1 is stdout, while 2 is stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6473bc071d964d03b29e0fd5b291146dcdc9c756" translate="yes" xml:space="preserve">
          <source>An inherited member from a base class is overridden by a member inserted by a Trait. The precedence order is that members from the current class override Trait methods, which in turn override inherited methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481bd333acd9f3f70c4fd8c908a3a4ef37692051" translate="yes" xml:space="preserve">
          <source>An inherited method from a base class is overridden by the method inserted into MyHelloWorld from the SayWorld Trait. The behavior is the same for methods defined in the MyHelloWorld class. The precedence order is that methods from the current class override Trait methods, which in turn override methods from the base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc75c213d9468762645792195f3ad9983fe0975" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;class.yar-server&quot;&gt;Yar_Server&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a174afc57df0ea783a53e0c09bd7d32de730bc13" translate="yes" xml:space="preserve">
          <source>An instance of ImagickKernel that represents either a single kernel or a linked series of kernels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7297eb8ab5de48df2c9efccb63657c1aecf9f9" translate="yes" xml:space="preserve">
          <source>An instance of a class implementing &lt;a href=&quot;class.sessionhandlerinterface&quot;&gt;SessionHandlerInterface&lt;/a&gt;, &lt;a href=&quot;class.sessionidinterface&quot;&gt;SessionIdInterface&lt;/a&gt;, and/or &lt;a href=&quot;class.sessionupdatetimestamphandlerinterface&quot;&gt;SessionUpdateTimestampHandlerInterface&lt;/a&gt;, such as &lt;a href=&quot;class.sessionhandler&quot;&gt;SessionHandler&lt;/a&gt;, to register as the session handler. Since PHP 5.4 only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9833b1feb0f8b61471cef1239258f5e5c23521" translate="yes" xml:space="preserve">
          <source>An instance of an object implementing &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt; or &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca820327bca49bde384cb450a8d116992787758" translate="yes" xml:space="preserve">
          <source>An instance of this class is initialized as soon as a stream function tries to access the protocol it is associated with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ff62f21bbe91d6ca36751d8eb4154f5c06c63f" translate="yes" xml:space="preserve">
          <source>An instant represented by the number of number of milliseconds between such instant and the epoch, ignoring leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463b4c7beafada2a32a4065248553821f5eca75c" translate="yes" xml:space="preserve">
          <source>An integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3947f26603f5368f5db204c5186179c1a4149866" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cceb49bc560a98d2bf63c5355d5cbf4330c3584a" translate="yes" xml:space="preserve">
          <source>An integer containing the number of bytes written to shared memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80377b0672767e45f37bfbfba522205f20f82a5b" translate="yes" xml:space="preserve">
          <source>An integer containing the size of the shared memory. This will be the same size that was passed to the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b8574b2376b2f731392db030684d3e7fca27db" translate="yes" xml:space="preserve">
          <source>An integer greater than zero indicates the number of rows affected or retrieved. Zero indicates that no records were updated for an UPDATE statement, no rows matched the &lt;em&gt;WHERE&lt;/em&gt; clause in the query or that no query has yet been executed. -1 indicates that the query returned an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8229326c401aee67f9a9ee5cc99c6bb6ed8513f" translate="yes" xml:space="preserve">
          <source>An integer greater than zero indicates the number of rows affected or retrieved. Zero indicates that no records where updated for an UPDATE/DELETE statement, no rows matched the WHERE clause in the query or that no query has yet been executed. -1 indicates that the query has returned an error. NULL indicates an invalid argument was supplied to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c7eec6653b618d092bced9149e149613663089" translate="yes" xml:space="preserve">
          <source>An integer identifier that is unique for each currently existing object and is always the same for each object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9011a54c9def98d14341abfb513b9feb0d04b2" translate="yes" xml:space="preserve">
          <source>An integer indicating the type of error generated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69d43dc9ef402bab21e0da4874f4badbf0168b0" translate="yes" xml:space="preserve">
          <source>An integer is now returned, and the &lt;code&gt;collector&lt;/code&gt; parameter is now optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de09fd21be0d96734e43e788910060993a8fd611" translate="yes" xml:space="preserve">
          <source>An integer or a string. The string representation can be decimal, hexadecimal or octal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e46b74b3ebae48cdfeb94f8af2e557f3c2d91d" translate="yes" xml:space="preserve">
          <source>An integer representing the bit-flags for the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc236b4a557834bd8f84651e4a0b8a6a74c679fe" translate="yes" xml:space="preserve">
          <source>An integer representing the number of fields in a result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a308827bf59d6869fb3f9c9bf9f60b0d5e2f27" translate="yes" xml:space="preserve">
          <source>An integer representing the number of rows in result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecec1f0142ba3e09cb535836af622dc5b7dbc5d" translate="yes" xml:space="preserve">
          <source>An integer representing the server version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace8a9a68f7c45ea75dabc8129c45093f173bbe9" translate="yes" xml:space="preserve">
          <source>An integer with the value of the time field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4698edd0c4912c4223c4b0bf8514f0dcaa9b9024" translate="yes" xml:space="preserve">
          <source>An interesting use of this function is to construct an array of arrays, which can be easily performed by using &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; as the name of the callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae63439bb98291f71e6f4ed5ac11c895e22b57b3" translate="yes" xml:space="preserve">
          <source>An interface, together with type-hinting, provides a good way to make sure that a particular object contains particular methods. See &lt;a href=&quot;language.operators.type&quot;&gt;instanceof&lt;/a&gt; operator and &lt;a href=&quot;language.oop5.typehinting&quot;&gt;type hinting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3917ee06ec4a2723715988edc2ddd8d39aa6ce1c" translate="yes" xml:space="preserve">
          <source>An interval after which Libevent should stop running callbacks and check for more events, or &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; , if there should be no such interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cfc7c24f10537a7b43b2734e9a7a1f05623938" translate="yes" xml:space="preserve">
          <source>An interval of time in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70b70c1059ec8eddb574d19848e5705edc5097e" translate="yes" xml:space="preserve">
          <source>An interval of time in milliseconds. A negative value indicates an infinite timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251feb5012c3a1ee1012315d1c4a11e5c97e7472" translate="yes" xml:space="preserve">
          <source>An interval of time in seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec500f48d7a868107a0b44c7bf177a1eb1f76002" translate="yes" xml:space="preserve">
          <source>An interval specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392d2a5f1e6f2d75a817471adc661f72f00de4ab" translate="yes" xml:space="preserve">
          <source>An invalid category name also causes a warning message. Category/locale names can be found in &lt;a href=&quot;http://www.faqs.org/rfcs/rfc1766&quot;&gt;&amp;raquo; RFC 1766&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/WAI/ER/IG/ert/iso639.htm&quot;&gt;&amp;raquo; ISO 639&lt;/a&gt;. Different systems have different naming schemes for locales.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bafdb386de1e66332b3038bf5866a2a94032136" translate="yes" xml:space="preserve">
          <source>An iterator for the current entry, if it can be iterated over by the inner iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f2c5925e83b579204c4bc9c874da430264e4de" translate="yes" xml:space="preserve">
          <source>An iterator for the current entry, if it is an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; or &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68809cd0c381e055514bc988f1f27e5eca764def" translate="yes" xml:space="preserve">
          <source>An iterator for the current entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce88fbc71794ef48ebca5ac457c945cea7e80d76" translate="yes" xml:space="preserve">
          <source>An iterator from an &lt;a href=&quot;class.arrayobject&quot;&gt;ArrayObject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3158190edcd446feffe4c6d9c776ea4d696933" translate="yes" xml:space="preserve">
          <source>An iterator that yields strings with the locale keyword values or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c2592b752760d19f649ead29f756c877b81cdc" translate="yes" xml:space="preserve">
          <source>An object (class instance) or a string (class name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a78f621b9133265e7532f6e537b9c23b78fd25" translate="yes" xml:space="preserve">
          <source>An object (class instance) or a string (class or interface name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7a5832360093f21e9b8037c73b153ea4f367f8" translate="yes" xml:space="preserve">
          <source>An object copy is created by using the &lt;em&gt;clone&lt;/em&gt; keyword (which calls the object's &lt;a href=&quot;language.oop5.cloning#object.clone&quot;&gt;__clone()&lt;/a&gt; method if possible). An object's &lt;a href=&quot;language.oop5.cloning#object.clone&quot;&gt;__clone()&lt;/a&gt; method cannot be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbefc11601af5b5704a2e67307a6c6bd04076f64" translate="yes" xml:space="preserve">
          <source>An object instance or a class name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77b109133f483882d852df1ac18105151423dee" translate="yes" xml:space="preserve">
          <source>An object instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635750c5b3ae8d6da9680fe1f93826509212b51c" translate="yes" xml:space="preserve">
          <source>An object of type &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; or &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt;. The timezone information in the object will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905e0aa83034a770d467d578acc2ffa533202619" translate="yes" xml:space="preserve">
          <source>An object representing the currently executing Thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc840b20469360060a1029ca228903311bbea90c" translate="yes" xml:space="preserve">
          <source>An offset to check for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f76ec63074b317a178c6aa4470e4e41a70cf90c" translate="yes" xml:space="preserve">
          <source>An opaque job handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc51f03dcaccb5fa302ac0abe4a6b68ec0c8872" translate="yes" xml:space="preserve">
          <source>An opaque structure sent by the server (&lt;a href=&quot;function.ldap-control-paged-result-response&quot;&gt;ldap_control_paged_result_response()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d82a7262501b0cb619fa35b4bb8e1ce9a921141" translate="yes" xml:space="preserve">
          <source>An opaque structure sent by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705cda10504d3beff654d101ed731e8c42a7da56" translate="yes" xml:space="preserve">
          <source>An opaque unique identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e8d49fae089d2e84a6daf93418470608be1ed3" translate="yes" xml:space="preserve">
          <source>An open file pointer in which we store the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9822959331498cb2e10c02890ac93a896ed42f4d" translate="yes" xml:space="preserve">
          <source>An open file pointer on the local file. Reading stops at end of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0119b77ba12669d4511673609bda435eee31aaad" translate="yes" xml:space="preserve">
          <source>An open filehandle to the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b175b2e8cc69593140f93731d804ad80e4c2fb05" translate="yes" xml:space="preserve">
          <source>An open stream (opened with &lt;a href=&quot;function.stream-socket-client&quot;&gt;stream_socket_client()&lt;/a&gt;, for example)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604a18e9ac38834643532b985de910ce28aef61e" translate="yes" xml:space="preserve">
          <source>An opening square bracket introduces a character class, terminated by a closing square bracket. A closing square bracket on its own is not special. If a closing square bracket is required as a member of the class, it should be the first data character in the class (after an initial circumflex, if present) or escaped with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8c83443ffbf4770c51f616f966445b0e5cf7f0" translate="yes" xml:space="preserve">
          <source>An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3be8885800495aa06a4a5fb547b7bbe0791083a" translate="yes" xml:space="preserve">
          <source>An optimization catches some of the more simple cases such as &lt;em&gt;(a+)*b&lt;/em&gt; where a literal character follows. Before embarking on the standard matching procedure, PCRE checks that there is a &quot;b&quot; later in the subject string, and if there is not, it fails the match immediately. However, when there is no following literal this optimization cannot be used. You can see the difference by comparing the behaviour of &lt;em&gt;(a+)*\d&lt;/em&gt; with the pattern above. The former gives a failure almost instantly when applied to a whole line of &quot;a&quot; characters, whereas the latter takes an appreciable time with strings longer than about 20 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4d1caba0686c9b833d59153195be9ba7fe8a9b" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of parameters to pass to the constructor for &lt;code&gt;class_name&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10737e1472cb4d44fae1922e09fb1d239eb2850c" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;output_callback&lt;/code&gt; function may be specified. This function takes a string as a parameter and should return a string. The function will be called when the output buffer is flushed (sent) or cleaned (with &lt;a href=&quot;function.ob-flush&quot;&gt;ob_flush()&lt;/a&gt;, &lt;a href=&quot;function.ob-clean&quot;&gt;ob_clean()&lt;/a&gt; or similar function) or when the output buffer is flushed to the browser at the end of the request. When &lt;code&gt;output_callback&lt;/code&gt; is called, it will receive the contents of the output buffer as its parameter and is expected to return a new output buffer as a result, which will be sent to the browser. If the &lt;code&gt;output_callback&lt;/code&gt; is not a callable function, this function will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. This is the callback signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3c3205fb8e65ecd75af32c2e46e780d6e3b497" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;alignment specifier&lt;/em&gt; that says if the result should be left-justified or right-justified. The default is right-justified; a &lt;em&gt;-&lt;/em&gt; character here will make it left-justified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5dd18d6fcf38b7f1daca9481a6a2f31fe64862" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;padding specifier&lt;/em&gt; that says what character will be used for padding the results to the right string size. This may be a space character or a &lt;em&gt;0&lt;/em&gt; (zero character). The default is to pad with spaces. An alternate padding character can be specified by prefixing it with a single quote (&lt;em&gt;'&lt;/em&gt;). See the examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3da8806cf6e943da463a5b5b7362c3fc65868a7" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;precision specifier&lt;/em&gt; in the form of a period (&lt;em&gt;.&lt;/em&gt;) followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string. Additionally, the character to use when padding a number may optionally be specified between the period and the digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da291cb94b68604cddde46f8453b065ab250c610" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;sign specifier&lt;/em&gt; that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7546f5888b0125f8676ee4fbdd634bcfe33f0c" translate="yes" xml:space="preserve">
          <source>An optional argument defining the encoding used when converting characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8907db757699c271819d18c6e6e0059a88107f9c" translate="yes" xml:space="preserve">
          <source>An optional clause controlling how the groups are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0fc546c887a4e9c130c257acfd7992081503fa" translate="yes" xml:space="preserve">
          <source>An optional description that will be included in the failure message if the &lt;code&gt;assertion&lt;/code&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18138339d44589dacf444e343ad1c93a08672e90" translate="yes" xml:space="preserve">
          <source>An optional encryption key used when encrypting and decrypting an SQLite database. If the SQLite encryption module is not installed, this parameter will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0c4da224610bfb1b45191dbce7ad391a91062b" translate="yes" xml:space="preserve">
          <source>An optional extension name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2045ed3e0129d36c7c4d411f8ab8be2fead63d5" translate="yes" xml:space="preserve">
          <source>An optional extension name. If set, the function return only options specific for that extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba78d922d0e183a7d37a174c02efec8ab0ab625" translate="yes" xml:space="preserve">
          <source>An optional file access mode, same as for &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f768c4fa19e65d857d48781b540986df0372fc" translate="yes" xml:space="preserve">
          <source>An optional mask of inheritance constants, by default PTHREADS_INHERIT_ALL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f051bf6e76b78c3473c6392eb12c974e32af9f65" translate="yes" xml:space="preserve">
          <source>An optional maximum number of bytes to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e464cb81575dd07f49e2786a5fda9906953c0953" translate="yes" xml:space="preserve">
          <source>An optional maximum number of bytes to write. Must be greater than zero and no greater than the length of &lt;code&gt;data&lt;/code&gt;. Defaults to the length of &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cb67ad34f0863dfa26bfc4feda1c8079464d58" translate="yes" xml:space="preserve">
          <source>An optional namespace for the retrieved attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04da6c8d26e464719f55beae4ab772bb159c6084" translate="yes" xml:space="preserve">
          <source>An optional new value for the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb33023ac84d9bd3cd19db0db2062c786269a9ea" translate="yes" xml:space="preserve">
          <source>An optional number, a &lt;em&gt;width specifier&lt;/em&gt; that says how many characters (minimum) this conversion should result in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c648e0e934dd6ba23d08945fefb8cce6b01d3b" translate="yes" xml:space="preserve">
          <source>An optional parameter that controls how the returned &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is indexed. &lt;code&gt;result_type&lt;/code&gt; is a constant and can take the following values: &lt;strong&gt;&lt;code&gt;PGSQL_ASSOC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_NUM&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;PGSQL_BOTH&lt;/code&gt;&lt;/strong&gt;. Using &lt;strong&gt;&lt;code&gt;PGSQL_NUM&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;pg_fetch_array()&lt;/strong&gt; will return an array with numerical indices, using &lt;strong&gt;&lt;code&gt;PGSQL_ASSOC&lt;/code&gt;&lt;/strong&gt; it will return only associative indices while &lt;strong&gt;&lt;code&gt;PGSQL_BOTH&lt;/code&gt;&lt;/strong&gt;, the default, will return both numerical and associative indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933397ea2e2e57f77a2cf392997bcf88dd584811" translate="yes" xml:space="preserve">
          <source>An optional parameter that controls how the returned &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is indexed. &lt;code&gt;result_type&lt;/code&gt; is a constant and can take the following values: &lt;strong&gt;&lt;code&gt;PGSQL_ASSOC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_NUM&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;PGSQL_BOTH&lt;/code&gt;&lt;/strong&gt;. Using &lt;strong&gt;&lt;code&gt;PGSQL_NUM&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;pg_get_notify()&lt;/strong&gt; will return an array with numerical indices, using &lt;strong&gt;&lt;code&gt;PGSQL_ASSOC&lt;/code&gt;&lt;/strong&gt; it will return only associative indices while &lt;strong&gt;&lt;code&gt;PGSQL_BOTH&lt;/code&gt;&lt;/strong&gt;, the default, will return both numerical and associative indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698ef36130bc83aa8cc978dc9748333abe02332c" translate="yes" xml:space="preserve">
          <source>An optional pcre regular expression that is used to filter the list of files. Only file paths matching the regular expression will be included in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e777da0b927bc85cbab4706c4887c8d26ea2ea6c" translate="yes" xml:space="preserve">
          <source>An optional salt string to base the hashing on. If not provided, the behaviour is defined by the algorithm implementation and can lead to unexpected results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9baa0e96355fb99664a7759c92e299c51c55d9" translate="yes" xml:space="preserve">
          <source>An optional string delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e624b05be108db92d8049a4b02bf3756ad2479b" translate="yes" xml:space="preserve">
          <source>An optional string to separate each value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c54a5d2f3f29dfabbe8f265f7c8c0021d1cad55" translate="yes" xml:space="preserve">
          <source>An optional the serial number of issued certificate. If not specified it will default to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6ccffdfd2230da2ffadc4f05d46bfc5720b91c" translate="yes" xml:space="preserve">
          <source>An optional timeout in microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a14e8f7b254dd887225370cec8936e921d3fab" translate="yes" xml:space="preserve">
          <source>An optional timeout, in microseconds ( millionths of a second ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e8e2e21540d430e374bb67be9ffd214bdc80c9" translate="yes" xml:space="preserve">
          <source>An optional timestamp representing the number of milliseconds since the epoch, excluding leap seconds. If &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;, this objectʼs current time is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ff83536a0da0f008595d3207f8fd62211dad2b" translate="yes" xml:space="preserve">
          <source>An search result identifier, returned by &lt;a href=&quot;function.ldap-search&quot;&gt;ldap_search()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819197f1fcdd5491989fb1777a587589a19f8bfa" translate="yes" xml:space="preserve">
          <source>An unique id, can be used to identified which call it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba08155b8082a0cfb5b8e8cbc378eafc5b61ea37" translate="yes" xml:space="preserve">
          <source>An unspecified error has occurred, the watcher has been stopped. This might happen because the watcher could not be properly started because &lt;em&gt;libev&lt;/em&gt; ran out of memory, a file descriptor was found to be closed or any other problem. &lt;em&gt;Libev&lt;/em&gt; considers these application bugs. See also &lt;a href=&quot;http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ANATOMY_OF_A_WATCHER_CONTENT&quot;&gt;&amp;raquo; ANATOMY OF A WATCHER&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb298ec53bb0aa3d55e842bca2c45d975097c51d" translate="yes" xml:space="preserve">
          <source>An unused argument. Currently there is a non-particularly well defined feature in PHP where calling count() on a countable object might (or might not) require this method to accept a parameter. This parameter is here to be conformant with the interface of countable, even though the param is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a23861cac807d2489162cdae1daf3a7a3b1446" translate="yes" xml:space="preserve">
          <source>Analogous to &lt;strong&gt;&lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt;&lt;/strong&gt;, but for IPv6. (added in PHP 5.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd38a8c0c70dfda4558a80bf7315c0a38a8320d5" translate="yes" xml:space="preserve">
          <source>Analogous to &lt;strong&gt;&lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt;&lt;/strong&gt;, but for IPv6 packets. The value -1 is also accepted, meaning the route default should be used. (added in PHP 5.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5093281f3e8c6b2a068a5b1fc9b91dc9fe4d025e" translate="yes" xml:space="preserve">
          <source>Analyses the image and identifies units that are similar. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c753cd9465d2479a76637f8c6298aebc1509929" translate="yes" xml:space="preserve">
          <source>Analyzes the colors within a reference image and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f50e6b483ac53a55f5286c06f7eb5241560b66" translate="yes" xml:space="preserve">
          <source>Analyzes the colors within a sequence of images and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2247b2e4b0f4206e1836a53ab7331ac53b215287" translate="yes" xml:space="preserve">
          <source>Anchor latitude in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736a31ee11712cb0c07c0146582b7abe17e6f9c7" translate="yes" xml:space="preserve">
          <source>Anchor longitude in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a307a637b89fe16e9922778e99bea2ed2e8e496b" translate="yes" xml:space="preserve">
          <source>Anchors</source>
          <target state="translated">Anchors</target>
        </trans-unit>
        <trans-unit id="58512f1dceaa28627bb0e6f70d89205783e844ac" translate="yes" xml:space="preserve">
          <source>Anchors &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="translated">And</target>
        </trans-unit>
        <trans-unit id="1ce2341e724832ba91a65ce3b5056bd267a561e2" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;Yaf_Route_Static&lt;/strong&gt; is designed to handle the 80% requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49956195d3dbaafec0ee76c7c0fcd11a61a7160d" translate="yes" xml:space="preserve">
          <source>And finally two special types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9dc79cbcdf11638fac11ad5b2c0bbabe1dd01a" translate="yes" xml:space="preserve">
          <source>And some code to parse the document and generate the appropriate objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f2c6dff6b063feacf544dfe91aeb6bbd04a6d8" translate="yes" xml:space="preserve">
          <source>And the config entry(and there default value) list blow:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1cd244a13566a14b5cada7f85139c8bd9f1e94" translate="yes" xml:space="preserve">
          <source>And the pseudo-variable &lt;code&gt;$...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd70473fb3de634b409d4acaf49ffc1f90aae1f" translate="yes" xml:space="preserve">
          <source>Angle</source>
          <target state="translated">Angle</target>
        </trans-unit>
        <trans-unit id="42753a13f0fb8b55eb5ecd0f68ea50e3702850e1" translate="yes" xml:space="preserve">
          <source>Angle in degrees in which &lt;code&gt;text&lt;/code&gt; will be measured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1f30022bbbc9047a39c51e7e7fb924a80adbc5" translate="yes" xml:space="preserve">
          <source>Angular value in degrees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17902ebbf046ff599301733cfa1667eecc7c63f" translate="yes" xml:space="preserve">
          <source>Annotate text on an empty image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f142582cf9a8f1ef0bdc60e7a3d584455f9e728d" translate="yes" xml:space="preserve">
          <source>Annotates an image with text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cec5872bc690ef24a3caaf5aa5adea2e56f8661" translate="yes" xml:space="preserve">
          <source>Anonymous (class)es</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223b2e5849455eb07462909eead6bb222c4958a9" translate="yes" xml:space="preserve">
          <source>Anonymous classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f189e5a12114901c4897475de8a69e395026fb" translate="yes" xml:space="preserve">
          <source>Anonymous classes &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462519e135281467088215ccc649f512ae9b84ce" translate="yes" xml:space="preserve">
          <source>Anonymous functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6150fd17f4eeaf6a0029b8240711dbcb21242727" translate="yes" xml:space="preserve">
          <source>Anonymous functions &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c95e92e578e63a7809ebd14ce6986f04a5101d" translate="yes" xml:space="preserve">
          <source>Anonymous functions are implemented using the &lt;a href=&quot;class.closure&quot;&gt;Closure&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f11bebc2bb7fea59e300e3660b7dcc8345ade9" translate="yes" xml:space="preserve">
          <source>Anonymous functions become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdedcc4b57e0147667af57fb09e2dd62319c5006" translate="yes" xml:space="preserve">
          <source>Anonymous functions may not close over &lt;a href=&quot;language.variables.predefined&quot;&gt;superglobals&lt;/a&gt;, &lt;var&gt;&lt;var&gt;$this&lt;/var&gt;&lt;/var&gt;, or any variable with the same name as a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e016dc7d09dbe587a55f893b4c7ef4f2e3ddb5" translate="yes" xml:space="preserve">
          <source>Anonymous functions may use &lt;var&gt;&lt;var&gt;$this&lt;/var&gt;&lt;/var&gt;, as well as be declared statically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a7e1e6c363b25a476cb6870ff33efc19ba46a1" translate="yes" xml:space="preserve">
          <source>Anonymous functions, also known as &lt;em&gt;closures&lt;/em&gt;, allow the creation of functions which have no specified name. They are most useful as the value of &lt;a href=&quot;language.pseudo-types#language.types.callback&quot;&gt;callback&lt;/a&gt; parameters, but they have many other uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3b11952b15213ddfc0a7425e8a64d48e841931" translate="yes" xml:space="preserve">
          <source>Anonymous functions, implemented in PHP 5.3, yield objects of this type. This fact used to be considered an implementation detail, but it can now be relied upon. Starting with PHP 5.4, this class has methods that allow further control of the anonymous function after it has been created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcefc884a2755461362b502e34cf899200123e8" translate="yes" xml:space="preserve">
          <source>Another as yet unresolved discrepancy is that in Perl 5.005_02 the pattern /^(a)?(?(1)a|b)+$/ matches the string &quot;a&quot;, whereas in PCRE it does not. However, in both Perl and PCRE /^(a)?a/ matched against &quot;a&quot; leaves $1 unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccd0f2fa51b09b3d9abaa8e496a593281a3ceeb" translate="yes" xml:space="preserve">
          <source>Another conditional operator is the &quot;?:&quot; (or ternary) operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf3e1126fb6962a7b05aefc00a1c674292a9a1b" translate="yes" xml:space="preserve">
          <source>Another good example of expression orientation is pre- and post-increment and decrement. Users of PHP and many other languages may be familiar with the notation of &lt;em&gt;variable++&lt;/em&gt; and &lt;em&gt;variable--&lt;/em&gt;. These are &lt;a href=&quot;language.operators.increment&quot;&gt; increment and decrement operators&lt;/a&gt;. In PHP, like in C, there are two types of increment - pre-increment and post-increment. Both pre-increment and post-increment essentially increment the variable, and the effect on the variable is identical. The difference is with the value of the increment expression. Pre-increment, which is written '++&lt;var&gt;&lt;var&gt;$variable&lt;/var&gt;&lt;/var&gt;', evaluates to the incremented value (PHP increments the variable before reading its value, thus the name 'pre-increment'). Post-increment, which is written '&lt;var&gt;&lt;var&gt;$variable&lt;/var&gt;&lt;/var&gt;++' evaluates to the original value of $variable, before it was incremented (PHP increments the variable after reading its value, thus the name 'post-increment').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c909f0747cf27004058792edc57d9caa8e02ab4a" translate="yes" xml:space="preserve">
          <source>Another important feature of variable scoping is the &lt;em&gt;static&lt;/em&gt; variable. A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope. Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a2561daf282b069ea203fdcef83ef669ef23d2" translate="yes" xml:space="preserve">
          <source>Another method is to put the mounting code inside the stub of the phar archive. Here is an example of setting up a default configuration file if no user configuration is specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f729ae0405831549e9757a5414a14c2e0ac9f3b" translate="yes" xml:space="preserve">
          <source>Another thing to watch out for is that it is quite easy to receive false readiness notifications, i.e. the callback might be called with &lt;strong&gt;&lt;code&gt;Ev::READ&lt;/code&gt;&lt;/strong&gt; but a subsequent &lt;em&gt;read()&lt;/em&gt; will actually block because there is no data. It is very easy to get into this situation. Thus it is best to always use non-blocking I/O: An extra &lt;em&gt;read()&lt;/em&gt; returning &lt;strong&gt;&lt;code&gt;EAGAIN&lt;/code&gt;&lt;/strong&gt; (or similar) is far preferable to a program hanging until some data arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3250a1ea4e8157da41a1279d66933155b29aa7" translate="yes" xml:space="preserve">
          <source>Another variable ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63d5e66175ea5ddb1b17d99181eb3022c4c4665" translate="yes" xml:space="preserve">
          <source>Another way to &quot;include&quot; a PHP file into a variable is to capture the output by using the &lt;a href=&quot;https://secure.php.net/manual/en/ref.outcontrol.php&quot;&gt;Output Control Functions&lt;/a&gt; with &lt;em&gt;include&lt;/em&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dcca90a5480450f6d24b14df0f416db976b593" translate="yes" xml:space="preserve">
          <source>Answered - &lt;em&gt;A&lt;/em&gt; if answered, ' ' if unanswered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f33fc530d3e011ee6ab56f206622e221888971" translate="yes" xml:space="preserve">
          <source>Antarctica</source>
          <target state="translated">Antarctica</target>
        </trans-unit>
        <trans-unit id="b638122a752c4c0a3962641c15e9b80b0770ed59" translate="yes" xml:space="preserve">
          <source>Antarctica time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e89ef33e6b64c48be95691d4cbddc8105c8a64" translate="yes" xml:space="preserve">
          <source>Ante meridiem and Post meridiem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e0affa250acdb45337e060eb3ea899158bf647" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object passed in will be cloned; no modifications will be made to the argument object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba67bc954d0c7227bbe43f9ab4431c9efc8c73c4" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;language.operators.comparison&quot;&gt;comparable&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee839ed8e3475b61ee2636799fac6fad0ea6dfe" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;language.types.callable&quot;&gt;callable&lt;/a&gt; may be used; such as a string containing a function name, an array for a method, or an anonymous function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6510ee30e612a7d55bd47b39d7be2652c07710a5" translate="yes" xml:space="preserve">
          <source>Any PHP variable containing information to store alongside a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f693f2f74014eca517ee07bb19bc48642c2feb3d" translate="yes" xml:space="preserve">
          <source>Any PHP variable containing information to store that describes the phar archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59413c8bf2c2333c6d36fd8b2ca4d575b3ff4cbf" translate="yes" xml:space="preserve">
          <source>Any additional configuration properties for the binding (e.g. array('location' =&amp;gt; 'http://example.org')). Any binding configuration which can be specified in an annotation can be specified here. For example, 'location' is equivalent to the '@location' annotation to configure the location of a target soap service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1455b0f3ab0df307f100cd4f899adf5a76af6f16" translate="yes" xml:space="preserve">
          <source>Any attempt to define a namespaced constant that is a special, built-in constant results in a fatal error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67eec95056b36b17ec672de6496d2debe17e85bd" translate="yes" xml:space="preserve">
          <source>Any bitwise disjunction of &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_STATIC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_PUBLIC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_PROTECTED&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_PRIVATE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_ABSTRACT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReflectionMethod::IS_FINAL&lt;/code&gt;&lt;/strong&gt;, so that all methods with &lt;em&gt;any&lt;/em&gt; of the given attributes will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dded4e1954a9b464a5514edc167a9c62936987b6" translate="yes" xml:space="preserve">
          <source>Any combination of &lt;strong&gt;&lt;code&gt;EV_READ&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;EV_WRITE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5949d4a8e11eec37c7343a0f3dfe18dcf59bf0" translate="yes" xml:space="preserve">
          <source>Any data that should be associated with this cURL handle. This data can subsequently be retrieved with the &lt;strong&gt;&lt;code&gt;CURLINFO_PRIVATE&lt;/code&gt;&lt;/strong&gt; option of &lt;a href=&quot;function.curl-getinfo&quot;&gt;curl_getinfo()&lt;/a&gt;. cURL does nothing with this data. When using a cURL multi handle, this private data is typically a unique key to identify a standard cURL handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561ff39b0992b70db010435cc697b4ddea0e7e75" translate="yes" xml:space="preserve">
          <source>Any flags set for this column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bed3947548b2594b55d2a57fc626e6b3f2f0c4" translate="yes" xml:space="preserve">
          <source>Any function defined within the sandbox may be called as a method on the sandbox object. This also includes a few pseudo-function language constructs: &lt;a href=&quot;function.eval&quot;&gt;eval()&lt;/a&gt;, &lt;a href=&quot;function.include&quot;&gt;include&lt;/a&gt;, &lt;a href=&quot;function.include-once&quot;&gt;include_once&lt;/a&gt;, &lt;a href=&quot;function.require&quot;&gt;require&lt;/a&gt;, &lt;a href=&quot;function.require-once&quot;&gt;require_once&lt;/a&gt;, &lt;a href=&quot;function.echo&quot;&gt;echo&lt;/a&gt;, &lt;a href=&quot;function.print&quot;&gt;print&lt;/a&gt;, &lt;a href=&quot;function.die&quot;&gt;die()&lt;/a&gt;, and &lt;a href=&quot;function.exit&quot;&gt;exit()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50487314912aca9821f8370e34954b0163c9401" translate="yes" xml:space="preserve">
          <source>Any information that has a Tag e.g. &lt;em&gt;IFD0&lt;/em&gt;, &lt;em&gt;EXIF&lt;/em&gt;, ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0cffb786646b2907a3f36016bc3e48d912abb5" translate="yes" xml:space="preserve">
          <source>Any iterator that either associatively maps phar file to location or returns SplFileInfo objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a86a559ff5f8803ed9b68251bd7b86ce8f51fa9" translate="yes" xml:space="preserve">
          <source>Any iterator that either associatively maps tar/zip file to location or returns SplFileInfo objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96e4a07e19a49428a5b0621a9a66fafe09814ee" translate="yes" xml:space="preserve">
          <source>Any method declared in Bootstrap class with leading &quot;_init&quot;, will be called by &lt;a href=&quot;yaf-application.bootstrap&quot;&gt;Yaf_Application::bootstrap()&lt;/a&gt; one by one according to their defined order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577731c75df5ce136f0ce649c9c17df43b5ed864" translate="yes" xml:space="preserve">
          <source>Any new algorithm must be in core for at least 1 full release of PHP prior to becoming default. So if, for example, a new algorithm is added in 7.5.5, it would not be eligible for default until 7.7 (since 7.6 would be the first full release). But if a different algorithm was added in 7.6.0, it would also be eligible for default at 7.7.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04e1c2aa22e283fdf80f36c6886c93ae8cb8fc3" translate="yes" xml:space="preserve">
          <source>Any number of &lt;strong&gt;&lt;code&gt;PGSQL_CONV_FORCE_NULL&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_NO_CONV&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_ESCAPE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_EXEC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_ASYNC&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PGSQL_DML_STRING&lt;/code&gt;&lt;/strong&gt; combined. If &lt;strong&gt;&lt;code&gt;PGSQL_DML_STRING&lt;/code&gt;&lt;/strong&gt; is part of the &lt;code&gt;options&lt;/code&gt; then query string is returned. When &lt;strong&gt;&lt;code&gt;PGSQL_DML_NO_CONV&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PGSQL_DML_ESCAPE&lt;/code&gt;&lt;/strong&gt; is set, it does not call &lt;a href=&quot;function.pg-convert&quot;&gt;pg_convert()&lt;/a&gt; internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d565bd1c208c400dd55db56769d9fa362da36c09" translate="yes" xml:space="preserve">
          <source>Any number of &lt;strong&gt;&lt;code&gt;PGSQL_CONV_IGNORE_DEFAULT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_CONV_FORCE_NULL&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PGSQL_CONV_IGNORE_NOT_NULL&lt;/code&gt;&lt;/strong&gt;, combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa76b1ac5cb3e140e672bd8b45553694a026eb2" translate="yes" xml:space="preserve">
          <source>Any number of &lt;strong&gt;&lt;code&gt;PGSQL_CONV_OPTS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_NO_CONV&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_ESCAPE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_EXEC&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PGSQL_DML_ASYNC&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PGSQL_DML_STRING&lt;/code&gt;&lt;/strong&gt; combined. If &lt;strong&gt;&lt;code&gt;PGSQL_DML_STRING&lt;/code&gt;&lt;/strong&gt; is part of the &lt;code&gt;options&lt;/code&gt; then query string is returned. When &lt;strong&gt;&lt;code&gt;PGSQL_DML_NO_CONV&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;PGSQL_DML_ESCAPE&lt;/code&gt;&lt;/strong&gt; is set, it does not call &lt;a href=&quot;function.pg-convert&quot;&gt;pg_convert()&lt;/a&gt; internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b17a8d37fe2b291a8ab334cb0e88fdc79992be4" translate="yes" xml:space="preserve">
          <source>Any object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0478ff588bd83d884f4f86d299a160d1614a752b" translate="yes" xml:space="preserve">
          <source>Any of the modes specified in the documentation of &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c6267f0bfd308aa80f8b87ba6ad032f91300ca" translate="yes" xml:space="preserve">
          <source>Any options to be provided to &lt;strong&gt;unserialize()&lt;/strong&gt;, as an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79283c2768d3b79eadf8be09a314f6205416584c" translate="yes" xml:space="preserve">
          <source>Any parameters in &lt;code&gt;parameter_array&lt;/code&gt; which start and end with single quotes will be taken as the name of a file to read and send to the database server as the data for the appropriate placeholder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a339561e6c72064ca6434678cd736389f8ede3" translate="yes" xml:space="preserve">
          <source>Any request from client is initialized as a &lt;strong&gt;Yaf_Request_Http&lt;/strong&gt;. you can get the rquest information like, uri query and post parameters via methods of this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1720899a9e53b00da0f34060bb63b031e77b8d6a" translate="yes" xml:space="preserve">
          <source>Any resources which were locked, or allocated, during opening and use of the directory stream should be released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875941cc8daf536d776a5b6c336441fe426fd18a" translate="yes" xml:space="preserve">
          <source>Any returned value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2138ea0531e7dc97512610279a111853e133741b" translate="yes" xml:space="preserve">
          <source>Any scalar variable, array element or object property with a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; representation can be included via this syntax. Simply write the expression the same way as it would appear outside the &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, and then wrap it in &lt;em&gt;{&lt;/em&gt; and &lt;em&gt;}&lt;/em&gt;. Since &lt;em&gt;{&lt;/em&gt; can not be escaped, this syntax will only be recognised when the &lt;em&gt;$&lt;/em&gt; immediately follows the &lt;em&gt;{&lt;/em&gt;. Use &lt;em&gt;{\$&lt;/em&gt; to get a literal &lt;em&gt;{$&lt;/em&gt;. Some examples to make it clear:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af25eda6f02269dcbf3d6ab596585777b4961c0" translate="yes" xml:space="preserve">
          <source>Any subsequent calls to any mysqli function (except &lt;a href=&quot;mysqli.options&quot;&gt;mysqli_options()&lt;/a&gt;) will fail until &lt;a href=&quot;mysqli.real-connect&quot;&gt;mysqli_real_connect()&lt;/a&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9d017b96cacbed0c1feb2641e9c893db787e2b" translate="yes" xml:space="preserve">
          <source>Any subsequent calls to any mysqli_stmt function will fail until &lt;a href=&quot;mysqli-stmt.prepare&quot;&gt;mysqli_stmt_prepare()&lt;/a&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7228e5c892cb0ff67edfc0bf075657d99f5257" translate="yes" xml:space="preserve">
          <source>Any undefined constant that is unqualified like &lt;em&gt;FOO&lt;/em&gt; will produce a notice explaining that PHP assumed &lt;em&gt;FOO&lt;/em&gt; was the value of the constant. Any constant, qualified or fully qualified, that contains a backslash will produce a fatal error if not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacf4ae2af643c5eb2a866b104f80ae0752b3ca5" translate="yes" xml:space="preserve">
          <source>Any unused SSL parameters may be given as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cbbd31c24599b6c09dc2b53dd02b98771e5298" translate="yes" xml:space="preserve">
          <source>Any user-supplied data substituted directly into a query string should be &lt;a href=&quot;function.pg-escape-string&quot;&gt;properly escaped&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faccb0203e9aabec0a20085b0748b935de6de24" translate="yes" xml:space="preserve">
          <source>Any valid PHP code may appear inside a function, even other functions and &lt;a href=&quot;language.oop5.basic#language.oop5.basic.class&quot;&gt;class&lt;/a&gt; definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59cadf6fd85baf91022b0dbfd9298a71ef0b79b" translate="yes" xml:space="preserve">
          <source>Any value less than or equal to 0 means unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e28c679a1ccbddbc6511f0d3353ae4724d8ca5" translate="yes" xml:space="preserve">
          <source>Any whitespace in the &lt;code&gt;format&lt;/code&gt; string matches any whitespace in the line from the file. This means that even a tab &lt;em&gt;\t&lt;/em&gt; in the format string can match a single space character in the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e942b1d6eedd662d56c6d8e06f2a30cc7868caa" translate="yes" xml:space="preserve">
          <source>Any whitespace in the format string matches any whitespace in the input stream. This means that even a tab &lt;em&gt;\t&lt;/em&gt; in the format string can match a single space character in the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f173e90188c63689790253c99c2c14fb4add47" translate="yes" xml:space="preserve">
          <source>Any whitespace in the format string matches any whitespace in the input string. This means that even a tab \t in the format string can match a single space character in the input string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="6e1a3ea9fdc62aaf4cbfcfb3b22a118c640d243f" translate="yes" xml:space="preserve">
          <source>Apart from common user-defined function, &lt;a href=&quot;functions.anonymous&quot;&gt;anonymous functions&lt;/a&gt; can also be passed to a callback parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39af641c05b6fee929fbb4303c65fc230532252c" translate="yes" xml:space="preserve">
          <source>Apart from keeping the process non-blocking(which is a useful on its own sometimes), &lt;strong&gt;EvIdle&lt;/strong&gt; watchers are a good place to do &lt;em&gt;&quot;pseudo-background processing&quot;&lt;/em&gt; , or delay processing stuff to after the event loop has handled all outstanding events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195a0bdd292e40294a9cfecc8626bac8d54a1e1b" translate="yes" xml:space="preserve">
          <source>Apart from that the passed code must be valid PHP. This includes that all statements must be properly terminated using a semicolon. &lt;em&gt;'echo &quot;Hi!&quot;'&lt;/em&gt; for example will cause a parse error, whereas &lt;em&gt;'echo &quot;Hi!&quot;;'&lt;/em&gt; will work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0e7075944a36311da61e67d896f82cfd7d72a6" translate="yes" xml:space="preserve">
          <source>Append a content to a exists content block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d7b764eddceacaf1d6585e6019a6392ea852d5" translate="yes" xml:space="preserve">
          <source>Append a set of images into one larger image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fd4a9ccbd4f3106c345e1729ef6ac64c02839b" translate="yes" xml:space="preserve">
          <source>Append data to the end of an event buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ebffa98bdf24d7b3a7380b02c8c2655f873c0c" translate="yes" xml:space="preserve">
          <source>Append the OAuth parameters to the HTTP POST request body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a537c9cb195883c5f5e9c4be4e0eab40dfc757" translate="yes" xml:space="preserve">
          <source>Append the OAuth parameters to the request URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5350ff90ddb6a7d4105b55c6c7caec0e2481c26" translate="yes" xml:space="preserve">
          <source>Append the string &lt;code&gt;data&lt;/code&gt; to the end of the character data of the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ea24a5fce7e49dc080f136245e4db6a291d1de" translate="yes" xml:space="preserve">
          <source>AppendIterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6900297048a304573f15b838eb67694c65c43a7" translate="yes" xml:space="preserve">
          <source>AppendIterator::__construct</source>
          <target state="translated">AppendIterator::__construct</target>
        </trans-unit>
        <trans-unit id="983abfc2b5c0ca90bf0dbfa1028b32a6eedbb627" translate="yes" xml:space="preserve">
          <source>AppendIterator::__construct &amp;mdash; Constructs an AppendIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192caf472b0030504c722557a102018d49473f4d" translate="yes" xml:space="preserve">
          <source>AppendIterator::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22791c362e754fe38413a696e0c82f9bace0f35" translate="yes" xml:space="preserve">
          <source>AppendIterator::append</source>
          <target state="translated">AppendIterator::append</target>
        </trans-unit>
        <trans-unit id="4532d26930a7d6a22c4818930039346ac494a90d" translate="yes" xml:space="preserve">
          <source>AppendIterator::append &amp;mdash; Appends an iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930c77e2da10194a2ccc06999e90cf36a8bd73fc" translate="yes" xml:space="preserve">
          <source>AppendIterator::append &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca3eedf21c87ead23de379ca395bdce21f38dc5" translate="yes" xml:space="preserve">
          <source>AppendIterator::current</source>
          <target state="translated">AppendIterator::current</target>
        </trans-unit>
        <trans-unit id="73ab2568a73cbbccd50afddbcc902fd37260095c" translate="yes" xml:space="preserve">
          <source>AppendIterator::current &amp;mdash; Gets the current value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae942c239252854f40a26efbbc0472600311d561" translate="yes" xml:space="preserve">
          <source>AppendIterator::current &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d217936a75331a33ee15da71ae7a6c516d0783" translate="yes" xml:space="preserve">
          <source>AppendIterator::getArrayIterator</source>
          <target state="translated">AppendIterator::getArrayIterator</target>
        </trans-unit>
        <trans-unit id="c40807da6bb32863b2b0e9da8579724fe45aaa94" translate="yes" xml:space="preserve">
          <source>AppendIterator::getArrayIterator &amp;mdash; Gets the ArrayIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799d49919decf0969b76745f349638645b2488f0" translate="yes" xml:space="preserve">
          <source>AppendIterator::getArrayIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08e11f64aecd0e2d4bc82d118f29c113717d7f9" translate="yes" xml:space="preserve">
          <source>AppendIterator::getInnerIterator</source>
          <target state="translated">AppendIterator::getInnerIterator</target>
        </trans-unit>
        <trans-unit id="859a828d5ad14d5236dcb78e434825750b7bbcf9" translate="yes" xml:space="preserve">
          <source>AppendIterator::getInnerIterator &amp;mdash; Gets the inner iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee30aa7b312312b4222502b23bbb1a03480df421" translate="yes" xml:space="preserve">
          <source>AppendIterator::getInnerIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5477ed7435de662c80f9226db3c22449dc6b0313" translate="yes" xml:space="preserve">
          <source>AppendIterator::getIteratorIndex</source>
          <target state="translated">AppendIterator::getIteratorIndex</target>
        </trans-unit>
        <trans-unit id="f713352b7c2255985efce89b09c4576f4b11d87f" translate="yes" xml:space="preserve">
          <source>AppendIterator::getIteratorIndex &amp;mdash; Gets an index of iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5971257b7420fc73ed2e463d13d8d1392a0fd9ff" translate="yes" xml:space="preserve">
          <source>AppendIterator::getIteratorIndex &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7c44415aee4a83c306f2edd8dd617866094c8d" translate="yes" xml:space="preserve">
          <source>AppendIterator::key</source>
          <target state="translated">AppendIterator::key</target>
        </trans-unit>
        <trans-unit id="accab0933e874b4528d6bc15346cf650c8814f18" translate="yes" xml:space="preserve">
          <source>AppendIterator::key &amp;mdash; Gets the current key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54d2510d53769ff42b6dfc166e0a9de16a84f47" translate="yes" xml:space="preserve">
          <source>AppendIterator::key &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bc51c0c595528901df367c68a98768a942f355" translate="yes" xml:space="preserve">
          <source>AppendIterator::next</source>
          <target state="translated">AppendIterator::next</target>
        </trans-unit>
        <trans-unit id="018c8c8b9e3ff7603207644cb2df57471125ab42" translate="yes" xml:space="preserve">
          <source>AppendIterator::next &amp;mdash; Moves to the next element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41c2eeee0b208ccdac03146b6c82edbc0e965ef" translate="yes" xml:space="preserve">
          <source>AppendIterator::next &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c83ecec89e08a1dc0eb813091728ecec41eedef" translate="yes" xml:space="preserve">
          <source>AppendIterator::rewind</source>
          <target state="translated">AppendIterator::rewind</target>
        </trans-unit>
        <trans-unit id="485e603139425c0572d0584247f6c6d3978e2618" translate="yes" xml:space="preserve">
          <source>AppendIterator::rewind &amp;mdash; Rewinds the Iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32107c3ec2a6e979e32c2cac1ef43367c2a425cd" translate="yes" xml:space="preserve">
          <source>AppendIterator::rewind &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23aef104e882c8839a8492a8b2bfb0db90e5e34f" translate="yes" xml:space="preserve">
          <source>AppendIterator::valid</source>
          <target state="translated">AppendIterator::valid</target>
        </trans-unit>
        <trans-unit id="ab0739e0c8a021965fef44c004a674958f460ec9" translate="yes" xml:space="preserve">
          <source>AppendIterator::valid &amp;mdash; Checks validity of the current element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ba984ec49580e8d0c9a221c0460f9cc2df0c2a" translate="yes" xml:space="preserve">
          <source>AppendIterator::valid &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdbd83b2cfc1f25426617318f1b1822aaf0211f" translate="yes" xml:space="preserve">
          <source>Appends a new value as the last element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6032eb771e098a6e8536d579adacdc269eb47bd" translate="yes" xml:space="preserve">
          <source>Appends a string &lt;code&gt;message&lt;/code&gt; to the specified &lt;code&gt;mailbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb6eb41220e87ea039522619c4fc1db929249dc" translate="yes" xml:space="preserve">
          <source>Appends an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94793dfcbe38cfb7e2b69b23b3121ac5b045f6be" translate="yes" xml:space="preserve">
          <source>Appends raw XML data to a DOMDocumentFragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80610024a049fd62a8edbcec765aedd027b901c9" translate="yes" xml:space="preserve">
          <source>Appends the new work to the stack of the referenced worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe25bde72ac69308a43916eb7ac66e164ed0e80" translate="yes" xml:space="preserve">
          <source>Appends value as the last element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51774f952e21fe96adcc4218efeaf3197111c4a1" translate="yes" xml:space="preserve">
          <source>Applicable only when implementing userspace event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466d11ae1a7d7f4ad8b31a91cc0795408664e9dd" translate="yes" xml:space="preserve">
          <source>Application context to associate with a task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b1c8fec1d1ef4722ce33f7757b43708d56703f" translate="yes" xml:space="preserve">
          <source>Application/context-specific info string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47719c4696a58a68e1d042148b61497a45203ca2" translate="yes" xml:space="preserve">
          <source>Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white and at its maximum for the midtones. The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc6c70096fd4de3a30a771c0cf5b7d2b27b1220" translate="yes" xml:space="preserve">
          <source>Applies a convolution matrix on the image, using the given coefficient and offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e985cd01ddce78bf7f4db874f7a55bf4d388a70" translate="yes" xml:space="preserve">
          <source>Applies a custom convolution kernel to the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a0fc8386bea492ea368737e278eff5f3a0fab6" translate="yes" xml:space="preserve">
          <source>Applies a digital filter that improves the quality of a noisy image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82751b574396494d4fcc3c98b3971b8207c65abd" translate="yes" xml:space="preserve">
          <source>Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba700225f75a107b33c0fe3f67589bafb15c474" translate="yes" xml:space="preserve">
          <source>Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08121dc7da6e745647157319e0944b59f5bd4209" translate="yes" xml:space="preserve">
          <source>Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a626f746c2216d8c8ea26b4ad5277c4ebdcdad0" translate="yes" xml:space="preserve">
          <source>Applies a special effect to the image, similar to the effect achieved in a photo darkroom by sepia toning. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning. A threshold of 80 is a good starting point for a reasonable tone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eec3133e9ffd0d78e1aad8520b5ca5e27ef3584" translate="yes" xml:space="preserve">
          <source>Applies a translation to the current coordinate system which moves the coordinate system origin to the specified coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced7b020b431a2b5ce4b026a3640abbf9c91dc7d" translate="yes" xml:space="preserve">
          <source>Applies a user supplied kernel to the image according to the given morphology method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d43db31de38768f1e801e89c9ed65b9a7869e5" translate="yes" xml:space="preserve">
          <source>Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddd7a5ff2e42711d7753cb9c2c6b359c0b694b0" translate="yes" xml:space="preserve">
          <source>Applies an arithmetic, relational, or logical expression to a pseudo image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4cf7be7593337373fb0cf05a2cbb6526c4be77" translate="yes" xml:space="preserve">
          <source>Applies gamma correction to the given gd &lt;code&gt;image&lt;/code&gt; given an input and an output gamma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5acf2fdf54434dc2f073dd9ef93b7b79849dc2" translate="yes" xml:space="preserve">
          <source>Applies the specified rotation to the current coordinate space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d82bf79d4c8e4eaaa0b110d0e54e46bec93e7f" translate="yes" xml:space="preserve">
          <source>Applies the user-defined &lt;code&gt;callback&lt;/code&gt; function to each element of the &lt;code&gt;array&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c268cd7ec97be293f8525fe46f52bea427ee021" translate="yes" xml:space="preserve">
          <source>Applies the user-defined &lt;code&gt;callback&lt;/code&gt; function to each element of the &lt;code&gt;array&lt;/code&gt;. This function will recurse into deeper arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac4dd2d40c028e6eebc7365aa99916aaface2ff" translate="yes" xml:space="preserve">
          <source>Apply color transformation to an image. The method permits saturation changes, hue rotation, luminance to alpha, and various other effects. Although variable-sized transformation matrices can be used, typically one uses a 5x5 matrix for an RGBA image and a 6x6 for CMYKA (or RGBA with offsets). The matrix is similar to those used by Adobe Flash except offsets are in column 6 rather than 5 (in support of CMYKA images) and offsets are normalized (divide Flash offset by 255)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e59ae52279b16b4684313defff137f944db4aaa" translate="yes" xml:space="preserve">
          <source>Apply the effect along this angle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04edde44cc2f922aa2095abf78ecea58c0e6cb6" translate="yes" xml:space="preserve">
          <source>Applys an arithmetic, relational, or logical expression to an image. Use these operators to lighten or darken an image, to increase or decrease contrast in an image, or to produce the &quot;negative&quot; of an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89acdc505717a8eb0cb9b4b2140ea74749d4a161" translate="yes" xml:space="preserve">
          <source>Arbitrary context data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03c34fc0f88eeb198cfadc203b3a6f45be51e5b" translate="yes" xml:space="preserve">
          <source>Arbitrary length integer / GMP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cb19e8d00c7beb80bdfd3c574765c0e610e53c" translate="yes" xml:space="preserve">
          <source>Arbitrary precision / BCMath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b951e9b4f2fc6e4811a75d214abe1e285e37e4" translate="yes" xml:space="preserve">
          <source>Arbitrary serialized data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64878301b50db5ee6c76e75105b579efdb0f6a42" translate="yes" xml:space="preserve">
          <source>Arbitrary serialized data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836a287aee2724453cb745bb617f4079ce466463" translate="yes" xml:space="preserve">
          <source>Arbitrary variable passed to &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b13d06a6b6a193b70341a7e444c497931214231" translate="yes" xml:space="preserve">
          <source>Arctic time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b953e37b1b9ac5e95697e5d298215f0e52e1a4e3" translate="yes" xml:space="preserve">
          <source>ArgumentCountError</source>
          <target state="translated">ArgumentCountError</target>
        </trans-unit>
        <trans-unit id="e3983d33ededa60d1f848dcc4abed420b20ea369" translate="yes" xml:space="preserve">
          <source>ArgumentCountError &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542b46f4ffd56ac7b250bb89444da18d4417ee12" translate="yes" xml:space="preserve">
          <source>Arguments may be left out in order from right to left; any arguments thus omitted will be set to the current value according to the local date and time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910f51295e5966f9532a35a2bdc79fd4005b31d7" translate="yes" xml:space="preserve">
          <source>Arguments of custom class constructor when the &lt;code&gt;fetch_style&lt;/code&gt; parameter is &lt;strong&gt;&lt;code&gt;PDO::FETCH_CLASS&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff243a0eb107b86075ec2bfaed493f2b109a3be1" translate="yes" xml:space="preserve">
          <source>Arguments passed to the Lua function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37f55b85de22178cfb6d45da01fe85db060c995" translate="yes" xml:space="preserve">
          <source>Arguments to insert into the format string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">Operadores aritméticos</target>
        </trans-unit>
        <trans-unit id="4a4e488ea2a3a540b161cf4e4b07943caa9ae81c" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="0ed5ec912a50769b4a4423794c5f76340194d9db" translate="yes" xml:space="preserve">
          <source>ArithmeticError &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="417b856b6b71da56f150ccd740923a8b1dc056a8" translate="yes" xml:space="preserve">
          <source>Array Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d973b3cadf6326338812a31cbc30e1565b2cf7" translate="yes" xml:space="preserve">
          <source>Array Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95a93959b6cb8998b3960dbd5e9db40b4d5059c" translate="yes" xml:space="preserve">
          <source>Array Operators &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6817093df267e9406dbbc0809af13bf278c517db" translate="yes" xml:space="preserve">
          <source>Array consisting of &quot;x&quot; and &quot;y&quot; coordinates of point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45ff09ee4316423a613e3c858e2099f9f29deb4" translate="yes" xml:space="preserve">
          <source>Array consisting of &lt;em&gt;new_wand&lt;/em&gt; and &lt;em&gt;distortion&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45be7636249e02faac24c5635431f0c9b0fef661" translate="yes" xml:space="preserve">
          <source>Array containing location information about timezone or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d67144d18d6555ab71e4a91a601461b5adc6603" translate="yes" xml:space="preserve">
          <source>Array containing monetary groupings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0732cab03dcbb158b265eba0fb638ecb6e0973cd" translate="yes" xml:space="preserve">
          <source>Array containing numeric groupings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab200552b1bfd944f422ee820386f8d86c533d0" translate="yes" xml:space="preserve">
          <source>Array dereferencing a scalar value which is not a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; silently yields &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;, i.e. without issuing an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa883f220eed639ceb2ad74dbff5bfb3c5daa41" translate="yes" xml:space="preserve">
          <source>Array do's and don'ts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66c801699da361aa09dc23b9f4faae61cac7021" translate="yes" xml:space="preserve">
          <source>Array element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5279cbbcc2498dd37af92f6a653a8bb9f07c6bdf" translate="yes" xml:space="preserve">
          <source>Array elements can be accessed using the &lt;em&gt;array[key]&lt;/em&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460ffdd813dc99c42843fc8b62a7efe1bdf6b6ff" translate="yes" xml:space="preserve">
          <source>Array keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579af3f941103a32e54698407a74735aa90c281e" translate="yes" xml:space="preserve">
          <source>Array of Shared Memory Allocation data; &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e4b6c61bfc121d37afbdbf45e10bcc6fe805ae" translate="yes" xml:space="preserve">
          <source>Array of all matches in multi-dimensional array ordered according to &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b01bd351d45d18139348a6a2433e96d1398f1a" translate="yes" xml:space="preserve">
          <source>Array of arguments passed to the script. When the script is run on the command line, this gives C-style access to the command line parameters. When called via the GET method, this will contain the query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae1bf93ad4fb85b5e69544bcd709b75ea95f26a" translate="yes" xml:space="preserve">
          <source>Array of arguments to pass to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b2f3367e4d5058c6c8178250b915b8435a5bee" translate="yes" xml:space="preserve">
          <source>Array of attribute names, listing attributes that are updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19a5a086371580c9fdd3490d2df48a2cd6f821d" translate="yes" xml:space="preserve">
          <source>Array of attribute values that maps document IDs to overridden attribute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6888483338c34a016ad39f74c8c0c9f2f23baf" translate="yes" xml:space="preserve">
          <source>Array of cached data (and meta-data) or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec808800ca4881600bf5492b0c9a6079855cec56" translate="yes" xml:space="preserve">
          <source>Array of encrypted keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc8f31dd137d08b71f63b9462b93bff6c06aae2" translate="yes" xml:space="preserve">
          <source>Array of extension names the extension to be registered depends on. Any such extension is enabled automatically when this extension is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9d0f6d7a5a58351482e9b6d4550ac0a8d84256" translate="yes" xml:space="preserve">
          <source>Array of keys to be used. Illegal values for key will be converted to &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cfe76b4fb25152b3c058042b33c4f8247e6d38" translate="yes" xml:space="preserve">
          <source>Array of keys to request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb8a0d78cb45914bb654367fd380a9174ee7493" translate="yes" xml:space="preserve">
          <source>Array of keys to retrieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbbd03f8ac59cc46d472cfab94f3fd844e60692" translate="yes" xml:space="preserve">
          <source>Array of options as in &lt;a href=&quot;https://secure.php.net/manual/en/context.php&quot;&gt;context options and parameters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996466ef846be366596060a9478a3722cf9d51aa" translate="yes" xml:space="preserve">
          <source>Array of public key resource identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825e90e0c27022a60e9e89533737fc9d47aa52d4" translate="yes" xml:space="preserve">
          <source>Array of request parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a0f15e2d3c4cc1ddc81b6af37f0808980a2f0b" translate="yes" xml:space="preserve">
          <source>Array of server statistics, one entry per server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f525b7f4db1e5c1b7f5894aedd8c7e394ed6024" translate="yes" xml:space="preserve">
          <source>Array of server versions, one entry per server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c37809bd909981812affc28f7056a0534d47ef9" translate="yes" xml:space="preserve">
          <source>Array of signals to wait for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf56d5f43e6137eba8a1574449f8719825070033" translate="yes" xml:space="preserve">
          <source>Array of strings to sort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e552622571724dcc2d90ae38b0ae7bc04321976" translate="yes" xml:space="preserve">
          <source>Array of strings to sort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b78301b22e1a61a65d9dd614c7caa815e785d4" translate="yes" xml:space="preserve">
          <source>Array of strings with documents' contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d578fbfd560ec64931162339f0e13255ef6c2a3" translate="yes" xml:space="preserve">
          <source>Array of the servers to add to the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20379edb8d83daf5bd9e7e09299bc0e2fa6ff4a" translate="yes" xml:space="preserve">
          <source>Array of two elements: IP address and the &lt;em&gt;server&lt;/em&gt; port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f638041d823ed83b83249fd7713e195ae96f036" translate="yes" xml:space="preserve">
          <source>Array of values that will be used as keys. Illegal values for key will be converted to &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a5204b7de6b54a298842746ef605726e36529a" translate="yes" xml:space="preserve">
          <source>Array returned by &lt;a href=&quot;function.xmlrpc-decode&quot;&gt;xmlrpc_decode()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84c70ccda5b26ca9a173914dfaf9939c12096cb" translate="yes" xml:space="preserve">
          <source>Array specifying output options may contain (default values are emphasised):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f18a7c96a66ffd22a294b43958c21a9f605bd0c" translate="yes" xml:space="preserve">
          <source>Array with fewer members is smaller, if key from operand 1 is not found in operand 2 then arrays are uncomparable, otherwise - compare value by value (see following example)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c753cd34c5e12459c1f439c7bf365142ce2ee8b" translate="yes" xml:space="preserve">
          <source>Array with keys &quot;x&quot;, &quot;y&quot;, &quot;width&quot; and &quot;height&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e650b0eedc5e8dd46d1fdbfa3b7fe56149f322e8" translate="yes" xml:space="preserve">
          <source>Array with keys 0 to 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e9a650624d7977dd20c00a5c10ca3556713fd3" translate="yes" xml:space="preserve">
          <source>Array with the opened archive's signature in &lt;em&gt;hash&lt;/em&gt; key and &lt;em&gt;MD5&lt;/em&gt;, &lt;em&gt;SHA-1&lt;/em&gt;, &lt;em&gt;SHA-256&lt;/em&gt;, &lt;em&gt;SHA-512&lt;/em&gt;, or &lt;em&gt;OpenSSL&lt;/em&gt; in &lt;em&gt;hash_type&lt;/em&gt;. This signature is a hash calculated on the entire phar's contents, and may be used to verify the integrity of the archive. A valid signature is absolutely required of all executable phar archives if the &lt;a href=&quot;https://secure.php.net/manual/en/phar.configuration.php#ini.phar.require-hash&quot;&gt;phar.require_hash&lt;/a&gt; INI variable is set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa444ddf60b5af340e250ed2cf75a0125076ce6" translate="yes" xml:space="preserve">
          <source>Array with the varnish statistic snapshot. The array keys are identical to that in the varnishstat tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdee861b21ad2805e9918346ab7f5fe6271c6bf" translate="yes" xml:space="preserve">
          <source>ArrayAccess &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8324669ab3b853e8aa70f1f96d5bbd88c9a2192a" translate="yes" xml:space="preserve">
          <source>ArrayAccess (interface)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de477fed2dddda9c2a53064c07fea970d372eb4" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetExists</source>
          <target state="translated">ArrayAccess::offsetExists</target>
        </trans-unit>
        <trans-unit id="df63629ed393323b389fba41c8cd0ee99376d40d" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetExists &amp;mdash; Whether an offset exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadf814b08858af9a189102df934eb4eeea2e7d5" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetExists &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1bf6b6f5109fc10aba18d69e0b45016fbb48f3" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetGet</source>
          <target state="translated">ArrayAccess::offsetGet</target>
        </trans-unit>
        <trans-unit id="0ea386a70a3f0bdc20493d5740d35fa8a039bf7d" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetGet &amp;mdash; Offset to retrieve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e22c9c7bfb2d9f69e1504c5aae8b17b8934c94a" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetGet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7933b3952fbea2a5e7d9d739a31322cd4f3b76ee" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetSet</source>
          <target state="translated">ArrayAccess::offsetSet</target>
        </trans-unit>
        <trans-unit id="e4fca6e27e5eef48f2c9809a6afa1ad52d431e6d" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetSet &amp;mdash; Assign a value to the specified offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ec45be0e660dee7b03868f622b4a3ec7ee304c" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetSet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339a657715a124eca5808ec94ae4fce6d18f0b3e" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetUnset</source>
          <target state="translated">ArrayAccess::offsetUnset</target>
        </trans-unit>
        <trans-unit id="6b7d751924c0f8d5fe57b59a22a9525f9d3d9db6" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetUnset &amp;mdash; Unset an offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ba5237e814c70d1ed6d0a0edacc6a0fa841dc1" translate="yes" xml:space="preserve">
          <source>ArrayAccess::offsetUnset &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4ce3371f4cbb12ec1a2d05437df170eb2f636e" translate="yes" xml:space="preserve">
          <source>ArrayIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d01cc4431e576b2fe9f0baf29ff913374ef5857" translate="yes" xml:space="preserve">
          <source>ArrayIterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c597feaa76597f81dfa9a15ed92652386c0099" translate="yes" xml:space="preserve">
          <source>ArrayIterator Flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41dfe9ef9a0b29e845ed984afdb278b74941500" translate="yes" xml:space="preserve">
          <source>ArrayIterator::ARRAY_AS_PROPS</source>
          <target state="translated">ArrayIterator::ARRAY_AS_PROPS</target>
        </trans-unit>
        <trans-unit id="e690e2534631fe69de085e17e0b0639c938d551e" translate="yes" xml:space="preserve">
          <source>ArrayIterator::STD_PROP_LIST</source>
          <target state="translated">ArrayIterator::STD_PROP_LIST</target>
        </trans-unit>
        <trans-unit id="bd899cbbc8ea66d46b2f4dfb7fe11d3abf761470" translate="yes" xml:space="preserve">
          <source>ArrayIterator::__construct</source>
          <target state="translated">ArrayIterator::__construct</target>
        </trans-unit>
        <trans-unit id="362a35df0c9285114f503850b0045733d5d9aeff" translate="yes" xml:space="preserve">
          <source>ArrayIterator::__construct &amp;mdash; Construct an ArrayIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5873ccf67ed02350f557839a10d9ce44a38b8fb3" translate="yes" xml:space="preserve">
          <source>ArrayIterator::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b29f1a6eaac98bdea1f0175b38da6eede914656" translate="yes" xml:space="preserve">
          <source>ArrayIterator::append</source>
          <target state="translated">ArrayIterator::append</target>
        </trans-unit>
        <trans-unit id="29715d285a477b3c542cca30081751b2a9a0cf47" translate="yes" xml:space="preserve">
          <source>ArrayIterator::append &amp;mdash; Append an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78acc689f9bb41ea1b4c2e1df6b2ca8b284e1b59" translate="yes" xml:space="preserve">
          <source>ArrayIterator::append &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e0aa7b05f32b44556a96e0f3be68eb1e689865" translate="yes" xml:space="preserve">
          <source>ArrayIterator::asort</source>
          <target state="translated">ArrayIterator::asort</target>
        </trans-unit>
        <trans-unit id="d20c6573716ae743565102e366d031fbdd17a799" translate="yes" xml:space="preserve">
          <source>ArrayIterator::asort &amp;mdash; Sort array by values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9267175ef97cf0aa29588feecc6acdeb21c9bdc8" translate="yes" xml:space="preserve">
          <source>ArrayIterator::asort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e0dc711df1319d793ac9facaf54c0009ee35ee" translate="yes" xml:space="preserve">
          <source>ArrayIterator::count</source>
          <target state="translated">ArrayIterator::count</target>
        </trans-unit>
        <trans-unit id="e44713cf29d81d4ce919317253f8fef8de6500b3" translate="yes" xml:space="preserve">
          <source>ArrayIterator::count &amp;mdash; Count elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3740d1526c06c98fd65b56535b9fc2f30604af20" translate="yes" xml:space="preserve">
          <source>ArrayIterator::count &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22578aac7cc024be643fa369e9dac512f778b524" translate="yes" xml:space="preserve">
          <source>ArrayIterator::current</source>
          <target state="translated">ArrayIterator::current</target>
        </trans-unit>
        <trans-unit id="6d666918584c51ffde35a548cf85887637bf1ac0" translate="yes" xml:space="preserve">
          <source>ArrayIterator::current &amp;mdash; Return current array entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d5602bfa2c9eddd794c1b834b4cebb6d88f966" translate="yes" xml:space="preserve">
          <source>ArrayIterator::current &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8c5c982aed120656165bac36d21591b82da5f7" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getArrayCopy</source>
          <target state="translated">ArrayIterator::getArrayCopy</target>
        </trans-unit>
        <trans-unit id="a2d92fd6055d62c27659f3686a60cc1cc4049349" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getArrayCopy &amp;mdash; Get array copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8cdf92b2dbc69fd0b188b86cf9bf21e9a38305" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getArrayCopy &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df84d02bc5331dba2cdb8bc0cd5772c27dbd8bc6" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getFlags</source>
          <target state="translated">ArrayIterator::getFlags</target>
        </trans-unit>
        <trans-unit id="2607f511d6ce5296203a185b8d0f8d311f7ebb96" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getFlags &amp;mdash; Get behavior flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dff81dfe1293a82f04780bca60a2242218b32b" translate="yes" xml:space="preserve">
          <source>ArrayIterator::getFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f289d401fc47df749539bc5f8e4a195d59afeb" translate="yes" xml:space="preserve">
          <source>ArrayIterator::key</source>
          <target state="translated">ArrayIterator::key</target>
        </trans-unit>
        <trans-unit id="c751f88f666c16c645064a1e801c982214078f8c" translate="yes" xml:space="preserve">
          <source>ArrayIterator::key &amp;mdash; Return current array key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efd4015f5570ef4aaae56962f9f6ce57cba2ab8" translate="yes" xml:space="preserve">
          <source>ArrayIterator::key &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f723e5743172c6dfaf5473e1cbbef3ea2e15b07" translate="yes" xml:space="preserve">
          <source>ArrayIterator::ksort</source>
          <target state="translated">ArrayIterator::ksort</target>
        </trans-unit>
        <trans-unit id="0bf7991a45095c4501377e3da78355d9f2b486aa" translate="yes" xml:space="preserve">
          <source>ArrayIterator::ksort &amp;mdash; Sort array by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d5075eb532d6b06cd391081d913a99337cdc5a" translate="yes" xml:space="preserve">
          <source>ArrayIterator::ksort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05c7c57457ed3f0881285b3c71066b30586dd6c" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natcasesort</source>
          <target state="translated">ArrayIterator::natcasesort</target>
        </trans-unit>
        <trans-unit id="82dfa8c26d78210d65c25f5bdc85f9c712061092" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natcasesort &amp;mdash; Sort an array naturally, case insensitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9071273f456be3b5666f1641e50dd1e2ed9013ab" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natcasesort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428ad3938bcc81dbe0f4af987d90f457b764eba8" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natsort</source>
          <target state="translated">ArrayIterator::natsort</target>
        </trans-unit>
        <trans-unit id="5fd6e023c65ef47d01e765adc6b0b902a84079ff" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natsort &amp;mdash; Sort an array naturally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f55c64fd6bb3b3bc8d344338ebe8b05bbcffe5" translate="yes" xml:space="preserve">
          <source>ArrayIterator::natsort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e80b6c5bf422c045936409142e8bdf730dba1ca" translate="yes" xml:space="preserve">
          <source>ArrayIterator::next</source>
          <target state="translated">ArrayIterator::next</target>
        </trans-unit>
        <trans-unit id="3cd6c456e61edfe3620f52bbdfcf102a3daaf73e" translate="yes" xml:space="preserve">
          <source>ArrayIterator::next &amp;mdash; Move to next entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ce8602a8f3616cc1caaa85361839336a0e8f76" translate="yes" xml:space="preserve">
          <source>ArrayIterator::next &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda1ee036377d7f8ac329a81b004f8da0a1addf8" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetExists</source>
          <target state="translated">ArrayIterator::offsetExists</target>
        </trans-unit>
        <trans-unit id="9e2ef84ed1539814c3d3b553811ff6199f19f42b" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetExists &amp;mdash; Check if offset exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8c88e217e2b932cca07f32043a50822e088334" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetExists &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc036ba6f14810d99422ddc6d4c9a5d668baf168" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetGet</source>
          <target state="translated">ArrayIterator::offsetGet</target>
        </trans-unit>
        <trans-unit id="8493108d20a9642d0d02a29bd013a671db30c8fc" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetGet &amp;mdash; Get value for an offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd010a3ca77be3827a6a0fd00773025fbb2530a7" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetGet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47b2a63a72576bc2e147b6db501ecf7df02339e" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetSet</source>
          <target state="translated">ArrayIterator::offsetSet</target>
        </trans-unit>
        <trans-unit id="fef153d8d9624601e8584480c4fcf3d47be5c665" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetSet &amp;mdash; Set value for an offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb77e45a533c17030a09ec427a717a1b215b376" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetSet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4472902759703738bbc738800611cf01146bea3" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetUnset</source>
          <target state="translated">ArrayIterator::offsetUnset</target>
        </trans-unit>
        <trans-unit id="1c00046974368784ff85d422da24f8190519aa0d" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetUnset &amp;mdash; Unset value for an offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db172b6442d8c74445d9043780796b98f0d53fe" translate="yes" xml:space="preserve">
          <source>ArrayIterator::offsetUnset &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e377f59be85e1f48c51db198e1f9ffb5afee65" translate="yes" xml:space="preserve">
          <source>ArrayIterator::rewind</source>
          <target state="translated">ArrayIterator::rewind</target>
        </trans-unit>
        <trans-unit id="759c2bdda03f0a879161bb29a6907c6b8c38b49c" translate="yes" xml:space="preserve">
          <source>ArrayIterator::rewind &amp;mdash; Rewind array back to the start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba95afad93beea3381704b4de912f2860ad8528" translate="yes" xml:space="preserve">
          <source>ArrayIterator::rewind &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c39f099e05ce4bf59e28844d5375546037ed94" translate="yes" xml:space="preserve">
          <source>ArrayIterator::seek</source>
          <target state="translated">ArrayIterator::seek</target>
        </trans-unit>
        <trans-unit id="58a6428c25c54d2c98ccd7644e4f2e1a1bef2ce0" translate="yes" xml:space="preserve">
          <source>ArrayIterator::seek &amp;mdash; Seek to position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61eeb8e68bb954c5fb2383823188414bdae54419" translate="yes" xml:space="preserve">
          <source>ArrayIterator::seek &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8260d2472aeb2c0cf58e3d1a926183546f1b458c" translate="yes" xml:space="preserve">
          <source>ArrayIterator::serialize</source>
          <target state="translated">ArrayIterator::serialize</target>
        </trans-unit>
        <trans-unit id="5a253fdde1184197dae0f4e228446907ebe80865" translate="yes" xml:space="preserve">
          <source>ArrayIterator::serialize &amp;mdash; Serialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c0f64235337bbdcb5a3ec8506baa0672370ba2" translate="yes" xml:space="preserve">
          <source>ArrayIterator::serialize &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01881f23d6a6a54c02508024292a1b12acfee302" translate="yes" xml:space="preserve">
          <source>ArrayIterator::setFlags</source>
          <target state="translated">ArrayIterator::setFlags</target>
        </trans-unit>
        <trans-unit id="d59904c01a3370bd4aa9317061bf55ac852924b4" translate="yes" xml:space="preserve">
          <source>ArrayIterator::setFlags &amp;mdash; Set behaviour flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e0e5428a24b84ab52b9d20c45d3ffbfc816906" translate="yes" xml:space="preserve">
          <source>ArrayIterator::setFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4b76c4408d7c8467facff326bc586dfe785347" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uasort</source>
          <target state="translated">ArrayIterator::uasort</target>
        </trans-unit>
        <trans-unit id="97d6a32d9808eccb8036929a9dc3f298959ecd74" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uasort &amp;mdash; Sort with a user-defined comparison function and maintain index association</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb9cb159d33d8a074c0c892bdd0714a2777d089" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uasort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea3a23a738de39ad49fbc86a3d96662cfb06be2" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uksort</source>
          <target state="translated">ArrayIterator::uksort</target>
        </trans-unit>
        <trans-unit id="04135b578dc5688001bfc53dbd87af7335eb3617" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uksort &amp;mdash; Sort by keys using a user-defined comparison function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10debac189782485a06435823230cdc7101d49d" translate="yes" xml:space="preserve">
          <source>ArrayIterator::uksort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1bf3425fdbf1a87b4d8a0f626e19a7076be0d0" translate="yes" xml:space="preserve">
          <source>ArrayIterator::unserialize</source>
          <target state="translated">ArrayIterator::unserialize</target>
        </trans-unit>
        <trans-unit id="a6210f514b28003c96f6d0611e05af6a4a4f915f" translate="yes" xml:space="preserve">
          <source>ArrayIterator::unserialize &amp;mdash; Unserialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec53602a8f6f10cae7fea3499d5d2d8515321e55" translate="yes" xml:space="preserve">
          <source>ArrayIterator::unserialize &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5502348d81182f42643d0dc60e29c8612a8d7865" translate="yes" xml:space="preserve">
          <source>ArrayIterator::valid</source>
          <target state="translated">ArrayIterator::valid</target>
        </trans-unit>
        <trans-unit id="b8cd4f73d45dc305e41544bcf10be030e55be997" translate="yes" xml:space="preserve">
          <source>ArrayIterator::valid &amp;mdash; Check whether array contains more entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da141017b81945ec4fa5062eceaca0bdf9fd8a45" translate="yes" xml:space="preserve">
          <source>ArrayIterator::valid &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebc09d0f0d723e692791cf32583f3d81415f121" translate="yes" xml:space="preserve">
          <source>ArrayObject (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f25238fe8263c5aba10b2aac26e38ea32eb435" translate="yes" xml:space="preserve">
          <source>ArrayObject Flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77f2a09b715853632b081d55d6d24f60e6f536c" translate="yes" xml:space="preserve">
          <source>ArrayObject::ARRAY_AS_PROPS</source>
          <target state="translated">ArrayObject::ARRAY_AS_PROPS</target>
        </trans-unit>
        <trans-unit id="c6d454b9cbafa5776465663509c0928252627b7e" translate="yes" xml:space="preserve">
          <source>ArrayObject::STD_PROP_LIST</source>
          <target state="translated">ArrayObject::STD_PROP_LIST</target>
        </trans-unit>
        <trans-unit id="be685f030c4a0133c4362bf68c83066062eb6616" translate="yes" xml:space="preserve">
          <source>ArrayObject::__construct</source>
          <target state="translated">ArrayObject::__construct</target>
        </trans-unit>
        <trans-unit id="b2e748e547fd5d96d58793bfe2d74d3ac122adb9" translate="yes" xml:space="preserve">
          <source>ArrayObject::__construct &amp;mdash; Construct a new array object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4de2c8594d99d8bc5f9c2dbf4d6a82f701d3e5" translate="yes" xml:space="preserve">
          <source>ArrayObject::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ffa9d93a84fed977c94faa48c8eb92589c4115" translate="yes" xml:space="preserve">
          <source>ArrayObject::append</source>
          <target state="translated">ArrayObject::append</target>
        </trans-unit>
        <trans-unit id="825297cccaeb91dcb518db61c5b78a800e24a840" translate="yes" xml:space="preserve">
          <source>ArrayObject::append &amp;mdash; Appends the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c66e1f3bb9597000aefe936eae26500912705ea" translate="yes" xml:space="preserve">
          <source>ArrayObject::append &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9121bad4f471108f0e8e98f273668f79f38e1103" translate="yes" xml:space="preserve">
          <source>ArrayObject::asort</source>
          <target state="translated">ArrayObject::asort</target>
        </trans-unit>
        <trans-unit id="bff64fcbc517c8b5714950e1d800bb1385abc955" translate="yes" xml:space="preserve">
          <source>ArrayObject::asort &amp;mdash; Sort the entries by value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20846444bf5d613d7592c93daa4d913a3311f15c" translate="yes" xml:space="preserve">
          <source>ArrayObject::asort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02138dae54b6dead62aa3e02e4dca7313e2d370e" translate="yes" xml:space="preserve">
          <source>ArrayObject::count</source>
          <target state="translated">ArrayObject::count</target>
        </trans-unit>
        <trans-unit id="4abdabaa1ed05182de8c2019401101e81b49e932" translate="yes" xml:space="preserve">
          <source>ArrayObject::count &amp;mdash; Get the number of public properties in the ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdc1a31f874addbef35763999da5b55bc786f1e" translate="yes" xml:space="preserve">
          <source>ArrayObject::count &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f72100bdabddc0ea3df63b70c5756e8a6067bd" translate="yes" xml:space="preserve">
          <source>ArrayObject::exchangeArray</source>
          <target state="translated">ArrayObject::exchangeArray</target>
        </trans-unit>
        <trans-unit id="e05dd820398cf29b560292c03bc9e2941566b072" translate="yes" xml:space="preserve">
          <source>ArrayObject::exchangeArray &amp;mdash; Exchange the array for another one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b25ba7e89136d50a870ed78c25527cff6e370f0" translate="yes" xml:space="preserve">
          <source>ArrayObject::exchangeArray &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333177b47ffbae39a344f3649a942c50a967e874" translate="yes" xml:space="preserve">
          <source>ArrayObject::getArrayCopy</source>
          <target state="translated">ArrayObject::getArrayCopy</target>
        </trans-unit>
        <trans-unit id="7f35a9199d909783e8403d2711ea490c5cee2ee5" translate="yes" xml:space="preserve">
          <source>ArrayObject::getArrayCopy &amp;mdash; Creates a copy of the ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cbba9dcb3a21207b22a9fb05d84388a6c1594c" translate="yes" xml:space="preserve">
          <source>ArrayObject::getArrayCopy &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644c913b2254e6eb86ab2cdf76dcd037a5a240a7" translate="yes" xml:space="preserve">
          <source>ArrayObject::getFlags</source>
          <target state="translated">ArrayObject::getFlags</target>
        </trans-unit>
        <trans-unit id="2ff79ba662570eeab9443554ff884c9c5cbcd645" translate="yes" xml:space="preserve">
          <source>ArrayObject::getFlags &amp;mdash; Gets the behavior flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5215ce0ca743dd6a74ebd9bfe5365b085cc765ba" translate="yes" xml:space="preserve">
          <source>ArrayObject::getFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4f38fa11aef7ba4398ad02473d86059c14914f" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIterator</source>
          <target state="translated">ArrayObject::getIterator</target>
        </trans-unit>
        <trans-unit id="a7c693b2b73ed6023df07bac9279a1f156f51a44" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIterator &amp;mdash; Create a new iterator from an ArrayObject instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a48abfb620f8846ee62b966fb8b599457e4ebc" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d0e6ca3ade46ae4c40b03327da45d7cf92b1c9" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIteratorClass</source>
          <target state="translated">ArrayObject::getIteratorClass</target>
        </trans-unit>
        <trans-unit id="a7ae0932701fa610aef676b80b260e7b7236057d" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIteratorClass &amp;mdash; Gets the iterator classname for the ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9b4f3c06464b5ba55c012a2dc7bd3cfe5fda79" translate="yes" xml:space="preserve">
          <source>ArrayObject::getIteratorClass &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93f8e7b6306053167c6e6454845392ede2b62bb" translate="yes" xml:space="preserve">
          <source>ArrayObject::ksort</source>
          <target state="translated">ArrayObject::ksort</target>
        </trans-unit>
        <trans-unit id="eb0dce2517648e42e649b31577036d37b7a496cc" translate="yes" xml:space="preserve">
          <source>ArrayObject::ksort &amp;mdash; Sort the entries by key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f200a99ddac69953588df8b43d3a5a6cebb345ca" translate="yes" xml:space="preserve">
          <source>ArrayObject::ksort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3eb940ee028fa0dc7c80b6fce733281c5bf329" translate="yes" xml:space="preserve">
          <source>ArrayObject::natcasesort</source>
          <target state="translated">ArrayObject::natcasesort</target>
        </trans-unit>
        <trans-unit id="bf7b08f576bd29143b86f31f0e551ae5b276e7a4" translate="yes" xml:space="preserve">
          <source>ArrayObject::natcasesort &amp;mdash; Sort an array using a case insensitive &quot;natural order&quot; algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec9c3d76d2f683c5029445776ca1ce57c71c8fc" translate="yes" xml:space="preserve">
          <source>ArrayObject::natcasesort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625c7f91682471d732a0b65144cc45977c489364" translate="yes" xml:space="preserve">
          <source>ArrayObject::natsort</source>
          <target state="translated">ArrayObject::natsort</target>
        </trans-unit>
        <trans-unit id="51cf7bd7adf311970f6abde7a7589be2cfdbdf81" translate="yes" xml:space="preserve">
          <source>ArrayObject::natsort &amp;mdash; Sort entries using a &quot;natural order&quot; algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86905ad103e02911c229b891a6777f96bc2dd03" translate="yes" xml:space="preserve">
          <source>ArrayObject::natsort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49f5585221a83bef4d038b67fb34f07e913506e" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetExists</source>
          <target state="translated">ArrayObject::offsetExists</target>
        </trans-unit>
        <trans-unit id="d4477630accfb4ac0014edbe526fdfd72ae1dfa2" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetExists &amp;mdash; Returns whether the requested index exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995b88c5e00d32fc8c802a21509736ecb0a25eb9" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetExists &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369b59a6cfef2f5f8084a757fa4a77596c6715a5" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetGet</source>
          <target state="translated">ArrayObject::offsetGet</target>
        </trans-unit>
        <trans-unit id="3b023ead42c9a0a1793c86bac08cc85915dfe52b" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetGet &amp;mdash; Returns the value at the specified index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9cd8a32eb46bdb60e803c909a53e639d0c2964" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetGet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a9b28f8a088c4bdcaada272f0bddd3f40bc02b" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetSet</source>
          <target state="translated">ArrayObject::offsetSet</target>
        </trans-unit>
        <trans-unit id="2bbc759dac8eb8249206b5b960de6cc68d9da484" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetSet &amp;mdash; Sets the value at the specified index to newval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c63a8d325287fad5fdc6b6a75cae716b6ded8f6" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetSet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436b3d02b13fc354d29444105d84986c3bc5c40c" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetUnset</source>
          <target state="translated">ArrayObject::offsetUnset</target>
        </trans-unit>
        <trans-unit id="e106d9bf7611138585ade6e07bf9a7d3c985b4f1" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetUnset &amp;mdash; Unsets the value at the specified index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d04cc2db6feef63dec9b2d666c4e3f770e6016" translate="yes" xml:space="preserve">
          <source>ArrayObject::offsetUnset &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1931cf94a131950c5ea88807f6fd2794ee55eed" translate="yes" xml:space="preserve">
          <source>ArrayObject::serialize</source>
          <target state="translated">ArrayObject::serialize</target>
        </trans-unit>
        <trans-unit id="d556d12fe363a8cb4c5be2205899ff23fec32eff" translate="yes" xml:space="preserve">
          <source>ArrayObject::serialize &amp;mdash; Serialize an ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b965d6c51f3a91ea2edea2c8a4499c66bb6310" translate="yes" xml:space="preserve">
          <source>ArrayObject::serialize &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27190647782ef471b14af446cb42ab138eb26782" translate="yes" xml:space="preserve">
          <source>ArrayObject::setFlags</source>
          <target state="translated">ArrayObject::setFlags</target>
        </trans-unit>
        <trans-unit id="3369de8f05823163e37549e00ace4cebc322502c" translate="yes" xml:space="preserve">
          <source>ArrayObject::setFlags &amp;mdash; Sets the behavior flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e49a113edd5d2b147535682b46bf0fae499bd7" translate="yes" xml:space="preserve">
          <source>ArrayObject::setFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579c21a6a8a547b7483c57621b366c6f7fed6cfa" translate="yes" xml:space="preserve">
          <source>ArrayObject::setIteratorClass</source>
          <target state="translated">ArrayObject::setIteratorClass</target>
        </trans-unit>
        <trans-unit id="73476daf10b1323bf010596e5fbe19d6562e0ec6" translate="yes" xml:space="preserve">
          <source>ArrayObject::setIteratorClass &amp;mdash; Sets the iterator classname for the ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f364a70684ffcd1fd29324b4a24a0724596fbf" translate="yes" xml:space="preserve">
          <source>ArrayObject::setIteratorClass &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de44d114d43f8f3425f07587b86abe73e78317b5" translate="yes" xml:space="preserve">
          <source>ArrayObject::uasort</source>
          <target state="translated">ArrayObject::uasort</target>
        </trans-unit>
        <trans-unit id="a33889b945c27c9ecf9de72d73b96a4cd5aad6da" translate="yes" xml:space="preserve">
          <source>ArrayObject::uasort &amp;mdash; Sort the entries with a user-defined comparison function and maintain key association</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df19c450cb168e59b860856d9fe82f9e6763130" translate="yes" xml:space="preserve">
          <source>ArrayObject::uasort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe9288cb6fd9f853e394ec17e3ff403e4e54384" translate="yes" xml:space="preserve">
          <source>ArrayObject::uksort</source>
          <target state="translated">ArrayObject::uksort</target>
        </trans-unit>
        <trans-unit id="c5f62bf72c28740e9884ddb9fae2f33d9acc6245" translate="yes" xml:space="preserve">
          <source>ArrayObject::uksort &amp;mdash; Sort the entries by keys using a user-defined comparison function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d37f08124e28916e817216be9636776d5c5b97" translate="yes" xml:space="preserve">
          <source>ArrayObject::uksort &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c9403d730684d359528d9bde715de10e554b33" translate="yes" xml:space="preserve">
          <source>ArrayObject::unserialize</source>
          <target state="translated">ArrayObject::unserialize</target>
        </trans-unit>
        <trans-unit id="df4ef46e5c14366fe5d4f69659348a676e86d160" translate="yes" xml:space="preserve">
          <source>ArrayObject::unserialize &amp;mdash; Unserialize an ArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57be5ef24357739ccdf346aa0e10d7b65946ff3c" translate="yes" xml:space="preserve">
          <source>ArrayObject::unserialize &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="193293450c1df8b662c13455f01982af0f921eac" translate="yes" xml:space="preserve">
          <source>Arrays &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad00633798cdf2e2cbfa0dfdb987ebc78b3e41a" translate="yes" xml:space="preserve">
          <source>Arrays and objects are considered equal to zero when calculating the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5057d717f0d84d04c53c3d4cdae5816a06db5536" translate="yes" xml:space="preserve">
          <source>Arrays from which elements will be extracted. Values from later arrays overwrite the previous values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a14c0392b304f27cfa491b41ab00cc269ad8f3" translate="yes" xml:space="preserve">
          <source>Arrays, which are valid callables, are allowed as variable functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a76a0bc63a506f3f30aeabd35d81974d23b4d0" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; variables hold special handles to opened files, database connections, image canvas areas and the like, converting to a &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; makes no sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c1729d182d1c489eb4b282de8851b224b74e14" translate="yes" xml:space="preserve">
          <source>As &lt;em&gt;foreach&lt;/em&gt; relies on the internal array pointer in PHP 5, changing it within the loop may lead to unexpected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac40081b6f6d0c37864e800eb6c8af39788cacf" translate="yes" xml:space="preserve">
          <source>As &lt;strong&gt;idate()&lt;/strong&gt; always returns an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; and as they can't start with a &quot;0&quot;, &lt;strong&gt;idate()&lt;/strong&gt; may return fewer digits than you would expect. See the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba22553d46d69c51ddeb2fc19c181ce8e3ac1bf" translate="yes" xml:space="preserve">
          <source>As &lt;strong&gt;mysqli_fetch_all()&lt;/strong&gt; returns all the rows as an array in a single step, it may consume more memory than some similar functions such as &lt;a href=&quot;mysqli-result.fetch-array&quot;&gt;mysqli_fetch_array()&lt;/a&gt;, which only returns one row at a time from the result set. Further, if you need to iterate over the result set, you will need a looping construct that will further impact performance. For these reasons &lt;strong&gt;mysqli_fetch_all()&lt;/strong&gt; should only be used in those situations where the fetched result set will be sent to another layer for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a329194c41a784ee23cce6ffe84a20f82ccf70cb" translate="yes" xml:space="preserve">
          <source>As PHP's &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; type is signed, but &lt;strong&gt;dechex()&lt;/strong&gt; deals with unsigned integers, negative integers will be treated as though they were unsigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfdc220eeee6308b5488a46fa0a15985f80dc66" translate="yes" xml:space="preserve">
          <source>As a convenient shorthand, if any option settings are required at the start of a non-capturing subpattern, the option letters may appear between the &quot;?&quot; and the &quot;:&quot;. Thus the two patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d14c00ec2dac16a1d11f5861a0625269766c42" translate="yes" xml:space="preserve">
          <source>As a workaround, you can use the &lt;a href=&quot;function.easter-days&quot;&gt;easter_days()&lt;/a&gt; with &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;class.dateinterval&quot;&gt;DateInterval&lt;/a&gt; to calculate the start of Easter in your PHP time zone as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd217b6172eabc149f1fbb6a011cb601bbb9bf5" translate="yes" xml:space="preserve">
          <source>As all the keys in the above example are cast to &lt;em&gt;1&lt;/em&gt;, the value will be overwritten on every new element and the last assigned value &lt;em&gt;&quot;d&quot;&lt;/em&gt; is the only one left over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57603349e8c574b28d490ac3f381f26a3c4e1ed" translate="yes" xml:space="preserve">
          <source>As an alternative, we can implement an &lt;em&gt;xrange()&lt;/em&gt; generator, which will only ever need enough memory to create an &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt; object and track the current state of the generator internally, which turns out to be less than 1 kilobyte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc93b8a1f064a5aa50fd940f766f071daf8a690a" translate="yes" xml:space="preserve">
          <source>As an interesting note, &lt;strong&gt;Phar::buildFromIterator()&lt;/strong&gt; can also be used to copy the contents of an existing phar archive, as the Phar object descends from &lt;a href=&quot;class.directoryiterator&quot;&gt;DirectoryIterator&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eba7c1d87450eb2809e9bbf1f767e34c2f8ca7" translate="yes" xml:space="preserve">
          <source>As an interesting note, &lt;strong&gt;PharData::buildFromIterator()&lt;/strong&gt; can also be used to copy the contents of an existing phar, tar or zip archive, as the PharData object descends from &lt;a href=&quot;class.directoryiterator&quot;&gt;DirectoryIterator&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbb919a712027a68824ee47b6981465ddff276e" translate="yes" xml:space="preserve">
          <source>As described in &lt;a href=&quot;language.expressions&quot;&gt;the section about expressions&lt;/a&gt;, expression is evaluated to its Boolean value. If expression evaluates to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, PHP will execute statement, and if it evaluates to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; - it'll ignore it. More information about what values evaluate to &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; can be found in the &lt;a href=&quot;language.types.boolean#language.types.boolean.casting&quot;&gt;'Converting to boolean'&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475811bb89d882eb446b58ba5bd203f575023148" translate="yes" xml:space="preserve">
          <source>As directives are handled as the file is being compiled, only literals may be given as directive values. Variables and constants cannot be used. To illustrate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7918dc9dd63c2441abdf44b439adfde1a71f1249" translate="yes" xml:space="preserve">
          <source>As in &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt; (&lt;em&gt;rb&lt;/em&gt; or &lt;em&gt;wb&lt;/em&gt;) but can also include a compression level (&lt;em&gt;wb9&lt;/em&gt;) or a strategy: &lt;em&gt;f&lt;/em&gt; for filtered data as in &lt;em&gt;wb6f&lt;/em&gt;, &lt;em&gt;h&lt;/em&gt; for &lt;em&gt;Huffman only compression&lt;/em&gt; as in &lt;em&gt;wb1h&lt;/em&gt;. (See the description of &lt;em&gt;deflateInit2&lt;/em&gt; in &lt;var&gt;zlib.h&lt;/var&gt; for more information about the strategy parameter.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abccff45e8d574adf61eef7c1a55c7f58112ba36" translate="yes" xml:space="preserve">
          <source>As in C or Perl, PHP requires instructions to be terminated with a semicolon at the end of each statement. The closing tag of a block of PHP code automatically implies a semicolon; you do not need to have a semicolon terminating the last line of a PHP block. The closing tag for the block will include the immediately trailing newline if one is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8210401696a99cbb69717b67cd62e21f6f720e4d" translate="yes" xml:space="preserve">
          <source>As in Perl, you can access a value from the array inside double quotes. However, with PHP you'll need to enclose your array between curly braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184bcfca2614d971cd5434f53ddb2344c626b04d" translate="yes" xml:space="preserve">
          <source>As in single quoted &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s, escaping any other character will result in the backslash being printed too. Before PHP 5.1.1, the backslash in &lt;em&gt;\{$var}&lt;/em&gt; had not been printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a164916607c474c07cbc1fbf5ba221c5d02b37c" translate="yes" xml:space="preserve">
          <source>As mentioned above, if no key is specified, the maximum of the existing &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; indices is taken, and the new key will be that maximum value plus 1 (but at least 0). If no &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; indices exist yet, the key will be &lt;em&gt;0&lt;/em&gt; (zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bef17ca160a3a89abf839641cafed8bb7fc8f65" translate="yes" xml:space="preserve">
          <source>As noted above, providing the &lt;em&gt;salt&lt;/em&gt; option in PHP 7.0 will generate a deprecation warning. Support for providing a salt manually may be removed in a future PHP release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c93fb6d874371f16c4727c9906678321cf65a70" translate="yes" xml:space="preserve">
          <source>As noted in the return value section, &lt;strong&gt;imagecropauto()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; when there is either nothing to crop or the whole image would be cropped. In this example we have an image resource &lt;em&gt;$im&lt;/em&gt; which should be automatically cropped only if there is something to crop; otherwise we want to proceed with the original image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6275fc264a1e0a8ee4cbc66eae91bf2657c19d1" translate="yes" xml:space="preserve">
          <source>As noted in the warning above, testing floating point values for equality is problematic, due to the way that they are represented internally. However, there are ways to make comparisons of floating point values that work around these limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29d39183e604b4bf069f513ed246605448b887e" translate="yes" xml:space="preserve">
          <source>As of 2.1.18, Yaf supports Controllers autoloading for user script side, (which means the autoloading triggered by user php script, eg: access a controller static property in Bootstrap or Plugins), but autoloader only try to locate controller class script under the default module folder, which is &quot;APPLICATION_PATH/controllers/&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24552d8823ec63b9bab018d470ca04d73dff53f9" translate="yes" xml:space="preserve">
          <source>As of 5.3.6, this parameter is a bitmask for the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081e8953c3a26c0e080b4a432d563ad51dbbded2" translate="yes" xml:space="preserve">
          <source>As of 5.4.0, this parameter can be used to limit the number of stack frames printed. By default (&lt;code&gt;limit&lt;/code&gt;=&lt;em&gt;0&lt;/em&gt;) it prints all stack frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad7737fe568225d87cc0b9ef3dd31538063f58f" translate="yes" xml:space="preserve">
          <source>As of 5.4.0, this parameter can be used to limit the number of stack frames returned. By default (&lt;code&gt;limit&lt;/code&gt;=&lt;em&gt;0&lt;/em&gt;) it returns all stack frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05ae8a0bdf3a2ef79f7209205108f44894fdd16" translate="yes" xml:space="preserve">
          <source>As of PHP 4.2.0, the default value for the PHP directive &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.register-globals&quot;&gt;register_globals&lt;/a&gt; is &lt;em&gt; off&lt;/em&gt;. The PHP community discourages developers from relying on this directive, and encourages the use of other means, such as the &lt;a href=&quot;language.variables.predefined&quot;&gt;superglobals&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e465e4ed0d2059b0e1307ef564f62032ee3bbd" translate="yes" xml:space="preserve">
          <source>As of PHP 4.3, the function more properly reflects the functionality as dictated by the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2087&quot;&gt;&amp;raquo; RFC2087&lt;/a&gt;. The array return value has changed to support an unlimited number of returned resources (i.e. messages, or sub-folders) with each named resource receiving an individual array key. Each key value then contains an another array with the usage and limit values within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d822efe8922c89f4edf85a1a1e66078924ce401" translate="yes" xml:space="preserve">
          <source>As of PHP 4.3, this function can (potentially) work on any kind of stream. In PHP 4.3, socket based streams are still the only kind supported in the PHP core, although streams from other extensions may support this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840671db15da31d7df79e5308804e01d19196172" translate="yes" xml:space="preserve">
          <source>As of PHP 4.3.0 PCNTL uses ticks as the signal handle callback mechanism, which is much faster than the previous mechanism. This change follows the same semantics as using &quot;&lt;a href=&quot;control-structures.declare#control-structures.declare.ticks&quot;&gt;user ticks&lt;/a&gt;&quot;. You must use the &lt;a href=&quot;control-structures.declare&quot;&gt;declare()&lt;/a&gt; statement to specify the locations in your program where callbacks are allowed to occur for the signal handler to function properly (as used in the example below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a50c086dbffc34aece747c1558ff6fbc7db8dc8" translate="yes" xml:space="preserve">
          <source>As of PHP 4.3.2, the default mode is set to binary for all platforms that distinguish between binary and text mode. If you are having problems with your scripts after upgrading, try using the &lt;em&gt;'t'&lt;/em&gt; flag as a workaround until you have made your script more portable as mentioned before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ade42d774614d4eb0a2435572f706ad4db14f3" translate="yes" xml:space="preserve">
          <source>As of PHP 4.3.3, calling &lt;strong&gt;session_start()&lt;/strong&gt; after the session was previously started will result in an error of level &lt;strong&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;&lt;/strong&gt;. Also, the second session start will simply be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7901957c594c3124119f4d316068132e0274aba" translate="yes" xml:space="preserve">
          <source>As of PHP 5 the &lt;strong&gt;&lt;code&gt;FILE_USE_INCLUDE_PATH&lt;/code&gt;&lt;/strong&gt; constant can be used to trigger &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.include-path&quot;&gt;include path&lt;/a&gt; search. This is not possible if &lt;a href=&quot;functions.arguments#functions.arguments.type-declaration.strict&quot;&gt;strict typing&lt;/a&gt; is enabled, since &lt;strong&gt;&lt;code&gt;FILE_USE_INCLUDE_PATH&lt;/code&gt;&lt;/strong&gt; is an &lt;a href=&quot;language.types.integer&quot;&gt;int&lt;/a&gt;. Use &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefce2090a72e792838f6a8f085d00d52440ad89" translate="yes" xml:space="preserve">
          <source>As of PHP 5.0.0 &lt;strong&gt;rmdir()&lt;/strong&gt; can also be used with &lt;em&gt;some&lt;/em&gt; URL wrappers. Refer to &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.php&quot;&gt;Supported Protocols and Wrappers&lt;/a&gt; for a listing of which wrappers support &lt;strong&gt;rmdir()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02eb1a45fcab1663e398e7ed79b8cb7b72ba50a" translate="yes" xml:space="preserve">
          <source>As of PHP 5.0.0 &lt;strong&gt;unlink()&lt;/strong&gt; can also be used with &lt;em&gt;some&lt;/em&gt; URL wrappers. Refer to &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.php&quot;&gt;Supported Protocols and Wrappers&lt;/a&gt; for a listing of which wrappers support &lt;strong&gt;unlink()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124b4486c22976bf2bc15240279b5ba4fa7c64b1" translate="yes" xml:space="preserve">
          <source>As of PHP 5.0.0, this function can also be used with &lt;em&gt;some&lt;/em&gt; URL wrappers. Refer to &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.php&quot;&gt;Supported Protocols and Wrappers&lt;/a&gt; to determine which wrappers support &lt;a href=&quot;function.stat&quot;&gt;stat()&lt;/a&gt; family of functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61beeea658ecd8a92b1d2c092b3fedf43d4363a9" translate="yes" xml:space="preserve">
          <source>As of PHP 5.0.0, this function can also be used with &lt;em&gt;some&lt;/em&gt; URL wrappers. Refer to &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.php&quot;&gt;Supported Protocols and Wrappers&lt;/a&gt; to determine which wrappers support &lt;strong&gt;stat()&lt;/strong&gt; family of functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7ee0d8527a62a137d689ebd6fcc7cdbec9d4f9" translate="yes" xml:space="preserve">
          <source>As of PHP 5.0.5 the &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt; handlers are called after object destruction and therefore cannot use objects or throw exceptions. Exceptions are not able to be caught since will not be caught nor will any exception trace be displayed and the execution will just cease unexpectedly. The object destructors can however use sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0091037d7f24bc8775f63a798e4dee95a018bcb" translate="yes" xml:space="preserve">
          <source>As of PHP 5.1, when called with no arguments, &lt;strong&gt;mktime()&lt;/strong&gt; throws an &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; notice: use the &lt;a href=&quot;function.time&quot;&gt;time()&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8da4e76ca5591a6da32a57bdf917de2b0577c0a" translate="yes" xml:space="preserve">
          <source>As of PHP 5.1.0, the &lt;code&gt;is_dst&lt;/code&gt; parameter became deprecated. As a result, the new timezone handling features should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f474f9baf2d28a7a995310426eed34463203c18" translate="yes" xml:space="preserve">
          <source>As of PHP 5.1.0, this parameter became deprecated. As a result, the new timezone handling features should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e332fbae2769114b5a71aca3507377b20d3953ca" translate="yes" xml:space="preserve">
          <source>As of PHP 5.2.2, DateTime objects can be compared using &lt;a href=&quot;language.operators.comparison&quot;&gt;comparison operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6927b22cebdab49f32ab774fdc574e68bd66f8" translate="yes" xml:space="preserve">
          <source>As of PHP 5.2.2, the &lt;em&gt;\g&lt;/em&gt; escape sequence can be used for absolute and relative referencing of subpatterns. This escape sequence must be followed by an unsigned number or a negative number, optionally enclosed in braces. The sequences &lt;em&gt;\1&lt;/em&gt;, &lt;em&gt;\g1&lt;/em&gt; and &lt;em&gt;\g{1}&lt;/em&gt; are synonymous with one another. The use of this pattern with an unsigned number can help remove the ambiguity inherent when using digits following a backslash. The sequence helps to distinguish back references from octal characters and also makes it easier to have a back reference followed by a literal number, e.g. &lt;em&gt;\g{2}1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55765abfb1a56a617946bda420a51743ef16173" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3, you can use namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b6208aaa156db8f487e462a8a9e304ea9bfc3c" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0 &lt;a href=&quot;language.types.string#language.types.string.syntax.heredoc&quot;&gt;heredocs&lt;/a&gt; and &lt;a href=&quot;language.types.string#language.types.string.syntax.nowdoc&quot;&gt;nowdocs&lt;/a&gt; can be used in any static data context, including property declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef63a30124d6e567cf6d960e37a521d6e352701e" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0 &lt;strong&gt;is_callable()&lt;/strong&gt; reports constructors as not being callable. This affects PHP 5 style constructors (&lt;em&gt;__construct&lt;/em&gt;) as well as PHP 4 style constructors (i.e. methods with the same name as the class). Formerly, both cases have been considered callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67c51c103ce02935aa5aab6138f1b34b75476a1" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, PHP contains its own implementation and will use that if the system lacks of support for one or more of the algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1fb5baa2232f148102351b5f93cb0460c26a38" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, PHP implements a feature called late static bindings which can be used to reference the called class in a context of static inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57506e5710eb87ab54ed8b2012fc8e6a64dd9d1" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, it's possible to initialize static variables and class properties/constants using the Heredoc syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c57eb6d1d307a255b452aeb3ea1faf3cf2d1d25" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, it's possible to reference the class using a variable. The variable's value can not be a keyword (e.g. &lt;em&gt;self&lt;/em&gt;, &lt;em&gt;parent&lt;/em&gt; and &lt;em&gt;static&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb0a56728129d02496487110c7834d79222df94" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, it's possible to reference the class using a variable. The variable's value cannot be a keyword (e.g. &lt;em&gt;self&lt;/em&gt;, &lt;em&gt;parent&lt;/em&gt; and &lt;em&gt;static&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8eba9058ff366c755ec40becbd8d32a9eff1d42" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.0, the &lt;a href=&quot;function.stream-context-set-default&quot;&gt;stream_context_set_default()&lt;/a&gt; function can be used to set the default context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca921d3c6e166c0e5e8485a01445601316977ed" translate="yes" xml:space="preserve">
          <source>As of PHP 5.3.3, methods with the same name as the last element of a namespaced class name will no longer be treated as constructor. This change doesn't affect non-namespaced classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16353e1741de0d770526b2f6e2156698676bfb7b" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4 it is possible to array dereference the result of a function or method call directly. Before it was only possible using a temporary variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e5ce48354a4cb7f9a7ba4a4712757a23ed39b3" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4 string offsets have to either be integers or integer-like strings, otherwise a warning will be thrown. Previously an offset like &lt;em&gt;&quot;foo&quot;&lt;/em&gt; was silently cast to &lt;em&gt;0&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541634dacd00c4e938bd254a89cafceb54f8428c" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4 you can also use the short array syntax, which replaces &lt;em&gt;array()&lt;/em&gt; with &lt;em&gt;[]&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c994f86e2ae672aaa744f7f067a273171c7e2384" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4, anonymous functions may be declared statically. This prevents them from having the current class automatically bound to them. Objects may also not be bound to them at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c783f25c7b0195db057bae4831097f7ad7307de" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0 you can use &lt;a href=&quot;function.session-register-shutdown&quot;&gt;session_register_shutdown()&lt;/a&gt; or simply use the 'register shutdown' flag when invoking &lt;strong&gt;session_set_save_handler()&lt;/strong&gt; using the OOP method and passing an instance that implements &lt;a href=&quot;class.sessionhandlerinterface&quot;&gt;SessionHandlerInterface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfda654d2932bdba653025ba75ff5ddb932e86f7" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0, PHP implements a method of code reuse called Traits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1323d6a52cf1ac851cdb4cfa299f07ef8d0d9b" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0, the above example will raise an &lt;strong&gt;&lt;code&gt;E_COMPILE_ERROR&lt;/code&gt;&lt;/strong&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd49df14903497da36a3e1e7acda76285b479f84" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0, there are only two ways to access data from your HTML forms. Currently available methods are listed below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f2378b28ab30a7ac14047fdb81381db0645ebd" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0, when declared in the context of a class, the current class is automatically bound to it, making &lt;em&gt;$this&lt;/em&gt; available inside of the function's scope. If this automatic binding of the current class is not wanted, then &lt;a href=&quot;functions.anonymous#functions.anonymous-functions.static&quot;&gt;static anonymous functions&lt;/a&gt; may be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b6e990cf80bf5656664b86b0b310249d507a4f" translate="yes" xml:space="preserve">
          <source>As of PHP 5.4.0, you can call any &lt;a href=&quot;language.types.callable&quot;&gt;callable&lt;/a&gt; stored in a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c65f0171fbe37680a819ab7081d4b37f401c5c2" translate="yes" xml:space="preserve">
          <source>As of PHP 5.5 it is possible to array dereference an array literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b0239c547411a3290b77e54506393cb82592d8" translate="yes" xml:space="preserve">
          <source>As of PHP 5.5.0 &lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt; level error is emitted when passing in the &quot;\e&quot; modifier. As of PHP 7.0.0 &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; is emitted in this case and &quot;\e&quot; modifier has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798a855a87611c84dc34ec79c862db17b09b2850" translate="yes" xml:space="preserve">
          <source>As of PHP 5.6 aliasing or importing function and constant names is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fd6d5f913007b7394f76ac60bde2910f383fb2" translate="yes" xml:space="preserve">
          <source>As of PHP 5.6.0, &lt;strong&gt;hash_algos()&lt;/strong&gt; will return the following list of algorithm names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f6b91536dc03c2993c2c03f45ea8e99f6272ba" translate="yes" xml:space="preserve">
          <source>As of PHP 5.6.1 can also be specified as &lt;strong&gt;&lt;code&gt;INI_SCANNER_TYPED&lt;/code&gt;&lt;/strong&gt;. In this mode boolean, null and integer types are preserved when possible. String values &lt;em&gt;&quot;true&quot;&lt;/em&gt;, &lt;em&gt;&quot;on&quot;&lt;/em&gt; and &lt;em&gt;&quot;yes&quot;&lt;/em&gt; are converted to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;. &lt;em&gt;&quot;false&quot;&lt;/em&gt;, &lt;em&gt;&quot;off&quot;&lt;/em&gt;, &lt;em&gt;&quot;no&quot;&lt;/em&gt; and &lt;em&gt;&quot;none&quot;&lt;/em&gt; are considered &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. &lt;em&gt;&quot;null&quot;&lt;/em&gt; is converted to &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; in typed mode. Also, all numeric strings are converted to integer type if it is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887baab7c5975bcc279d6f2f848a537be5821efc" translate="yes" xml:space="preserve">
          <source>As of PHP 7.0.0, instead of being undefined and platform-dependent, NaN and Infinity will always be zero when cast to &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaafb0aff3999730a16606dba61f4197c101e945" translate="yes" xml:space="preserve">
          <source>As of PHP 7.0.7, if &lt;code&gt;type&lt;/code&gt; is omitted, it is automatically detected from the type of the &lt;code&gt;param&lt;/code&gt;: &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; and &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; are treated as &lt;strong&gt;&lt;code&gt;SQLITE3_INTEGER&lt;/code&gt;&lt;/strong&gt;, &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; as &lt;strong&gt;&lt;code&gt;SQLITE3_FLOAT&lt;/code&gt;&lt;/strong&gt;, &lt;a href=&quot;language.types.null&quot;&gt;null&lt;/a&gt; as &lt;strong&gt;&lt;code&gt;SQLITE3_NULL&lt;/code&gt;&lt;/strong&gt; and all others as &lt;strong&gt;&lt;code&gt;SQLITE3_TEXT&lt;/code&gt;&lt;/strong&gt;. Formerly, if &lt;code&gt;type&lt;/code&gt; has been omitted, it has defaulted to &lt;strong&gt;&lt;code&gt;SQLITE3_TEXT&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeeb4400e0062f0b2ab5553131420418f165180" translate="yes" xml:space="preserve">
          <source>As of PHP 7.0.7, if &lt;code&gt;type&lt;/code&gt; is omitted, it is automatically detected from the type of the &lt;code&gt;value&lt;/code&gt;: &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt; and &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; are treated as &lt;strong&gt;&lt;code&gt;SQLITE3_INTEGER&lt;/code&gt;&lt;/strong&gt;, &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; as &lt;strong&gt;&lt;code&gt;SQLITE3_FLOAT&lt;/code&gt;&lt;/strong&gt;, &lt;a href=&quot;language.types.null&quot;&gt;null&lt;/a&gt; as &lt;strong&gt;&lt;code&gt;SQLITE3_NULL&lt;/code&gt;&lt;/strong&gt; and all others as &lt;strong&gt;&lt;code&gt;SQLITE3_TEXT&lt;/code&gt;&lt;/strong&gt;. Formerly, if &lt;code&gt;type&lt;/code&gt; has been omitted, it has defaulted to &lt;strong&gt;&lt;code&gt;SQLITE3_TEXT&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f1b6f15e17d13dd9e4e747c5f9559c59c974c4" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0 &lt;strong&gt;list()&lt;/strong&gt; can now also contain explicit keys, which can be given as arbitrary expressions. Mixing of integer and string keys is allowed; however, elements with and without keys cannot be mixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a747609abff8033992cef605ae86fd06e5662ea3" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0 also &lt;em&gt;negative&lt;/em&gt; numeric indices are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2363c454819bb59e0eca7cead1e20e1b3a8160e7" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0 the handler callback is given a second argument containing the signinfo of the specific signal. This data is only supplied if the operating system has the signinfo_t structure. If the OS does not implement siginfo_t NULL is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9170972ab631c37aceacf99fef313baf4d779c71" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0 visibility modifiers are allowed for class constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e7c4c0539910ef6f5e86ea549de7108ba838c6" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0, an &lt;a href=&quot;class.argumentcounterror&quot;&gt;ArgumentCountError&lt;/a&gt; will be thrown if the &lt;code&gt;callback&lt;/code&gt; function requires more than 2 parameters (the value and key of the array member). Previously, if the &lt;code&gt;callback&lt;/code&gt; function required more than 2 parameters, an error of level &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.constants.php&quot;&gt;E_WARNING&lt;/a&gt; would be generated each time &lt;strong&gt;array_walk()&lt;/strong&gt; calls &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bc802ed2f33fc795190ec8dd007c60efb12bc7" translate="yes" xml:space="preserve">
          <source>As of PHP 7.1.0, class constants may be defined as public, private, or protected. Constants declared without any explicit visibility keyword are defined as public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc74e830ec2e361e9cdccd2992e00e0bc691b8d" translate="yes" xml:space="preserve">
          <source>As of PHP 7.2.0 and libzip 1.2.0 the password is used to decompress the archive, and is also the default password for &lt;a href=&quot;ziparchive.setencryptionname&quot;&gt;ZipArchive::setEncryptionName()&lt;/a&gt; and &lt;a href=&quot;ziparchive.setencryptionindex&quot;&gt;ZipArchive::setEncryptionIndex()&lt;/a&gt;. Formerly, this function only set the password to be used to decompress the archive; it did not turn a non-password-protected &lt;a href=&quot;class.ziparchive&quot;&gt;ZipArchive&lt;/a&gt; into a password-protected &lt;a href=&quot;class.ziparchive&quot;&gt;ZipArchive&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3948194ef111259d26b75e671bf4d92931e78074" translate="yes" xml:space="preserve">
          <source>As of runkit version 0.5, certain Sandbox settings may be modified on the fly using ArrayAccess syntax. Some settings, such as &lt;code&gt;active&lt;/code&gt; are read-only and meant to provide status information. Other settings, such as &lt;code&gt;output_handler&lt;/code&gt; may be set and read much like a normal array offset. Future settings may be write-only, however no such settings currently exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dac5c6f1b3f2ed33d3286d94dbd3028aaced85f" translate="yes" xml:space="preserve">
          <source>As of runkit version 0.5, this function is deprecated and is scheduled to be removed from the package prior to a 1.0 release. The output handler for a given Runkit_Sandbox instance may be read/set using the array offset syntax shown on the &lt;a href=&quot;runkit.sandbox&quot;&gt;Runkit_Sandbox&lt;/a&gt; class definition page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab4c3b32edc0f937f690e5786fc76e8c0769cf4" translate="yes" xml:space="preserve">
          <source>As opposed to defining constants using &lt;a href=&quot;function.define&quot;&gt;define()&lt;/a&gt;, constants defined using the &lt;em&gt;const&lt;/em&gt; keyword must be declared at the top-level scope because they are defined at compile-time. This means that they cannot be declared inside functions, loops, &lt;em&gt;if&lt;/em&gt; statements or &lt;em&gt;try&lt;/em&gt;/ &lt;em&gt;catch&lt;/em&gt; blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf624740dcc1c4e7125ef6b46cfa17cfaaeecce" translate="yes" xml:space="preserve">
          <source>As opposed with &lt;a href=&quot;function.isset&quot;&gt;isset()&lt;/a&gt;, &lt;strong&gt;property_exists()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; even if the property has the value &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e6a5f8b13f60e57ca3fbc99449b399d6c67a7c" translate="yes" xml:space="preserve">
          <source>As passed : 'bar'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b401fa34e68d9588f800a42732b1321b69de15" translate="yes" xml:space="preserve">
          <source>As passed : array (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36bc794ced7d836b26bfe57dce4bc07ff7014b0" translate="yes" xml:space="preserve">
          <source>As said before, references are not pointers. That means, the following construct won't do what you expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866ec8e345a04576ee58fe7aee87c2e9340d6cb0" translate="yes" xml:space="preserve">
          <source>As stated above, directly converting an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;, &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;, or &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; to a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; does not provide any useful information about the value beyond its type. See the functions &lt;a href=&quot;function.print-r&quot;&gt;print_r()&lt;/a&gt; and &lt;a href=&quot;function.var-dump&quot;&gt;var_dump()&lt;/a&gt; for more effective means of inspecting the contents of these types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c890e85bbe55fce7631655cdd007cd2d8fe7d4" translate="yes" xml:space="preserve">
          <source>As stated in the &lt;a href=&quot;language.types.array#language.types.array.syntax&quot;&gt;syntax&lt;/a&gt; section, what's inside the square brackets ('&lt;em&gt;[&lt;/em&gt;' and '&lt;em&gt;]&lt;/em&gt;') must be an expression. This means that code like this works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9be0916a120e589a6dce4a923276454bdd1fc3" translate="yes" xml:space="preserve">
          <source>As string with additional headers to be set on the mail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3598917b5524bc543d4d45f16a46747202edb6f3" translate="yes" xml:space="preserve">
          <source>As such, the &lt;code&gt;to&lt;/code&gt; parameter should not be an address in the form of &quot;Something &amp;lt;someone@example.com&amp;gt;&quot;. The mail command may not parse this properly while talking with the MTA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4490deed3b27f1c0f76738d1bc2f521678b19d6" translate="yes" xml:space="preserve">
          <source>As the &lt;a href=&quot;class.error&quot;&gt;Error&lt;/a&gt; hierarchy does not inherit from &lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt;, code that uses &lt;code&gt;catch (Exception $e) { ... }&lt;/code&gt; blocks to handle uncaught exceptions in PHP 5 will find that these &lt;a href=&quot;class.error&quot;&gt;Error&lt;/a&gt;s are not caught by these blocks. Either a &lt;code&gt;catch (Error $e) { ... }&lt;/code&gt; block or a &lt;a href=&quot;function.set-exception-handler&quot;&gt;set_exception_handler()&lt;/a&gt; handler is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f19b71f6bba421efc0e6fed5450118b9a9b332b" translate="yes" xml:space="preserve">
          <source>As the output is dependent upon the underlying C library, some conversion specifiers are not supported. On Windows, supplying unknown conversion specifiers will result in 5 &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; messages and return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. On other operating systems you may not get any &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; messages and the output may contain the conversion specifiers unconverted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5211e7ddc4fb7afc70f404daab7ad413a61bd18a" translate="yes" xml:space="preserve">
          <source>As the output shows, the &lt;a href=&quot;control-structures.foreach&quot;&gt;foreach&lt;/a&gt; iterated through all of the &lt;a href=&quot;language.oop5.visibility&quot;&gt;visible&lt;/a&gt; properties that could be accessed.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
