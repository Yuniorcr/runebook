<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="ddc2e1f929a1740efcc02657b7c4bebe6386189b" translate="yes" xml:space="preserve">
          <source>Another simple way of setting a breakpoint in an Octave script is the use of the &lt;code&gt;keyboard&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ee445a41ce8c5b0fdfe756f72683a3adc6ea9d" translate="yes" xml:space="preserve">
          <source>Another typical sparse matrix that is often needed is a random distribution of random elements. The functions &lt;em&gt;sprand&lt;/em&gt; and &lt;em&gt;sprandn&lt;/em&gt; perform this for uniform and normal random distributions of elements. They have exactly the same calling convention, where &lt;code&gt;sprand (&lt;var&gt;r&lt;/var&gt;, &lt;var&gt;c&lt;/var&gt;,
&lt;var&gt;d&lt;/var&gt;)&lt;/code&gt;, creates an &lt;var&gt;r&lt;/var&gt;-by-&lt;var&gt;c&lt;/var&gt; sparse matrix with a density of filled elements of &lt;var&gt;d&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea9d6275b6d0486e6c4c0c421ca6bb891756eee" translate="yes" xml:space="preserve">
          <source>Another use of the hashing function is to check for file integrity. The user can check the hash of the file against a known value and find if the file they have is the same as the one that the original hash was produced with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5127e2f8647249a1274dabfef6a2cd5b20b5e7" translate="yes" xml:space="preserve">
          <source>Another very basic function is &lt;em&gt;nnz&lt;/em&gt; that returns the number of nonzero entries there are in a sparse matrix, while the function &lt;em&gt;nzmax&lt;/em&gt; returns the amount of storage allocated to the sparse matrix. Note that Octave tends to crop unused memory at the first opportunity for sparse objects. There are some cases of user created sparse objects where the value returned by &lt;em&gt;nzmax&lt;/em&gt; will not be the same as &lt;em&gt;nnz&lt;/em&gt;, but in general they will give the same result. The function &lt;em&gt;spstats&lt;/em&gt; returns some basic statistics on the columns of a sparse matrix including the number of elements, the mean and the variance of each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5d7576073476e3cf0aefde52193d31e110d60f" translate="yes" xml:space="preserve">
          <source>Another way to add files to the &lt;var&gt;dynamic classpath&lt;/var&gt; exclusively for your user account is to use the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b2bc932226a4af3e7938621b793728c8c67dc3" translate="yes" xml:space="preserve">
          <source>Any &lt;var&gt;y&lt;/var&gt; values that use a window extending beyond the original data array are deleted. For example, with a 10-element data vector and a window of length 3, the output will contain only 8 elements. The first element would require calculating the function over indices &lt;code&gt;[0,&amp;nbsp;1,&amp;nbsp;2]&lt;/code&gt; and is therefore discarded. The last element would require calculating the function over indices &lt;code&gt;[9,&amp;nbsp;10,&amp;nbsp;11]&lt;/code&gt; and is therefore discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebd88c689dc0c3bd33e1f9bb4231364709e1c8f" translate="yes" xml:space="preserve">
          <source>Any Octave function can be overloaded, and this allows an object-specific version of a function to be called as needed. A pertinent example for the polynomial class might be to overload the &lt;code&gt;polyval&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88c127406cff3937549e2d49dccd696c5c9e288" translate="yes" xml:space="preserve">
          <source>Any additional arguments are passed directly to &lt;var&gt;func&lt;/var&gt;. The total number of arguments to call &lt;var&gt;func&lt;/var&gt; with can be passed in &lt;var&gt;ntot&lt;/var&gt;; by default &lt;var&gt;ntot&lt;/var&gt; is &lt;var&gt;n&lt;/var&gt;. The input &lt;var&gt;n&lt;/var&gt; can also be a vector of indices of the output, in which case the output will be a cell array of the requested output arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7449b87fb3fd68fbea28e1f5bac142702612d6" translate="yes" xml:space="preserve">
          <source>Any additional arguments are passed to the &lt;code&gt;error&lt;/code&gt; function for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c41e909fb699ad44338933b2cd674782306f70" translate="yes" xml:space="preserve">
          <source>Any arguments after the first are passed as inputs to the named function. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f04b6b12506a51de23e7d02e2cb5c92a77fd09b" translate="yes" xml:space="preserve">
          <source>Any arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in an appropriate manner to any of the functions (&lt;var&gt;Afun&lt;/var&gt; or &lt;var&gt;Mfun&lt;/var&gt;) or that have been given to &lt;code&gt;bicg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a620864a775100876d3a42459eb790ac0334b6" translate="yes" xml:space="preserve">
          <source>Any bound (&lt;var&gt;A&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;, &lt;var&gt;lb&lt;/var&gt;, &lt;var&gt;ub&lt;/var&gt;, &lt;var&gt;A_in&lt;/var&gt;, &lt;var&gt;A_lb&lt;/var&gt;, &lt;var&gt;A_ub&lt;/var&gt;) may be set to the empty matrix (&lt;code&gt;[]&lt;/code&gt;) if not present. The constraints &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;A_in&lt;/var&gt; are matrices with each row representing a single constraint. The other bounds are scalars or vectors depending on the number of constraints. The algorithm is faster if the initial guess is feasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b536e07023e0802f82108dd15d02c6c7ef1ae27" translate="yes" xml:space="preserve">
          <source>Any character in &lt;var&gt;value&lt;/var&gt; will be interpreted as whitespace and trimmed; The default value for whitespace is &lt;code&gt;&quot;
\b\r\n\t&quot;&lt;/code&gt; (note the space). Unless whitespace is set to &lt;code&gt;&quot;&quot;&lt;/code&gt; (empty) AND at least one &lt;code&gt;&quot;%s&quot;&lt;/code&gt; format conversion specifier is supplied, a space is always part of whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd0890a6e81f8088b353f70802b4d6e93844150" translate="yes" xml:space="preserve">
          <source>Any character in &lt;var&gt;value&lt;/var&gt; will be interpreted as whitespace and trimmed; the string defining whitespace must be enclosed in double quotes for proper processing of special characters like &lt;code&gt;&quot;\t&quot;&lt;/code&gt;. In each data field, multiple consecutive whitespace characters are collapsed into one space and leading and trailing whitespace is removed. The default value for whitespace is &lt;code&gt;&quot;
\b\r\n\t&quot;&lt;/code&gt; (note the space). Whitespace is always added to the set of delimiter characters unless at least one &lt;code&gt;&quot;%s&quot;&lt;/code&gt; format conversion specifier is supplied; in that case only whitespace explicitly specified in &lt;code&gt;&quot;delimiter&quot;&lt;/code&gt; is retained as delimiter and removed from the set of whitespace characters. If whitespace characters are to be kept as-is (in e.g., strings), specify an empty value (i.e., &lt;code&gt;&quot;&quot;&lt;/code&gt;) for &lt;code&gt;&quot;whitespace&quot;&lt;/code&gt;; obviously, whitespace cannot be a delimiter then.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01fae8061435d03e635d9c720ad45690d9251ed" translate="yes" xml:space="preserve">
          <source>Any character in &lt;var&gt;value&lt;/var&gt; will be used to split &lt;var&gt;str&lt;/var&gt; into words (default value = any whitespace). Note that whitespace is implicitly added to the set of delimiter characters unless a &lt;code&gt;&quot;%s&quot;&lt;/code&gt; format conversion specifier is supplied; see &lt;code&gt;&quot;whitespace&quot;&lt;/code&gt; parameter below. The set of delimiter characters cannot be empty; if needed Octave substitutes a space as delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a80ee399af36d7665d0593f6cd0078fe204a785" translate="yes" xml:space="preserve">
          <source>Any function that the nested function&amp;rsquo;s parent can call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedeae656f4af1d698b0042d8c29ef0ed92e6300" translate="yes" xml:space="preserve">
          <source>Any names identified are returned in a cell array of strings. The array is empty if no variables were found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7acc98c5dc330351bbfb90cdd130301b1a52997b" translate="yes" xml:space="preserve">
          <source>Any nonzero values will be converted to true (1) while zero values will be converted to false (0). The non-numeric value NaN cannot be converted and will produce an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2f42c46053e6b98b6c5c0616ed1fa0043207f7" translate="yes" xml:space="preserve">
          <source>Any number of &lt;code&gt;elseif&lt;/code&gt; clauses may appear. Each condition is tested in turn, and if one is found to be true, its corresponding &lt;var&gt;body&lt;/var&gt; is executed. If none of the conditions are true and the &lt;code&gt;else&lt;/code&gt; clause is present, its body is executed. Only one &lt;code&gt;else&lt;/code&gt; clause may appear, and it must be the last part of the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f14dd003c7de0dcdd66407a267bdab5b34bbe03" translate="yes" xml:space="preserve">
          <source>Any number of data sets (&lt;var&gt;x1&lt;/var&gt;,&lt;var&gt;y1&lt;/var&gt;, &lt;var&gt;x2&lt;/var&gt;,&lt;var&gt;y2&lt;/var&gt;, &amp;hellip;) may appear as long as they are separated by a format string &lt;var&gt;fmt&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1f34477633978630c1fe3e0bba850b6e5566f2" translate="yes" xml:space="preserve">
          <source>Any optional &lt;var&gt;format&lt;/var&gt; specified by the programmer is used without modification. This is in contrast to &lt;small&gt;MATLAB&lt;/small&gt; which tampers with the &lt;var&gt;format&lt;/var&gt; based on internal heuristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5402275658b415e4102e7f053526b6bcfe3f47" translate="yes" xml:space="preserve">
          <source>Any optional arguments are passed directly to &lt;code&gt;dlmread&lt;/code&gt; (see &lt;a href=&quot;#XREFdlmread&quot;&gt;dlmread&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1fc66e01e41afc838d723175933fea8e364187" translate="yes" xml:space="preserve">
          <source>Any optional arguments are passed directly to &lt;code&gt;dlmwrite&lt;/code&gt; (see &lt;a href=&quot;#XREFdlmwrite&quot;&gt;dlmwrite&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e72ae03c5ea858f40fd99676376ddf8bfb9feb" translate="yes" xml:space="preserve">
          <source>Any parameter whose name contains the name of a type (e.g., &lt;var&gt;integer&lt;/var&gt; or &lt;var&gt;matrix&lt;/var&gt;) is expected to be of that type. Parameters named &lt;var&gt;object&lt;/var&gt; may be of any type. Parameters with other sorts of names (e.g., &lt;var&gt;new_file&lt;/var&gt;) are discussed specifically in the description of the function. In some sections, features common to parameters of several functions are described at the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd20b1575ab57d02ef4606acf85cbc3344433e0" translate="yes" xml:space="preserve">
          <source>Any property/value input pairs are assigned to the surface object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c46413cb45e4b0a5aa4b3a95b3806f405beb90b" translate="yes" xml:space="preserve">
          <source>Any property/value pairs are passed directly to the underlying axes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea6c4b21c98787ef5fe1c21062b107c262c74a3" translate="yes" xml:space="preserve">
          <source>Any property/value pairs are passed directly to the underlying patch object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de4c5a09fa7d7626ba5a3e6376d14aa5379781a" translate="yes" xml:space="preserve">
          <source>Any property/value pairs are passed directly to the underlying surface object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e884eb9afce20f4c0a05ec8a451867948b52dcff" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uibuttongroup object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e0163f5226495a134001b955499540b9bfe7ed" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uicontextmenu object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ac3f23f17fd7c53bccf7b6768616e40a3c4e86" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uicontrol object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce214aa7effbdb8123633c5f0f09bfe7dda598b" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uipanel object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6778f392d0a91a7c5bd06f7c55c30e80ac4c9634" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uipushtool object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683babd9c3b4fc92f8149efb9152304712e22ff9" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uitable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3453097880a525558fa32f268ec0850ffbe385e8" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uitoggletool object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a8d9efa0cf1951967ee91ac6ff2a8fa329ed79" translate="yes" xml:space="preserve">
          <source>Any provided property value pairs will override the default values of the created uitoolbar object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab55b769bb01999de6283227ebfa868bc3d035a0" translate="yes" xml:space="preserve">
          <source>Any regular function can be used as a command if it accepts string input arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ae784793c90209ea4152a82cf5e08cf0046fb5" translate="yes" xml:space="preserve">
          <source>Any string arguments must be passed after the other arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a70576cb2454ee72de24e1de2a08d1467072aca" translate="yes" xml:space="preserve">
          <source>Any string input arguments must be passed after all other arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8b6dc0ff4763144265beae30c349e123255d1d" translate="yes" xml:space="preserve">
          <source>Any text between the continuation marker and the newline character is ignored. For example, the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b413c82483754433f6a032c4981c78f267979e" translate="yes" xml:space="preserve">
          <source>Any variables that are not found in the argument list are inherited from the enclosing scope. Anonymous functions are useful for creating simple unnamed functions from expressions or for wrapping calls to other functions to adapt them for use by functions like &lt;code&gt;quad&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee9be0b919e26eb4b29a40a0875f59884b4a380" translate="yes" xml:space="preserve">
          <source>Any whitespace character in the template causes any number of whitespace characters in the input stream to be read and discarded. The whitespace characters that are matched need not be exactly the same whitespace characters that appear in the template string. For example, write &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87445df0d78a575f5a3fac67957013479640f05" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = &lt;var&gt;fcn&lt;/var&gt; ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;var&gt;fcn&lt;/var&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36cb0bc63ca0870744281bb42821bd4eebb1535" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mad ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mad ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;mad&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a545da923049093680f7389acfd80be1da6388" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = max ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = max ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;max&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d30f02f495a07cf81f13b0f53b5cff48ca3bc1" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mean ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mean ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;mean&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d47fa88fbec15348aa10f30e2ac76e889442020" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = min ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = min ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;min&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65aafdb27d1d064a76017620684968c6048f938d" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movmedian ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movmedian ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;movmedian&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515fe98706e10f237bea9bdc49e9992cae09aaa3" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movprod ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movprod ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;movprod&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e011efc6ffab8709546427830ac228a7b6938a8d" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movstd ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movstd ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;movstd&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e87b2e0a6ebe9258d2d7c74d2e0ad596d14013" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movsum ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movsum ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;movsum&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e89560fa0199ae349fcac5e0c527b18e30c12dd" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by &lt;code&gt;NaN&lt;/code&gt;. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = var ([NaN, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = var ([&lt;var&gt;x&lt;/var&gt;(end-1:end), NaN])&lt;/code&gt;. This option usually results in &lt;var&gt;y&lt;/var&gt; having &lt;code&gt;NaN&lt;/code&gt; values at the boundaries, although it is influenced by how &lt;code&gt;var&lt;/code&gt; handles &lt;code&gt;NaN&lt;/code&gt;, and also by the property &lt;code&gt;&quot;nancond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b94420e0085284480c2e238c9ee0b237e5c2d70" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977733638e3c21088f20de9db4b65e4ddcd835c3" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mad ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mad ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68064036ed699ad1e76bb311cad85c803452e34" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = max ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = max ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef90177bb1de3bda627e83ddac5074a03a8f492" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mean ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mean ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23eb80fb927c7da1ab295362edfc03a239fd527b" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = min ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = min ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7283e1d47832eff3f7bfd27e81f7b8efc25b565" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movmedian ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movmedian ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04013ec3b0d3d58c3e3ff09f8dab2baa41b6245e" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movprod ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movprod ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b19cbd6e368c9e9ed7a5179b9a0e6b5a973dc24" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movstd ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movstd ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315607fc12097f7e35d0777f9140e1d41569b812" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movsum ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movsum ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1be8814eefc11fdf75a52c5d61e5714474442a" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the specified value &lt;var&gt;user_value&lt;/var&gt; which must be a numeric scalar. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = var ([&lt;var&gt;user_value&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = var ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;user_value&lt;/var&gt;])&lt;/code&gt;. A common choice for &lt;var&gt;user_value&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf511c880116f88bbea251680131f1fd6974234d" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd5893382406b6e4c450d76d1a9d4e3abe9990c" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mad ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mad ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730462b50a4a7d6e71ecfd1c9b8fcbce1d7cf213" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = max ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = max ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b214b07a0d58cd526a32ea652f0d96375f9e839" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mean ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mean ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1397db3476234e9136f784be193ea6692bcfc5" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = min ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = min ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160e488f1edd0c0a1d93c206f81ae18700b55302" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movmedian ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movmedian ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b32fbe3c2b888f1d8074aaa1be3ecbd59e13ad8" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movprod ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movprod ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde744ba860d983f73301c06b1969ceac63a076" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movstd ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movstd ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab36fc5bb5b9c563dc1202c2981dfd0d111244b1" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movsum ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movsum ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14171bb1b91b98c410779fc56ba49f330a2dd3d5" translate="yes" xml:space="preserve">
          <source>Any window elements outside the data array are replaced by the value of &lt;var&gt;x&lt;/var&gt; at the boundary. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = var ([&lt;var&gt;x&lt;/var&gt;(1), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = var ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(end)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545c638e77e6f6dba64f975a55126c1183566af5" translate="yes" xml:space="preserve">
          <source>Apart from the string concatenation functions (see &lt;a href=&quot;concatenating-strings#Concatenating-Strings&quot;&gt;Concatenating Strings&lt;/a&gt;) which cast numerical data to the corresponding UTF-8 encoded characters, there are several functions that format numerical data as strings. &lt;code&gt;mat2str&lt;/code&gt; and &lt;code&gt;num2str&lt;/code&gt; convert real or complex matrices, while &lt;code&gt;int2str&lt;/code&gt; converts integer matrices. &lt;code&gt;int2str&lt;/code&gt; takes the real part of complex values and round fractional values to integer. A more flexible way to format numerical data as strings is the &lt;code&gt;sprintf&lt;/code&gt; function (see &lt;a href=&quot;formatted-output#Formatted-Output&quot;&gt;Formatted Output&lt;/a&gt;, &lt;a href=&quot;formatted-output#XREFsprintf&quot;&gt;sprintf&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785a6da4cd10e6657994c3b3db962696d27c8392" translate="yes" xml:space="preserve">
          <source>Append PostScript or PDF output to an existing file of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca25ad0c003bd064eefcf4ae7631b81f01f034d" translate="yes" xml:space="preserve">
          <source>Append a &lt;code&gt;&quot;t&quot;&lt;/code&gt; to the mode string to open the file in text mode or a &lt;code&gt;&quot;b&quot;&lt;/code&gt; to open in binary mode. On Windows systems, text mode reading and writing automatically converts linefeeds to the appropriate line end character for the system (carriage-return linefeed on Windows). The default when no mode is specified is binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e04db00f9d563e8a44f8584d52d9de84897e3e" translate="yes" xml:space="preserve">
          <source>Append on each write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd15fbe76d1ad70f714f8e23c265874bb25a2bb" translate="yes" xml:space="preserve">
          <source>Append the scalar value &lt;var&gt;c&lt;/var&gt; to the vector &lt;var&gt;x&lt;/var&gt; until it is of length &lt;var&gt;l&lt;/var&gt;. If &lt;var&gt;c&lt;/var&gt; is not given, a value of 0 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9f1bb350cd58ad799225f61b97f0b24ad0032e" translate="yes" xml:space="preserve">
          <source>Append to the destination instead of overwriting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7054aac1696ded8ac9bfacb9f5cf76d334f375f" translate="yes" xml:space="preserve">
          <source>Appendix A External Code Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21f037da0ba45a7ed4e479dbfd59644ad04ab9e" translate="yes" xml:space="preserve">
          <source>Appendix B Test and Demo Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d70a0baa22ef5ef39c2d25e1fddab95e34397c" translate="yes" xml:space="preserve">
          <source>Appendix C Obsolete Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ef7133e2155dd4201b5a2afeb50c4f04292dc6" translate="yes" xml:space="preserve">
          <source>Appendix D Known Causes of Trouble</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61a2f23d53216631bdfee427af8b5e03b525002" translate="yes" xml:space="preserve">
          <source>Appendix E Installing Octave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797e750e19093eb16b699bdddb57638dfd00d35d" translate="yes" xml:space="preserve">
          <source>Appendix F Grammar and Parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17a2ab66c214e2003d542184dcb51e72a9bf238" translate="yes" xml:space="preserve">
          <source>Appendix G GNU GENERAL PUBLIC LICENSE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f6630ceb611f3fceceda2a230f65f7f5a6ff1e" translate="yes" xml:space="preserve">
          <source>Application Note: If &lt;var&gt;x&lt;/var&gt; is not specified then unit spacing will be used. To scale the integral to the correct value you must multiply by the actual spacing value (deltaX).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816c84617b41a721d5f438b924dd8db1e9c51d20" translate="yes" xml:space="preserve">
          <source>Application Note: If &lt;var&gt;x&lt;/var&gt; is not specified then unit spacing will be used. To scale the integral to the correct value you must multiply by the actual spacing value (deltaX). As an example, the integral of &lt;em&gt;x^3&lt;/em&gt; over the range [0, 1] is &lt;em&gt;x^4/4&lt;/em&gt; or 0.25. The following code uses &lt;code&gt;trapz&lt;/code&gt; to calculate the integral in three different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f8827aa94cef2d328ca131ad741f65913d0c4f" translate="yes" xml:space="preserve">
          <source>Application Notes: If the objective function is a single nonlinear equation of one variable then using &lt;code&gt;fminbnd&lt;/code&gt; is usually a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46a5f93b7313f2025a9e027bed811a2cfd7f7e8" translate="yes" xml:space="preserve">
          <source>Application-defined Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135e357067c784380e6421d4b046311ab5356ea1" translate="yes" xml:space="preserve">
          <source>Applied Numerical Linear Algebra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a4c7664dad814e1c6749b6e9505c00d073333c" translate="yes" xml:space="preserve">
          <source>Apply a 1-D digital filter to the data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73565dee1a1f7600c0f54242050730fa35c87c8" translate="yes" xml:space="preserve">
          <source>Apply a binary function &lt;var&gt;f&lt;/var&gt; element-by-element to two array arguments &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;B&lt;/var&gt;, expanding singleton dimensions in either input argument as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa781854fb0fdffb9cfdc7526b54d027900e556f" translate="yes" xml:space="preserve">
          <source>Apply function &lt;var&gt;fcn&lt;/var&gt; to a moving window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dc3ae413a56066aedc7ced05df36a683878e28" translate="yes" xml:space="preserve">
          <source>Apply the 2-D FIR filter &lt;var&gt;b&lt;/var&gt; to &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e284d58526d8b58ca23cc14b15ae04fa4f7c79" translate="yes" xml:space="preserve">
          <source>Applying functions to arrays, cells, and structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db74573c6b8ecf6daef655a0518bb6cb43617e62" translate="yes" xml:space="preserve">
          <source>Architecture-independent data files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fa1729ef721d04daf66856816f1037c664412f" translate="yes" xml:space="preserve">
          <source>Area Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166c8b53c91f66554c4fa75df1e6cc3ea15ab01b" translate="yes" xml:space="preserve">
          <source>Area plot of the columns of &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dff5f4d0b9314271352bb4fb936d10262b72e8a" translate="yes" xml:space="preserve">
          <source>Area series objects are created by the &lt;code&gt;area&lt;/code&gt; function. Each of the &lt;code&gt;hggroup&lt;/code&gt; elements contains a single patch object. The properties of the area series are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c989acda843efdf73d28fc1e1a6b325fe930d3" translate="yes" xml:space="preserve">
          <source>Arguments are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a731380a967a2c5a3851a4eb179164e25c5d3b" translate="yes" xml:space="preserve">
          <source>Arguments are concatenated vertically. The returned values are padded with blanks as needed to make each row of the string array have the same length. Empty input strings are significant and will concatenated in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5b8fb05cf7b99948f41362471af5904f8067a7" translate="yes" xml:space="preserve">
          <source>Arguments are concatenated vertically. The returned values are padded with blanks as needed to make each row of the string array have the same length. Unlike &lt;code&gt;char&lt;/code&gt;, empty strings are removed and will not appear in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61143896c17a8c7fc42c21ffd016d48186d390c" translate="yes" xml:space="preserve">
          <source>Arguments may also be given in groups of three as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f053dc732762c8c17889da40821807b746247b" translate="yes" xml:space="preserve">
          <source>Arithmetic</source>
          <target state="translated">Arithmetic</target>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">Operadores aritméticos</target>
        </trans-unit>
        <trans-unit id="b33de5df78f2a08fc527ef7f0d1ac51c58e59944" translate="yes" xml:space="preserve">
          <source>Arithmetic Ops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b945e8e0a46c9e60aa419ec1c8956ece4c3997" translate="yes" xml:space="preserve">
          <source>Array and Sparse Class Differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b28ba6fc9eb24544f23790c336166701491eeb" translate="yes" xml:space="preserve">
          <source>Array.cc</source>
          <target state="translated">Array.cc</target>
        </trans-unit>
        <trans-unit id="be3537a50fe2a3161040eaf751da1bb42cb54fed" translate="yes" xml:space="preserve">
          <source>Arrays may also be concatenated horizontally using the syntax for creating new matrices. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf220baf3f296541731fd734637bb91c7b88290d" translate="yes" xml:space="preserve">
          <source>Arrays may also be concatenated vertically using the syntax for creating new matrices. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf604cb001bdc6112fda3affb0c7674d1c4481b" translate="yes" xml:space="preserve">
          <source>Arrows</source>
          <target state="translated">Arrows</target>
        </trans-unit>
        <trans-unit id="6c3f3d3203630ce74ffd9609307833fc4f052892" translate="yes" xml:space="preserve">
          <source>Artist</source>
          <target state="translated">Artist</target>
        </trans-unit>
        <trans-unit id="1c89f3a885dfe7cece78890101c6b0af957926e4" translate="yes" xml:space="preserve">
          <source>Artist name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f29c23a7415d1170721d53776b5b3c6caa40e96" translate="yes" xml:space="preserve">
          <source>As a complex example consider a parent function &lt;code&gt;ex_top&lt;/code&gt; with two child functions, &lt;code&gt;ex_a&lt;/code&gt; and &lt;code&gt;ex_b&lt;/code&gt;. In addition, &lt;code&gt;ex_a&lt;/code&gt; has two more child functions, &lt;code&gt;ex_aa&lt;/code&gt; and &lt;code&gt;ex_ab&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ec4198a968407eb1f63463fd157b6dbada87fc" translate="yes" xml:space="preserve">
          <source>As a consequence of using &lt;code&gt;quadcc&lt;/code&gt;, &lt;code&gt;quadgk&lt;/code&gt;, and &lt;code&gt;quadv&lt;/code&gt;, certain option combinations are not supported. Currently, &lt;code&gt;&quot;ArrayValued&quot;&lt;/code&gt; cannot be combined with &lt;code&gt;&quot;RelTol&quot;&lt;/code&gt; or &lt;code&gt;&quot;Waypoints&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3435493aefa988b7deecd5e677269bd49effa1" translate="yes" xml:space="preserve">
          <source>As a general rule, functions should already be written with matrix arguments in mind and should consider whole matrix operations in a vectorized manner. Sometimes, writing functions in this way appears difficult or impossible for various reasons. For those situations, Octave provides facilities for applying a function to each element of an array, cell, or struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b32bbe19e2dd11f2f004787fd53ae11b98e11b8" translate="yes" xml:space="preserve">
          <source>As a less trivial example, instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a7a92c9e870593841c1a9c287f8a16df89aa1e" translate="yes" xml:space="preserve">
          <source>As a measure of dispersion, &lt;code&gt;mad&lt;/code&gt; is less affected by outliers than &lt;code&gt;std&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9ca23be9dfdfe1fc501b7f10e1ed9abc725a52" translate="yes" xml:space="preserve">
          <source>As a measure of dispersion, the interquartile range is less affected by outliers than either &lt;code&gt;range&lt;/code&gt; or &lt;code&gt;std&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c3df4bf76c8b43914248e395aa4103e7fce5b4" translate="yes" xml:space="preserve">
          <source>As a simple example, consider a function &lt;code&gt;func1&lt;/code&gt;, that calls a helper function &lt;code&gt;func2&lt;/code&gt; to do much of the work. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e2b18eaa83e0c9d5290952ead6863c5c9e120f" translate="yes" xml:space="preserve">
          <source>As a simple example, consider a parent function &lt;code&gt;foo&lt;/code&gt;, that calls a nested child function &lt;code&gt;bar&lt;/code&gt;, with a shared variable &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29cc37901037889138af15eb06b84a6120281cb" translate="yes" xml:space="preserve">
          <source>As a trivial example of an executable Octave script, you might create a text file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987a2d94e278347043dcf1e864584af5459d7426" translate="yes" xml:space="preserve">
          <source>As a trivial example of the use of &lt;em&gt;gplot&lt;/em&gt; consider the example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef7f30ad482324293bea5ddd1ea783efb60f8e0" translate="yes" xml:space="preserve">
          <source>As all of the mixed operators and functions between full and sparse matrices exist, in general this does not cause any problems. However, one area where it does cause a problem is where a sparse matrix is promoted to a full matrix, where subsequent operations would resparsify the matrix. Such cases are rare, but can be artificially created, for example &lt;code&gt;(fliplr (speye (3)) + speye (3)) - speye (3)&lt;/code&gt; gives a full matrix when it should give a sparse one. In general, where such cases occur, they impose only a small memory penalty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d74dbc515358047da0f33d8e47e4b89affc242c" translate="yes" xml:space="preserve">
          <source>As an alternative to creating empty cell arrays, and then filling them, it is possible to convert numerical arrays into cell arrays using the &lt;code&gt;num2cell&lt;/code&gt;, &lt;code&gt;mat2cell&lt;/code&gt; and &lt;code&gt;cellslices&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379aa916a20c78330871da39b87e0b4765e1ff6d" translate="yes" xml:space="preserve">
          <source>As an example the following code creates a 3-by-3 matrix and saves it to the file &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b07da704fff56fc5dbbf8c170487299b278b2a0" translate="yes" xml:space="preserve">
          <source>As an example the following function sets the first output argument to 1, the second to 2, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc9ba3f444ef5f2a70c370287d23a7b3c9d81c8" translate="yes" xml:space="preserve">
          <source>As an example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8781fd74ffb5a82423179e7699ae05335023ee73" translate="yes" xml:space="preserve">
          <source>As an example, the first sentence of this help text is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e146d6547e763a1564126ef2e5e76827e3fdcb" translate="yes" xml:space="preserve">
          <source>As an example, the following code creates a cell array containing a string and a 2-by-2 random matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8262ecba7c8ac34e193390f08964eaf8160da3" translate="yes" xml:space="preserve">
          <source>As an example, the following code finds the roots of the quadratic polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a4883d1f70e4af48bb29539be1c969656831d9" translate="yes" xml:space="preserve">
          <source>As an example, the following function implements a variant of the classic &amp;ldquo;Hello, World&amp;rdquo; program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc35a062b942448fb52571461dfcdfa78da8558" translate="yes" xml:space="preserve">
          <source>As before, the leading comments provide documentation for the class constructor. This constructor is very similar to the polynomial class constructor, except that a polynomial object is passed as the third argument to the &lt;code&gt;class&lt;/code&gt; function, telling Octave that the &lt;code&gt;FIRfilter&lt;/code&gt; class will be derived from the polynomial class. The FIR filter class itself does not have any data fields, but it must provide a struct to the &lt;code&gt;class&lt;/code&gt; function. Given that the &lt;code&gt;@polynomial&lt;/code&gt; constructor will add an element named &lt;var&gt;polynomial&lt;/var&gt; to the object struct, the &lt;code&gt;@FIRfilter&lt;/code&gt; just initializes a struct with a dummy field &lt;var&gt;polynomial&lt;/var&gt; which will later be overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef77266db1a7e956b160d5a034980e268cc5d556" translate="yes" xml:space="preserve">
          <source>As can be seen in the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb51504a0135ec8118149cf2a323900588425f5a" translate="yes" xml:space="preserve">
          <source>As can be seen, floating point values are rounded to the nearest integer when converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e6deb900be2bc2c48a839c097a70a85f60b8a" translate="yes" xml:space="preserve">
          <source>As can be seen, the &lt;a href=&quot;object-sizes#XREFsize&quot;&gt;size&lt;/a&gt; function also works for cell arrays. As do other functions describing the size of an object, such as &lt;a href=&quot;object-sizes#XREFlength&quot;&gt;length&lt;/a&gt;, &lt;a href=&quot;object-sizes#XREFnumel&quot;&gt;numel&lt;/a&gt;, &lt;a href=&quot;object-sizes#XREFrows&quot;&gt;rows&lt;/a&gt;, and &lt;a href=&quot;object-sizes#XREFcolumns&quot;&gt;columns&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad090857abf167623bfedd4c309920b078b23d1" translate="yes" xml:space="preserve">
          <source>As discussed in the chapter on Sparse Matrices, the values of the sparse matrix are stored in increasing column-major ordering. Although the data passed by the user need not respect this requirement, pre-sorting the data will significantly speed up creation of the sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05f183977f05cc10b2363b5caf182097847fbac" translate="yes" xml:space="preserve">
          <source>As for struct arrays and numerical arrays, the empty matrix &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5515685ad20e9e32a72430b92df394f9069c45d3" translate="yes" xml:space="preserve">
          <source>As has been already said, diagonal and permutation matrices make it possible to use efficient algorithms while preserving natural linear algebra syntax. This section describes in detail the operations that are treated specially when performed on these special matrix objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8563818455d8e7fee883f075fb938f0a421a6fe6" translate="yes" xml:space="preserve">
          <source>As has been mentioned above (see &lt;a href=&quot;indexing-cell-arrays#Indexing-Cell-Arrays&quot;&gt;Indexing Cell Arrays&lt;/a&gt;), elements of a cell array can be extracted into a comma separated list with the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; operators. By surrounding this list with &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;, it can be concatenated into an array. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8065d12669ae3cf310f671a0e8017f4d4d84ca5" translate="yes" xml:space="preserve">
          <source>As in form 2 above, but allows ordering of generalized eigenpairs for, e.g., solution of discrete time algebraic Riccati equations. Form 3 is not available for complex matrices, and does not compute the generalized eigenvectors &lt;var&gt;V&lt;/var&gt;, &lt;var&gt;W&lt;/var&gt;, nor the orthogonal matrix &lt;var&gt;Q&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8109571f660c3a1b3b14c6ffc15c030649b059cd" translate="yes" xml:space="preserve">
          <source>As mentioned before, method and constructor parameters are converted automatically between Octave and Java types, if appropriate. For functions this is also true with return values, whereas for constructors this is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad02a5a78c66e6c9c4352b3dace5b9a3aab261" translate="yes" xml:space="preserve">
          <source>As mex-files do not make the distinction between single and double quoted strings that Octave does, there is perhaps less complexity in the use of strings and character matrices. An example of their use that parallels the demo in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3989ecc58210427e176a5c4bca0e9ce6297d4176" translate="yes" xml:space="preserve">
          <source>As run-time measurement of the algorithm can be expensive, this is a compromise where &lt;code&gt;&quot;measure&quot;&lt;/code&gt; is used for transforms up to the size of 8192 and beyond that the &lt;code&gt;&quot;estimate&quot;&lt;/code&gt; method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b971e6a2999aebf3e2ceb0c7d0b5ccbfc39ee02" translate="yes" xml:space="preserve">
          <source>As shown in see &lt;a href=&quot;basic-usage-of-cell-arrays#Basic-Usage-of-Cell-Arrays&quot;&gt;Basic Usage of Cell Arrays&lt;/a&gt; elements can be extracted from cell arrays using the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1344418f2df1ee3d5e1b95eda82961e19d5fd03" translate="yes" xml:space="preserve">
          <source>As the example shows, a variable may be declared persistent using a &lt;code&gt;persistent&lt;/code&gt; declaration statement. The following statements are all persistent declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ff63ef2fe86f645fff04de5bf44d5bb07a7b55" translate="yes" xml:space="preserve">
          <source>As the matrix &lt;var&gt;s&lt;/var&gt; is symmetric indefinite it can be factorized with &lt;code&gt;lu&lt;/code&gt;, and the minimum norm solution can therefore be found without the need for a &lt;code&gt;qr&lt;/code&gt; factorization. As the residual error will be &lt;code&gt;zeros (&lt;var&gt;m&lt;/var&gt;, &lt;var&gt;m&lt;/var&gt;)&lt;/code&gt; for underdetermined problems, and example can be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fed57584402eae9a5ca127620d2ea585be8c82" translate="yes" xml:space="preserve">
          <source>As the maximum value that can be represented by a number is important for bit manipulation, particularly when forming masks, Octave supplies two utility functions: &lt;code&gt;flintmax&lt;/code&gt; for floating point integers, and &lt;code&gt;intmax&lt;/code&gt; for integer objects (&lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004a63bcbd1917bb95c20299c83a11a6f5543261" translate="yes" xml:space="preserve">
          <source>As with all other specific &lt;code&gt;end&lt;/code&gt; keywords, &lt;code&gt;endswitch&lt;/code&gt; may be replaced by &lt;code&gt;end&lt;/code&gt;, but you can get better diagnostics if you use the specific forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7beeea040a3fdcaf58f04dd8cf4a4b4bad772bc9" translate="yes" xml:space="preserve">
          <source>As with numerical arrays several elements of a cell array can be extracted by indexing with a vector of indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30037aa3f29274ac3c5a68a87b1c28efd3ffd30d" translate="yes" xml:space="preserve">
          <source>As with subfunctions, only the first nested function in a file may be called from the outside. Inside a function the rules are more complicated. In general a nested function may call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2911d4f8ac8d2b9cc855ef63de94b8204fe9e01b" translate="yes" xml:space="preserve">
          <source>As with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4ffb649f660d620e5f4267e473537468861ee4" translate="yes" xml:space="preserve">
          <source>As you can see in the table below, now we have both profiles mixed together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2350003bc172557bf248c9cdfb5600698542b9" translate="yes" xml:space="preserve">
          <source>Ask the user a yes-or-no question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531353464a67c31ead2961c722aaed6b017db968" translate="yes" xml:space="preserve">
          <source>Aspect Ratio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a306c153c190c90e2673adae89cd26c750e56db2" translate="yes" xml:space="preserve">
          <source>Assign &lt;var&gt;value&lt;/var&gt; to &lt;var&gt;varname&lt;/var&gt; in context &lt;var&gt;context&lt;/var&gt;, which may be either &lt;code&gt;&quot;base&quot;&lt;/code&gt; or &lt;code&gt;&quot;caller&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd686cd9d6a1f044e1fb6823c1198d0fd31e1c0" translate="yes" xml:space="preserve">
          <source>Assign the next lowest unused integer as the Figure number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca57d608b20067757de8d38388702587d3d125a7" translate="yes" xml:space="preserve">
          <source>Assigning an empty matrix &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189a360acd54a816d97440bd5b81415301add5c9" translate="yes" xml:space="preserve">
          <source>Assigning an object of that class to another variable essentially creates a new object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd6e2e234bfd5cae202f1db73fd1b75ebb021d4" translate="yes" xml:space="preserve">
          <source>Assignment Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0f1fc15c1c09c7dd76f2ac6a4133ca9c6cebce" translate="yes" xml:space="preserve">
          <source>Assignment Ops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d091b0430c54456baa7987eab19ac12846440b" translate="yes" xml:space="preserve">
          <source>Assignment of a scalar to an indexed matrix sets all of the elements that are referenced by the indices to the scalar value. For example, if &lt;code&gt;a&lt;/code&gt; is a matrix with at least two columns,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d1ffae68fd99613a8c968ea146c836d4a790ae" translate="yes" xml:space="preserve">
          <source>Assignments can store string values also. For example, the following expression would store the value &lt;code&gt;&quot;this food is good&quot;&lt;/code&gt; in the variable &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7540b4571015a49362deccfc856f6dcba31b5caa" translate="yes" xml:space="preserve">
          <source>Assume &lt;var&gt;D&lt;/var&gt; is a diagonal matrix. If &lt;var&gt;M&lt;/var&gt; is a full matrix, then &lt;code&gt;D*M&lt;/code&gt; will scale the rows of &lt;var&gt;M&lt;/var&gt;. That means, if &lt;code&gt;S = D*M&lt;/code&gt;, then for each pair of indices i,j it holds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65fbe94af9801d238e23d6ca5e58cfd5ae7c1a3" translate="yes" xml:space="preserve">
          <source>Assume we are creating a MEX file. Set the default output extension to &quot;.mex&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9215947e20c196f3797afb25e4e824ce1f8a38" translate="yes" xml:space="preserve">
          <source>Assuming &lt;var&gt;data&lt;/var&gt; is the structure with profile data returned by &lt;code&gt;profile (&lt;code&gt;&quot;info&quot;&lt;/code&gt;)&lt;/code&gt;, this command opens an interactive prompt that can be used to explore the call-tree. Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ebba349727e4c4f6b8ebc85273cbce8485acce" translate="yes" xml:space="preserve">
          <source>Assuming a package is available in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907707adf71d7f167381e8aa25ed55b4a31f509f" translate="yes" xml:space="preserve">
          <source>Assuming one of the two versions is in xcorr_orig, this would compare their speed and their output values. Note that the FFT version is not exact, so one must specify an acceptable tolerance on the comparison &lt;code&gt;100*eps&lt;/code&gt;. In this case, the comparison should be computed relatively, as &lt;code&gt;abs ((&lt;var&gt;x&lt;/var&gt; - &lt;var&gt;y&lt;/var&gt;) ./ &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; rather than absolutely as &lt;code&gt;abs (&lt;var&gt;x&lt;/var&gt; - &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659d6578c4bbe51b3949d9acadfb353fbc527198" translate="yes" xml:space="preserve">
          <source>Asymptotic expansions of integrals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489e70109e67cf9da0e282567e7dfa75ecfec0d5" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc391cc3f13c2d1ba43b1d05210efcc2205b3c63" translate="yes" xml:space="preserve">
          <source>At boundary points a linear extrapolation is applied. Interior points are calculated with the first approximation of the numerical gradient</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09e4cfa5c6d67d985bdecbc93e768bedc36c136" translate="yes" xml:space="preserve">
          <source>At the Octave prompt, you can recall, edit, and reissue previous commands using Emacs- or vi-style editing commands. The default keybindings use Emacs-style commands. For example, to recall the previous command, press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba0ebd253393b46f7f37dd3cb7b73c7ba2bd295" translate="yes" xml:space="preserve">
          <source>Attempt to do completion on the text before the cursor. Octave can complete the names of commands and variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9a688c50df2134fab59236d1d7d6111fd51b6d" translate="yes" xml:space="preserve">
          <source>Attr</source>
          <target state="translated">Attr</target>
        </trans-unit>
        <trans-unit id="e71a2208ed5bc70195d4f4557e27c46db0f46753" translate="yes" xml:space="preserve">
          <source>Attributes of the listed variable. Possible attributes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6112bb3d4f536eeddaffe62936110e516b6dc2d4" translate="yes" xml:space="preserve">
          <source>Audio Data Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0173f060cb84f63aa0413b729d6ffc2add577da" translate="yes" xml:space="preserve">
          <source>Audio Device Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080f79316949a9e07dc0883ac20f46acd6e0a11f" translate="yes" xml:space="preserve">
          <source>Audio File Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a38ff5778dfebcee2d83b7a439ca8af36cf609" translate="yes" xml:space="preserve">
          <source>Audio Player</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d679f85c0c8c94a04689538a1ebabad48f5f78" translate="yes" xml:space="preserve">
          <source>Audio Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b617b95518631fb1c6bd28a5dbb483e86328deed" translate="yes" xml:space="preserve">
          <source>Audio Recorder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090dd204be937031f0583112c2868975f6ec34fb" translate="yes" xml:space="preserve">
          <source>Audio bit rate. Unused, only present for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966e1c01b68c2a16eb1aa2d30f83acb9d15ba557" translate="yes" xml:space="preserve">
          <source>Audio compression method. Unused, only present for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04aeef845e3861638e504adcb4f668cf12abe2a" translate="yes" xml:space="preserve">
          <source>AutoCAD</source>
          <target state="translated">AutoCAD</target>
        </trans-unit>
        <trans-unit id="b01b9fec9455ce34ab215dbec35d30eb12df4dcf" translate="yes" xml:space="preserve">
          <source>AutoScaling</source>
          <target state="translated">AutoScaling</target>
        </trans-unit>
        <trans-unit id="b7c5b72aa8a6927d492531b41a0e0c02361f3f2e" translate="yes" xml:space="preserve">
          <source>Autoconf</source>
          <target state="translated">Autoconf</target>
        </trans-unit>
        <trans-unit id="5c63f189bfa4620322275fe623ef650118078ebf" translate="yes" xml:space="preserve">
          <source>Autoload function A function that is marked as autoloaded with See &lt;a href=&quot;overloading-and-autoloading#XREFautoload&quot;&gt;autoload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3421d4a78809d07993dde32b7c98e16e2ccaec4" translate="yes" xml:space="preserve">
          <source>Automake</source>
          <target state="translated">Automake</target>
        </trans-unit>
        <trans-unit id="d7ff22d92e3a987c11769ecfc151156e0cecc1e3" translate="yes" xml:space="preserve">
          <source>Automatic Variable: ans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5bc0d1730bfbb7199bbd6f0496869d55478ae4" translate="yes" xml:space="preserve">
          <source>Automatic variable. An automatic variable is one created by the interpreter, for example &lt;code&gt;argn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e2fa299a5fe4eca74b46c1ef20ea54fac2731a" translate="yes" xml:space="preserve">
          <source>Available commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50394b9343099c6412f9782fe8989b9e0006bf6a" translate="yes" xml:space="preserve">
          <source>Avoid calling &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;feval&lt;/code&gt; excessively. Parsing input or looking up the name of a function in the symbol table are relatively expensive operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8112ba81d3bb955ad3f67e3515c7357c915ffc" translate="yes" xml:space="preserve">
          <source>Avoid computing costly intermediate results multiple times. Octave currently does not eliminate common subexpressions. Also, certain internal computation results are cached for variables. For instance, if a matrix variable is used multiple times as an index, checking the indices (and internal conversion to integers) is only done once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472cff45d0b0c70e9519038fcbd6de38a9f430c9" translate="yes" xml:space="preserve">
          <source>Avoid deep recursion. Function calls to m-file functions carry a relatively significant overhead, so rewriting a recursion as a loop often helps. Also, note that the maximum level of recursion is limited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0556ca1d709248ee926a8bec8dc3258822f05cca" translate="yes" xml:space="preserve">
          <source>Avoid resizing matrices unnecessarily. When building a single result matrix from a series of calculations, set the size of the result matrix first, then insert values into it. Write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c103ede19b013bb4a32e10aaa64c58a55fa93a1e" translate="yes" xml:space="preserve">
          <source>Axes NextPlot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de316d49deb5ccab36aebd65a0be58a16c62a1a" translate="yes" xml:space="preserve">
          <source>Axes Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc0548be57f1a671655372582948b6ecb8792e2" translate="yes" xml:space="preserve">
          <source>Axis Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="d2c70185da8e36a4190565c01ff3c846d72ed5de" translate="yes" xml:space="preserve">
          <source>B = spdiags (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08d8c4286c3416e30d8afcaa554bc33cf5bcc2e" translate="yes" xml:space="preserve">
          <source>B = spdiags (A, d)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdd9097b8d95cfcaa4687dc68aba4f8af1b5829" translate="yes" xml:space="preserve">
          <source>B.1 Test Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d102d7fc931aaf9968a1bf73fea9155bd264c7" translate="yes" xml:space="preserve">
          <source>B.2 Demonstration Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdb4dba5c8e978271b1486512050573279d7d90" translate="yes" xml:space="preserve">
          <source>BACKSPACE</source>
          <target state="translated">BACKSPACE</target>
        </trans-unit>
        <trans-unit id="7067ed76949bf39af33598b214b1f9a97c9257df" translate="yes" xml:space="preserve">
          <source>BDemonstration Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7243d04c977df0309eee7b50ccaddc2665154ee" translate="yes" xml:space="preserve">
          <source>BLAS</source>
          <target state="translated">BLAS</target>
        </trans-unit>
        <trans-unit id="62d5aeef9ec51abb2a106e7d794566b651ddbe62" translate="yes" xml:space="preserve">
          <source>BSD-style license without advertising clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db3729812553d37ad47bfa7e32aa86c887a9a40" translate="yes" xml:space="preserve">
          <source>BTest Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726c946b4e4b045dde2893b0fca04a81b3904c76" translate="yes" xml:space="preserve">
          <source>Background Information: This function is called by an ode solver function if it was specified in the &lt;code&gt;&quot;OutputFcn&quot;&lt;/code&gt; property of an options structure created with &lt;code&gt;odeset&lt;/code&gt;. The ode solver will initially call the function with the syntax &lt;code&gt;odeplot ([&lt;var&gt;tfirst&lt;/var&gt;, &lt;var&gt;tlast&lt;/var&gt;], &lt;var&gt;y0&lt;/var&gt;, &quot;init&quot;)&lt;/code&gt;. The function initializes internal variables, creates a new figure window, and sets the x limits of the plot. Subsequently, at each time step during the integration the ode solver calls &lt;code&gt;odeplot (&lt;var&gt;t&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, [])&lt;/code&gt;. At the end of the solution the ode solver calls &lt;code&gt;odeplot ([], [], &quot;done&quot;)&lt;/code&gt; so that odeplot can perform any clean-up actions required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecc6ca439d6c5e58174068ccc0bd9b416174b53" translate="yes" xml:space="preserve">
          <source>Background: A matrix is Hermitian if the complex conjugate transpose of the matrix is equal to the original matrix: &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;==&amp;nbsp;&lt;var&gt;A&lt;/var&gt;'&lt;/code&gt;. If a tolerance is given then the calculation is &lt;code&gt;norm (&lt;var&gt;A&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt;', Inf) / norm (&lt;var&gt;A&lt;/var&gt;, Inf) &amp;lt; &lt;var&gt;tol&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c3a16132d003dc408b34c6ab620faee5509e26" translate="yes" xml:space="preserve">
          <source>Background: A matrix is symmetric if the transpose of the matrix is equal to the original matrix: &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;==&amp;nbsp;&lt;var&gt;A&lt;/var&gt;.'&lt;/code&gt;. If a tolerance is given then symmetry is determined by &lt;code&gt;norm (&lt;var&gt;A&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt;.', Inf) / norm (&lt;var&gt;A&lt;/var&gt;, Inf) &amp;lt; &lt;var&gt;tol&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525fc4c444936301ffe7b85e39191ca3a8af59a9" translate="yes" xml:space="preserve">
          <source>Background: A positive definite matrix has eigenvalues which are all greater than zero. A positive semi-definite matrix has eigenvalues which are all greater than or equal to zero. The matrix &lt;var&gt;A&lt;/var&gt; is very likely to be positive semi-definite if the following two conditions hold for a suitably small tolerance &lt;var&gt;tol&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8b7aa251aa0adb65af89ded753ff22c8abf8b2" translate="yes" xml:space="preserve">
          <source>Background: Array elements can be specified either by a linear index which starts at 1 and runs through the number of elements in the array, or they may be specified with subscripts for the row, column, page, etc. The functions &lt;code&gt;ind2sub&lt;/code&gt; and &lt;code&gt;sub2ind&lt;/code&gt; interconvert between the two forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a072b76d13bf1b21aef3b62c0c5a52ce4df96e5" translate="yes" xml:space="preserve">
          <source>Background: The QR factorization has applications in the solution of least squares problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375e6cef116c18815d1f3cc43298cfb82ef22dc2" translate="yes" xml:space="preserve">
          <source>Backtracking technique option (for MIP only):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c63fe664ee19ec45f508543d1a17026f2d840be" translate="yes" xml:space="preserve">
          <source>Balance the matrix &lt;var&gt;A&lt;/var&gt; to reduce numerical errors in future calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d394246b3915d97f9bf77cf001892566876bc6" translate="yes" xml:space="preserve">
          <source>Banded matrix with the band size of &lt;var&gt;nl&lt;/var&gt; below the diagonal and &lt;var&gt;nu&lt;/var&gt; above it. If &lt;var&gt;nl&lt;/var&gt; and &lt;var&gt;nu&lt;/var&gt; are 1, then the matrix is tridiagonal and treated with specialized code. In addition the matrix can be marked as probably a positive definite. (Sparse matrices only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf220ef7bb90a13a328a54e14da11c5a5b7eb35c" translate="yes" xml:space="preserve">
          <source>Bar Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28939a2097a9143a4110936db75a6a1b204e4df" translate="yes" xml:space="preserve">
          <source>Bar series objects are created by the &lt;code&gt;bar&lt;/code&gt; or &lt;code&gt;barh&lt;/code&gt; functions. Each &lt;code&gt;hggroup&lt;/code&gt; element contains a single patch object. The properties of the bar series are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961bc31035eeda2aab252fceeb567cc8d9b8ef59" translate="yes" xml:space="preserve">
          <source>Barber, C.B., Dobkin, D.P., and Huhdanpaa, H.T.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bce76b8ced092d41b9c4af738e6086a1ffa555e" translate="yes" xml:space="preserve">
          <source>Bars are stacked so that each X value has a single bar composed of multiple segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879797c59c373c24d42462664c63c4671c26107b" translate="yes" xml:space="preserve">
          <source>Bars are stacked so that each Y value has a single bar composed of multiple segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58ccf8eaf93e1479e91be552e6a5c6a5fadedeb" translate="yes" xml:space="preserve">
          <source>Base64 and Binary Data Transmission</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5c4a92b32357c9851e6825f043d685887e0f2" translate="yes" xml:space="preserve">
          <source>Basic Input and Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2e27808a28441dbbed0d3390417aa95ef3b5ce" translate="yes" xml:space="preserve">
          <source>Basic Linear Algebra Subroutine library. Accelerated &lt;small&gt;BLAS&lt;/small&gt; libraries such as OpenBLAS (&lt;a href=&quot;https://www.openblas.net/&quot;&gt;https://www.openblas.net/&lt;/a&gt;) or ATLAS (&lt;a href=&quot;http://math-atlas.sourceforge.net&quot;&gt;http://math-atlas.sourceforge.net&lt;/a&gt;) are recommended for best performance. The reference implementation (&lt;a href=&quot;http://www.netlib.org/blas&quot;&gt;http://www.netlib.org/blas&lt;/a&gt;) is slow, unmaintained, and suffers from certain bugs in corner case inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a00c0a675f6cf3eab4ed98155c65341a29a0926" translate="yes" xml:space="preserve">
          <source>Basic Matrix Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c998c3676e25ae6bc1531d84a9285f62330786f3" translate="yes" xml:space="preserve">
          <source>Basic Operators and Functions on Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2987ea9019eddd834b7476d352eb69a8b1eb45c" translate="yes" xml:space="preserve">
          <source>Basic Statistical Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41db8258da7fde0c1376c29ef7b86dbb4249ec41" translate="yes" xml:space="preserve">
          <source>Basic Unix system utilities are required for building Octave. All will be available with any modern Unix system and also on Windows with either Cygwin or MinGW and MSYS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">Uso básico</target>
        </trans-unit>
        <trans-unit id="f28c73652a86f7f4c93d8081035c91de8f764946" translate="yes" xml:space="preserve">
          <source>Basic Usage and Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4581904814b3b721f0fd83a306bff03d8e2f02a9" translate="yes" xml:space="preserve">
          <source>Basic Usage of Cell Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ff45cb27924860bb94b463bdbabcc29c6ecac1" translate="yes" xml:space="preserve">
          <source>Basic Vectorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb606240d1882d7b20153d872bcf546ce6bc40bf" translate="yes" xml:space="preserve">
          <source>Basic techniques for code optimization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdc2bc9c7ca828f912becc5b6df272b3ca27c9a" translate="yes" xml:space="preserve">
          <source>Basic text formatting is supported inside sections, see the example given below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b90776a06e35fdd0d053b9cf250b3c723736571" translate="yes" xml:space="preserve">
          <source>Basically, a URL is written between an opening &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddff41080993b42afb80e7f106d3cccf60d73d7d" translate="yes" xml:space="preserve">
          <source>Batch mode is enabled by either 1) specifying a logfile using the third argument &lt;var&gt;fname&lt;/var&gt; or &lt;var&gt;fid&lt;/var&gt;, or 2) requesting an output argument such as &lt;var&gt;success&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbdf661d49afafc5ac40d42d8c5cced3a494bf9" translate="yes" xml:space="preserve">
          <source>Be aware of lazy copies (copy-on-write).    When a copy of an object is created, the data is not immediately copied, but rather shared. The actual copying is postponed until the copied data needs to be modified. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9722830db1ba306da44ceeb175c4bc642edee1e" translate="yes" xml:space="preserve">
          <source>Be precise about these changes&amp;mdash;show a context diff for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab37523154499435330c8f82a80275c72a272d97" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;assert&lt;/code&gt; is so frequently used alone in a test block, there is a shorthand form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42dda19769c5c356f0388a32203b0d98be01da14" translate="yes" xml:space="preserve">
          <source>Because compilation is a costly operation it does not make sense to employ JIT when the loop count is low. By default only loops with greater than 1000 iterations will be accelerated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac75969a1a296933f78fe6e0c8a80815a058e6f" translate="yes" xml:space="preserve">
          <source>Because many other languages provide C or C++ APIs it is relatively simple to build bridges between Octave and other languages. This is also a way to bridge to hardware resources which often have device drivers written in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16518a59e5cc57cf848762028e4f35fe263ce42" translate="yes" xml:space="preserve">
          <source>Because oct-files are compiled functions they open up the possibility of crashing Octave through careless function calls or memory faults. It is quite important that each and every function have a sufficient level of parameter checking to ensure that Octave behaves well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722617bc35c223f610ad609bf73304b8577676f5" translate="yes" xml:space="preserve">
          <source>Because there is a space after &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e260bc2cd21931564989aa55e80e5554ca25fd19" translate="yes" xml:space="preserve">
          <source>Because there may be output waiting to be displayed by the pager, it is a good idea to always call &lt;code&gt;fflush (stdout)&lt;/code&gt; before calling &lt;code&gt;input&lt;/code&gt;. This will ensure that all pending output is written to the screen before your prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8ac8470b9e50cf881db223202bb12df8b79ca7" translate="yes" xml:space="preserve">
          <source>Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp;amp; Brooks/Cole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eb0a4917174ca38ad73262aa449fba60bad620" translate="yes" xml:space="preserve">
          <source>Before computing the Fourier transform, one of the following windows is applied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f070b7123334f4e6a5ee75e3105b5f059e00d1c" translate="yes" xml:space="preserve">
          <source>Before going further, you should first determine if you really need to bother writing code outside of Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c43eb48bf7018313ef9a06f84908d66a01c79c4" translate="yes" xml:space="preserve">
          <source>Before you evaluate an expression you need to substitute the values of the variables used in the expression. These are stored in the symbol table. Whenever the interpreter starts a new function it saves the current symbol table and creates a new one, initializing it with the list of function parameters and a couple of predefined variables such as &lt;code&gt;nargin&lt;/code&gt;. Expressions inside the function use the new symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69385ac472d5822d09bb47bdba028415397cf7c6" translate="yes" xml:space="preserve">
          <source>Begins a new line by printing the equivalent of a carriage return followed by a line feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c89f79fedb780dc8797d572949970af2bd3bf91" translate="yes" xml:space="preserve">
          <source>Below is an example of creating a small sparse matrix using the first technique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b890884bb782672a4e1cbc2450c921c4c0a7525" translate="yes" xml:space="preserve">
          <source>Below, we will give a short example of a profiler session. See &lt;a href=&quot;profiling#Profiling&quot;&gt;Profiling&lt;/a&gt;, for the documentation of the profiler functions in detail. Consider the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c4bb4aa69642ea28c3f4bd8479c0e6dac8a18e" translate="yes" xml:space="preserve">
          <source>Besides common arithmetic operations, several functions of two arguments also broadcast. The full list of functions and operators that broadcast is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37822362fd6ce4c84d3d2504319c2f2326368c0" translate="yes" xml:space="preserve">
          <source>Besides line properties, the arrowhead can be customized using &lt;code&gt;&quot;headlength&quot;&lt;/code&gt;, &lt;code&gt;&quot;headwidth&quot;&lt;/code&gt;, and &lt;code&gt;&quot;headstyle&quot;&lt;/code&gt; properties. Supported values for &lt;code&gt;&quot;headstyle&quot;&lt;/code&gt; property are: [&lt;code&gt;&quot;diamond&quot;&lt;/code&gt; | &lt;code&gt;&quot;ellipse&quot;&lt;/code&gt; | &lt;code&gt;&quot;plain&quot;&lt;/code&gt; | &lt;code&gt;&quot;rectangle&quot;&lt;/code&gt; | &lt;code&gt;&quot;vback1&quot;&lt;/code&gt; | &lt;code&gt;&quot;{vback2}&quot;&lt;/code&gt; | &lt;code&gt;&quot;vback3&quot;&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9ea4ce1f533fd02f131ae77908d593a8054c60" translate="yes" xml:space="preserve">
          <source>Besides special glyphs, the formatting of the text can be changed within the string by using the codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6590782bb7d4e4a3e1b487c0373613995a013879" translate="yes" xml:space="preserve">
          <source>Besides the above mentioned files, a package can also contain one or more of the following directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff9d15874f2e14a910c8161aeb7ed33a01f47b5" translate="yes" xml:space="preserve">
          <source>Besides the index operator &lt;code&gt;&quot;.&quot;&lt;/code&gt;, Octave can use dynamic naming &lt;code&gt;&quot;(var)&quot;&lt;/code&gt; or the &lt;code&gt;struct&lt;/code&gt; function to create structures. Dynamic naming uses the string value of a variable as the field name. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd55df52e8edd7615ca160e37f6cae69c7c3b1e" translate="yes" xml:space="preserve">
          <source>Besides the least-squares estimate matrix &lt;var&gt;x&lt;/var&gt; (p-by-k), the function also returns &lt;var&gt;stdx&lt;/var&gt; (p-by-k), the error standard deviation of estimated &lt;var&gt;x&lt;/var&gt;; &lt;var&gt;mse&lt;/var&gt; (k-by-1), the estimated data error covariance scale factors (&lt;em&gt;\sigma^2&lt;/em&gt;); and &lt;var&gt;S&lt;/var&gt; (p-by-p, or p-by-p-by-k if k &amp;gt; 1), the error covariance of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d40388e2c253600caf75ba2177cf52b4f83ae6" translate="yes" xml:space="preserve">
          <source>Besides the number of arguments, inputs can be checked for various properties. &lt;code&gt;validatestring&lt;/code&gt; is used for string arguments and &lt;code&gt;validateattributes&lt;/code&gt; for numeric arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c94f17566f6c0360163dd66cd409d45c71e1c72" translate="yes" xml:space="preserve">
          <source>Best local bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e1cc05c077025217a7482d3305fb438fd3160d" translate="yes" xml:space="preserve">
          <source>Best projection heuristic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd543cab75c3d933ad6279566277ef039895cdb" translate="yes" xml:space="preserve">
          <source>Beware of resorting to broadcasting if a simpler operation will suffice. For matrices &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;, consider the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0006711ce28b361c5dc45f3fb2a1b35e309ab1b2" translate="yes" xml:space="preserve">
          <source>Beyond speed and memory issues, there have been instances where some input matrices were not accurately decomposed by &lt;code&gt;gesdd&lt;/code&gt;. See currently active bug &lt;a href=&quot;https://savannah.gnu.org/bugs/?55564&quot;&gt;https://savannah.gnu.org/bugs/?55564&lt;/a&gt;. Until these accuracy issues are resolved in a new version of the &lt;small&gt;LAPACK&lt;/small&gt; library, the default driver in Octave has been set to &lt;code&gt;&quot;gesvd&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077a15b13db556c78b4bfbf28994d6f478f129e0" translate="yes" xml:space="preserve">
          <source>Binary I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00df53002d6983ff503c9df80c8975eaf3cd2ab" translate="yes" xml:space="preserve">
          <source>Binary Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bcf8d0c84c0854259a1353a132c4c559c54d2b" translate="yes" xml:space="preserve">
          <source>Binary addition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78e01e2df9d76ad94ccfa1ca5c9239d5818c7de" translate="yes" xml:space="preserve">
          <source>Binary subtraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4915a22bd9a4e5302c4d2d785671382b8a5d633f" translate="yes" xml:space="preserve">
          <source>Bison</source>
          <target state="translated">Bison</target>
        </trans-unit>
        <trans-unit id="6bcf5eeb72876c131fd59448a2cc74c116262fe0" translate="yes" xml:space="preserve">
          <source>Bit Manipulations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208abe95f61bdca28d01c97a63d789ede7dec51c" translate="yes" xml:space="preserve">
          <source>BitDepth</source>
          <target state="translated">BitDepth</target>
        </trans-unit>
        <trans-unit id="444f408bc523de1ebe62775a099237e6a577819f" translate="yes" xml:space="preserve">
          <source>BitRate</source>
          <target state="translated">BitRate</target>
        </trans-unit>
        <trans-unit id="57332e55aa80ed1cac49621fb28fcd571f920a7c" translate="yes" xml:space="preserve">
          <source>Bits that are shifted out of either end of the value are lost. Octave also uses arithmetic shifts, where the sign bit of the value is kept during a right shift. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa0da40dfa459d5e0371427f8a8d6065ad539cb" translate="yes" xml:space="preserve">
          <source>BitsPerSample</source>
          <target state="translated">BitsPerSample</target>
        </trans-unit>
        <trans-unit id="c1b38fad085dd3509a88635aa132e51044b4666a" translate="yes" xml:space="preserve">
          <source>Block Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dffd0bdb173cfa60dace4ab47d5ffd8318adfce" translate="yes" xml:space="preserve">
          <source>Block type summary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d44bc449c2a26374800a503f10f3d8949505f40" translate="yes" xml:space="preserve">
          <source>Blue</source>
          <target state="translated">Blue</target>
        </trans-unit>
        <trans-unit id="bf04002b0249875f43eaf26f9729ac08bdbee8a3" translate="yes" xml:space="preserve">
          <source>Bold font</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ac379f83771407fb1e0d78aaf3f7b5adc6706f" translate="yes" xml:space="preserve">
          <source>Boolean Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021e8c0cb1cf42de5aefc725da1276c9e67ad800" translate="yes" xml:space="preserve">
          <source>Boolean. &lt;code&gt;idx(i)&lt;/code&gt; is a logical 1 or 0, indicating whether &lt;code&gt;y(i)&lt;/code&gt; is contained in table or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722d7d26114bf5209d2a70ccadac37a8f4e15e24" translate="yes" xml:space="preserve">
          <source>Both &lt;small&gt;GLPK&lt;/small&gt; and Qhull use &lt;code&gt;int&lt;/code&gt; internally so maximum problem sizes may be limited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b903c35898c83e85af4a489c32799aabf17f53db" translate="yes" xml:space="preserve">
          <source>Both &lt;var&gt;dim&lt;/var&gt; and &lt;var&gt;opt&lt;/var&gt; are optional. If both are supplied, either may appear first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71499a4de5921f796e800de6bbc78afa630df957" translate="yes" xml:space="preserve">
          <source>Both &lt;var&gt;minargs&lt;/var&gt; and &lt;var&gt;maxargs&lt;/var&gt; must be numeric scalars. Zero, Inf, and negative are all valid, and they can have the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b01a758d9ebdf7327fb3ea751d38958b41778df" translate="yes" xml:space="preserve">
          <source>Both &lt;var&gt;minargs&lt;/var&gt; and &lt;var&gt;maxargs&lt;/var&gt; must be scalar numeric values. Zero, Inf, and negative values are all allowed, and &lt;var&gt;minargs&lt;/var&gt; and &lt;var&gt;maxargs&lt;/var&gt; may be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff52f594471b0880a2ec0ed17a669501e3810285" translate="yes" xml:space="preserve">
          <source>Both &lt;var&gt;val&lt;/var&gt; and &lt;var&gt;type&lt;/var&gt; are typically one of the following built-in classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2f4ecf9c471b68979ea9dacaba1f0a8fce1bdf" translate="yes" xml:space="preserve">
          <source>Both Ends, with one more from the high-end if &lt;var&gt;k&lt;/var&gt; is odd (valid only for real symmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a83418918232199a380993f16406c3b736545a" translate="yes" xml:space="preserve">
          <source>Both arrays can be broadcast across each other, for example, all pairwise differences of the elements of a vector with itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceae212444a6d3257be5ec168eded3328930237e" translate="yes" xml:space="preserve">
          <source>Both function files and script files end with an extension of .m, for &lt;small&gt;MATLAB&lt;/small&gt; compatibility. If you want more than one independent functions in a file, it must be a script file (see &lt;a href=&quot;script-files#Script-Files&quot;&gt;Script Files&lt;/a&gt;), and to use these functions you must execute the script file before you can use the functions that are in the script file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56dd23b94f903210d7d506fc9594ca3e84f09ec" translate="yes" xml:space="preserve">
          <source>Both parameters are optional. The default cycle time is 5 seconds and the default increment is 2. If the option &lt;code&gt;&quot;inf&quot;&lt;/code&gt; is given then cycle continuously until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a888bd8c11a9db6c604f8bfa7eb4320f863b828" translate="yes" xml:space="preserve">
          <source>Both the class of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;class&lt;/var&gt; must be one of the built-in numeric classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25854a99e6b80e1bb8ca35c4d2b39c25d82a1fd8" translate="yes" xml:space="preserve">
          <source>Bottom center of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c116fa7ee9cd5f76e854c7be300e0ac5ae08731e" translate="yes" xml:space="preserve">
          <source>Bottom left of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c31aff3bdb356f51c0334d6484dd4810f1ba65" translate="yes" xml:space="preserve">
          <source>Bottom right of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234ddc71255560f5941e6823ac161189e2dd916b" translate="yes" xml:space="preserve">
          <source>Branching technique option (for MIP only):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4783e8f8fb67f8a1efa54f0096e73e1b6c14414c" translate="yes" xml:space="preserve">
          <source>Breadth first search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a8752f2df54d656b09cd2a499cb3a3403ec7ca" translate="yes" xml:space="preserve">
          <source>Breakpoints</source>
          <target state="translated">Breakpoints</target>
        </trans-unit>
        <trans-unit id="6b48ce4f975aaaf9874e30444b8700ed9a99ff23" translate="yes" xml:space="preserve">
          <source>Breakpoints and events can be removed using the &lt;code&gt;dbclear&lt;/code&gt; command with the same syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ec9debbea70409e7c84058d4d402587950524b" translate="yes" xml:space="preserve">
          <source>Breakpoints can be set in any m-file function by using the &lt;code&gt;dbstop&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258c704e79dc1bf48a7380f4c49adc52c02becd6" translate="yes" xml:space="preserve">
          <source>Breakpoints in class methods are also supported (e.g., &lt;code&gt;dbstop (&quot;@class/method&quot;)&lt;/code&gt;). However, breakpoints cannot be set in built-in functions (e.g., &lt;code&gt;sin&lt;/code&gt;, etc.) or dynamically loaded functions (i.e., oct-files).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0942bb5a4441b343a13f41ebf4c66d8c71ce141e" translate="yes" xml:space="preserve">
          <source>Brighten or darken a colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba459229366746c447e3cdf752eb917433152cfe" translate="yes" xml:space="preserve">
          <source>Broadcasting</source>
          <target state="translated">Broadcasting</target>
        </trans-unit>
        <trans-unit id="2daf09a1afcb280d9158a2e1d494316ef2d65c85" translate="yes" xml:space="preserve">
          <source>Broadcasting is only applied if either of the two broadcasting conditions hold. As usual, however, broadcasting does not apply when two dimensions differ and neither is 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb44b8fcd5f972d66798a325e6edfcf831b4545" translate="yes" xml:space="preserve">
          <source>Broadcasting operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7998a199dad89184b0d7f47d9b8c768ff088a18e" translate="yes" xml:space="preserve">
          <source>Broadcasting refers to how Octave binary operators and functions behave when their matrix or array operands or arguments differ in size. Since version 3.6.0, Octave now automatically broadcasts vectors, matrices, and arrays when using elementwise binary operators and functions. Broadly speaking, smaller arrays are &amp;ldquo;broadcast&amp;rdquo; across the larger one, until they have a compatible shape. The rule is that corresponding array dimensions must either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fa58ef984bb622b8d7739cec913fac4ccb7e05" translate="yes" xml:space="preserve">
          <source>Bug Criteria</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb16822f3ab4a4b7c7befbf6b7a12d0f7072950e" translate="yes" xml:space="preserve">
          <source>Bug Reporting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5affe70bdb77ae83462885545ace5d26f56e1f9a" translate="yes" xml:space="preserve">
          <source>Bug Tracker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654ffe48f6054af226250c2aa3867b5fc4c80bcc" translate="yes" xml:space="preserve">
          <source>Bugs we will fix later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12796477825be21e0fc36e92270e069f8d1cb37" translate="yes" xml:space="preserve">
          <source>Build a binary form of a package or packages. The binary file produced will itself be an Octave package that can be installed normally with &lt;code&gt;pkg&lt;/code&gt;. The form of the command to build a binary package is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a0b4f30ab735572d6583fa2a8ab076525f9f12" translate="yes" xml:space="preserve">
          <source>Build a block diagonal matrix from &lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt;, &lt;var&gt;C&lt;/var&gt;, &amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c66e57bb624e27f930330c3f8f24e51e9b9350" translate="yes" xml:space="preserve">
          <source>Build complete filename from separate parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">Building</target>
        </trans-unit>
        <trans-unit id="9f84d190c99bd0598c321d2cd6819d63839611df" translate="yes" xml:space="preserve">
          <source>Built-in Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c3f8cf90856dbe699ea2937502614fba4e9278" translate="yes" xml:space="preserve">
          <source>Built-in function A function that is a part of core Octave such as &lt;code&gt;numel&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d705258c54e6079321beb65fed2aa198e0303783" translate="yes" xml:space="preserve">
          <source>Bulleted Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4cb0e146f77e11529c9b57fd08de6a7d684954" translate="yes" xml:space="preserve">
          <source>Bulleted list item 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f066ae62705afea5aae04013092815d6e76c8d4d" translate="yes" xml:space="preserve">
          <source>Bulleted list item 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e548126447e7062d73743793702d1807c4d367" translate="yes" xml:space="preserve">
          <source>But it is if you preallocate the cell array &lt;code&gt;y&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f119e0c4d55a5dfec8b9cdba7d14582da7a325f4" translate="yes" xml:space="preserve">
          <source>But that also means that you might have to assign the output of a method that changes properties back to the object manually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b7ac3eea6a52085a1485e9bf3b47956be7d286" translate="yes" xml:space="preserve">
          <source>But this does not give much information about where this time is spent; for instance, whether the single call to &lt;code&gt;expm&lt;/code&gt; is more expensive or the recursive time-stepping itself. To get a more detailed picture, we can use the profiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38d9e471d0fb0266f6b23abbd19a5209ba07580" translate="yes" xml:space="preserve">
          <source>ButtonDownFcn: called if a mouse button is pressed while the pointer is over this object. Note, that the gnuplot interface does not implement this callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015c5677e1c1704f69ec1b0d0d2c2df7a5e2fa0a" translate="yes" xml:space="preserve">
          <source>By convention,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00146ce017cc4b6620457111ff066e8e709ef408" translate="yes" xml:space="preserve">
          <source>By default (&lt;var&gt;c&lt;/var&gt; omitted, or a particular column unspecified in &lt;var&gt;c&lt;/var&gt;) an ascending sort order is used. However, if elements of &lt;var&gt;c&lt;/var&gt; are negative then the corresponding column is sorted in descending order. If the elements of &lt;var&gt;A&lt;/var&gt; are strings then a lexicographical sort is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798056cb67e6778b14d87df0411474bab87fb92b" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;accumarray&lt;/code&gt; returns a full matrix. If &lt;var&gt;issparse&lt;/var&gt; is logically true, then a sparse matrix is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911638c977b41d139e84fa7812600964e2105884" translate="yes" xml:space="preserve">
          <source>By default &lt;var&gt;S&lt;/var&gt; is assumed to be symmetric and the symmetric elimination tree is returned. The argument &lt;var&gt;typ&lt;/var&gt; controls whether a symmetric or column elimination tree is returned. Valid values of &lt;var&gt;typ&lt;/var&gt; are &lt;code&gt;&quot;sym&quot;&lt;/code&gt; or &lt;code&gt;&quot;col&quot;&lt;/code&gt;, for symmetric or column elimination tree respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5143ed57319349283a1f8a77fb3839c1fe085c0" translate="yes" xml:space="preserve">
          <source>By default callback functions are queued (they are executed one after the other in the event queue) unless the &lt;code&gt;drawnow&lt;/code&gt;, &lt;code&gt;figure&lt;/code&gt;, &lt;code&gt;waitfor&lt;/code&gt;, &lt;code&gt;getframe&lt;/code&gt;, or &lt;code&gt;pause&lt;/code&gt; functions are used. If an executing callback invokes one of those functions, it causes Octave to flush the event queue, which results in the executing callback being interrupted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56364265536193758c75afd28c9b94f8360dfb7" translate="yes" xml:space="preserve">
          <source>By default installed packages are not available from the Octave prompt, but it is possible to control this using the &lt;code&gt;pkg load&lt;/code&gt; and &lt;code&gt;pkg unload&lt;/code&gt; commands. The functions from a package can be added to the Octave path by typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f43f0328e9708b882c4896f046a6014fdf97f5" translate="yes" xml:space="preserve">
          <source>By default the arguments are evaluated with &lt;code&gt;feval (@plot, &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. However the type of plot can be modified with the &lt;var&gt;fun&lt;/var&gt; argument, in which case the plots are generated by &lt;code&gt;feval (&lt;var&gt;fun&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. &lt;var&gt;fun&lt;/var&gt; can be a function handle, an inline function, or a string of a function name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f59e43a905190e7beb0413e84a6573138a05215" translate="yes" xml:space="preserve">
          <source>By default the complex pairs are sorted along the first non-singleton dimension of &lt;var&gt;z&lt;/var&gt;. If &lt;var&gt;dim&lt;/var&gt; is specified, then the complex pairs are sorted along this dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bda86c3cd61039ba6b9a4b1a6a08fa849229b39" translate="yes" xml:space="preserve">
          <source>By default the values are displayed with the name of the variable &lt;var&gt;c&lt;/var&gt;. However, this name can be replaced with the variable &lt;var&gt;name&lt;/var&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0cc2c3dfa642100bcdb50d982ffbb73ce3005c" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;&lt;var&gt;p&lt;/var&gt; = 2&lt;/code&gt; is used which implies a (relatively slow) singular value decomposition. Other possible selections are &lt;code&gt;&lt;var&gt;p&lt;/var&gt; = 1, Inf, &quot;fro&quot;&lt;/code&gt; which are generally faster. See &lt;code&gt;norm&lt;/code&gt; for a full discussion of possible &lt;var&gt;p&lt;/var&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9170dd699561c9ab7aba216d9995243893c298" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;eigs&lt;/code&gt; solve the equation where is the corresponding eigenvector. If given the positive definite matrix &lt;var&gt;B&lt;/var&gt; then &lt;code&gt;eigs&lt;/code&gt; solves the general eigenvalue equation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ebccfa3e2c0399c46601b4c99a927c2dad3626" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ichol&lt;/code&gt; uses only the lower triangle of &lt;var&gt;A&lt;/var&gt; and produces a lower triangular factor &lt;var&gt;L&lt;/var&gt; such that &lt;code&gt;L*L'&lt;/code&gt; approximates &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54099468baa3e6972f8efbd022985d80fa0d109e" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;lookfor&lt;/code&gt; looks for &lt;var&gt;str&lt;/var&gt; in just the first sentence of the help string for each function found. The entire help text of each function can be searched by using the &lt;code&gt;&quot;-all&quot;&lt;/code&gt; argument. All searches are case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4245eb185865c1d9d2b01ec31984d659e850cf27" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ode23&lt;/code&gt; uses an adaptive timestep with the &lt;code&gt;integrate_adaptive&lt;/code&gt; algorithm. The tolerance for the timestep computation may be changed by using the options &lt;code&gt;&quot;RelTol&quot;&lt;/code&gt; and &lt;code&gt;&quot;AbsTol&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a060989155db8cdee80642f11c52faf944240b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ode45&lt;/code&gt; uses an adaptive timestep with the &lt;code&gt;integrate_adaptive&lt;/code&gt; algorithm. The tolerance for the timestep computation may be changed by using the options &lt;code&gt;&quot;RelTol&quot;&lt;/code&gt; and &lt;code&gt;&quot;AbsTol&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2690c437693dc3d9d7db3f328bad57c86d05518a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;rande&lt;/code&gt; uses the Marsaglia and Tsang &amp;ldquo;Ziggurat technique&amp;rdquo; to transform from a uniform to an exponential distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f57bce0568aba3827b242d08bdc5806545b452d" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;randn&lt;/code&gt; uses the Marsaglia and Tsang &amp;ldquo;Ziggurat technique&amp;rdquo; to transform from a uniform to a normal distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771057781c712bb823f17511b113b57a83ae32d5" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;filename&lt;/var&gt; is &lt;code&gt;&quot;Untitled.fig&quot;&lt;/code&gt;. If a full path is not specified, the file opened will be the first one encountered in the load path. If &lt;var&gt;filename&lt;/var&gt; is not found and does not have an extension, a search will take place for the first file in the load path with extension &lt;code&gt;&quot;.fig&quot;&lt;/code&gt; or &lt;code&gt;&quot;.ofig&quot;&lt;/code&gt;, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45871410def70663d261c62363fb4f54949d2622" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;format&lt;/var&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e381c3192c19cd2c093bc57365d36ecbea474c" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;mode&lt;/var&gt; is &lt;code&gt;&quot;ascending&quot;&lt;/code&gt;. NaNs are treated in the same manner as &lt;code&gt;sort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962e7405ade926a43a02d49216368a102fe31670" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;lower&quot;&lt;/code&gt; and the incomplete beta function integrated from 0 to &lt;var&gt;x&lt;/var&gt; is computed. If &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;upper&quot;&lt;/code&gt; then the complementary function integrated from &lt;var&gt;x&lt;/var&gt; to 1 is calculated. The two choices are related by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fda712be761f4b66125d33d2d184d2fdcabba1f" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;lower&quot;&lt;/code&gt; and the incomplete gamma function integrated from 0 to &lt;var&gt;x&lt;/var&gt; is computed. If &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;upper&quot;&lt;/code&gt; then the complementary function integrated from &lt;var&gt;x&lt;/var&gt; to infinity is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77aaf68055c6e56c3400b712e43ffbc0c79469a0" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;lower&quot;&lt;/code&gt; and the inverse of the incomplete beta function integrated from 0 to &lt;var&gt;x&lt;/var&gt; is computed. If &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;upper&quot;&lt;/code&gt; then the complementary function integrated from &lt;var&gt;x&lt;/var&gt; to 1 is inverted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960e5788edd8f03b5140d1f398117baa0b86b060" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;lower&quot;&lt;/code&gt; and the inverse of the incomplete gamma function integrated from 0 to &lt;var&gt;x&lt;/var&gt; is computed. If &lt;var&gt;tail&lt;/var&gt; is &lt;code&gt;&quot;upper&quot;&lt;/code&gt;, then the complementary function integrated from &lt;var&gt;x&lt;/var&gt; to infinity is inverted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ad8a664f24c5645d584b7da4b1e8d378a867b2" translate="yes" xml:space="preserve">
          <source>By default, &lt;var&gt;y&lt;/var&gt; is automatically normalized to the range [-1, 1]. If the range [&lt;var&gt;ymin&lt;/var&gt;, &lt;var&gt;ymax&lt;/var&gt;] is given, then elements of &lt;var&gt;y&lt;/var&gt; that fall within the range &lt;var&gt;ymin&lt;/var&gt; &amp;le; &lt;var&gt;y&lt;/var&gt; &amp;le; &lt;var&gt;ymax&lt;/var&gt; are scaled to the range [-1, 1] instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f84dc3782311b359b3fffc87181c379a31df75" translate="yes" xml:space="preserve">
          <source>By default, Octave displays 5 significant digits in a human readable form (option &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05063acf2fe1c0cb572eb7c9e74c0154d501fcb0" translate="yes" xml:space="preserve">
          <source>By default, Octave refreshes the plot window when a prompt is printed, or when waiting for input. The &lt;code&gt;drawnow&lt;/code&gt; function is used to cause a plot window to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9992b8aea62671d12e43172ccacc3f47113d0b07" translate="yes" xml:space="preserve">
          <source>By default, Octave&amp;rsquo;s image IO functions (&lt;code&gt;imread&lt;/code&gt;, &lt;code&gt;imwrite&lt;/code&gt;, and &lt;code&gt;imfinfo&lt;/code&gt;) use the &lt;code&gt;GraphicsMagick&lt;/code&gt; library for their operations. This means a vast number of image formats is supported but considering the large amount of image formats in science and its commonly closed nature, it is impossible to have a library capable of reading them all. Because of this, the function &lt;code&gt;imformats&lt;/code&gt; keeps a configurable list of available formats, their extensions, and what functions should the image IO functions use. This allows one to expand Octave&amp;rsquo;s image IO capabilities by creating functions aimed at acting on specific file formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90b2e0839829076fd1af76568f267aa7e4d66fc" translate="yes" xml:space="preserve">
          <source>By default, all contours are labeled. However, the contours to label can be specified by the vector &lt;var&gt;v&lt;/var&gt;. If the &lt;code&gt;&quot;manual&quot;&lt;/code&gt; argument is given then the contours to label can be selected with the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d9754aafa7435658c5a76b6aff00e485aba87d" translate="yes" xml:space="preserve">
          <source>By default, configure looks for the best &lt;small&gt;BLAS&lt;/small&gt; matrix libraries on your system, including optimized implementations such as the free ATLAS 3.0, as well as vendor-tuned libraries. (The use of an optimized &lt;small&gt;BLAS&lt;/small&gt; will generally result in several-times faster matrix operations.) Use this option to specify a particular &lt;small&gt;BLAS&lt;/small&gt; library that Octave should use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705ae32b51a1b1945fa2fc7ac0aaae142c0de76d" translate="yes" xml:space="preserve">
          <source>By default, configure looks for the best &lt;small&gt;LAPACK&lt;/small&gt; matrix libraries on your system, including optimized implementations such as the free ATLAS 3.0, as well as vendor-tuned libraries. (The use of an optimized &lt;small&gt;LAPACK&lt;/small&gt; will generally result in several-times faster matrix operations.) Use this option to specify a particular &lt;small&gt;LAPACK&lt;/small&gt; library that Octave should use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca2e87d532774d938b9da16a847665c9e9163ab" translate="yes" xml:space="preserve">
          <source>By default, dimensions of the empty matrix are printed along with the empty matrix symbol, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6816a83578a0690161e75de3a0d133670e8ab9a" translate="yes" xml:space="preserve">
          <source>By default, high level plotting functions such as &lt;code&gt;plot&lt;/code&gt; reset and redefine axes properties independently from the defaults. An example of such property is the axes &lt;code&gt;box&lt;/code&gt; property: it is set &lt;code&gt;on&lt;/code&gt; by high level 2-D graphics functions regardless of the property &lt;code&gt;&quot;defaultaxesbox&quot;&lt;/code&gt;. Use the &lt;code&gt;hold&lt;/code&gt; function to prevent this behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671bfd99983ad0f62c56aee5bdaaef606eaba638" translate="yes" xml:space="preserve">
          <source>By default, if there is only one input argument, &lt;var&gt;format&lt;/var&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8ab8ebab05f4de3892eb2b5a0cd876413a08d3" translate="yes" xml:space="preserve">
          <source>By default, in the example &lt;var&gt;prop4&lt;/var&gt;, properties are not constant and have public read and write access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd04ebbeb34449f4ca033db3c8023f7e5f6a6ea" translate="yes" xml:space="preserve">
          <source>By default, integers are read as 32-bit quantities. With the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a778586cc92007126dab49bd24000a45ad2eff82" translate="yes" xml:space="preserve">
          <source>By default, only variables visible in the local scope are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d002bc66f22ec4aab067d6f7808f3cfa269450c3" translate="yes" xml:space="preserve">
          <source>By default, recognized file types are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f69b060c5ed1ed2a65a686a7f1152fe8a92811" translate="yes" xml:space="preserve">
          <source>By default, return an empty string if the &lt;var&gt;n&lt;/var&gt;-th argument is not a valid variable name. If the optional argument &lt;var&gt;ids_only&lt;/var&gt; is false, return the text of the argument even if it is not a valid variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903f4f5babb2c841da82c2520f28144fbb2488e7" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;&quot;closerequestfcn&quot;&lt;/code&gt; property of a new plot figure points to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f66db3502863ae4dd3d11c7110cc7b185b83dd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:abbreviated-property-match&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332aa18004c12617323ed812f41a8b94880dfa78" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:assign-as-truth-value&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d79b932ac250e11cad8e0baeaae0e1a5f807d69" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:built-in-variable-assignment&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83aa9346bf7eb6dabc6891a94ca3f1d13e9f2ada" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:glyph-render&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe06b60aa6cc0728710e1111b011062dec73da2" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:logical-conversion&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ec8bc6aecb9ef8458702bea5a486faa9dd7324" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:missing-glyph&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d3f4558135a7d484b08579eb4d1f2c580920d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:neg-dim-as-zero&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c1718bdd9aeaa3071ee3a4bbc60e2da024a065" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:nested-functions-coerced&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc31875ba86dec477a9d9822f3a870c3b5668982" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:noninteger-range-as-index&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba074f81796bab81d04489e79994a5f8786ac29" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:recursive-path-search&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609a28d01f6efc0ff571b55dd83d004da305eb7f" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:shadowed-function&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fb7de433e437c3badc922d3019334ebf403252" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Octave:sqrtm:SingularMatrix&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14280ad33dcc143fb9089c26ad09de0daf18b09" translate="yes" xml:space="preserve">
          <source>By default, the camera is oriented so that &amp;ldquo;up&amp;rdquo; corresponds to the positive z-axis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c6919b997095d5b36131a897e4c0a83ae76d24" translate="yes" xml:space="preserve">
          <source>By default, the generator is initialized from &lt;code&gt;/dev/urandom&lt;/code&gt; if it is available, otherwise from CPU time, wall clock time, and the current fraction of a second. Note that this differs from &lt;small&gt;MATLAB&lt;/small&gt;, which always initializes the state to the same state at startup. To obtain behavior comparable to &lt;small&gt;MATLAB&lt;/small&gt;, initialize with a deterministic state vector in Octave&amp;rsquo;s startup files (see &lt;a href=&quot;startup-files#Startup-Files&quot;&gt;Startup Files&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47378aa96931f9ba6708afb4f2c89fa56e1321d" translate="yes" xml:space="preserve">
          <source>By default, the input array is interpreted as a hexadecimal number representing a double precision value. If fewer than 16 characters are given the strings are right padded with &lt;code&gt;'0'&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a5fcdb9f3c330ee418cac02ea34df92f250c8a" translate="yes" xml:space="preserve">
          <source>By default, these commands affect the current axis; alternatively, an axis can be specified by the optional argument &lt;var&gt;ax&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3803a40c878156f4d9d1817b93326275e04f6f01" translate="yes" xml:space="preserve">
          <source>By default, this command affects the current axis; alternatively, an axis can be specified by the optional argument &lt;var&gt;hax&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a45cdc61d443f1d99e6a8e08a1a5cac63e13810" translate="yes" xml:space="preserve">
          <source>ByteOrder</source>
          <target state="translated">ByteOrder</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="0bc3ee1876a596878e3b6f64a584499448527564" translate="yes" xml:space="preserve">
          <source>C = bitset (A, n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a14e061408d2bf9ce4fa57907726c8da1da7eb6" translate="yes" xml:space="preserve">
          <source>C = bitset (A, n, val)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49d4ba5e4f8e74b8eccb88ded467291b3d8cdea" translate="yes" xml:space="preserve">
          <source>C = convn (A, B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee56f1597039f0b9837b8eacbd7f39c2bc0e447" translate="yes" xml:space="preserve">
          <source>C = convn (A, B, shape)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cff0dea4c5615f3d244f70fc41d49a166f30d0" translate="yes" xml:space="preserve">
          <source>C = mat2cell (A, dim1, dim2, &amp;hellip;, dimi, &amp;hellip;, dimn)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff896167a3787020f945f29769f29ee26792001" translate="yes" xml:space="preserve">
          <source>C = mat2cell (A, rowdim)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5936ed6831a60d9118acd6694b3c622d5cc3a3" translate="yes" xml:space="preserve">
          <source>C = num2cell (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee17e6afe750b9904c9af574c8dcf51e245e12c" translate="yes" xml:space="preserve">
          <source>C = num2cell (A, dim)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ff6b3bd4be98cd506086c628c6692a3c32651f" translate="yes" xml:space="preserve">
          <source>C = pol2cart (&amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ad1dcb0e3c947d73baf8f19711b26e69e8ffee" translate="yes" xml:space="preserve">
          <source>C = sph2cart (&amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6905c704e24a018f82d99af5a9d4f63edd339b" translate="yes" xml:space="preserve">
          <source>C = textscan (fid, format)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74328f8d7d2c9eb405920deafc77f983d267db9" translate="yes" xml:space="preserve">
          <source>C = textscan (fid, format, param, value, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5330c52434a7a542d487b2fefe26a4e93bf25efd" translate="yes" xml:space="preserve">
          <source>C = textscan (fid, format, repeat)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e860ebaeca49904601901c0a83c1d94888d6d51" translate="yes" xml:space="preserve">
          <source>C = textscan (fid, format, repeat, param, value, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec7dec0586e51e6953d05dbeca4355dde4cff31" translate="yes" xml:space="preserve">
          <source>C = textscan (str, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3779eb92018083a391f9b20829772ba736116c7" translate="yes" xml:space="preserve">
          <source>C = who (&quot;pattern&quot;, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bcac8adff318084c8e98ed8e46417354a83b80" translate="yes" xml:space="preserve">
          <source>C++, C, and Fortran compilers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c711c5f24857e82930fb87a0780c4e69756903" translate="yes" xml:space="preserve">
          <source>C-/</source>
          <target state="translated">C-/</target>
        </trans-unit>
        <trans-unit id="84a189415a8ed8940815fea4b9d77692a6ff22eb" translate="yes" xml:space="preserve">
          <source>C-Style I/O Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec9d3dadc7abaeb1f5f16db2365b2aeb6a2f74b" translate="yes" xml:space="preserve">
          <source>C-_</source>
          <target state="translated">C-_</target>
        </trans-unit>
        <trans-unit id="3bff8fb1aa290267671b1c50e3b32db24f00b295" translate="yes" xml:space="preserve">
          <source>C-a</source>
          <target state="translated">C-a</target>
        </trans-unit>
        <trans-unit id="c204a76fc3c1123c96b13dd7ec922d02d4b00e91" translate="yes" xml:space="preserve">
          <source>C-b</source>
          <target state="translated">C-b</target>
        </trans-unit>
        <trans-unit id="b3b7965656c0921692a30673d7781acd51c4eed9" translate="yes" xml:space="preserve">
          <source>C-c</source>
          <target state="translated">C-c</target>
        </trans-unit>
        <trans-unit id="1d8e75405de8be939b05db3eef9ab4daa516674d" translate="yes" xml:space="preserve">
          <source>C-d</source>
          <target state="translated">C-d</target>
        </trans-unit>
        <trans-unit id="a7ef1e89e28b60bd53a0a5ab746fbcd131fdf224" translate="yes" xml:space="preserve">
          <source>C-e</source>
          <target state="translated">C-e</target>
        </trans-unit>
        <trans-unit id="dd71d43937255c2ba419c077fa824865f8267186" translate="yes" xml:space="preserve">
          <source>C-f</source>
          <target state="translated">C-f</target>
        </trans-unit>
        <trans-unit id="a8d14a9f4bc55d9a8a84935ad37682321efb17a6" translate="yes" xml:space="preserve">
          <source>C-h</source>
          <target state="translated">C-h</target>
        </trans-unit>
        <trans-unit id="d5eeac2f32301e2b964f421e02a44c5afa000881" translate="yes" xml:space="preserve">
          <source>C-k</source>
          <target state="translated">C-k</target>
        </trans-unit>
        <trans-unit id="2fef5b5a274737535a312ecc5d6b8de717c1cb77" translate="yes" xml:space="preserve">
          <source>C-l</source>
          <target state="translated">C-l</target>
        </trans-unit>
        <trans-unit id="aa3408adf600065cf33c17971e8cdd9f76e5d785" translate="yes" xml:space="preserve">
          <source>C-n</source>
          <target state="translated">C-n</target>
        </trans-unit>
        <trans-unit id="332268c029d8126391ff9151361238bdf44870d8" translate="yes" xml:space="preserve">
          <source>C-p</source>
          <target state="translated">C-p</target>
        </trans-unit>
        <trans-unit id="1666955c646a9bb3fabdb2404112bd45b66ccb34" translate="yes" xml:space="preserve">
          <source>C-q</source>
          <target state="translated">C-q</target>
        </trans-unit>
        <trans-unit id="74b18abb702cb69395f60707416dd8e1f9e92a32" translate="yes" xml:space="preserve">
          <source>C-r</source>
          <target state="translated">C-r</target>
        </trans-unit>
        <trans-unit id="78540d990eb5e51e46b3d550d8999b517398872e" translate="yes" xml:space="preserve">
          <source>C-s</source>
          <target state="translated">C-s</target>
        </trans-unit>
        <trans-unit id="68b4cf03a08cd7bf7acc0d39d68cca6ef0f409f3" translate="yes" xml:space="preserve">
          <source>C-t</source>
          <target state="translated">C-t</target>
        </trans-unit>
        <trans-unit id="0a23d9de112f4305bbf7d308788b4615cc11e2a2" translate="yes" xml:space="preserve">
          <source>C-v</source>
          <target state="translated">C-v</target>
        </trans-unit>
        <trans-unit id="8e0be97e2cc76979d93e15014888863a6e79a7af" translate="yes" xml:space="preserve">
          <source>C-w</source>
          <target state="translated">C-w</target>
        </trans-unit>
        <trans-unit id="f286461016d3e4db77e8a575a1f55b2d71886961" translate="yes" xml:space="preserve">
          <source>C-y</source>
          <target state="translated">C-y</target>
        </trans-unit>
        <trans-unit id="acbbb692ba3dcc7f0dd54066ac8990ff1950dc9c" translate="yes" xml:space="preserve">
          <source>C-z</source>
          <target state="translated">C-z</target>
        </trans-unit>
        <trans-unit id="43180da43f2637477932872d2d5fc136913ff600" translate="yes" xml:space="preserve">
          <source>C.T. Kelley,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45eeb8d006b7750ef8b9a5c95a126e79ee0a3130" translate="yes" xml:space="preserve">
          <source>C:\Octave\Octave-&lt;var&gt;version&lt;/var&gt;</source>
          <target state="translated">C:\Octave\Octave-&lt;var&gt;version&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="59f7686669646306d9ceed5361c800549d41c49a" translate="yes" xml:space="preserve">
          <source>C:\Program Files\Java\jre-10.0.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81969128cfe61342fa3c508a44e62676fc469316" translate="yes" xml:space="preserve">
          <source>CColVector.h</source>
          <target state="translated">CColVector.h</target>
        </trans-unit>
        <trans-unit id="ef51a56a228c22c4d9eedb0635e47a3b4105a503" translate="yes" xml:space="preserve">
          <source>CDF</source>
          <target state="translated">CDF</target>
        </trans-unit>
        <trans-unit id="b3702b8a92d8590d40eeb703ab15fdccf3d8990c" translate="yes" xml:space="preserve">
          <source>CMatrix.h</source>
          <target state="translated">CMatrix.h</target>
        </trans-unit>
        <trans-unit id="da0debcb20d8aa74a8e3ac4c7da6b8474dbfb542" translate="yes" xml:space="preserve">
          <source>CNDArray.h</source>
          <target state="translated">CNDArray.h</target>
        </trans-unit>
        <trans-unit id="6156cd6ac57d8b88e473d9202392ec064b623c93" translate="yes" xml:space="preserve">
          <source>COPYING</source>
          <target state="translated">COPYING</target>
        </trans-unit>
        <trans-unit id="bd1991a63ba909e81b7fc22eaf8fd5c3f39cf723" translate="yes" xml:space="preserve">
          <source>CRowVector.h</source>
          <target state="translated">CRowVector.h</target>
        </trans-unit>
        <trans-unit id="b38bed0f0e9601a07358ec72777da31f91720f2a" translate="yes" xml:space="preserve">
          <source>CTRL</source>
          <target state="translated">CTRL</target>
        </trans-unit>
        <trans-unit id="0d3c4f05eaf5a556eb5c902b8438caffbd8a42a9" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ./ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; with the fractional part rounded towards negative infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a85f48875a7dda1a27013d436c3f35626bf3bd5" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ./ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; with the fractional part rounded towards positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793a6ac453f17190a32fdad725af13a25a485ee1" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ./ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; with the fractional part rounded towards the nearest integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28f9d3b89b0b17d5a02a5cf5cb80c9d5f70afc" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ./ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; with the fractional part rounded towards zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529a9e6f05c9f0a2f051391e43c4f1769b413f27" translate="yes" xml:space="preserve">
          <source>Calculate a limited number of eigenvalues and eigenvectors of &lt;var&gt;A&lt;/var&gt;, based on a selection criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd58f64034f6f69939e52d7e6920b8d32825695" translate="yes" xml:space="preserve">
          <source>Calculate curl of vector field given by the arrays &lt;var&gt;fx&lt;/var&gt;, &lt;var&gt;fy&lt;/var&gt;, and &lt;var&gt;fz&lt;/var&gt; or &lt;var&gt;fx&lt;/var&gt;, &lt;var&gt;fy&lt;/var&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943369f39f212c2c0ac12bbed2abc8e2cdf6a54f" translate="yes" xml:space="preserve">
          <source>Calculate divergence of a vector field given by the arrays &lt;var&gt;fx&lt;/var&gt;, &lt;var&gt;fy&lt;/var&gt;, and &lt;var&gt;fz&lt;/var&gt; or &lt;var&gt;fx&lt;/var&gt;, &lt;var&gt;fy&lt;/var&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4b90196d4d7d4fdafa74fc89298d7ec15ac413" translate="yes" xml:space="preserve">
          <source>Calculate isosurface of 3-D volume data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cdf89edb593fb233a6c4fe66751a51a86affee" translate="yes" xml:space="preserve">
          <source>Calculate normals to an isosurface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09657ce58d9b2198825164d7e9056d18e6089653" translate="yes" xml:space="preserve">
          <source>Calculate the diffuse reflection strength of a surface defined by the normal vector elements &lt;var&gt;sx&lt;/var&gt;, &lt;var&gt;sy&lt;/var&gt;, &lt;var&gt;sz&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62296d66e7f39946c5f7cda9bf3ea46bf7b6997e" translate="yes" xml:space="preserve">
          <source>Calculate the discrete Laplace operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe418643f1fd6a2545fd0c1c0a4a30b0a3fe4e9" translate="yes" xml:space="preserve">
          <source>Calculate the gradient of sampled data or a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9657c87827cda262cd28afa6e19ebbe2b6c973" translate="yes" xml:space="preserve">
          <source>Calculate the hash value of the string &lt;var&gt;str&lt;/var&gt; using the hash function &lt;var&gt;hfun&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d2ba6edc2062498c9e19d3d2f808f02653864c" translate="yes" xml:space="preserve">
          <source>Calculate the moving average over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6700b45e4c1508ba7e35995686e8ac5c0d8c939" translate="yes" xml:space="preserve">
          <source>Calculate the moving maximum over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb7f91e829b13d971a94d491f83929cba11ae46" translate="yes" xml:space="preserve">
          <source>Calculate the moving mean absolute deviation over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2b3f8793a46192d397a8056b31d81e84c032fa" translate="yes" xml:space="preserve">
          <source>Calculate the moving median over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0683b3f4371ea8b414cb71634b9a13ab1d279dd6" translate="yes" xml:space="preserve">
          <source>Calculate the moving minimum over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0142bbcfeac74f7fbe50b3a2bca7769852b5ab9" translate="yes" xml:space="preserve">
          <source>Calculate the moving product over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996bea9b15a4f86abd6ac84da293a16df9af24f1" translate="yes" xml:space="preserve">
          <source>Calculate the moving standard deviation over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6817639f07088d6d34865b51b66e3bfd9396e080" translate="yes" xml:space="preserve">
          <source>Calculate the moving sum over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbcbe66fffa2f0100cc0331d1d2dc747456117e" translate="yes" xml:space="preserve">
          <source>Calculate the moving variance over a sliding window of length &lt;var&gt;wlen&lt;/var&gt; on data &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0019bd2fd07257a2da4472db2cd01476556f500" translate="yes" xml:space="preserve">
          <source>Calculate the specular reflection strength of a surface defined by the normal vector elements &lt;var&gt;sx&lt;/var&gt;, &lt;var&gt;sy&lt;/var&gt;, &lt;var&gt;sz&lt;/var&gt; using Phong&amp;rsquo;s approximation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe068f8b3f0a1fd41ee3216c03e5d3036d01384" translate="yes" xml:space="preserve">
          <source>Calculate the structural rank of the sparse matrix &lt;var&gt;S&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a286eadc2e27dc26207f598803d3027deb1668" translate="yes" xml:space="preserve">
          <source>Call Stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1b3181da9dbe56af5a63e4c6f844a748847242" translate="yes" xml:space="preserve">
          <source>Call by Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4a448254996dcc97493fd0f19cfd5b3828ddef" translate="yes" xml:space="preserve">
          <source>Call the base function &lt;var&gt;f&lt;/var&gt; even if &lt;var&gt;f&lt;/var&gt; is overloaded to another function for the given type signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a2f1096ac02fa3fdf796a592e8fddfbd0ef713" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after axes has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultaxescreatefcn&quot;, 'disp (&quot;axes created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929e70c2e2059ec55b85e981f603e8c0a0986cba" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after figure has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultfigurecreatefcn&quot;, 'disp (&quot;figure created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e3492b5b6cba54e0bcd746df8f457eefb64f42" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after image has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultimagecreatefcn&quot;, 'disp (&quot;image created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64da38086d9738639135d22d41d35b7f745c829f" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after light has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultlightcreatefcn&quot;, 'disp (&quot;light created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaf872849d385bde2e08e1ae3d88b0635f4e867" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after line has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultlinecreatefcn&quot;, 'disp (&quot;line created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9045e2769946952bd3b50bb7a47d3594c925a461" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after patch has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultpatchcreatefcn&quot;, 'disp (&quot;patch created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39a9a90ec8d6d61b8179071c8a47b9f2dd4178a" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after surface has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultsurfacecreatefcn&quot;, 'disp (&quot;surface created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc9e6af281ada9a82aa24c434b746bb9a448691" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after text has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaulttextcreatefcn&quot;, 'disp (&quot;text created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbac7e6e5927668aa114125ac5d3489169e6658" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uibuttongroup has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuibuttongroupcreatefcn&quot;, 'disp (&quot;uibuttongroup created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0585cadcbb24ff5c9ffb6f2d5aa8464bdd50ff5d" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uicontextmenu has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuicontextmenucreatefcn&quot;, 'disp (&quot;uicontextmenu created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec8ddfc01c31c3e3e8701585a7a8ce36ae0af91" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uicontrol has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuicontrolcreatefcn&quot;, 'disp (&quot;uicontrol created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861487152672614f63372fe0e22612215066a297" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uimenu has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuimenucreatefcn&quot;, 'disp (&quot;uimenu created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe3e1e8048cda56e41c3be449abff56d4b91ed1" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uipanel has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuipanelcreatefcn&quot;, 'disp (&quot;uipanel created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25db76d9a193a778265551c9fc11e00c7c97880a" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uipushtool has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuipushtoolcreatefcn&quot;, 'disp (&quot;uipushtool created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c7aafb9b9d2d8e62ede0d7303d1156c9d217d3" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uitable has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuitablecreatefcn&quot;, 'disp (&quot;uitable created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d434f1441e5eaff25c03aefee8c4d4fd699c55a" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uitoggletool has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuitoggletoolcreatefcn&quot;, 'disp (&quot;uitoggletool created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6e8a9150bdafe0058c75662781c7e83dbeb689" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately after uitoolbar has been created. Function is set by using default property on root object, e.g., &lt;code&gt;set (groot, &quot;defaultuitoolbarcreatefcn&quot;, 'disp (&quot;uitoolbar created!&quot;)')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac723a27eaa6d5d956c9e1298edc8c72fef8be67" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before axes is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfd4e046f4bfd982f8f440abd7268d90326051a" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before figure is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6fe6bbbd6a8d5523e10bcf3299add8663530ab" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before image is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf54166e9a9fd2bbb38417565180d582840239e" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before light is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c831fd5ac4f0e2bcde6f762a87a68d0bc259778a" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before line is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61428404d08e034df2b469cc0ee8e2091ff868f" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before patch is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30491750a02dbec85ff109258366d64722da8ca8" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before surface is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1e1ead4b00695924ca7a7dcb4d48eebc843dc0" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before text is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eff4548ca78832d9b38815d8f583833af5ce378" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uibuttongroup is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e793a69041722f18acba2224761698ad2aebe59" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uicontextmenu is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3aec7ef36e70de161b410e619458e89ec084d3" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uicontrol is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9250e1178e5bf704a18c13ab7becefac0db1a0" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uimenu is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3437aec29109f33bd1bd0bbf48c61f9c8c2031a3" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uipanel is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a020b362105bef8b3dd40189fd1247caf80ca69" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uipushtool is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32072de227d6c113abb4c98a4ade8d8d653315bb" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uitable is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a4876b7fe9d177b0165e89316115ce4634afab" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uitoggletool is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91800ff45795dc7265d1e8c3e1a729899f17a2ef" translate="yes" xml:space="preserve">
          <source>Callback function executed immediately before uitoolbar is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1718bf35828684b103e13288141bf3a64e8d573" translate="yes" xml:space="preserve">
          <source>Callback function executed when a keystroke event happens while the figure has focus. The actual key that was pressed can be retrieved using the second argument &amp;rsquo;evt&amp;rsquo; of the function. For information on how to write graphics listener functions see &lt;a href=&quot;callbacks#Callbacks&quot;&gt;Callbacks section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ee9aadf31aff099da6e69b4f34ab00b5ded762" translate="yes" xml:space="preserve">
          <source>Callback functions can be associated with graphics objects and triggered after certain events occur. The basic structure of all callback function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c09fcf74fb93ecb553ba6e0e1cfb39190a3317" translate="yes" xml:space="preserve">
          <source>Callback triggered when the figure window size is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabd18cfbad5221295b5120b5d8e7a1a1efe0df8" translate="yes" xml:space="preserve">
          <source>Callback triggered when the uibuttongroup size is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030a0b0e2970442dacfd83327f7453cad53fb37f" translate="yes" xml:space="preserve">
          <source>Callback triggered when the uipanel size is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="f51a7e219534723f05cad7e534309bab4c5ed52c" translate="yes" xml:space="preserve">
          <source>Callbacks can equally be added to properties with the &lt;code&gt;addlistener&lt;/code&gt; function described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e6091318a8550d7a843c10a7a935849404fb33" translate="yes" xml:space="preserve">
          <source>Called from within a function, return the number of arguments passed to the function. At the top level, return the number of command line arguments passed to Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd253119fa852ddc8b7be93318a0b3dc1f04365" translate="yes" xml:space="preserve">
          <source>Called from within a function, return the number of values the caller expects to receive. At the top level, &lt;code&gt;nargout&lt;/code&gt; with no argument is undefined and will produce an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baf6a2e1a7f393904ff7597a4b09403314f6e0f" translate="yes" xml:space="preserve">
          <source>Called with a fifth output argument and a sparse input matrix, &lt;code&gt;lu&lt;/code&gt; attempts to use a scaling factor &lt;var&gt;R&lt;/var&gt; on the input matrix such that &lt;code&gt;&lt;var&gt;P&lt;/var&gt; * (&lt;var&gt;R&lt;/var&gt; \ &lt;var&gt;A&lt;/var&gt;) * &lt;var&gt;Q&lt;/var&gt; = &lt;var&gt;L&lt;/var&gt; * &lt;var&gt;U&lt;/var&gt;&lt;/code&gt;. This typically leads to a sparser and more stable factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35897e565e7c832894af92c28cb7bb2d477f561" translate="yes" xml:space="preserve">
          <source>Called with a second argument, &lt;code&gt;etree&lt;/code&gt; also returns the postorder permutations on the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef16b36737ba01145c0f7570b9e7ee6d7e1d97e" translate="yes" xml:space="preserve">
          <source>Called with a single argument &lt;var&gt;cond&lt;/var&gt;, &lt;code&gt;assert&lt;/code&gt; produces an error if &lt;var&gt;cond&lt;/var&gt; is false (numeric zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0cab3374ba2f84f365a74daa99e8a94c982f76" translate="yes" xml:space="preserve">
          <source>Called with a single argument a square matrix of size &lt;var&gt;m&lt;/var&gt;-by-&lt;var&gt;m&lt;/var&gt; is created. If called with a single vector argument &lt;var&gt;sz&lt;/var&gt;, this argument is taken to be the size of the matrix to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4886df2ff4f543627992f833ce6cdf7b39a256e7" translate="yes" xml:space="preserve">
          <source>Called with a single argument, &lt;code&gt;matrix_type&lt;/code&gt; returns the type of the matrix and caches it for future use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e3bf54a270a9aced75c4414fd0e67239680e72" translate="yes" xml:space="preserve">
          <source>Called with a single argument, &lt;code&gt;shiftdim&lt;/code&gt;, removes the leading singleton dimensions, returning the number of dimensions removed in the second output argument &lt;var&gt;ns&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8198bbd64f7f80031f25f1b2723f2cee0d68e896" translate="yes" xml:space="preserve">
          <source>Called with a single axes handle argument &lt;var&gt;hax&lt;/var&gt;, the function makes &lt;var&gt;hax&lt;/var&gt; the current axes (as returned by &lt;code&gt;gca&lt;/code&gt;). It also makes the figure which contains &lt;var&gt;hax&lt;/var&gt; the current figure (as returned by &lt;code&gt;gcf&lt;/code&gt;). Finally, it restacks the parent object&amp;rsquo;s &lt;code&gt;children&lt;/code&gt; property so that the axes &lt;var&gt;hax&lt;/var&gt; appears before all other axes handles in the list. This causes &lt;var&gt;hax&lt;/var&gt; to be displayed on top of any other axes objects (Z-order stacking). In addition it restacks any legend or colorbar objects associated with &lt;var&gt;hax&lt;/var&gt; so that they are also visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae28b12dd3f29eec714cc659b6d196a47a24f13" translate="yes" xml:space="preserve">
          <source>Called with a single input argument, the nonzero diagonals &lt;var&gt;d&lt;/var&gt; of &lt;var&gt;A&lt;/var&gt; are extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534b3dddf27462cf20a0da875ff5a50743087f4f" translate="yes" xml:space="preserve">
          <source>Called with a single vector argument, produces a 3-D pie chart of the elements in &lt;var&gt;x&lt;/var&gt;. The size of the ith slice is the percentage that the element &lt;var&gt;x&lt;/var&gt;i represents of the total sum of &lt;var&gt;x&lt;/var&gt;: &lt;code&gt;pct = &lt;var&gt;x&lt;/var&gt;(i) / sum (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3745bda9379359174f29e22fe5f435cb1ae6f1" translate="yes" xml:space="preserve">
          <source>Called with more than one argument, &lt;code&gt;matrix_type&lt;/code&gt; allows the type of the matrix to be defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bce6c0f19dcd8a7dfda8c9e755725a544b46fc" translate="yes" xml:space="preserve">
          <source>Called with one output argument &lt;code&gt;chol&lt;/code&gt; fails if matrix &lt;var&gt;A&lt;/var&gt; is not positive definite. Note that if matrix &lt;var&gt;A&lt;/var&gt; is not real symmetric or complex Hermitian then the lower triangular part is considered to be the (complex conjugate) transpose of the upper triangular part, or vice versa, given the &lt;code&gt;&quot;lower&quot;&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab0b441c37ec845298f931f0aa5fdae4a5c4366" translate="yes" xml:space="preserve">
          <source>Called with two input arguments, if &lt;var&gt;S&lt;/var&gt; is the data and &lt;var&gt;j&lt;/var&gt; is the bin number for the data, compute the stats for each bin. In this case, bins can contain data values of zero, whereas with &lt;code&gt;spstats (&lt;var&gt;S&lt;/var&gt;)&lt;/code&gt; the zeros may disappear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509df93434f553e1c0e6af4bfd907adf9a6060d7" translate="yes" xml:space="preserve">
          <source>Called with two or more output arguments &lt;var&gt;p&lt;/var&gt; flags whether the matrix &lt;var&gt;A&lt;/var&gt; was positive definite and &lt;code&gt;chol&lt;/code&gt; does not fail. A zero value of &lt;var&gt;p&lt;/var&gt; indicates that matrix &lt;var&gt;A&lt;/var&gt; is positive definite and &lt;var&gt;R&lt;/var&gt; gives the factorization. Otherwise, &lt;var&gt;p&lt;/var&gt; will have a positive value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13067fb6d5ad7e778d3ea1b0e6d5e3c2454465bb" translate="yes" xml:space="preserve">
          <source>Called with two or more output arguments, returns the row and column permutations, such that &lt;code&gt;&lt;var&gt;S&lt;/var&gt;(&lt;var&gt;p&lt;/var&gt;, &lt;var&gt;q&lt;/var&gt;)&lt;/code&gt; is in block triangular form. The values of &lt;var&gt;r&lt;/var&gt; and &lt;var&gt;S&lt;/var&gt; define the boundaries of the blocks. If &lt;var&gt;S&lt;/var&gt; is square then &lt;code&gt;&lt;var&gt;r&lt;/var&gt; == &lt;var&gt;S&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b736e88be5c63bc915872b89e819d531210ebbbe" translate="yes" xml:space="preserve">
          <source>Called without a return argument, &lt;code&gt;peaks&lt;/code&gt; plots the surface of the above function using &lt;code&gt;surf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694186f0fd969674374470f47c16b2c0a53abab9" translate="yes" xml:space="preserve">
          <source>Called without a return argument, &lt;code&gt;sombrero&lt;/code&gt; plots the surface of the above function over the meshgrid [-8,8] using &lt;code&gt;surf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c50477dd7f6574ee3951e2f8ff10f14b432ec0" translate="yes" xml:space="preserve">
          <source>Called without any arguments, or with &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs, construct a new axes. The optional argument &lt;var&gt;hpar&lt;/var&gt; is a graphics handle specifying the parent for the new axes and may be a figure, uipanel, or uitab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a08528013f0c548578751d5228a0ef8e4a0c9e" translate="yes" xml:space="preserve">
          <source>Called without arguments &lt;code&gt;xlim&lt;/code&gt; returns the x-axis limits of the current plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2ceb37a1b7f73155d0f7c99174d084c6cf506b" translate="yes" xml:space="preserve">
          <source>Called without arguments the current color axis limits are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da744792bdc0e7bcd18ab4c7ed0330b101c0e816" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;chol&lt;/code&gt; using the optional &lt;code&gt;&quot;upper&quot;&lt;/code&gt; flag has the same behavior. In contrast, using the optional &lt;code&gt;&quot;lower&quot;&lt;/code&gt; flag, &lt;code&gt;chol&lt;/code&gt; returns the lower triangular factorization, computed by using the lower triangular part of matrix &lt;var&gt;A&lt;/var&gt;, such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4836c479878d692cb16cbadea4c5abec1fc102" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;error&lt;/code&gt; also sets Octave&amp;rsquo;s internal error state such that control will return to the top level without evaluating any further commands. This is useful for aborting from functions or scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f307aa4965bee27f774cbd735173ebe12b3c12b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;exec&lt;/code&gt; without first calling &lt;code&gt;fork&lt;/code&gt; will terminate your current Octave process and replace it with the program named by &lt;var&gt;file&lt;/var&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c19c471712f2e6a1883ba6d9f22b1fdec57450" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;eye&lt;/code&gt; with no arguments is equivalent to calling it with an argument of 1. Any negative dimensions are treated as zero. These odd definitions are for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be51cdabe740627c2780f2d73e174f57e7aef96e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;tetramesh (&amp;hellip;, &quot;property&quot;, &quot;value&quot;, &amp;hellip;)&lt;/code&gt; passes all property/value pairs directly to the patch function as additional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cae13b5e678caaf2f7d11420a6b7fc298706b0" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; in this way allows nested timing calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214cd5dbc84040470c757ed30f9187db3d529234" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;tic&lt;/code&gt; without an output argument resets the internal timer. Subsequent calls to &lt;code&gt;toc&lt;/code&gt; return the number of seconds since the timer was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81014d8e47d77d8b237e907b6b025bac05fb6bb" translate="yes" xml:space="preserve">
          <source>Calling External Code from Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd93d16c12d95a032e753483ed19bad24090498" translate="yes" xml:space="preserve">
          <source>Calling Forms: The &lt;code&gt;image&lt;/code&gt; function can be called in two forms: High-Level and Low-Level. When invoked with normal options, the High-Level form is used which first calls &lt;code&gt;newplot&lt;/code&gt; to prepare the graphic figure and axes. When the only inputs to &lt;code&gt;image&lt;/code&gt; are property/value pairs the Low-Level form is used which creates a new instance of an image object and inserts it in the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331a181d2a905ec455b36e2ffcf93945b85929b7" translate="yes" xml:space="preserve">
          <source>Calling Forms: The &lt;code&gt;imagesc&lt;/code&gt; function can be called in two forms: High-Level and Low-Level. When invoked with normal options, the High-Level form is used which first calls &lt;code&gt;newplot&lt;/code&gt; to prepare the graphic figure and axes. When the only inputs to &lt;code&gt;image&lt;/code&gt; are property/value pairs the Low-Level form is used which creates a new instance of an image object and inserts it in the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284c909d2774d98db262a32b0403d94db6a5c3ec" translate="yes" xml:space="preserve">
          <source>Calling Fortran code, however, can pose more difficulties. This is due to differences in the manner in which compilers treat the linking of Fortran code with C or C++ code. Octave supplies several macros that allow consistent behavior across a number of compilers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2b1f5f71d89e54c8503e6cf93a04999cc1b58a" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084d113051f7209497cea7c5d9475ef5941e7a9f" translate="yes" xml:space="preserve">
          <source>Calling Octave Functions from Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbaa4349f3a83387ac8f263e7cb9629b6098db2" translate="yes" xml:space="preserve">
          <source>Calling Other Functions in Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5182b609e44ec0a0ce9406e9603ea37f17ff6f" translate="yes" xml:space="preserve">
          <source>Calling a Function by its Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bea6ab5920c21e8ad80f838b9971fe769fb81fd" translate="yes" xml:space="preserve">
          <source>Calling this function using a statement like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76afa1e7f731b1a8959600026d413fa1eeec6584" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;scanf&lt;/code&gt; are superficially similar to calls to &lt;code&gt;printf&lt;/code&gt; in that arbitrary arguments are read under the control of a template string. While the syntax of the conversion specifications in the template is very similar to that for &lt;code&gt;printf&lt;/code&gt;, the interpretation of the template is oriented more towards free-format input and simple pattern matching, rather than fixed-field formatting. For example, most &lt;code&gt;scanf&lt;/code&gt; conversions skip over any amount of &amp;ldquo;white space&amp;rdquo; (including spaces, tabs, and newlines) in the input file, and there is no concept of precision for the numeric input conversions as there is for the corresponding output conversions. Ordinarily, non-whitespace characters in the template are expected to match characters in the input stream exactly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5eaec2d33da23955d3644576ceffd7e279bfd8c" translate="yes" xml:space="preserve">
          <source>Can I get the same functionality using the Octave scripting language alone?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f415612df73c30ea03635455919b25f001f6955" translate="yes" xml:space="preserve">
          <source>Can be set &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;. If disabled the menu entry cannot be selected and it is grayed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47b6563f145d6b09a44541c3a851021d38ea771" translate="yes" xml:space="preserve">
          <source>Can be set &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;. If enabled it draws a separator line above the current position. It is ignored for top level entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea4492689cd5cc2a73b1c83fd7f1f0332ae3a86" translate="yes" xml:space="preserve">
          <source>Can be set &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;. Sets a mark at this menu entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ed39ae8a65f256ba5ecb60dc9e505a4298f812" translate="yes" xml:space="preserve">
          <source>Capture a figure or axes as a movie frame structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e09324150bdb068d5fd0deb8d31c94b81b0cac" translate="yes" xml:space="preserve">
          <source>Case insensitive regular expression string matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdd89236492c3436d3c8caf80f674d767d58e9c" translate="yes" xml:space="preserve">
          <source>Case is significant in variable names. The symbols &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are distinct variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4654936350d6538d10a352b8037e76b8f945bd6f" translate="yes" xml:space="preserve">
          <source>Cases are exclusive, so they don&amp;rsquo;t &amp;lsquo;fall through&amp;rsquo; as do the cases in the &lt;code&gt;switch&lt;/code&gt; statement of the C language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc28fede606eef603fb7498465cddf910f08e54" translate="yes" xml:space="preserve">
          <source>Catching Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b399bd413c8dfe8688f37d0df1a1c1d399fe2a" translate="yes" xml:space="preserve">
          <source>Caution:</source>
          <target state="translated">Caution:</target>
        </trans-unit>
        <trans-unit id="2654c78127c1714959596bf019ef1b7ed3e325af" translate="yes" xml:space="preserve">
          <source>Caution: This option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95caec7917ddd6c6f6ad16138281e59b0cd42f03" translate="yes" xml:space="preserve">
          <source>Cell Array Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9cfcc4c757edc69de7425a450cbdc198cfeaa4" translate="yes" xml:space="preserve">
          <source>Cell Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883d4d6958914b18e60c5b0f1dd6c6b2c8be20e4" translate="yes" xml:space="preserve">
          <source>Cell Arrays in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0540005dc70a9b7fe55722d6f6aec9627b07fb" translate="yes" xml:space="preserve">
          <source>Cell Arrays of Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbbcf4d24355c653980c7bea4aa52b77ff08245" translate="yes" xml:space="preserve">
          <source>Cell Arrays with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31edc7bf4e53a5d2796f399a267c4323eef555f1" translate="yes" xml:space="preserve">
          <source>Cell array of class directories (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f63a6b2283e2539ca5f3a076c8a36eaf76498b3" translate="yes" xml:space="preserve">
          <source>Cell array of m-files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bb469efe546de6f4771836dfdaf8c1f0d83c15" translate="yes" xml:space="preserve">
          <source>Cell array of mat files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32607d3747e7e0263d74ebe5fcc28597b9c570d" translate="yes" xml:space="preserve">
          <source>Cell array of mdl files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f9e31f9eff41ba6674b3465b29cd549544560e" translate="yes" xml:space="preserve">
          <source>Cell array of mex files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e286206504bce5524a192a02cb806faccf8537" translate="yes" xml:space="preserve">
          <source>Cell array of oct files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d145009bf49a24147b2f1cb424c29f6283d4b557" translate="yes" xml:space="preserve">
          <source>Cell array of p-files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5831714a9054e6734b9031a1379769eec4d403" translate="yes" xml:space="preserve">
          <source>Cell array of package directories (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f80c9ba3e3db073ebdde7dd3a1bca9f06680e10" translate="yes" xml:space="preserve">
          <source>Cell array of slx files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0218dd3a4f77ba6732977fa5931e221c4fdfa9" translate="yes" xml:space="preserve">
          <source>Cell.h</source>
          <target state="translated">Cell.h</target>
        </trans-unit>
        <trans-unit id="b636549d967f240c2aecec7c5ffd0864831c552e" translate="yes" xml:space="preserve">
          <source>Center data by subtracting its mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f565a828dbfb085095351ed703d6b492997334f" translate="yes" xml:space="preserve">
          <source>Center of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958db058edbfda4bb65af6c17216161eb7f1a04b" translate="yes" xml:space="preserve">
          <source>Central Moment (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799e90c6dfa5a9410eee0fb8553e1dd364e26780" translate="yes" xml:space="preserve">
          <source>Century (00-99).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a527078c8659c6ec238cc6c3f541003bcdca9199" translate="yes" xml:space="preserve">
          <source>Change remote working directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ff3db430d1e32bc7eb061a85e016e7450a5318" translate="yes" xml:space="preserve">
          <source>Change the current working directory to &lt;var&gt;dir&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc351cea724bbd8165096ecb1cbb1b3ea2ac0dc" translate="yes" xml:space="preserve">
          <source>Change the name of file &lt;var&gt;old&lt;/var&gt; to &lt;var&gt;new&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4f21f2b888f8a63d4b3b9c51edc4f707ea98b5" translate="yes" xml:space="preserve">
          <source>Change the properties of the open file &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44831f5bf35b36257c65e764e2dbdf441966b03c" translate="yes" xml:space="preserve">
          <source>Change to the preferences folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fe7828d56d7a3ee4030d6cea057cf13f50e70c" translate="yes" xml:space="preserve">
          <source>ChangeLog</source>
          <target state="translated">ChangeLog</target>
        </trans-unit>
        <trans-unit id="d3c981c88c6445b87d820640151e25d2c382cf5d" translate="yes" xml:space="preserve">
          <source>Changes to any of these properties are propagated to the other members of the bar series and to the baseline itself. Equally, changes in the properties of the base line itself are propagated to the members of the corresponding bar series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c262596d61423214dd7565a77789b60b0ca42b83" translate="yes" xml:space="preserve">
          <source>Changes to any of these property are propagated to the other members of the bar series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e05adf314480e7ce4b02fde8080437a628ae382" translate="yes" xml:space="preserve">
          <source>Changes to any of these property are propagated to the other members of the stem series and to the baseline itself. Equally changes in the properties of the base line itself are propagated to the members of the corresponding stem series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d1ca352129dc3b61bd423902267766f4be7548" translate="yes" xml:space="preserve">
          <source>Changing modes of a visible figure may cause the figure to close and reopen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8330f2c17b4f49c4ab1ca5adbc94ddd950b9e29" translate="yes" xml:space="preserve">
          <source>Character Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f448d7945113ebd562f7ac0c2bd76869689d823" translate="yes" xml:space="preserve">
          <source>Character Class Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddfbf26b6add60712f56f908ac34df9e0fe4aaa" translate="yes" xml:space="preserve">
          <source>Character Strings in Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84388f2fe328697295a72f5aa94b5c9ab6edad4b" translate="yes" xml:space="preserve">
          <source>Character Strings in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa17410341c773958ab0b06148ed01369e49360" translate="yes" xml:space="preserve">
          <source>Characteristics</source>
          <target state="translated">Characteristics</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="009aa8d74ef9d7e074d569ad9461679939a9fbad" translate="yes" xml:space="preserve">
          <source>Characters in the template string that are not part of a conversion specification are printed as-is to the output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127f5b29d08f9b449007c109a85df4b20e75bc91" translate="yes" xml:space="preserve">
          <source>Check block only if Octave was compiled with feature &lt;code&gt;HAVE_XXX&lt;/code&gt;. &lt;code&gt;RUNTIME_COND&lt;/code&gt; is an optional expression to evaluate to check whether some condition is met when the test is executed. If &lt;code&gt;RUNTIME_COND&lt;/code&gt; is false, the test is skipped. If &lt;code&gt;&amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is present, the test block is interpreted as for &lt;code&gt;xtest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258f7985d4050c671c74ff132a8fdad2c086e33b" translate="yes" xml:space="preserve">
          <source>Check block, report a test failure but do not abort testing. If &lt;code&gt;&amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is present, then the text of the message is displayed if the test fails, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbc0ee1b9c7c80b99a8a6c928c2487500be608a" translate="yes" xml:space="preserve">
          <source>Check for correct error or warning message. If &lt;code&gt;&amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is supplied it is interpreted as a regular expression pattern that is expected to match the error or warning message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9d6c326b91f546077467c024dd6415697fef53" translate="yes" xml:space="preserve">
          <source>Check for correct number of input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2986364274c27dc04d10fab4dc3165335511738" translate="yes" xml:space="preserve">
          <source>Check for correct number of output arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5030b090c5c31bfc592540aadbb9f497335cd7" translate="yes" xml:space="preserve">
          <source>Check for the existence of &lt;var&gt;name&lt;/var&gt; as a variable, function, file, directory, or class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987d123ac91db016b9c5178f834f72de4820374f" translate="yes" xml:space="preserve">
          <source>Check for the presence of the Java &lt;var&gt;feature&lt;/var&gt; in the current session. Return an error structure if &lt;var&gt;feature&lt;/var&gt; is not available, not enabled, or not recognized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c4c16d23906297fccf1899a88e8330f490cbfb" translate="yes" xml:space="preserve">
          <source>Check installed Octave Forge packages against repository and update any outdated items. This requires an internet connection and the cURL library. Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88eb82edfc7805d46b552cbcf959ded244d5ff6a" translate="yes" xml:space="preserve">
          <source>Check only for built-in functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ce4045b4de6d56919c464fe49a955c7bfa2e1d" translate="yes" xml:space="preserve">
          <source>Check only for classes. (Note: This option is accepted, but not currently implemented)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886b390840510ed465081104d08139c26fb7c1dd" translate="yes" xml:space="preserve">
          <source>Check only for directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ae3bab4770895e48b91dee44c293797d60d2eb" translate="yes" xml:space="preserve">
          <source>Check only for files and directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3dc6c52e7e65d25fba38ec076f65eb27d10083" translate="yes" xml:space="preserve">
          <source>Check only for variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa89e0238f5b25a39b3f8243049642c74fbf7c76" translate="yes" xml:space="preserve">
          <source>Check that entire block is correct. If &lt;code&gt;&amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is present, the test block is interpreted as for &lt;code&gt;xtest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60c219dd59096e99616ef0ef67e49d779df3d3f" translate="yes" xml:space="preserve">
          <source>Check validity of input argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058e631c76e011515b45e2f147b373b66f330380" translate="yes" xml:space="preserve">
          <source>Checking the time stamp allows you to edit the definition of a function while Octave is running, and automatically use the new function definition without having to restart your Octave session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fff6c30ac387722576f87ee33a1c89a9369a0d" translate="yes" xml:space="preserve">
          <source>Chromaticities</source>
          <target state="translated">Chromaticities</target>
        </trans-unit>
        <trans-unit id="4bd954313cefe928618a22310bdbfbdc35253de0" translate="yes" xml:space="preserve">
          <source>Circularly shift the values of the array &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8122781312c86e3388436d3710f1b6f90dc1b3" translate="yes" xml:space="preserve">
          <source>Citing Octave in Publications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="3d9f77136533c6ff7b7e86c9e68a8e0e99ad867e" translate="yes" xml:space="preserve">
          <source>Class Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2c3f832156944b3d7f0b43450122f6aeb81881" translate="yes" xml:space="preserve">
          <source>Class constructor A function that constructs a user class as defined in chapter &lt;a href=&quot;object-oriented-programming#Object-Oriented-Programming&quot;&gt;Object Oriented Programming&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eeee113f38e1758a58d0313af182b57f8a50ede" translate="yes" xml:space="preserve">
          <source>Class functions for the FTP object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c479f79daf4f1cf0abd809c10b11665408b39b36" translate="yes" xml:space="preserve">
          <source>Class inheritance is provided by Octave using the &lt;code&gt;class&lt;/code&gt; function in the class constructor. As in the case of the polynomial class, the Octave programmer will create a structure that contains the data fields required by the class, and then call the &lt;code&gt;class&lt;/code&gt; function to indicate that an object is to be created from the structure. Creating a child of an existing object is done by creating an object of the parent class and providing that object as the third argument of the class function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40196e10b2c798ebac8e87acbe77cd824df5480c" translate="yes" xml:space="preserve">
          <source>Class method An overloaded function of a class as in chapter &lt;a href=&quot;object-oriented-programming#Object-Oriented-Programming&quot;&gt;Object Oriented Programming&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d80ef7f9b9df7c860dd88607091a2559b28c93" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;axes&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394d22b1952f72c5682e0652a01148f9db5fcd1d" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;figure&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472f27b3637e7386caf78f489519f005f35b179c" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;image&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcbed258db359695cd8f6a4ca9a29d9988af323" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;light&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2405575910209a64b07b793fc723eef40844162" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;line&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1305fff3ce2ffa21a9993b66eea3b499b25de3b9" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;patch&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0113ae4bd2d34883fde1af9a40b44f0905ed42" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;root&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685c01f690b66ad9751eb63036c4845ef9e1fa47" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;surface&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84725482e7358cff0c8c819f6ebc7d93a13e76bc" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;text&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f67b9ebf22ee4464e3b5684ca0416f7103dbee7" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uibuttongroup&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9f92528e1d35f028ec27d7c58935171b9564f9" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uicontextmenu&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e50341d71097d28b0b78f2e0079c76844a1aa97" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uicontrol&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e3c4c157360daec38513811b358a29bd9752ab" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uimenu&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abaa7edb5f5334a98351935507f472ea38d1fb7" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uipanel&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6261a4ae3bd2a9269d2babd2a4a13a7676e7fd67" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uipushtool&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204bafd7e28baefbd15f3b92f51fc3c1fe2749ba" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uitable&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f49c42d4e3ef5b27f656226109675915d7be5d" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uitoggletool&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34fdbfcf8e0fa8affb8e57b260513145a7a7baa" translate="yes" xml:space="preserve">
          <source>Class name of the graphics object. &lt;code&gt;type&lt;/code&gt; is always &lt;code&gt;&quot;uitoolbar&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13683a10bb50bf8022fd28aeb11e3bff068cf7ed" translate="yes" xml:space="preserve">
          <source>Classes can inherit from other classes. In this case all properties and methods of the superclass are inherited to the subclass, considering their access rights. Use this syntax to inherit from &lt;code&gt;superclass&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba08a63348758064029da616c75ea9b13eff8ca" translate="yes" xml:space="preserve">
          <source>Classes which are used only by a specific script should be placed in the &lt;var&gt;dynamic classpath&lt;/var&gt;. This portion of the classpath can be modified at runtime using the &lt;code&gt;javaaddpath&lt;/code&gt; and &lt;code&gt;javarmpath&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c95b58c5027599fe41a6dffbd2d4080b8064052" translate="yes" xml:space="preserve">
          <source>Clear all collected profiler data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bab3b464dae55c2c3cabfc5bf131db4f8c0988" translate="yes" xml:space="preserve">
          <source>Clear all local and global user-defined variables, and all functions from the symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae578a626f274fc7d01d6e3fcf5b9054ecd1e53" translate="yes" xml:space="preserve">
          <source>Clear all variables beginning with &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, except for those ending in &lt;code&gt;&quot;bar&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78a21cb7382693ad8b34dae33f8bb00bd02843a" translate="yes" xml:space="preserve">
          <source>Clear all variables except for &lt;code&gt;&quot;foobar&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a037c370f21335a5422749245f7d0eb36aa58a" translate="yes" xml:space="preserve">
          <source>Clear all variables starting with &lt;code&gt;'x'&lt;/code&gt; and the specific variable &lt;code&gt;&quot;foobar&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e2654d0c07b4795d05b4b00c822308bd2478f3" translate="yes" xml:space="preserve">
          <source>Clear function names from the function symbol table. Persistent variables will be re-initialized to their default value unless the function has been locked in memory with &lt;code&gt;mlock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69be4d2feb77550eb4e5158b916aabb4042f160e" translate="yes" xml:space="preserve">
          <source>Clear global variable names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e72d79bb15c115694e67ac00b8d400098c7631e" translate="yes" xml:space="preserve">
          <source>Clear local variable names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3976d72d93e95971b67bb1881ea3aeef9f2669c" translate="yes" xml:space="preserve">
          <source>Clear the class structure table and all objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19d7d3905433126f4ec4c5ca826f8e203b2a856" translate="yes" xml:space="preserve">
          <source>Clear the current figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471fa0aadc93719a49209c907112e98ad585efd0" translate="yes" xml:space="preserve">
          <source>Clear the current or specified (&lt;var&gt;hax&lt;/var&gt;) axes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca25643bdb3ea66149a2021a125481b14638d7a" translate="yes" xml:space="preserve">
          <source>Clear the history list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd5babfd59773e4b9a28a740b93b2702bf90485" translate="yes" xml:space="preserve">
          <source>Clear the screen, reprinting the current line at the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc0b2ff97eeadb207595336d652d0a8927c50c8" translate="yes" xml:space="preserve">
          <source>Clear the specific variable &lt;code&gt;&quot;foobar&quot;&lt;/code&gt; and use regular expressions to clear all variables starting with &lt;code&gt;'x'&lt;/code&gt; or &lt;code&gt;'y'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ead1a975e93618d0af9db931e93b625ca677ac" translate="yes" xml:space="preserve">
          <source>Clear the stream state for the file specified by the file descriptor &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620305c55919f357b6ae7a0baa6ea32deda8e54d" translate="yes" xml:space="preserve">
          <source>Clear the terminal screen and move the cursor to the upper left corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb661198944bd8f6cf3211fefc4bc52b31ed8103" translate="yes" xml:space="preserve">
          <source>Clear variables that do &lt;strong&gt;not&lt;/strong&gt; match the following pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88efcdb85edb4d4e9e4274c029e0ab2a0a812f9" translate="yes" xml:space="preserve">
          <source>Close FTP connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076f692f27bd56c2edbaf0c8c667c3e1a42371f1" translate="yes" xml:space="preserve">
          <source>Close a file identifier that was opened by &lt;code&gt;popen&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f90a5cbbfc115d82d5322551b94f1a7ea14652" translate="yes" xml:space="preserve">
          <source>Close a function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823e5ec215df07b75a7295de2227da6a66af92ec" translate="yes" xml:space="preserve">
          <source>Close figure window(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4ade73e33d2a4072e68f5d8ddd7c9dd73f7463" translate="yes" xml:space="preserve">
          <source>Close the FTP connection represented by the FTP object &lt;var&gt;f&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c987d36e1409f3f9a756155bf3f9805d5e909972" translate="yes" xml:space="preserve">
          <source>Close the current figure and delete all graphics objects associated with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20616d9f26dd2821312e8f0ee7b17d1211142cb" translate="yes" xml:space="preserve">
          <source>Close the file specified by the file descriptor &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fccd65aaaf0c54af49745a87ca175eb7f9d29e" translate="yes" xml:space="preserve">
          <source>Close the group database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea9641f8e79664484d3cef9a3c732ca5a8ff5e0" translate="yes" xml:space="preserve">
          <source>Close the password database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="5caa54db4f8c55fd7d8bd0c3e83f302ce295847b" translate="yes" xml:space="preserve">
          <source>Code like this appearing within a function body could fool Octave if definitions were resolved as the function was being compiled. It would be virtually impossible to make Octave clever enough to evaluate this code in a consistent fashion. The parser would have to be able to perform the call to &lt;code&gt;eval&lt;/code&gt; at compile time, and that would be impossible unless all the references in the string to be evaluated could also be resolved, and requiring that would be too restrictive (the string might come from user input, or depend on things that are not known until the function is evaluated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58882dff3be2688ad99f0e126d45d920b1da23b" translate="yes" xml:space="preserve">
          <source>Coefficients (matrix). The default is an array of ones. The number of rows is limited to the order of the piecewise polynomials, &lt;var&gt;order&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92f3c10394f5ebe8cff5b2fab088667e64ebcc8" translate="yes" xml:space="preserve">
          <source>Color Conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860aedaddc15ac876904d755880ae5aa53ed2457" translate="yes" xml:space="preserve">
          <source>Color of the axes background. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17f74f3d21c5a9fd32b460dadf54c544ca81205" translate="yes" xml:space="preserve">
          <source>Color of the background area. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a7b19f809655b57bb35b778911a046c9ce07f1" translate="yes" xml:space="preserve">
          <source>Color of the edge of the markers. When set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, the marker edges have the same color as the line. If set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;, no marker edges are displayed. This property can also be set to any color. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6405ee1bc2a0afd86574570302ea07cfd6b689" translate="yes" xml:space="preserve">
          <source>Color of the face of the markers. When set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, the marker faces have the same color as the line. If set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;, the marker faces are not displayed. This property can also be set to any color. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449a3c49cae5b17cb769f75388e9c75bdaf3c695" translate="yes" xml:space="preserve">
          <source>Color of the figure background. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31edb5eac6bf9d6a89d1164e277f1ce05b2f2c1" translate="yes" xml:space="preserve">
          <source>Color of the light source. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62bec715d1fc90a4c991ee4fab681e6257ee7d41" translate="yes" xml:space="preserve">
          <source>Color of the line object. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd813277c0b0191debb6c0bd1fe1d98e1fbeb592" translate="yes" xml:space="preserve">
          <source>Color of the outline of the background area. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12abae11cd3a253452828334aa84a763640dc88f" translate="yes" xml:space="preserve">
          <source>Color of the text. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c01d2126fbd81a2ab5b5a9f10c8fbfbab0a192" translate="yes" xml:space="preserve">
          <source>Color of the x-axis. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;. Setting &lt;code&gt;xcolor&lt;/code&gt; also forces the &lt;code&gt;xcolormode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b201e7bc8de9d2ff2d101f23b24162cfc9f818fe" translate="yes" xml:space="preserve">
          <source>Color of the y-axis. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf6c3cc7755a7a92c05bd3041f72a1f0760ed86" translate="yes" xml:space="preserve">
          <source>Color of the z-axis. See &lt;a href=&quot;colors#Colors&quot;&gt;colorspec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c954d30bbb03a2f35348a9d0019f9685d69d13" translate="yes" xml:space="preserve">
          <source>Color or monochrome output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9dbeb934d8d289956dc2758031783a1b6b75f50" translate="yes" xml:space="preserve">
          <source>ColorType</source>
          <target state="translated">ColorType</target>
        </trans-unit>
        <trans-unit id="b652170a22ac27c90891d2b0e1d9644d5a475787" translate="yes" xml:space="preserve">
          <source>Colormap</source>
          <target state="translated">Colormap</target>
        </trans-unit>
        <trans-unit id="403e66a501e0095e50c30cc3d5c29a050cdf0f25" translate="yes" xml:space="preserve">
          <source>Colormap for each image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d5e4cac104ffc3f02dd54f2f0f1074fd33fd9b" translate="yes" xml:space="preserve">
          <source>Colors</source>
          <target state="translated">Colors</target>
        </trans-unit>
        <trans-unit id="3fa5abcb057476a64bc9eb5808d6aaa09033c20d" translate="yes" xml:space="preserve">
          <source>Colors between patch vertices are interpolated and the patch edges are invisible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd032ea5d6f1c49040c2777aea0a6fcd04443d0b" translate="yes" xml:space="preserve">
          <source>Colors may be specified as RGB triplets with values ranging from zero to one, or by name. Recognized color names include &lt;code&gt;&quot;blue&quot;&lt;/code&gt;, &lt;code&gt;&quot;black&quot;&lt;/code&gt;, &lt;code&gt;&quot;cyan&quot;&lt;/code&gt;, &lt;code&gt;&quot;green&quot;&lt;/code&gt;, &lt;code&gt;&quot;magenta&quot;&lt;/code&gt;, &lt;code&gt;&quot;red&quot;&lt;/code&gt;, &lt;code&gt;&quot;white&quot;&lt;/code&gt;, and &lt;code&gt;&quot;yellow&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06930a473ea05c93aa65085aca65695c3260a653" translate="yes" xml:space="preserve">
          <source>Column-aligned (only applicable to command %s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d66ee1086c06d246a6c34139cc6b30cecdd4507" translate="yes" xml:space="preserve">
          <source>Column-sum modified incomplete LU factorization. The factorization preserves column sums: &lt;code&gt;e' * &lt;var&gt;A&lt;/var&gt; = e' * &lt;var&gt;L&lt;/var&gt; * &lt;var&gt;U&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048eb0fdb2b7b4f4b68de35ca6a0b7abe288127a" translate="yes" xml:space="preserve">
          <source>Combined with the implicit conversion to scalar values in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; conditions, Octave&amp;rsquo;s element-by-element boolean operators are often sufficient for performing most logical operations. However, it is sometimes desirable to stop evaluating a boolean expression as soon as the overall truth value can be determined. Octave&amp;rsquo;s &lt;em&gt;short-circuit&lt;/em&gt; boolean operators work this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66de71a069ae4ccaea7b1f1bf7499822e34306a3" translate="yes" xml:space="preserve">
          <source>Comma Separated Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e190d1c5440ead547321d94325bed8dfe93479" translate="yes" xml:space="preserve">
          <source>Comma Separated Lists Generated from Cell Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adee89f42746301bc891953907e7f80a1b191e8" translate="yes" xml:space="preserve">
          <source>Comma Separated Lists Generated from Structure Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc645acacd16aed4d63fb4eedb7746a59601ccb" translate="yes" xml:space="preserve">
          <source>Comma separated lists &lt;a href=&quot;#FOOT2&quot; name=&quot;DOCF2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; are the basic argument type to all Octave functions - both for input and return arguments. In the example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eade53354b1adec81bf7e3d86a7347adf5c7905" translate="yes" xml:space="preserve">
          <source>Comma separated lists cannot be directly manipulated by the user. However, both structure arrays and cell arrays can be converted into comma separated lists, and thus used in place of explicitly written comma separated lists. This feature is useful in many ways, as will be shown in the following subsections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa65b8f7fa915600e0454534ecd17aaff66c1eb" translate="yes" xml:space="preserve">
          <source>Comma-separated lists are also sometimes informally referred to as &lt;em&gt;cs-lists&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58a024ddf74da4e609ddb6cb105c407857b51c5" translate="yes" xml:space="preserve">
          <source>Command Line Editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b91918e82d5cef17a745f0886369f20996ba6c7" translate="yes" xml:space="preserve">
          <source>Command Line Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b1a7807e69edbc5162070a94ca4238153165e7" translate="yes" xml:space="preserve">
          <source>Command-line Function A function that has been defined on the command-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c57b9252c9846d2244ee4108418f2bb454cf8a" translate="yes" xml:space="preserve">
          <source>Command-line editing library (&lt;a href=&quot;https://www.gnu.org/s/readline&quot;&gt;https://www.gnu.org/s/readline&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="5e12815d0052e39c1d86d534ef8811a99eedb7ec" translate="yes" xml:space="preserve">
          <source>Commands are a special class of functions that only accept string input arguments. A command can be called as an ordinary function, but it can also be called without the parentheses. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92bf4c1a4cbc9c27043707f28521c1880cdd758" translate="yes" xml:space="preserve">
          <source>Commands are functions that may be called without surrounding their arguments in parentheses. Command descriptions have a format similar to function descriptions. For example, here is the description for Octave&amp;rsquo;s &lt;code&gt;diary&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7857f9f494923e16027d332ed801dd0e33f093f5" translate="yes" xml:space="preserve">
          <source>Commands for Changing Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f37148e098a2548347af40261980a3b2ef8f17e" translate="yes" xml:space="preserve">
          <source>Commands for Completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d42ff04602c13b89c4fd6a197e0534648d226e" translate="yes" xml:space="preserve">
          <source>Commands for Getting Help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3e105ef242e64c149cb8bed1b17462af36e133" translate="yes" xml:space="preserve">
          <source>Commands for History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138c90d03b56ee971109386c81a3942af2a3c5cf" translate="yes" xml:space="preserve">
          <source>Commands for Manipulating the History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153d7a58b3a3e898fcbdd04c462af308414bd09d" translate="yes" xml:space="preserve">
          <source>Comment</source>
          <target state="translated">Comment</target>
        </trans-unit>
        <trans-unit id="99879d46e2e23976542bd822d88e316e32f35f39" translate="yes" xml:space="preserve">
          <source>Comment.</source>
          <target state="translated">Comment.</target>
        </trans-unit>
        <trans-unit id="13457022269b601cbe69ab2322db7a11d6837934" translate="yes" xml:space="preserve">
          <source>Comment. Ignore everything within the block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="f5ae8183d7289fab845f8d94ef327b189a10475e" translate="yes" xml:space="preserve">
          <source>Comments and the Help System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d5d862bfb78ce1a725ffdfe99294b565bb7b8e" translate="yes" xml:space="preserve">
          <source>Comments in Octave Programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddf1bbcc4eeecfa89f06aaf7a866e1ac0c82c6c" translate="yes" xml:space="preserve">
          <source>Common constant names such as &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;Inf&lt;/code&gt; and Octave functions such as &lt;code&gt;sin&lt;/code&gt; or &lt;code&gt;plot&lt;/code&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0999040d01abbed880aa00f37df28771e1b5309d" translate="yes" xml:space="preserve">
          <source>Compare this with the numerical calculation of &lt;code&gt;inverse (hilb (n))&lt;/code&gt;, which suffers from the ill-conditioning of the Hilbert matrix, and the finite precision of your computer&amp;rsquo;s floating point arithmetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8193d31d318e6382bb53fc3d3890cd7dc53486c8" translate="yes" xml:space="preserve">
          <source>Compare two version strings using the given &lt;var&gt;operator&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb928e1bebba86b71320e1c658ff9d7c953182d" translate="yes" xml:space="preserve">
          <source>Comparing Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25acda77b0bc6b058bd349dd6f4a271e2a967bfe" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="translated">Operadores de comparación</target>
        </trans-unit>
        <trans-unit id="64e945410bd38eb8bc541fa4fe0d1a5601a0a7ba" translate="yes" xml:space="preserve">
          <source>Comparison Ops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d0338387ee8b8a4c6e15069ef6a9512de40f43" translate="yes" xml:space="preserve">
          <source>Compatibility Note: &lt;var&gt;matlab&lt;/var&gt; does not extend the definition of prime numbers and will produce an error if given negative or complex inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3fb85fc16026fcc7ede647ff6e67a5bfa5125a" translate="yes" xml:space="preserve">
          <source>Compatibility Note: Octave accepts complex values as input, whereas &lt;small&gt;MATLAB&lt;/small&gt; issues an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d1f721603155fc7cd7e17e488f1d600709bb3a" translate="yes" xml:space="preserve">
          <source>Compatibility Note: Octave does not support mdl, slx, and p files; nor does it support package directories. &lt;code&gt;what&lt;/code&gt; will always return an empty list for these categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8005c7b3e80d042aa125f056a8125d73657e7a3c" translate="yes" xml:space="preserve">
          <source>Compatibility Note: Octave opens files using buffered I/O. Small writes are accumulated until an internal buffer is filled, and then everything is written in a single operation. This is very efficient and improves performance. &lt;small&gt;MATLAB&lt;/small&gt;, however, opens files using flushed I/O where every write operation is immediately performed. If the write operation must be performed immediately after data has been written then the write should be followed by a call to &lt;code&gt;fflush&lt;/code&gt; to flush the internal buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d194af89793446f72587368fe644ae45bbc067f7" translate="yes" xml:space="preserve">
          <source>Compatibility Note: The &lt;small&gt;MATLAB&lt;/small&gt; function of the same name will also search for &lt;var&gt;f&lt;/var&gt; in the load path directories. To emulate this behavior use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5048b729735dbd06ab8ccc35653d08650afa89" translate="yes" xml:space="preserve">
          <source>Compatibility Note: The feature &lt;code&gt;&quot;desktop&quot;&lt;/code&gt; is never available since Octave has no Java-based desktop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4460f119798abb0a2b956f44d39b98a95e7995" translate="yes" xml:space="preserve">
          <source>Compatibility Note: When called with no arguments, &lt;small&gt;MATLAB&lt;/small&gt; prints the present working directory rather than changing to the user&amp;rsquo;s home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308d1b82c17751a7bd5a83a27eb077ab78a6ec6f" translate="yes" xml:space="preserve">
          <source>Compatibility Note:: Octave always treats rows of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; as multivariate random variables. For two inputs, however, &lt;small&gt;MATLAB&lt;/small&gt; treats &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; as two univariate distributions regardless of their shapes, and will calculate &lt;code&gt;cov ([&lt;var&gt;x&lt;/var&gt;(:), &lt;var&gt;y&lt;/var&gt;(:)])&lt;/code&gt; whenever the number of elements in &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are equal. This will result in a 2x2 matrix. Code relying on &lt;small&gt;MATLAB&lt;/small&gt;&amp;rsquo;s definition will need to be changed when running in Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64415126bb08c17f90d1e77587c2f80aa6942719" translate="yes" xml:space="preserve">
          <source>Compile but do not link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ad704b8171855287c3f5805aaf9d36d34a1aba" translate="yes" xml:space="preserve">
          <source>Compile source code written in C, C++, or Fortran, to a MEX file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8b0f8fde489f0120d75a0010610d9ad5706f24" translate="yes" xml:space="preserve">
          <source>Compiler framework, (&lt;a href=&quot;https://www.llvm.org&quot;&gt;https://www.llvm.org&lt;/a&gt;). LLVM is required for Octave&amp;rsquo;s experimental just-in-time (JIT) compilation for speeding up the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450fdefeef5575126c4e641267140a0ee3d01040" translate="yes" xml:space="preserve">
          <source>Complete loss of significance by argument reduction, return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c8f0c3ffadaee762fd68fc3c197e13b47e67b9" translate="yes" xml:space="preserve">
          <source>Complex Arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb3c1773b4f542b4b0147f3fb7fbfa19bf4bb10" translate="yes" xml:space="preserve">
          <source>Complex conjugate transpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ed34c575fb06b8fe27f9611185c5e956da59ca" translate="yes" xml:space="preserve">
          <source>Complex conjugate transpose. For real arguments, this operator is the same as the transpose operator. For complex arguments, this operator is equivalent to the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda5e42f953183022267c129c0be8550b98d5587" translate="yes" xml:space="preserve">
          <source>ComplexEqn</source>
          <target state="translated">ComplexEqn</target>
        </trans-unit>
        <trans-unit id="32e633ebb3b582b3a66267a27cc436ef6fabf57d" translate="yes" xml:space="preserve">
          <source>Complicated Octave programs can often be simplified by defining functions. Functions can be defined directly on the command line during interactive Octave sessions, or in external files, and can be called just like built-in functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d031f81c6527b29780b0df08b8a7b940dfbb3dcc" translate="yes" xml:space="preserve">
          <source>Compress the list of files and directories specified in &lt;var&gt;files&lt;/var&gt; into the ZIP archive &lt;var&gt;zipfile&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b446646e91f8daf009ee270474754274f0803bfb" translate="yes" xml:space="preserve">
          <source>Compress the list of files and directories specified in &lt;var&gt;files&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5955e6f41068c31d9310f6a1da6fea8e24602655" translate="yes" xml:space="preserve">
          <source>Compress the list of files specified in &lt;var&gt;files&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ead4045fbadbc2f0b37b6046e5803972459710" translate="yes" xml:space="preserve">
          <source>Compression</source>
          <target state="translated">Compression</target>
        </trans-unit>
        <trans-unit id="bbb80b4a2c008b2f82c93bf6cb960c6db0ac8988" translate="yes" xml:space="preserve">
          <source>Compression to use one the image. Can be one of the following: &quot;none&quot; (default), &quot;bzip&quot;, &quot;fax3&quot;, &quot;fax4&quot;, &quot;jpeg&quot;, &quot;lzw&quot;, &quot;rle&quot;, or &quot;deflate&quot;. Note that not all compression types are available for all image formats in which it defaults to your Magick library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ccb47f8f563f5493e903c081be4caa3ce55bef" translate="yes" xml:space="preserve">
          <source>Compression type. Value can be &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;bzip&quot;&lt;/code&gt;, &lt;code&gt;&quot;fax3&quot;&lt;/code&gt;, &lt;code&gt;&quot;fax4&quot;&lt;/code&gt;, &lt;code&gt;&quot;jpeg&quot;&lt;/code&gt;, &lt;code&gt;&quot;lzw&quot;&lt;/code&gt;, &lt;code&gt;&quot;rle&quot;&lt;/code&gt;, &lt;code&gt;&quot;deflate&quot;&lt;/code&gt;, &lt;code&gt;&quot;lzma&quot;&lt;/code&gt;, &lt;code&gt;&quot;jpeg2000&quot;&lt;/code&gt;, &lt;code&gt;&quot;jbig2&quot;&lt;/code&gt;, &lt;code&gt;&quot;jbig2&quot;&lt;/code&gt;, or &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26aaa35645fb564b496958b2c50db8717acc133f" translate="yes" xml:space="preserve">
          <source>CompressionMethod</source>
          <target state="translated">CompressionMethod</target>
        </trans-unit>
        <trans-unit id="0f5713843267327d0daef9ffa972e5b1bead8ac6" translate="yes" xml:space="preserve">
          <source>Computational geometry library (&lt;a href=&quot;http://www.qhull.org&quot;&gt;http://www.qhull.org&lt;/a&gt;). Qhull is required to provide the functions &lt;code&gt;convhull&lt;/code&gt;, &lt;code&gt;convhulln&lt;/code&gt;, &lt;code&gt;delaunay&lt;/code&gt;, &lt;code&gt;delaunayn&lt;/code&gt;, &lt;code&gt;voronoi&lt;/code&gt;, and &lt;code&gt;voronoin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe1352d8a3be53f2e4f736673f123435b1b0caf" translate="yes" xml:space="preserve">
          <source>Compute &lt;code&gt;&lt;var&gt;AA&lt;/var&gt; = &lt;var&gt;DD&lt;/var&gt; \ &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;DD&lt;/var&gt;&lt;/code&gt; in which &lt;var&gt;AA&lt;/var&gt; is a matrix whose row and column norms are roughly equal in magnitude, and &lt;code&gt;&lt;var&gt;DD&lt;/var&gt; = &lt;var&gt;P&lt;/var&gt; * &lt;var&gt;D&lt;/var&gt;&lt;/code&gt;, in which &lt;var&gt;P&lt;/var&gt; is a permutation matrix and &lt;var&gt;D&lt;/var&gt; is a diagonal matrix of powers of two. This allows the equilibration to be computed without round-off. Results of eigenvalue calculation are typically improved by balancing first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a8dcacf20a2237d455a87b701478a8d4f64697" translate="yes" xml:space="preserve">
          <source>Compute &lt;code&gt;e^x&lt;/code&gt; for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3afd8442d11229b852ce5b423f2e04c541b1093" translate="yes" xml:space="preserve">
          <source>Compute &lt;code&gt;exp (&lt;var&gt;x&lt;/var&gt;) - 1&lt;/code&gt; accurately in the neighborhood of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08640b9d1e009be029c559ac0bb230ce61f1dedf" translate="yes" xml:space="preserve">
          <source>Compute &lt;code&gt;f(&lt;var&gt;S&lt;/var&gt;)&lt;/code&gt; for the nonzero values of &lt;var&gt;S&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5608ea1238cc4cb1db7d524f50252a4edca7219" translate="yes" xml:space="preserve">
          <source>Compute &lt;code&gt;log (1 + &lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; accurately in the neighborhood of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acec09287a4f0d9e56a8e71ec449d52539cd6217" translate="yes" xml:space="preserve">
          <source>Compute Airy functions of the first and second kind, and their derivatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4900c252d1f3b31f0d6854b6a8337f008a2b25a6" translate="yes" xml:space="preserve">
          <source>Compute Bessel functions of the first kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1937d2cf26508f83e1b2595a6afa9b1cc07d1a" translate="yes" xml:space="preserve">
          <source>Compute Bessel functions of the second kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3368bb5486c3caf89c9be0a594b5774a89acd481" translate="yes" xml:space="preserve">
          <source>Compute Bessel functions of the third kind (Hankel functions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636e9e9b882ba1b5fab9134df3e3f3d99d74b727" translate="yes" xml:space="preserve">
          <source>Compute Householder reflection vector &lt;var&gt;housv&lt;/var&gt; to reflect &lt;var&gt;x&lt;/var&gt; to be the j-th column of identity, i.e.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f859d5f5a9a526788a924d325b76fb67c83f933f" translate="yes" xml:space="preserve">
          <source>Compute Kendall&amp;rsquo;s &lt;var&gt;tau&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b227089af3fd9ab6b4b0cdaee960832e2ca58f" translate="yes" xml:space="preserve">
          <source>Compute N-dimensional Voronoi facets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dc445e85e19b65fe7fe70fcb411285856fe0e2" translate="yes" xml:space="preserve">
          <source>Compute QZ decomposition, generalized eigenvectors, and generalized eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6b35634c76cd39be4c3cd5d43bd4c6b3dbcd30" translate="yes" xml:space="preserve">
          <source>Compute Spearman&amp;rsquo;s rank correlation coefficient &lt;var&gt;rho&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd87be4fcf3941e88e87308b53244c2d8bb4223" translate="yes" xml:space="preserve">
          <source>Compute a generalized linear least squares fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a9623b3473d56f6399805f43c76deef0fa2828" translate="yes" xml:space="preserve">
          <source>Compute a matrix of correlation coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa47c7951ad8fe71850a4b89bb1ee3c431713b3d" translate="yes" xml:space="preserve">
          <source>Compute a signal from its short-time Fourier transform &lt;var&gt;y&lt;/var&gt; and a 3-element vector &lt;var&gt;c&lt;/var&gt; specifying window size, increment, and window type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581f8ddb2e848c5463280580633058479399598e" translate="yes" xml:space="preserve">
          <source>Compute and display a stem and leaf plot of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dc836edd501bc1a0d0fe1590beb6b418c96725" translate="yes" xml:space="preserve">
          <source>Compute area or volume of intersection of rectangles or N-D boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f72e2c4a34fc34691a2c0dd38fb24e6f8a54f5" translate="yes" xml:space="preserve">
          <source>Compute atan (&lt;var&gt;y&lt;/var&gt; / &lt;var&gt;x&lt;/var&gt;) for corresponding elements of &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70baea11e7f84b4152346e5d8dad85ec0c61eb8f" translate="yes" xml:space="preserve">
          <source>Compute atan (&lt;var&gt;y&lt;/var&gt; / &lt;var&gt;x&lt;/var&gt;) in degrees for corresponding elements from &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f867540178d810e4d9d2f4e34a665d75b4eadef7" translate="yes" xml:space="preserve">
          <source>Compute complete elliptic integrals of the first K(&lt;var&gt;m&lt;/var&gt;) and second E(&lt;var&gt;m&lt;/var&gt;) kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6902edd114448d0c307013389bfe8c11a560425c" translate="yes" xml:space="preserve">
          <source>Compute condition numbers of a matrix with respect to eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cd6b8d8d7999d49326f215ab03aaea89718f4f" translate="yes" xml:space="preserve">
          <source>Compute consistent implicit ODE initial conditions &lt;var&gt;y0_new&lt;/var&gt; and &lt;var&gt;yp0_new&lt;/var&gt; given initial guesses &lt;var&gt;y0&lt;/var&gt; and &lt;var&gt;yp0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5f7b41237eb464c316c3008a16fb8355dacf35" translate="yes" xml:space="preserve">
          <source>Compute contour lines (isolines of constant Z value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad36e357ee0e36cb688da2ef2940a7036955921" translate="yes" xml:space="preserve">
          <source>Compute derivative and integral weight matrices for orthogonal collocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3bad6a1a951b51c091ad1393de287b8254b148" translate="yes" xml:space="preserve">
          <source>Compute histogram counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b66103846748682452fe89872f2d106d9ebfe9c" translate="yes" xml:space="preserve">
          <source>Compute hyperbolic tangent for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2a156b60943bdd0f1a045fbbbae1aefcd38eb4" translate="yes" xml:space="preserve">
          <source>Compute isosurface colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cd9c2a96a87ac7794fd93162f177317288550b" translate="yes" xml:space="preserve">
          <source>Compute matrix of correlation coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e719557f57ab2f4e42cb46036ba4ea1f2a097817" translate="yes" xml:space="preserve">
          <source>Compute modified Bessel functions of the first kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97671388b33f3ae5ce5c532c6c2f8a20fb0a336" translate="yes" xml:space="preserve">
          <source>Compute modified Bessel functions of the second kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0b064d28212339ebe7bb15baf9389dedf4cb96" translate="yes" xml:space="preserve">
          <source>Compute products of matrix blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd2aa92c719e8bb97a901ce561450aa08d5fc5f" translate="yes" xml:space="preserve">
          <source>Compute the (ordinary) arithmetic mean. [default]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfbce564251cd2123bba1d5855d3a0f44ce76f8" translate="yes" xml:space="preserve">
          <source>Compute the 1-norm estimate of the reciprocal condition number as returned by &lt;small&gt;LAPACK&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb2c2e59f9e161473a258dc8709295ff614447f" translate="yes" xml:space="preserve">
          <source>Compute the &lt;em&gt;signum&lt;/em&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e06727662355931f5e65a3f1b6b99df32b30b1" translate="yes" xml:space="preserve">
          <source>Compute the &lt;var&gt;N&lt;/var&gt;th-order Pad&amp;eacute; approximant of the continuous-time delay &lt;var&gt;T&lt;/var&gt; in transfer function form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc64865abc32640543e142ab72c5c80a98a4d0a" translate="yes" xml:space="preserve">
          <source>Compute the &lt;var&gt;p&lt;/var&gt;-norm condition number of a matrix with respect to inversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04be0e06c126b0600c69b8f47f9c3d9da4b2c97" translate="yes" xml:space="preserve">
          <source>Compute the &lt;var&gt;p&lt;/var&gt;-th central moment of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8c542a22257fdd43cc261adc2fd78dc41b464a" translate="yes" xml:space="preserve">
          <source>Compute the Beta function for real inputs &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1c911a239bf514bd9ffc2dd9865c7cfc258793" translate="yes" xml:space="preserve">
          <source>Compute the Dawson (scaled imaginary error) function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1527523cd4caacd483734714990cf17d30e4b594" translate="yes" xml:space="preserve">
          <source>Compute the Delaunay triangulation for a 2-D or 3-D set of points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838ddf77822f32334bae02f110a88f41c4896274" translate="yes" xml:space="preserve">
          <source>Compute the Delaunay triangulation for an N-dimensional set of points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7715b8e46d12056b62bd855b4d0469e8f25738" translate="yes" xml:space="preserve">
          <source>Compute the Gamma function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975092887a831b96e09c1b7135592839b4ed3b64" translate="yes" xml:space="preserve">
          <source>Compute the Givens rotation matrix &lt;var&gt;G&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5c22f8f54dd7c4556d96077963e36760be771d" translate="yes" xml:space="preserve">
          <source>Compute the Givens rotation matrix for the two-element column vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fb3d90e69b1f46ebab901425e6f1348d10fe5d" translate="yes" xml:space="preserve">
          <source>Compute the Hessenberg decomposition of the matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912e01280306104bb238e5612050005b96989a4e" translate="yes" xml:space="preserve">
          <source>Compute the Hessenberg-triangular decomposition of the matrix pencil &lt;code&gt;(&lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt;)&lt;/code&gt;, returning &lt;code&gt;&lt;var&gt;aa&lt;/var&gt; = &lt;var&gt;q&lt;/var&gt; * &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;z&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;bb&lt;/var&gt; = &lt;var&gt;q&lt;/var&gt; * &lt;var&gt;B&lt;/var&gt; * &lt;var&gt;z&lt;/var&gt;&lt;/code&gt;, with &lt;var&gt;q&lt;/var&gt; and &lt;var&gt;z&lt;/var&gt; orthogonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31197ef3204e13b74775c9aaa33f5dfc4d739f3" translate="yes" xml:space="preserve">
          <source>Compute the Jacobi elliptic functions &lt;var&gt;sn&lt;/var&gt;, &lt;var&gt;cn&lt;/var&gt;, and &lt;var&gt;dn&lt;/var&gt; of complex argument &lt;var&gt;u&lt;/var&gt; and real parameter &lt;var&gt;m&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c99ba89ff0aa8f08ba27b7111f849358a64b85e" translate="yes" xml:space="preserve">
          <source>Compute the LU decomposition of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142954b4b7f6530819d6eb6a6698ebbaf92af48a" translate="yes" xml:space="preserve">
          <source>Compute the N-dimensional discrete Fourier transform of &lt;var&gt;A&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8324511ed27b25a2775fb5e04c717bf629671c28" translate="yes" xml:space="preserve">
          <source>Compute the QR factorization of &lt;var&gt;A&lt;/var&gt;, using standard &lt;small&gt;LAPACK&lt;/small&gt; subroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81f21118fb3e5ac078e90180ffa69b3a83f060f" translate="yes" xml:space="preserve">
          <source>Compute the QZ decomposition of a generalized eigenvalue problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817322b9e6b884b62bed42127ce55d0b986be17a" translate="yes" xml:space="preserve">
          <source>Compute the Schur decomposition of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e001e99ccf8b42d268e89875953b575c208b7b13" translate="yes" xml:space="preserve">
          <source>Compute the Z score of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab2013f766fd773b2b7c87a5e49c7a14c824726" translate="yes" xml:space="preserve">
          <source>Compute the area of intersection of rectangles in &lt;var&gt;a&lt;/var&gt; and rectangles in &lt;var&gt;b&lt;/var&gt;. N-dimensional boxes are supported in which case the volume, or hypervolume is computed according to the number of dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4cbe941333bac0d16938d305726e83c7491889" translate="yes" xml:space="preserve">
          <source>Compute the argument, i.e., angle of &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27f9f035269586edc81a3f4e1edcc84ec7e9f16" translate="yes" xml:space="preserve">
          <source>Compute the associated Legendre function of degree &lt;var&gt;n&lt;/var&gt; and order &lt;var&gt;m&lt;/var&gt; = 0 &amp;hellip; &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b47aedef8df2a01435f2f7ac0675e804037c531" translate="yes" xml:space="preserve">
          <source>Compute the bandwidth of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f08f277797929e4c010717ec8dc9d4357bf9aff" translate="yes" xml:space="preserve">
          <source>Compute the base-10 logarithm of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe6530ce55a88b8025e4b32d6cd96d233c25604" translate="yes" xml:space="preserve">
          <source>Compute the base-2 logarithm of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6012ebc47e2469965a121c92cc82edb63861a998" translate="yes" xml:space="preserve">
          <source>Compute the binomial coefficient of &lt;var&gt;n&lt;/var&gt; or list all possible combinations of a &lt;var&gt;set&lt;/var&gt; of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1038efff0eef9f3d00cd79659868daa2fee11f72" translate="yes" xml:space="preserve">
          <source>Compute the column approximate minimum degree permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a825f240ad536768e9326cb6c2052eb0e8eea0ac" translate="yes" xml:space="preserve">
          <source>Compute the companion matrix corresponding to polynomial coefficient vector &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a78b3796b9d2140df5cb8712e6a3795878f810" translate="yes" xml:space="preserve">
          <source>Compute the complementary error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375229d220be06395b67d3bd591df2fbba1aed75" translate="yes" xml:space="preserve">
          <source>Compute the convex hull of a 2-D or 3-D set of points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc046fcac7d79120ba5f2f0130c591bef965354" translate="yes" xml:space="preserve">
          <source>Compute the convex hull of the set of points &lt;var&gt;pts&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd4b44d0c783767342e1d285bd3ceabb59e5554" translate="yes" xml:space="preserve">
          <source>Compute the cosecant for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9f568cf51c2876d0679ae7098a0bb20755ec0b" translate="yes" xml:space="preserve">
          <source>Compute the cosecant for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1369851131412ace6dd659461bd53f4d73f338" translate="yes" xml:space="preserve">
          <source>Compute the cosine for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92326dff25cc4622985b9062d2a34ad257acf514" translate="yes" xml:space="preserve">
          <source>Compute the cosine for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13aca9c9ae534f57cad3607a8acc5e75d4f716c" translate="yes" xml:space="preserve">
          <source>Compute the cosine integral function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb366d070b758a04726a5038b2041d68fe9a43bc" translate="yes" xml:space="preserve">
          <source>Compute the cotangent for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20156e1f742b2c36d3fc069507e159ee1476dc6a" translate="yes" xml:space="preserve">
          <source>Compute the cotangent for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff0ac045c266c8394644490ee61cc56c256a953" translate="yes" xml:space="preserve">
          <source>Compute the covariance matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1ab753f27b11978f5779f7c47c0f07a538e216" translate="yes" xml:space="preserve">
          <source>Compute the determinant of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5470a03aebb79524c3c3730895a14b4f51d9de51" translate="yes" xml:space="preserve">
          <source>Compute the discrete Fourier transform of &lt;var&gt;x&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a713b90810c8b267a29102f9dc1c513e2d0c4bd3" translate="yes" xml:space="preserve">
          <source>Compute the dot product of two vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13813d78b25cabf4e9255a84ad7075f274741f9" translate="yes" xml:space="preserve">
          <source>Compute the eigenvalues (&lt;var&gt;lambda&lt;/var&gt;) and optionally the right eigenvectors (&lt;var&gt;V&lt;/var&gt;) and the left eigenvectors (&lt;var&gt;W&lt;/var&gt;) of a matrix or pair of matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9354736fe806b3282cb8d6044d061d1bd15e9a48" translate="yes" xml:space="preserve">
          <source>Compute the element-by-element square root of the sum of the squares of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4092048c4c008ce0a4f2b332452cf5391ca67a9d" translate="yes" xml:space="preserve">
          <source>Compute the error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63163f52441edd5fe2bc8f160c183494cc8a3f9d" translate="yes" xml:space="preserve">
          <source>Compute the exponent for the smallest power of two larger than the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adf49ace46555e6e2bf997807ab72964b1d6e4e" translate="yes" xml:space="preserve">
          <source>Compute the exponential integral.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4394854603ddc9dba18e523d07f8b057cf2647" translate="yes" xml:space="preserve">
          <source>Compute the fractional differences &lt;em&gt;(1-L)^d x&lt;/em&gt; where &lt;em&gt;L&lt;/em&gt; denotes the lag-operator and &lt;em&gt;d&lt;/em&gt; is greater than -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fef3c34a9a26b9fc65593f9b452c742756efa0a" translate="yes" xml:space="preserve">
          <source>Compute the generalized eigenvalues &lt;var&gt;lambda&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adbfbf1147b96c99cd50edb7d56532742cc698d" translate="yes" xml:space="preserve">
          <source>Compute the generalized singular value decomposition of (&lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a5fea86626d0a57c7ef97c9894d3c4688bc04d" translate="yes" xml:space="preserve">
          <source>Compute the geometric mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89eab1c33c98b9b64c70f0bc7b24da4f7a3e3db0" translate="yes" xml:space="preserve">
          <source>Compute the greatest common divisor of &lt;var&gt;a1&lt;/var&gt;, &lt;var&gt;a2&lt;/var&gt;, &amp;hellip;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c699d10fcdb9cb7754ccacebe26a4dcb8021d8b5" translate="yes" xml:space="preserve">
          <source>Compute the harmonic mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6516d97dcbcdb6f80ad5c6a110e7cfb0a35269a7" translate="yes" xml:space="preserve">
          <source>Compute the hyperbolic cosecant of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d94fd0e2febab1797d470d309fa9a3a90ba67a" translate="yes" xml:space="preserve">
          <source>Compute the hyperbolic cosine for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53fc52eb3d1498e1628c715ee08417db48aa503" translate="yes" xml:space="preserve">
          <source>Compute the hyperbolic cotangent of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929657cd0a8969d881016db38039a2b466f17fc5" translate="yes" xml:space="preserve">
          <source>Compute the hyperbolic secant of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc9e9dfbb9e09aa4294f3ced02de2e9504973ee" translate="yes" xml:space="preserve">
          <source>Compute the hyperbolic sine for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bc9e2af03e8259342e55fa0b2ca38b58e84a86" translate="yes" xml:space="preserve">
          <source>Compute the imaginary error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7eaec18cc674805860d75860c8b252d8947786" translate="yes" xml:space="preserve">
          <source>Compute the incomplete Cholesky factorization of the sparse square matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226fcbd6adad02d33ecf0818c32cb645a47e5bbc" translate="yes" xml:space="preserve">
          <source>Compute the incomplete LU factorization of the sparse square matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897ae1771fbda9e0fcb15e34bc9675a8dfc33766" translate="yes" xml:space="preserve">
          <source>Compute the incomplete beta function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26630839d1ed3e66626e30960ddacf9c2d5de367" translate="yes" xml:space="preserve">
          <source>Compute the integral of the piecewise polynomial struct &lt;var&gt;pp&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfdaaedebbe6efc5764481693b07980601bf2fe" translate="yes" xml:space="preserve">
          <source>Compute the inverse N-dimensional discrete Fourier transform of &lt;var&gt;A&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df187490fbce419a4b187fada3bcbd6ba20744dd" translate="yes" xml:space="preserve">
          <source>Compute the inverse complementary error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea9158fbf261726cfd4d3c4495e35e0ec4f6106" translate="yes" xml:space="preserve">
          <source>Compute the inverse cosecant in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b81622340d5619090dd8ae9a8364fe699f2dd1" translate="yes" xml:space="preserve">
          <source>Compute the inverse cosecant in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc2f1cc14a02d5881ec3319cf642e94756c56cb" translate="yes" xml:space="preserve">
          <source>Compute the inverse cosine in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b9182301bcdfa823c598649b27a4262a900908" translate="yes" xml:space="preserve">
          <source>Compute the inverse cosine in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaba9beb534b408f63d7c9424060138222ddbc8b" translate="yes" xml:space="preserve">
          <source>Compute the inverse cotangent in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125271e08c922dd1a52dc8b1cdef25f8d2dfeaaa" translate="yes" xml:space="preserve">
          <source>Compute the inverse cotangent in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bf3247bfa9e307d36746712138e275b9e70481" translate="yes" xml:space="preserve">
          <source>Compute the inverse discrete Fourier transform of &lt;var&gt;x&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0a90ea0f9518c6bc85d95258a8f5cbb31d7473" translate="yes" xml:space="preserve">
          <source>Compute the inverse error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab09827876bf203b75745796f7c305007d0881ef" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic cosecant of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b60163f8745458786d5fac3dd4f34661911567c" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic cosine for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a559e884f35a5aeff39ae71c30c1a3ecf090b0" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic cotangent of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce98b6469ae2b399652ef2bb621cfbb2aa1a52c" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic secant of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df59b012e079764d805ba53448b7b2337bdfe80" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic sine for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea7b7fb4090a1bd1006cadae09334afce4e8b63" translate="yes" xml:space="preserve">
          <source>Compute the inverse hyperbolic tangent for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d09a8baf0fbb977a153ddae4a76b727e028e21" translate="yes" xml:space="preserve">
          <source>Compute the inverse of the normalized incomplete beta function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc091f2fd7dbe31fde87892459da9d4f5100207" translate="yes" xml:space="preserve">
          <source>Compute the inverse of the normalized incomplete gamma function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422748b99fd6531810a19a5181fb2576098d9e0c" translate="yes" xml:space="preserve">
          <source>Compute the inverse of the square matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cfd58690eef486ff45522b46c50e220cf7c769" translate="yes" xml:space="preserve">
          <source>Compute the inverse of the symmetric positive definite matrix &lt;var&gt;A&lt;/var&gt; using the Cholesky factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de84ac057cae0bd54ef75b667c58c4d3cc4f837" translate="yes" xml:space="preserve">
          <source>Compute the inverse secant in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b6cdb70213a157daa92915dc046c1a9e9cffb9" translate="yes" xml:space="preserve">
          <source>Compute the inverse secant in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5153766fc96ce80153c9a64ef263d43cf7f1dc86" translate="yes" xml:space="preserve">
          <source>Compute the inverse sine in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d27182bee2deadbfaef58713296e874a76be3f" translate="yes" xml:space="preserve">
          <source>Compute the inverse sine in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3010f4fbb46d89beaa5bf38a59c6ffb1d048a200" translate="yes" xml:space="preserve">
          <source>Compute the inverse tangent in degrees for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e5fa04c6d19d4d1bf55d1235e66c913133d25d" translate="yes" xml:space="preserve">
          <source>Compute the inverse tangent in radians for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3bd36117cc24d53f35a4fe792e8c5b149e62c6" translate="yes" xml:space="preserve">
          <source>Compute the inverse two-dimensional discrete Fourier transform of &lt;var&gt;A&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42285ad79dbf05b9c770ad0ab0b8657d660479b4" translate="yes" xml:space="preserve">
          <source>Compute the least common multiple of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;, or of the list of all arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e23c210829e315aa78f333119c29335ba4fce56" translate="yes" xml:space="preserve">
          <source>Compute the magnitude of &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f168dc8fba3e3aafcb2168928f0f40784d02f8" translate="yes" xml:space="preserve">
          <source>Compute the matrix logarithm of the square matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75d2314b8207658084879e337d6d2ffff2f5e7a" translate="yes" xml:space="preserve">
          <source>Compute the matrix square root of the square matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce80d96f6be00c32574989d8f454ada0c30eb81a" translate="yes" xml:space="preserve">
          <source>Compute the mean of the elements of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55cf56072d30b44a0467bf1b3617965987df80f9" translate="yes" xml:space="preserve">
          <source>Compute the mean or median absolute deviation of the elements of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dfc649714d7cc58fafbfb2b587a168c61dbb11" translate="yes" xml:space="preserve">
          <source>Compute the mean square of the elements of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4925115b5f4b01a825882e237c24622e7fc0a1a5" translate="yes" xml:space="preserve">
          <source>Compute the median value of the elements of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df128859fd6faacb31b13c5744cb8c303679c8d" translate="yes" xml:space="preserve">
          <source>Compute the modulo of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fd6588c49c6ae267ebaedfc80b551307b30d99" translate="yes" xml:space="preserve">
          <source>Compute the most frequently occurring value in a dataset (mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f503f2aa5eaa88b0af0830550c096e6e94c009a0" translate="yes" xml:space="preserve">
          <source>Compute the natural logarithm of the Beta function for real inputs &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f87d65643204df9bceb5523bc98ce00ff55af40" translate="yes" xml:space="preserve">
          <source>Compute the natural logarithm, &lt;code&gt;ln (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;, for each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c409905a5827bc88c253f9f223d9d35c137f74" translate="yes" xml:space="preserve">
          <source>Compute the normalized incomplete gamma function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88b9868ac74c7496340df8e9384b0ef8ce14e46" translate="yes" xml:space="preserve">
          <source>Compute the p-norm of the matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fa46cd1be86472f50514adbacc18c5d5d985b6" translate="yes" xml:space="preserve">
          <source>Compute the piecewise &lt;var&gt;m&lt;/var&gt;-th derivative of a piecewise polynomial struct &lt;var&gt;pp&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c33d17eca6f558320b189f747dc0ac0df83ddaf" translate="yes" xml:space="preserve">
          <source>Compute the powerset (all subsets) of the set &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abda2b238e0c3ba684a84e30fe8bc27bd36aa04f" translate="yes" xml:space="preserve">
          <source>Compute the psi (polygamma) function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69715b5e06f5148b665ecf1d251d6202ccdeacd0" translate="yes" xml:space="preserve">
          <source>Compute the rank of matrix &lt;var&gt;A&lt;/var&gt;, using the singular value decomposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d6e7010634a9f4950c9f0f8a8853839fa66c49" translate="yes" xml:space="preserve">
          <source>Compute the real (non-complex) &lt;var&gt;n&lt;/var&gt;-th root of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2ce0c7c1daf971b18500ce1e4fbd3c60c82edb" translate="yes" xml:space="preserve">
          <source>Compute the real cube root of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bf9a5b1a4e19b5da9f73cac3af8dca140a2714" translate="yes" xml:space="preserve">
          <source>Compute the real-valued, element-by-element power operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6368831e99736db5246e0ae2ae1cb7d6e11594a6" translate="yes" xml:space="preserve">
          <source>Compute the roots of the polynomial &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43ceb6edf04cd887a49b30f341c1927fa18a16e" translate="yes" xml:space="preserve">
          <source>Compute the sample kurtosis of the elements of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ec381f1bb5c5e7e7a37b830d5802c1e5acfcc1" translate="yes" xml:space="preserve">
          <source>Compute the sample skewness of the elements of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf140dc00ac534715324f74a58f9f86e5e9f522a" translate="yes" xml:space="preserve">
          <source>Compute the scaled complementary error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296e71dd02e444641f4dd58d0dab89687b6d1b41" translate="yes" xml:space="preserve">
          <source>Compute the secant for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202d801927de60d1eabcb6f03422d1e4052f72bf" translate="yes" xml:space="preserve">
          <source>Compute the secant for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25752536fe01f2875f0101844d16c4e6ec33939" translate="yes" xml:space="preserve">
          <source>Compute the short-time Fourier transform of the vector &lt;var&gt;x&lt;/var&gt; with &lt;var&gt;num_coef&lt;/var&gt; coefficients by applying a window of &lt;var&gt;win_size&lt;/var&gt; data points and an increment of &lt;var&gt;inc&lt;/var&gt; points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7ba260330f97c8be481b5f11ae76eaf0187898" translate="yes" xml:space="preserve">
          <source>Compute the sinc function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4068cb7f3a393d0fa77fc03e760dcb558596eb49" translate="yes" xml:space="preserve">
          <source>Compute the sine for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db905cde9b1cc0dd32111c24c129ffef1ab4f55b" translate="yes" xml:space="preserve">
          <source>Compute the sine for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64979ea397b14a67d89b776ab00b115a9728ab70" translate="yes" xml:space="preserve">
          <source>Compute the sine integral function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9521836462c37d1746dce0d98f02c6e938e4954e" translate="yes" xml:space="preserve">
          <source>Compute the singular value decomposition of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b0c1587860d4ca0164b4d88bd6a181b8d08135" translate="yes" xml:space="preserve">
          <source>Compute the square root of each element of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af1131933583990d69c034c315d9ccaa487ff79" translate="yes" xml:space="preserve">
          <source>Compute the standard deviation of the elements of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727b3aef36501083f5113d407e70ad759adb7765" translate="yes" xml:space="preserve">
          <source>Compute the tangent for each element of &lt;var&gt;x&lt;/var&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e59d110a95adf929596139f798583ebe09f39f8" translate="yes" xml:space="preserve">
          <source>Compute the tangent for each element of &lt;var&gt;x&lt;/var&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3336ca4127699a49841394905709b25c4c257158" translate="yes" xml:space="preserve">
          <source>Compute the trace of &lt;var&gt;A&lt;/var&gt;, the sum of the elements along the main diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11001c087fb3308f8c2f907017c3cf348458fdc1" translate="yes" xml:space="preserve">
          <source>Compute the two-dimensional discrete Fourier transform of &lt;var&gt;A&lt;/var&gt; using a Fast Fourier Transform (FFT) algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95fc097d78c927bc87bf43becefe5f6004693fb" translate="yes" xml:space="preserve">
          <source>Compute the upper Cholesky factor, &lt;var&gt;R&lt;/var&gt;, of the real symmetric or complex Hermitian positive definite matrix &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e91718b97a2a5e6be4b9e630b9c4cc236dc853" translate="yes" xml:space="preserve">
          <source>Compute the variance of the elements of the vector &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55257ceac82385c5990e62b09485b58b6ad7b7e8" translate="yes" xml:space="preserve">
          <source>Compute the vector cross product of two 3-dimensional vectors &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0eb8b58e7957069c5f3a3c89389473df7bd5b7" translate="yes" xml:space="preserve">
          <source>Computer Graphics Metafile, Version 1, ANSI X3.122-1986</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaf5c78b094e34cf416cb855dff6bd18cb3fa6c" translate="yes" xml:space="preserve">
          <source>Computer Solution of Large Sparse Positive Definite Systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ef0d845171e09b9fddd99c73f68b62416ab3c6" translate="yes" xml:space="preserve">
          <source>Computing the Block Triangular Form of a Sparse Matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15da12ea571bc7b06c5c4c19fb0706bb0babdd52" translate="yes" xml:space="preserve">
          <source>Concatenating Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeb953eb7ef69ac491f2aa55c295d5bec25ce8b" translate="yes" xml:space="preserve">
          <source>Concept Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a785bdfa5d7a526157039f9fb681ff0ffd4ed291" translate="yes" xml:space="preserve">
          <source>Conceptually the result is calculated as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dccc7a23bcec4490ac468bb559285b7af42c7fc" translate="yes" xml:space="preserve">
          <source>Conceptually this is given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef911252b2b54a4efc7b77e9762bab972c2953f4" translate="yes" xml:space="preserve">
          <source>Confidence level used for the bounds of the confidence interval, &lt;var&gt;lci&lt;/var&gt; and &lt;var&gt;hci&lt;/var&gt;. Default is 0.05, i.e., 95% confidence interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd2d15b1658cc343709bf6b9f32e40673c1eb5f" translate="yes" xml:space="preserve">
          <source>Confirms that the argument &lt;var&gt;A&lt;/var&gt; is valid by belonging to one of &lt;var&gt;classes&lt;/var&gt;, and holding all of the &lt;var&gt;attributes&lt;/var&gt;. If it does not, an error is thrown, with a message formatted accordingly. The error message can be made further complete by the function name &lt;var&gt;fun_name&lt;/var&gt;, the argument name &lt;var&gt;arg_name&lt;/var&gt;, and its position in the input &lt;var&gt;arg_idx&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd0f8b3d2a6408d2c8a49ae6b8f6b5a09bf776c" translate="yes" xml:space="preserve">
          <source>Conformance to both TeX and &lt;small&gt;MATLAB&lt;/small&gt; with respect to the &lt;code&gt;\circ&lt;/code&gt; symbol is impossible. While TeX translates this symbol to Unicode 2218 (U+2218), &lt;small&gt;MATLAB&lt;/small&gt; maps this to Unicode 00B0 (U+00B0) instead. Octave has chosen to follow the TeX specification, but has added the additional symbol &lt;code&gt;\deg&lt;/code&gt; which maps to the degree symbol (U+00B0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f08d871506973f452f3d660cc715824c3d9488c" translate="yes" xml:space="preserve">
          <source>Connect to the FTP server &lt;var&gt;host&lt;/var&gt; with &lt;var&gt;username&lt;/var&gt; and &lt;var&gt;password&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234689549373f7183549d5c90cafd6e2fa6294e0" translate="yes" xml:space="preserve">
          <source>Consecutive separators and separators at boundaries result in empty strings, unless &lt;var&gt;strip_empty&lt;/var&gt; is true. The default value of &lt;var&gt;strip_empty&lt;/var&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb69384f43cfe12de3ac64acb4ad88b6fdef34ef" translate="yes" xml:space="preserve">
          <source>Consider a trivial problem with a tridiagonal matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7af2b812f486dfe50a783cc0bbb75a6324c11e" translate="yes" xml:space="preserve">
          <source>Consider how you might write &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; as m-files. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ceb62f6722406d567d293b6dd4f8a3bf4fdae3" translate="yes" xml:space="preserve">
          <source>Consider the following example which creates a 10-element row vector &lt;em&gt;a&lt;/em&gt; containing the values a(i) = sqrt (i).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a121a62f1b6c4e8dfcb6e8ba00f004643fec54a" translate="yes" xml:space="preserve">
          <source>Consider the following function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bf921b1ea08851a988f5ee0fef56432ac69340" translate="yes" xml:space="preserve">
          <source>Consider the following short example which introduces the basics of writing a C++ function that can be linked to Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab797f742198c31ccf899634ba1e75de428f9bcf" translate="yes" xml:space="preserve">
          <source>Consider the following short example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d891ae09628c9ed30ad3694ef76d87698c01c" translate="yes" xml:space="preserve">
          <source>Consistent initial slope vector for DAE solvers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72f9eb0e01e7c08732707a2237fcd7990ad86b8" translate="yes" xml:space="preserve">
          <source>Consistent with earlier advice, seek to use Octave built-in functions whenever possible for the best performance. This advice applies especially to the four functions above. For example, when adding two arrays together element-by-element one could use a handle to the built-in addition function &lt;code&gt;@plus&lt;/code&gt; or define an anonymous function &lt;code&gt;@(x,y) x + y&lt;/code&gt;. But, the anonymous function is 60% slower than the first method. See &lt;a href=&quot;operator-overloading#Operator-Overloading&quot;&gt;Operator Overloading&lt;/a&gt;, for a list of basic functions which might be used in place of anonymous ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48bacdccba5e280c6696d7c6d891eff2adb055b" translate="yes" xml:space="preserve">
          <source>Consolidate workspace memory in &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890cf8048e245f137fa5b7b31962ac51ec64b50d" translate="yes" xml:space="preserve">
          <source>Constrained column approximate minimum degree permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1af1807b70a53c300ec1b6deb910422677dbde" translate="yes" xml:space="preserve">
          <source>Constraining values at the locations &lt;var&gt;xc&lt;/var&gt;. The default is an array of zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256ba3787f0df2da093c09c33b9114e3b3bbce61" translate="yes" xml:space="preserve">
          <source>Constraints are linear combinations of derivatives of order 0 to &lt;var&gt;order&lt;/var&gt;-1 according to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7a61c34fcd1e4ad843a966a162031b8d49fa28" translate="yes" xml:space="preserve">
          <source>Construct a Hadamard matrix (Hn) of size &lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369b0b53ea9d50d5c023d2c9c060b01fc09a00b6" translate="yes" xml:space="preserve">
          <source>Construct a box with text inside. &lt;var&gt;pos&lt;/var&gt; specifies the &lt;code&gt;&quot;position&quot;&lt;/code&gt; property of the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d73d5c84ee5fbbc9a03c153a05a0e3d0bbece2" translate="yes" xml:space="preserve">
          <source>Construct a copy of the graphic objects associated with the handles &lt;var&gt;horig&lt;/var&gt; and return new handles &lt;var&gt;hnew&lt;/var&gt; to the new objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4dc2c901224b2dbcc1f43c8d18808bc671dcb1" translate="yes" xml:space="preserve">
          <source>Construct a double arrow. Vectors &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; specify the arrowhead coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bded5a9a83fe2a1a3ad6da19a4acb678bc524a85" translate="yes" xml:space="preserve">
          <source>Construct a graphics handle object &lt;var&gt;h&lt;/var&gt; from the structure &lt;var&gt;s&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdc19d278e36f70b35bff90dfbee0bf5491976d" translate="yes" xml:space="preserve">
          <source>Construct a list of unique strings from a list of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f186f6c87dce6861a461518b81cf4f256a43ff" translate="yes" xml:space="preserve">
          <source>Construct a piecewise polynomial (pp) structure from sample points &lt;var&gt;breaks&lt;/var&gt; and coefficients &lt;var&gt;coefs&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28716f56a8540a480fdd28645525b59c9374d54" translate="yes" xml:space="preserve">
          <source>Construct a rectangle. &lt;var&gt;pos&lt;/var&gt; specifies the &lt;code&gt;&quot;position&quot;&lt;/code&gt; property of the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b891f2551cc483715308441fedec9364e6fc0779" translate="yes" xml:space="preserve">
          <source>Construct a vector of repeated elements from &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c15369ea359d9cea20a0cfd01913c5f0ac1080" translate="yes" xml:space="preserve">
          <source>Construct an array of repeated elements from &lt;var&gt;x&lt;/var&gt; and repeat instructions &lt;var&gt;R_1&lt;/var&gt;, &amp;hellip;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515797695eb739654b69515df51dbef4e30c1fbb" translate="yes" xml:space="preserve">
          <source>Construct an arrow with a text label at the opposite end from the arrowhead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2d57b6964b7ceb74784cc2f9f71363755c7bd9" translate="yes" xml:space="preserve">
          <source>Construct an arrow. The second point in vectors &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; specifies the arrowhead coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960fb20196e4b1f85c4084937b059a950930dfaf" translate="yes" xml:space="preserve">
          <source>Construct an ellipse. &lt;var&gt;pos&lt;/var&gt; specifies the &lt;code&gt;&quot;position&quot;&lt;/code&gt; property of the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf80df8ecafba91a73505cf7d6394a7650f7a1a" translate="yes" xml:space="preserve">
          <source>Construct an orthogonal basis &lt;var&gt;u&lt;/var&gt; of a block Krylov subspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f600fa86cb1bf4f0b26607df1512fa8ee9465aaa" translate="yes" xml:space="preserve">
          <source>Constructed from matrices or vectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454539af2216411df213f5ff6811f9bbbbf206d2" translate="yes" xml:space="preserve">
          <source>Constructs a line. &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; must be two-element vectors specifying the x and y coordinates of the two ends of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cf84e14cf4bd9a7a17d9bf486af2b35ee3d556" translate="yes" xml:space="preserve">
          <source>Continuation Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7f86062b0cae6b1e06ebe7407176b5b584f71d" translate="yes" xml:space="preserve">
          <source>Continuous sample quantile methods 4 through 9, where &lt;var&gt;p&lt;/var&gt;(k) is the linear interpolation function respecting each method&amp;rsquo;s representative cdf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff41365f386a2a59a4ef983fef974972d5ef589f" translate="yes" xml:space="preserve">
          <source>Contour Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c294cef946c73bdf0df7baee217ec312c65c7a9" translate="yes" xml:space="preserve">
          <source>Contour group objects are created by the &lt;code&gt;contour&lt;/code&gt;, &lt;code&gt;contourf&lt;/code&gt;, and &lt;code&gt;contour3&lt;/code&gt; functions. They are also one of the handles returned by the &lt;code&gt;surfc&lt;/code&gt; and &lt;code&gt;meshc&lt;/code&gt; functions. The properties of the contour group are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3b921f4dfdb9c68059100d909bdfce9129ef3d" translate="yes" xml:space="preserve">
          <source>Control display of the axes border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c4ea0f073a1020ea71d51200acf98aac5d8221" translate="yes" xml:space="preserve">
          <source>Control error relative to the 2-norm of the solution, rather than its absolute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a57a33d1fc8935a31eb3a0c3e4bd30ec1c74953" translate="yes" xml:space="preserve">
          <source>Control mesh hidden line removal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef21379eac242bedeb13f17a046924cbd6f858a" translate="yes" xml:space="preserve">
          <source>Control the built-in profiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b62962ef97ca727c791cfd691235b84821be127" translate="yes" xml:space="preserve">
          <source>Control the display of plot grid lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326b2ed82135185b05f777742922d8886f80cdbd" translate="yes" xml:space="preserve">
          <source>Control the display of the figure menu bar at the top of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0499413ad6ad79026d6e6cd0d05f9743f6aa2ed" translate="yes" xml:space="preserve">
          <source>Control the display of the toolbar (along the bottom of the menubar) and the status bar. When set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, the display is based on the value of the &lt;code&gt;menubar&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5306aa792c90d65c9e5d7d31398b627978d33b0" translate="yes" xml:space="preserve">
          <source>Control the interactive 3-D rotation mode of a figure in the GUI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36df9accc0af69ceeff6c96ed08120de579c670a" translate="yes" xml:space="preserve">
          <source>Control the interactive panning mode of a figure in the GUI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea13ebc94c833d69c949d9f7f22ac73aaa87f374" translate="yes" xml:space="preserve">
          <source>Control the shape of the junction of line segments. This property currently only affects the printed output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea1a08a19e618f2d8db15906f993410ff2cbe4a" translate="yes" xml:space="preserve">
          <source>Control the variant of the base font used for text rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fca13496d186dc3e1111d14704354ada89515f" translate="yes" xml:space="preserve">
          <source>Control the way the &lt;code&gt;&quot;string&quot;&lt;/code&gt; property is interpreted. See &lt;a href=&quot;use-of-the-interpreter-property#XREFinterpreterusage&quot;&gt;Use of the interpreter property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e383f3096bb337553f157f3476d6b32ae89ba3" translate="yes" xml:space="preserve">
          <source>Control the way x/y/zticklabel properties are interpreted. See &lt;a href=&quot;use-of-the-interpreter-property#XREFinterpreterusage&quot;&gt;Use of the interpreter property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc51b7574370b97c51a1b279e1dfef48131c1962" translate="yes" xml:space="preserve">
          <source>Control the x axis location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512485d74906c40cef765e52767c2f620fd8a414" translate="yes" xml:space="preserve">
          <source>Control the y-axis location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b660f25ef999e5d7deff225dcd5ea1513e4332" translate="yes" xml:space="preserve">
          <source>Control variant of base font used for the axes title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ad3224f3033fa4cb1c8c404d78ace2d40c23ab" translate="yes" xml:space="preserve">
          <source>Control whether axes tick marks project &quot;in&quot; to the plot box or &quot;out&quot;. Setting &lt;code&gt;tickdir&lt;/code&gt; also forces the &lt;code&gt;tickdirmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173a3b583e59b71a45931049dc739ec52721238e" translate="yes" xml:space="preserve">
          <source>Control whether commands are displayed as they are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9679ea28a2e73fd4d65fe1a8bb28f6bbaa81ce" translate="yes" xml:space="preserve">
          <source>Control whether major x grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ffb93d8ef9db49680f9213c57398b8440574fb" translate="yes" xml:space="preserve">
          <source>Control whether major y grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd6b4c72a52b27b6cab1c603d9c7d976a6ac8e2" translate="yes" xml:space="preserve">
          <source>Control whether major z grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae59db6f8bee89956c1d54eb26d90c3fb4ea731" translate="yes" xml:space="preserve">
          <source>Control whether minor x grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9660a62e3fba1b854ef2a5d65a04a3f879dafdb" translate="yes" xml:space="preserve">
          <source>Control whether minor y grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83e4fd30a811fe84609f26cc17b8e45ff74ecf8" translate="yes" xml:space="preserve">
          <source>Control whether minor z grid lines are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fef01410d537bae9e62c8d46b07de1a0659a4c0" translate="yes" xml:space="preserve">
          <source>Control whether the axes has a surrounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9706449091f717d0f79bbe02bd2db7fe0dda6d64" translate="yes" xml:space="preserve">
          <source>Control whether the axes is drawn below child graphics objects (ticks, labels, etc. covered by plotted objects) or above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39654d605f90fc39b78eddd332af5c5a96bc64d5" translate="yes" xml:space="preserve">
          <source>Control whether the figure can be resized by dragging the window borders and corners using a mouse. When &lt;code&gt;resize&lt;/code&gt; is &lt;code&gt;&quot;off&quot;&lt;/code&gt; mouse interactions are disabled but the figure can still be resized by changing its &lt;code&gt;&quot;position&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0754ad03e37b7d185b0859cb712aa3d24658359" translate="yes" xml:space="preserve">
          <source>Control whether the font is italic or normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c968282755d7ec74dc92f43ebf03092397b24be6" translate="yes" xml:space="preserve">
          <source>Control whether the renderering engine used for printing is chosen automatically or specified by the &lt;code&gt;renderer&lt;/code&gt; property. See &lt;a href=&quot;printing-and-saving-plots#XREFprint&quot;&gt;print function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddba1aa2b8740846582df2425d6760f92e3d0f1" translate="yes" xml:space="preserve">
          <source>Control-C</source>
          <target state="translated">Control-C</target>
        </trans-unit>
        <trans-unit id="897889b212eb6a3a966881669444fec74fb9bade" translate="yes" xml:space="preserve">
          <source>Control-a</source>
          <target state="translated">Control-a</target>
        </trans-unit>
        <trans-unit id="371e551733dedafa4c4da0e5784863ceb810aa35" translate="yes" xml:space="preserve">
          <source>Control-p</source>
          <target state="translated">Control-p</target>
        </trans-unit>
        <trans-unit id="8c2057ae305f547709d2c01bdb94faf24132905f" translate="yes" xml:space="preserve">
          <source>Controlling Subprocesses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa60052d930fd03a01099a88d40a76a31c0c4a0f" translate="yes" xml:space="preserve">
          <source>Controls the &lt;code&gt;&quot;interpreter&quot;&lt;/code&gt; property of the text object used for displaying the message. The value must be &lt;code&gt;&quot;tex&quot;&lt;/code&gt; (default), &lt;code&gt;&quot;none&quot;&lt;/code&gt;, or &lt;code&gt;&quot;latex&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e4099c0911f7d27b9a430e2018f10fc4c84a8c" translate="yes" xml:space="preserve">
          <source>Controls the image region that is read. The value must be a cell array with two arrays of 3 elements &lt;code&gt;{[&lt;var&gt;rows&lt;/var&gt;], [&lt;var&gt;cols&lt;/var&gt;]}&lt;/code&gt;. The elements in the array are the start, increment, and end pixel to be read. If the increment value is omitted it defaults to 1. For example, the following are all equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e98a57b5f89d86c904342927e69ce58d2bc128" translate="yes" xml:space="preserve">
          <source>Controls whether &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NA&lt;/code&gt; values should be included (value: &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;), or excluded (value: &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt;), from the data passed to &lt;var&gt;fcn&lt;/var&gt;. The default is &lt;code&gt;&quot;includenan&quot;&lt;/code&gt;. Caution: The &lt;code&gt;&quot;omitnan&quot;&lt;/code&gt; option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="1695241e077a588ddc9600c15097348c721b1b75" translate="yes" xml:space="preserve">
          <source>Converged to a solution point. Relative gradient error is less than specified by &lt;code&gt;TolFun&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0abeb5184de72abcf7f885186094ef8cadbb99" translate="yes" xml:space="preserve">
          <source>Converged to a solution point. Relative residual error is less than specified by &lt;code&gt;TolFun&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945279a1788b3fcd42498799162ad6e037730743" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;cell&lt;/var&gt; to a structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993949a790b307feb0c9b700cda860f0a2c5d6a4" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;s&lt;/var&gt; from a string of digits in base &lt;var&gt;base&lt;/var&gt; to a decimal integer (base 10).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0630452f3d9674ad99047df02d1755f645db4a" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;val&lt;/var&gt; to data type &lt;var&gt;type&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757a6c9e142a540653b322eb399b51235309210f" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; into a rational approximation represented as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9af88c75ee5bb157eb44f45210073bba6c92a2e" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to 16-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c9caf8196c0ee5e7170e6ba5a5195dc2f8e8fe" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to 32-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b793fdc47ee073f5715c8063e26d4961558f8dca" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to 64-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c674cd905d1adc84727fa4ec6cd9a3827621b494" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to 8-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2157c3707755c4bd8a8832b9a82ccea8c53520b3" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to double precision type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c089b4daf50fa7a7666e54ec7c81068838de2b" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to single precision type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e044150f0796d29f3cebba6be29ea964e5ab39e9" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to unsigned 16-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fb9a47d6b335b3f0932282023050f5c21143b9" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to unsigned 32-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8797f61cd96ccc750bba1af22c0fa3eb85b945f7" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to unsigned 64-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9e749570e79c5e9fd661d6b8746a91652acb5e" translate="yes" xml:space="preserve">
          <source>Convert &lt;var&gt;x&lt;/var&gt; to unsigned 8-bit integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559a506951df81e62abe8b7aa24ad1690da6ab03" translate="yes" xml:space="preserve">
          <source>Convert UTF-8 string &lt;var&gt;utf8_str&lt;/var&gt; to byte stream using &lt;var&gt;codepage&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
